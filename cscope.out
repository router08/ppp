cscope 15 $HOME/repo/ppp -q 0000028977 0002851432
	@chat/chat.c

85 #i‚de‡
__STDC__


86 c⁄°

	)

89 #i‚de‡
löt


90 c⁄° 
	grcsid
[] = "$Id: chat.c,v 1.30 2004/01/17 05:47:55 carlsonj Exp $";

93 
	~<°dio.h
>

94 
	~<˘y≥.h
>

95 
	~<time.h
>

96 
	~<f˙é.h
>

97 
	~<sig«l.h
>

98 
	~<î∫o.h
>

99 
	~<°rög.h
>

100 
	~<°dlib.h
>

101 
	~<uni°d.h
>

102 
	~<sys/ty≥s.h
>

103 
	~<sys/°©.h
>

104 
	~<sy¶og.h
>

106 #i‚de‡
TERMIO


107 #unde‡
TERMIOS


108 
	#TERMIOS


	)

111 #ifde‡
TERMIO


112 
	~<ãrmio.h
>

114 #ifde‡
TERMIOS


115 
	~<ãrmios.h
>

118 
	#STR_LEN
 1024

	)

120 #i‚de‡
SIGTYPE


121 
	#SIGTYPE
 

	)

124 #unde‡
__P


125 #unde‡
__V


127 #ifde‡
__STDC__


128 
	~<°d¨g.h
>

129 
	#__V
(
x
Ë
	)
x

130 
	#__P
(
x
Ë
	)
x

132 
	~<v¨¨gs.h
>

133 
	#__V
(
x
Ë(
va_Æi°
Ë
va_d˛


	)

134 
	#__P
(
x
Ë()

	)

135 c⁄°

	)

138 #i‚de‡
O_NONBLOCK


139 
	#O_NONBLOCK
 
O_NDELAY


	)

142 #ifde‡
SUNOS


143 
sys_√º
;

144 *
sys_îæi°
[];

145 
	#memmove
(
to
, 
‰om
, 
n
Ë
	`bc›y
(‰om,Åo,Ç)

	)

146 
	#°ªº‹
(
n
Ë(()“Ë< 
sys_√º
? 
sys_îæi°
[(n)] :\

147 "unknow¿îr‹")

	)

151 
	#OPTION
(
c
,
v
Ë(
_O
&2&&**v?*(*v)++:!c||_O&4?0:(!(_O&1)&& \

152 (--
c
,++
v
),
_O
=4,c&&**v=='-'&&v[0][1]?*++*v=='-'\

153 &&!
v
[0][1]?(--
c
,++v,0):(
_O
=2,*(*v)++):0))

	)

154 
	#OPTARG
(
c
,
v
Ë(
_O
&2?**v||(++v,--c)?(_O=1,--c,*v++): \

155 (
_O
=4,(*)0):(*)0)

	)

156 
	#OPTONLYARG
(
c
,
v
Ë(
_O
&2&&**v?(_O=1,--c,*v++):(*)0)

	)

157 
	#ARG
(
c
,
v
Ë(c?(--c,*v++):(*)0)

	)

159 
	g_O
 = 0;

162 *
	g¥ogøm_«me
;

164 
	#MAX_ABORTS
 50

	)

165 
	#MAX_REPORTS
 50

	)

166 
	#DEFAULT_CHAT_TIMEOUT
 45

	)

168 
	gecho
 = 0;

169 
	gvîbo£
 = 0;

170 
	gto_log
 = 1;

171 
	gto_°dîr
 = 0;

172 
	gVîbo£
 = 0;

173 
	gquõt
 = 0;

174 
	gªp‹t
 = 0;

175 
	gu£_ív
 = 0;

176 
	gexô_code
 = 0;

177 
FILE
* 
	gªp‹t_Â
 = (FILE *) 0;

178 *
	gªp‹t_fûe
 = (*) 0;

179 *
	gch©_fûe
 = (*) 0;

180 *
	gph⁄e_num
 = (*) 0;

181 *
	gph⁄e_num2
 = (*) 0;

182 
	gtimeout
 = 
DEFAULT_CHAT_TIMEOUT
;

184 
	ghave_ây_∑ømëîs
 = 0;

186 #ifde‡
TERMIO


187 
	#ãrm_∑rms
 
ãrmio


	)

188 
	#gë_ãrm_∑øm
(
∑øm
Ë
	`io˘l
(0, 
TCGETA
,Ö¨am)

	)

189 
	#£t_ãrm_∑øm
(
∑øm
Ë
	`io˘l
(0, 
TCSETA
,Ö¨am)

	)

190 
ãrmio
 
	gßved_ây_∑ømëîs
;

193 #ifde‡
TERMIOS


194 
	#ãrm_∑rms
 
ãrmios


	)

195 
	#gë_ãrm_∑øm
(
∑øm
Ë
	`tcgë©å
(0,Ö¨am)

	)

196 
	#£t_ãrm_∑øm
(
∑øm
Ë
	`tc£èâr
(0, 
TCSANOW
,Ö¨am)

	)

197 
ãrmios
 
	gßved_ây_∑ømëîs
;

200 *
	gab‹t_°rög
[
MAX_ABORTS
], *
	gÁû_ªas⁄
 = (*)0,

201 
	gÁû_buf„r
[50];

202 
	gn_ab‹ts
 = 0, 
	gab‹t_√xt
 = 0, 
	gtimeout_√xt
 = 0, 
	gecho_√xt
 = 0;

203 
	g˛ór_ab‹t_√xt
 = 0;

205 *
	gªp‹t_°rög
[
MAX_REPORTS
] ;

206 
	gªp‹t_buf„r
[256] ;

207 
	gn_ªp‹ts
 = 0, 
	gªp‹t_√xt
 = 0, 
	gªp‹t_g©hîög
 = 0 ;

208 
	g˛ór_ªp‹t_√xt
 = 0;

210 
	gßy_√xt
 = 0, 
	ghup_√xt
 = 0;

212 *
dup_mem
 
__P
((*
b
, 
size_t
 
c
));

213 *
c›y_of
 
__P
((*
s
));

214 *
grow
 
__P
((*
s
, **
p
, 
size_t
 
Àn
));

215 
ußge
 
__P
(());

216 
msgf
 
__P
((c⁄° *
fmt
, ...));

217 
Áèl
 
__P
((
code
, c⁄° *
fmt
, ...));

218 
SIGTYPE
 
sigÆrm
 
__P
((
signo
));

219 
SIGTYPE
 
sigöt
 
__P
((
signo
));

220 
SIGTYPE
 
sigãrm
 
__P
((
signo
));

221 
SIGTYPE
 
sighup
 
__P
((
signo
));

222 
u«œrm
 
__P
(());

223 
öô
 
__P
(());

224 
£t_ây_∑ømëîs
 
__P
(());

225 
echo_°dîr
 
__P
(());

226 
bªak_£quí˚
 
__P
(());

227 
ãrmö©e
 
__P
((
°©us
));

228 
do_fûe
 
__P
((*
ch©_fûe
));

229 
gë_°rög
 
__P
((*
°rög
));

230 
put_°rög
 
__P
((*
s
));

231 
wrôe_ch¨
 
__P
((
c
));

232 
put_ch¨
 
__P
((
c
));

233 
gë_ch¨
 
__P
(());

234 
ch©_£nd
 
__P
((*
s
));

235 *
ch¨a˘î
 
__P
((
c
));

236 
ch©_ex≥˘
 
__P
((*
s
));

237 *
˛ón
 
__P
((*
s
, 
£ndög
));

238 
bªak_£quí˚
 
__P
(());

239 
ãrmö©e
 
__P
((
°©us
));

240 
∑ck_¨øy
 
__P
((**
¨øy
, 
íd
));

241 *
ex≥˘_°πok
 
__P
((*, *));

242 
vfmtmsg
 
__P
((*, , c⁄° *, 
va_li°
));

244 
maö
 
__P
((, *[]));

246 *
	$dup_mem
(
b
, 
c
)

247 *
b
;

248 
size_t
 
c
;

250 *
™s
 = 
	`mÆloc
 (
c
);

251 i‡(!
™s
)

252 
	`Áèl
(2, "memoryÉrror!");

254 
	`mem˝y
 (
™s
, 
b
, 
c
);

255  
™s
;

256 
	}
}

258 *
	$c›y_of
 (
s
)

259 *
s
;

261  
	`dup_mem
 (
s
, 
	`°æí
 (s) + 1);

262 
	}
}

265 *
	$grow
(
s
, 
p
, 
Àn
)

266 *
s
;

267 **
p
;

268 
size_t
 
Àn
;

270 
size_t
 
l
 = *
p
 - 
s
;

272 
s
 = 
	`ªÆloc
(s, 
Àn
);

273 i‡(!
s
)

274 
	`Áèl
(2, "memoryÉrror!");

275 *
p
 = 
s
 + 
l
;

276  
s
;

277 
	}
}

287 
	$maö
(
¨gc
, 
¨gv
)

288 
¨gc
;

289 **
¨gv
;

291 
›ti⁄
;

292 *
¨g
;

294 
¥ogøm_«me
 = *
¨gv
;

295 
	`tz£t
();

297 (
›ti⁄
 = 
	`OPTION
(
¨gc
, 
¨gv
)) != 0) {

298 
›ti⁄
) {

300 ++
echo
;

304 ++
u£_ív
;

308 ++
vîbo£
;

312 ++
Vîbo£
;

316 ++
to_°dîr
;

320 
to_log
 = 0;

324 i‡((
¨g
 = 
	`OPTARG
(
¨gc
, 
¨gv
)Ë!
NULL
)

325 
ch©_fûe
 = 
	`c›y_of
(
¨g
);

327 
	`ußge
();

331 i‡((
¨g
 = 
	`OPTARG
(
¨gc
, 
¨gv
)Ë!
NULL
)

332 
timeout
 = 
	`©oi
(
¨g
);

334 
	`ußge
();

338 
¨g
 = 
	`OPTARG
 (
¨gc
, 
¨gv
);

339 i‡(
¨g
) {

340 i‡(
ªp‹t_Â
 !
NULL
)

341 
	`f˛o£
 (
ªp‹t_Â
);

342 
ªp‹t_fûe
 = 
	`c›y_of
 (
¨g
);

343 
ªp‹t_Â
 = 
	`f›í
 (
ªp‹t_fûe
, "a");

344 i‡(
ªp‹t_Â
 !
NULL
) {

345 i‡(
vîbo£
)

346 
	`Ârötf
 (
ªp‹t_Â
, "Opening \"%s\"...\n",

347 
ªp‹t_fûe
);

348 
ªp‹t
 = 1;

354 i‡((
¨g
 = 
	`OPTARG
(
¨gc
, 
¨gv
)Ë!
NULL
)

355 
ph⁄e_num
 = 
	`c›y_of
(
¨g
);

357 
	`ußge
();

361 i‡((
¨g
 = 
	`OPTARG
(
¨gc
, 
¨gv
)Ë!
NULL
)

362 
ph⁄e_num2
 = 
	`c›y_of
(
¨g
);

364 
	`ußge
();

368 
	`ußge
();

375 i‡(
ªp‹t_Â
 =
NULL
)

376 
ªp‹t_Â
 = 
°dîr
;

378 i‡(
to_log
) {

379 #ifde‡
u…rix


380 
	`›ílog
("ch©", 
LOG_PID
);

382 
	`›ílog
("ch©", 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_LOCAL2
);

384 i‡(
vîbo£
)

385 
	`£éogmask
(
	`LOG_UPTO
(
LOG_INFO
));

387 
	`£éogmask
(
	`LOG_UPTO
(
LOG_WARNING
));

391 
	`öô
();

393 i‡(
ch©_fûe
 !
NULL
) {

394 
¨g
 = 
	`ARG
(
¨gc
, 
¨gv
);

395 i‡(
¨g
 !
NULL
)

396 
	`ußge
();

398 
	`do_fûe
 (
ch©_fûe
);

400 (
¨g
 = 
	`ARG
(
¨gc
, 
¨gv
)Ë!
NULL
) {

401 
	`ch©_ex≥˘
(
¨g
);

403 i‡((
¨g
 = 
	`ARG
(
¨gc
, 
¨gv
)Ë!
NULL
)

404 
	`ch©_£nd
(
¨g
);

408 
	`ãrmö©e
(0);

410 
	}
}

416 
	$do_fûe
 (
ch©_fûe
)

417 *
ch©_fûe
;

419 
löe˘
, 
£ndÊg
;

420 *
•
, *
¨g
, 
quŸe
;

421 
buf
 [
STR_LEN
];

422 
FILE
 *
cÂ
;

424 
cÂ
 = 
	`f›í
 (
ch©_fûe
, "r");

425 i‡(
cÂ
 =
NULL
)

426 
	`Áèl
(1, "%†-- o≥¿Áûed: %m", 
ch©_fûe
);

428 
löe˘
 = 0;

429 
£ndÊg
 = 0;

431 
	`fgës
(
buf
, 
STR_LEN
, 
cÂ
Ë!
NULL
) {

432 
•
 = 
	`°rchr
 (
buf
, '\n');

433 i‡(
•
)

434 *
•
 = '\0';

436 
löe˘
++;

437 
•
 = 
buf
;

441 i‡–*
•
 == '#' )

444 *
•
 != '\0') {

445 i‡(*
•
 == ' ' || *sp == '\t') {

446 ++
•
;

450 i‡(*
•
 == '"' || *sp == '\'') {

451 
quŸe
 = *
•
++;

452 
¨g
 = 
•
;

453 *
•
 !
quŸe
) {

454 i‡(*
•
 == '\0')

455 
	`Áèl
(1, "u¡îmö©ed quŸê÷öê%d)", 
löe˘
);

457 i‡(*
•
++ == '\\') {

458 i‡(*
•
 != '\0')

459 ++
•
;

464 
¨g
 = 
•
;

465 *
•
 != '\0' && *sp != ' ' && *sp != '\t')

466 ++
•
;

469 i‡(*
•
 != '\0')

470 *
•
++ = '\0';

472 i‡(
£ndÊg
)

473 
	`ch©_£nd
 (
¨g
);

475 
	`ch©_ex≥˘
 (
¨g
);

476 
£ndÊg
 = !sendflg;

479 
	`f˛o£
 (
cÂ
);

480 
	}
}

485 
	$ußge
()

487 
	`Ârötf
(
°dîr
, "\
: %†[-e] [-E] [-v] [-V] [-àtimeout] [-∏ªp‹t-fûe]\n\
[-TÖh⁄e-numbî] [-UÖh⁄e-numbî2] {-‡ch©-fûê| ch©-s¸ùt}\n", 
¥ogøm_«me
);

490 
	`exô
(1);

491 
	}
}

493 
	glöe
[1024];

498 
msgf
 
__V
((c⁄° *
fmt
, ...))

500 
va_li°
 
	g¨gs
;

502 #ifde‡
__STDC__


503 
va_°¨t
(
¨gs
, 
fmt
);

505 *
	gfmt
;

506 
va_°¨t
(
¨gs
);

507 
	gfmt
 = 
va_¨g
(
¨gs
, *);

510 
vfmtmsg
(
löe
, ÷öe), 
fmt
, 
¨gs
);

511 i‡(
	gto_log
)

512 
sy¶og
(
LOG_INFO
, "%s", 
löe
);

513 i‡(
	gto_°dîr
)

514 
Ârötf
(
°dîr
, "%s\n", 
löe
);

515 
va_íd
(
¨gs
);

522 
Áèl
 
__V
((
code
, c⁄° *
fmt
, ...))

524 
va_li°
 
	g¨gs
;

526 #ifde‡
__STDC__


527 
va_°¨t
(
¨gs
, 
fmt
);

529 
	gcode
;

530 *
	gfmt
;

531 
va_°¨t
(
¨gs
);

532 
	gcode
 = 
va_¨g
(
¨gs
, );

533 
	gfmt
 = 
va_¨g
(
¨gs
, *);

536 
vfmtmsg
(
löe
, ÷öe), 
fmt
, 
¨gs
);

537 i‡(
	gto_log
)

538 
sy¶og
(
LOG_ERR
, "%s", 
löe
);

539 i‡(
	gto_°dîr
)

540 
Ârötf
(
°dîr
, "%s\n", 
löe
);

541 
va_íd
(
¨gs
);

542 
ãrmö©e
(
code
);

545 
	gÆ¨med
 = 0;

547 
SIGTYPE
 
	$sigÆrm
(
signo
)

548 
signo
;

550 
Êags
;

552 
	`Æ¨m
(1);

553 
Æ¨med
 = 1;

554 
	`sig«l
(
SIGALRM
, 
sigÆrm
);

556 i‡((
Êags
 = 
	`f˙é
(0, 
F_GETFL
, 0)) == -1)

557 
	`Áèl
(2, "Can't get file mode flags on stdin: %m");

559 i‡(
	`f˙é
(0, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

560 
	`Áèl
(2, "Can't set file mode flags on stdin: %m");

562 i‡(
vîbo£
)

563 
	`msgf
("alarm");

564 
	}
}

566 
	$u«œrm
()

568 
Êags
;

570 i‡((
Êags
 = 
	`f˙é
(0, 
F_GETFL
, 0)) == -1)

571 
	`Áèl
(2, "Can't get file mode flags on stdin: %m");

573 i‡(
	`f˙é
(0, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
) == -1)

574 
	`Áèl
(2, "Can't set file mode flags on stdin: %m");

575 
	}
}

577 
SIGTYPE
 
	$sigöt
(
signo
)

578 
signo
;

580 
	`Áèl
(2, "SIGINT");

581 
	}
}

583 
SIGTYPE
 
	$sigãrm
(
signo
)

584 
signo
;

586 
	`Áèl
(2, "SIGTERM");

587 
	}
}

589 
SIGTYPE
 
	$sighup
(
signo
)

590 
signo
;

592 
	`Áèl
(2, "SIGHUP");

593 
	}
}

595 
	$öô
()

597 
	`sig«l
(
SIGINT
, 
sigöt
);

598 
	`sig«l
(
SIGTERM
, 
sigãrm
);

599 
	`sig«l
(
SIGHUP
, 
sighup
);

601 
	`£t_ây_∑ømëîs
();

602 
	`sig«l
(
SIGALRM
, 
sigÆrm
);

603 
	`Æ¨m
(0);

604 
Æ¨med
 = 0;

605 
	}
}

607 
	$£t_ây_∑ømëîs
()

609 #i‡
	`deföed
(
gë_ãrm_∑øm
)

610 
ãrm_∑rms
 
t
;

612 i‡(
	`gë_ãrm_∑øm
 (&
t
) < 0)

613 
	`Áèl
(2, "Can't getÅerminalÖarameters: %m");

615 
ßved_ây_∑ømëîs
 = 
t
;

616 
have_ây_∑ømëîs
 = 1;

618 
t
.
c_iÊag
 |
IGNBRK
 | 
ISTRIP
 | 
IGNPAR
;

619 
t
.
c_oÊag
 = 0;

620 
t
.
c_lÊag
 = 0;

621 
t
.
c_cc
[
VERASE
] =

622 
t
.
c_cc
[
VKILL
] = 0;

623 
t
.
c_cc
[
VMIN
] = 1;

624 
t
.
c_cc
[
VTIME
] = 0;

626 i‡(
	`£t_ãrm_∑øm
 (&
t
) < 0)

627 
	`Áèl
(2, "Can't setÅerminalÖarameters: %m");

629 
	}
}

631 
	$bªak_£quí˚
()

633 #ifde‡
TERMIOS


634 
	`tc£ndbªak
 (0, 0);

636 
	}
}

638 
	$ãrmö©e
(
°©us
)

639 
°©us
;

641 
ãrmö©ög
 = 0;

643 i‡(
ãrmö©ög
)

644 
	`exô
(
°©us
);

645 
ãrmö©ög
 = 1;

646 
	`echo_°dîr
(-1);

650 i‡(
ªp‹t_g©hîög
) {

651 
c
, 
ªp_Àn
;

653 
ªp_Àn
 = 
	`°æí
(
ªp‹t_buf„r
);

654 
ªp_Àn
 + 1 <(
ªp‹t_buf„r
)) {

655 
	`Æ¨m
(1);

656 
c
 = 
	`gë_ch¨
();

657 
	`Æ¨m
(0);

658 i‡(
c
 < 0 || 
	`is˙ål
(c))

660 
ªp‹t_buf„r
[
ªp_Àn
] = 
c
;

661 ++
ªp_Àn
;

663 
ªp‹t_buf„r
[
ªp_Àn
] = 0;

664 
	`Ârötf
 (
ªp‹t_Â
, "ch©: %s\n", 
ªp‹t_buf„r
);

666 i‡(
ªp‹t_fûe
 !(*Ë0 && 
ªp‹t_Â
 !(
FILE
 *Ë
NULL
) {

667 i‡(
vîbo£
)

668 
	`Ârötf
 (
ªp‹t_Â
, "Closög \"%s\".\n", 
ªp‹t_fûe
);

669 
	`f˛o£
 (
ªp‹t_Â
);

670 
ªp‹t_Â
 = (
FILE
 *Ë
NULL
;

673 #i‡
	`deföed
(
gë_ãrm_∑øm
)

674 i‡(
have_ây_∑ømëîs
) {

675 i‡(
	`£t_ãrm_∑øm
 (&
ßved_ây_∑ømëîs
) < 0)

676 
	`Áèl
(2, "Can'tÑestoreÅerminalÖarameters: %m");

680 
	`exô
(
°©us
);

681 
	}
}

686 *
	$˛ón
(
s
, 
£ndög
)

687 *
s
;

688 
£ndög
;

690 
cur_chr
;

691 *
s1
, *
p
, *
phch¨
;

692 
add_ªtu∫
 = 
£ndög
;

693 
size_t
 
Àn
 = 
	`°æí
(
s
) + 3;

695 
	#iso˘Æ
(
chr
Ë(((chrË>'0'Ë&& ((chrË<'7'))

	)

696 
	#iß umx
(
chr
) ((((chr) >= '0') && ((chr) <= '9')) \

697 || (((
chr
) >= 'a') && ((chr) <= 'z')) \

698 || (((
chr
) >= 'A') && ((chr) <= 'Z')) \

699 || (
chr
Ë='_')

	)

701 
p
 = 
s1
 = 
	`mÆloc
(
Àn
);

702 i‡(!
p
)

703 
	`Áèl
(2, "memoryÉrror!");

704 *
s
) {

705 
cur_chr
 = *
s
++;

706 i‡(
cur_chr
 == '^') {

707 
cur_chr
 = *
s
++;

708 i‡(
cur_chr
 == '\0') {

709 *
p
++ = '^';

712 
cur_chr
 &= 0x1F;

713 i‡(
cur_chr
 != 0) {

714 *
p
++ = 
cur_chr
;

719 i‡(
u£_ív
 && 
cur_chr
 == '$') {

720 
c
;

722 
phch¨
 = 
s
;

723 
	`iß umx
(*
s
))

724 
s
++;

725 
c
 = *
s
;

726 *
s
 = '\0';

727 
phch¨
 = 
	`gëív
(phchar);

728 *
s
 = 
c
;

729 i‡(
phch¨
) {

730 
Àn
 +
	`°æí
(
phch¨
);

731 
s1
 = 
	`grow
(s1, &
p
, 
Àn
);

732 *
phch¨
)

733 *
p
++ = *
phch¨
++;

738 i‡(
cur_chr
 != '\\') {

739 *
p
++ = 
cur_chr
;

743 
cur_chr
 = *
s
++;

744 i‡(
cur_chr
 == '\0') {

745 i‡(
£ndög
) {

746 *
p
++ = '\\';

747 *
p
++ = '\\';

752 
cur_chr
) {

754 *
p
++ = '\b';

758 i‡(
£ndög
 && *
s
 == '\0')

759 
add_ªtu∫
 = 0;

761 *
p
++ = 
cur_chr
;

768 i‡(
£ndög
)

769 *
p
++ = '\\';

770 *
p
++ = 
cur_chr
;

774 i‡(
£ndög
 && 
ph⁄e_num
) {

775 
Àn
 +
	`°æí
(
ph⁄e_num
);

776 
s1
 = 
	`grow
(s1, &
p
, 
Àn
);

777 
phch¨
 = 
ph⁄e_num
; *phchar != '\0';Öhchar++)

778 *
p
++ = *
phch¨
;

781 *
p
++ = '\\';

782 *
p
++ = 'T';

787 i‡(
£ndög
 && 
ph⁄e_num2
) {

788 
Àn
 +
	`°æí
(
ph⁄e_num2
);

789 
s1
 = 
	`grow
(s1, &
p
, 
Àn
);

790 
phch¨
 = 
ph⁄e_num2
; *phchar != '\0';Öhchar++)

791 *
p
++ = *
phch¨
;

794 *
p
++ = '\\';

795 *
p
++ = 'U';

800 
quõt
 = 1;

804 *
p
++ = '\r';

808 *
p
++ = '\n';

812 *
p
++ = ' ';

816 *
p
++ = '\t';

820 i‡(
£ndög
) {

821 *
p
++ = '\\';

822 *
p
++ = '\0';

825 *
p
++ = 'N';

829 i‡(
u£_ív
) {

830 *
p
++ = 
cur_chr
;

836 i‡(
	`iso˘Æ
 (
cur_chr
)) {

837 
cur_chr
 &= 0x07;

838 i‡(
	`iso˘Æ
 (*
s
)) {

839 
cur_chr
 <<= 3;

840 
cur_chr
 |*
s
++ - '0';

841 i‡(
	`iso˘Æ
 (*
s
)) {

842 
cur_chr
 <<= 3;

843 
cur_chr
 |*
s
++ - '0';

847 i‡(
cur_chr
 !0 || 
£ndög
) {

848 i‡(
£ndög
 && (
cur_chr
 == '\\' || cur_chr == 0))

849 *
p
++ = '\\';

850 *
p
++ = 
cur_chr
;

855 i‡(
£ndög
)

856 *
p
++ = '\\';

857 *
p
++ = 
cur_chr
;

862 i‡(
add_ªtu∫
)

863 *
p
++ = '\r';

865 *
p
 = '\0';

866  
s1
;

867 
	}
}

873 *
	$ex≥˘_°πok
 (
s
, 
ãrm
)

874 *
s
, *
ãrm
;

876 *
°r
 = "";

877 
esˇ≥_Êag
 = 0;

878 *
ªsu…
;

883 i‡(
s
)

884 
°r
 = 
s
;

889 i‡(*
°r
)

890 
ªsu…
 = 
°r
;

892 
ªsu…
 = (*) 0;

894 *
°r
) {

895 i‡(
esˇ≥_Êag
) {

896 
esˇ≥_Êag
 = 0;

897 ++
°r
;

901 i‡(*
°r
 == '\\') {

902 ++
°r
;

903 
esˇ≥_Êag
 = 1;

910 i‡(
	`°rchr
 (
ãrm
, *
°r
) == (*) 0) {

911 ++
°r
;

918 *
°r
++ = '\0';

921  (
ªsu…
);

922 
	}
}

928 
	$ch©_ex≥˘
 (
s
)

929 *
s
;

931 *
ex≥˘
;

932 *
ª∂y
;

934 i‡(
	`°rcmp
(
s
, "HANGUP") == 0) {

935 ++
hup_√xt
;

939 i‡(
	`°rcmp
(
s
, "ABORT") == 0) {

940 ++
ab‹t_√xt
;

944 i‡(
	`°rcmp
(
s
, "CLR_ABORT") == 0) {

945 ++
˛ór_ab‹t_√xt
;

949 i‡(
	`°rcmp
(
s
, "REPORT") == 0) {

950 ++
ªp‹t_√xt
;

954 i‡(
	`°rcmp
(
s
, "CLR_REPORT") == 0) {

955 ++
˛ór_ªp‹t_√xt
;

959 i‡(
	`°rcmp
(
s
, "TIMEOUT") == 0) {

960 ++
timeout_√xt
;

964 i‡(
	`°rcmp
(
s
, "ECHO") == 0) {

965 ++
echo_√xt
;

969 i‡(
	`°rcmp
(
s
, "SAY") == 0) {

970 ++
ßy_√xt
;

978 
ex≥˘
 = 
	`ex≥˘_°πok
 (
s
, "-");

979 
s
 = (*) 0;

981 i‡(
ex≥˘
 == (*) 0)

984 
ª∂y
 = 
	`ex≥˘_°πok
 (
s
, "-");

989 i‡(
	`gë_°rög
 (
ex≥˘
))

996 i‡(
ª∂y
 =(*Ë0 || 
exô_code
 != 3)

999 
	`ch©_£nd
 (
ª∂y
);

1005 i‡(
Áû_ªas⁄
)

1006 
	`msgf
("Faûed (%s)", 
Áû_ªas⁄
);

1008 
	`msgf
("Failed");

1009 
	`ãrmö©e
(
exô_code
);

1010 
	}
}

1017 *
	$ch¨a˘î
(
c
)

1018 
c
;

1020 
°rög
[10];

1021 *
mëa
;

1023 
mëa
 = (
c
 & 0x80) ? "M-" : "";

1024 
c
 &= 0x7F;

1026 i‡(
c
 < 32)

1027 
	`•rötf
(
°rög
, "%s^%c", 
mëa
, ()
c
 + '@');

1028 i‡(
c
 == 127)

1029 
	`•rötf
(
°rög
, "%s^?", 
mëa
);

1031 
	`•rötf
(
°rög
, "%s%c", 
mëa
, 
c
);

1033  (
°rög
);

1034 
	}
}

1039 
	$ch©_£nd
 (
s
)

1040 *
s
;

1042 
fûe_d©a
[
STR_LEN
];

1044 i‡(
ßy_√xt
) {

1045 
ßy_√xt
 = 0;

1046 
s
 = 
	`˛ón
(s, 1);

1047 
	`wrôe
(2, 
s
, 
	`°æí
(s));

1048 
	`‰ì
(
s
);

1052 i‡(
hup_√xt
) {

1053 
hup_√xt
 = 0;

1054 i‡(
	`°rcmp
(
s
, "OFF") == 0)

1055 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1057 
	`sig«l
(
SIGHUP
, 
sighup
);

1061 i‡(
echo_√xt
) {

1062 
echo_√xt
 = 0;

1063 
echo
 = (
	`°rcmp
(
s
, "ON") == 0);

1067 i‡(
ab‹t_√xt
) {

1068 *
s1
;

1070 
ab‹t_√xt
 = 0;

1072 i‡(
n_ab‹ts
 >
MAX_ABORTS
)

1073 
	`Áèl
(2, "Too many ABORT strings");

1075 
s1
 = 
	`˛ón
(
s
, 0);

1077 i‡(
	`°æí
(
s1
Ë> såÀn(
s
)

1078 || 
	`°æí
(
s1
Ë+ 1 > (
Áû_buf„r
))

1079 
	`Áèl
(1, "IŒegÆ o∏too-l⁄g ABORT såög ('%v')", 
s
);

1081 
ab‹t_°rög
[
n_ab‹ts
++] = 
s1
;

1083 i‡(
vîbo£
)

1084 
	`msgf
("ab‹à⁄ (%v)", 
s
);

1088 i‡(
˛ór_ab‹t_√xt
) {

1089 *
s1
;

1090 
i
;

1091 
ﬁd_max
;

1092 
∑ck
 = 0;

1094 
˛ór_ab‹t_√xt
 = 0;

1096 
s1
 = 
	`˛ón
(
s
, 0);

1098 i‡(
	`°æí
(
s1
Ë> såÀn(
s
)

1099 || 
	`°æí
(
s1
Ë+ 1 > (
Áû_buf„r
))

1100 
	`Áèl
(1, "IŒegÆ o∏too-l⁄g CLR_ABORT såög ('%v')", 
s
);

1102 
ﬁd_max
 = 
n_ab‹ts
;

1103 
i
=0; i < 
n_ab‹ts
; i++) {

1104 i‡–
	`°rcmp
(
s1
,
ab‹t_°rög
[
i
]) == 0 ) {

1105 
	`‰ì
(
ab‹t_°rög
[
i
]);

1106 
ab‹t_°rög
[
i
] = 
NULL
;

1107 
∑ck
++;

1108 
n_ab‹ts
--;

1109 i‡(
vîbo£
)

1110 
	`msgf
("˛ó∏ab‹à⁄ (%v)", 
s
);

1113 
	`‰ì
(
s1
);

1114 i‡(
∑ck
)

1115 
	`∑ck_¨øy
(
ab‹t_°rög
,
ﬁd_max
);

1119 i‡(
ªp‹t_√xt
) {

1120 *
s1
;

1122 
ªp‹t_√xt
 = 0;

1123 i‡(
n_ªp‹ts
 >
MAX_REPORTS
)

1124 
	`Áèl
(2, "Too many REPORT strings");

1126 
s1
 = 
	`˛ón
(
s
, 0);

1127 i‡(
	`°æí
(
s1
Ë> såÀn(
s
)

1128 || 
	`°æí
(
s1
Ë+ 1 > (
Áû_buf„r
))

1129 
	`Áèl
(1, "IŒegÆ o∏too-l⁄g REPORT såög ('%v')", 
s
);

1131 
ªp‹t_°rög
[
n_ªp‹ts
++] = 
s1
;

1133 i‡(
vîbo£
)

1134 
	`msgf
("ªp‹à(%v)", 
s
);

1138 i‡(
˛ór_ªp‹t_√xt
) {

1139 *
s1
;

1140 
i
;

1141 
ﬁd_max
;

1142 
∑ck
 = 0;

1144 
˛ór_ªp‹t_√xt
 = 0;

1146 
s1
 = 
	`˛ón
(
s
, 0);

1148 i‡(
	`°æí
(
s1
Ë> såÀn(
s
)

1149 || 
	`°æí
(
s1
Ë+ 1 > (
Áû_buf„r
))

1150 
	`Áèl
(1, "IŒegÆ o∏too-l⁄g REPORT såög ('%v')", 
s
);

1152 
ﬁd_max
 = 
n_ªp‹ts
;

1153 
i
=0; i < 
n_ªp‹ts
; i++) {

1154 i‡–
	`°rcmp
(
s1
,
ªp‹t_°rög
[
i
]) == 0 ) {

1155 
	`‰ì
(
ªp‹t_°rög
[
i
]);

1156 
ªp‹t_°rög
[
i
] = 
NULL
;

1157 
∑ck
++;

1158 
n_ªp‹ts
--;

1159 i‡(
vîbo£
)

1160 
	`msgf
("˛ó∏ªp‹à(%v)", 
s
);

1163 
	`‰ì
(
s1
);

1164 i‡(
∑ck
)

1165 
	`∑ck_¨øy
(
ªp‹t_°rög
,
ﬁd_max
);

1170 i‡(
timeout_√xt
) {

1171 
timeout_√xt
 = 0;

1172 
s
 = 
	`˛ón
(s, 0);

1173 
timeout
 = 
	`©oi
(
s
);

1175 i‡(
timeout
 <= 0)

1176 
timeout
 = 
DEFAULT_CHAT_TIMEOUT
;

1178 i‡(
vîbo£
)

1179 
	`msgf
("timeouà£àtÿ%d sec⁄ds", 
timeout
);

1188 i‡(
s
[0] == '@') {

1190 *
‚
 = 
s
;

1191 *++
‚
 == ' ' || *fn == '\t')

1194 i‡(*
‚
 != 0) {

1195 
FILE
 *
f
;

1196 
n
 = 0;

1199 
f
 = 
	`f›í
(
‚
, "r");

1200 i‡(
f
 =
NULL
)

1201 
	`Áèl
(1, "%†-- o≥¿Áûed: %m", 
‚
);

1202 
n
 < 
STR_LEN
 - 1) {

1203 
ƒ
 = 
	`‰ód
(&
fûe_d©a
[
n
], 1, 
STR_LEN
 - 1 -Ç, 
f
);

1204 i‡(
ƒ
 < 0)

1205 
	`Áèl
(1, "%†--ÑódÉº‹", 
‚
);

1206 i‡(
ƒ
 == 0)

1208 
n
 +
ƒ
;

1210 
	`f˛o£
(
f
);

1214 i‡(
n
 > 0 && 
fûe_d©a
[n-1] == '\n')

1215 --
n
;

1216 
fûe_d©a
[
n
] = 0;

1217 
s
 = 
fûe_d©a
;

1221 i‡(
	`°rcmp
(
s
, "EOT") == 0)

1222 
s
 = "^D\\c";

1223 i‡(
	`°rcmp
(
s
, "BREAK") == 0)

1224 
s
 = "\\K\\c";

1226 i‡(!
	`put_°rög
(
s
))

1227 
	`Áèl
(1, "Failed");

1228 
	}
}

1230 
	$gë_ch¨
()

1232 
°©us
;

1233 
c
;

1235 
°©us
 = 
	`ªad
(0, &
c
, 1);

1237 
°©us
) {

1239  (()
c
 & 0x7F);

1242 
	`msgf
("w¨nög:Ñód(Ë⁄ stdöÑëu∫ed %d", 
°©us
);

1245 i‡((
°©us
 = 
	`f˙é
(0, 
F_GETFL
, 0)) == -1)

1246 
	`Áèl
(2, "Can't get file mode flags on stdin: %m");

1248 i‡(
	`f˙é
(0, 
F_SETFL
, 
°©us
 & ~
O_NONBLOCK
) == -1)

1249 
	`Áèl
(2, "Can't set file mode flags on stdin: %m");

1253 
	}
}

1255 
	$put_ch¨
(
c
)

1256 
c
;

1258 
°©us
;

1259 
ch
 = 
c
;

1261 
	`u¶ìp
(10000);

1263 
°©us
 = 
	`wrôe
(1, &
ch
, 1);

1265 
°©us
) {

1270 
	`msgf
("w¨nög: wrôe(Ë⁄ stdouàªtu∫ed %d", 
°©us
);

1273 i‡((
°©us
 = 
	`f˙é
(0, 
F_GETFL
, 0)) == -1)

1274 
	`Áèl
(2, "Can't get file mode flags on stdin, %m");

1276 i‡(
	`f˙é
(0, 
F_SETFL
, 
°©us
 & ~
O_NONBLOCK
) == -1)

1277 
	`Áèl
(2, "Can't set file mode flags on stdin: %m");

1281 
	}
}

1283 
	$wrôe_ch¨
 (
c
)

1284 
c
;

1286 i‡(
Æ¨med
 || 
	`put_ch¨
(
c
) < 0) {

1287 
	`Æ¨m
(0);

1288 
Æ¨med
 = 0;

1290 i‡(
vîbo£
) {

1291 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EWOULDBLOCK
)

1292 
	`msgf
(" -- writeÅimed out");

1294 
	`msgf
(" -- write failed: %m");

1299 
	}
}

1301 
	$put_°rög
 (
s
)

1302 *
s
;

1304 
quõt
 = 0;

1305 
s
 = 
	`˛ón
(s, 1);

1307 i‡(
vîbo£
) {

1308 i‡(
quõt
)

1309 
	`msgf
("send (?????\?)");

1311 
	`msgf
("£nd (%v)", 
s
);

1314 
	`Æ¨m
(
timeout
); 
Æ¨med
 = 0;

1316 *
s
) {

1317 
c
 = *
s
++;

1319 i‡(
c
 != '\\') {

1320 i‡(!
	`wrôe_ch¨
 (
c
))

1325 
c
 = *
s
++;

1326 
c
) {

1328 
	`¶ìp
(1);

1332 
	`bªak_£quí˚
();

1336 
	`u¶ìp
(10000);

1340 i‡(!
	`wrôe_ch¨
 (
c
))

1346 
	`Æ¨m
(0);

1347 
Æ¨med
 = 0;

1349 
	}
}

1356 
	$echo_°dîr
(
n
)

1357 
n
;

1359 
√ed_lf
;

1360 *
s
;

1362 
n
) {

1366 i‡(
√ed_lf
 == 0)

1370 
	`wrôe
(2, "\n", 1);

1371 
√ed_lf
 = 0;

1374 
s
 = 
	`ch¨a˘î
(
n
);

1375 
	`wrôe
(2, 
s
, 
	`°æí
(s));

1376 
√ed_lf
 = 1;

1379 
	}
}

1384 
	$gë_°rög
(
°rög
)

1385 *
°rög
;

1387 
ãmp
[
STR_LEN
];

1388 
c
, 
¥öãd
 = 0, 
Àn
, 
möÀn
;

1389 *
s
 = 
ãmp
, *
íd
 = s + 
STR_LEN
;

1390 *
logged
 = 
ãmp
;

1392 
Áû_ªas⁄
 = (*)0;

1393 
°rög
 = 
	`˛ón
(string, 0);

1394 
Àn
 = 
	`°æí
(
°rög
);

1395 
möÀn
 = (
Àn
 > (
Áû_buf„r
)?Üen: (fail_buffer)) - 1;

1397 i‡(
vîbo£
)

1398 
	`msgf
("ex≥˘ (%v)", 
°rög
);

1400 i‡(
Àn
 > 
STR_LEN
) {

1401 
	`msgf
("expect string isÅooÜong");

1402 
exô_code
 = 1;

1406 i‡(
Àn
 == 0) {

1407 i‡(
vîbo£
)

1408 
	`msgf
("got it");

1412 
	`Æ¨m
(
timeout
);

1413 
Æ¨med
 = 0;

1415  ! 
Æ¨med
 && (
c
 = 
	`gë_ch¨
()) >= 0) {

1416 
n
, 
ab‹t_Àn
, 
ªp‹t_Àn
;

1418 i‡(
echo
)

1419 
	`echo_°dîr
(
c
);

1420 i‡(
vîbo£
 && 
c
 == '\n') {

1421 i‡(
s
 =
logged
)

1422 
	`msgf
("");

1424 
	`msgf
("%0.*v", 
s
 - 
logged
,Üogged);

1425 
logged
 = 
s
 + 1;

1428 *
s
++ = 
c
;

1430 i‡(
vîbo£
 && 
s
 >
logged
 + 80) {

1431 
	`msgf
("%0.*v", 
s
 - 
logged
,Üogged);

1432 
logged
 = 
s
;

1435 i‡(
Vîbo£
) {

1436 i‡(
c
 == '\n')

1437 
	`Âutc
–'\n', 
°dîr
 );

1438 i‡(
c
 != '\r')

1439 
	`Ârötf
–
°dîr
, "%s", 
	`ch¨a˘î
(
c
) );

1442 i‡(!
ªp‹t_g©hîög
) {

1443 
n
 = 0;Ç < 
n_ªp‹ts
; ++n) {

1444 i‡((
ªp‹t_°rög
[
n
] !(*Ë
NULL
) &&

1445 
s
 - 
ãmp
 >(
ªp‹t_Àn
 = 
	`°æí
(
ªp‹t_°rög
[
n
])) &&

1446 
	`°∫cmp
(
s
 - 
ªp‹t_Àn
, 
ªp‹t_°rög
[
n
],Ñeport_len) == 0) {

1447 
time_t
 
time_now
 = 
	`time
 (—ime_t*Ë
NULL
);

1448 
tm
* 
tm_now
 = 
	`loˇ…ime
 (&
time_now
);

1450 
	`°r·ime
 (
ªp‹t_buf„r
, 20, "%b %d %H:%M:%S ", 
tm_now
);

1451 
	`°rˇt
 (
ªp‹t_buf„r
, 
ªp‹t_°rög
[
n
]);

1453 
ªp‹t_°rög
[
n
] = (*Ë
NULL
;

1454 
ªp‹t_g©hîög
 = 1;

1460 i‡(!
	`is˙ål
 (
c
)) {

1461 
ªp_Àn
 = 
	`°æí
 (
ªp‹t_buf„r
);

1462 
ªp‹t_buf„r
[
ªp_Àn
] = 
c
;

1463 
ªp‹t_buf„r
[
ªp_Àn
 + 1] = '\0';

1466 
ªp‹t_g©hîög
 = 0;

1467 
	`Ârötf
 (
ªp‹t_Â
, "ch©: %s\n", 
ªp‹t_buf„r
);

1471 i‡(
s
 - 
ãmp
 >
Àn
 &&

1472 
c
 =
°rög
[
Àn
 - 1] &&

1473 
	`°∫cmp
(
s
 - 
Àn
, 
°rög
,Üen) == 0) {

1474 i‡(
vîbo£
) {

1475 i‡(
s
 > 
logged
)

1476 
	`msgf
("%0.*v", 
s
 - 
logged
,Üogged);

1477 
	`msgf
(" -- got it\n");

1480 
	`Æ¨m
(0);

1481 
Æ¨med
 = 0;

1485 
n
 = 0;Ç < 
n_ab‹ts
; ++n) {

1486 i‡(
s
 - 
ãmp
 >(
ab‹t_Àn
 = 
	`°æí
(
ab‹t_°rög
[
n
])) &&

1487 
	`°∫cmp
(
s
 - 
ab‹t_Àn
, 
ab‹t_°rög
[
n
],ábort_len) == 0) {

1488 i‡(
vîbo£
) {

1489 i‡(
s
 > 
logged
)

1490 
	`msgf
("%0.*v", 
s
 - 
logged
,Üogged);

1491 
	`msgf
(" -- failed");

1494 
	`Æ¨m
(0);

1495 
Æ¨med
 = 0;

1496 
exô_code
 = 
n
 + 4;

1497 
	`°r˝y
(
Áû_ªas⁄
 = 
Áû_buf„r
, 
ab‹t_°rög
[
n
]);

1502 i‡(
s
 >
íd
) {

1503 i‡(
logged
 < 
s
 - 
möÀn
) {

1504 i‡(
vîbo£
)

1505 
	`msgf
("%0.*v", 
s
 - 
logged
,Üogged);

1506 
logged
 = 
s
;

1508 
s
 -
möÀn
;

1509 
	`memmove
(
ãmp
, 
s
, 
möÀn
);

1510 
logged
 = 
ãmp
 + (logged - 
s
);

1511 
s
 = 
ãmp
 + 
möÀn
;

1514 i‡(
Æ¨med
 && 
vîbo£
)

1515 
	`msgf
("warning:álarm synchronizationÖroblem");

1518 
	`Æ¨m
(0);

1520 i‡(
vîbo£
 && 
¥öãd
) {

1521 i‡(
Æ¨med
)

1522 
	`msgf
(" --ÑeadÅimed out");

1524 
	`msgf
(" --Ñead failed: %m");

1527 
exô_code
 = 3;

1528 
Æ¨med
 = 0;

1530 
	}
}

1535 #ifde‡
SOL2


1536 
	~<sys/∑øm.h
>

1537 #i‡
MAXUID
 > 65536

1538 #unde‡
NO_USLEEP


1542 #ifde‡
NO_USLEEP


1543 
	~<sys/ty≥s.h
>

1544 
	~<sys/time.h
>

1551 
£À˘
();

1554 
	$u¶ìp
–
u£c
 )

1555 
u£c
;

1558 
tv_£c
;

1559 
tv_u£c
;

1560 } 
dñay
;

1562 
dñay
.
tv_£c
 = 
u£c
 / 1000000L;

1563 
dñay
.
tv_u£c
 = 
u£c
 % 1000000L;

1565  
	`£À˘
(0, (*)0, (*)0, (*)0, &
dñay
);

1566 
	}
}

1570 
	$∑ck_¨øy
 (
¨øy
, 
íd
)

1571 **
¨øy
;

1572 
íd
;

1574 
i
, 
j
;

1576 
i
 = 0; i < 
íd
; i++) {

1577 i‡(
¨øy
[
i
] =
NULL
) {

1578 
j
 = 
i
+1; j < 
íd
; ++j)

1579 i‡(
¨øy
[
j
] !
NULL
)

1580 
¨øy
[
i
++] =áºay[
j
];

1581 ; 
i
 < 
íd
; ++i)

1582 
¨øy
[
i
] = 
NULL
;

1586 
	}
}

1595 
	#OUTCHAR
(
c
Ë(
buÊí
 > 0? (--buÊí, *
buf
++ = (c)): 0)

	)

1598 
	$vfmtmsg
(
buf
, 
buÊí
, 
fmt
, 
¨gs
)

1599 *
buf
;

1600 
buÊí
;

1601 c⁄° *
fmt
;

1602 
va_li°
 
¨gs
;

1604 
c
, 
i
, 
n
;

1605 
width
, 
¥ec
, 
fûlch
;

1606 
ba£
, 
Àn
, 
√g
, 
quŸed
;

1607 
vÆ
 = 0;

1608 *
°r
, *
buf0
;

1609 c⁄° *
f
;

1610 *
p
;

1611 
num
[32];

1612 
hexch¨s
[] = "0123456789abcdef";

1614 
buf0
 = 
buf
;

1615 --
buÊí
;

1616 
buÊí
 > 0) {

1617 
f
 = 
fmt
; *f != '%' && *f != 0; ++f)

1619 i‡(
f
 > 
fmt
) {

1620 
Àn
 = 
f
 - 
fmt
;

1621 i‡(
Àn
 > 
buÊí
)

1622 
Àn
 = 
buÊí
;

1623 
	`mem˝y
(
buf
, 
fmt
, 
Àn
);

1624 
buf
 +
Àn
;

1625 
buÊí
 -
Àn
;

1626 
fmt
 = 
f
;

1628 i‡(*
fmt
 == 0)

1630 
c
 = *++
fmt
;

1631 
width
 = 
¥ec
 = 0;

1632 
fûlch
 = ' ';

1633 i‡(
c
 == '0') {

1634 
fûlch
 = '0';

1635 
c
 = *++
fmt
;

1637 i‡(
c
 == '*') {

1638 
width
 = 
	`va_¨g
(
¨gs
, );

1639 
c
 = *++
fmt
;

1641 
	`isdigô
(
c
)) {

1642 
width
 = width * 10 + 
c
 - '0';

1643 
c
 = *++
fmt
;

1646 i‡(
c
 == '.') {

1647 
c
 = *++
fmt
;

1648 i‡(
c
 == '*') {

1649 
¥ec
 = 
	`va_¨g
(
¨gs
, );

1650 
c
 = *++
fmt
;

1652 
	`isdigô
(
c
)) {

1653 
¥ec
 =Öª¯* 10 + 
c
 - '0';

1654 
c
 = *++
fmt
;

1658 
°r
 = 0;

1659 
ba£
 = 0;

1660 
√g
 = 0;

1661 ++
fmt
;

1662 
c
) {

1664 
i
 = 
	`va_¨g
(
¨gs
, );

1665 i‡(
i
 < 0) {

1666 
√g
 = 1;

1667 
vÆ
 = -
i
;

1669 
vÆ
 = 
i
;

1670 
ba£
 = 10;

1673 
vÆ
 = 
	`va_¨g
(
¨gs
, );

1674 
ba£
 = 8;

1677 
vÆ
 = 
	`va_¨g
(
¨gs
, );

1678 
ba£
 = 16;

1681 
vÆ
 = (Ë
	`va_¨g
(
¨gs
, *);

1682 
ba£
 = 16;

1683 
√g
 = 2;

1686 
°r
 = 
	`va_¨g
(
¨gs
, *);

1689 
num
[0] = 
	`va_¨g
(
¨gs
, );

1690 
num
[1] = 0;

1691 
°r
 = 
num
;

1694 
°r
 = 
	`°ªº‹
(
î∫o
);

1698 
quŸed
 = 
c
 == 'q';

1699 
p
 = 
	`va_¨g
(
¨gs
, *);

1700 i‡(
fûlch
 ='0' && 
¥ec
 > 0) {

1701 
n
 = 
¥ec
;

1703 
n
 = 
	`°æí
((*)
p
);

1704 i‡(
¥ec
 > 0 &&Öª¯< 
n
)

1705 
n
 = 
¥ec
;

1707 
n
 > 0 && 
buÊí
 > 0) {

1708 
c
 = *
p
++;

1709 --
n
;

1710 i‡(!
quŸed
 && 
c
 >= 0x80) {

1711 
	`OUTCHAR
('M');

1712 
	`OUTCHAR
('-');

1713 
c
 -= 0x80;

1715 i‡(
quŸed
 && (
c
 == '"' || c == '\\'))

1716 
	`OUTCHAR
('\\');

1717 i‡(
c
 < 0x20 || (0x7f <= c && c < 0xa0)) {

1718 i‡(
quŸed
) {

1719 
	`OUTCHAR
('\\');

1720 
c
) {

1721 '\t': 
	`OUTCHAR
('t'); ;

1722 '\n': 
	`OUTCHAR
('n'); ;

1723 '\b': 
	`OUTCHAR
('b'); ;

1724 '\f': 
	`OUTCHAR
('f'); ;

1726 
	`OUTCHAR
('x');

1727 
	`OUTCHAR
(
hexch¨s
[
c
 >> 4]);

1728 
	`OUTCHAR
(
hexch¨s
[
c
 & 0xf]);

1731 i‡(
c
 == '\t')

1732 
	`OUTCHAR
(
c
);

1734 
	`OUTCHAR
('^');

1735 
	`OUTCHAR
(
c
 ^ 0x40);

1739 
	`OUTCHAR
(
c
);

1743 *
buf
++ = '%';

1744 i‡(
c
 != '%')

1745 --
fmt
;

1746 --
buÊí
;

1749 i‡(
ba£
 != 0) {

1750 
°r
 = 
num
 + (num);

1751 *--
°r
 = 0;

1752 
°r
 > 
num
 + 
√g
) {

1753 *--
°r
 = 
hexch¨s
[
vÆ
 % 
ba£
];

1754 
vÆ
 = vÆ / 
ba£
;

1755 i‡(--
¥ec
 <0 && 
vÆ
 == 0)

1758 
√g
) {

1760 *--
°r
 = '-';

1763 *--
°r
 = 'x';

1764 *--
°r
 = '0';

1767 
Àn
 = 
num
 + “umË- 1 - 
°r
;

1769 
Àn
 = 
	`°æí
(
°r
);

1770 i‡(
¥ec
 > 0 && 
Àn
 >Örec)

1771 
Àn
 = 
¥ec
;

1773 i‡(
width
 > 0) {

1774 i‡(
width
 > 
buÊí
)

1775 
width
 = 
buÊí
;

1776 i‡((
n
 = 
width
 - 
Àn
) > 0) {

1777 
buÊí
 -
n
;

1778 ; 
n
 > 0; --n)

1779 *
buf
++ = 
fûlch
;

1782 i‡(
Àn
 > 
buÊí
)

1783 
Àn
 = 
buÊí
;

1784 
	`mem˝y
(
buf
, 
°r
, 
Àn
);

1785 
buf
 +
Àn
;

1786 
buÊí
 -
Àn
;

1788 *
buf
 = 0;

1789  
buf
 - 
buf0
;

1790 
	}
}

	@common/zlib.c

23 
	#NO_DUMMY_DECL


	)

24 
	#NO_ZCFUNCS


	)

25 
	#MY_ZCALLOC


	)

27 #i‡
deföed
(
__FªeBSD__
Ë&& (deföed(
KERNEL
Ë|| deföed(
_KERNEL
))

28 
	#öÊ©e
 
öÊ©e_µp


	)

45 #i‚de‡
_Z_UTIL_H


46 
	#_Z_UTIL_H


	)

48 
	~"zlib.h
"

50 #i‡
deföed
(
KERNEL
Ë|| deföed(
_KERNEL
)

52 
	~<sys/ty≥s.h
>

53 
	~<sys/time.h
>

54 
	~<sys/sy°m.h
>

55 #unde‡
u


56 
	#HAVE_MEMCPY


	)

57 
	#mem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

58 
	#mem£t
(
d
, 
v
, 
n
Ë
	`bzîo
((d), (n))

	)

59 
	#memcmp
 
bcmp


	)

62 #i‡
deföed
(
__KERNEL__
)

64 
	~<löux/°rög.h
>

65 
	#HAVE_MEMCPY


	)

69 #i‡
deföed
(
MSDOS
)||deföed(
VMS
)||deföed(
CRAY
)||deföed(
WIN32
)||deföed(
RISCOS
)

70 
	~<°ddef.h
>

71 
	~<î∫o.h
>

73 
î∫o
;

75 #ifde‡
STDC


76 
	~<°rög.h
>

77 
	~<°dlib.h
>

82 #i‚de‡
loˇl


83 
	#loˇl
 

	)

87 
	tuch
;

88 
uch
 
	tFAR
 
	tuchf
;

89 
	tush
;

90 
ush
 
	tFAR
 
	tushf
;

91 
	tulg
;

93 c⁄° *
z_îrmsg
[10];

96 
	#ERR_MSG
(
îr
Ë
z_îrmsg
[
Z_NEED_DICT
-”º)]

	)

98 
	#ERR_RETURN
(
°rm
,
îr
) \

99  (
°rm
->
msg
 = (*)
	`ERR_MSG
(
îr
), (îr))

	)

104 #i‚de‡
DEF_WBITS


105 
	#DEF_WBITS
 
MAX_WBITS


	)

109 #i‡
MAX_MEM_LEVEL
 >= 8

110 
	#DEF_MEM_LEVEL
 8

	)

112 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

116 
	#STORED_BLOCK
 0

	)

117 
	#STATIC_TREES
 1

	)

118 
	#DYN_TREES
 2

	)

121 
	#MIN_MATCH
 3

	)

122 
	#MAX_MATCH
 258

	)

125 
	#PRESET_DICT
 0x20

	)

129 #ifde‡
MSDOS


130 
	#OS_CODE
 0x00

	)

131 #ifde‡
__TURBOC__


132 
	~<Æloc.h
>

134 
	~<mÆloc.h
>

138 #ifde‡
OS2


139 
	#OS_CODE
 0x06

	)

142 #ifde‡
WIN32


143 
	#OS_CODE
 0x0b

	)

146 #i‡
deföed
(
VAXC
Ë|| deföed(
VMS
)

147 
	#OS_CODE
 0x02

	)

148 
	#FOPEN
(
«me
, 
mode
) \

149 
	`f›í
((
«me
), (
mode
), "mbc=60", "˘x=°m", "rfm=fix", "mrs=512")

	)

152 #ifde‡
AMIGA


153 
	#OS_CODE
 0x01

	)

156 #i‡
deföed
(
ATARI
Ë|| deföed(
©¨i°
)

157 
	#OS_CODE
 0x05

	)

160 #ifde‡
MACOS


161 
	#OS_CODE
 0x07

	)

164 #ifde‡
__50SERIES


165 
	#OS_CODE
 0x0F

	)

168 #ifde‡
TOPS20


169 
	#OS_CODE
 0x0a

	)

172 #i‡
deföed
(
_BEOS_
Ë|| deföed(
RISCOS
)

173 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

178 #i‚de‡
OS_CODE


179 
	#OS_CODE
 0x03

	)

182 #i‚de‡
FOPEN


183 
	#FOPEN
(
«me
, 
mode
Ë
	`f›í
(“ame), (mode))

	)

188 #ifde‡
HAVE_STRERROR


189 *
°ªº‹
 
OF
(());

190 
	#z°ªº‹
(
î∫um
Ë
	`°ªº‹
”ºnum)

	)

192 
	#z°ªº‹
(
î∫um
Ë""

	)

195 #i‡
deföed
(
pyr
)

196 
	#NO_MEMCPY


	)

198 #i‡(
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)Ë&& !deföed(
_MSC_VER
)

202 
	#NO_MEMCPY


	)

204 #i‡
deföed
(
STDC
Ë&& !deföed(
HAVE_MEMCPY
Ë&& !deföed(
NO_MEMCPY
)

205 
	#HAVE_MEMCPY


	)

207 #ifde‡
HAVE_MEMCPY


208 #ifde‡
SMALL_MEDIUM


209 
	#zmem˝y
 
_fmem˝y


	)

210 
	#zmemcmp
 
_fmemcmp


	)

211 
	#zmemzîo
(
de°
, 
Àn
Ë
	`_fmem£t
(de°, 0,Üí)

	)

213 
	#zmem˝y
 
mem˝y


	)

214 
	#zmemcmp
 
memcmp


	)

215 
	#zmemzîo
(
de°
, 
Àn
Ë
	`mem£t
(de°, 0,Üí)

	)

218 
zmem˝y
 
OF
((
Byãf
* 
de°
, Byãf* 
sour˚
, 
uI¡
 
Àn
));

219 
zmemcmp
 
OF
((
Byãf
* 
s1
, Byãf* 
s2
, 
uI¡
 
Àn
));

220 
zmemzîo
 
OF
((
Byãf
* 
de°
, 
uI¡
 
Àn
));

224 #ifde‡
DEBUG_ZLIB


225 
	~<°dio.h
>

226 #i‚de‡
vîbo£


227 
	#vîbo£
 0

	)

229 
z_îr‹
 
OF
((*
m
));

230 
	#As£π
(
c⁄d
,
msg
Ë{if(!(c⁄d)Ë
	`z_îr‹
(msg);}

	)

231 
	#Tø˚
(
x
Ë
Ârötf
 
	)
x

232 
	#Tø˚v
(
x
Ë{i‡(
vîbo£
Ë
Ârötf
 x ;}

	)

233 
	#Tø˚vv
(
x
Ë{i‡(
vîbo£
>1Ë
Ârötf
 x ;}

	)

234 
	#Tø˚c
(
c
,
x
Ë{i‡(
vîbo£
 && (c)Ë
Ârötf
 x ;}

	)

235 
	#Tø˚cv
(
c
,
x
Ë{i‡(
vîbo£
>1 && (c)Ë
Ârötf
 x ;}

	)

237 
	#As£π
(
c⁄d
,
msg
)

	)

238 
	#Tø˚
(
x
)

	)

239 
	#Tø˚v
(
x
)

	)

240 
	#Tø˚vv
(
x
)

	)

241 
	#Tø˚c
(
c
,
x
)

	)

242 
	#Tø˚cv
(
c
,
x
)

	)

246 
	$uL⁄g
 (*
	tcheck_func
Ë
	tOF
((
	tuL⁄g
 
	tcheck
, c⁄° 
	tByãf
 *
	tbuf
, 
	tuI¡
 
	tÀn
));

248 
voidpf
 
zˇŒoc
 
	`OF
((voidp‡
›aque
, 
ôems
, 
size
));

249 
zc‰ì
 
	`OF
((
voidpf
 
›aque
, voidp‡
±r
));

251 
	#ZALLOC
(
°rm
, 
ôems
, 
size
) \

252 (*((
°rm
)->
zÆloc
))((°rm)->
›aque
, (
ôems
), (
size
))

	)

253 
	#ZFREE
(
°rm
, 
addr
Ë(*((°rm)->
z‰ì
))((°rm)->
›aque
, (
voidpf
)◊ddr))

	)

254 
	#TRY_FREE
(
s
, 
p
Ë{i‡’Ë
	`ZFREE
(s,Ö);
	}

	)
}

272 #i‚de‡
_DEFLATE_H


273 
	#_DEFLATE_H


	)

281 
	#LENGTH_CODES
 29

	)

284 
	#LITERALS
 256

	)

287 
	#L_CODES
 (
LITERALS
+1+
LENGTH_CODES
)

	)

290 
	#D_CODES
 30

	)

293 
	#BL_CODES
 19

	)

296 
	#HEAP_SIZE
 (2*
L_CODES
+1)

	)

299 
	#MAX_BITS
 15

	)

302 
	#INIT_STATE
 42

	)

303 
	#BUSY_STATE
 113

	)

304 
	#FINISH_STATE
 666

	)

309 
	s˘_d©a_s
 {

311 
ush
 
	m‰eq
;

312 
ush
 
	mcode
;

313 } 
	mfc
;

315 
ush
 
	mdad
;

316 
ush
 
	mÀn
;

317 } 
	mdl
;

318 } 
	tFAR
 
	t˘_d©a
;

320 
	#Fªq
 
fc
.
‰eq


	)

321 
	#Code
 
fc
.
code


	)

322 
	#Dad
 
dl
.
dad


	)

323 
	#Lí
 
dl
.
Àn


	)

325 
°©ic_åì_desc_s
 
	t°©ic_åì_desc
;

327 
	såì_desc_s
 {

328 
˘_d©a
 *
	mdyn_åì
;

329 
	mmax_code
;

330 
°©ic_åì_desc
 *
	m°©_desc
;

331 } 
	tFAR
 
	tåì_desc
;

333 
ush
 
	tPos
;

334 
Pos
 
	tFAR
 
	tPosf
;

335 
	tIPos
;

341 
	sdeÊ©e_°©e
 {

342 
z_°ªamp
 
	m°rm
;

343 
	m°©us
;

344 
Byãf
 *
	m≥ndög_buf
;

345 
ulg
 
	m≥ndög_buf_size
;

346 
Byãf
 *
	m≥ndög_out
;

347 
	m≥ndög
;

348 
	mnohódî
;

349 
Byã
 
	md©a_ty≥
;

350 
Byã
 
	mmëhod
;

351 
	mœ°_Êush
;

355 
uI¡
 
	mw_size
;

356 
uI¡
 
	mw_bôs
;

357 
uI¡
 
	mw_mask
;

359 
Byãf
 *
	mwödow
;

369 
ulg
 
	mwödow_size
;

374 
Posf
 *
	m¥ev
;

380 
Posf
 *
	mhód
;

382 
uI¡
 
	mös_h
;

383 
uI¡
 
	mhash_size
;

384 
uI¡
 
	mhash_bôs
;

385 
uI¡
 
	mhash_mask
;

387 
uI¡
 
	mhash_shi·
;

394 
	mblock_°¨t
;

399 
uI¡
 
	mm©ch_Àngth
;

400 
IPos
 
	m¥ev_m©ch
;

401 
	mm©ch_avaûabÀ
;

402 
uI¡
 
	m°r°¨t
;

403 
uI¡
 
	mm©ch_°¨t
;

404 
uI¡
 
	mlookahód
;

406 
uI¡
 
	m¥ev_Àngth
;

411 
uI¡
 
	mmax_chaö_Àngth
;

417 
uI¡
 
	mmax_œzy_m©ch
;

422 
	#max_ö£π_Àngth
 
max_œzy_m©ch


	)

428 
	mÀvñ
;

429 
	m°øãgy
;

431 
uI¡
 
	mgood_m©ch
;

434 
	mni˚_m©ch
;

438 
˘_d©a_s
 
	mdyn_…ªe
[
HEAP_SIZE
];

439 
˘_d©a_s
 
	mdyn_dåì
[2*
D_CODES
+1];

440 
˘_d©a_s
 
	mbl_åì
[2*
BL_CODES
+1];

442 
åì_desc_s
 
	ml_desc
;

443 
åì_desc_s
 
	md_desc
;

444 
åì_desc_s
 
	mbl_desc
;

446 
ush
 
	mbl_cou¡
[
MAX_BITS
+1];

449 
	mhóp
[2*
L_CODES
+1];

450 
	mhóp_Àn
;

451 
	mhóp_max
;

456 
uch
 
	mdïth
[2*
L_CODES
+1];

460 
uchf
 *
	ml_buf
;

462 
uI¡
 
	mlô_bufsize
;

482 
uI¡
 
	mœ°_lô
;

484 
ushf
 *
	md_buf
;

490 
ulg
 
	m›t_Àn
;

491 
ulg
 
	m°©ic_Àn
;

492 
ulg
 
	mcom¥es£d_Àn
;

493 
uI¡
 
	mm©ches
;

494 
	mœ°_eob_Àn
;

496 #ifde‡
DEBUG_ZLIB


497 
ulg
 
	mbôs_£¡
;

500 
ush
 
	mbi_buf
;

504 
	mbi_vÆid
;

509 } 
	tFAR
 
	tdeÊ©e_°©e
;

514 
	#put_byã
(
s
, 
c
Ë{s->
≥ndög_buf
[s->
≥ndög
++] = (c);}

	)

517 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

522 
	#MAX_DIST
(
s
Ë((s)->
w_size
-
MIN_LOOKAHEAD
)

	)

528 
_å_öô
 
OF
((
deÊ©e_°©e
 *
s
));

529 
_å_èŒy
 
OF
((
deÊ©e_°©e
 *
s
, 
di°
, 
lc
));

530 
ulg
 
_å_Êush_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, ulg 
°‹ed_Àn
,

531 
eof
));

532 
_å_Æign
 
OF
((
deÊ©e_°©e
 *
s
));

533 
_å_°‹ed_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, 
ulg
 
°‹ed_Àn
,

534 
eof
));

535 
_å_°‹ed_ty≥_⁄ly
 
OF
((
deÊ©e_°©e
 *));

594 
	gdeÊ©e_c›yright
[] = " deflate 1.0.4 Copyright 1995-1996 Jean-loup Gailly ";

606 
	m√ed_m‹e
,

607 
	mblock_d⁄e
,

608 
	mföish_°¨ãd
,

609 
	mföish_d⁄e


610 } 
	tblock_°©e
;

612 
	$block_°©e
 (*
	tcom¥ess_func
Ë
	tOF
((
	tdeÊ©e_°©e
 *
	ts
, 
	tÊush
));

615 
loˇl
 
fûl_wödow
 
	`OF
((
deÊ©e_°©e
 *
s
));

616 
loˇl
 
block_°©e
 
deÊ©e_°‹ed
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

617 
loˇl
 
block_°©e
 
deÊ©e_Á°
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

618 
loˇl
 
block_°©e
 
deÊ©e_¶ow
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

619 
loˇl
 
lm_öô
 
	`OF
((
deÊ©e_°©e
 *
s
));

620 
loˇl
 
putSh‹tMSB
 
	`OF
((
deÊ©e_°©e
 *
s
, 
uI¡
 
b
));

621 
loˇl
 
Êush_≥ndög
 
	`OF
((
z_°ªamp
 
°rm
));

622 
loˇl
 
ªad_buf
 
	`OF
((
z_°ªamp
 
°rm
, 
ch¨f
 *
buf
, 
size
));

623 #ifde‡
ASMV


624 
m©ch_öô
 
	`OF
(());

625 
uI¡
 
l⁄ge°_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
cur_m©ch
));

627 
loˇl
 
uI¡
 
l⁄ge°_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
cur_m©ch
));

630 #ifde‡
DEBUG_ZLIB


631 
loˇl
 
check_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
°¨t
, IPo†
m©ch
,

632 
Àngth
));

639 
	#NIL
 0

	)

642 #i‚de‡
TOO_FAR


643 
	#TOO_FAR
 4096

	)

647 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

657 
	sc⁄fig_s
 {

658 
ush
 
good_Àngth
;

659 
ush
 
max_œzy
;

660 
ush
 
ni˚_Àngth
;

661 
ush
 
max_chaö
;

662 
com¥ess_func
 
func
;

663 } 
	tc⁄fig
;

665 
loˇl
 
c⁄fig
 
c⁄figuøti⁄_èbÀ
[10] = {

667  {0, 0, 0, 0, 
deÊ©e_°‹ed
},

668  {4, 4, 8, 4, 
deÊ©e_Á°
},

669  {4, 5, 16, 8, 
deÊ©e_Á°
},

670  {4, 6, 32, 32, 
deÊ©e_Á°
},

672  {4, 4, 16, 16, 
deÊ©e_¶ow
},

673  {8, 16, 32, 32, 
deÊ©e_¶ow
},

674  {8, 16, 128, 128, 
deÊ©e_¶ow
},

675  {8, 32, 128, 256, 
deÊ©e_¶ow
},

676  {32, 128, 258, 1024, 
deÊ©e_¶ow
},

677  {32, 258, 258, 4096, 
deÊ©e_¶ow
}
	}
};

684 
	#EQUAL
 0

	)

687 #i‚de‡
NO_DUMMY_DECL


688 
	s°©ic_åì_desc_s
 {
	mdummy
;};

697 
	#UPDATE_HASH
(
s
,
h
,
c
Ë(h = (((h)<<s->
hash_shi·
Ë^ (c)Ë& s->
hash_mask
)

	)

708 
	#INSERT_STRING
(
s
, 
°r
, 
m©ch_hód
) \

709 (
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[(
°r
Ë+ (
MIN_MATCH
-1)]), \

710 
s
->
¥ev
[(
°r
Ë& s->
w_mask
] = 
m©ch_hód
 = s->
hód
[s->
ös_h
], \

711 
s
->
hód
[s->
ös_h
] = (
Pos
)(
°r
))

	)

717 
	#CLEAR_HASH
(
s
) \

718 
s
->
hód
[s->
hash_size
-1] = 
NIL
; \

719 
	`zmemzîo
((
ch¨f
 *)
s
->
hód
, ()(s->
hash_size
-1)*(*s->hód));

	)

722 
	$deÊ©eInô_
(
°rm
, 
Àvñ
, 
vîsi⁄
, 
°ªam_size
)

723 
z_°ªamp
 
°rm
;

724 
Àvñ
;

725 c⁄° *
vîsi⁄
;

726 
°ªam_size
;

728  
	`deÊ©eInô2_
(
°rm
, 
Àvñ
, 
Z_DEFLATED
, 
MAX_WBITS
, 
DEF_MEM_LEVEL
,

729 
Z_DEFAULT_STRATEGY
, 
vîsi⁄
, 
°ªam_size
);

731 
	}
}

734 
	$deÊ©eInô2_
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
,

735 
vîsi⁄
, 
°ªam_size
)

736 
z_°ªamp
 
°rm
;

737 
Àvñ
;

738 
mëhod
;

739 
wödowBôs
;

740 
memLevñ
;

741 
°øãgy
;

742 c⁄° *
vîsi⁄
;

743 
°ªam_size
;

745 
deÊ©e_°©e
 *
s
;

746 
nohódî
 = 0;

747 * 
my_vîsi⁄
 = 
ZLIB_VERSION
;

749 
ushf
 *
ovîœy
;

754 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
my_vîsi⁄
[0] ||

755 
°ªam_size
 !(
z_°ªam
)) {

756  
Z_VERSION_ERROR
;

758 i‡(
°rm
 =
Z_NULL
Ë 
Z_STREAM_ERROR
;

760 
°rm
->
msg
 = 
Z_NULL
;

761 #i‚de‡
NO_ZCFUNCS


762 i‡(
°rm
->
zÆloc
 =
Z_NULL
) {

763 
°rm
->
zÆloc
 = 
zˇŒoc
;

764 
°rm
->
›aque
 = (
voidpf
)0;

766 i‡(
°rm
->
z‰ì
 =
Z_NULL
Ë°rm->z‰ì = 
zc‰ì
;

769 i‡(
Àvñ
 =
Z_DEFAULT_COMPRESSION
)Üevel = 6;

771 i‡(
wödowBôs
 < 0) {

772 
nohódî
 = 1;

773 
wödowBôs
 = -windowBits;

775 i‡(
memLevñ
 < 1 || memLevñ > 
MAX_MEM_LEVEL
 || 
mëhod
 !
Z_DEFLATED
 ||

776 
wödowBôs
 < 8 || wödowBô†> 15 || 
Àvñ
 < 0 ||Üevel > 9 ||

777 
°øãgy
 < 0 || så©egy > 
Z_HUFFMAN_ONLY
) {

778  
Z_STREAM_ERROR
;

780 
s
 = (
deÊ©e_°©e
 *Ë
	`ZALLOC
(
°rm
, 1, (deflate_state));

781 i‡(
s
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

782 
°rm
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)
s
;

783 
s
->
°rm
 = strm;

785 
s
->
nohódî
 =Çoheader;

786 
s
->
w_bôs
 = 
wödowBôs
;

787 
s
->
w_size
 = 1 << s->
w_bôs
;

788 
s
->
w_mask
 = s->
w_size
 - 1;

790 
s
->
hash_bôs
 = 
memLevñ
 + 7;

791 
s
->
hash_size
 = 1 << s->
hash_bôs
;

792 
s
->
hash_mask
 = s->
hash_size
 - 1;

793 
s
->
hash_shi·
 = ((s->
hash_bôs
+
MIN_MATCH
-1)/MIN_MATCH);

795 
s
->
wödow
 = (
Byãf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, 2*(
Byã
));

796 
s
->
¥ev
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, (
Pos
));

797 
s
->
hód
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
hash_size
, (
Pos
));

799 
s
->
lô_bufsize
 = 1 << (
memLevñ
 + 6);

801 
ovîœy
 = (
ushf
 *Ë
	`ZALLOC
(
°rm
, 
s
->
lô_bufsize
, (
ush
)+2);

802 
s
->
≥ndög_buf
 = (
uchf
 *Ë
ovîœy
;

803 
s
->
≥ndög_buf_size
 = (
ulg
)s->
lô_bufsize
 * ((
ush
)+2L);

805 i‡(
s
->
wödow
 =
Z_NULL
 || s->
¥ev
 =Z_NULL || s->
hód
 == Z_NULL ||

806 
s
->
≥ndög_buf
 =
Z_NULL
) {

807 
°rm
->
msg
 = (*)
	`ERR_MSG
(
Z_MEM_ERROR
);

808 
	`deÊ©eEnd
 (
°rm
);

809  
Z_MEM_ERROR
;

811 
s
->
d_buf
 = 
ovîœy
 + s->
lô_bufsize
/(
ush
);

812 
s
->
l_buf
 = s->
≥ndög_buf
 + (1+(
ush
))*s->
lô_bufsize
;

814 
s
->
Àvñ
 =Üevel;

815 
s
->
°øãgy
 = strategy;

816 
s
->
mëhod
 = (
Byã
)method;

818  
	`deÊ©eRe£t
(
°rm
);

819 
	}
}

822 
	$deÊ©eSëDi˘i⁄¨y
 (
°rm
, 
di˘i⁄¨y
, 
di˘Lígth
)

823 
z_°ªamp
 
°rm
;

824 c⁄° 
Byãf
 *
di˘i⁄¨y
;

825 
uI¡
 
di˘Lígth
;

827 
deÊ©e_°©e
 *
s
;

828 
uI¡
 
Àngth
 = 
di˘Lígth
;

829 
uI¡
 
n
;

830 
IPos
 
hash_hód
 = 0;

832 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || 
di˘i⁄¨y
 == Z_NULL)

833  
Z_STREAM_ERROR
;

835 
s
 = (
deÊ©e_°©e
 *Ë
°rm
->
°©e
;

836 i‡(
s
->
°©us
 !
INIT_STATE
Ë 
Z_STREAM_ERROR
;

838 
°rm
->
adÀr
 = 
	`adÀr32
(°rm->adÀr, 
di˘i⁄¨y
, 
di˘Lígth
);

840 i‡(
Àngth
 < 
MIN_MATCH
Ë 
Z_OK
;

841 i‡(
Àngth
 > 
	`MAX_DIST
(
s
)) {

842 
Àngth
 = 
	`MAX_DIST
(
s
);

843 #i‚de‡
USE_DICT_HEAD


844 
di˘i⁄¨y
 +
di˘Lígth
 - 
Àngth
;

847 
	`zmem˝y
((
ch¨f
 *)
s
->
wödow
, 
di˘i⁄¨y
, 
Àngth
);

848 
s
->
°r°¨t
 = 
Àngth
;

849 
s
->
block_°¨t
 = ()
Àngth
;

855 
s
->
ös_h
 = s->
wödow
[0];

856 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[1]);

857 
n
 = 0;Ç <
Àngth
 - 
MIN_MATCH
;Ç++) {

858 
	`INSERT_STRING
(
s
, 
n
, 
hash_hód
);

860 i‡(
hash_hód
) hash_head = 0;

861  
Z_OK
;

862 
	}
}

865 
	$deÊ©eRe£t
 (
°rm
)

866 
z_°ªamp
 
°rm
;

868 
deÊ©e_°©e
 *
s
;

870 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL ||

871 
°rm
->
zÆloc
 =
Z_NULL
 || såm->
z‰ì
 =Z_NULLË 
Z_STREAM_ERROR
;

873 
°rm
->
tŸÆ_ö
 = såm->
tŸÆ_out
 = 0;

874 
°rm
->
msg
 = 
Z_NULL
;

875 
°rm
->
d©a_ty≥
 = 
Z_UNKNOWN
;

877 
s
 = (
deÊ©e_°©e
 *)
°rm
->
°©e
;

878 
s
->
≥ndög
 = 0;

879 
s
->
≥ndög_out
 = s->
≥ndög_buf
;

881 i‡(
s
->
nohódî
 < 0) {

882 
s
->
nohódî
 = 0;

884 
s
->
°©us
 = s->
nohódî
 ? 
BUSY_STATE
 : 
INIT_STATE
;

885 
°rm
->
adÀr
 = 1;

886 
s
->
œ°_Êush
 = 
Z_NO_FLUSH
;

888 
	`_å_öô
(
s
);

889 
	`lm_öô
(
s
);

891  
Z_OK
;

892 
	}
}

895 
	$deÊ©eP¨ams
(
°rm
, 
Àvñ
, 
°øãgy
)

896 
z_°ªamp
 
°rm
;

897 
Àvñ
;

898 
°øãgy
;

900 
deÊ©e_°©e
 *
s
;

901 
com¥ess_func
 
func
;

902 
îr
 = 
Z_OK
;

904 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

905 
s
 = (
deÊ©e_°©e
 *Ë
°rm
->
°©e
;

907 i‡(
Àvñ
 =
Z_DEFAULT_COMPRESSION
) {

908 
Àvñ
 = 6;

910 i‡(
Àvñ
 < 0 ||Üevñ > 9 || 
°øãgy
 < 0 || så©egy > 
Z_HUFFMAN_ONLY
) {

911  
Z_STREAM_ERROR
;

913 
func
 = 
c⁄figuøti⁄_èbÀ
[
s
->
Àvñ
].func;

915 i‡(
func
 !
c⁄figuøti⁄_èbÀ
[
Àvñ
].fun¯&& 
°rm
->
tŸÆ_ö
 != 0) {

917 
îr
 = 
	`deÊ©e
(
°rm
, 
Z_PARTIAL_FLUSH
);

919 i‡(
s
->
Àvñ
 !=Üevel) {

920 
s
->
Àvñ
 =Üevel;

921 
s
->
max_œzy_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
max_œzy
;

922 
s
->
good_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
good_Àngth
;

923 
s
->
ni˚_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
ni˚_Àngth
;

924 
s
->
max_chaö_Àngth
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
max_chaö
;

926 
s
->
°øãgy
 = strategy;

927  
îr
;

928 
	}
}

935 
loˇl
 
	$putSh‹tMSB
 (
s
, 
b
)

936 
deÊ©e_°©e
 *
s
;

937 
uI¡
 
b
;

939 
	`put_byã
(
s
, (
Byã
)(
b
 >> 8));

940 
	`put_byã
(
s
, (
Byã
)(
b
 & 0xff));

941 
	}
}

949 
loˇl
 
	$Êush_≥ndög
(
°rm
)

950 
z_°ªamp
 
°rm
;

952 
deÊ©e_°©e
 *
s
 = (deÊ©e_°©ê*Ë
°rm
->
°©e
;

953 
Àn
 = 
s
->
≥ndög
;

955 i‡(
Àn
 > 
°rm
->
avaû_out
)Üen = strm->avail_out;

956 i‡(
Àn
 == 0) ;

958 i‡(
°rm
->
√xt_out
 !
Z_NULL
) {

959 
	`zmem˝y
(
°rm
->
√xt_out
, 
s
->
≥ndög_out
, 
Àn
);

960 
°rm
->
√xt_out
 +
Àn
;

962 
s
->
≥ndög_out
 +
Àn
;

963 
°rm
->
tŸÆ_out
 +
Àn
;

964 
°rm
->
avaû_out
 -
Àn
;

965 
s
->
≥ndög
 -
Àn
;

966 i‡(
s
->
≥ndög
 == 0) {

967 
s
->
≥ndög_out
 = s->
≥ndög_buf
;

969 
	}
}

972 
	$deÊ©e
 (
°rm
, 
Êush
)

973 
z_°ªamp
 
°rm
;

974 
Êush
;

976 
ﬁd_Êush
;

977 
deÊ©e_°©e
 *
s
;

979 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL ||

980 
Êush
 > 
Z_FINISH
 || flush < 0) {

981  
Z_STREAM_ERROR
;

983 
s
 = (
deÊ©e_°©e
 *Ë
°rm
->
°©e
;

985 i‡((
°rm
->
√xt_ö
 =
Z_NULL
 && såm->
avaû_ö
 != 0) ||

986 (
s
->
°©us
 =
FINISH_STATE
 && 
Êush
 !
Z_FINISH
)) {

987 
	`ERR_RETURN
(
°rm
, 
Z_STREAM_ERROR
);

989 i‡(
°rm
->
avaû_out
 =0Ë
	`ERR_RETURN
(°rm, 
Z_BUF_ERROR
);

991 
s
->
°rm
 = strm;

992 
ﬁd_Êush
 = 
s
->
œ°_Êush
;

993 
s
->
œ°_Êush
 = 
Êush
;

996 i‡(
s
->
°©us
 =
INIT_STATE
) {

998 
uI¡
 
hódî
 = (
Z_DEFLATED
 + ((
s
->
w_bôs
-8)<<4)) << 8;

999 
uI¡
 
Àvñ_Êags
 = (
s
->
Àvñ
-1) >> 1;

1001 i‡(
Àvñ_Êags
 > 3)Üevel_flags = 3;

1002 
hódî
 |(
Àvñ_Êags
 << 6);

1003 i‡(
s
->
°r°¨t
 !0Ë
hódî
 |
PRESET_DICT
;

1004 
hódî
 += 31 - (header % 31);

1006 
s
->
°©us
 = 
BUSY_STATE
;

1007 
	`putSh‹tMSB
(
s
, 
hódî
);

1010 i‡(
s
->
°r°¨t
 != 0) {

1011 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 >> 16));

1012 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 & 0xffff));

1014 
°rm
->
adÀr
 = 1L;

1018 i‡(
s
->
≥ndög
 != 0) {

1019 
	`Êush_≥ndög
(
°rm
);

1020 i‡(
°rm
->
avaû_out
 == 0) {

1027 
s
->
œ°_Êush
 = -1;

1028  
Z_OK
;

1035 } i‡(
°rm
->
avaû_ö
 =0 && 
Êush
 <
ﬁd_Êush
 &&

1036 
Êush
 !
Z_FINISH
) {

1037 
	`ERR_RETURN
(
°rm
, 
Z_BUF_ERROR
);

1041 i‡(
s
->
°©us
 =
FINISH_STATE
 && 
°rm
->
avaû_ö
 != 0) {

1042 
	`ERR_RETURN
(
°rm
, 
Z_BUF_ERROR
);

1047 i‡(
°rm
->
avaû_ö
 !0 || 
s
->
lookahód
 != 0 ||

1048 (
Êush
 !
Z_NO_FLUSH
 && 
s
->
°©us
 !
FINISH_STATE
)) {

1049 
block_°©e
 
b°©e
;

1051 
b°©e
 = (*(
c⁄figuøti⁄_èbÀ
[
s
->
Àvñ
].
func
))(s, 
Êush
);

1053 i‡(
b°©e
 =
föish_°¨ãd
 || b°©ê=
föish_d⁄e
) {

1054 
s
->
°©us
 = 
FINISH_STATE
;

1056 i‡(
b°©e
 =
√ed_m‹e
 || b°©ê=
föish_°¨ãd
) {

1057 i‡(
°rm
->
avaû_out
 == 0) {

1058 
s
->
œ°_Êush
 = -1;

1060  
Z_OK
;

1069 i‡(
b°©e
 =
block_d⁄e
) {

1070 i‡(
Êush
 =
Z_PARTIAL_FLUSH
) {

1071 
	`_å_Æign
(
s
);

1072 } i‡(
Êush
 =
Z_PACKET_FLUSH
) {

1075 
	`_å_°‹ed_ty≥_⁄ly
(
s
);

1077 
	`_å_°‹ed_block
(
s
, (*)0, 0L, 0);

1081 i‡(
Êush
 =
Z_FULL_FLUSH
) {

1082 
	`CLEAR_HASH
(
s
);

1085 
	`Êush_≥ndög
(
°rm
);

1086 i‡(
°rm
->
avaû_out
 == 0) {

1087 
s
->
œ°_Êush
 = -1;

1088  
Z_OK
;

1092 
	`As£π
(
°rm
->
avaû_out
 > 0, "bug2");

1094 i‡(
Êush
 !
Z_FINISH
Ë 
Z_OK
;

1095 i‡(
s
->
nohódî
Ë 
Z_STREAM_END
;

1098 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 >> 16));

1099 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 & 0xffff));

1100 
	`Êush_≥ndög
(
°rm
);

1104 
s
->
nohódî
 = -1;

1105  
s
->
≥ndög
 !0 ? 
Z_OK
 : 
Z_STREAM_END
;

1106 
	}
}

1109 
	$deÊ©eEnd
 (
°rm
)

1110 
z_°ªamp
 
°rm
;

1112 
°©us
;

1113 
deÊ©e_°©e
 *
s
;

1115 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1116 
s
 = (
deÊ©e_°©e
 *Ë
°rm
->
°©e
;

1118 
°©us
 = 
s
->status;

1119 i‡(
°©us
 !
INIT_STATE
 && sètu†!
BUSY_STATE
 &&

1120 
°©us
 !
FINISH_STATE
) {

1121  
Z_STREAM_ERROR
;

1125 
	`TRY_FREE
(
°rm
, 
s
->
≥ndög_buf
);

1126 
	`TRY_FREE
(
°rm
, 
s
->
hód
);

1127 
	`TRY_FREE
(
°rm
, 
s
->
¥ev
);

1128 
	`TRY_FREE
(
°rm
, 
s
->
wödow
);

1130 
	`ZFREE
(
°rm
, 
s
);

1131 
°rm
->
°©e
 = 
Z_NULL
;

1133  
°©us
 =
BUSY_STATE
 ? 
Z_DATA_ERROR
 : 
Z_OK
;

1134 
	}
}

1139 
	$deÊ©eC›y
 (
de°
, 
sour˚
)

1140 
z_°ªamp
 
de°
;

1141 
z_°ªamp
 
sour˚
;

1143 
deÊ©e_°©e
 *
ds
;

1144 
deÊ©e_°©e
 *
ss
;

1145 
ushf
 *
ovîœy
;

1147 i‡(
sour˚
 =
Z_NULL
 || 
de°
 =Z_NULL || sour˚->
°©e
 == Z_NULL)

1148  
Z_STREAM_ERROR
;

1149 
ss
 = (
deÊ©e_°©e
 *Ë
sour˚
->
°©e
;

1151 
	`zmem˝y
(
de°
, 
sour˚
, (*dest));

1153 
ds
 = (
deÊ©e_°©e
 *Ë
	`ZALLOC
(
de°
, 1, (deflate_state));

1154 i‡(
ds
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

1155 
de°
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *Ë
ds
;

1156 
	`zmem˝y
(
ds
, 
ss
, (*ds));

1157 
ds
->
°rm
 = 
de°
;

1159 
ds
->
wödow
 = (
Byãf
 *Ë
	`ZALLOC
(
de°
, ds->
w_size
, 2*(
Byã
));

1160 
ds
->
¥ev
 = (
Posf
 *Ë
	`ZALLOC
(
de°
, ds->
w_size
, (
Pos
));

1161 
ds
->
hód
 = (
Posf
 *Ë
	`ZALLOC
(
de°
, ds->
hash_size
, (
Pos
));

1162 
ovîœy
 = (
ushf
 *Ë
	`ZALLOC
(
de°
, 
ds
->
lô_bufsize
, (
ush
)+2);

1163 
ds
->
≥ndög_buf
 = (
uchf
 *Ë
ovîœy
;

1165 i‡(
ds
->
wödow
 =
Z_NULL
 || ds->
¥ev
 =Z_NULL || ds->
hód
 == Z_NULL ||

1166 
ds
->
≥ndög_buf
 =
Z_NULL
) {

1167 
	`deÊ©eEnd
 (
de°
);

1168  
Z_MEM_ERROR
;

1171 
	`zmem˝y
(
ds
->
wödow
, 
ss
->wödow, ds->
w_size
 * 2 * (
Byã
));

1172 
	`zmem˝y
(
ds
->
¥ev
, 
ss
->¥ev, ds->
w_size
 * (
Pos
));

1173 
	`zmem˝y
(
ds
->
hód
, 
ss
->hód, ds->
hash_size
 * (
Pos
));

1174 
	`zmem˝y
(
ds
->
≥ndög_buf
, 
ss
->≥ndög_buf, (
uI¡
)ds->
≥ndög_buf_size
);

1176 
ds
->
≥ndög_out
 = ds->
≥ndög_buf
 + (
ss
->pending_out - ss->pending_buf);

1177 
ds
->
d_buf
 = 
ovîœy
 + ds->
lô_bufsize
/(
ush
);

1178 
ds
->
l_buf
 = ds->
≥ndög_buf
 + (1+(
ush
))*ds->
lô_bufsize
;

1180 
ds
->
l_desc
.
dyn_åì
 = ds->
dyn_…ªe
;

1181 
ds
->
d_desc
.
dyn_åì
 = ds->
dyn_dåì
;

1182 
ds
->
bl_desc
.
dyn_åì
 = ds->
bl_åì
;

1184  
Z_OK
;

1185 
	}
}

1191 
	$deÊ©eOuçutPídög
 (
°rm
)

1192 
z_°ªamp
 
°rm
;

1194 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL)  0;

1196  ((
deÊ©e_°©e
 *)(
°rm
->
°©e
))->
≥ndög
;

1197 
	}
}

1206 
loˇl
 
	$ªad_buf
(
°rm
, 
buf
, 
size
)

1207 
z_°ªamp
 
°rm
;

1208 
ch¨f
 *
buf
;

1209 
size
;

1211 
Àn
 = 
°rm
->
avaû_ö
;

1213 i‡(
Àn
 > 
size
)Üen = size;

1214 i‡(
Àn
 == 0)  0;

1216 
°rm
->
avaû_ö
 -
Àn
;

1218 i‡(!((
deÊ©e_°©e
 *)(
°rm
->
°©e
))->
nohódî
) {

1219 
°rm
->
adÀr
 = 
	`adÀr32
(°rm->adÀr, såm->
√xt_ö
, 
Àn
);

1221 
	`zmem˝y
(
buf
, 
°rm
->
√xt_ö
, 
Àn
);

1222 
°rm
->
√xt_ö
 +
Àn
;

1223 
°rm
->
tŸÆ_ö
 +
Àn
;

1225  ()
Àn
;

1226 
	}
}

1231 
loˇl
 
	$lm_öô
 (
s
)

1232 
deÊ©e_°©e
 *
s
;

1234 
s
->
wödow_size
 = (
ulg
)2L*s->
w_size
;

1236 
	`CLEAR_HASH
(
s
);

1240 
s
->
max_œzy_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_œzy
;

1241 
s
->
good_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
good_Àngth
;

1242 
s
->
ni˚_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
ni˚_Àngth
;

1243 
s
->
max_chaö_Àngth
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_chaö
;

1245 
s
->
°r°¨t
 = 0;

1246 
s
->
block_°¨t
 = 0L;

1247 
s
->
lookahód
 = 0;

1248 
s
->
m©ch_Àngth
 = s->
¥ev_Àngth
 = 
MIN_MATCH
-1;

1249 
s
->
m©ch_avaûabÀ
 = 0;

1250 
s
->
ös_h
 = 0;

1251 #ifde‡
ASMV


1252 
	`m©ch_öô
();

1254 
	}
}

1265 #i‚de‡
ASMV


1269 
loˇl
 
uI¡
 
	$l⁄ge°_m©ch
(
s
, 
cur_m©ch
)

1270 
deÊ©e_°©e
 *
s
;

1271 
IPos
 
cur_m©ch
;

1273 
chaö_Àngth
 = 
s
->
max_chaö_Àngth
;

1274 
Byãf
 *
sˇn
 = 
s
->
wödow
 + s->
°r°¨t
;

1275 
Byãf
 *
m©ch
;

1276 
Àn
;

1277 
be°_Àn
 = 
s
->
¥ev_Àngth
;

1278 
ni˚_m©ch
 = 
s
->nice_match;

1279 
IPos
 
limô
 = 
s
->
°r°¨t
 > (IPos)
	`MAX_DIST
(s) ?

1280 
s
->
°r°¨t
 - (
IPos
)
	`MAX_DIST
(sË: 
NIL
;

1284 
Posf
 *
¥ev
 = 
s
->prev;

1285 
uI¡
 
wmask
 = 
s
->
w_mask
;

1287 #ifde‡
UNALIGNED_OK


1291 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
 - 1;

1292 
ush
 
sˇn_°¨t
 = *(
ushf
*)
sˇn
;

1293 
ush
 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

1295 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
;

1296 
Byã
 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

1297 
Byã
 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

1303 
	`As£π
(
s
->
hash_bôs
 >8 && 
MAX_MATCH
 == 258, "CodeÅoo clever");

1306 i‡(
s
->
¥ev_Àngth
 >s->
good_m©ch
) {

1307 
chaö_Àngth
 >>= 2;

1312 i‡((
uI¡
)
ni˚_m©ch
 > 
s
->
lookahód
)Çice_match = s->lookahead;

1314 
	`As£π
((
ulg
)
s
->
°r°¨t
 <s->
wödow_size
-
MIN_LOOKAHEAD
, "needÜookahead");

1317 
	`As£π
(
cur_m©ch
 < 
s
->
°r°¨t
, "no future");

1318 
m©ch
 = 
s
->
wödow
 + 
cur_m©ch
;

1323 #i‡(
	`deföed
(
UNALIGNED_OK
Ë&& 
MAX_MATCH
 == 258)

1327 i‡(*(
ushf
*)(
m©ch
+
be°_Àn
-1Ë!
sˇn_íd
 ||

1328 *(
ushf
*)
m©ch
 !
sˇn_°¨t
) ;

1339 
	`As£π
(
sˇn
[2] =
m©ch
[2], "scan[2]?");

1340 
sˇn
++, 
m©ch
++;

1342 } *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1343 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1344 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1345 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1346 
sˇn
 < 
°ªnd
);

1350 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1351 i‡(*
sˇn
 =*
m©ch
) scan++;

1353 
Àn
 = (
MAX_MATCH
 - 1Ë- ()(
°ªnd
-
sˇn
);

1354 
sˇn
 = 
°ªnd
 - (
MAX_MATCH
-1);

1358 i‡(
m©ch
[
be°_Àn
] !
sˇn_íd
 ||

1359 
m©ch
[
be°_Àn
-1] !
sˇn_íd1
 ||

1360 *
m©ch
 !*
sˇn
 ||

1361 *++
m©ch
 !
sˇn
[1]) ;

1369 
sˇn
 +2, 
m©ch
++;

1370 
	`As£π
(*
sˇn
 =*
m©ch
, "match[2]?");

1376 } *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1377 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1378 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1379 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1380 
sˇn
 < 
°ªnd
);

1382 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1384 
Àn
 = 
MAX_MATCH
 - ()(
°ªnd
 - 
sˇn
);

1385 
sˇn
 = 
°ªnd
 - 
MAX_MATCH
;

1389 i‡(
Àn
 > 
be°_Àn
) {

1390 
s
->
m©ch_°¨t
 = 
cur_m©ch
;

1391 
be°_Àn
 = 
Àn
;

1392 i‡(
Àn
 >
ni˚_m©ch
) ;

1393 #ifde‡
UNALIGNED_OK


1394 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

1396 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

1397 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

1400 } (
cur_m©ch
 = 
¥ev
[cur_m©ch & 
wmask
]Ë> 
limô


1401 && --
chaö_Àngth
 != 0);

1403 i‡((
uI¡
)
be°_Àn
 <
s
->
lookahód
)  best_len;

1404  
s
->
lookahód
;

1405 
	}
}

1408 #ifde‡
DEBUG_ZLIB


1412 
loˇl
 
	$check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

1413 
deÊ©e_°©e
 *
s
;

1414 
IPos
 
°¨t
, 
m©ch
;

1415 
Àngth
;

1418 i‡(
	`zmemcmp
((
ch¨f
 *)
s
->
wödow
 + 
m©ch
,

1419 (
ch¨f
 *)
s
->
wödow
 + 
°¨t
, 
Àngth
Ë!
EQUAL
) {

1420 
	`Ârötf
(
°dîr
, " start %u, match %u,Üength %d\n",

1421 
°¨t
, 
m©ch
, 
Àngth
);

1423 
	`Ârötf
(
°dîr
, "%c%c", 
s
->
wödow
[
m©ch
++], s->wödow[
°¨t
++]);

1424 } --
Àngth
 != 0);

1425 
	`z_îr‹
("invalid match");

1427 i‡(
z_vîbo£
 > 1) {

1428 
	`Ârötf
(
°dîr
,"\\[%d,%d]", 
°¨t
-
m©ch
, 
Àngth
);

1429 dÿ{ 
	`putc
(
s
->
wödow
[
°¨t
++], 
°dîr
); } --
Àngth
 != 0);

1431 
	}
}

1433 
	#check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

	)

1446 
loˇl
 
	$fûl_wödow
(
s
)

1447 
deÊ©e_°©e
 *
s
;

1449 
n
, 
m
;

1450 
Posf
 *
p
;

1451 
m‹e
;

1452 
uI¡
 
wsize
 = 
s
->
w_size
;

1455 
m‹e
 = ()(
s
->
wödow_size
 -(
ulg
)s->
lookahód
 -(ulg)s->
°r°¨t
);

1458 i‡(
m‹e
 =0 && 
s
->
°r°¨t
 =0 && s->
lookahód
 == 0) {

1459 
m‹e
 = 
wsize
;

1461 } i‡(
m‹e
 == ()(-1)) {

1465 
m‹e
--;

1470 } i‡(
s
->
°r°¨t
 >
wsize
+
	`MAX_DIST
(s)) {

1472 
	`zmem˝y
((
ch¨f
 *)
s
->
wödow
, (ch¨‡*)s->wödow+
wsize
,

1473 ()
wsize
);

1474 
s
->
m©ch_°¨t
 -
wsize
;

1475 
s
->
°r°¨t
 -
wsize
;

1476 
s
->
block_°¨t
 -(Ë
wsize
;

1484 
n
 = 
s
->
hash_size
;

1485 
p
 = &
s
->
hód
[
n
];

1487 
m
 = *--
p
;

1488 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1489 } --
n
);

1491 
n
 = 
wsize
;

1492 
p
 = &
s
->
¥ev
[
n
];

1494 
m
 = *--
p
;

1495 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1499 } --
n
);

1500 
m‹e
 +
wsize
;

1502 i‡(
s
->
°rm
->
avaû_ö
 == 0) ;

1515 
	`As£π
(
m‹e
 >= 2, "more < 2");

1517 
n
 = 
	`ªad_buf
(
s
->
°rm
, (
ch¨f
 *)s->
wödow
 + s->
°r°¨t
 + s->
lookahód
,

1518 
m‹e
);

1519 
s
->
lookahód
 +
n
;

1522 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1523 
s
->
ös_h
 = s->
wödow
[s->
°r°¨t
];

1524 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[s->
°r°¨t
+1]);

1525 #i‡
MIN_MATCH
 != 3

1526 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1533 } 
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && s->
°rm
->
avaû_ö
 != 0);

1534 
	}
}

1540 
	#FLUSH_BLOCK_ONLY
(
s
, 
eof
) { \

1541 
	`_å_Êush_block
(
s
, (s->
block_°¨t
 >= 0L ? \

1542 (
ch¨f
 *)&
s
->
wödow
[()s->
block_°¨t
] : \

1543 (
ch¨f
 *)
Z_NULL
), \

1544 (
ulg
)(()
s
->
°r°¨t
 - s->
block_°¨t
), \

1545 (
eof
)); \

1546 
s
->
block_°¨t
 = s->
°r°¨t
; \

1547 
	`Êush_≥ndög
(
s
->
°rm
); \

1548 
	`Tø˚v
((
°dîr
,"[FLUSH]")); \

1549 }

	)

1552 
	#FLUSH_BLOCK
(
s
, 
eof
) { \

1553 
	`FLUSH_BLOCK_ONLY
(
s
, 
eof
); \

1554 i‡(
s
->
°rm
->
avaû_out
 =0Ë (
eof
Ë? 
föish_°¨ãd
 : 
√ed_m‹e
; \

1555 }

	)

1566 
loˇl
 
block_°©e
 
	$deÊ©e_°‹ed
(
s
, 
Êush
)

1567 
deÊ©e_°©e
 *
s
;

1568 
Êush
;

1573 
ulg
 
max_block_size
 = 0xffff;

1574 
ulg
 
max_°¨t
;

1576 i‡(
max_block_size
 > 
s
->
≥ndög_buf_size
 - 5) {

1577 
max_block_size
 = 
s
->
≥ndög_buf_size
 - 5;

1583 i‡(
s
->
lookahód
 <= 1) {

1585 
	`As£π
(
s
->
°r°¨t
 < s->
w_size
+
	`MAX_DIST
(s) ||

1586 
s
->
block_°¨t
 >()s->
w_size
, "slideÅooÜate");

1588 
	`fûl_wödow
(
s
);

1589 i‡(
s
->
lookahód
 =0 && 
Êush
 =
Z_NO_FLUSH
Ë 
√ed_m‹e
;

1591 i‡(
s
->
lookahód
 == 0) ;

1593 
	`As£π
(
s
->
block_°¨t
 >= 0L, "block gone");

1595 
s
->
°r°¨t
 +s->
lookahód
;

1596 
s
->
lookahód
 = 0;

1599 
max_°¨t
 = 
s
->
block_°¨t
 + 
max_block_size
;

1600 i‡(
s
->
°r°¨t
 =0 || (
ulg
)s->°r°¨à>
max_°¨t
) {

1602 
s
->
lookahód
 = (
uI¡
)(s->
°r°¨t
 - 
max_°¨t
);

1603 
s
->
°r°¨t
 = (
uI¡
)
max_°¨t
;

1604 
	`FLUSH_BLOCK
(
s
, 0);

1609 i‡(
s
->
°r°¨t
 - (
uI¡
)s->
block_°¨t
 >
	`MAX_DIST
(s)) {

1610 
	`FLUSH_BLOCK
(
s
, 0);

1613 
	`FLUSH_BLOCK
(
s
, 
Êush
 =
Z_FINISH
);

1614  
Êush
 =
Z_FINISH
 ? 
föish_d⁄e
 : 
block_d⁄e
;

1615 
	}
}

1624 
loˇl
 
block_°©e
 
	$deÊ©e_Á°
(
s
, 
Êush
)

1625 
deÊ©e_°©e
 *
s
;

1626 
Êush
;

1628 
IPos
 
hash_hód
 = 
NIL
;

1629 
bÊush
;

1637 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1638 
	`fûl_wödow
(
s
);

1639 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
) {

1640  
√ed_m‹e
;

1642 i‡(
s
->
lookahód
 == 0) ;

1648 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1649 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1655 i‡(
hash_hód
 !
NIL
 && 
s
->
°r°¨t
 - hash_hód <
	`MAX_DIST
(s)) {

1660 i‡(
s
->
°øãgy
 !
Z_HUFFMAN_ONLY
) {

1661 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1665 i‡(
s
->
m©ch_Àngth
 >
MIN_MATCH
) {

1666 
	`check_m©ch
(
s
, s->
°r°¨t
, s->
m©ch_°¨t
, s->
m©ch_Àngth
);

1668 
bÊush
 = 
	`_å_èŒy
(
s
, s->
°r°¨t
 - s->
m©ch_°¨t
,

1669 
s
->
m©ch_Àngth
 - 
MIN_MATCH
);

1671 
s
->
lookahód
 -s->
m©ch_Àngth
;

1676 i‡(
s
->
m©ch_Àngth
 <s->
max_ö£π_Àngth
 &&

1677 
s
->
lookahód
 >
MIN_MATCH
) {

1678 
s
->
m©ch_Àngth
--;

1680 
s
->
°r°¨t
++;

1681 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1685 } --
s
->
m©ch_Àngth
 != 0);

1686 
s
->
°r°¨t
++;

1688 
s
->
°r°¨t
 +s->
m©ch_Àngth
;

1689 
s
->
m©ch_Àngth
 = 0;

1690 
s
->
ös_h
 = s->
wödow
[s->
°r°¨t
];

1691 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[s->
°r°¨t
+1]);

1692 #i‡
MIN_MATCH
 != 3

1693 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1701 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
]));

1702 
bÊush
 = 
	`_å_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
]);

1703 
s
->
lookahód
--;

1704 
s
->
°r°¨t
++;

1706 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1708 
	`FLUSH_BLOCK
(
s
, 
Êush
 =
Z_FINISH
);

1709  
Êush
 =
Z_FINISH
 ? 
föish_d⁄e
 : 
block_d⁄e
;

1710 
	}
}

1717 
loˇl
 
block_°©e
 
	$deÊ©e_¶ow
(
s
, 
Êush
)

1718 
deÊ©e_°©e
 *
s
;

1719 
Êush
;

1721 
IPos
 
hash_hód
 = 
NIL
;

1722 
bÊush
;

1731 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1732 
	`fûl_wödow
(
s
);

1733 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
) {

1734  
√ed_m‹e
;

1736 i‡(
s
->
lookahód
 == 0) ;

1742 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1743 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1748 
s
->
¥ev_Àngth
 = s->
m©ch_Àngth
, s->
¥ev_m©ch
 = s->
m©ch_°¨t
;

1749 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1751 i‡(
hash_hód
 !
NIL
 && 
s
->
¥ev_Àngth
 < s->
max_œzy_m©ch
 &&

1752 
s
->
°r°¨t
 - 
hash_hód
 <
	`MAX_DIST
(s)) {

1757 i‡(
s
->
°øãgy
 !
Z_HUFFMAN_ONLY
) {

1758 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1762 i‡(
s
->
m©ch_Àngth
 <5 && (s->
°øãgy
 =
Z_FILTERED
 ||

1763 (
s
->
m©ch_Àngth
 =
MIN_MATCH
 &&

1764 
s
->
°r°¨t
 - s->
m©ch_°¨t
 > 
TOO_FAR
))) {

1769 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1775 i‡(
s
->
¥ev_Àngth
 >
MIN_MATCH
 && s->
m©ch_Àngth
 <= s->prev_length) {

1776 
uI¡
 
max_ö£π
 = 
s
->
°r°¨t
 + s->
lookahód
 - 
MIN_MATCH
;

1779 
	`check_m©ch
(
s
, s->
°r°¨t
-1, s->
¥ev_m©ch
, s->
¥ev_Àngth
);

1781 
bÊush
 = 
	`_å_èŒy
(
s
, s->
°r°¨t
 -1 - s->
¥ev_m©ch
,

1782 
s
->
¥ev_Àngth
 - 
MIN_MATCH
);

1789 
s
->
lookahód
 -s->
¥ev_Àngth
-1;

1790 
s
->
¥ev_Àngth
 -= 2;

1792 i‡(++
s
->
°r°¨t
 <
max_ö£π
) {

1793 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1795 } --
s
->
¥ev_Àngth
 != 0);

1796 
s
->
m©ch_avaûabÀ
 = 0;

1797 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1798 
s
->
°r°¨t
++;

1800 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1802 } i‡(
s
->
m©ch_avaûabÀ
) {

1807 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1808 i‡(
	`_å_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
-1])) {

1809 
	`FLUSH_BLOCK_ONLY
(
s
, 0);

1811 
s
->
°r°¨t
++;

1812 
s
->
lookahód
--;

1813 i‡(
s
->
°rm
->
avaû_out
 =0Ë 
√ed_m‹e
;

1818 
s
->
m©ch_avaûabÀ
 = 1;

1819 
s
->
°r°¨t
++;

1820 
s
->
lookahód
--;

1823 
	`As£π
 (
Êush
 !
Z_NO_FLUSH
, "no flush?");

1824 i‡(
s
->
m©ch_avaûabÀ
) {

1825 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1826 
	`_å_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
-1]);

1827 
s
->
m©ch_avaûabÀ
 = 0;

1829 
	`FLUSH_BLOCK
(
s
, 
Êush
 =
Z_FINISH
);

1830  
Êush
 =
Z_FINISH
 ? 
föish_d⁄e
 : 
block_d⁄e
;

1831 
	}
}

1870 #ifde‡
DEBUG_ZLIB


1871 
	~<˘y≥.h
>

1878 
	#MAX_BL_BITS
 7

	)

1881 
	#END_BLOCK
 256

	)

1884 
	#REP_3_6
 16

	)

1887 
	#REPZ_3_10
 17

	)

1890 
	#REPZ_11_138
 18

	)

1893 
loˇl
 
	gexåa_lbôs
[
LENGTH_CODES
]

1896 
loˇl
 
	gexåa_dbôs
[
D_CODES
]

1899 
loˇl
 
	gexåa_blbôs
[
BL_CODES
]

1902 
loˇl
 
uch
 
	gbl_‹dî
[
BL_CODES
]

1908 
	#Buf_size
 (8 * 2*())

	)

1917 
loˇl
 
˘_d©a
 
	g°©ic_…ªe
[
L_CODES
+2];

1924 
loˇl
 
˘_d©a
 
	g°©ic_dåì
[
D_CODES
];

1929 
loˇl
 
uch
 
	gdi°_code
[512];

1935 
loˇl
 
uch
 
	gÀngth_code
[
MAX_MATCH
-
MIN_MATCH
+1];

1938 
loˇl
 
	gba£_Àngth
[
LENGTH_CODES
];

1941 
loˇl
 
	gba£_di°
[
D_CODES
];

1944 
	s°©ic_åì_desc_s
 {

1945 
˘_d©a
 *
	m°©ic_åì
;

1946 
ötf
 *
	mexåa_bôs
;

1947 
	mexåa_ba£
;

1948 
	mñems
;

1949 
	mmax_Àngth
;

1952 
loˇl
 
°©ic_åì_desc
 
	g°©ic_l_desc
 =

1953 {
°©ic_…ªe
, 
exåa_lbôs
, 
LITERALS
+1, 
L_CODES
, 
MAX_BITS
};

1955 
loˇl
 
°©ic_åì_desc
 
	g°©ic_d_desc
 =

1956 {
°©ic_dåì
, 
exåa_dbôs
, 0, 
D_CODES
, 
MAX_BITS
};

1958 
loˇl
 
°©ic_åì_desc
 
	g°©ic_bl_desc
 =

1959 {(
˘_d©a
 *)0, 
exåa_blbôs
, 0, 
BL_CODES
, 
MAX_BL_BITS
};

1965 
loˇl
 
å_°©ic_öô
 
OF
(());

1966 
loˇl
 
öô_block
 
OF
((
deÊ©e_°©e
 *
s
));

1967 
loˇl
 
pqdownhóp
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
k
));

1968 
loˇl
 
gí_bôÀn
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

1969 
loˇl
 
gí_codes
 
OF
((
˘_d©a
 *
åì
, 
max_code
, 
ushf
 *
bl_cou¡
));

1970 
loˇl
 
buûd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

1971 
loˇl
 
sˇn_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

1972 
loˇl
 
£nd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

1973 
loˇl
 
buûd_bl_åì
 
OF
((
deÊ©e_°©e
 *
s
));

1974 
loˇl
 
£nd_Æl_åìs
 
OF
((
deÊ©e_°©e
 *
s
, 
lcodes
, 
dcodes
,

1975 
blcodes
));

1976 
loˇl
 
com¥ess_block
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
…ªe
,

1977 
˘_d©a
 *
dåì
));

1978 
loˇl
 
£t_d©a_ty≥
 
OF
((
deÊ©e_°©e
 *
s
));

1979 
loˇl
 
bi_ªvî£
 
OF
((
vÆue
, 
Àngth
));

1980 
loˇl
 
bi_wödup
 
OF
((
deÊ©e_°©e
 *
s
));

1981 
loˇl
 
bi_Êush
 
OF
((
deÊ©e_°©e
 *
s
));

1982 
loˇl
 
c›y_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, 
Àn
,

1983 
hódî
));

1985 #i‚de‡
DEBUG_ZLIB


1986 
	#£nd_code
(
s
, 
c
, 
åì
Ë
	`£nd_bôs
(s,Åªe[c].
Code
,Åªe[c].
Lí
)

	)

1990 
	#£nd_code
(
s
, 
c
, 
åì
) \

1991 { i‡(
vîbo£
>2Ë
	`Ârötf
(
°dîr
,"\ncd %3d ",(
c
)); \

1992 
	`£nd_bôs
(
s
, 
åì
[
c
].
Code
,Åªe[c].
Lí
); }

	)

1995 
	#d_code
(
di°
) \

1996 ((
di°
Ë< 256 ? 
di°_code
[di°] : di°_code[256+((di°)>>7)])

	)

2006 
	#put_sh‹t
(
s
, 
w
) { \

2007 
	`put_byã
(
s
, (
uch
)((
w
) & 0xff)); \

2008 
	`put_byã
(
s
, (
uch
)((
ush
)(
w
) >> 8)); \

2009 }

	)

2015 #ifde‡
DEBUG_ZLIB


2016 
loˇl
 
£nd_bôs
 
OF
((
deÊ©e_°©e
 *
s
, 
vÆue
, 
Àngth
));

2018 
loˇl
 
	$£nd_bôs
(
s
, 
vÆue
, 
Àngth
)

2019 
deÊ©e_°©e
 *
s
;

2020 
vÆue
;

2021 
Àngth
;

2023 
	`Tø˚vv
((
°dîr
,"Ü %2d v %4x ", 
Àngth
, 
vÆue
));

2024 
	`As£π
(
Àngth
 > 0 &&Üength <= 15, "invalidÜength");

2025 
s
->
bôs_£¡
 +(
ulg
)
Àngth
;

2031 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àngth
) {

2032 
s
->
bi_buf
 |(
vÆue
 << s->
bi_vÆid
);

2033 
	`put_sh‹t
(
s
, s->
bi_buf
);

2034 
s
->
bi_buf
 = (
ush
)
vÆue
 >> (
Buf_size
 - s->
bi_vÆid
);

2035 
s
->
bi_vÆid
 +
Àngth
 - 
Buf_size
;

2037 
s
->
bi_buf
 |
vÆue
 << s->
bi_vÆid
;

2038 
s
->
bi_vÆid
 +
Àngth
;

2040 
	}
}

2043 
	#£nd_bôs
(
s
, 
vÆue
, 
Àngth
) \

2044 { 
Àn
 = 
Àngth
;\

2045 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àn
) {\

2046 
vÆ
 = 
vÆue
;\

2047 
s
->
bi_buf
 |(
vÆ
 << s->
bi_vÆid
);\

2048 
	`put_sh‹t
(
s
, s->
bi_buf
);\

2049 
s
->
bi_buf
 = (
ush
)
vÆ
 >> (
Buf_size
 - s->
bi_vÆid
);\

2050 
s
->
bi_vÆid
 +
Àn
 - 
Buf_size
;\

2052 
s
->
bi_buf
 |(
vÆue
Ë<< s->
bi_vÆid
;\

2053 
s
->
bi_vÆid
 +
Àn
;\

2055 }

	)

2059 
	#MAX
(
a
,
b
Ë◊ >b ?á : b)

	)

2067 
loˇl
 
	$å_°©ic_öô
()

2069 
°©ic_öô_d⁄e
 = 0;

2070 
n
;

2071 
bôs
;

2072 
Àngth
;

2073 
code
;

2074 
di°
;

2075 
ush
 
bl_cou¡
[
MAX_BITS
+1];

2078 i‡(
°©ic_öô_d⁄e
) ;

2081 
Àngth
 = 0;

2082 
code
 = 0; codê< 
LENGTH_CODES
-1; code++) {

2083 
ba£_Àngth
[
code
] = 
Àngth
;

2084 
n
 = 0;Ç < (1<<
exåa_lbôs
[
code
]);Ç++) {

2085 
Àngth_code
[
Àngth
++] = (
uch
)
code
;

2088 
	`As£π
 (
Àngth
 == 256, "tr_static_init:Üength != 256");

2093 
Àngth_code
[
Àngth
-1] = (
uch
)
code
;

2096 
di°
 = 0;

2097 
code
 = 0 ; code < 16; code++) {

2098 
ba£_di°
[
code
] = 
di°
;

2099 
n
 = 0;Ç < (1<<
exåa_dbôs
[
code
]);Ç++) {

2100 
di°_code
[
di°
++] = (
uch
)
code
;

2103 
	`As£π
 (
di°
 == 256, "tr_static_init: dist != 256");

2104 
di°
 >>= 7;

2105  ; 
code
 < 
D_CODES
; code++) {

2106 
ba£_di°
[
code
] = 
di°
 << 7;

2107 
n
 = 0;Ç < (1<<(
exåa_dbôs
[
code
]-7));Ç++) {

2108 
di°_code
[256 + 
di°
++] = (
uch
)
code
;

2111 
	`As£π
 (
di°
 == 256, "tr_static_init: 256+dist != 512");

2114 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
bl_cou¡
[bits] = 0;

2115 
n
 = 0;

2116 
n
 <143Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

2117 
n
 <255Ë
°©ic_…ªe
[n++].
Lí
 = 9, 
bl_cou¡
[9]++;

2118 
n
 <279Ë
°©ic_…ªe
[n++].
Lí
 = 7, 
bl_cou¡
[7]++;

2119 
n
 <287Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

2124 
	`gí_codes
((
˘_d©a
 *)
°©ic_…ªe
, 
L_CODES
+1, 
bl_cou¡
);

2127 
n
 = 0;Ç < 
D_CODES
;Ç++) {

2128 
°©ic_dåì
[
n
].
Lí
 = 5;

2129 
°©ic_dåì
[
n
].
Code
 = 
	`bi_ªvî£
(()n, 5);

2131 
°©ic_öô_d⁄e
 = 1;

2132 
	}
}

2137 
	$_å_öô
(
s
)

2138 
deÊ©e_°©e
 *
s
;

2140 
	`å_°©ic_öô
();

2142 
s
->
com¥es£d_Àn
 = 0L;

2144 
s
->
l_desc
.
dyn_åì
 = s->
dyn_…ªe
;

2145 
s
->
l_desc
.
°©_desc
 = &
°©ic_l_desc
;

2147 
s
->
d_desc
.
dyn_åì
 = s->
dyn_dåì
;

2148 
s
->
d_desc
.
°©_desc
 = &
°©ic_d_desc
;

2150 
s
->
bl_desc
.
dyn_åì
 = s->
bl_åì
;

2151 
s
->
bl_desc
.
°©_desc
 = &
°©ic_bl_desc
;

2153 
s
->
bi_buf
 = 0;

2154 
s
->
bi_vÆid
 = 0;

2155 
s
->
œ°_eob_Àn
 = 8;

2156 #ifde‡
DEBUG_ZLIB


2157 
s
->
bôs_£¡
 = 0L;

2161 
	`öô_block
(
s
);

2162 
	}
}

2167 
loˇl
 
	$öô_block
(
s
)

2168 
deÊ©e_°©e
 *
s
;

2170 
n
;

2173 
n
 = 0;Ç < 
L_CODES
;Ç++Ë
s
->
dyn_…ªe
[n].
Fªq
 = 0;

2174 
n
 = 0;Ç < 
D_CODES
;Ç++Ë
s
->
dyn_dåì
[n].
Fªq
 = 0;

2175 
n
 = 0;Ç < 
BL_CODES
;Ç++Ë
s
->
bl_åì
[n].
Fªq
 = 0;

2177 
s
->
dyn_…ªe
[
END_BLOCK
].
Fªq
 = 1;

2178 
s
->
›t_Àn
 = s->
°©ic_Àn
 = 0L;

2179 
s
->
œ°_lô
 = s->
m©ches
 = 0;

2180 
	}
}

2182 
	#SMALLEST
 1

	)

2190 
	#pqªmove
(
s
, 
åì
, 
t›
) \

2192 
t›
 = 
s
->
hóp
[
SMALLEST
]; \

2193 
s
->
hóp
[
SMALLEST
] = s->hóp[s->
hóp_Àn
--]; \

2194 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
); \

2195 }

	)

2201 
	#smÆÀr
(
åì
, 
n
, 
m
, 
dïth
) \

2202 (
åì
[
n
].
Fªq
 <Åªe[
m
].Freq || \

2203 (
åì
[
n
].
Fªq
 =åì[
m
].Fªq && 
dïth
[n] <dïth[m]))

	)

2211 
loˇl
 
	$pqdownhóp
(
s
, 
åì
, 
k
)

2212 
deÊ©e_°©e
 *
s
;

2213 
˘_d©a
 *
åì
;

2214 
k
;

2216 
v
 = 
s
->
hóp
[
k
];

2217 
j
 = 
k
 << 1;

2218 
j
 <
s
->
hóp_Àn
) {

2220 i‡(
j
 < 
s
->
hóp_Àn
 &&

2221 
	`smÆÀr
(
åì
, 
s
->
hóp
[
j
+1], s->hóp[j], s->
dïth
)) {

2222 
j
++;

2225 i‡(
	`smÆÀr
(
åì
, 
v
, 
s
->
hóp
[
j
], s->
dïth
)) ;

2228 
s
->
hóp
[
k
] = s->hóp[
j
]; k = j;

2231 
j
 <<= 1;

2233 
s
->
hóp
[
k
] = 
v
;

2234 
	}
}

2246 
loˇl
 
	$gí_bôÀn
(
s
, 
desc
)

2247 
deÊ©e_°©e
 *
s
;

2248 
åì_desc
 *
desc
;

2250 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

2251 
max_code
 = 
desc
->max_code;

2252 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

2253 
ötf
 *
exåa
 = 
desc
->
°©_desc
->
exåa_bôs
;

2254 
ba£
 = 
desc
->
°©_desc
->
exåa_ba£
;

2255 
max_Àngth
 = 
desc
->
°©_desc
->max_length;

2256 
h
;

2257 
n
, 
m
;

2258 
bôs
;

2259 
xbôs
;

2260 
ush
 
f
;

2261 
ovîÊow
 = 0;

2263 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
s
->
bl_cou¡
[bits] = 0;

2268 
åì
[
s
->
hóp
[s->
hóp_max
]].
Lí
 = 0;

2270 
h
 = 
s
->
hóp_max
+1; h < 
HEAP_SIZE
; h++) {

2271 
n
 = 
s
->
hóp
[
h
];

2272 
bôs
 = 
åì
[åì[
n
].
Dad
].
Lí
 + 1;

2273 i‡(
bôs
 > 
max_Àngth
Ëbô†max_Àngth, 
ovîÊow
++;

2274 
åì
[
n
].
Lí
 = (
ush
)
bôs
;

2277 i‡(
n
 > 
max_code
) ;

2279 
s
->
bl_cou¡
[
bôs
]++;

2280 
xbôs
 = 0;

2281 i‡(
n
 >
ba£
Ë
xbôs
 = 
exåa
[n-base];

2282 
f
 = 
åì
[
n
].
Fªq
;

2283 
s
->
›t_Àn
 +(
ulg
)
f
 * (
bôs
 + 
xbôs
);

2284 i‡(
°ªe
Ë
s
->
°©ic_Àn
 +(
ulg
)
f
 * (°ªe[
n
].
Lí
 + 
xbôs
);

2286 i‡(
ovîÊow
 == 0) ;

2288 
	`Tø˚
((
°dîr
,"\nbitÜength overflow\n"));

2293 
bôs
 = 
max_Àngth
-1;

2294 
s
->
bl_cou¡
[
bôs
] == 0) bits--;

2295 
s
->
bl_cou¡
[
bôs
]--;

2296 
s
->
bl_cou¡
[
bôs
+1] += 2;

2297 
s
->
bl_cou¡
[
max_Àngth
]--;

2301 
ovîÊow
 -= 2;

2302 } 
ovîÊow
 > 0);

2309 
bôs
 = 
max_Àngth
; bits != 0; bits--) {

2310 
n
 = 
s
->
bl_cou¡
[
bôs
];

2311 
n
 != 0) {

2312 
m
 = 
s
->
hóp
[--
h
];

2313 i‡(
m
 > 
max_code
) ;

2314 i‡(
åì
[
m
].
Lí
 !(Ë
bôs
) {

2315 
	`Tø˚
((
°dîr
,"codê%d bô†%d->%d\n", 
m
, 
åì
[m].
Lí
, 
bôs
));

2316 
s
->
›t_Àn
 +(()
bôs
 - ()
åì
[
m
].
Lí
)

2317 *()
åì
[
m
].
Fªq
;

2318 
åì
[
m
].
Lí
 = (
ush
)
bôs
;

2320 
n
--;

2323 
	}
}

2333 
loˇl
 
	$gí_codes
 (
åì
, 
max_code
, 
bl_cou¡
)

2334 
˘_d©a
 *
åì
;

2335 
max_code
;

2336 
ushf
 *
bl_cou¡
;

2338 
ush
 
√xt_code
[
MAX_BITS
+1];

2339 
ush
 
code
 = 0;

2340 
bôs
;

2341 
n
;

2346 
bôs
 = 1; bô†<
MAX_BITS
; bits++) {

2347 
√xt_code
[
bôs
] = 
code
 = (codê+ 
bl_cou¡
[bits-1]) << 1;

2352 
	`As£π
 (
code
 + 
bl_cou¡
[
MAX_BITS
]-1 == (1<<MAX_BITS)-1,

2354 
	`Tø˚v
((
°dîr
,"\ngí_codes: max_codê%d ", 
max_code
));

2356 
n
 = 0;Ç <
max_code
;Ç++) {

2357 
Àn
 = 
åì
[
n
].
Lí
;

2358 i‡(
Àn
 == 0) ;

2360 
åì
[
n
].
Code
 = 
	`bi_ªvî£
(
√xt_code
[
Àn
]++,Üen);

2362 
	`Tø˚cv
(
åì
 !
°©ic_…ªe
, (
°dîr
,"\nn %3d %cÜ %2d c %4x (%x) ",

2363 
n
, (
	`isgøph
“Ë?Ç : ' '), 
Àn
, 
åì
[n].
Code
, 
√xt_code
[len]-1));

2365 
	}
}

2375 
loˇl
 
	$buûd_åì
(
s
, 
desc
)

2376 
deÊ©e_°©e
 *
s
;

2377 
åì_desc
 *
desc
;

2379 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

2380 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

2381 
ñems
 = 
desc
->
°©_desc
->elems;

2382 
n
, 
m
;

2383 
max_code
 = -1;

2384 
node
;

2390 
s
->
hóp_Àn
 = 0, s->
hóp_max
 = 
HEAP_SIZE
;

2392 
n
 = 0;Ç < 
ñems
;Ç++) {

2393 i‡(
åì
[
n
].
Fªq
 != 0) {

2394 
s
->
hóp
[++(s->
hóp_Àn
)] = 
max_code
 = 
n
;

2395 
s
->
dïth
[
n
] = 0;

2397 
åì
[
n
].
Lí
 = 0;

2406 
s
->
hóp_Àn
 < 2) {

2407 
node
 = 
s
->
hóp
[++(s->
hóp_Àn
)] = (
max_code
 < 2 ? ++max_code : 0);

2408 
åì
[
node
].
Fªq
 = 1;

2409 
s
->
dïth
[
node
] = 0;

2410 
s
->
›t_Àn
--; i‡(
°ªe
Ës->
°©ic_Àn
 -°ªe[
node
].
Lí
;

2413 
desc
->
max_code
 = max_code;

2418 
n
 = 
s
->
hóp_Àn
/2;Ç >1;Ç--Ë
	`pqdownhóp
(s, 
åì
,Ç);

2423 
node
 = 
ñems
;

2425 
	`pqªmove
(
s
, 
åì
, 
n
);

2426 
m
 = 
s
->
hóp
[
SMALLEST
];

2428 
s
->
hóp
[--(s->
hóp_max
)] = 
n
;

2429 
s
->
hóp
[--(s->
hóp_max
)] = 
m
;

2432 
åì
[
node
].
Fªq
 =Åªe[
n
].Fªq +Åªe[
m
].Freq;

2433 
s
->
dïth
[
node
] = (
uch
Ë(
	`MAX
(s->dïth[
n
], s->dïth[
m
]) + 1);

2434 
åì
[
n
].
Dad
 =Åªe[
m
].Dad = (
ush
)
node
;

2435 #ifde‡
DUMP_BL_TREE


2436 i‡(
åì
 =
s
->
bl_åì
) {

2437 
	`Ârötf
(
°dîr
,"\nnode %d(%d), sons %d(%d) %d(%d)",

2438 
node
, 
åì
[node].
Fªq
, 
n
,Åªe[n].Fªq, 
m
,Åree[m].Freq);

2442 
s
->
hóp
[
SMALLEST
] = 
node
++;

2443 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
);

2445 } 
s
->
hóp_Àn
 >= 2);

2447 
s
->
hóp
[--(s->
hóp_max
)] = s->hóp[
SMALLEST
];

2452 
	`gí_bôÀn
(
s
, (
åì_desc
 *)
desc
);

2455 
	`gí_codes
 ((
˘_d©a
 *)
åì
, 
max_code
, 
s
->
bl_cou¡
);

2456 
	}
}

2462 
loˇl
 
	$sˇn_åì
 (
s
, 
åì
, 
max_code
)

2463 
deÊ©e_°©e
 *
s
;

2464 
˘_d©a
 *
åì
;

2465 
max_code
;

2467 
n
;

2468 
¥evÀn
 = -1;

2469 
cuæí
;

2470 
√xéí
 = 
åì
[0].
Lí
;

2471 
cou¡
 = 0;

2472 
max_cou¡
 = 7;

2473 
mö_cou¡
 = 4;

2475 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2476 
åì
[
max_code
+1].
Lí
 = (
ush
)0xffff;

2478 
n
 = 0;Ç <
max_code
;Ç++) {

2479 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

2480 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

2482 } i‡(
cou¡
 < 
mö_cou¡
) {

2483 
s
->
bl_åì
[
cuæí
].
Fªq
 +
cou¡
;

2484 } i‡(
cuæí
 != 0) {

2485 i‡(
cuæí
 !
¥evÀn
Ë
s
->
bl_åì
[cuæí].
Fªq
++;

2486 
s
->
bl_åì
[
REP_3_6
].
Fªq
++;

2487 } i‡(
cou¡
 <= 10) {

2488 
s
->
bl_åì
[
REPZ_3_10
].
Fªq
++;

2490 
s
->
bl_åì
[
REPZ_11_138
].
Fªq
++;

2492 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

2493 i‡(
√xéí
 == 0) {

2494 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2495 } i‡(
cuæí
 =
√xéí
) {

2496 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

2498 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

2501 
	}
}

2507 
loˇl
 
	$£nd_åì
 (
s
, 
åì
, 
max_code
)

2508 
deÊ©e_°©e
 *
s
;

2509 
˘_d©a
 *
åì
;

2510 
max_code
;

2512 
n
;

2513 
¥evÀn
 = -1;

2514 
cuæí
;

2515 
√xéí
 = 
åì
[0].
Lí
;

2516 
cou¡
 = 0;

2517 
max_cou¡
 = 7;

2518 
mö_cou¡
 = 4;

2521 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2523 
n
 = 0;Ç <
max_code
;Ç++) {

2524 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

2525 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

2527 } i‡(
cou¡
 < 
mö_cou¡
) {

2528 dÿ{ 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); } --
cou¡
 != 0);

2530 } i‡(
cuæí
 != 0) {

2531 i‡(
cuæí
 !
¥evÀn
) {

2532 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); 
cou¡
--;

2534 
	`As£π
(
cou¡
 >= 3 && count <= 6, " 3_6?");

2535 
	`£nd_code
(
s
, 
REP_3_6
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 2);

2537 } i‡(
cou¡
 <= 10) {

2538 
	`£nd_code
(
s
, 
REPZ_3_10
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 3);

2541 
	`£nd_code
(
s
, 
REPZ_11_138
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-11, 7);

2543 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

2544 i‡(
√xéí
 == 0) {

2545 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2546 } i‡(
cuæí
 =
√xéí
) {

2547 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

2549 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

2552 
	}
}

2558 
loˇl
 
	$buûd_bl_åì
(
s
)

2559 
deÊ©e_°©e
 *
s
;

2561 
max_blödex
;

2564 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, s->
l_desc
.
max_code
);

2565 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, s->
d_desc
.
max_code
);

2568 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
bl_desc
)));

2577 
max_blödex
 = 
BL_CODES
-1; max_blindex >= 3; max_blindex--) {

2578 i‡(
s
->
bl_åì
[
bl_‹dî
[
max_blödex
]].
Lí
 != 0) ;

2581 
s
->
›t_Àn
 +3*(
max_blödex
+1) + 5+5+4;

2582 
	`Tø˚v
((
°dîr
, "\ndynÅrees: dyn %ld, stat %ld",

2583 
s
->
›t_Àn
, s->
°©ic_Àn
));

2585  
max_blödex
;

2586 
	}
}

2593 
loˇl
 
	$£nd_Æl_åìs
(
s
, 
lcodes
, 
dcodes
, 
blcodes
)

2594 
deÊ©e_°©e
 *
s
;

2595 
lcodes
, 
dcodes
, 
blcodes
;

2597 
ønk
;

2599 
	`As£π
 (
lcodes
 >257 && 
dcodes
 >1 && 
blcodes
 >= 4, "notÉnough codes");

2600 
	`As£π
 (
lcodes
 <
L_CODES
 && 
dcodes
 <
D_CODES
 && 
blcodes
 <
BL_CODES
,

2602 
	`Tø˚v
((
°dîr
, "\nbl counts: "));

2603 
	`£nd_bôs
(
s
, 
lcodes
-257, 5);

2604 
	`£nd_bôs
(
s
, 
dcodes
-1, 5);

2605 
	`£nd_bôs
(
s
, 
blcodes
-4, 4);

2606 
ønk
 = 0;Ñ™k < 
blcodes
;Ñank++) {

2607 
	`Tø˚v
((
°dîr
, "\nb»codê%2d ", 
bl_‹dî
[
ønk
]));

2608 
	`£nd_bôs
(
s
, s->
bl_åì
[
bl_‹dî
[
ønk
]].
Lí
, 3);

2610 
	`Tø˚v
((
°dîr
, "\nb»åì: síà%ld", 
s
->
bôs_£¡
));

2612 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, 
lcodes
-1);

2613 
	`Tø˚v
((
°dîr
, "\∆ôÅªe: síà%ld", 
s
->
bôs_£¡
));

2615 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, 
dcodes
-1);

2616 
	`Tø˚v
((
°dîr
, "\ndi°Åªe: síà%ld", 
s
->
bôs_£¡
));

2617 
	}
}

2622 
	$_å_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
eof
)

2623 
deÊ©e_°©e
 *
s
;

2624 
ch¨f
 *
buf
;

2625 
ulg
 
°‹ed_Àn
;

2626 
eof
;

2628 
	`£nd_bôs
(
s
, (
STORED_BLOCK
<<1)+
eof
, 3);

2629 
s
->
com¥es£d_Àn
 = (s->com¥es£d_À¿+ 3 + 7Ë& (
ulg
)~7L;

2630 
s
->
com¥es£d_Àn
 +(
°‹ed_Àn
 + 4) << 3;

2632 
	`c›y_block
(
s
, 
buf
, ()
°‹ed_Àn
, 1);

2633 
	}
}

2637 
	$_å_°‹ed_ty≥_⁄ly
(
s
)

2638 
deÊ©e_°©e
 *
s
;

2640 
	`£nd_bôs
(
s
, (
STORED_BLOCK
 << 1), 3);

2641 
	`bi_wödup
(
s
);

2642 
s
->
com¥es£d_Àn
 = (s->compressed_len + 3) & ~7L;

2643 
	}
}

2657 
	$_å_Æign
(
s
)

2658 
deÊ©e_°©e
 *
s
;

2660 
	`£nd_bôs
(
s
, 
STATIC_TREES
<<1, 3);

2661 
	`£nd_code
(
s
, 
END_BLOCK
, 
°©ic_…ªe
);

2662 
s
->
com¥es£d_Àn
 += 10L;

2663 
	`bi_Êush
(
s
);

2669 i‡(1 + 
s
->
œ°_eob_Àn
 + 10 - s->
bi_vÆid
 < 9) {

2670 
	`£nd_bôs
(
s
, 
STATIC_TREES
<<1, 3);

2671 
	`£nd_code
(
s
, 
END_BLOCK
, 
°©ic_…ªe
);

2672 
s
->
com¥es£d_Àn
 += 10L;

2673 
	`bi_Êush
(
s
);

2675 
s
->
œ°_eob_Àn
 = 7;

2676 
	}
}

2683 
ulg
 
	$_å_Êush_block
(
s
, 
buf
, 
°‹ed_Àn
, 
eof
)

2684 
deÊ©e_°©e
 *
s
;

2685 
ch¨f
 *
buf
;

2686 
ulg
 
°‹ed_Àn
;

2687 
eof
;

2689 
ulg
 
›t_Ànb
, 
°©ic_Ànb
;

2690 
max_blödex
 = 0;

2693 i‡(
s
->
Àvñ
 > 0) {

2696 i‡(
s
->
d©a_ty≥
 =
Z_UNKNOWN
Ë
	`£t_d©a_ty≥
(s);

2699 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
l_desc
)));

2700 
	`Tø˚v
((
°dîr
, "\∆ô d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

2701 
s
->
°©ic_Àn
));

2703 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
d_desc
)));

2704 
	`Tø˚v
((
°dîr
, "\ndi° d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

2705 
s
->
°©ic_Àn
));

2713 
max_blödex
 = 
	`buûd_bl_åì
(
s
);

2716 
›t_Ànb
 = (
s
->
›t_Àn
+3+7)>>3;

2717 
°©ic_Ànb
 = (
s
->
°©ic_Àn
+3+7)>>3;

2719 
	`Tø˚v
((
°dîr
, "\nopt %lu(%lu) stat %lu(%lu) stored %luÜit %u ",

2720 
›t_Ànb
, 
s
->
›t_Àn
, 
°©ic_Ànb
, s->
°©ic_Àn
, 
°‹ed_Àn
,

2721 
s
->
œ°_lô
));

2723 i‡(
°©ic_Ànb
 <
›t_Ànb
) opt_lenb = static_lenb;

2726 
	`As£π
(
buf
 != (*)0, "lost buf");

2727 
›t_Ànb
 = 
°©ic_Ànb
 = 
°‹ed_Àn
 + 5;

2734 #ifde‡
STORED_FILE_OK


2735 #ifde‡
FORCE_STORED_FILE


2736 i‡(
eof
 && 
s
->
com¥es£d_Àn
 == 0L) {

2738 i‡(
°‹ed_Àn
 <
›t_Ànb
 && 
eof
 && 
s
->
com¥es£d_Àn
==0L && 
	`£ekabÀ
()) {

2741 i‡(
buf
 =(
ch¨f
*)0Ë
	`îr‹
 ("block vanished");

2743 
	`c›y_block
(
s
, 
buf
, ()
°‹ed_Àn
, 0);

2744 
s
->
com¥es£d_Àn
 = 
°‹ed_Àn
 << 3;

2745 
s
->
mëhod
 = 
STORED
;

2749 #ifde‡
FORCE_STORED


2750 i‡(
buf
 != (*)0) {

2752 i‡(
°‹ed_Àn
+4 <
›t_Ànb
 && 
buf
 != (*)0) {

2761 
	`_å_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
eof
);

2763 #ifde‡
FORCE_STATIC


2764 } i‡(
°©ic_Ànb
 >= 0) {

2766 } i‡(
°©ic_Ànb
 =
›t_Ànb
) {

2768 
	`£nd_bôs
(
s
, (
STATIC_TREES
<<1)+
eof
, 3);

2769 
	`com¥ess_block
(
s
, (
˘_d©a
 *)
°©ic_…ªe
, (˘_d©®*)
°©ic_dåì
);

2770 
s
->
com¥es£d_Àn
 +3 + s->
°©ic_Àn
;

2772 
	`£nd_bôs
(
s
, (
DYN_TREES
<<1)+
eof
, 3);

2773 
	`£nd_Æl_åìs
(
s
, s->
l_desc
.
max_code
+1, s->
d_desc
.max_code+1,

2774 
max_blödex
+1);

2775 
	`com¥ess_block
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, (˘_d©®*)s->
dyn_dåì
);

2776 
s
->
com¥es£d_Àn
 +3 + s->
›t_Àn
;

2778 
	`As£π
 (
s
->
com¥es£d_Àn
 =s->
bôs_£¡
, "bad compressed size");

2779 
	`öô_block
(
s
);

2781 i‡(
eof
) {

2782 
	`bi_wödup
(
s
);

2783 
s
->
com¥es£d_Àn
 += 7;

2785 
	`Tø˚v
((
°dîr
,"\ncom¥À¿%lu(%luË", 
s
->
com¥es£d_Àn
>>3,

2786 
s
->
com¥es£d_Àn
-7*
eof
));

2788  
s
->
com¥es£d_Àn
 >> 3;

2789 
	}
}

2795 
	$_å_èŒy
 (
s
, 
di°
, 
lc
)

2796 
deÊ©e_°©e
 *
s
;

2797 
di°
;

2798 
lc
;

2800 
s
->
d_buf
[s->
œ°_lô
] = (
ush
)
di°
;

2801 
s
->
l_buf
[s->
œ°_lô
++] = (
uch
)
lc
;

2802 i‡(
di°
 == 0) {

2804 
s
->
dyn_…ªe
[
lc
].
Fªq
++;

2806 
s
->
m©ches
++;

2808 
di°
--;

2809 
	`As£π
((
ush
)
di°
 < (ush)
	`MAX_DIST
(
s
) &&

2810 (
ush
)
lc
 <(ush)(
MAX_MATCH
-
MIN_MATCH
) &&

2811 (
ush
)
	`d_code
(
di°
Ë< (ush)
D_CODES
, "_tr_tally: bad match");

2813 
s
->
dyn_…ªe
[
Àngth_code
[
lc
]+
LITERALS
+1].
Fªq
++;

2814 
s
->
dyn_dåì
[
	`d_code
(
di°
)].
Fªq
++;

2818 i‡(
s
->
Àvñ
 > 2 && (s->
œ°_lô
 & 0xfff) == 0) {

2820 
ulg
 
out_Àngth
 = (ulg)
s
->
œ°_lô
*8L;

2821 
ulg
 
ö_Àngth
 = (ulg)(()
s
->
°r°¨t
 - s->
block_°¨t
);

2822 
dcode
;

2823 
dcode
 = 0; dcodê< 
D_CODES
; dcode++) {

2824 
out_Àngth
 +(
ulg
)
s
->
dyn_dåì
[
dcode
].
Fªq
 *

2825 (5L+
exåa_dbôs
[
dcode
]);

2827 
out_Àngth
 >>= 3;

2828 
	`Tø˚v
((
°dîr
,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",

2829 
s
->
œ°_lô
, 
ö_Àngth
, 
out_Àngth
,

2830 100L - 
out_Àngth
*100L/
ö_Àngth
));

2831 i‡(
s
->
m©ches
 < s->
œ°_lô
/2 && 
out_Àngth
 < 
ö_Àngth
/2)  1;

2833  (
s
->
œ°_lô
 =s->
lô_bufsize
-1);

2838 
	}
}

2843 
loˇl
 
	$com¥ess_block
(
s
, 
…ªe
, 
dåì
)

2844 
deÊ©e_°©e
 *
s
;

2845 
˘_d©a
 *
…ªe
;

2846 
˘_d©a
 *
dåì
;

2848 
di°
;

2849 
lc
;

2850 
lx
 = 0;

2851 
code
;

2852 
exåa
;

2854 i‡(
s
->
œ°_lô
 != 0) do {

2855 
di°
 = 
s
->
d_buf
[
lx
];

2856 
lc
 = 
s
->
l_buf
[
lx
++];

2857 i‡(
di°
 == 0) {

2858 
	`£nd_code
(
s
, 
lc
, 
…ªe
);

2859 
	`Tø˚cv
(
	`isgøph
(
lc
), (
°dîr
," '%c' ",Üc));

2862 
code
 = 
Àngth_code
[
lc
];

2863 
	`£nd_code
(
s
, 
code
+
LITERALS
+1, 
…ªe
);

2864 
exåa
 = 
exåa_lbôs
[
code
];

2865 i‡(
exåa
 != 0) {

2866 
lc
 -
ba£_Àngth
[
code
];

2867 
	`£nd_bôs
(
s
, 
lc
, 
exåa
);

2869 
di°
--;

2870 
code
 = 
	`d_code
(
di°
);

2871 
	`As£π
 (
code
 < 
D_CODES
, "bad d_code");

2873 
	`£nd_code
(
s
, 
code
, 
dåì
);

2874 
exåa
 = 
exåa_dbôs
[
code
];

2875 i‡(
exåa
 != 0) {

2876 
di°
 -
ba£_di°
[
code
];

2877 
	`£nd_bôs
(
s
, 
di°
, 
exåa
);

2882 
	`As£π
(
s
->
≥ndög
 < s->
lô_bufsize
 + 2*
lx
, "pendingBuf overflow");

2884 } 
lx
 < 
s
->
œ°_lô
);

2886 
	`£nd_code
(
s
, 
END_BLOCK
, 
…ªe
);

2887 
s
->
œ°_eob_Àn
 = 
…ªe
[
END_BLOCK
].
Lí
;

2888 
	}
}

2896 
loˇl
 
	$£t_d©a_ty≥
(
s
)

2897 
deÊ©e_°©e
 *
s
;

2899 
n
 = 0;

2900 
ascii_‰eq
 = 0;

2901 
bö_‰eq
 = 0;

2902 
n
 < 7Ë
bö_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2903 
n
 < 128Ë
ascii_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2904 
n
 < 
LITERALS
Ë
bö_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2905 
s
->
d©a_ty≥
 = (
Byã
)(
bö_‰eq
 > (
ascii_‰eq
 >> 2Ë? 
Z_BINARY
 : 
Z_ASCII
);

2906 
	}
}

2913 
loˇl
 
	$bi_ªvî£
(
code
, 
Àn
)

2914 
code
;

2915 
Àn
;

2917 
ªs
 = 0;

2919 
ªs
 |
code
 & 1;

2920 
code
 >>1, 
ªs
 <<= 1;

2921 } --
Àn
 > 0);

2922  
ªs
 >> 1;

2923 
	}
}

2928 
loˇl
 
	$bi_Êush
(
s
)

2929 
deÊ©e_°©e
 *
s
;

2931 i‡(
s
->
bi_vÆid
 == 16) {

2932 
	`put_sh‹t
(
s
, s->
bi_buf
);

2933 
s
->
bi_buf
 = 0;

2934 
s
->
bi_vÆid
 = 0;

2935 } i‡(
s
->
bi_vÆid
 >= 8) {

2936 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

2937 
s
->
bi_buf
 >>= 8;

2938 
s
->
bi_vÆid
 -= 8;

2940 
	}
}

2945 
loˇl
 
	$bi_wödup
(
s
)

2946 
deÊ©e_°©e
 *
s
;

2948 i‡(
s
->
bi_vÆid
 > 8) {

2949 
	`put_sh‹t
(
s
, s->
bi_buf
);

2950 } i‡(
s
->
bi_vÆid
 > 0) {

2951 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

2953 
s
->
bi_buf
 = 0;

2954 
s
->
bi_vÆid
 = 0;

2955 #ifde‡
DEBUG_ZLIB


2956 
s
->
bôs_£¡
 = (s->bits_sent+7) & ~7;

2958 
	}
}

2964 
loˇl
 
	$c›y_block
(
s
, 
buf
, 
Àn
, 
hódî
)

2965 
deÊ©e_°©e
 *
s
;

2966 
ch¨f
 *
buf
;

2967 
Àn
;

2968 
hódî
;

2970 
	`bi_wödup
(
s
);

2971 
s
->
œ°_eob_Àn
 = 8;

2973 i‡(
hódî
) {

2974 
	`put_sh‹t
(
s
, (
ush
)
Àn
);

2975 
	`put_sh‹t
(
s
, (
ush
)~
Àn
);

2976 #ifde‡
DEBUG_ZLIB


2977 
s
->
bôs_£¡
 += 2*16;

2980 #ifde‡
DEBUG_ZLIB


2981 
s
->
bôs_£¡
 +(
ulg
)
Àn
<<3;

2984 
	`zmem˝y
(&
s
->
≥ndög_buf
[s->
≥ndög
], 
buf
, 
Àn
);

2985 
s
->
≥ndög
 +
Àn
;

2986 
	}
}

3008 
	göÊ©e_blocks_°©e
;

3009 
öÊ©e_blocks_°©e
 
	tFAR
 
	töÊ©e_blocks_°©ef
;

3011 
öÊ©e_blocks_°©ef
 * 
öÊ©e_blocks_√w
 
OF
((

3012 
z_°ªamp
 
z
,

3013 
check_func
 
c
,

3014 
uI¡
 
w
));

3016 
öÊ©e_blocks
 
OF
((

3017 
öÊ©e_blocks_°©ef
 *,

3018 
z_°ªamp
 ,

3021 
öÊ©e_blocks_ª£t
 
OF
((

3022 
öÊ©e_blocks_°©ef
 *,

3023 
z_°ªamp
 ,

3024 
uL⁄gf
 *));

3026 
öÊ©e_blocks_‰ì
 
OF
((

3027 
öÊ©e_blocks_°©ef
 *,

3028 
z_°ªamp
 ,

3029 
uL⁄gf
 *));

3031 
öÊ©e_£t_di˘i⁄¨y
 
OF
((

3032 
öÊ©e_blocks_°©ef
 *
s
,

3033 c⁄° 
Byãf
 *
d
,

3034 
uI¡
 
n
));

3036 
öÊ©e_addhi°‹y
 
OF
((

3037 
öÊ©e_blocks_°©ef
 *,

3038 
z_°ªamp
));

3040 
öÊ©e_∑ckë_Êush
 
OF
((

3041 
öÊ©e_blocks_°©ef
 *));

3044 #i‚de‡
NO_DUMMY_DECL


3045 
	söÊ©e_blocks_°©e
 {
	mdummy
;};

3049 
	söã∫Æ_°©e
 {

3053 
	mMETHOD
,

3054 
	mFLAG
,

3055 
	mDICT4
,

3056 
	mDICT3
,

3057 
	mDICT2
,

3058 
	mDICT1
,

3059 
	mDICT0
,

3060 
	mBLOCKS
,

3061 
	mCHECK4
,

3062 
	mCHECK3
,

3063 
	mCHECK2
,

3064 
	mCHECK1
,

3065 
	mDONE
,

3066 
	mBAD
}

3067 
	mmode
;

3071 
uI¡
 
	mmëhod
;

3073 
uL⁄g
 
	mwas
;

3074 
uL⁄g
 
	m√ed
;

3075 } 
	mcheck
;

3076 
uI¡
 
	mm¨kî
;

3077 } 
	msub
;

3080 
	mnowøp
;

3081 
uI¡
 
	mwbôs
;

3082 
öÊ©e_blocks_°©ef


3083 *
	mblocks
;

3088 
	$öÊ©eRe£t
(
z
)

3089 
z_°ªamp
 
z
;

3091 
uL⁄g
 
c
;

3093 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

3094  
Z_STREAM_ERROR
;

3095 
z
->
tŸÆ_ö
 = z->
tŸÆ_out
 = 0;

3096 
z
->
msg
 = 
Z_NULL
;

3097 
z
->
°©e
->
mode
 = z->°©e->
nowøp
 ? 
BLOCKS
 : 
METHOD
;

3098 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &
c
);

3099 
	`Tø˚
((
°dîr
, "inflate:Ñeset\n"));

3100  
Z_OK
;

3101 
	}
}

3104 
	$öÊ©eEnd
(
z
)

3105 
z_°ªamp
 
z
;

3107 
uL⁄g
 
c
;

3109 i‡(
z
 =
Z_NULL
 || z->
°©e
 =Z_NULL || z->
z‰ì
 == Z_NULL)

3110  
Z_STREAM_ERROR
;

3111 i‡(
z
->
°©e
->
blocks
 !
Z_NULL
)

3112 
	`öÊ©e_blocks_‰ì
(
z
->
°©e
->
blocks
, z, &
c
);

3113 
	`ZFREE
(
z
, z->
°©e
);

3114 
z
->
°©e
 = 
Z_NULL
;

3115 
	`Tø˚
((
°dîr
, "inflate:Énd\n"));

3116  
Z_OK
;

3117 
	}
}

3120 
	$öÊ©eInô2_
(
z
, 
w
, 
vîsi⁄
, 
°ªam_size
)

3121 
z_°ªamp
 
z
;

3122 
w
;

3123 c⁄° *
vîsi⁄
;

3124 
°ªam_size
;

3126 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
ZLIB_VERSION
[0] ||

3127 
°ªam_size
 !(
z_°ªam
))

3128  
Z_VERSION_ERROR
;

3131 i‡(
z
 =
Z_NULL
)

3132  
Z_STREAM_ERROR
;

3133 
z
->
msg
 = 
Z_NULL
;

3134 #i‚de‡
NO_ZCFUNCS


3135 i‡(
z
->
zÆloc
 =
Z_NULL
)

3137 
z
->
zÆloc
 = 
zˇŒoc
;

3138 
z
->
›aque
 = (
voidpf
)0;

3140 i‡(
z
->
z‰ì
 =
Z_NULL
Ëz->z‰ì = 
zc‰ì
;

3142 i‡((
z
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)

3143 
	`ZALLOC
(
z
,1,(
öã∫Æ_°©e
))Ë=
Z_NULL
)

3144  
Z_MEM_ERROR
;

3145 
z
->
°©e
->
blocks
 = 
Z_NULL
;

3148 
z
->
°©e
->
nowøp
 = 0;

3149 i‡(
w
 < 0)

3151 
w
 = - w;

3152 
z
->
°©e
->
nowøp
 = 1;

3156 i‡(
w
 < 8 || w > 15)

3158 
	`öÊ©eEnd
(
z
);

3159  
Z_STREAM_ERROR
;

3161 
z
->
°©e
->
wbôs
 = (
uI¡
)
w
;

3164 i‡((
z
->
°©e
->
blocks
 =

3165 
	`öÊ©e_blocks_√w
(
z
, z->
°©e
->
nowøp
 ? 
Z_NULL
 : 
adÀr32
, (
uI¡
)1 << 
w
))

3166 =
Z_NULL
)

3168 
	`öÊ©eEnd
(
z
);

3169  
Z_MEM_ERROR
;

3171 
	`Tø˚
((
°dîr
, "inflate:állocated\n"));

3174 
	`öÊ©eRe£t
(
z
);

3175  
Z_OK
;

3176 
	}
}

3179 
	$öÊ©eInô_
(
z
, 
vîsi⁄
, 
°ªam_size
)

3180 
z_°ªamp
 
z
;

3181 c⁄° *
vîsi⁄
;

3182 
°ªam_size
;

3184  
	`öÊ©eInô2_
(
z
, 
DEF_WBITS
, 
vîsi⁄
, 
°ªam_size
);

3185 
	}
}

3188 
	#NEEDBYTE
 {if(
z
->
avaû_ö
==0)
em±y
;
r
=
Z_OK
;}

	)

3189 
	#NEXTBYTE
 (
z
->
avaû_ö
--,z->
tŸÆ_ö
++,*z->
√xt_ö
++)

	)

3191 
	$öÊ©e
(
z
, 
f
)

3192 
z_°ªamp
 
z
;

3193 
f
;

3195 
r
;

3196 
uI¡
 
b
;

3198 i‡(
z
 =
Z_NULL
 || z->
°©e
 =Z_NULL || z->
√xt_ö
 =Z_NULL || 
f
 < 0)

3199  
Z_STREAM_ERROR
;

3200 
r
 = 
Z_BUF_ERROR
;

3201 1Ë
z
->
°©e
->
mode
)

3203 
METHOD
:

3204 
NEEDBYTE


3205 i‡(((
z
->
°©e
->
sub
.
mëhod
 = 
NEXTBYTE
Ë& 0xfË!
Z_DEFLATED
)

3207 
z
->
°©e
->
mode
 = 
BAD
;

3208 
z
->
msg
 = (*)"unknown compression method";

3209 
z
->
°©e
->
sub
.
m¨kî
 = 5;

3212 i‡((
z
->
°©e
->
sub
.
mëhod
 >> 4Ë+ 8 > z->°©e->
wbôs
)

3214 
z
->
°©e
->
mode
 = 
BAD
;

3215 
z
->
msg
 = (*)"invalid window size";

3216 
z
->
°©e
->
sub
.
m¨kî
 = 5;

3219 
z
->
°©e
->
mode
 = 
FLAG
;

3220 
FLAG
:

3221 
NEEDBYTE


3222 
b
 = 
NEXTBYTE
;

3223 i‡(((
z
->
°©e
->
sub
.
mëhod
 << 8Ë+ 
b
) % 31)

3225 
z
->
°©e
->
mode
 = 
BAD
;

3226 
z
->
msg
 = (*)"incorrect header check";

3227 
z
->
°©e
->
sub
.
m¨kî
 = 5;

3230 
	`Tø˚
((
°dîr
, "inflate: zlib header ok\n"));

3231 i‡(!(
b
 & 
PRESET_DICT
))

3233 
z
->
°©e
->
mode
 = 
BLOCKS
;

3236 
z
->
°©e
->
mode
 = 
DICT4
;

3237 
DICT4
:

3238 
NEEDBYTE


3239 
z
->
°©e
->
sub
.
check
.
√ed
 = (
uL⁄g
)
NEXTBYTE
 << 24;

3240 
z
->
°©e
->
mode
 = 
DICT3
;

3241 
DICT3
:

3242 
NEEDBYTE


3243 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 16;

3244 
z
->
°©e
->
mode
 = 
DICT2
;

3245 
DICT2
:

3246 
NEEDBYTE


3247 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 8;

3248 
z
->
°©e
->
mode
 = 
DICT1
;

3249 
DICT1
:

3250 
NEEDBYTE


3251 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
;

3252 
z
->
adÀr
 = z->
°©e
->
sub
.
check
.
√ed
;

3253 
z
->
°©e
->
mode
 = 
DICT0
;

3254  
Z_NEED_DICT
;

3255 
DICT0
:

3256 
z
->
°©e
->
mode
 = 
BAD
;

3257 
z
->
msg
 = (*)"need dictionary";

3258 
z
->
°©e
->
sub
.
m¨kî
 = 0;

3259  
Z_STREAM_ERROR
;

3260 
BLOCKS
:

3261 
r
 = 
	`öÊ©e_blocks
(
z
->
°©e
->
blocks
, z,Ñ);

3262 i‡(
f
 =
Z_PACKET_FLUSH
 && 
z
->
avaû_ö
 =0 && z->
avaû_out
 != 0)

3263 
r
 = 
	`öÊ©e_∑ckë_Êush
(
z
->
°©e
->
blocks
);

3264 i‡(
r
 =
Z_DATA_ERROR
)

3266 
z
->
°©e
->
mode
 = 
BAD
;

3267 
z
->
°©e
->
sub
.
m¨kî
 = 0;

3270 i‡(
r
 !
Z_STREAM_END
)

3271  
r
;

3272 
r
 = 
Z_OK
;

3273 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &z->°©e->
sub
.
check
.
was
);

3274 i‡(
z
->
°©e
->
nowøp
)

3276 
z
->
°©e
->
mode
 = 
DONE
;

3279 
z
->
°©e
->
mode
 = 
CHECK4
;

3280 
CHECK4
:

3281 
NEEDBYTE


3282 
z
->
°©e
->
sub
.
check
.
√ed
 = (
uL⁄g
)
NEXTBYTE
 << 24;

3283 
z
->
°©e
->
mode
 = 
CHECK3
;

3284 
CHECK3
:

3285 
NEEDBYTE


3286 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 16;

3287 
z
->
°©e
->
mode
 = 
CHECK2
;

3288 
CHECK2
:

3289 
NEEDBYTE


3290 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 8;

3291 
z
->
°©e
->
mode
 = 
CHECK1
;

3292 
CHECK1
:

3293 
NEEDBYTE


3294 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
;

3296 i‡(
z
->
°©e
->
sub
.
check
.
was
 !z->°©e->sub.check.
√ed
)

3298 
z
->
°©e
->
mode
 = 
BAD
;

3299 
z
->
msg
 = (*)"incorrect data check";

3300 
z
->
°©e
->
sub
.
m¨kî
 = 5;

3303 
	`Tø˚
((
°dîr
, "inflate: zlib check ok\n"));

3304 
z
->
°©e
->
mode
 = 
DONE
;

3305 
DONE
:

3306  
Z_STREAM_END
;

3307 
BAD
:

3308  
Z_DATA_ERROR
;

3310  
Z_STREAM_ERROR
;

3313 
em±y
:

3314 i‡(
f
 !
Z_PACKET_FLUSH
)

3315  
r
;

3316 
z
->
°©e
->
mode
 = 
BAD
;

3317 
z
->
msg
 = (*)"need more forÖacket flush";

3318 
z
->
°©e
->
sub
.
m¨kî
 = 0;

3319  
Z_DATA_ERROR
;

3320 
	}
}

3323 
	$öÊ©eSëDi˘i⁄¨y
(
z
, 
di˘i⁄¨y
, 
di˘Lígth
)

3324 
z_°ªamp
 
z
;

3325 c⁄° 
Byãf
 *
di˘i⁄¨y
;

3326 
uI¡
 
di˘Lígth
;

3328 
uI¡
 
Àngth
 = 
di˘Lígth
;

3330 i‡(
z
 =
Z_NULL
 || z->
°©e
 =Z_NULL || z->°©e->
mode
 !
DICT0
)

3331  
Z_STREAM_ERROR
;

3333 i‡(
	`adÀr32
(1L, 
di˘i⁄¨y
, 
di˘Lígth
Ë!
z
->
adÀr
Ë 
Z_DATA_ERROR
;

3334 
z
->
adÀr
 = 1L;

3336 i‡(
Àngth
 >((
uI¡
)1<<
z
->
°©e
->
wbôs
))

3338 
Àngth
 = (1<<
z
->
°©e
->
wbôs
)-1;

3339 
di˘i⁄¨y
 +
di˘Lígth
 - 
Àngth
;

3341 
	`öÊ©e_£t_di˘i⁄¨y
(
z
->
°©e
->
blocks
, 
di˘i⁄¨y
, 
Àngth
);

3342 
z
->
°©e
->
mode
 = 
BLOCKS
;

3343  
Z_OK
;

3344 
	}
}

3355 
	$öÊ©eIncomp
(
z
)

3356 
z_°ªam
 *
z
;

3358 i‡(
z
->
°©e
->
mode
 !
BLOCKS
)

3359  
Z_DATA_ERROR
;

3360  
	`öÊ©e_addhi°‹y
(
z
->
°©e
->
blocks
, z);

3361 
	}
}

3364 
	$öÊ©eSync
(
z
)

3365 
z_°ªamp
 
z
;

3367 
uI¡
 
n
;

3368 
Byãf
 *
p
;

3369 
uI¡
 
m
;

3370 
uL⁄g
 
r
, 
w
;

3373 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

3374  
Z_STREAM_ERROR
;

3375 i‡(
z
->
°©e
->
mode
 !
BAD
)

3377 
z
->
°©e
->
mode
 = 
BAD
;

3378 
z
->
°©e
->
sub
.
m¨kî
 = 0;

3380 i‡((
n
 = 
z
->
avaû_ö
) == 0)

3381  
Z_BUF_ERROR
;

3382 
p
 = 
z
->
√xt_ö
;

3383 
m
 = 
z
->
°©e
->
sub
.
m¨kî
;

3386 
n
 && 
m
 < 4)

3388 i‡(*
p
 =(
Byã
)(
m
 < 2 ? 0 : 0xff))

3389 
m
++;

3390 i‡(*
p
)

3391 
m
 = 0;

3393 
m
 = 4 - m;

3394 
p
++, 
n
--;

3398 
z
->
tŸÆ_ö
 +
p
 - z->
√xt_ö
;

3399 
z
->
√xt_ö
 = 
p
;

3400 
z
->
avaû_ö
 = 
n
;

3401 
z
->
°©e
->
sub
.
m¨kî
 = 
m
;

3404 i‡(
m
 != 4)

3405  
Z_DATA_ERROR
;

3406 
r
 = 
z
->
tŸÆ_ö
; 
w
 = z->
tŸÆ_out
;

3407 
	`öÊ©eRe£t
(
z
);

3408 
z
->
tŸÆ_ö
 = 
r
; z->
tŸÆ_out
 = 
w
;

3409 
z
->
°©e
->
mode
 = 
BLOCKS
;

3410  
Z_OK
;

3411 
	}
}

3413 #unde‡
NEEDBYTE


3414 #unde‡
NEXTBYTE


3440 
öÊ©e_hu·_s
 
	tFAR
 
	töÊ©e_hu·
;

3442 
	söÊ©e_hu·_s
 {

3445 
Byã
 
	mEx›
;

3446 
Byã
 
	mBôs
;

3447 } 
	mwh©
;

3448 
Byãf
 *
	m∑d
;

3449 } 
	mw‹d
;

3451 
uI¡
 
	mBa£
;

3452 
öÊ©e_hu·
 *
	mNext
;

3453 } 
	mm‹e
;

3456 #ifde‡
DEBUG_ZLIB


3457 
uI¡
 
öÊ©e_hu·s
;

3460 
öÊ©e_åìs_bôs
 
OF
((

3461 
uI¡f
 *,

3462 
uI¡f
 *,

3463 
öÊ©e_hu·
 * 
FAR
 *,

3464 
z_°ªamp
 ));

3466 
öÊ©e_åìs_dy«mic
 
OF
((

3467 
uI¡
,

3468 
uI¡
,

3469 
uI¡f
 *,

3470 
uI¡f
 *,

3471 
uI¡f
 *,

3472 
öÊ©e_hu·
 * 
FAR
 *,

3473 
öÊ©e_hu·
 * 
FAR
 *,

3474 
z_°ªamp
 ));

3476 
öÊ©e_åìs_fixed
 
OF
((

3477 
uI¡f
 *,

3478 
uI¡f
 *,

3479 
öÊ©e_hu·
 * 
FAR
 *,

3480 
öÊ©e_hu·
 * 
FAR
 *));

3482 
öÊ©e_åìs_‰ì
 
OF
((

3483 
öÊ©e_hu·
 *,

3484 
z_°ªamp
 ));

3499 
	göÊ©e_codes_°©e
;

3500 
öÊ©e_codes_°©e
 
	tFAR
 
	töÊ©e_codes_°©ef
;

3502 
öÊ©e_codes_°©ef
 *
öÊ©e_codes_√w
 
OF
((

3503 
uI¡
, uInt,

3504 
öÊ©e_hu·
 *, inflate_huft *,

3505 
z_°ªamp
 ));

3507 
öÊ©e_codes
 
OF
((

3508 
öÊ©e_blocks_°©ef
 *,

3509 
z_°ªamp
 ,

3512 
öÊ©e_codes_‰ì
 
OF
((

3513 
öÊ©e_codes_°©ef
 *,

3514 
z_°ªamp
 ));

3529 #i‚de‡
_INFUTIL_H


3530 
	#_INFUTIL_H


	)

3533 
	mTYPE
,

3534 
	mLENS
,

3535 
	mSTORED
,

3536 
	mTABLE
,

3537 
	mBTREE
,

3538 
	mDTREE
,

3539 
	mCODES
,

3540 
	mDRY
,

3541 
	mDONEB
,

3542 
	mBADB
}

3543 
	töÊ©e_block_mode
;

3546 
	söÊ©e_blocks_°©e
 {

3549 
öÊ©e_block_mode
 
	mmode
;

3553 
uI¡
 
	mÀ·
;

3555 
uI¡
 
	mèbÀ
;

3556 
uI¡
 
	mödex
;

3557 
uI¡f
 *
	mbÀns
;

3558 
uI¡
 
	mbb
;

3559 
öÊ©e_hu·
 *
	mtb
;

3560 } 
	måìs
;

3562 
öÊ©e_hu·
 *
	mé
;

3563 
öÊ©e_hu·
 *
	mtd
;

3564 
öÊ©e_codes_°©ef


3565 *
	mcodes
;

3566 } 
	mdecode
;

3567 } 
	msub
;

3568 
uI¡
 
	mœ°
;

3571 
uI¡
 
	mbôk
;

3572 
uL⁄g
 
	mbôb
;

3573 
Byãf
 *
	mwödow
;

3574 
Byãf
 *
	míd
;

3575 
Byãf
 *
	mªad
;

3576 
Byãf
 *
	mwrôe
;

3577 
check_func
 
	mcheck‚
;

3578 
uL⁄g
 
	mcheck
;

3585 
	#UPDBITS
 {
s
->
bôb
=
b
;s->
bôk
=
k
;}

	)

3586 
	#UPDIN
 {
z
->
avaû_ö
=
n
;z->
tŸÆ_ö
+=
p
-z->
√xt_ö
;z->√xt_öı;}

	)

3587 
	#UPDOUT
 {
s
->
wrôe
=
q
;}

	)

3588 
	#UPDATE
 {
UPDBITS
 
UPDIN
 
UPDOUT
}

	)

3589 
	#LEAVE
 {
UPDATE
  
	`öÊ©e_Êush
(
s
,
z
,
r
);}

	)

3591 
	#LOADIN
 {
p
=
z
->
√xt_ö
;
n
=z->
avaû_ö
;
b
=
s
->
bôb
;
k
=s->
bôk
;}

	)

3592 
	#NEEDBYTE
 {if(
n
)
r
=
Z_OK
;
LEAVE
}

	)

3593 
	#NEXTBYTE
 (
n
--,*
p
++)

	)

3594 
	#NEEDBITS
(
j
Ë{
k
<(j)){
NEEDBYTE
;
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

3595 
	#DUMPBITS
(
j
Ë{
b
>>=(j);
k
-=(j);}

	)

3597 
	#WAVAIL
 (
uI¡
)(
q
<
s
->
ªad
?s->ªad-q-1:s->
íd
-q)

	)

3598 
	#LOADOUT
 {
q
=
s
->
wrôe
;
m
=(
uI¡
)
WAVAIL
;}

	)

3599 
	#WWRAP
 {if(
q
==
s
->
íd
&&s->
ªad
!=s->
wödow
){q=s->wödow;
m
=(
uI¡
)
WAVAIL
;}}

	)

3600 
	#FLUSH
 {
UPDOUT
 
r
=
	`öÊ©e_Êush
(
s
,
z
,r); 
LOADOUT
}

	)

3601 
	#NEEDOUT
 {if(
m
==0){
WWRAP
 if(m==0){
FLUSH
 WWRAP if(m==0Ë
LEAVE
}}
r
=
Z_OK
;}

	)

3602 
	#OUTBYTE
(
a
Ë{*
q
++=(
Byã
)◊);
m
--;}

	)

3604 
	#LOAD
 {
LOADIN
 
LOADOUT
}

	)

3607 
uI¡
 
öÊ©e_mask
[17];

3610 
öÊ©e_Êush
 
OF
((

3611 
öÊ©e_blocks_°©ef
 *,

3612 
z_°ªamp
 ,

3615 #i‚de‡
NO_DUMMY_DECL


3616 
	söã∫Æ_°©e
 {
	mdummy
;};

3622 #i‚de‡
NO_DUMMY_DECL


3623 
	söÊ©e_codes_°©e
 {
	mdummy
;};

3627 
loˇl
 c⁄° 
uI¡
 
	gb‹dî
[] = {

3676 
	$öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
)

3677 
öÊ©e_blocks_°©ef
 *
s
;

3678 
z_°ªamp
 
z
;

3679 
uL⁄gf
 *
c
;

3681 i‡(
s
->
check‚
 !
Z_NULL
)

3682 *
c
 = 
s
->
check
;

3683 i‡(
s
->
mode
 =
BTREE
 || s->modê=
DTREE
)

3684 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
);

3685 i‡(
s
->
mode
 =
CODES
)

3687 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

3688 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

3689 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

3691 
s
->
mode
 = 
TYPE
;

3692 
s
->
bôk
 = 0;

3693 
s
->
bôb
 = 0;

3694 
s
->
ªad
 = s->
wrôe
 = s->
wödow
;

3695 i‡(
s
->
check‚
 !
Z_NULL
)

3696 
z
->
adÀr
 = 
s
->
check
 = (*s->
check‚
)(0L, 
Z_NULL
, 0);

3697 
	`Tø˚
((
°dîr
, "inflate: blocksÑeset\n"));

3698 
	}
}

3701 
öÊ©e_blocks_°©ef
 *
	$öÊ©e_blocks_√w
(
z
, 
c
, 
w
)

3702 
z_°ªamp
 
z
;

3703 
check_func
 
c
;

3704 
uI¡
 
w
;

3706 
öÊ©e_blocks_°©ef
 *
s
;

3708 i‡((
s
 = (
öÊ©e_blocks_°©ef
 *)
ZALLOC


3709 (
z
,1,(
öÊ©e_blocks_°©e
))Ë=
Z_NULL
)

3710  
s
;

3711 i‡((
s
->
wödow
 = (
Byãf
 *)
	`ZALLOC
(
z
, 1, 
w
)Ë=
Z_NULL
)

3713 
	`ZFREE
(
z
, 
s
);

3714  
Z_NULL
;

3716 
s
->
íd
 = s->
wödow
 + 
w
;

3717 
s
->
check‚
 = 
c
;

3718 
s
->
mode
 = 
TYPE
;

3719 
	`Tø˚
((
°dîr
, "inflate: blocksállocated\n"));

3720 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, &s->
check
);

3721  
s
;

3722 
	}
}

3725 #ifde‡
DEBUG_ZLIB


3726 
uI¡
 
öÊ©e_hu·s
;

3728 
	$öÊ©e_blocks
(
s
, 
z
, 
r
)

3729 
öÊ©e_blocks_°©ef
 *
s
;

3730 
z_°ªamp
 
z
;

3731 
r
;

3733 
uI¡
 
t
;

3734 
uL⁄g
 
b
;

3735 
uI¡
 
k
;

3736 
Byãf
 *
p
;

3737 
uI¡
 
n
;

3738 
Byãf
 *
q
;

3739 
uI¡
 
m
;

3742 
LOAD


3745 1Ë
s
->
mode
)

3747 
TYPE
:

3748 
	`NEEDBITS
(3)

3749 
t
 = (
uI¡
)
b
 & 7;

3750 
s
->
œ°
 = 
t
 & 1;

3751 
t
 >> 1)

3754 
	`Tø˚
((
°dîr
, "inflate: stored block%s\n",

3755 
s
->
œ°
 ? " (last)" : ""));

3756 
	`DUMPBITS
(3)

3757 
t
 = 
k
 & 7;

3758 
	`DUMPBITS
(
t
)

3759 
s
->
mode
 = 
LENS
;

3762 
	`Tø˚
((
°dîr
, "inflate: fixed codes block%s\n",

3763 
s
->
œ°
 ? " (last)" : ""));

3765 
uI¡
 
bl
, 
bd
;

3766 
öÊ©e_hu·
 *
é
, *
td
;

3768 
	`öÊ©e_åìs_fixed
(&
bl
, &
bd
, &
é
, &
td
);

3769 
s
->
sub
.
decode
.
codes
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
);

3770 i‡(
s
->
sub
.
decode
.
codes
 =
Z_NULL
)

3772 
r
 = 
Z_MEM_ERROR
;

3773 
LEAVE


3775 
s
->
sub
.
decode
.
é
 = 
Z_NULL
;

3776 
s
->
sub
.
decode
.
td
 = 
Z_NULL
;

3778 
	`DUMPBITS
(3)

3779 
s
->
mode
 = 
CODES
;

3782 
	`Tø˚
((
°dîr
, "inflate: dynamic codes block%s\n",

3783 
s
->
œ°
 ? " (last)" : ""));

3784 
	`DUMPBITS
(3)

3785 
s
->
mode
 = 
TABLE
;

3788 
	`DUMPBITS
(3)

3789 
s
->
mode
 = 
BADB
;

3790 
z
->
msg
 = (*)"invalid blockÅype";

3791 
r
 = 
Z_DATA_ERROR
;

3792 
LEAVE


3795 
LENS
:

3796 
	`NEEDBITS
(32)

3797 i‡((((~
b
) >> 16) & 0xffff) != (b & 0xffff))

3799 
s
->
mode
 = 
BADB
;

3800 
z
->
msg
 = (*)"invalid stored blockÜengths";

3801 
r
 = 
Z_DATA_ERROR
;

3802 
LEAVE


3804 
s
->
sub
.
À·
 = (
uI¡
)
b
 & 0xffff;

3805 
b
 = 
k
 = 0;

3806 
	`Tø˚v
((
°dîr
, "öÊ©e: st‹edÜígth %u\n", 
s
->
sub
.
À·
));

3807 
s
->
mode
 = s->
sub
.
À·
 ? 
STORED
 : (s->
œ°
 ? 
DRY
 : 
TYPE
);

3809 
STORED
:

3810 i‡(
n
 == 0)

3811 
LEAVE


3812 
NEEDOUT


3813 
t
 = 
s
->
sub
.
À·
;

3814 i‡(
t
 > 
n
)Å =Ç;

3815 i‡(
t
 > 
m
)Å = m;

3816 
	`zmem˝y
(
q
, 
p
, 
t
);

3817 
p
 +
t
; 
n
 -=Å;

3818 
q
 +
t
; 
m
 -=Å;

3819 i‡((
s
->
sub
.
À·
 -
t
) != 0)

3821 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd, %luÅotal out\n",

3822 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

3823 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

3824 
s
->
mode
 = s->
œ°
 ? 
DRY
 : 
TYPE
;

3826 
TABLE
:

3827 
	`NEEDBITS
(14)

3828 
s
->
sub
.
åìs
.
èbÀ
 = 
t
 = (
uI¡
)
b
 & 0x3fff;

3829 #i‚de‡
PKZIP_BUG_WORKAROUND


3830 i‡((
t
 & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)

3832 
s
->
mode
 = 
BADB
;

3833 
z
->
msg
 = (*)"too manyÜength or distance symbols";

3834 
r
 = 
Z_DATA_ERROR
;

3835 
LEAVE


3838 
t
 = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);

3839 i‡(
t
 < 19)

3840 
t
 = 19;

3841 i‡((
s
->
sub
.
åìs
.
bÀns
 = (
uI¡f
*)
	`ZALLOC
(
z
, 
t
, (
uI¡
))Ë=
Z_NULL
)

3843 
r
 = 
Z_MEM_ERROR
;

3844 
LEAVE


3846 
	`DUMPBITS
(14)

3847 
s
->
sub
.
åìs
.
ödex
 = 0;

3848 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

3849 
s
->
mode
 = 
BTREE
;

3850 
BTREE
:

3851 
s
->
sub
.
åìs
.
ödex
 < 4 + (s->sub.åìs.
èbÀ
 >> 10))

3853 
	`NEEDBITS
(3)

3854 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = (
uI¡
)
b
 & 7;

3855 
	`DUMPBITS
(3)

3857 
s
->
sub
.
åìs
.
ödex
 < 19)

3858 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = 0;

3859 
s
->
sub
.
åìs
.
bb
 = 7;

3860 
t
 = 
	`öÊ©e_åìs_bôs
(
s
->
sub
.
åìs
.
bÀns
, &s->sub.åìs.
bb
,

3861 &
s
->
sub
.
åìs
.
tb
, 
z
);

3862 i‡(
t
 !
Z_OK
)

3864 
r
 = 
t
;

3865 i‡(
r
 =
Z_DATA_ERROR
) {

3866 
s
->
mode
 = 
BADB
;

3867 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
);

3869 
LEAVE


3871 
s
->
sub
.
åìs
.
ödex
 = 0;

3872 
	`Tø˚v
((
°dîr
, "inflate: bitsÅree ok\n"));

3873 
s
->
mode
 = 
DTREE
;

3874 
DTREE
:

3875 
t
 = 
s
->
sub
.
åìs
.
èbÀ
,

3876 
s
->
sub
.
åìs
.
ödex
 < 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f))

3878 
öÊ©e_hu·
 *
h
;

3879 
uI¡
 
i
, 
j
, 
c
;

3881 
t
 = 
s
->
sub
.
åìs
.
bb
;

3882 
	`NEEDBITS
(
t
)

3883 
h
 = 
s
->
sub
.
åìs
.
tb
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
t
]);

3884 
t
 = 
h
->
w‹d
.
wh©
.
Bôs
;

3885 
c
 = 
h
->
m‹e
.
Ba£
;

3886 i‡(
c
 < 16)

3888 
	`DUMPBITS
(
t
)

3889 
s
->
sub
.
åìs
.
bÀns
[s->sub.åìs.
ödex
++] = 
c
;

3893 
i
 = 
c
 == 18 ? 7 : c - 14;

3894 
j
 = 
c
 == 18 ? 11 : 3;

3895 
	`NEEDBITS
(
t
 + 
i
)

3896 
	`DUMPBITS
(
t
)

3897 
j
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
i
];

3898 
	`DUMPBITS
(
i
)

3899 
i
 = 
s
->
sub
.
åìs
.
ödex
;

3900 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

3901 i‡(
i
 + 
j
 > 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f) ||

3902 (
c
 =16 && 
i
 < 1))

3904 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
åìs
.
tb
, 
z
);

3905 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
);

3906 
s
->
mode
 = 
BADB
;

3907 
z
->
msg
 = (*)"invalid bitÜengthÑepeat";

3908 
r
 = 
Z_DATA_ERROR
;

3909 
LEAVE


3911 
c
 = c =16 ? 
s
->
sub
.
åìs
.
bÀns
[
i
 - 1] : 0;

3913 
s
->
sub
.
åìs
.
bÀns
[
i
++] = 
c
;

3914 } --
j
);

3915 
s
->
sub
.
åìs
.
ödex
 = 
i
;

3918 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
åìs
.
tb
, 
z
);

3919 
s
->
sub
.
åìs
.
tb
 = 
Z_NULL
;

3921 
uI¡
 
bl
, 
bd
;

3922 
öÊ©e_hu·
 *
é
, *
td
;

3923 
öÊ©e_codes_°©ef
 *
c
;

3925 
bl
 = 9;

3926 
bd
 = 6;

3927 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

3928 #ifde‡
DEBUG_ZLIB


3929 
öÊ©e_hu·s
 = 0;

3931 
t
 = 
	`öÊ©e_åìs_dy«mic
(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f),

3932 
s
->
sub
.
åìs
.
bÀns
, &
bl
, &
bd
, &
é
, &
td
, 
z
);

3933 i‡(
t
 !
Z_OK
)

3935 i‡(
t
 =(
uI¡
)
Z_DATA_ERROR
) {

3936 
s
->
mode
 = 
BADB
;

3937 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
);

3939 
r
 = 
t
;

3940 
LEAVE


3942 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
);

3943 
	`Tø˚v
((
°dîr
, "inflate:Årees ok, %d * %d bytes used\n",

3944 
öÊ©e_hu·s
, (
öÊ©e_hu·
)));

3945 i‡((
c
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)Ë=
Z_NULL
)

3947 
	`öÊ©e_åìs_‰ì
(
td
, 
z
);

3948 
	`öÊ©e_åìs_‰ì
(
é
, 
z
);

3949 
r
 = 
Z_MEM_ERROR
;

3950 
LEAVE


3952 
s
->
sub
.
decode
.
codes
 = 
c
;

3953 
s
->
sub
.
decode
.
é
 =Ål;

3954 
s
->
sub
.
decode
.
td
 =Åd;

3956 
s
->
mode
 = 
CODES
;

3957 
CODES
:

3958 
UPDATE


3959 i‡((
r
 = 
	`öÊ©e_codes
(
s
, 
z
,Ñ)Ë!
Z_STREAM_END
)

3960  
	`öÊ©e_Êush
(
s
, 
z
, 
r
);

3961 
r
 = 
Z_OK
;

3962 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

3963 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

3964 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

3965 
LOAD


3966 
	`Tø˚v
((
°dîr
, "inflate: codesÉnd, %luÅotal out\n",

3967 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

3968 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

3969 i‡(!
s
->
œ°
)

3971 
s
->
mode
 = 
TYPE
;

3974 i‡(
k
 > 7)

3976 
	`As£π
(
k
 < 16, "inflate_codes grabbedÅoo many bytes")

3977 
k
 -= 8;

3978 
n
++;

3979 
p
--;

3981 
s
->
mode
 = 
DRY
;

3982 
DRY
:

3983 
FLUSH


3984 i‡(
s
->
ªad
 !s->
wrôe
)

3985 
LEAVE


3986 
s
->
mode
 = 
DONEB
;

3987 
DONEB
:

3988 
r
 = 
Z_STREAM_END
;

3989 
LEAVE


3990 
BADB
:

3991 
r
 = 
Z_DATA_ERROR
;

3992 
LEAVE


3994 
r
 = 
Z_STREAM_ERROR
;

3995 
LEAVE


3997 
	}
}

4000 
	$öÊ©e_blocks_‰ì
(
s
, 
z
, 
c
)

4001 
öÊ©e_blocks_°©ef
 *
s
;

4002 
z_°ªamp
 
z
;

4003 
uL⁄gf
 *
c
;

4005 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
);

4006 
	`ZFREE
(
z
, 
s
->
wödow
);

4007 
	`ZFREE
(
z
, 
s
);

4008 
	`Tø˚
((
°dîr
, "inflate: blocks freed\n"));

4009  
Z_OK
;

4010 
	}
}

4013 
	$öÊ©e_£t_di˘i⁄¨y
(
s
, 
d
, 
n
)

4014 
öÊ©e_blocks_°©ef
 *
s
;

4015 c⁄° 
Byãf
 *
d
;

4016 
uI¡
 
n
;

4018 
	`zmem˝y
((
ch¨f
 *)
s
->
wödow
, 
d
, 
n
);

4019 
s
->
ªad
 = s->
wrôe
 = s->
wödow
 + 
n
;

4020 
	}
}

4030 
	$öÊ©e_addhi°‹y
(
s
, 
z
)

4031 
öÊ©e_blocks_°©ef
 *
s
;

4032 
z_°ªam
 *
z
;

4034 
uL⁄g
 
b
;

4035 
uI¡
 
k
;

4036 
uI¡
 
t
;

4037 
Byãf
 *
p
;

4038 
uI¡
 
n
;

4039 
Byãf
 *
q
;

4040 
uI¡
 
m
;

4042 i‡(
s
->
ªad
 !s->
wrôe
)

4043  
Z_STREAM_ERROR
;

4044 i‡(
s
->
mode
 !
TYPE
)

4045  
Z_DATA_ERROR
;

4048 
LOAD


4052 
n
) {

4053 
t
 = 
n
;

4055 i‡(
t
 > 
m
)Å = m;

4057 i‡(
s
->
check‚
 !
Z_NULL
)

4058 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
t
);

4059 
	`zmem˝y
(
q
, 
p
, 
t
);

4060 
q
 +
t
;

4061 
p
 +
t
;

4062 
n
 -
t
;

4063 
z
->
tŸÆ_out
 +
t
;

4064 
s
->
ªad
 = 
q
;

4066 i‡(
q
 =
s
->
íd
) {

4067 
s
->
ªad
 = 
q
 = s->
wödow
;

4068 
m
 = 
WAVAIL
;

4071 
UPDATE


4072  
Z_OK
;

4073 
	}
}

4080 
	$öÊ©e_∑ckë_Êush
(
s
)

4081 
öÊ©e_blocks_°©ef
 *
s
;

4083 i‡(
s
->
mode
 !
LENS
)

4084  
Z_DATA_ERROR
;

4085 
s
->
mode
 = 
TYPE
;

4086  
Z_OK
;

4087 
	}
}

4099 
	göÊ©e_c›yright
[] = " inflate 1.0.4 Copyright 1995-1996 Mark Adler ";

4107 #i‚de‡
NO_DUMMY_DECL


4108 
	söã∫Æ_°©e
 {
	mdummy
;};

4112 
	#ba£
 
m‹e
.
Ba£


	)

4113 
	#√xt
 
m‹e
.
Next


	)

4114 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

4115 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

4118 
loˇl
 
hu·_buûd
 
OF
((

4119 
uI¡f
 *,

4120 
uI¡
,

4121 
uI¡
,

4122 c⁄° 
uI¡f
 *,

4123 c⁄° 
uI¡f
 *,

4124 
öÊ©e_hu·
 * 
FAR
*,

4125 
uI¡f
 *,

4126 
z_°ªamp
 ));

4128 
loˇl
 
voidpf
 
ÁŒoc
 
OF
((

4129 
voidpf
,

4130 
uI¡
,

4131 
uI¡
));

4134 
loˇl
 c⁄° 
uI¡
 
	g˝Àns
[31] = {

4138 
loˇl
 c⁄° 
uI¡
 
	g˝Àxt
[31] = {

4141 
loˇl
 c⁄° 
uI¡
 
	g˝di°
[30] = {

4145 
loˇl
 c⁄° 
uI¡
 
	g˝dext
[30] = {

4184 
	#BMAX
 15

	)

4185 
	#N_MAX
 288

	)

4187 #ifde‡
DEBUG_ZLIB


4188 
uI¡
 
	göÊ©e_hu·s
;

4191 
loˇl
 
	$hu·_buûd
(
b
, 
n
, 
s
, 
d
, 
e
, 
t
, 
m
, 
zs
)

4192 
uI¡f
 *
b
;

4193 
uI¡
 
n
;

4194 
uI¡
 
s
;

4195 c⁄° 
uI¡f
 *
d
;

4196 c⁄° 
uI¡f
 *
e
;

4197 
öÊ©e_hu·
 * 
FAR
 *
t
;

4198 
uI¡f
 *
m
;

4199 
z_°ªamp
 
zs
;

4207 
uI¡
 
a
;

4208 
uI¡
 
c
[
BMAX
+1];

4209 
uI¡
 
f
;

4210 
g
;

4211 
h
;

4212 
uI¡
 
i
;

4213 
uI¡
 
j
;

4214 
k
;

4215 
l
;

4216 
uI¡f
 *
p
;

4217 
öÊ©e_hu·
 *
q
;

4218 
öÊ©e_hu·_s
 
r
;

4219 
öÊ©e_hu·
 *
u
[
BMAX
];

4220 
uI¡
 
v
[
N_MAX
];

4221 
w
;

4222 
uI¡
 
x
[
BMAX
+1];

4223 
uI¡f
 *
xp
;

4224 
y
;

4225 
uI¡
 
z
;

4229 
p
 = 
c
;

4230 
	#C0
 *
p
++ = 0;

	)

4231 
	#C2
 
C0
 C0 C0 
	)
C0

4232 
	#C4
 
C2
 C2 C2 
	)
C2

4233 
C4


4234 
p
 = 
b
; 
i
 = 
n
;

4236 
c
[*
p
++]++;

4237 } --
i
);

4238 i‡(
c
[0] =
n
)

4240 *
t
 = (
öÊ©e_hu·
 *)
Z_NULL
;

4241 *
m
 = 0;

4242  
Z_OK
;

4247 
l
 = *
m
;

4248 
j
 = 1; j <
BMAX
; j++)

4249 i‡(
c
[
j
])

4251 
k
 = 
j
;

4252 i‡((
uI¡
)
l
 < 
j
)

4253 
l
 = 
j
;

4254 
i
 = 
BMAX
; i; i--)

4255 i‡(
c
[
i
])

4257 
g
 = 
i
;

4258 i‡((
uI¡
)
l
 > 
i
)

4259 
l
 = 
i
;

4260 *
m
 = 
l
;

4264 
y
 = 1 << 
j
; j < 
i
; j++, y <<= 1)

4265 i‡((
y
 -
c
[
j
]) < 0)

4266  
Z_DATA_ERROR
;

4267 i‡((
y
 -
c
[
i
]) < 0)

4268  
Z_DATA_ERROR
;

4269 
c
[
i
] +
y
;

4273 
x
[1] = 
j
 = 0;

4274 
p
 = 
c
 + 1; 
xp
 = 
x
 + 2;

4275 --
i
) {

4276 *
xp
++ = (
j
 +*
p
++);

4281 
p
 = 
b
; 
i
 = 0;

4283 i‡((
j
 = *
p
++) != 0)

4284 
v
[
x
[
j
]++] = 
i
;

4285 } ++
i
 < 
n
);

4286 
n
 = 
x
[
g
];

4290 
x
[0] = 
i
 = 0;

4291 
p
 = 
v
;

4292 
h
 = -1;

4293 
w
 = -
l
;

4294 
u
[0] = (
öÊ©e_hu·
 *)
Z_NULL
;

4295 
q
 = (
öÊ©e_hu·
 *)
Z_NULL
;

4296 
z
 = 0;

4299 ; 
k
 <
g
; k++)

4301 
a
 = 
c
[
k
];

4302 
a
--)

4306 
k
 > 
w
 + 
l
)

4308 
h
++;

4309 
w
 +
l
;

4312 
z
 = 
g
 - 
w
;

4313 
z
 = z > (
uI¡
)
l
 ?Ü : z;

4314 i‡((
f
 = 1 << (
j
 = 
k
 - 
w
)Ë> 
a
 + 1)

4316 
f
 -
a
 + 1;

4317 
xp
 = 
c
 + 
k
;

4318 i‡(
j
 < 
z
)

4319 ++
j
 < 
z
)

4321 i‡((
f
 <<1Ë<*++
xp
)

4323 
f
 -*
xp
;

4326 
z
 = 1 << 
j
;

4329 i‡((
q
 = (
öÊ©e_hu·
 *)
ZALLOC


4330 (
zs
,
z
 + 1,(
öÊ©e_hu·
))Ë=
Z_NULL
)

4332 i‡(
h
)

4333 
	`öÊ©e_åìs_‰ì
(
u
[0], 
zs
);

4334  
Z_MEM_ERROR
;

4336 #ifde‡
DEBUG_ZLIB


4337 
öÊ©e_hu·s
 +
z
 + 1;

4339 *
t
 = 
q
 + 1;

4340 *(
t
 = &(
q
->
√xt
)Ë
Z_NULL
;

4341 
u
[
h
] = ++
q
;

4344 i‡(
h
)

4346 
x
[
h
] = 
i
;

4347 
r
.
bôs
 = (
Byã
)
l
;

4348 
r
.
ex›
 = (
Byã
)
j
;

4349 
r
.
√xt
 = 
q
;

4350 
j
 = 
i
 >> (
w
 - 
l
);

4351 
u
[
h
-1][
j
] = 
r
;

4356 
r
.
bôs
 = (
Byã
)(
k
 - 
w
);

4357 i‡(
p
 >
v
 + 
n
)

4358 
r
.
ex›
 = 128 + 64;

4359 i‡(*
p
 < 
s
)

4361 
r
.
ex›
 = (
Byã
)(*
p
 < 256 ? 0 : 32 + 64);

4362 
r
.
ba£
 = *
p
++;

4366 
r
.
ex›
 = (
Byã
)(
e
[*
p
 - 
s
] + 16 + 64);

4367 
r
.
ba£
 = 
d
[*
p
++ - 
s
];

4371 
f
 = 1 << (
k
 - 
w
);

4372 
j
 = 
i
 >> 
w
; j < 
z
; j +
f
)

4373 
q
[
j
] = 
r
;

4376 
j
 = 1 << (
k
 - 1); 
i
 & j; j >>= 1)

4377 
i
 ^
j
;

4378 
i
 ^
j
;

4381 (
i
 & ((1 << 
w
Ë- 1)Ë!
x
[
h
])

4383 
h
--;

4384 
w
 -
l
;

4391  
y
 !0 && 
g
 !1 ? 
Z_BUF_ERROR
 : 
Z_OK
;

4392 
	}
}

4395 
	$öÊ©e_åìs_bôs
(
c
, 
bb
, 
tb
, 
z
)

4396 
uI¡f
 *
c
;

4397 
uI¡f
 *
bb
;

4398 
öÊ©e_hu·
 * 
FAR
 *
tb
;

4399 
z_°ªamp
 
z
;

4401 
r
;

4403 
r
 = 
	`hu·_buûd
(
c
, 19, 19, (
uI¡f
*)
Z_NULL
, (uI¡f*)Z_NULL, 
tb
, 
bb
, 
z
);

4404 i‡(
r
 =
Z_DATA_ERROR
)

4405 
z
->
msg
 = (*)"oversubscribed dynamic bitÜengthsÅree";

4406 i‡(
r
 =
Z_BUF_ERROR
 || *
bb
 == 0)

4408 
	`öÊ©e_åìs_‰ì
(*
tb
, 
z
);

4409 
z
->
msg
 = (*)"incomplete dynamic bitÜengthsÅree";

4410 
r
 = 
Z_DATA_ERROR
;

4412  
r
;

4413 
	}
}

4416 
	$öÊ©e_åìs_dy«mic
(
∆
, 
nd
, 
c
, 
bl
, 
bd
, 
é
, 
td
, 
z
)

4417 
uI¡
 
∆
;

4418 
uI¡
 
nd
;

4419 
uI¡f
 *
c
;

4420 
uI¡f
 *
bl
;

4421 
uI¡f
 *
bd
;

4422 
öÊ©e_hu·
 * 
FAR
 *
é
;

4423 
öÊ©e_hu·
 * 
FAR
 *
td
;

4424 
z_°ªamp
 
z
;

4426 
r
;

4429 
r
 = 
	`hu·_buûd
(
c
, 
∆
, 257, 
˝Àns
, 
˝Àxt
, 
é
, 
bl
, 
z
);

4430 i‡(
r
 !
Z_OK
 || *
bl
 == 0)

4432 i‡(
r
 =
Z_DATA_ERROR
)

4433 
z
->
msg
 = (*)"oversubscribedÜiteral/lengthÅree";

4434 i‡(
r
 !
Z_MEM_ERROR
)

4436 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

4437 
z
->
msg
 = (*)"incompleteÜiteral/lengthÅree";

4438 
r
 = 
Z_DATA_ERROR
;

4440  
r
;

4444 
r
 = 
	`hu·_buûd
(
c
 + 
∆
, 
nd
, 0, 
˝di°
, 
˝dext
, 
td
, 
bd
, 
z
);

4445 i‡(
r
 !
Z_OK
 || (*
bd
 =0 && 
∆
 > 257))

4447 i‡(
r
 =
Z_DATA_ERROR
)

4448 
z
->
msg
 = (*)"oversubscribed distanceÅree";

4449 i‡(
r
 =
Z_BUF_ERROR
) {

4450 #ifde‡
PKZIP_BUG_WORKAROUND


4451 
r
 = 
Z_OK
;

4454 
	`öÊ©e_åìs_‰ì
(*
td
, 
z
);

4455 
z
->
msg
 = (*)"incomplete distanceÅree";

4456 
r
 = 
Z_DATA_ERROR
;

4458 i‡(
r
 !
Z_MEM_ERROR
)

4460 
z
->
msg
 = (*)"empty distanceÅree withÜengths";

4461 
r
 = 
Z_DATA_ERROR
;

4463 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

4464  
r
;

4469  
Z_OK
;

4470 
	}
}

4474 
loˇl
 
	gfixed_buût
 = 0;

4475 
	#FIXEDH
 530

	)

4476 
loˇl
 
öÊ©e_hu·
 
	gfixed_mem
[
FIXEDH
];

4477 
loˇl
 
uI¡
 
	gfixed_bl
;

4478 
loˇl
 
uI¡
 
	gfixed_bd
;

4479 
loˇl
 
öÊ©e_hu·
 *
	gfixed_é
;

4480 
loˇl
 
öÊ©e_hu·
 *
	gfixed_td
;

4483 
loˇl
 
voidpf
 
	$ÁŒoc
(
q
, 
n
, 
s
)

4484 
voidpf
 
q
;

4485 
uI¡
 
n
;

4486 
uI¡
 
s
;

4488 
	`As£π
(
s
 =(
öÊ©e_hu·
Ë&& 
n
 <*(
ötf
 *)
q
,

4490 *(
ötf
 *)
q
 -
n
+
s
-s;

4491  (
voidpf
)(
fixed_mem
 + *(
ötf
 *)
q
);

4492 
	}
}

4495 
	$öÊ©e_åìs_fixed
(
bl
, 
bd
, 
é
, 
td
)

4496 
uI¡f
 *
bl
;

4497 
uI¡f
 *
bd
;

4498 
öÊ©e_hu·
 * 
FAR
 *
é
;

4499 
öÊ©e_hu·
 * 
FAR
 *
td
;

4502 i‡(!
fixed_buût
)

4504 
k
;

4505 
c
[288];

4506 
z_°ªam
 
z
;

4507 
f
 = 
FIXEDH
;

4510 
z
.
zÆloc
 = 
ÁŒoc
;

4511 
z
.
z‰ì
 = 
Z_NULL
;

4512 
z
.
›aque
 = (
voidpf
)&
f
;

4515 
k
 = 0; k < 144; k++)

4516 
c
[
k
] = 8;

4517 ; 
k
 < 256; k++)

4518 
c
[
k
] = 9;

4519 ; 
k
 < 280; k++)

4520 
c
[
k
] = 7;

4521 ; 
k
 < 288; k++)

4522 
c
[
k
] = 8;

4523 
fixed_bl
 = 7;

4524 
	`hu·_buûd
(
c
, 288, 257, 
˝Àns
, 
˝Àxt
, &
fixed_é
, &
fixed_bl
, &
z
);

4527 
k
 = 0; k < 30; k++)

4528 
c
[
k
] = 5;

4529 
fixed_bd
 = 5;

4530 
	`hu·_buûd
(
c
, 30, 0, 
˝di°
, 
˝dext
, &
fixed_td
, &
fixed_bd
, &
z
);

4533 
	`As£π
(
f
 == 0, "invalid build of fixedÅables");

4534 
fixed_buût
 = 1;

4536 *
bl
 = 
fixed_bl
;

4537 *
bd
 = 
fixed_bd
;

4538 *
é
 = 
fixed_é
;

4539 *
td
 = 
fixed_td
;

4540  
Z_OK
;

4541 
	}
}

4544 
	$öÊ©e_åìs_‰ì
(
t
, 
z
)

4545 
öÊ©e_hu·
 *
t
;

4546 
z_°ªamp
 
z
;

4551 
öÊ©e_hu·
 *
p
, *
q
, *
r
;

4554 
p
 = 
Z_NULL
;

4555 
q
 = 
t
;

4556 
q
 !
Z_NULL
)

4558 
r
 = (
q
 - 1)->
√xt
;

4559 (
q
 - 1)->
√xt
 = 
p
;

4560 
p
 = 
q
;

4561 
q
 = 
r
;

4564 
p
 !
Z_NULL
)

4566 
q
 = (--
p
)->
√xt
;

4567 
	`ZFREE
(
z
,
p
);

4568 
p
 = 
q
;

4570  
Z_OK
;

4571 
	}
}

4597 
öÊ©e_Á°
 
OF
((

4598 
uI¡
,

4599 
uI¡
,

4600 
öÊ©e_hu·
 *,

4601 
öÊ©e_hu·
 *,

4602 
öÊ©e_blocks_°©ef
 *,

4603 
z_°ªamp
 ));

4607 
	#ba£
 
m‹e
.
Ba£


	)

4608 
	#√xt
 
m‹e
.
Next


	)

4609 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

4610 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

4613 
	söÊ©e_codes_°©e
 {

4617 
	mSTART
,

4618 
	mLEN
,

4619 
	mLENEXT
,

4620 
	mDIST
,

4621 
	mDISTEXT
,

4622 
	mCOPY
,

4623 
	mLIT
,

4624 
	mWASH
,

4625 
	mEND
,

4626 
	mBADCODE
}

4627 
	mmode
;

4630 
uI¡
 
	mÀn
;

4633 
öÊ©e_hu·
 *
	måì
;

4634 
uI¡
 
	m√ed
;

4635 } 
	mcode
;

4636 
uI¡
 
	mlô
;

4638 
uI¡
 
	mgë
;

4639 
uI¡
 
	mdi°
;

4640 } 
	mc›y
;

4641 } 
	msub
;

4644 
Byã
 
	mlbôs
;

4645 
Byã
 
	mdbôs
;

4646 
öÊ©e_hu·
 *
	m…ªe
;

4647 
öÊ©e_hu·
 *
	mdåì
;

4652 
öÊ©e_codes_°©ef
 *
	$öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)

4653 
uI¡
 
bl
, 
bd
;

4654 
öÊ©e_hu·
 *
é
;

4655 
öÊ©e_hu·
 *
td
;

4656 
z_°ªamp
 
z
;

4658 
öÊ©e_codes_°©ef
 *
c
;

4660 i‡((
c
 = (
öÊ©e_codes_°©ef
 *)

4661 
	`ZALLOC
(
z
,1,(
öÊ©e_codes_°©e
))Ë!
Z_NULL
)

4663 
c
->
mode
 = 
START
;

4664 
c
->
lbôs
 = (
Byã
)
bl
;

4665 
c
->
dbôs
 = (
Byã
)
bd
;

4666 
c
->
…ªe
 = 
é
;

4667 
c
->
dåì
 = 
td
;

4668 
	`Tø˚v
((
°dîr
, "inflate: codesÇew\n"));

4670  
c
;

4671 
	}
}

4674 
	$öÊ©e_codes
(
s
, 
z
, 
r
)

4675 
öÊ©e_blocks_°©ef
 *
s
;

4676 
z_°ªamp
 
z
;

4677 
r
;

4679 
uI¡
 
j
;

4680 
öÊ©e_hu·
 *
t
;

4681 
uI¡
 
e
;

4682 
uL⁄g
 
b
;

4683 
uI¡
 
k
;

4684 
Byãf
 *
p
;

4685 
uI¡
 
n
;

4686 
Byãf
 *
q
;

4687 
uI¡
 
m
;

4688 
Byãf
 *
f
;

4689 
öÊ©e_codes_°©ef
 *
c
 = 
s
->
sub
.
decode
.
codes
;

4692 
LOAD


4695 1Ë
c
->
mode
)

4697 
START
:

4698 #i‚de‡
SLOW


4699 i‡(
m
 >258 && 
n
 >= 10)

4701 
UPDATE


4702 
r
 = 
	`öÊ©e_Á°
(
c
->
lbôs
, c->
dbôs
, c->
…ªe
, c->
dåì
, 
s
, 
z
);

4703 
LOAD


4704 i‡(
r
 !
Z_OK
)

4706 
c
->
mode
 = 
r
 =
Z_STREAM_END
 ? 
WASH
 : 
BADCODE
;

4711 
c
->
sub
.
code
.
√ed
 = c->
lbôs
;

4712 
c
->
sub
.
code
.
åì
 = c->
…ªe
;

4713 
c
->
mode
 = 
LEN
;

4714 
LEN
:

4715 
j
 = 
c
->
sub
.
code
.
√ed
;

4716 
	`NEEDBITS
(
j
)

4717 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

4718 
	`DUMPBITS
(
t
->
bôs
)

4719 
e
 = (
uI¡
)(
t
->
ex›
);

4720 i‡(
e
 == 0)

4722 
c
->
sub
.
lô
 = 
t
->
ba£
;

4723 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

4725 "öÊ©e:ÜôîÆ 0x%02x\n", 
t
->
ba£
));

4726 
c
->
mode
 = 
LIT
;

4729 i‡(
e
 & 16)

4731 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

4732 
c
->
Àn
 = 
t
->
ba£
;

4733 
c
->
mode
 = 
LENEXT
;

4736 i‡((
e
 & 64) == 0)

4738 
c
->
sub
.
code
.
√ed
 = 
e
;

4739 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

4742 i‡(
e
 & 32)

4744 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

4745 
c
->
mode
 = 
WASH
;

4748 
c
->
mode
 = 
BADCODE
;

4749 
z
->
msg
 = (*)"invalidÜiteral/length code";

4750 
r
 = 
Z_DATA_ERROR
;

4751 
LEAVE


4752 
LENEXT
:

4753 
j
 = 
c
->
sub
.
c›y
.
gë
;

4754 
	`NEEDBITS
(
j
)

4755 
c
->
Àn
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

4756 
	`DUMPBITS
(
j
)

4757 
c
->
sub
.
code
.
√ed
 = c->
dbôs
;

4758 
c
->
sub
.
code
.
åì
 = c->
dåì
;

4759 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
c
->
Àn
));

4760 
c
->
mode
 = 
DIST
;

4761 
DIST
:

4762 
j
 = 
c
->
sub
.
code
.
√ed
;

4763 
	`NEEDBITS
(
j
)

4764 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

4765 
	`DUMPBITS
(
t
->
bôs
)

4766 
e
 = (
uI¡
)(
t
->
ex›
);

4767 i‡(
e
 & 16)

4769 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

4770 
c
->
sub
.
c›y
.
di°
 = 
t
->
ba£
;

4771 
c
->
mode
 = 
DISTEXT
;

4774 i‡((
e
 & 64) == 0)

4776 
c
->
sub
.
code
.
√ed
 = 
e
;

4777 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

4780 
c
->
mode
 = 
BADCODE
;

4781 
z
->
msg
 = (*)"invalid distance code";

4782 
r
 = 
Z_DATA_ERROR
;

4783 
LEAVE


4784 
DISTEXT
:

4785 
j
 = 
c
->
sub
.
c›y
.
gë
;

4786 
	`NEEDBITS
(
j
)

4787 
c
->
sub
.
c›y
.
di°
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

4788 
	`DUMPBITS
(
j
)

4789 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
c
->
sub
.
c›y
.
di°
));

4790 
c
->
mode
 = 
COPY
;

4791 
COPY
:

4792 #i‚de‡
__TURBOC__


4793 
f
 = (
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
 ?

4794 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
q
 - s->
wödow
)) :

4795 
q
 - 
c
->
sub
.
c›y
.
di°
;

4797 
f
 = 
q
 - 
c
->
sub
.
c›y
.
di°
;

4798 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
)

4799 
f
 = 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
uI¡
)(
q
 - s->
wödow
));

4801 
c
->
Àn
)

4803 
NEEDOUT


4804 
	`OUTBYTE
(*
f
++)

4805 i‡(
f
 =
s
->
íd
)

4806 
f
 = 
s
->
wödow
;

4807 
c
->
Àn
--;

4809 
c
->
mode
 = 
START
;

4811 
LIT
:

4812 
NEEDOUT


4813 
	`OUTBYTE
(
c
->
sub
.
lô
)

4814 
c
->
mode
 = 
START
;

4816 
WASH
:

4817 
FLUSH


4818 i‡(
s
->
ªad
 !s->
wrôe
)

4819 
LEAVE


4820 
c
->
mode
 = 
END
;

4821 
END
:

4822 
r
 = 
Z_STREAM_END
;

4823 
LEAVE


4824 
BADCODE
:

4825 
r
 = 
Z_DATA_ERROR
;

4826 
LEAVE


4828 
r
 = 
Z_STREAM_ERROR
;

4829 
LEAVE


4831 
	}
}

4834 
	$öÊ©e_codes_‰ì
(
c
, 
z
)

4835 
öÊ©e_codes_°©ef
 *
c
;

4836 
z_°ªamp
 
z
;

4838 
	`ZFREE
(
z
, 
c
);

4839 
	`Tø˚v
((
°dîr
, "inflate: codes free\n"));

4840 
	}
}

4855 #i‚de‡
NO_DUMMY_DECL


4856 
	söÊ©e_codes_°©e
 {
	mdummy
;};

4860 
uI¡
 
	göÊ©e_mask
[17] = {

4868 
	$öÊ©e_Êush
(
s
, 
z
, 
r
)

4869 
öÊ©e_blocks_°©ef
 *
s
;

4870 
z_°ªamp
 
z
;

4871 
r
;

4873 
uI¡
 
n
;

4874 
Byãf
 *
p
;

4875 
Byãf
 *
q
;

4878 
p
 = 
z
->
√xt_out
;

4879 
q
 = 
s
->
ªad
;

4882 
n
 = (
uI¡
)((
q
 <
s
->
wrôe
 ? s->wrôê: s->
íd
) - q);

4883 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

4884 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

4887 
z
->
avaû_out
 -
n
;

4888 
z
->
tŸÆ_out
 +
n
;

4891 i‡(
s
->
check‚
 !
Z_NULL
)

4892 
z
->
adÀr
 = 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

4895 i‡(
p
 !
Z_NULL
) {

4896 
	`zmem˝y
(
p
, 
q
, 
n
);

4897 
p
 +
n
;

4899 
q
 +
n
;

4902 i‡(
q
 =
s
->
íd
)

4905 
q
 = 
s
->
wödow
;

4906 i‡(
s
->
wrôe
 =s->
íd
)

4907 
s
->
wrôe
 = s->
wödow
;

4910 
n
 = (
uI¡
)(
s
->
wrôe
 - 
q
);

4911 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

4912 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

4915 
z
->
avaû_out
 -
n
;

4916 
z
->
tŸÆ_out
 +
n
;

4919 i‡(
s
->
check‚
 !
Z_NULL
)

4920 
z
->
adÀr
 = 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

4923 i‡(
p
 !
Z_NULL
) {

4924 
	`zmem˝y
(
p
, 
q
, 
n
);

4925 
p
 +
n
;

4927 
q
 +
n
;

4931 
z
->
√xt_out
 = 
p
;

4932 
s
->
ªad
 = 
q
;

4935  
r
;

4936 
	}
}

4952 #i‚de‡
NO_DUMMY_DECL


4953 
	söÊ©e_codes_°©e
 {
	mdummy
;};

4957 
	#ba£
 
m‹e
.
Ba£


	)

4958 
	#√xt
 
m‹e
.
Next


	)

4959 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

4960 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

4963 
	#GRABBITS
(
j
Ë{
k
<(j)){
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

4964 
	#UNGRAB
 {
n
+=(
c
=
k
>>3);
p
-=c;k&=7;}

	)

4971 
	$öÊ©e_Á°
(
bl
, 
bd
, 
é
, 
td
, 
s
, 
z
)

4972 
uI¡
 
bl
, 
bd
;

4973 
öÊ©e_hu·
 *
é
;

4974 
öÊ©e_hu·
 *
td
;

4975 
öÊ©e_blocks_°©ef
 *
s
;

4976 
z_°ªamp
 
z
;

4978 
öÊ©e_hu·
 *
t
;

4979 
uI¡
 
e
;

4980 
uL⁄g
 
b
;

4981 
uI¡
 
k
;

4982 
Byãf
 *
p
;

4983 
uI¡
 
n
;

4984 
Byãf
 *
q
;

4985 
uI¡
 
m
;

4986 
uI¡
 
ml
;

4987 
uI¡
 
md
;

4988 
uI¡
 
c
;

4989 
uI¡
 
d
;

4990 
Byãf
 *
r
;

4993 
LOAD


4996 
ml
 = 
öÊ©e_mask
[
bl
];

4997 
md
 = 
öÊ©e_mask
[
bd
];

5002 
	`GRABBITS
(20)

5003 i‡((
e
 = (
t
 = 
é
 + ((
uI¡
)
b
 & 
ml
))->
ex›
) == 0)

5005 
	`DUMPBITS
(
t
->
bôs
)

5006 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

5008 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

5009 *
q
++ = (
Byã
)
t
->
ba£
;

5010 
m
--;

5014 
	`DUMPBITS
(
t
->
bôs
)

5015 i‡(
e
 & 16)

5018 
e
 &= 15;

5019 
c
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

5020 
	`DUMPBITS
(
e
)

5021 
	`Tø˚vv
((
°dîr
, "öÊ©e: *Üígth %u\n", 
c
));

5024 
	`GRABBITS
(15);

5025 
e
 = (
t
 = 
td
 + ((
uI¡
)
b
 & 
md
))->
ex›
;

5027 
	`DUMPBITS
(
t
->
bôs
)

5028 i‡(
e
 & 16)

5031 
e
 &= 15;

5032 
	`GRABBITS
(
e
)

5033 
d
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

5034 
	`DUMPBITS
(
e
)

5035 
	`Tø˚vv
((
°dîr
, "öÊ©e: * di°™˚ %u\n", 
d
));

5038 
m
 -
c
;

5039 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë>
d
)

5041 
r
 = 
q
 - 
d
;

5042 *
q
++ = *
r
++; 
c
--;

5043 *
q
++ = *
r
++; 
c
--;

5047 
e
 = 
d
 - (
uI¡
)(
q
 - 
s
->
wödow
);

5048 
r
 = 
s
->
íd
 - 
e
;

5049 i‡(
c
 > 
e
)

5051 
c
 -
e
;

5053 *
q
++ = *
r
++;

5054 } --
e
);

5055 
r
 = 
s
->
wödow
;

5059 *
q
++ = *
r
++;

5060 } --
c
);

5063 i‡((
e
 & 64) == 0)

5064 
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
;

5067 
z
->
msg
 = (*)"invalid distance code";

5068 
UNGRAB


5069 
UPDATE


5070  
Z_DATA_ERROR
;

5075 i‡((
e
 & 64) == 0)

5077 i‡((
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
) == 0)

5079 
	`DUMPBITS
(
t
->
bôs
)

5080 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

5082 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

5083 *
q
++ = (
Byã
)
t
->
ba£
;

5084 
m
--;

5088 i‡(
e
 & 32)

5090 
	`Tø˚vv
((
°dîr
, "inflate: *Énd of block\n"));

5091 
UNGRAB


5092 
UPDATE


5093  
Z_STREAM_END
;

5097 
z
->
msg
 = (*)"invalidÜiteral/length code";

5098 
UNGRAB


5099 
UPDATE


5100  
Z_DATA_ERROR
;

5103 } 
m
 >258 && 
n
 >= 10);

5106 
UNGRAB


5107 
UPDATE


5108  
Z_OK
;

5109 
	}
}

5120 #ifde‡
DEBUG_ZLIB


5121 
	~<°dio.h
>

5126 #i‚de‡
NO_DUMMY_DECL


5127 
	söã∫Æ_°©e
 {
	mdummy
;};

5130 #i‚de‡
STDC


5131 
exô
 
OF
(());

5134 c⁄° *
	gz_îrmsg
[10] = {

5147 c⁄° *
	$zlibVîsi⁄
()

5149  
ZLIB_VERSION
;

5150 
	}
}

5152 #ifde‡
DEBUG_ZLIB


5153 
	$z_îr‹
 (
m
)

5154 *
m
;

5156 
	`Ârötf
(
°dîr
, "%s\n", 
m
);

5157 
	`exô
(1);

5158 
	}
}

5161 #i‚de‡
HAVE_MEMCPY


5163 
	$zmem˝y
(
de°
, 
sour˚
, 
Àn
)

5164 
Byãf
* 
de°
;

5165 
Byãf
* 
sour˚
;

5166 
uI¡
 
Àn
;

5168 i‡(
Àn
 == 0) ;

5170 *
de°
++ = *
sour˚
++;

5171 } --
Àn
 != 0);

5172 
	}
}

5174 
	$zmemcmp
(
s1
, 
s2
, 
Àn
)

5175 
Byãf
* 
s1
;

5176 
Byãf
* 
s2
;

5177 
uI¡
 
Àn
;

5179 
uI¡
 
j
;

5181 
j
 = 0; j < 
Àn
; j++) {

5182 i‡(
s1
[
j
] !
s2
[j])  2*(s1[j] > s2[j])-1;

5185 
	}
}

5187 
	$zmemzîo
(
de°
, 
Àn
)

5188 
Byãf
* 
de°
;

5189 
uI¡
 
Àn
;

5191 i‡(
Àn
 == 0) ;

5193 *
de°
++ = 0;

5194 } --
Àn
 != 0);

5195 
	}
}

5198 #ifde‡
__TURBOC__


5199 #i‡(
deföed
–
__BORLANDC__
Ë|| !deföed(
SMALL_MEDIUM
)Ë&& !deföed(
__32BIT__
)

5203 
	#MY_ZCALLOC


	)

5211 
	#MAX_PTR
 10

	)

5214 
loˇl
 
	g√xt_±r
 = 0;

5216 
	s±r_èbÀ_s
 {

5217 
voidpf
 
	m‹g_±r
;

5218 
voidpf
 
	m√w_±r
;

5219 } 
	t±r_èbÀ
;

5221 
loˇl
 
±r_èbÀ
 
	gèbÀ
[
MAX_PTR
];

5229 
voidpf
 
	$zˇŒoc
 (
voidpf
 
›aque
, 
ôems
, 
size
)

5231 
voidpf
 
buf
 = 
›aque
;

5232 
ulg
 
bsize
 = (ulg)
ôems
*
size
;

5237 i‡(
bsize
 < 65520L) {

5238 
buf
 = 
	`ÁrmÆloc
(
bsize
);

5239 i‡(*(
ush
*)&
buf
 != 0)  buf;

5241 
buf
 = 
	`ÁrmÆloc
(
bsize
 + 16L);

5243 i‡(
buf
 =
NULL
 || 
√xt_±r
 >
MAX_PTR
)  NULL;

5244 
èbÀ
[
√xt_±r
].
‹g_±r
 = 
buf
;

5247 *((
ush
*)&
buf
+1Ë+((ush)((
uch
*)buf-0) + 15) >> 4;

5248 *(
ush
*)&
buf
 = 0;

5249 
èbÀ
[
√xt_±r
++].
√w_±r
 = 
buf
;

5250  
buf
;

5251 
	}
}

5253 
	$zc‰ì
 (
voidpf
 
›aque
, voidp‡
±r
)

5255 
n
;

5256 i‡(*(
ush
*)&
±r
 != 0) {

5257 
	`Ár‰ì
(
±r
);

5261 
n
 = 0;Ç < 
√xt_±r
;Ç++) {

5262 i‡(
±r
 !
èbÀ
[
n
].
√w_±r
) ;

5264 
	`Ár‰ì
(
èbÀ
[
n
].
‹g_±r
);

5265 ++
n
 < 
√xt_±r
) {

5266 
èbÀ
[
n
-1] =Åable[n];

5268 
√xt_±r
--;

5271 
±r
 = 
›aque
;

5272 
	`As£π
(0, "zcfree:ÖtrÇot found");

5273 
	}
}

5278 #i‡
deföed
(
M_I86
Ë&& !deföed(
__32BIT__
)

5281 
	#MY_ZCALLOC


	)

5283 #i‡(!
deföed
(
_MSC_VER
) || (_MSC_VER < 600))

5284 
	#_hÆloc
 
hÆloc


	)

5285 
	#_h‰ì
 
h‰ì


	)

5288 
voidpf
 
	$zˇŒoc
 (
voidpf
 
›aque
, 
ôems
, 
size
)

5290 i‡(
›aque
) opaque = 0;

5291  
	`_hÆloc
(()
ôems
, 
size
);

5292 
	}
}

5294 
	$zc‰ì
 (
voidpf
 
›aque
, voidp‡
±r
)

5296 i‡(
›aque
) opaque = 0;

5297 
	`_h‰ì
(
±r
);

5298 
	}
}

5303 #i‚de‡
MY_ZCALLOC


5305 #i‚de‡
STDC


5306 
voidp
 
ˇŒoc
 
OF
((
uI¡
 
ôems
, uI¡ 
size
));

5307 
‰ì
 
OF
((
voidpf
 
±r
));

5310 
voidpf
 
	$zˇŒoc
 (
›aque
, 
ôems
, 
size
)

5311 
voidpf
 
›aque
;

5312 
ôems
;

5313 
size
;

5315 i‡(
›aque
Ë
ôems
 +
size
 - size;

5316  (
voidpf
)
	`ˇŒoc
(
ôems
, 
size
);

5317 
	}
}

5319 
	$zc‰ì
 (
›aque
, 
±r
)

5320 
voidpf
 
›aque
;

5321 
voidpf
 
±r
;

5323 
	`‰ì
(
±r
);

5324 i‡(
›aque
) ;

5325 
	}
}

5340 
	#BASE
 65521L

	)

5341 
	#NMAX
 5552

	)

5344 
	#DO1
(
buf
,
i
Ë{
s1
 +buf[i]; 
s2
 +s1;}

	)

5345 
	#DO2
(
buf
,
i
Ë
	`DO1
(buf,i); DO1(buf,i+1);

	)

5346 
	#DO4
(
buf
,
i
Ë
	`DO2
(buf,i); DO2(buf,i+2);

	)

5347 
	#DO8
(
buf
,
i
Ë
	`DO4
(buf,i); DO4(buf,i+4);

	)

5348 
	#DO16
(
buf
Ë
	`DO8
(buf,0); DO8(buf,8);

	)

5351 
uL⁄g
 
	$adÀr32
(
adÀr
, 
buf
, 
Àn
)

5352 
uL⁄g
 
adÀr
;

5353 c⁄° 
Byãf
 *
buf
;

5354 
uI¡
 
Àn
;

5356 
s1
 = 
adÀr
 & 0xffff;

5357 
s2
 = (
adÀr
 >> 16) & 0xffff;

5358 
k
;

5360 i‡(
buf
 =
Z_NULL
)  1L;

5362 
Àn
 > 0) {

5363 
k
 = 
Àn
 < 
NMAX
 ?Üen : NMAX;

5364 
Àn
 -
k
;

5365 
k
 >= 16) {

5366 
	`DO16
(
buf
);

5367 
buf
 += 16;

5368 
k
 -= 16;

5370 i‡(
k
 != 0) do {

5371 
s1
 +*
buf
++;

5372 
s2
 +
s1
;

5373 } --
k
);

5374 
s1
 %
BASE
;

5375 
s2
 %
BASE
;

5377  (
s2
 << 16Ë| 
s1
;

5378 
	}
}

	@common/zlib.h

49 #i‚de‡
_ZLIB_H


50 
	#_ZLIB_H


	)

52 #ifde‡
__˝lu•lus


65 #i‚de‡
_ZCONF_H


66 
	#_ZCONF_H


	)

72 #ifde‡
Z_PREFIX


73 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

74 
	#deÊ©e
 
z_deÊ©e


	)

75 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©e
 
z_öÊ©e


	)

78 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

79 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

80 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

81 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

82 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

83 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

84 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

85 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

86 
	#öÊ©eSync
 
z_öÊ©eSync


	)

87 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

88 
	#com¥ess
 
z_com¥ess


	)

89 
	#uncom¥ess
 
z_uncom¥ess


	)

90 
	#adÀr32
 
z_adÀr32


	)

91 
	#¸c32
 
z_¸c32


	)

92 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

94 
	#Byã
 
z_Byã


	)

95 
	#uI¡
 
z_uI¡


	)

96 
	#uL⁄g
 
z_uL⁄g


	)

97 
	#Byãf
 
z_Byãf


	)

98 
	#ch¨f
 
z_ch¨f


	)

99 
	#ötf
 
z_ötf


	)

100 
	#uI¡f
 
z_uI¡f


	)

101 
	#uL⁄gf
 
z_uL⁄gf


	)

102 
	#voidpf
 
z_voidpf


	)

103 
	#voidp
 
z_voidp


	)

106 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
)Ë&& !deföed(
WIN32
)

107 
	#WIN32


	)

109 #i‡
deföed
(
__GNUC__
Ë|| deföed(
WIN32
Ë|| deföed(
__386__
Ë|| deföed(
i386
)

110 #i‚de‡
__32BIT__


111 
	#__32BIT__


	)

114 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

115 
	#MSDOS


	)

122 #i‡
deföed
(
MSDOS
Ë&& !deföed(
__32BIT__
)

123 
	#MAXSEG_64K


	)

125 #ifde‡
MSDOS


126 
	#UNALIGNED_OK


	)

129 #i‡(
deföed
(
MSDOS
Ë|| deföed(
_WINDOWS
Ë|| deföed(
WIN32
)Ë&& !deföed(
STDC
)

130 
	#STDC


	)

132 #i‡(
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)Ë&& !deföed(
STDC
)

133 
	#STDC


	)

136 #i‚de‡
STDC


138 c⁄°

	)

143 #i‡
deföed
(
__MWERKS__
Ë|| deföed(
≠∂ec
Ë||deföed(
THINK_C
Ë||deföed(
__SC__
)

144 
	#NO_DUMMY_DECL


	)

148 #i‚de‡
MAX_MEM_LEVEL


149 #ifde‡
MAXSEG_64K


150 
	#MAX_MEM_LEVEL
 8

	)

152 
	#MAX_MEM_LEVEL
 9

	)

157 #i‚de‡
MAX_WBITS


158 
	#MAX_WBITS
 15

	)

176 #i‚de‡
OF


177 #ifde‡
STDC


178 
	#OF
(
¨gs
Ë
	)
¨gs

180 
	#OF
(
¨gs
Ë()

	)

190 #i‡(
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)Ë&& !deföed(
__32BIT__
)

192 
	#SMALL_MEDIUM


	)

193 #ifde‡
_MSC_VER


194 
	#FAR
 
__Ár


	)

196 
	#FAR
 
Ár


	)

199 #i‡
deföed
(
__BORLANDC__
Ë&& (deföed(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

200 #i‚de‡
__32BIT__


201 
	#SMALL_MEDIUM


	)

202 
	#FAR
 
__Ár


	)

205 #i‚de‡
FAR


206 
	#FAR


	)

209 
	tByã
;

210 
	tuI¡
;

211 
	tuL⁄g
;

213 #i‡
deföed
(
__BORLANDC__
Ë&& deföed(
SMALL_MEDIUM
)

215 
	#Byãf
 
Byã
 
FAR


	)

217 
Byã
 
	tFAR
 
	tByãf
;

219 
	tFAR
 
	tch¨f
;

220 
	tFAR
 
	tötf
;

221 
uI¡
 
	tFAR
 
	tuI¡f
;

222 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

224 #ifde‡
STDC


225 
	tFAR
 *
	tvoidpf
;

226 *
	tvoidp
;

228 
Byã
 
	tFAR
 *
	tvoidpf
;

229 
Byã
 *
	tvoidp
;

234 #i‡(
deföed
(
_WINDOWS
Ë|| deföed(
WINDOWS
)Ë&& deföed(
ZLIB_DLL
)

235 
	~<wödows.h
>

236 
	#EXPORT
 
WINAPI


	)

238 
	#EXPORT


	)

244 
	#ZLIB_VERSION
 "1.0.4P"

	)

270 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

271 (*
	g‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

273 
	göã∫Æ_°©e
;

275 
	sz_°ªam_s
 {

276 
Byãf
 *
	g√xt_ö
;

277 
uI¡
 
	gavaû_ö
;

278 
uL⁄g
 
	gtŸÆ_ö
;

280 
Byãf
 *
	g√xt_out
;

281 
uI¡
 
	gavaû_out
;

282 
uL⁄g
 
	gtŸÆ_out
;

284 *
	gmsg
;

285 
öã∫Æ_°©e
 
FAR
 *
	g°©e
;

287 
Æloc_func
 
	gzÆloc
;

288 
‰ì_func
 
	gz‰ì
;

289 
voidpf
 
	g›aque
;

291 
	gd©a_ty≥
;

292 
uL⁄g
 
	gadÀr
;

293 
uL⁄g
 
	gª£rved
;

294 } 
	tz_°ªam
;

296 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

329 
	#Z_NO_FLUSH
 0

	)

330 
	#Z_PARTIAL_FLUSH
 1

	)

331 
	#Z_PACKET_FLUSH
 2

	)

332 
	#Z_SYNC_FLUSH
 3

	)

333 
	#Z_FULL_FLUSH
 4

	)

334 
	#Z_FINISH
 5

	)

337 
	#Z_OK
 0

	)

338 
	#Z_STREAM_END
 1

	)

339 
	#Z_NEED_DICT
 2

	)

340 
	#Z_ERRNO
 (-1)

	)

341 
	#Z_STREAM_ERROR
 (-2)

	)

342 
	#Z_DATA_ERROR
 (-3)

	)

343 
	#Z_MEM_ERROR
 (-4)

	)

344 
	#Z_BUF_ERROR
 (-5)

	)

345 
	#Z_VERSION_ERROR
 (-6)

	)

350 
	#Z_NO_COMPRESSION
 0

	)

351 
	#Z_BEST_SPEED
 1

	)

352 
	#Z_BEST_COMPRESSION
 9

	)

353 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

356 
	#Z_FILTERED
 1

	)

357 
	#Z_HUFFMAN_ONLY
 2

	)

358 
	#Z_DEFAULT_STRATEGY
 0

	)

361 
	#Z_BINARY
 0

	)

362 
	#Z_ASCII
 1

	)

363 
	#Z_UNKNOWN
 2

	)

366 
	#Z_DEFLATED
 8

	)

369 
	#Z_NULL
 0

	)

371 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

376 c⁄° * 
EXPORT
 
zlibVîsi⁄
 
OF
(());

406 
EXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

481 
EXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

511 
EXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

569 
EXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

645 
EXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

646 c⁄° 
Byãf
 *
di˘i⁄¨y
,

647 
uI¡
 
di˘Lígth
));

674 
EXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

675 
z_°ªamp
 
sour˚
));

697 
EXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

708 
EXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
°øãgy
));

726 
EXPORT
 
deÊ©eOuçutPídög
 
OF
((
z_°ªamp
 
°rm
));

768 
EXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

769 c⁄° 
Byãf
 *
di˘i⁄¨y
,

770 
uI¡
 
di˘Lígth
));

787 
EXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

802 
EXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

812 
öÊ©eIncomp
 
OF
((
z_°ªam
 *
°rm
));

831 
EXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

832 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

846 
EXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

847 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

865 
voidp
 
	tgzFûe
;

867 
gzFûe
 
EXPORT
 
gz›í
 
OF
((c⁄° *
∑th
, c⁄° *
mode
));

879 
gzFûe
 
EXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

892 
EXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

900 
EXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
, c⁄° 
voidp
 
buf
, 
Àn
));

907 
EXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

917 
EXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

924 c⁄° * 
EXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

941 
uL⁄g
 
EXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

958 
uL⁄g
 
EXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

980 
EXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

981 c⁄° *
vîsi⁄
, 
°ªam_size
));

982 
EXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

983 c⁄° *
vîsi⁄
, 
°ªam_size
));

984 
EXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

985 
wödowBôs
, 
memLevñ
, 
°øãgy
,

986 c⁄° *
vîsi⁄
, 
°ªam_size
));

987 
EXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

988 c⁄° *
vîsi⁄
, 
°ªam_size
));

989 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

990 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

991 
	#öÊ©eInô
(
°rm
) \

992 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

993 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

994 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

995 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

996 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

997 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

999 #i‡!
deföed
(
_Z_UTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1000 
	söã∫Æ_°©e
 {
	gdummy
;};

1003 
uL⁄gf
 *
gë_¸c_èbÀ
 
OF
(());

1005 #ifde‡
__˝lu•lus


	@contrib/pppgetpass/pppgetpass.gtk.c

1 
	~<glib.h
>

2 
	~<gdk/gdk.h
>

3 
	~<gtk/gtkwödow.h
>

4 
	~<gtk/gtkmaö.h
>

5 
	~<gtk/gtkbuâ⁄.h
>

6 
	~<gtk/gtkvbox.h
>

7 
	~<gtk/gtkœbñ.h
>

8 
	~<gtk/gtkíåy.h
>

9 
	~<gtk/gtksig«l.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

17 
	goutfd
;

18 
	gîr
;

20 
	$ok¥es£d
(*
widgë
, *
˛õ¡d©a
)

22 
GtkWidgë
 *
™swî
=
˛õ¡d©a
;

23 
gch¨
 *
∑ss
;

24 
∑s¶í
;

25 
ssize_t
 
wrŸe
;

26 ()
widgë
;

28 
∑ss
=
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
™swî
));

30 
∑s¶í
=
	`°æí
(
∑ss
);

31 if(!
∑s¶í
)

34 if((
wrŸe
=
	`wrôe
(
outfd
, 
∑ss
, 
∑s¶í
))!=passlen) {

35 if(
wrŸe
<0)

36 
	`sy¶og
(
LOG_ERR
, "writeÉrror on outpipe: %m");

38 
	`sy¶og
(
LOG_ERR
, "short write on outpipe");

39 
îr
=1;

41 
	`gtk_maö_quô
();

42 
	}
}

44 
	$maö
(
¨gc
, **
¨gv
)

46 
GtkWidgë
 *
maöwödow
, *
vbox
, *
que°i⁄
, *
™swî
, *
ok
;

47 
buf
[1024];

48 
	`gtk_öô
(&
¨gc
, &
¨gv
);

50 
	`›ílog
(
¨gv
[0], 
LOG_PID
, 
LOG_DAEMON
);

51 if(
¨gc
!=4) {

52 
	`sy¶og
(
LOG_WARNING
, "UsageÉrror");

55 
outfd
=
	`©oi
(
¨gv
[3]);

56 
maöwödow
=
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

57 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
maöwödow
), "pppgetpass");

58 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
maöwödow
), "destroy",

59 
	`GTK_SIGNAL_FUNC
(
gtk_maö_quô
), 0);

61 
vbox
=
	`gtk_vbox_√w
(
FALSE
, 5);

62 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
maöwödow
), 
vbox
);

63 
	`gtk_widgë_show
(
vbox
);

65 if(
¨gv
[1][0] &&árgv[2][0])

66 
	`¢¥ötf
(
buf
,  buf, "Passw‹d f‹ PPP clõ¡ %†⁄ sîvî %s: ", 
¨gv
[1],árgv[2]);

67 if(
¨gv
[1][0] && !argv[2][0])

68 
	`¢¥ötf
(
buf
,  buf, "Passw‹d f‹ PPP clõ¡ %s: ", 
¨gv
[1]);

69 if(!
¨gv
[1][0] &&árgv[2][0])

70 
	`¢¥ötf
(
buf
,  buf, "Passw‹d f‹ PPP o¿£rvî %s: ", 
¨gv
[2]);

72 
	`¢¥ötf
(
buf
,  buf, "Enter PPPÖassword: ");

73 
que°i⁄
=
	`gtk_œbñ_√w
(
buf
);

74 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
que°i⁄
, 
FALSE
, 
TRUE
, 0);

75 
	`gtk_widgë_show
(
que°i⁄
);

77 
™swî
=
	`gtk_íåy_√w
();

78 
	`gtk_íåy_£t_visibûôy
(
	`GTK_ENTRY
(
™swî
), 0);

79 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
™swî
, 
FALSE
, 
TRUE
, 0);

80 
	`gtk_widgë_show
(
™swî
);

82 
ok
=
	`gtk_buâ⁄_√w_wôh_œbñ
("OK");

83 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
ok
, 
FALSE
, 
TRUE
, 0);

84 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
ok
), "clicked",

85 
	`GTK_SIGNAL_FUNC
(
ok¥es£d
), 
™swî
);

86 
	`gtk_widgë_show
(
ok
);

88 
	`gtk_widgë_show
(
maöwödow
);

89 
	`gtk_maö
();

91  
îr
;

92 
	}
}

	@contrib/pppgetpass/pppgetpass.vt.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<î∫o.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sy¶og.h
>

10 
	~<ãrmios.h
>

11 
	~<sys/vt.h
>

13 
c⁄sﬁe_ow√r
(
uid_t
, );

15 
	$maö
(
¨gc
, **
¨gv
)

17 
c⁄sﬁe
;

18 
uid_t
 
uid
;

19 
vt_°©
 
‹ig°©e
;

20 
›íväum
;

21 
›íväame
[256];

22 
›ívt
;

23 
gid_t
 
gid
;

24 
chow√d
;

25 
FILE
 *
Â
;

26 
ãrmios
 
t
;

27 
∑ss
[256], *
∆
;

28 
outfd
, 
∑s¶í
;

29 
ssize_t
 
wrŸe
;

30 
c⁄sﬁe
=
	`›í
("/dev/c⁄sﬁe", 
O_RDWR
);

32 
uid
=
	`gëuid
();

33 
gid
=
	`gëgid
();

34 
	`£ãuid
(
uid
);

36 
	`›ílog
(
¨gv
[0], 
LOG_PID
, 
LOG_DAEMON
);

38 if(
¨gc
!=4) {

39 
	`sy¶og
(
LOG_WARNING
, "UsageÉrror");

43 if(
c⁄sﬁe
<0) {

44 
	`sy¶og
(
LOG_ERR
, "open(/dev/console): %m");

48 if(
	`io˘l
(
c⁄sﬁe
, 
VT_GETSTATE
, &
‹ig°©e
)<0) {

49 
	`sy¶og
(
LOG_ERR
, "VT_GETSTATE: %m");

53 if(
uid
) {

54 if(!
	`c⁄sﬁe_ow√r
(
uid
, 
‹ig°©e
.
v_a˘ive
)) {

55 
i
;

56 
i
=0;i<64;++i) {

57 if(
i
!=
‹ig°©e
.
v_a˘ive
 && 
	`c⁄sﬁe_ow√r
(
uid
, i))

60 if(
i
==64) {

61 
	`sy¶og
(
LOG_WARNING
, "ru¿by uid %luÇŸáàc⁄sﬁe", ()
uid
);

67 if(
	`io˘l
(
c⁄sﬁe
, 
VT_OPENQRY
, &
›íväum
)<0) {

68 
	`sy¶og
(
LOG_ERR
, "VT_OPENQRY: %m");

71 if(
›íväum
==-1) {

72 
	`sy¶og
(
LOG_ERR
, "No free VTs");

76 
	`¢¥ötf
(
›íväame
,  o≥nväame, "/dev/ây%d", 
›íväum
);

77 
	`£ãuid
(0);

78 
›ívt
=
	`›í
(
›íväame
, 
O_RDWR
);

79 if(
›ívt
<0) {

80 
	`£ãuid
(
uid
);

81 
	`sy¶og
(
LOG_ERR
, "›í(%s): %m", 
›íväame
);

85 
chow√d
=
	`fchown
(
›ívt
, 
uid
, 
gid
);

86 if(
chow√d
<0) {

87 
	`£ãuid
(
uid
);

88 
	`sy¶og
(
LOG_ERR
, "fchown(%s): %m", 
›íväame
);

92 
	`˛o£
(
c⁄sﬁe
);

94 if(
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
›íväum
)<0) {

95 
	`£ãuid
(
uid
);

96 
	`sy¶og
(
LOG_ERR
, "VT_ACTIVATE(%d): %m", 
›íväum
);

100 
	`io˘l
(
›ívt
, 
VT_WAITACTIVE
, 
›íväum
)<0) {

101 if(
î∫o
!=
EINTR
) {

102 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

103 
	`£ãuid
(
uid
);

104 
	`sy¶og
(
LOG_ERR
, "VT_WAITACTIVE(%d): %m", 
›íväum
);

109 
	`£ãuid
(
uid
);

110 
Â
=
	`fd›í
(
›ívt
, "r+");

111 if(!
Â
) {

112 
	`£ãuid
(0);

113 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

114 
	`£ãuid
(
uid
);

115 
	`sy¶og
(
LOG_ERR
, "fd›í(%s): %m", 
›íväame
);

119 if(
	`tcgë©å
(
›ívt
, &
t
)<0) {

120 
	`£ãuid
(0);

121 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

122 
	`£ãuid
(
uid
);

123 
	`sy¶og
(
LOG_ERR
, "tcgë©å(%s): %m", 
›íväame
);

126 
t
.
c_lÊag
 &~
ECHO
;

127 if(
	`tc£èâr
(
›ívt
, 
TCSANOW
, &
t
)<0) {

128 
	`£ãuid
(0);

129 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

130 
	`£ãuid
(
uid
);

131 
	`sy¶og
(
LOG_ERR
, "tc£èâr(%s): %m", 
›íväame
);

135 if(
	`Ârötf
(
Â
, "\033[2J\033[H")<0) {

136 
	`£ãuid
(0);

137 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

138 
	`£ãuid
(
uid
);

139 
	`sy¶og
(
LOG_ERR
, "wrôêîr‹ o¿%s: %m", 
›íväame
);

142 if(
¨gv
[1][0] &&árgv[2][0]) {

143 if(
	`Ârötf
(
Â
, "Passw‹d f‹ PPP clõ¡ %†⁄ sîvî %s: ", 
¨gv
[1],árgv[2])<0) {

144 
	`£ãuid
(0);

145 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

146 
	`£ãuid
(
uid
);

147 
	`sy¶og
(
LOG_ERR
, "wrôêîr‹ o¿%s: %m", 
›íväame
);

150 } if(
¨gv
[1][0] && !argv[2][0]) {

151 if(
	`Ârötf
(
Â
, "Passw‹d f‹ PPP clõ¡ %s: ", 
¨gv
[1])<0) {

152 
	`sy¶og
(
LOG_ERR
, "wrôêîr‹ o¿%s: %m", 
›íväame
);

153 
	`£ãuid
(0);

154 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

155 
	`£ãuid
(
uid
);

158 } if(!
¨gv
[1][0] &&árgv[2][0]) {

159 if(
	`Ârötf
(
Â
, "Passw‹d f‹ PPP o¿£rvî %s: ", 
¨gv
[2])<0) {

160 
	`£ãuid
(0);

161 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

162 
	`£ãuid
(
uid
);

163 
	`sy¶og
(
LOG_ERR
, "wrôêîr‹ o¿%s: %m", 
›íväame
);

167 if(
	`Ârötf
(
Â
, "Enter PPPÖassword: ")<0) {

168 
	`£ãuid
(0);

169 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

170 
	`£ãuid
(
uid
);

171 
	`sy¶og
(
LOG_ERR
, "wrôêîr‹ o¿%s: %m", 
›íväame
);

176 if(!
	`fgës
(
∑ss
, Öass, 
Â
)) {

177 
	`£ãuid
(0);

178 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

179 
	`£ãuid
(
uid
);

180 if(
	`„º‹
(
Â
)) {

181 
	`sy¶og
(
LOG_ERR
, "ªadÉº‹ o¿%s: %m", 
›íväame
);

185 if((
∆
=
	`°rchr
(
∑ss
, '\n')))

186 *
∆
=0;

187 
∑s¶í
=
	`°æí
(
∑ss
);

189 
outfd
=
	`©oi
(
¨gv
[3]);

190 if((
wrŸe
=
	`wrôe
(
outfd
, 
∑ss
, 
∑s¶í
))!=passlen) {

191 
	`£ãuid
(0);

192 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

193 
	`£ãuid
(
uid
);

194 if(
wrŸe
<0)

195 
	`sy¶og
(
LOG_ERR
, "writeÉrror on outpipe: %m");

197 
	`sy¶og
(
LOG_ERR
, "short write on outpipe");

201 
	`£ãuid
(0);

202 
	`io˘l
(
›ívt
, 
VT_ACTIVATE
, 
‹ig°©e
.
v_a˘ive
);

203 
	`£ãuid
(
uid
);

205 
	}
}

207 
	$c⁄sﬁe_ow√r
(
uid_t
 
uid
, 
c⁄s
)

209 
«me
[256];

210 
°©
 
°
;

211 
	`¢¥ötf
(
«me
, Çame, "/dev/ây%d", 
c⁄s
);

212 if(
	`°©
(
«me
, &
°
)<0) {

213 if(
î∫o
!=
ENOENT
)

214 
	`sy¶og
(
LOG_ERR
, "°©(%s): %m", 
«me
);

217  
uid
==
°
.
°_uid
;

218 
	}
}

	@include/linux/if_ppp.h

58 #i‚de‡
_IF_PPP_H_


59 
	#_IF_PPP_H_


	)

65 
	#PPP_MTU
 1500

	)

66 
	#PPP_MAXMRU
 65000

	)

67 
	#PROTO_IPX
 0x002b

	)

68 
	#PROTO_DNA_RT
 0x0027

	)

75 
	#SC_COMP_PROT
 0x00000001

	)

76 
	#SC_COMP_AC
 0x00000002

	)

77 
	#SC_COMP_TCP
 0x00000004

	)

78 
	#SC_NO_TCP_CCID
 0x00000008

	)

79 
	#SC_REJ_COMP_AC
 0x00000010

	)

80 
	#SC_REJ_COMP_TCP
 0x00000020

	)

81 
	#SC_CCP_OPEN
 0x00000040

	)

82 
	#SC_CCP_UP
 0x00000080

	)

83 
	#SC_ENABLE_IP
 0x00000100

	)

84 
	#SC_LOOP_TRAFFIC
 0x00000200

	)

85 
	#SC_MULTILINK
 0x00000400

	)

86 
	#SC_MP_SHORTSEQ
 0x00000800

	)

87 
	#SC_COMP_RUN
 0x00001000

	)

88 
	#SC_DECOMP_RUN
 0x00002000

	)

89 
	#SC_MP_XSHORTSEQ
 0x00004000

	)

90 
	#SC_DEBUG
 0x00010000

	)

91 
	#SC_LOG_INPKT
 0x00020000

	)

92 
	#SC_LOG_OUTPKT
 0x00040000

	)

93 
	#SC_LOG_RAWIN
 0x00080000

	)

94 
	#SC_LOG_FLUSH
 0x00100000

	)

95 
	#SC_SYNC
 0x00200000

	)

96 
	#SC_MASK
 0x0f200ff‡

	)

99 
	#SC_XMIT_BUSY
 0x10000000

	)

100 
	#SC_RCV_ODDP
 0x08000000

	)

101 
	#SC_RCV_EVNP
 0x04000000

	)

102 
	#SC_RCV_B7_1
 0x02000000

	)

103 
	#SC_RCV_B7_0
 0x01000000

	)

104 
	#SC_DC_FERROR
 0x00800000

	)

105 
	#SC_DC_ERROR
 0x00400000

	)

111 
	s≈io˘l
 {

112 
	m¥Ÿocﬁ
;

113 
NPmode
 
	mmode
;

117 
	sµp_›ti⁄_d©a
 {

118 
__u8
 *
	m±r
;

119 
__u32
 
	mÀngth
;

120 
	må™smô
;

123 
	siÂµ°©§eq
 {

124 
i‰eq
 
	mb
;

125 
µp_°©s
 
	m°©s
;

128 
	siÂµc°©§eq
 {

129 
i‰eq
 
	mb
;

130 
µp_comp_°©s
 
	m°©s
;

133 
	#i‰__«me
 
b
.
i‰_i‰n
.
i‰n_«me


	)

134 
	#°©s_±r
 
b
.
i‰_i‰u
.
i‰u_d©a


	)

140 
	#PPPIOCGFLAGS
 
	`_IOR
('t', 90, Ë

	)

141 
	#PPPIOCSFLAGS
 
	`_IOW
('t', 89, Ë

	)

142 
	#PPPIOCGASYNCMAP
 
	`_IOR
('t', 88, Ë

	)

143 
	#PPPIOCSASYNCMAP
 
	`_IOW
('t', 87, Ë

	)

144 
	#PPPIOCGUNIT
 
	`_IOR
('t', 86, Ë

	)

145 
	#PPPIOCGRASYNCMAP
 
	`_IOR
('t', 85, Ë

	)

146 
	#PPPIOCSRASYNCMAP
 
	`_IOW
('t', 84, Ë

	)

147 
	#PPPIOCGMRU
 
	`_IOR
('t', 83, Ë

	)

148 
	#PPPIOCSMRU
 
	`_IOW
('t', 82, Ë

	)

149 
	#PPPIOCSMAXCID
 
	`_IOW
('t', 81, Ë

	)

150 
	#PPPIOCGXASYNCMAP
 
	`_IOR
('t', 80, 
ext_accm
Ë

	)

151 
	#PPPIOCSXASYNCMAP
 
	`_IOW
('t', 79, 
ext_accm
Ë

	)

152 
	#PPPIOCXFERUNIT
 
	`_IO
('t', 78Ë

	)

153 
	#PPPIOCSCOMPRESS
 
	`_IOW
('t', 77, 
µp_›ti⁄_d©a
)

	)

154 
	#PPPIOCGNPMODE
 
	`_IOWR
('t', 76, 
≈io˘l
Ë

	)

155 
	#PPPIOCSNPMODE
 
	`_IOW
('t', 75, 
≈io˘l
Ë

	)

156 
	#PPPIOCSPASS
 
	`_IOW
('t', 71, 
sock_Ârog
Ë

	)

157 
	#PPPIOCSACTIVE
 
	`_IOW
('t', 70, 
sock_Ârog
Ë

	)

158 
	#PPPIOCGDEBUG
 
	`_IOR
('t', 65, Ë

	)

159 
	#PPPIOCSDEBUG
 
	`_IOW
('t', 64, Ë

	)

160 
	#PPPIOCGIDLE
 
	`_IOR
('t', 63, 
µp_idÀ
Ë

	)

161 
	#PPPIOCNEWUNIT
 
	`_IOWR
('t', 62, Ë

	)

162 
	#PPPIOCATTACH
 
	`_IOW
('t', 61, Ë

	)

163 
	#PPPIOCDETACH
 
	`_IOW
('t', 60, Ë

	)

164 
	#PPPIOCSMRRU
 
	`_IOW
('t', 59, Ë

	)

165 
	#PPPIOCCONNECT
 
	`_IOW
('t', 58, Ë

	)

166 
	#PPPIOCDISCONN
 
	`_IO
('t', 57Ë

	)

167 
	#PPPIOCATTCHAN
 
	`_IOW
('t', 56, Ë

	)

168 
	#PPPIOCGCHAN
 
	`_IOR
('t', 55, Ë

	)

170 
	#SIOCGPPPSTATS
 (
SIOCDEVPRIVATE
 + 0)

	)

171 
	#SIOCGPPPVER
 (
SIOCDEVPRIVATE
 + 1Ë

	)

172 
	#SIOCGPPPCSTATS
 (
SIOCDEVPRIVATE
 + 2)

	)

174 #i‡!
deföed
(
i‰_mtu
)

175 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mëric


	)

	@include/linux/ppp-comp.h

50 #i‚de‡
_NET_PPP_COMP_H


51 
	#_NET_PPP_COMP_H


	)

58 #i‚de‡
DO_BSD_COMPRESS


59 
	#DO_BSD_COMPRESS
 1

	)

61 #i‚de‡
DO_DEFLATE


62 
	#DO_DEFLATE
 1

	)

64 
	#DO_PREDICTOR_1
 0

	)

65 
	#DO_PREDICTOR_2
 0

	)

71 
	scom¥ess‹
 {

72 
	mcom¥ess_¥Ÿo
;

75 *(*
	mcomp_Æloc
Ë(*
	m›ti⁄s
, 
	m›t_Àn
);

78 (*
	mcomp_‰ì
Ë(*
	m°©e
);

81 (*
	mcomp_öô
Ë(*
	m°©e
, *
	m›ti⁄s
,

82 
	m›t_Àn
, 
	munô
, 
	m›thdr
, 
	mdebug
);

85 (*
	mcomp_ª£t
Ë(*
	m°©e
);

88 (*
	mcom¥ess
Ë(*
	m°©e
, *
	mΩå
,

89 *
	mobuf
, 
	misize
, 
	mosize
);

92 (*
	mcomp_°©
Ë(*
	m°©e
, 
comp°©
 *
	m°©s
);

95 *(*
	mdecomp_Æloc
Ë(*
	m›ti⁄s
, 
	m›t_Àn
);

98 (*
	mdecomp_‰ì
Ë(*
	m°©e
);

101 (*
	mdecomp_öô
Ë(*
	m°©e
, *
	m›ti⁄s
,

102 
	m›t_Àn
, 
	munô
, 
	m›thdr
, 
	mmru
,

103 
	mdebug
);

106 (*
	mdecomp_ª£t
Ë(*
	m°©e
);

109 (*
	mdecom¥ess
Ë(*
	m°©e
, *
	mibuf
, 
	misize
,

110 *
	mobuf
, 
	mosize
);

113 (*
	möcomp
Ë(*
	m°©e
, *
	mibuf
, 
	mi˙t
);

116 (*
	mdecomp_°©
Ë(*
	m°©e
, 
comp°©
 *
	m°©s
);

131 
	#DECOMP_ERROR
 -1

	)

132 
	#DECOMP_FATALERROR
 -2

	)

138 
	#CCP_CONFREQ
 1

	)

139 
	#CCP_CONFACK
 2

	)

140 
	#CCP_TERMREQ
 5

	)

141 
	#CCP_TERMACK
 6

	)

142 
	#CCP_RESETREQ
 14

	)

143 
	#CCP_RESETACK
 15

	)

149 
	#CCP_MAX_OPTION_LENGTH
 32

	)

155 
	#CCP_CODE
(
dp
Ë((dp)[0])

	)

156 
	#CCP_ID
(
dp
Ë((dp)[1])

	)

157 
	#CCP_LENGTH
(
dp
Ë(((dp)[2] << 8Ë+ (dp)[3])

	)

158 
	#CCP_HDRLEN
 4

	)

160 
	#CCP_OPT_CODE
(
dp
Ë((dp)[0])

	)

161 
	#CCP_OPT_LENGTH
(
dp
Ë((dp)[1])

	)

162 
	#CCP_OPT_MINLEN
 2

	)

168 
	#CI_BSD_COMPRESS
 21

	)

169 
	#CILEN_BSD_COMPRESS
 3

	)

172 
	#BSD_NBITS
(
x
Ë((xË& 0x1FË

	)

173 
	#BSD_VERSION
(
x
Ë((xË>> 5Ë

	)

174 
	#BSD_CURRENT_VERSION
 1

	)

175 
	#BSD_MAKE_OPT
(
v
, 
n
Ë(((vË<< 5Ë| (n))

	)

177 
	#BSD_MIN_BITS
 9

	)

178 
	#BSD_MAX_BITS
 15

	)

184 
	#CI_DEFLATE
 26

	)

185 
	#CI_DEFLATE_DRAFT
 24

	)

186 
	#CILEN_DEFLATE
 4

	)

188 
	#DEFLATE_MIN_SIZE
 8

	)

189 
	#DEFLATE_MAX_SIZE
 15

	)

190 
	#DEFLATE_METHOD_VAL
 8

	)

191 
	#DEFLATE_SIZE
(
x
Ë(((xË>> 4Ë+ 
DEFLATE_MIN_SIZE
)

	)

192 
	#DEFLATE_METHOD
(
x
Ë((xË& 0x0F)

	)

193 
	#DEFLATE_MAKE_OPT
(
w
Ë((((wË- 
DEFLATE_MIN_SIZE
) << 4) \

194 + 
DEFLATE_METHOD_VAL
)

	)

195 
	#DEFLATE_CHK_SEQUENCE
 0

	)

201 
	#CI_MPPE
 18

	)

202 
	#CILEN_MPPE
 6

	)

208 
	#CI_PREDICTOR_1
 1

	)

209 
	#CILEN_PREDICTOR_1
 2

	)

210 
	#CI_PREDICTOR_2
 2

	)

211 
	#CILEN_PREDICTOR_2
 2

	)

	@include/linux/ppp_defs.h

50 #i‚de‡
_PPP_DEFS_H_


51 
	#_PPP_DEFS_H_


	)

56 
	#PPP_HDRLEN
 4

	)

57 
	#PPP_FCSLEN
 2

	)

58 
	#PPP_MRU
 1500

	)

60 
	#PPP_ADDRESS
(
p
Ë(((
__u8
 *)’))[0])

	)

61 
	#PPP_CONTROL
(
p
Ë(((
__u8
 *)’))[1])

	)

62 
	#PPP_PROTOCOL
(
p
Ë((((
__u8
 *)’))[2] << 8Ë+ ((__u8 *)’))[3])

	)

67 
	#PPP_ALLSTATIONS
 0xf‡

	)

68 
	#PPP_UI
 0x03

	)

69 
	#PPP_FLAG
 0x7ê

	)

70 
	#PPP_ESCAPE
 0x7d

	)

71 
	#PPP_TRANS
 0x20

	)

76 
	#PPP_IP
 0x21

	)

77 
	#PPP_AT
 0x29

	)

78 
	#PPP_IPX
 0x2b

	)

79 
	#PPP_VJC_COMP
 0x2d

	)

80 
	#PPP_VJC_UNCOMP
 0x2‡

	)

81 
	#PPP_MP
 0x3d

	)

82 
	#PPP_IPV6
 0x57

	)

83 
	#PPP_COMPFRAG
 0xfb

	)

84 
	#PPP_COMP
 0xfd

	)

85 
	#PPP_IPCP
 0x8021

	)

86 
	#PPP_ATCP
 0x8029

	)

87 
	#PPP_IPXCP
 0x802b

	)

88 
	#PPP_IPV6CP
 0x8057

	)

89 
	#PPP_CCPFRAG
 0x80fb

	)

90 
	#PPP_CCP
 0x80fd

	)

91 
	#PPP_ECPFRAG
 0x8055

	)

92 
	#PPP_ECP
 0x8053

	)

93 
	#PPP_LCP
 0xc021

	)

94 
	#PPP_PAP
 0xc023

	)

95 
	#PPP_LQR
 0xc025

	)

96 
	#PPP_CHAP
 0xc223

	)

97 
	#PPP_CBCP
 0xc029

	)

103 
	#PPP_INITFCS
 0xfff‡

	)

104 
	#PPP_GOODFCS
 0xf0b8

	)

105 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

111 
__u32
 
	text_accm
[8];

116 
	eNPmode
 {

117 
	mNPMODE_PASS
,

118 
	mNPMODE_DROP
,

119 
	mNPMODE_ERROR
,

120 
	mNPMODE_QUEUE


126 
	sµp°©
 {

127 
__u32
 
	mµp_disˇrds
;

129 
__u32
 
	mµp_ibyãs
;

130 
__u32
 
	mµp_io˘e˘s
;

131 
__u32
 
	mµp_ùackës
;

132 
__u32
 
	mµp_õº‹s
;

133 
__u32
 
	mµp_ûqrs
;

135 
__u32
 
	mµp_obyãs
;

136 
__u32
 
	mµp_oo˘e˘s
;

137 
__u32
 
	mµp_›ackës
;

138 
__u32
 
	mµp_€º‹s
;

139 
__u32
 
	mµp_ﬁqrs
;

142 
	svj°©
 {

143 
__u32
 
	mvjs_∑ckës
;

144 
__u32
 
	mvjs_com¥es£d
;

145 
__u32
 
	mvjs_£¨ches
;

146 
__u32
 
	mvjs_mis£s
;

147 
__u32
 
	mvjs_uncom¥es£dö
;

148 
__u32
 
	mvjs_com¥es£dö
;

149 
__u32
 
	mvjs_îr‹ö
;

150 
__u32
 
	mvjs_tos£d
;

153 
	scomp°©
 {

154 
__u32
 
	munc_byãs
;

155 
__u32
 
	munc_∑ckës
;

156 
__u32
 
	mcomp_byãs
;

157 
__u32
 
	mcomp_∑ckës
;

158 
__u32
 
	möc_byãs
;

159 
__u32
 
	möc_∑ckës
;

162 
__u32
 
	mö_cou¡
;

163 
__u32
 
	mbyãs_out
;

165 
	møtio
;

168 
	sµp_°©s
 {

169 
µp°©
 
	mp
;

170 
vj°©
 
	mvj
;

173 
	sµp_comp_°©s
 {

174 
comp°©
 
	mc
;

175 
comp°©
 
	md
;

182 
	sµp_idÀ
 {

183 
time_t
 
	mxmô_idÀ
;

184 
time_t
 
	mªcv_idÀ
;

187 #i‚de‡
__P


188 #ifde‡
__STDC__


189 
	#__P
(
x
Ë
	)
x

191 
	#__P
(
x
Ë()

	)

	@include/net/if_ppp.h

45 #i‚de‡
_IF_PPP_H_


46 
	#_IF_PPP_H_


	)

51 
	#SC_COMP_PROT
 0x00000001

	)

52 
	#SC_COMP_AC
 0x00000002

	)

53 
	#SC_COMP_TCP
 0x00000004

	)

54 
	#SC_NO_TCP_CCID
 0x00000008

	)

55 
	#SC_REJ_COMP_AC
 0x00000010

	)

56 
	#SC_REJ_COMP_TCP
 0x00000020

	)

57 
	#SC_CCP_OPEN
 0x00000040

	)

58 
	#SC_CCP_UP
 0x00000080

	)

59 
	#SC_DEBUG
 0x00010000

	)

60 
	#SC_LOG_INPKT
 0x00020000

	)

61 
	#SC_LOG_OUTPKT
 0x00040000

	)

62 
	#SC_LOG_RAWIN
 0x00080000

	)

63 
	#SC_LOG_FLUSH
 0x00100000

	)

64 
	#SC_RCV_B7_0
 0x01000000

	)

65 
	#SC_RCV_B7_1
 0x02000000

	)

66 
	#SC_RCV_EVNP
 0x04000000

	)

67 
	#SC_RCV_ODDP
 0x08000000

	)

68 
	#SC_SYNC
 0x00200000

	)

69 
	#SC_MASK
 0x0fff00f‡

	)

74 
	#SC_TIMEOUT
 0x00000400

	)

75 
	#SC_VJ_RESET
 0x00000800

	)

76 
	#SC_COMP_RUN
 0x00001000

	)

77 
	#SC_DECOMP_RUN
 0x00002000

	)

78 
	#SC_DC_ERROR
 0x00004000

	)

79 
	#SC_DC_FERROR
 0x00008000

	)

80 
	#SC_TBUSY
 0x10000000

	)

81 
	#SC_PKTLOST
 0x20000000

	)

82 
	#SC_FLUSH
 0x40000000

	)

83 
	#SC_ESCAPED
 0x80000000

	)

89 
	s≈io˘l
 {

90 
	m¥Ÿocﬁ
;

91 
NPmode
 
	mmode
;

95 
	sµp_›ti⁄_d©a
 {

96 
u_ch¨
 *
	m±r
;

97 
u_öt
 
	mÀngth
;

98 
	må™smô
;

101 
	siÂµ°©§eq
 {

102 
	mi‰_«me
[
IFNAMSIZ
];

103 
µp_°©s
 
	m°©s
;

106 
	siÂµc°©§eq
 {

107 
	mi‰_«me
[
IFNAMSIZ
];

108 
µp_comp_°©s
 
	m°©s
;

115 
	#PPPIOCGFLAGS
 
	`_IOR
('t', 90, Ë

	)

116 
	#PPPIOCSFLAGS
 
	`_IOW
('t', 89, Ë

	)

117 
	#PPPIOCGASYNCMAP
 
	`_IOR
('t', 88, Ë

	)

118 
	#PPPIOCSASYNCMAP
 
	`_IOW
('t', 87, Ë

	)

119 
	#PPPIOCGUNIT
 
	`_IOR
('t', 86, Ë

	)

120 
	#PPPIOCGRASYNCMAP
 
	`_IOR
('t', 85, Ë

	)

121 
	#PPPIOCSRASYNCMAP
 
	`_IOW
('t', 84, Ë

	)

122 
	#PPPIOCGMRU
 
	`_IOR
('t', 83, Ë

	)

123 
	#PPPIOCSMRU
 
	`_IOW
('t', 82, Ë

	)

124 
	#PPPIOCSMAXCID
 
	`_IOW
('t', 81, Ë

	)

125 
	#PPPIOCGXASYNCMAP
 
	`_IOR
('t', 80, 
ext_accm
Ë

	)

126 
	#PPPIOCSXASYNCMAP
 
	`_IOW
('t', 79, 
ext_accm
Ë

	)

127 
	#PPPIOCXFERUNIT
 
	`_IO
('t', 78Ë

	)

128 
	#PPPIOCSCOMPRESS
 
	`_IOW
('t', 77, 
µp_›ti⁄_d©a
)

	)

129 
	#PPPIOCGNPMODE
 
	`_IOWR
('t', 76, 
≈io˘l
Ë

	)

130 
	#PPPIOCSNPMODE
 
	`_IOW
('t', 75, 
≈io˘l
Ë

	)

131 
	#PPPIOCGIDLE
 
	`_IOR
('t', 74, 
µp_idÀ
Ë

	)

132 #ifde‡
PPP_FILTER


133 
	#PPPIOCSPASS
 
	`_IOW
('t', 71, 
bpf_¥ogøm
Ë

	)

134 
	#PPPIOCSACTIVE
 
	`_IOW
('t', 70, 
bpf_¥ogøm
Ë

	)

138 
	#PPPIOCGMTU
 
	`_IOR
('t', 73, Ë

	)

139 
	#PPPIOCSMTU
 
	`_IOW
('t', 72, Ë

	)

145 
	#SIOCGPPPSTATS
 
	`_IOWR
('i', 123, 
iÂµ°©§eq
)

	)

146 
	#SIOCGPPPCSTATS
 
	`_IOWR
('i', 122, 
iÂµc°©§eq
)

	)

148 #i‡!
deföed
(
i‰_mtu
)

149 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mëric


	)

152 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
KERNEL
)Ë&& !deföed(
NeXT
)

153 
µ∑âach
 
__P
(());

154 
µpöå
 
__P
(());

	@include/net/ppp-comp.h

38 #i‚de‡
_NET_PPP_COMP_H


39 
	#_NET_PPP_COMP_H


	)

45 #i‚de‡
DO_BSD_COMPRESS


46 
	#DO_BSD_COMPRESS
 1

	)

48 #i‚de‡
DO_DEFLATE


49 
	#DO_DEFLATE
 1

	)

51 
	#DO_PREDICTOR_1
 0

	)

52 
	#DO_PREDICTOR_2
 0

	)

57 #ifde‡
PACKETPTR


58 
	scom¥ess‹
 {

59 
	mcom¥ess_¥Ÿo
;

62 *(*
	mcomp_Æloc
Ë
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

64 (*
	mcomp_‰ì
Ë
__P
((*
°©e
));

66 (*
	mcomp_öô
Ë
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

67 
unô
, 
hdæí
, 
debug
));

69 (*
	mcomp_ª£t
Ë
__P
((*
°©e
));

71 (*
	mcom¥ess
Ë
__P
((*
°©e
, 
PACKETPTR
 *
mªt
,

72 
PACKETPTR
 
mp
, 
‹ig_Àn
, 
max_Àn
));

74 (*
	mcomp_°©
Ë
__P
((*
°©e
, 
comp°©
 *
°©s
));

77 *(*
	mdecomp_Æloc
Ë
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

79 (*
	mdecomp_‰ì
Ë
__P
((*
°©e
));

81 (*
	mdecomp_öô
Ë
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

82 
unô
, 
hdæí
, 
mru
, 
debug
));

84 (*
	mdecomp_ª£t
Ë
__P
((*
°©e
));

86 (*
	mdecom¥ess
Ë
__P
((*
°©e
, 
PACKETPTR
 
mp
,

87 
PACKETPTR
 *
dmµ
));

89 (*
	möcomp
Ë
__P
((*
°©e
, 
PACKETPTR
 
mp
));

91 (*
	mdecomp_°©
Ë
__P
((*
°©e
, 
comp°©
 *
°©s
));

103 
	#DECOMP_OK
 0

	)

104 
	#DECOMP_ERROR
 1

	)

105 
	#DECOMP_FATALERROR
 2

	)

110 
	#CCP_CONFREQ
 1

	)

111 
	#CCP_CONFACK
 2

	)

112 
	#CCP_TERMREQ
 5

	)

113 
	#CCP_TERMACK
 6

	)

114 
	#CCP_RESETREQ
 14

	)

115 
	#CCP_RESETACK
 15

	)

120 
	#CCP_MAX_OPTION_LENGTH
 32

	)

125 
	#CCP_CODE
(
dp
Ë((dp)[0])

	)

126 
	#CCP_ID
(
dp
Ë((dp)[1])

	)

127 
	#CCP_LENGTH
(
dp
Ë(((dp)[2] << 8Ë+ (dp)[3])

	)

128 
	#CCP_HDRLEN
 4

	)

130 
	#CCP_OPT_CODE
(
dp
Ë((dp)[0])

	)

131 
	#CCP_OPT_LENGTH
(
dp
Ë((dp)[1])

	)

132 
	#CCP_OPT_MINLEN
 2

	)

137 
	#CI_BSD_COMPRESS
 21

	)

138 
	#CILEN_BSD_COMPRESS
 3

	)

141 
	#BSD_NBITS
(
x
Ë((xË& 0x1FË

	)

142 
	#BSD_VERSION
(
x
Ë((xË>> 5Ë

	)

143 
	#BSD_CURRENT_VERSION
 1

	)

144 
	#BSD_MAKE_OPT
(
v
, 
n
Ë(((vË<< 5Ë| (n))

	)

146 
	#BSD_MIN_BITS
 9

	)

147 
	#BSD_MAX_BITS
 15

	)

152 
	#CI_DEFLATE
 26

	)

153 
	#CI_DEFLATE_DRAFT
 24

	)

154 
	#CILEN_DEFLATE
 4

	)

156 
	#DEFLATE_MIN_SIZE
 8

	)

157 
	#DEFLATE_MAX_SIZE
 15

	)

158 
	#DEFLATE_METHOD_VAL
 8

	)

159 
	#DEFLATE_SIZE
(
x
Ë(((xË>> 4Ë+ 
DEFLATE_MIN_SIZE
)

	)

160 
	#DEFLATE_METHOD
(
x
Ë((xË& 0x0F)

	)

161 
	#DEFLATE_MAKE_OPT
(
w
Ë((((wË- 
DEFLATE_MIN_SIZE
) << 4) \

162 + 
DEFLATE_METHOD_VAL
)

	)

163 
	#DEFLATE_CHK_SEQUENCE
 0

	)

168 
	#CI_MPPE
 18

	)

169 
	#CILEN_MPPE
 6

	)

174 
	#CI_PREDICTOR_1
 1

	)

175 
	#CILEN_PREDICTOR_1
 2

	)

176 
	#CI_PREDICTOR_2
 2

	)

177 
	#CILEN_PREDICTOR_2
 2

	)

	@include/net/ppp_defs.h

38 #i‚de‡
_PPP_DEFS_H_


39 
	#_PPP_DEFS_H_


	)

44 
	#PPP_HDRLEN
 4

	)

45 
	#PPP_FCSLEN
 2

	)

55 
	#PPP_MTU
 1500

	)

56 
	#PPP_MAXMTU
 65535 - (
PPP_HDRLEN
 + 
PPP_FCSLEN
)

	)

57 
	#PPP_MINMTU
 64

	)

58 
	#PPP_MRU
 1500

	)

59 
	#PPP_MAXMRU
 65000

	)

60 
	#PPP_MINMRU
 128

	)

62 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

63 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

64 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

69 
	#PPP_ALLSTATIONS
 0xf‡

	)

70 
	#PPP_UI
 0x03

	)

71 
	#PPP_FLAG
 0x7ê

	)

72 
	#PPP_ESCAPE
 0x7d

	)

73 
	#PPP_TRANS
 0x20

	)

78 
	#PPP_IP
 0x21

	)

79 
	#PPP_AT
 0x29

	)

80 
	#PPP_IPX
 0x2b

	)

81 
	#PPP_VJC_COMP
 0x2d

	)

82 
	#PPP_VJC_UNCOMP
 0x2‡

	)

83 
	#PPP_IPV6
 0x57

	)

84 
	#PPP_COMP
 0xfd

	)

85 
	#PPP_IPCP
 0x8021

	)

86 
	#PPP_ATCP
 0x8029

	)

87 
	#PPP_IPXCP
 0x802b

	)

88 
	#PPP_IPV6CP
 0x8057

	)

89 
	#PPP_CCP
 0x80fd

	)

90 
	#PPP_ECP
 0x8053

	)

91 
	#PPP_LCP
 0xc021

	)

92 
	#PPP_PAP
 0xc023

	)

93 
	#PPP_LQR
 0xc025

	)

94 
	#PPP_CHAP
 0xc223

	)

95 
	#PPP_CBCP
 0xc029

	)

96 
	#PPP_EAP
 0xc227

	)

101 
	#PPP_INITFCS
 0xfff‡

	)

102 
	#PPP_GOODFCS
 0xf0b8

	)

103 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

109 #i‡!
deföed
(
__BIT_TYPES_DEFINED__
Ë&& !deföed(
_BITYPES
) \

110 && !
deföed
(
__FªeBSD__
Ë&& (
	gNS_TARGET
 < 40)

111 #ifdef 
UINT32_T


112 
UINT32_T
 
	tu_öt32_t
;

114 
	tu_öt32_t
;

115 
	tu_öt16_t
;

122 
u_öt32_t
 
	text_accm
[8];

127 
	eNPmode
 {

128 
	mNPMODE_PASS
,

129 
	mNPMODE_DROP
,

130 
	mNPMODE_ERROR
,

131 
	mNPMODE_QUEUE


137 
	sµp°©
 {

138 
	mµp_ibyãs
;

139 
	mµp_ùackës
;

140 
	mµp_õº‹s
;

141 
	mµp_obyãs
;

142 
	mµp_›ackës
;

143 
	mµp_€º‹s
;

146 
	svj°©
 {

147 
	mvjs_∑ckës
;

148 
	mvjs_com¥es£d
;

149 
	mvjs_£¨ches
;

150 
	mvjs_mis£s
;

151 
	mvjs_uncom¥es£dö
;

152 
	mvjs_com¥es£dö
;

153 
	mvjs_îr‹ö
;

154 
	mvjs_tos£d
;

157 
	sµp_°©s
 {

158 
µp°©
 
	mp
;

159 
vj°©
 
	mvj
;

162 
	scomp°©
 {

163 
	munc_byãs
;

164 
	munc_∑ckës
;

165 
	mcomp_byãs
;

166 
	mcomp_∑ckës
;

167 
	möc_byãs
;

168 
	möc_∑ckës
;

169 
	møtio
;

172 
	sµp_comp_°©s
 {

173 
comp°©
 
	mc
;

174 
comp°©
 
	md
;

181 
	sµp_idÀ
 {

182 
time_t
 
	mxmô_idÀ
;

183 
time_t
 
	mªcv_idÀ
;

186 #i‚de‡
__P


187 #ifde‡
__STDC__


188 
	#__P
(
x
Ë
	)
x

190 
	#__P
(
x
Ë()

	)

	@include/net/pppio.h

38 
	#_PPPIO
(
n
Ë(('p' << 8Ë+ (n))

	)

40 
	#PPPIO_NEWPPA
 
	`_PPPIO
(130Ë

	)

41 
	#PPPIO_GETSTAT
 
	`_PPPIO
(131Ë

	)

42 
	#PPPIO_GETCSTAT
 
	`_PPPIO
(132Ë

	)

43 
	#PPPIO_MTU
 
	`_PPPIO
(133Ë

	)

44 
	#PPPIO_MRU
 
	`_PPPIO
(134Ë

	)

45 
	#PPPIO_CFLAGS
 
	`_PPPIO
(135Ë

	)

46 
	#PPPIO_XCOMP
 
	`_PPPIO
(136Ë

	)

47 
	#PPPIO_RCOMP
 
	`_PPPIO
(137Ë

	)

48 
	#PPPIO_XACCM
 
	`_PPPIO
(138Ë

	)

49 
	#PPPIO_RACCM
 
	`_PPPIO
(139Ë

	)

50 
	#PPPIO_VJINIT
 
	`_PPPIO
(140Ë

	)

51 
	#PPPIO_ATTACH
 
	`_PPPIO
(141Ë

	)

52 
	#PPPIO_LASTMOD
 
	`_PPPIO
(142Ë

	)

53 
	#PPPIO_GCLEAN
 
	`_PPPIO
(143Ë

	)

54 
	#PPPIO_DEBUG
 
	`_PPPIO
(144Ë

	)

55 
	#PPPIO_BIND
 
	`_PPPIO
(145Ë

	)

56 
	#PPPIO_NPMODE
 
	`_PPPIO
(146Ë

	)

57 
	#PPPIO_GIDLE
 
	`_PPPIO
(147Ë

	)

58 
	#PPPIO_PASSFILT
 
	`_PPPIO
(148Ë

	)

59 
	#PPPIO_ACTIVEFILT
 
	`_PPPIO
(149Ë

	)

64 
	#COMP_AC
 0x1

	)

65 
	#DECOMP_AC
 0x2

	)

66 
	#COMP_PROT
 0x4

	)

67 
	#DECOMP_PROT
 0x8

	)

69 
	#COMP_VJC
 0x10

	)

70 
	#COMP_VJCCID
 0x20

	)

71 
	#DECOMP_VJC
 0x40

	)

72 
	#DECOMP_VJCCID
 0x80

	)

74 
	#CCP_ISOPEN
 0x100

	)

75 
	#CCP_ISUP
 0x200

	)

76 
	#CCP_ERROR
 0x400

	)

77 
	#CCP_FATALERROR
 0x800

	)

78 
	#CCP_COMP_RUN
 0x1000

	)

79 
	#CCP_DECOMP_RUN
 0x2000

	)

84 
	#RCV_B7_0
 1

	)

85 
	#RCV_B7_1
 2

	)

86 
	#RCV_EVNP
 4

	)

87 
	#RCV_ODDP
 8

	)

93 
	#PPPCTL_OERROR
 0xe0

	)

94 
	#PPPCTL_IERROR
 0xe1

	)

95 
	#PPPCTL_MTU
 0xe2

	)

96 
	#PPPCTL_MRU
 0xe3

	)

97 
	#PPPCTL_UNIT
 0xe4

	)

102 
	#PPPDBG_DUMP
 0x10000

	)

103 
	#PPPDBG_LOG
 0x100

	)

104 
	#PPPDBG_DRIVER
 0

	)

105 
	#PPPDBG_IF
 1

	)

106 
	#PPPDBG_COMP
 2

	)

107 
	#PPPDBG_AHDLC
 3

	)

	@include/net/slcompress.h

25 #i‚de‡
_SLCOMPRESS_H_


26 
	#_SLCOMPRESS_H_


	)

28 
	#MAX_STATES
 16

	)

29 
	#MAX_HDR
 
MLEN


	)

75 
	#TYPE_IP
 0x40

	)

76 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

77 
	#TYPE_COMPRESSED_TCP
 0x80

	)

78 
	#TYPE_ERROR
 0x00

	)

81 
	#NEW_C
 0x40

	)

82 
	#NEW_I
 0x20

	)

83 
	#NEW_S
 0x08

	)

84 
	#NEW_A
 0x04

	)

85 
	#NEW_W
 0x02

	)

86 
	#NEW_U
 0x01

	)

89 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

90 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

91 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

93 
	#TCP_PUSH_BIT
 0x10

	)

102 
	sc°©e
 {

103 
c°©e
 *
	mcs_√xt
;

104 
u_sh‹t
 
	mcs_hÀn
;

105 
u_ch¨
 
	mcs_id
;

106 
u_ch¨
 
	mcs_fûÀr
;

108 
	mcsu_hdr
[
MAX_HDR
];

109 
ù
 
	mcsu_ù
;

110 } 
	m¶cs_u
;

112 
	#cs_ù
 
¶cs_u
.
csu_ù


	)

113 
	#cs_hdr
 
¶cs_u
.
csu_hdr


	)

119 
	s¶com¥ess
 {

120 
c°©e
 *
	mœ°_cs
;

121 
u_ch¨
 
	mœ°_ªcv
;

122 
u_ch¨
 
	mœ°_xmô
;

123 
u_sh‹t
 
	mÊags
;

124 #i‚de‡
SL_NO_STATS


125 
	m¶s_∑ckës
;

126 
	m¶s_com¥es£d
;

127 
	m¶s_£¨ches
;

128 
	m¶s_mis£s
;

129 
	m¶s_uncom¥es£dö
;

130 
	m¶s_com¥es£dö
;

131 
	m¶s_îr‹ö
;

132 
	m¶s_tos£d
;

134 
c°©e
 
	mt°©e
[
MAX_STATES
];

135 
c°©e
 
	mr°©e
[
MAX_STATES
];

138 
	#SLF_TOSS
 1

	)

140 
¶_com¥ess_öô
 
__P
((
¶com¥ess
 *));

141 
¶_com¥ess_£tup
 
__P
((
¶com¥ess
 *, ));

142 
u_öt
 
¶_com¥ess_t˝
 
__P
((
mbuf
 *,

143 
ù
 *, 
¶com¥ess
 *, ));

144 
¶_uncom¥ess_t˝
 
__P
((
u_ch¨
 **, , 
u_öt
, 
¶com¥ess
 *));

145 
¶_uncom¥ess_t˝_c‹e
 
__P
((
u_ch¨
 *, , , 
u_öt
,

146 
¶com¥ess
 *, 
u_ch¨
 **, 
u_öt
 *));

	@include/net/vjcompress.h

25 #i‚de‡
_VJCOMPRESS_H_


26 
	#_VJCOMPRESS_H_


	)

28 
	#MAX_STATES
 16

	)

29 
	#MAX_HDR
 128

	)

75 
	#TYPE_IP
 0x40

	)

76 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

77 
	#TYPE_COMPRESSED_TCP
 0x80

	)

78 
	#TYPE_ERROR
 0x00

	)

81 
	#NEW_C
 0x40

	)

82 
	#NEW_I
 0x20

	)

83 
	#NEW_S
 0x08

	)

84 
	#NEW_A
 0x04

	)

85 
	#NEW_W
 0x02

	)

86 
	#NEW_U
 0x01

	)

89 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

90 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

91 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

93 
	#TCP_PUSH_BIT
 0x10

	)

102 
	sc°©e
 {

103 
c°©e
 *
	mcs_√xt
;

104 
u_sh‹t
 
	mcs_hÀn
;

105 
u_ch¨
 
	mcs_id
;

106 
u_ch¨
 
	mcs_fûÀr
;

108 
	mcsu_hdr
[
MAX_HDR
];

109 
ù
 
	mcsu_ù
;

110 } 
	mvjcs_u
;

112 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

113 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

118 
	svjcom¥ess
 {

119 
c°©e
 *
	mœ°_cs
;

120 
u_ch¨
 
	mœ°_ªcv
;

121 
u_ch¨
 
	mœ°_xmô
;

122 
u_sh‹t
 
	mÊags
;

123 #i‚de‡
VJ_NO_STATS


124 
vj°©
 
	m°©s
;

126 
c°©e
 
	mt°©e
[
MAX_STATES
];

127 
c°©e
 
	mr°©e
[
MAX_STATES
];

131 
	#VJF_TOSS
 1

	)

133 
vj_com¥ess_öô
 
__P
((
vjcom¥ess
 *
comp
, 
max_°©e
));

134 
u_öt
 
vj_com¥ess_t˝
 
__P
((
ù
 *ù, u_öà
mÀn
,

135 
vjcom¥ess
 *
comp
, 
com¥ess_cid_Êag
,

136 
u_ch¨
 **
vjhdΩ
));

137 
vj_uncom¥ess_îr
 
__P
((
vjcom¥ess
 *
comp
));

138 
vj_uncom¥ess_uncomp
 
__P
((
u_ch¨
 *
buf
, 
buÊí
,

139 
vjcom¥ess
 *
comp
));

140 
vj_uncom¥ess_t˝
 
__P
((
u_ch¨
 *
buf
, 
buÊí
, 
tŸÆ_Àn
,

141 
vjcom¥ess
 *
comp
, 
u_ch¨
 **
hdΩ
,

142 
u_öt
 *
hÀ≈
));

	@modules/bsd-comp.c

47 #ifde‡
AIX4


48 
	~<√t/√t_globÆs.h
>

50 
	~<sys/∑øm.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<sys/°ªam.h
>

53 
	~<√t/µp_defs.h
>

54 
	~"µp_mod.h
"

56 #ifde‡
SVR4


57 
	~<sys/byã‹dî.h
>

58 #i‚de‡
_BIG_ENDIAN


59 
	#BSD_LITTLE_ENDIAN


	)

63 #ifde‡
__osf__


64 #unde‡
FIRST


65 #unde‡
LAST


66 
	#BSD_LITTLE_ENDIAN


	)

69 #ifde‡
SOL2


70 
	~<sys/sunddi.h
>

73 
	#PACKETPTR
 
mblk_t
 *

	)

74 
	~<√t/µp-comp.h
>

76 #i‡
DO_BSD_COMPRESS


103 
	sbsd_db
 {

104 
	mtŸÀn
;

105 
u_öt
 
	mhsize
;

106 
u_ch¨
 
	mhshi·
;

107 
u_ch¨
 
	mn_bôs
;

108 
u_ch¨
 
	mmaxbôs
;

109 
u_ch¨
 
	mdebug
;

110 
u_ch¨
 
	munô
;

111 
u_sh‹t
 
	m£qno
;

112 
u_öt
 
	mhdæí
;

113 
u_öt
 
	mmru
;

114 
u_öt
 
	mmaxmaxcode
;

115 
u_öt
 
	mmax_ít
;

116 
u_öt
 
	mö_cou¡
;

117 
u_öt
 
	mbyãs_out
;

118 
u_öt
 
	møtio
;

119 
u_öt
 
	mcheckpoöt
;

120 
u_öt
 
	m˛ór_cou¡
;

121 
u_öt
 
	möcomp_cou¡
;

122 
u_öt
 
	möcomp_byãs
;

123 
u_öt
 
	muncomp_cou¡
;

124 
u_öt
 
	muncomp_byãs
;

125 
u_öt
 
	mcomp_cou¡
;

126 
u_öt
 
	mcomp_byãs
;

127 
u_sh‹t
 *
	mÀns
;

128 
	sbsd_di˘
 {

130 
u_öt32_t
 
	mfcode
;

132 #ifde‡
BSD_LITTLE_ENDIAN


133 
u_sh‹t
 
	m¥efix
;

134 
u_ch¨
 
	msuffix
;

135 
u_ch¨
 
	m∑d
;

137 
u_ch¨
 
	m∑d
;

138 
u_ch¨
 
	msuffix
;

139 
u_sh‹t
 
	m¥efix
;

141 } 
	mhs
;

142 } 
	mf
;

143 
u_sh‹t
 
	mcodem1
;

144 
u_sh‹t
 
	m˝å
;

145 } 
	mdi˘
[1];

148 
	#BSD_OVHD
 2

	)

149 
	#BSD_INIT_BITS
 
BSD_MIN_BITS


	)

151 *
bsd_comp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

152 *
bsd_decomp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

153 
bsd_‰ì
 
__P
((*
°©e
));

154 
bsd_comp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

155 
unô
, 
hdæí
, 
debug
));

156 
bsd_decomp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

157 
unô
, 
hdæí
, 
mru
, 
debug
));

158 
bsd_com¥ess
 
__P
((*
°©e
, 
mblk_t
 **
mªt
,

159 
mblk_t
 *
mp
, 
¶í
, 
maxﬁí
));

160 
bsd_öcomp
 
__P
((*
°©e
, 
mblk_t
 *
dmsg
));

161 
bsd_decom¥ess
 
__P
((*
°©e
, 
mblk_t
 *
cmp
, mblk_à**
dmµ
));

162 
bsd_ª£t
 
__P
((*
°©e
));

163 
bsd_comp_°©s
 
__P
((*
°©e
, 
comp°©
 *
°©s
));

168 
com¥ess‹
 
	gµp_bsd_com¥ess
 = {

169 
CI_BSD_COMPRESS
,

170 
bsd_comp_Æloc
,

171 
bsd_‰ì
,

172 
bsd_comp_öô
,

173 
bsd_ª£t
,

174 
bsd_com¥ess
,

175 
bsd_comp_°©s
,

176 
bsd_decomp_Æloc
,

177 
bsd_‰ì
,

178 
bsd_decomp_öô
,

179 
bsd_ª£t
,

180 
bsd_decom¥ess
,

181 
bsd_öcomp
,

182 
bsd_comp_°©s
,

189 
	#CLEAR
 256

	)

190 
	#FIRST
 257

	)

191 
	#LAST
 255

	)

193 
	#MAXCODE
(
b
Ë((1 << (b)Ë- 1)

	)

194 
	#BADCODEM1
 
	`MAXCODE
(
BSD_MAX_BITS
)

	)

196 
	#BSD_HASH
(
¥efix
,
suffix
,
hshi·
Ë((((
u_öt32_t
)(suffix)) << (hshift)) \

197 ^ (
u_öt32_t
)(
¥efix
))

	)

198 
	#BSD_KEY
(
¥efix
,
suffix
Ë((((
u_öt32_t
)(suffix)) << 16) \

199 + (
u_öt32_t
)(
¥efix
))

	)

201 
	#CHECK_GAP
 10000

	)

203 
	#RATIO_SCALE_LOG
 8

	)

204 
	#RATIO_SCALE
 (1<<
RATIO_SCALE_LOG
)

	)

205 
	#RATIO_MAX
 (0x7fffffff>>
RATIO_SCALE_LOG
)

	)

207 
	#DECOMP_CHUNK
 256

	)

213 
	$bsd_˛ór
(
db
)

214 
bsd_db
 *
db
;

216 
db
->
˛ór_cou¡
++;

217 
db
->
max_ít
 = 
FIRST
-1;

218 
db
->
n_bôs
 = 
BSD_INIT_BITS
;

219 
db
->
øtio
 = 0;

220 
db
->
byãs_out
 = 0;

221 
db
->
ö_cou¡
 = 0;

222 
db
->
checkpoöt
 = 
CHECK_GAP
;

223 
	}
}

239 
	$bsd_check
(
db
)

240 
bsd_db
 *
db
;

242 
u_öt
 
√w_øtio
;

244 i‡(
db
->
ö_cou¡
 >db->
checkpoöt
) {

246 i‡(
db
->
ö_cou¡
 >
RATIO_MAX


247 || 
db
->
byãs_out
 >
RATIO_MAX
) {

248 
db
->
ö_cou¡
 -= db->in_count/4;

249 
db
->
byãs_out
 -= db->bytes_out/4;

252 
db
->
checkpoöt
 = db->
ö_cou¡
 + 
CHECK_GAP
;

254 i‡(
db
->
max_ít
 >db->
maxmaxcode
) {

262 
√w_øtio
 = 
db
->
ö_cou¡
 << 
RATIO_SCALE_LOG
;

263 i‡(
db
->
byãs_out
 != 0)

264 
√w_øtio
 /
db
->
byãs_out
;

266 i‡(
√w_øtio
 < 
db
->
øtio
 ||Çew_øtiÿ< 1 * 
RATIO_SCALE
) {

267 
	`bsd_˛ór
(
db
);

270 
db
->
øtio
 = 
√w_øtio
;

274 
	}
}

280 
	$bsd_comp_°©s
(
°©e
, 
°©s
)

281 *
°©e
;

282 
comp°©
 *
°©s
;

284 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

285 
u_öt
 
out
;

287 
°©s
->
unc_byãs
 = 
db
->
uncomp_byãs
;

288 
°©s
->
unc_∑ckës
 = 
db
->
uncomp_cou¡
;

289 
°©s
->
comp_byãs
 = 
db
->comp_bytes;

290 
°©s
->
comp_∑ckës
 = 
db
->
comp_cou¡
;

291 
°©s
->
öc_byãs
 = 
db
->
öcomp_byãs
;

292 
°©s
->
öc_∑ckës
 = 
db
->
öcomp_cou¡
;

293 
°©s
->
øtio
 = 
db
->
ö_cou¡
;

294 
out
 = 
db
->
byãs_out
;

295 i‡(
°©s
->
øtio
 <= 0x7fffff)

296 
°©s
->
øtio
 <<= 8;

298 
out
 >>= 8;

299 i‡(
out
 != 0)

300 
°©s
->
øtio
 /
out
;

301 
	}
}

307 
	$bsd_ª£t
(
°©e
)

308 *
°©e
;

310 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

312 
db
->
£qno
 = 0;

313 
	`bsd_˛ór
(
db
);

314 
db
->
˛ór_cou¡
 = 0;

315 
	}
}

321 
	$bsd_Æloc
(
›ti⁄s
, 
›t_Àn
, 
decomp
)

322 
u_ch¨
 *
›ti⁄s
;

323 
›t_Àn
, 
decomp
;

325 
bôs
;

326 
u_öt
 
√wÀn
, 
hsize
, 
hshi·
, 
maxmaxcode
;

327 
bsd_db
 *
db
;

329 i‡(
›t_Àn
 !3 || 
›ti⁄s
[0] !
CI_BSD_COMPRESS
 || options[1] != 3

330 || 
	`BSD_VERSION
(
›ti⁄s
[2]Ë!
BSD_CURRENT_VERSION
)

331  
NULL
;

333 
bôs
 = 
	`BSD_NBITS
(
›ti⁄s
[2]);

334 
bôs
) {

339 
hsize
 = 5003;

340 
hshi·
 = 4;

343 
hsize
 = 9001;

344 
hshi·
 = 5;

347 
hsize
 = 18013;

348 
hshi·
 = 6;

351 
hsize
 = 35023;

352 
hshi·
 = 7;

359  
NULL
;

362 
maxmaxcode
 = 
	`MAXCODE
(
bôs
);

363 
√wÀn
 = (*
db
Ë+ (
hsize
-1Ë* ((db->
di˘
[0]));

364 #ifde‡
__osf__


365 
db
 = (
bsd_db
 *Ë
	`ALLOC_SLEEP
(
√wÀn
);

367 
db
 = (
bsd_db
 *Ë
	`ALLOC_NOSLEEP
(
√wÀn
);

369 i‡(!
db
)

370  
NULL
;

371 
	`bzîo
(
db
, (*dbË- (db->
di˘
));

373 i‡(!
decomp
) {

374 
db
->
Àns
 = 
NULL
;

376 #ifde‡
__osf__


377 
db
->
Àns
 = (
u_sh‹t
 *Ë
	`ALLOC_SLEEP
((
maxmaxcode
+1) * (db->lens[0]));

379 
db
->
Àns
 = (
u_sh‹t
 *Ë
	`ALLOC_NOSLEEP
((
maxmaxcode
+1) * (db->lens[0]));

381 i‡(!
db
->
Àns
) {

382 
	`FREE
(
db
, 
√wÀn
);

383  
NULL
;

387 
db
->
tŸÀn
 = 
√wÀn
;

388 
db
->
hsize
 = hsize;

389 
db
->
hshi·
 = hshift;

390 
db
->
maxmaxcode
 = maxmaxcode;

391 
db
->
maxbôs
 = 
bôs
;

393  (*Ë
db
;

394 
	}
}

397 
	$bsd_‰ì
(
°©e
)

398 *
°©e
;

400 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

402 i‡(
db
->
Àns
)

403 
	`FREE
(
db
->
Àns
, (db->
maxmaxcode
+1) * (db->lens[0]));

404 
	`FREE
(
db
, db->
tŸÀn
);

405 
	}
}

408 
	$bsd_comp_Æloc
(
›ti⁄s
, 
›t_Àn
)

409 
u_ch¨
 *
›ti⁄s
;

410 
›t_Àn
;

412  
	`bsd_Æloc
(
›ti⁄s
, 
›t_Àn
, 0);

413 
	}
}

416 
	$bsd_decomp_Æloc
(
›ti⁄s
, 
›t_Àn
)

417 
u_ch¨
 *
›ti⁄s
;

418 
›t_Àn
;

420  
	`bsd_Æloc
(
›ti⁄s
, 
›t_Àn
, 1);

421 
	}
}

427 
	$bsd_öô
(
db
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
, 
decomp
)

428 
bsd_db
 *
db
;

429 
u_ch¨
 *
›ti⁄s
;

430 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
, 
decomp
;

432 
i
;

434 i‡(
›t_Àn
 < 
CILEN_BSD_COMPRESS


435 || 
›ti⁄s
[0] !
CI_BSD_COMPRESS
 || o±i⁄s[1] !
CILEN_BSD_COMPRESS


436 || 
	`BSD_VERSION
(
›ti⁄s
[2]Ë!
BSD_CURRENT_VERSION


437 || 
	`BSD_NBITS
(
›ti⁄s
[2]Ë!
db
->
maxbôs


438 || 
decomp
 && 
db
->
Àns
 =
NULL
)

441 i‡(
decomp
) {

442 
i
 = 
LAST
+1;

443 
i
 != 0)

444 
db
->
Àns
[--
i
] = 1;

446 
i
 = 
db
->
hsize
;

447 
i
 != 0) {

448 
db
->
di˘
[--
i
].
codem1
 = 
BADCODEM1
;

449 
db
->
di˘
[
i
].
˝å
 = 0;

452 
db
->
unô
 = unit;

453 
db
->
hdæí
 = hdrlen;

454 
db
->
mru
 = mru;

455 i‡(
debug
)

456 
db
->
debug
 = 1;

458 
	`bsd_ª£t
(
db
);

461 
	}
}

464 
	$bsd_comp_öô
(
°©e
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
debug
)

465 *
°©e
;

466 
u_ch¨
 *
›ti⁄s
;

467 
›t_Àn
, 
unô
, 
hdæí
, 
debug
;

469  
	`bsd_öô
((
bsd_db
 *Ë
°©e
, 
›ti⁄s
, 
›t_Àn
,

470 
unô
, 
hdæí
, 0, 
debug
, 0);

471 
	}
}

474 
	$bsd_decomp_öô
(
°©e
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
)

475 *
°©e
;

476 
u_ch¨
 *
›ti⁄s
;

477 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
;

479  
	`bsd_öô
((
bsd_db
 *Ë
°©e
, 
›ti⁄s
, 
›t_Àn
,

480 
unô
, 
hdæí
, 
mru
, 
debug
, 1);

481 
	}
}

492 
	$bsd_com¥ess
(
°©e
, 
mªç
, 
mp
, 
¶í
, 
maxﬁí
)

493 *
°©e
;

494 
mblk_t
 **
mªç
;

495 
mblk_t
 *
mp
;

496 
¶í
;

497 
maxﬁí
;

499 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

500 
hshi·
 = 
db
->hshift;

501 
u_öt
 
max_ít
 = 
db
->max_ent;

502 
u_öt
 
n_bôs
 = 
db
->n_bits;

503 
u_öt
 
bôno
 = 32;

504 
u_öt32_t
 
accm
 = 0, 
fcode
;

505 
bsd_di˘
 *
di˘p
;

506 
u_ch¨
 
c
;

507 
hvÆ
, 
di•
, 
ít
, 
ûí
;

508 
mblk_t
 *
≈
, *
mªt
;

509 
u_ch¨
 *
Ωå
, *
w±r
;

510 
u_ch¨
 *
˝_íd
;

511 
ﬁí
;

512 
mblk_t
 *
m
, **
m≈
;

514 
	#PUTBYTE
(
v
) { \

515 i‡(
w±r
) { \

516 *
w±r
++ = (
v
); \

517 i‡(
w±r
 >
˝_íd
) { \

518 
m
->
b_w±r
 = 
w±r
; \

519 
m
 = m->
b_c⁄t
; \

520 i‡(
m
) { \

521 
w±r
 = 
m
->
b_w±r
; \

522 
˝_íd
 = 
m
->
b_d©≠
->
db_lim
; \

524 
w±r
 = 
NULL
; \

527 ++
ﬁí
; \

528 }

	)

530 
	#OUTPUT
(
ít
) { \

531 
bôno
 -
n_bôs
; \

532 
accm
 |((
ít
Ë<< 
bôno
); \

534 
	`PUTBYTE
(
accm
 >> 24); \

535 
accm
 <<= 8; \

536 
bôno
 += 8; \

537 } 
bôno
 <= 24); \

538 }

	)

544 *
mªç
 = 
NULL
;

545 
Ωå
 = 
mp
->
b_Ωå
;

546 i‡(
Ωå
 + 
PPP_HDRLEN
 > 
mp
->
b_w±r
) {

547 i‡(!
	`puŒupmsg
(
mp
, 
PPP_HDRLEN
))

549 
Ωå
 = 
mp
->
b_Ωå
;

551 
ít
 = 
	`PPP_PROTOCOL
(
Ωå
);

552 i‡(
ít
 < 0x21 ||Ént > 0xf9)

557 i‡(
maxﬁí
 > 
¶í
)

558 
maxﬁí
 = 
¶í
;

561 
m≈
 = &
mªt
;

562 
ﬁí
 = 
maxﬁí
; olen > 0; ) {

563 
m
 = 
	`Ælocb
((
ﬁí
 < 4096? oÀn: 4096), 
BPRI_MED
);

564 *
m≈
 = 
m
;

565 i‡(
m
 =
NULL
) {

566 i‡(
mªt
 !
NULL
) {

567 
	`‰ìmsg
(
mªt
);

568 
m≈
 = &
mªt
;

572 
m≈
 = &
m
->
b_c⁄t
;

573 
ﬁí
 -
m
->
b_d©≠
->
db_lim
 - m->
b_w±r
;

575 *
m≈
 = 
NULL
;

577 i‡((
m
 = 
mªt
Ë!
NULL
) {

578 
w±r
 = 
m
->
b_w±r
;

579 
˝_íd
 = 
m
->
b_d©≠
->
db_lim
;

581 
w±r
 = 
˝_íd
 = 
NULL
;

582 
ﬁí
 = 0;

588 i‡(
w±r
) {

589 
w±r
[0] = 
	`PPP_ADDRESS
(
Ωå
);

590 
w±r
[1] = 
	`PPP_CONTROL
(
Ωå
);

591 
w±r
[2] = 0;

592 
w±r
[3] = 
PPP_COMP
;

593 
w±r
[4] = 
db
->
£qno
 >> 8;

594 
w±r
[5] = 
db
->
£qno
;

595 
w±r
 +
PPP_HDRLEN
 + 
BSD_OVHD
;

597 ++
db
->
£qno
;

598 
Ωå
 +
PPP_HDRLEN
;

600 
¶í
 = 
mp
->
b_w±r
 - 
Ωå
;

601 
ûí
 = 
¶í
 + 1;

602 
≈
 = 
mp
->
b_c⁄t
;

604 i‡(
¶í
 <= 0) {

605 i‡(!
≈
)

607 
Ωå
 = 
≈
->
b_Ωå
;

608 
¶í
 = 
≈
->
b_w±r
 - 
Ωå
;

609 
≈
 =Çp->
b_c⁄t
;

610 i‡(!
¶í
)

612 
ûí
 +
¶í
;

615 
¶í
--;

616 
c
 = *
Ωå
++;

617 
fcode
 = 
	`BSD_KEY
(
ít
, 
c
);

618 
hvÆ
 = 
	`BSD_HASH
(
ít
, 
c
, 
hshi·
);

619 
di˘p
 = &
db
->
di˘
[
hvÆ
];

622 i‡(
di˘p
->
codem1
 >
max_ít
)

623 
nom©ch
;

624 i‡(
di˘p
->
f
.
fcode
 == fcode) {

625 
ít
 = 
di˘p
->
codem1
+1;

630 
di•
 = (
hvÆ
 == 0) ? 1 : hval;

632 
hvÆ
 +
di•
;

633 i‡(
hvÆ
 >
db
->
hsize
)

634 
hvÆ
 -
db
->
hsize
;

635 
di˘p
 = &
db
->
di˘
[
hvÆ
];

636 i‡(
di˘p
->
codem1
 >
max_ít
)

637 
nom©ch
;

638 } 
di˘p
->
f
.
fcode
 != fcode);

639 
ít
 = 
di˘p
->
codem1
 + 1;

642 
nom©ch
:

643 
	`OUTPUT
(
ít
);

646 i‡(
max_ít
 < 
db
->
maxmaxcode
) {

647 
bsd_di˘
 *
di˘p2
;

649 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
))

650 
db
->
n_bôs
 = ++n_bits;

655 
di˘p2
 = &
db
->
di˘
[
max_ít
+1];

656 i‡(
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 =
max_ít
)

657 
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 = 
BADCODEM1
;

658 
di˘p2
->
˝å
 = 
hvÆ
;

659 
di˘p
->
codem1
 = 
max_ít
;

660 
di˘p
->
f
.
fcode
 = fcode;

662 
db
->
max_ít
 = ++max_ent;

664 
ít
 = 
c
;

667 
	`OUTPUT
(
ít
);

668 
db
->
byãs_out
 +
ﬁí
;

669 
db
->
ö_cou¡
 +
ûí
;

670 i‡(
bôno
 < 32)

671 ++
db
->
byãs_out
;

673 i‡(
	`bsd_check
(
db
))

674 
	`OUTPUT
(
CLEAR
);

680 i‡(
bôno
 != 32)

681 
	`PUTBYTE
((
accm
 | (0xf‡<< (
bôno
-8))) >> 24);

687 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
Ë&& max_íà< 
db
->
maxmaxcode
)

688 
db
->
n_bôs
++;

690 
db
->
uncomp_byãs
 +
ûí
;

691 ++
db
->
uncomp_cou¡
;

692 i‡(
ﬁí
 + 
PPP_HDRLEN
 + 
BSD_OVHD
 > 
maxﬁí
 && 
mªt
 !
NULL
) {

694 
	`‰ìmsg
(
mªt
);

695 
mªt
 = 
NULL
;

696 ++
db
->
öcomp_cou¡
;

697 
db
->
öcomp_byãs
 +
ûí
;

698 } i‡(
w±r
 !
NULL
) {

699 
m
->
b_w±r
 = 
w±r
;

700 i‡(
m
->
b_c⁄t
) {

701 
	`‰ìmsg
(
m
->
b_c⁄t
);

702 
m
->
b_c⁄t
 = 
NULL
;

704 ++
db
->
comp_cou¡
;

705 
db
->
comp_byãs
 +
ﬁí
 + 
BSD_OVHD
;

708 *
mªç
 = 
mªt
;

709  
ﬁí
 + 
PPP_HDRLEN
 + 
BSD_OVHD
;

710 #unde‡
OUTPUT


711 #unde‡
PUTBYTE


712 
	}
}

720 
	$bsd_öcomp
(
°©e
, 
dmsg
)

721 *
°©e
;

722 
mblk_t
 *
dmsg
;

724 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

725 
u_öt
 
hshi·
 = 
db
->hshift;

726 
u_öt
 
max_ít
 = 
db
->max_ent;

727 
u_öt
 
n_bôs
 = 
db
->n_bits;

728 
bsd_di˘
 *
di˘p
;

729 
u_öt32_t
 
fcode
;

730 
u_ch¨
 
c
;

731 
hvÆ
, 
di•
;

732 
¶í
, 
ûí
;

733 
u_öt
 
bôno
 = 7;

734 
u_ch¨
 *
Ωå
;

735 
u_öt
 
ít
;

737 
Ωå
 = 
dmsg
->
b_Ωå
;

738 i‡(
Ωå
 + 
PPP_HDRLEN
 > 
dmsg
->
b_w±r
) {

739 i‡(!
	`puŒupmsg
(
dmsg
, 
PPP_HDRLEN
))

741 
Ωå
 = 
dmsg
->
b_Ωå
;

743 
ít
 = 
	`PPP_PROTOCOL
(
Ωå
);

744 i‡(
ít
 < 0x21 ||Ént > 0xf9)

747 
db
->
£qno
++;

748 
ûí
 = 1;

749 
Ωå
 +
PPP_HDRLEN
;

751 
¶í
 = 
dmsg
->
b_w±r
 - 
Ωå
;

752 i‡(
¶í
 <= 0) {

753 
dmsg
 = dmsg->
b_c⁄t
;

754 i‡(!
dmsg
)

756 
Ωå
 = 
dmsg
->
b_Ωå
;

759 
ûí
 +
¶í
;

762 
c
 = *
Ωå
++;

763 
fcode
 = 
	`BSD_KEY
(
ít
, 
c
);

764 
hvÆ
 = 
	`BSD_HASH
(
ít
, 
c
, 
hshi·
);

765 
di˘p
 = &
db
->
di˘
[
hvÆ
];

768 i‡(
di˘p
->
codem1
 >
max_ít
)

769 
nom©ch
;

770 i‡(
di˘p
->
f
.
fcode
 == fcode) {

771 
ít
 = 
di˘p
->
codem1
+1;

776 
di•
 = (
hvÆ
 == 0) ? 1 : hval;

778 
hvÆ
 +
di•
;

779 i‡(
hvÆ
 >
db
->
hsize
)

780 
hvÆ
 -
db
->
hsize
;

781 
di˘p
 = &
db
->
di˘
[
hvÆ
];

782 i‡(
di˘p
->
codem1
 >
max_ít
)

783 
nom©ch
;

784 } 
di˘p
->
f
.
fcode
 != fcode);

785 
ít
 = 
di˘p
->
codem1
+1;

788 
nom©ch
:

789 
bôno
 +
n_bôs
;

792 i‡(
max_ít
 < 
db
->
maxmaxcode
) {

793 
bsd_di˘
 *
di˘p2
;

795 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
))

796 
db
->
n_bôs
 = ++n_bits;

801 
di˘p2
 = &
db
->
di˘
[
max_ít
+1];

802 i‡(
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 =
max_ít
)

803 
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 = 
BADCODEM1
;

804 
di˘p2
->
˝å
 = 
hvÆ
;

805 
di˘p
->
codem1
 = 
max_ít
;

806 
di˘p
->
f
.
fcode
 = fcode;

808 
db
->
max_ít
 = ++max_ent;

809 
db
->
Àns
[
max_ít
] = db->Àns[
ít
]+1;

811 
ít
 = 
c
;

812 } --
¶í
 != 0);

814 
bôno
 +
n_bôs
;

815 
db
->
byãs_out
 +
bôno
/8;

816 
db
->
ö_cou¡
 +
ûí
;

817 ()
	`bsd_check
(
db
);

819 ++
db
->
öcomp_cou¡
;

820 
db
->
öcomp_byãs
 +
ûí
;

821 ++
db
->
uncomp_cou¡
;

822 
db
->
uncomp_byãs
 +
ûí
;

827 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
Ë&& max_íà< 
db
->
maxmaxcode
)

828 
db
->
n_bôs
++;

829 
	}
}

849 
	$bsd_decom¥ess
(
°©e
, 
cmsg
, 
dmµ
)

850 *
°©e
;

851 
mblk_t
 *
cmsg
, **
dmµ
;

853 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

854 
u_öt
 
max_ít
 = 
db
->max_ent;

855 
u_öt32_t
 
accm
 = 0;

856 
u_öt
 
bôno
 = 32;

857 
u_öt
 
n_bôs
 = 
db
->n_bits;

858 
u_öt
 
tgtbôno
 = 32-
n_bôs
;

859 
bsd_di˘
 *
di˘p
;

860 
ex∂í
, 
i
, 
£q
, 
Àn
;

861 
u_öt
 
öcode
, 
ﬁdcode
, 
föch¨
;

862 
u_ch¨
 *
p
, *
Ωå
, *
w±r
;

863 
mblk_t
 *
dmsg
, *
mªt
;

864 
adrs
, 
˘æ
, 
ûí
;

865 
dÀn
, 
•a˚
, 
codñí
, 
exåa
;

870 
Ωå
 = 
cmsg
->
b_Ωå
;

871 i‡(
Ωå
 + 
PPP_HDRLEN
 + 
BSD_OVHD
 >
cmsg
->
b_w±r
) {

872 i‡(!
	`puŒupmsg
(
cmsg
, 
PPP_HDRLEN
 + 
BSD_OVHD
 + 1)) {

873 i‡(
db
->
debug
)

874 
	`¥ötf
("bsd_decomp%d: faûedÅÿpuŒup\n", 
db
->
unô
);

875  
DECOMP_ERROR
;

877 
Ωå
 = 
cmsg
->
b_Ωå
;

884 
adrs
 = 
	`PPP_ADDRESS
(
Ωå
);

885 
˘æ
 = 
	`PPP_CONTROL
(
Ωå
);

886 
Ωå
 +
PPP_HDRLEN
;

887 
£q
 = (
Ωå
[0] << 8) +Ñptr[1];

888 
Ωå
 +
BSD_OVHD
;

889 
ûí
 = 
Àn
 = 
cmsg
->
b_w±r
 - 
Ωå
;

894 i‡(
£q
 !
db
->
£qno
++) {

895 i‡(
db
->
debug
)

896 
	`¥ötf
("bsd_decomp%d: bad sequence # %d,Éxpected %d\n",

897 
db
->
unô
, 
£q
, db->
£qno
 - 1);

898  
DECOMP_ERROR
;

904 i‡((
dmsg
 = 
	`Ælocb
(
DECOMP_CHUNK
 + 
db
->
hdæí
, 
BPRI_MED
)Ë=
NULL
)

905  
DECOMP_ERROR
;

906 
mªt
 = 
dmsg
;

907 
dmsg
->
b_w±r
 +
db
->
hdæí
;

908 
dmsg
->
b_Ωå
 = 
w±r
 = dmsg->
b_w±r
;

912 
w±r
[0] = 
adrs
;

913 
w±r
[1] = 
˘æ
;

914 
w±r
[2] = 0;

915 
w±r
 +
PPP_HDRLEN
 - 1;

916 
•a˚
 = 
dmsg
->
b_d©≠
->
db_lim
 - 
w±r
;

918 
ﬁdcode
 = 
CLEAR
;

919 
ex∂í
 = 0;

921 i‡(
Àn
 == 0) {

922 
cmsg
 = cmsg->
b_c⁄t
;

923 i‡(!
cmsg
)

925 
Ωå
 = 
cmsg
->
b_Ωå
;

926 
Àn
 = 
cmsg
->
b_w±r
 - 
Ωå
;

927 
ûí
 +
Àn
;

936 
bôno
 -= 8;

937 
accm
 |*
Ωå
++ << 
bôno
;

938 --
Àn
;

939 i‡(
tgtbôno
 < 
bôno
)

941 
öcode
 = 
accm
 >> 
tgtbôno
;

942 
accm
 <<
n_bôs
;

943 
bôno
 +
n_bôs
;

945 i‡(
öcode
 =
CLEAR
) {

951 i‡(
Àn
 > 0 || 
cmsg
->
b_c⁄t
 != 0) {

952 i‡(
cmsg
->
b_c⁄t
)

953 
Àn
 +
	`msgdsize
(
cmsg
->
b_c⁄t
);

954 i‡(
Àn
 > 0) {

955 
	`‰ìmsg
(
dmsg
);

956 i‡(
db
->
debug
)

957 
	`¥ötf
("bsd_decomp%d: bad CLEAR\n", 
db
->
unô
);

958  
DECOMP_FATALERROR
;

961 
	`bsd_˛ór
(
db
);

962 
ex∂í
 = 
ûí
 = 0;

966 i‡(
öcode
 > 
max_ít
 + 2 || incodê> 
db
->
maxmaxcode


967 || 
öcode
 > 
max_ít
 && 
ﬁdcode
 =
CLEAR
) {

968 
	`‰ìmsg
(
dmsg
);

969 i‡(
db
->
debug
) {

970 
	`¥ötf
("bsd_decomp%d: bad code 0x%x oldcode=0x%x ",

971 
db
->
unô
, 
öcode
, 
ﬁdcode
);

972 
	`¥ötf
("max_ent=0x%x dlen=%d seqno=%d\n",

973 
max_ít
, 
dÀn
, 
db
->
£qno
);

975  
DECOMP_FATALERROR
;

979 i‡(
öcode
 > 
max_ít
) {

980 
föch¨
 = 
ﬁdcode
;

981 
exåa
 = 1;

983 
föch¨
 = 
öcode
;

984 
exåa
 = 0;

987 
codñí
 = 
db
->
Àns
[
föch¨
];

988 
ex∂í
 +
codñí
 + 
exåa
;

989 i‡(
ex∂í
 > 
db
->
mru
 + 1) {

990 
	`‰ìmsg
(
dmsg
);

991 i‡(
db
->
debug
)

992 
	`¥ötf
("bsd_decomp%d:Ñ™ ouào‡mru\n", 
db
->
unô
);

993  
DECOMP_FATALERROR
;

999 
•a˚
 -
codñí
 + 
exåa
;

1000 i‡(
•a˚
 < 0) {

1002 
dmsg
->
b_w±r
 = 
w±r
;

1003 
dÀn
 = 
codñí
 + 
exåa
;

1004 i‡(
dÀn
 < 
DECOMP_CHUNK
)

1005 
dÀn
 = 
DECOMP_CHUNK
;

1006 i‡((
dmsg
->
b_c⁄t
 = 
	`Ælocb
(
dÀn
, 
BPRI_MED
)Ë=
NULL
) {

1007 
	`‰ìmsg
(
dmsg
);

1008  
DECOMP_ERROR
;

1010 
dmsg
 = dmsg->
b_c⁄t
;

1011 
w±r
 = 
dmsg
->
b_w±r
;

1012 
•a˚
 = 
dmsg
->
b_d©≠
->
db_lim
 - 
w±r
 - 
codñí
 - 
exåa
;

1014 
p
 = (
w±r
 +
codñí
);

1015 
föch¨
 > 
LAST
) {

1016 
di˘p
 = &
db
->
di˘
[db->di˘[
föch¨
].
˝å
];

1017 #ifde‡
DEBUG


1018 --
codñí
;

1019 i‡(
codñí
 <= 0) {

1020 
	`‰ìmsg
(
dmsg
);

1021 
	`¥ötf
("bsd_decomp%d: fñ»of‡íd o‡chaö ", 
db
->
unô
);

1022 
	`¥ötf
("0x%xát 0x%x by 0x%x, max_ent=0x%x\n",

1023 
öcode
, 
föch¨
, 
db
->
di˘
[föch¨].
˝å
, 
max_ít
);

1024  
DECOMP_FATALERROR
;

1026 i‡(
di˘p
->
codem1
 !
föch¨
-1) {

1027 
	`‰ìmsg
(
dmsg
);

1028 
	`¥ötf
("bsd_decomp%d: bad code chain 0x%x finchar=0x%x ",

1029 
db
->
unô
, 
öcode
, 
föch¨
);

1030 
	`¥ötf
("ﬁdcode=0x%x c±r=0x%x codem1=0x%x\n", 
ﬁdcode
,

1031 
db
->
di˘
[
föch¨
].
˝å
, 
di˘p
->
codem1
);

1032  
DECOMP_FATALERROR
;

1035 *--
p
 = 
di˘p
->
f
.
hs
.
suffix
;

1036 
föch¨
 = 
di˘p
->
f
.
hs
.
¥efix
;

1038 *--
p
 = 
föch¨
;

1040 #ifde‡
DEBUG


1041 i‡(--
codñí
 != 0)

1042 
	`¥ötf
("bsd_decomp%d: short by %dáfter code 0x%x, max_ent=0x%x\n",

1043 
db
->
unô
, 
codñí
, 
öcode
, 
max_ít
);

1046 i‡(
exåa
)

1047 *
w±r
++ = 
föch¨
;

1056 i‡(
ﬁdcode
 !
CLEAR
 && 
max_ít
 < 
db
->
maxmaxcode
) {

1057 
bsd_di˘
 *
di˘p2
;

1058 
u_öt32_t
 
fcode
;

1059 
hvÆ
, 
di•
;

1061 
fcode
 = 
	`BSD_KEY
(
ﬁdcode
,
föch¨
);

1062 
hvÆ
 = 
	`BSD_HASH
(
ﬁdcode
,
föch¨
,
db
->
hshi·
);

1063 
di˘p
 = &
db
->
di˘
[
hvÆ
];

1066 i‡(
di˘p
->
codem1
 < 
max_ít
) {

1067 
di•
 = (
hvÆ
 == 0) ? 1 : hval;

1069 
hvÆ
 +
di•
;

1070 i‡(
hvÆ
 >
db
->
hsize
)

1071 
hvÆ
 -
db
->
hsize
;

1072 
di˘p
 = &
db
->
di˘
[
hvÆ
];

1073 } 
di˘p
->
codem1
 < 
max_ít
);

1080 
di˘p2
 = &
db
->
di˘
[
max_ít
+1];

1081 i‡(
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 =
max_ít
) {

1082 
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 = 
BADCODEM1
;

1084 
di˘p2
->
˝å
 = 
hvÆ
;

1085 
di˘p
->
codem1
 = 
max_ít
;

1086 
di˘p
->
f
.
fcode
 = fcode;

1088 
db
->
max_ít
 = ++max_ent;

1089 
db
->
Àns
[
max_ít
] = db->Àns[
ﬁdcode
]+1;

1092 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
Ë&& max_íà< 
db
->
maxmaxcode
) {

1093 
db
->
n_bôs
 = ++n_bits;

1094 
tgtbôno
 = 32-
n_bôs
;

1097 
ﬁdcode
 = 
öcode
;

1099 
dmsg
->
b_w±r
 = 
w±r
;

1105 
db
->
byãs_out
 +
ûí
;

1106 
db
->
ö_cou¡
 +
ex∂í
;

1107 i‡(
	`bsd_check
(
db
Ë&& db->
debug
) {

1108 
	`¥ötf
("bsd_decomp%d:Öeer should have cleared dictionary\n",

1109 
db
->
unô
);

1112 ++
db
->
comp_cou¡
;

1113 
db
->
comp_byãs
 +
ûí
 + 
BSD_OVHD
;

1114 ++
db
->
uncomp_cou¡
;

1115 
db
->
uncomp_byãs
 +
ex∂í
;

1117 *
dmµ
 = 
mªt
;

1118  
DECOMP_OK
;

1119 
	}
}

	@modules/deflate.c

41 #ifde‡
AIX4


42 
	~<√t/√t_globÆs.h
>

44 
	~<sys/∑øm.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°ªam.h
>

47 
	~<√t/µp_defs.h
>

48 
	~"µp_mod.h
"

50 
	#PACKETPTR
 
mblk_t
 *

	)

51 
	~<√t/µp-comp.h
>

53 #ifde‡
__osf__


54 
	~"zlib.h
"

56 
	~"../comm⁄/zlib.h
"

59 #ifde‡
SOL2


60 
	~<sys/sunddi.h
>

63 #i‡
DO_DEFLATE


65 
	#DEFLATE_DEBUG
 1

	)

70 
	sdeÊ©e_°©e
 {

71 
	m£qno
;

72 
	mw_size
;

73 
	munô
;

74 
	mhdæí
;

75 
	mmru
;

76 
	mdebug
;

77 
z_°ªam
 
	m°rm
;

78 
comp°©
 
	m°©s
;

81 
	#DEFLATE_OVHD
 2

	)

83 *
z_Æloc
 
__P
((*, 
u_öt
 
ôems
, u_öà
size
));

84 *
z_Æloc_öô
 
__P
((*, 
u_öt
 
ôems
, u_öà
size
));

85 
z_‰ì
 
__P
((*, *
±r
));

86 *
z_comp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

87 *
z_decomp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

88 
z_comp_‰ì
 
__P
((*
°©e
));

89 
z_decomp_‰ì
 
__P
((*
°©e
));

90 
z_comp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

91 
unô
, 
hdæí
, 
debug
));

92 
z_decomp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

93 
unô
, 
hdæí
, 
mru
, 
debug
));

94 
z_com¥ess
 
__P
((*
°©e
, 
mblk_t
 **
mªt
,

95 
mblk_t
 *
mp
, 
¶í
, 
maxﬁí
));

96 
z_öcomp
 
__P
((*
°©e
, 
mblk_t
 *
dmsg
));

97 
z_decom¥ess
 
__P
((*
°©e
, 
mblk_t
 *
cmp
,

98 
mblk_t
 **
dmµ
));

99 
z_comp_ª£t
 
__P
((*
°©e
));

100 
z_decomp_ª£t
 
__P
((*
°©e
));

101 
z_comp_°©s
 
__P
((*
°©e
, 
comp°©
 *
°©s
));

106 
com¥ess‹
 
	gµp_deÊ©e
 = {

107 
CI_DEFLATE
,

108 
z_comp_Æloc
,

109 
z_comp_‰ì
,

110 
z_comp_öô
,

111 
z_comp_ª£t
,

112 
z_com¥ess
,

113 
z_comp_°©s
,

114 
z_decomp_Æloc
,

115 
z_decomp_‰ì
,

116 
z_decomp_öô
,

117 
z_decomp_ª£t
,

118 
z_decom¥ess
,

119 
z_öcomp
,

120 
z_comp_°©s
,

123 
com¥ess‹
 
	gµp_deÊ©e_dø·
 = {

124 
CI_DEFLATE_DRAFT
,

125 
z_comp_Æloc
,

126 
z_comp_‰ì
,

127 
z_comp_öô
,

128 
z_comp_ª£t
,

129 
z_com¥ess
,

130 
z_comp_°©s
,

131 
z_decomp_Æloc
,

132 
z_decomp_‰ì
,

133 
z_decomp_öô
,

134 
z_decomp_ª£t
,

135 
z_decom¥ess
,

136 
z_öcomp
,

137 
z_comp_°©s
,

140 
	#DECOMP_CHUNK
 512

	)

145 
	szchunk
 {

146 
u_öt
 
	msize
;

147 
u_öt
 
	mgu¨d
;

150 
	#GUARD_MAGIC
 0x77a6011a

	)

153 
	$z_Æloc_öô
(
nŸu£d
, 
ôems
, 
size
)

154 *
nŸu£d
;

155 
u_öt
 
ôems
, 
size
;

157 
zchunk
 *
z
;

159 
size
 = 
ôems
 * sizê+ (
zchunk
);

160 #ifde‡
__osf__


161 
z
 = (
zchunk
 *Ë
	`ALLOC_SLEEP
(
size
);

163 
z
 = (
zchunk
 *Ë
	`ALLOC_NOSLEEP
(
size
);

165 
z
->
size
 = size;

166 
z
->
gu¨d
 = 
GUARD_MAGIC
;

167  (*Ë(
z
 + 1);

168 
	}
}

171 
	$z_Æloc
(
nŸu£d
, 
ôems
, 
size
)

172 *
nŸu£d
;

173 
u_öt
 
ôems
, 
size
;

175 
zchunk
 *
z
;

177 
size
 = 
ôems
 * sizê+ (
zchunk
);

178 
z
 = (
zchunk
 *Ë
	`ALLOC_NOSLEEP
(
size
);

179 
z
->
size
 = size;

180 
z
->
gu¨d
 = 
GUARD_MAGIC
;

181  (*Ë(
z
 + 1);

182 
	}
}

185 
	$z_‰ì
(
nŸu£d
, 
±r
)

186 *
nŸu£d
;

187 *
±r
;

189 
zchunk
 *
z
 = ((zchunk *Ë
±r
) - 1;

191 i‡(
z
->
gu¨d
 !
GUARD_MAGIC
) {

192 
	`¥ötf
("ppp: z_free of corrupted chunkát %x (%x, %x)\n",

193 
z
, z->
size
, z->
gu¨d
);

196 
	`FREE
(
z
, z->
size
);

197 
	}
}

203 
	$z_comp_Æloc
(
›ti⁄s
, 
›t_Àn
)

204 
u_ch¨
 *
›ti⁄s
;

205 
›t_Àn
;

207 
deÊ©e_°©e
 *
°©e
;

208 
w_size
;

210 i‡(
›t_Àn
 !
CILEN_DEFLATE


211 || (
›ti⁄s
[0] !
CI_DEFLATE
 && o±i⁄s[0] !
CI_DEFLATE_DRAFT
)

212 || 
›ti⁄s
[1] !
CILEN_DEFLATE


213 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


214 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

215  
NULL
;

216 
w_size
 = 
	`DEFLATE_SIZE
(
›ti⁄s
[2]);

221 i‡(
w_size
 < 9 || w_sizê> 
DEFLATE_MAX_SIZE
)

222  
NULL
;

225 #ifde‡
__osf__


226 
°©e
 = (
deÊ©e_°©e
 *Ë
	`ALLOC_SLEEP
((*state));

228 
°©e
 = (
deÊ©e_°©e
 *Ë
	`ALLOC_NOSLEEP
((*state));

231 i‡(
°©e
 =
NULL
)

232  
NULL
;

234 
°©e
->
°rm
.
√xt_ö
 = 
NULL
;

235 
°©e
->
°rm
.
zÆloc
 = (
Æloc_func
Ë
z_Æloc_öô
;

236 
°©e
->
°rm
.
z‰ì
 = (
‰ì_func
Ë
z_‰ì
;

237 i‡(
	`deÊ©eInô2
(&
°©e
->
°rm
, 
Z_DEFAULT_COMPRESSION
, 
DEFLATE_METHOD_VAL
,

238 -
w_size
, 8, 
Z_DEFAULT_STRATEGY
Ë!
Z_OK
) {

239 
	`FREE
(
°©e
, (*state));

240  
NULL
;

243 
°©e
->
°rm
.
zÆloc
 = (
Æloc_func
Ë
z_Æloc
;

244 
°©e
->
w_size
 = w_size;

245 
	`bzîo
(&
°©e
->
°©s
, (state->stats));

246  (*Ë
°©e
;

247 
	}
}

250 
	$z_comp_‰ì
(
¨g
)

251 *
¨g
;

253 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

255 
	`deÊ©eEnd
(&
°©e
->
°rm
);

256 
	`FREE
(
°©e
, (*state));

257 
	}
}

260 
	$z_comp_öô
(
¨g
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
debug
)

261 *
¨g
;

262 
u_ch¨
 *
›ti⁄s
;

263 
›t_Àn
, 
unô
, 
hdæí
, 
debug
;

265 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

267 i‡(
›t_Àn
 < 
CILEN_DEFLATE


268 || (
›ti⁄s
[0] !
CI_DEFLATE
 && o±i⁄s[0] !
CI_DEFLATE_DRAFT
)

269 || 
›ti⁄s
[1] !
CILEN_DEFLATE


270 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


271 || 
	`DEFLATE_SIZE
(
›ti⁄s
[2]Ë!
°©e
->
w_size


272 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

275 
°©e
->
£qno
 = 0;

276 
°©e
->
unô
 = unit;

277 
°©e
->
hdæí
 = hdrlen;

278 
°©e
->
debug
 = debug;

280 
	`deÊ©eRe£t
(&
°©e
->
°rm
);

283 
	}
}

286 
	$z_comp_ª£t
(
¨g
)

287 *
¨g
;

289 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

291 
°©e
->
£qno
 = 0;

292 
	`deÊ©eRe£t
(&
°©e
->
°rm
);

293 
	}
}

296 
	$z_com¥ess
(
¨g
, 
mªt
, 
mp
, 
‹ig_Àn
, 
maxﬁí
)

297 *
¨g
;

298 
mblk_t
 **
mªt
;

299 
mblk_t
 *
mp
;

300 
‹ig_Àn
, 
maxﬁí
;

302 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

303 
u_ch¨
 *
Ωå
, *
w±r
;

304 
¥Ÿo
, 
ﬁí
, 
w•a˚
, 
r
, 
Êush
;

305 
mblk_t
 *
m
;

310 *
mªt
 = 
NULL
;

311 
Ωå
 = 
mp
->
b_Ωå
;

312 i‡(
Ωå
 + 
PPP_HDRLEN
 > 
mp
->
b_w±r
) {

313 i‡(!
	`puŒupmsg
(
mp
, 
PPP_HDRLEN
))

315 
Ωå
 = 
mp
->
b_Ωå
;

317 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
Ωå
);

318 i‡(
¥Ÿo
 > 0x3fff ||Öroto == 0xfd ||Öroto == 0xfb)

319  
‹ig_Àn
;

322 i‡(
maxﬁí
 > 
‹ig_Àn
)

323 
maxﬁí
 = 
‹ig_Àn
;

324 i‡(
maxﬁí
 <
PPP_HDRLEN
 + 2) {

325 
w•a˚
 = 0;

326 
m
 = 
NULL
;

328 
w•a˚
 = 
maxﬁí
 + 
°©e
->
hdæí
;

329 i‡(
w•a˚
 > 4096)

330 
w•a˚
 = 4096;

331 
m
 = 
	`Ælocb
(
w•a˚
, 
BPRI_MED
);

333 i‡(
m
 !
NULL
) {

334 *
mªt
 = 
m
;

335 i‡(
°©e
->
hdæí
 + 
PPP_HDRLEN
 + 2 < 
w•a˚
) {

336 
m
->
b_Ωå
 +
°©e
->
hdæí
;

337 
m
->
b_w±r
 = m->
b_Ωå
;

338 
w•a˚
 -
°©e
->
hdæí
;

340 
w±r
 = 
m
->
b_w±r
;

345 
w±r
[0] = 
	`PPP_ADDRESS
(
Ωå
);

346 
w±r
[1] = 
	`PPP_CONTROL
(
Ωå
);

347 
w±r
[2] = 
PPP_COMP
 >> 8;

348 
w±r
[3] = 
PPP_COMP
;

349 
w±r
 +
PPP_HDRLEN
;

350 
w±r
[0] = 
°©e
->
£qno
 >> 8;

351 
w±r
[1] = 
°©e
->
£qno
;

352 
w±r
 += 2;

353 
°©e
->
°rm
.
√xt_out
 = 
w±r
;

354 
°©e
->
°rm
.
avaû_out
 = 
w•a˚
 - (
PPP_HDRLEN
 + 2);

356 
°©e
->
°rm
.
√xt_out
 = 
NULL
;

357 
°©e
->
°rm
.
avaû_out
 = 1000000;

359 ++
°©e
->
£qno
;

361 
Ωå
 +(
¥Ÿo
 > 0xff)? 2: 3;

362 
°©e
->
°rm
.
√xt_ö
 = 
Ωå
;

363 
°©e
->
°rm
.
avaû_ö
 = 
mp
->
b_w±r
 - 
Ωå
;

364 
mp
 = mp->
b_c⁄t
;

365 
Êush
 = (
mp
 =
NULL
)? 
Z_PACKET_FLUSH
: 
Z_NO_FLUSH
;

366 
ﬁí
 = 0;

368 
r
 = 
	`deÊ©e
(&
°©e
->
°rm
, 
Êush
);

369 i‡(
r
 !
Z_OK
) {

370 
	`¥ötf
("z_compress: deflateÑeturned %d (%s)\n",

371 
r
, (
°©e
->
°rm
.
msg
? state->strm.msg: ""));

374 i‡(
Êush
 !
Z_NO_FLUSH
 && 
°©e
->
°rm
.
avaû_out
 != 0)

376 i‡(
°©e
->
°rm
.
avaû_ö
 =0 && 
mp
 !
NULL
) {

377 
°©e
->
°rm
.
√xt_ö
 = 
mp
->
b_Ωå
;

378 
°©e
->
°rm
.
avaû_ö
 = 
mp
->
b_w±r
 - mp->
b_Ωå
;

379 
mp
 = mp->
b_c⁄t
;

380 i‡(
mp
 =
NULL
)

381 
Êush
 = 
Z_PACKET_FLUSH
;

383 i‡(
°©e
->
°rm
.
avaû_out
 == 0) {

384 i‡(
m
 !
NULL
) {

385 
m
->
b_w±r
 +
w•a˚
;

386 
ﬁí
 +
w•a˚
;

387 
w•a˚
 = 
maxﬁí
 - 
ﬁí
;

388 i‡(
w•a˚
 <= 0) {

389 
w•a˚
 = 0;

390 
m
->
b_c⁄t
 = 
NULL
;

392 i‡(
w•a˚
 < 32)

393 
w•a˚
 = 32;

394 i‡(
w•a˚
 > 4096)

395 
w•a˚
 = 4096;

396 
m
->
b_c⁄t
 = 
	`Ælocb
(
w•a˚
, 
BPRI_MED
);

398 
m
 = m->
b_c⁄t
;

399 i‡(
m
 !
NULL
) {

400 
°©e
->
°rm
.
√xt_out
 = 
m
->
b_w±r
;

401 
°©e
->
°rm
.
avaû_out
 = 
w•a˚
;

404 i‡(
m
 =
NULL
) {

405 
°©e
->
°rm
.
√xt_out
 = 
NULL
;

406 
°©e
->
°rm
.
avaû_out
 = 1000000;

410 i‡(
m
 !
NULL
) {

411 
m
->
b_w±r
 +
w•a˚
 - 
°©e
->
°rm
.
avaû_out
;

412 
ﬁí
 +
w•a˚
 - 
°©e
->
°rm
.
avaû_out
;

418 i‡(
ﬁí
 < 
‹ig_Àn
 && 
m
 !
NULL
) {

419 
°©e
->
°©s
.
comp_byãs
 +
ﬁí
;

420 
°©e
->
°©s
.
comp_∑ckës
++;

422 i‡(*
mªt
 !
NULL
) {

423 
	`‰ìmsg
(*
mªt
);

424 *
mªt
 = 
NULL
;

426 
°©e
->
°©s
.
öc_byãs
 +
‹ig_Àn
;

427 
°©e
->
°©s
.
öc_∑ckës
++;

428 
ﬁí
 = 
‹ig_Àn
;

430 
°©e
->
°©s
.
unc_byãs
 +
‹ig_Àn
;

431 
°©e
->
°©s
.
unc_∑ckës
++;

433  
ﬁí
;

434 
	}
}

437 
	$z_comp_°©s
(
¨g
, 
°©s
)

438 *
¨g
;

439 
comp°©
 *
°©s
;

441 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

442 
u_öt
 
out
;

444 *
°©s
 = 
°©e
->stats;

445 
°©s
->
øtio
 = sèts->
unc_byãs
;

446 
out
 = 
°©s
->
comp_byãs
 + sèts->
unc_byãs
;

447 i‡(
°©s
->
øtio
 <= 0x7ffffff)

448 
°©s
->
øtio
 <<= 8;

450 
out
 >>= 8;

451 i‡(
out
 != 0)

452 
°©s
->
øtio
 /
out
;

453 
	}
}

459 
	$z_decomp_Æloc
(
›ti⁄s
, 
›t_Àn
)

460 
u_ch¨
 *
›ti⁄s
;

461 
›t_Àn
;

463 
deÊ©e_°©e
 *
°©e
;

464 
w_size
;

466 i‡(
›t_Àn
 !
CILEN_DEFLATE


467 || (
›ti⁄s
[0] !
CI_DEFLATE
 && o±i⁄s[0] !
CI_DEFLATE_DRAFT
)

468 || 
›ti⁄s
[1] !
CILEN_DEFLATE


469 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


470 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

471  
NULL
;

472 
w_size
 = 
	`DEFLATE_SIZE
(
›ti⁄s
[2]);

477 i‡(
w_size
 < 9 || w_sizê> 
DEFLATE_MAX_SIZE
)

478  
NULL
;

480 #ifde‡
__osf__


481 
°©e
 = (
deÊ©e_°©e
 *Ë
	`ALLOC_SLEEP
((*state));

483 
°©e
 = (
deÊ©e_°©e
 *Ë
	`ALLOC_NOSLEEP
((*state));

485 i‡(
°©e
 =
NULL
)

486  
NULL
;

488 
°©e
->
°rm
.
√xt_out
 = 
NULL
;

489 
°©e
->
°rm
.
zÆloc
 = (
Æloc_func
Ë
z_Æloc_öô
;

490 
°©e
->
°rm
.
z‰ì
 = (
‰ì_func
Ë
z_‰ì
;

491 i‡(
	`öÊ©eInô2
(&
°©e
->
°rm
, -
w_size
Ë!
Z_OK
) {

492 
	`FREE
(
°©e
, (*state));

493  
NULL
;

496 
°©e
->
°rm
.
zÆloc
 = (
Æloc_func
Ë
z_Æloc
;

497 
°©e
->
w_size
 = w_size;

498 
	`bzîo
(&
°©e
->
°©s
, (state->stats));

499  (*Ë
°©e
;

500 
	}
}

503 
	$z_decomp_‰ì
(
¨g
)

504 *
¨g
;

506 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

508 
	`öÊ©eEnd
(&
°©e
->
°rm
);

509 
	`FREE
(
°©e
, (*state));

510 
	}
}

513 
	$z_decomp_öô
(
¨g
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
)

514 *
¨g
;

515 
u_ch¨
 *
›ti⁄s
;

516 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
;

518 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

520 i‡(
›t_Àn
 < 
CILEN_DEFLATE


521 || (
›ti⁄s
[0] !
CI_DEFLATE
 && o±i⁄s[0] !
CI_DEFLATE_DRAFT
)

522 || 
›ti⁄s
[1] !
CILEN_DEFLATE


523 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


524 || 
	`DEFLATE_SIZE
(
›ti⁄s
[2]Ë!
°©e
->
w_size


525 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

528 
°©e
->
£qno
 = 0;

529 
°©e
->
unô
 = unit;

530 
°©e
->
hdæí
 = hdrlen;

531 
°©e
->
debug
 = debug;

532 
°©e
->
mru
 = mru;

534 
	`öÊ©eRe£t
(&
°©e
->
°rm
);

537 
	}
}

540 
	$z_decomp_ª£t
(
¨g
)

541 *
¨g
;

543 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

545 
°©e
->
£qno
 = 0;

546 
	`öÊ©eRe£t
(&
°©e
->
°rm
);

547 
	}
}

566 
	$z_decom¥ess
(
¨g
, 
mi
, 
m›
)

567 *
¨g
;

568 
mblk_t
 *
mi
, **
m›
;

570 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

571 
mblk_t
 *
mo
, *
mo_hód
;

572 
u_ch¨
 *
Ωå
, *
w±r
;

573 
æí
, 
ﬁí
, 
o•a˚
;

574 
£q
, 
i
, 
Êush
, 
r
, 
decode_¥Ÿo
;

575 
u_ch¨
 
hdr
[
PPP_HDRLEN
 + 
DEFLATE_OVHD
];

577 *
m›
 = 
NULL
;

578 
Ωå
 = 
mi
->
b_Ωå
;

579 
i
 = 0; i < 
PPP_HDRLEN
 + 
DEFLATE_OVHD
; ++i) {

580 
Ωå
 >
mi
->
b_w±r
) {

581 
mi
 = mi->
b_c⁄t
;

582 i‡(
mi
 =
NULL
)

583  
DECOMP_ERROR
;

584 
Ωå
 = 
mi
->
b_Ωå
;

586 
hdr
[
i
] = *
Ωå
++;

590 
£q
 = (
hdr
[
PPP_HDRLEN
] << 8) + hdr[PPP_HDRLEN+1];

591 i‡(
£q
 !
°©e
->
£qno
) {

592 #i‡!
DEFLATE_DEBUG


593 i‡(
°©e
->
debug
)

595 
	`¥ötf
("z_decompress%d: bad seq # %d,Éxpected %d\n",

596 
°©e
->
unô
, 
£q
, sèã->
£qno
);

597  
DECOMP_ERROR
;

599 ++
°©e
->
£qno
;

602 
mo
 = 
	`Ælocb
(
DECOMP_CHUNK
 + 
°©e
->
hdæí
, 
BPRI_MED
);

603 i‡(
mo
 =
NULL
)

604  
DECOMP_ERROR
;

605 
mo_hód
 = 
mo
;

606 
mo
->
b_c⁄t
 = 
NULL
;

607 
mo
->
b_Ωå
 +
°©e
->
hdæí
;

608 
mo
->
b_w±r
 = 
w±r
 = mo->
b_Ωå
;

609 
o•a˚
 = 
DECOMP_CHUNK
;

610 
ﬁí
 = 0;

616 
w±r
[0] = 
	`PPP_ADDRESS
(
hdr
);

617 
w±r
[1] = 
	`PPP_CONTROL
(
hdr
);

618 
w±r
[2] = 0;

625 
°©e
->
°rm
.
√xt_ö
 = 
Ωå
;

626 
°©e
->
°rm
.
avaû_ö
 = 
mi
->
b_w±r
 - 
Ωå
;

627 
mi
 = mi->
b_c⁄t
;

628 
Êush
 = (
mi
 =
NULL
)? 
Z_PACKET_FLUSH
: 
Z_NO_FLUSH
;

629 
æí
 = 
°©e
->
°rm
.
avaû_ö
 + 
PPP_HDRLEN
 + 
DEFLATE_OVHD
;

630 
°©e
->
°rm
.
√xt_out
 = 
w±r
 + 3;

631 
°©e
->
°rm
.
avaû_out
 = 1;

632 
decode_¥Ÿo
 = 1;

638 
r
 = 
	`öÊ©e
(&
°©e
->
°rm
, 
Êush
);

639 i‡(
r
 !
Z_OK
) {

640 #i‡!
DEFLATE_DEBUG


641 i‡(
°©e
->
debug
)

643 
	`¥ötf
("z_decompress%d: inflateÑeturned %d (%s)\n",

644 
°©e
->
unô
, 
r
, (°©e->
°rm
.
msg
? state->strm.msg: ""));

645 
	`‰ìmsg
(
mo_hód
);

646  
DECOMP_FATALERROR
;

648 i‡(
Êush
 !
Z_NO_FLUSH
 && 
°©e
->
°rm
.
avaû_out
 != 0)

650 i‡(
°©e
->
°rm
.
avaû_ö
 =0 && 
mi
 !
NULL
) {

651 
°©e
->
°rm
.
√xt_ö
 = 
mi
->
b_Ωå
;

652 
°©e
->
°rm
.
avaû_ö
 = 
mi
->
b_w±r
 - mi->
b_Ωå
;

653 
æí
 +
°©e
->
°rm
.
avaû_ö
;

654 
mi
 = mi->
b_c⁄t
;

655 i‡(
mi
 =
NULL
)

656 
Êush
 = 
Z_PACKET_FLUSH
;

658 i‡(
°©e
->
°rm
.
avaû_out
 == 0) {

659 i‡(
decode_¥Ÿo
) {

660 
°©e
->
°rm
.
avaû_out
 = 
o•a˚
 - 
PPP_HDRLEN
;

661 i‡((
w±r
[3] & 1) == 0) {

663 
w±r
[2] = wptr[3];

664 --
°©e
->
°rm
.
√xt_out
;

665 ++
°©e
->
°rm
.
avaû_out
;

667 
decode_¥Ÿo
 = 0;

669 
mo
->
b_w±r
 +
o•a˚
;

670 
ﬁí
 +
o•a˚
;

671 
mo
->
b_c⁄t
 = 
	`Ælocb
(
DECOMP_CHUNK
, 
BPRI_MED
);

672 
mo
 = mo->
b_c⁄t
;

673 i‡(
mo
 =
NULL
) {

674 
	`‰ìmsg
(
mo_hód
);

675  
DECOMP_ERROR
;

677 
°©e
->
°rm
.
√xt_out
 = 
mo
->
b_Ωå
;

678 
°©e
->
°rm
.
avaû_out
 = 
o•a˚
 = 
DECOMP_CHUNK
;

682 i‡(
decode_¥Ÿo
) {

683 
	`‰ìmsg
(
mo_hód
);

684  
DECOMP_ERROR
;

686 
mo
->
b_w±r
 +
o•a˚
 - 
°©e
->
°rm
.
avaû_out
;

687 
ﬁí
 +
o•a˚
 - 
°©e
->
°rm
.
avaû_out
;

689 #i‡
DEFLATE_DEBUG


690 i‡(
ﬁí
 > 
°©e
->
mru
 + 
PPP_HDRLEN
)

691 
	`¥ötf
("ppp_deflate%d:Éxceeded mru (%d > %d)\n",

692 
°©e
->
unô
, 
ﬁí
, sèã->
mru
 + 
PPP_HDRLEN
);

695 
°©e
->
°©s
.
unc_byãs
 +
ﬁí
;

696 
°©e
->
°©s
.
unc_∑ckës
++;

697 
°©e
->
°©s
.
comp_byãs
 +
æí
;

698 
°©e
->
°©s
.
comp_∑ckës
++;

700 *
m›
 = 
mo_hód
;

701  
DECOMP_OK
;

702 
	}
}

708 
	$z_öcomp
(
¨g
, 
mi
)

709 *
¨g
;

710 
mblk_t
 *
mi
;

712 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

713 
u_ch¨
 *
Ωå
;

714 
æí
, 
¥Ÿo
, 
r
;

719 
Ωå
 = 
mi
->
b_Ωå
;

720 i‡(
Ωå
 + 
PPP_HDRLEN
 > 
mi
->
b_w±r
) {

721 i‡(!
	`puŒupmsg
(
mi
, 
PPP_HDRLEN
))

723 
Ωå
 = 
mi
->
b_Ωå
;

725 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
Ωå
);

726 i‡(
¥Ÿo
 > 0x3fff ||Öroto == 0xfd ||Öroto == 0xfb)

729 ++
°©e
->
£qno
;

737 
æí
 = 
mi
->
b_w±r
 - mi->
b_Ωå
;

738 
°©e
->
°rm
.
√xt_ö
 = 
Ωå
 + 3;

739 
°©e
->
°rm
.
avaû_ö
 = 
æí
 - 3;

740 i‡(
¥Ÿo
 > 0xff) {

741 --
°©e
->
°rm
.
√xt_ö
;

742 ++
°©e
->
°rm
.
avaû_ö
;

745 
r
 = 
	`öÊ©eIncomp
(&
°©e
->
°rm
);

746 i‡(
r
 !
Z_OK
) {

748 #i‡!
DEFLATE_DEBUG


749 i‡(
°©e
->
debug
)

751 
	`¥ötf
("z_incomp%d: inflateIncompÑeturned %d (%s)\n",

752 
°©e
->
unô
, 
r
, (°©e->
°rm
.
msg
? state->strm.msg: ""));

755 
mi
 = mi->
b_c⁄t
;

756 i‡(
mi
 =
NULL
)

758 
°©e
->
°rm
.
√xt_ö
 = 
mi
->
b_Ωå
;

759 
°©e
->
°rm
.
avaû_ö
 = 
mi
->
b_w±r
 - mi->
b_Ωå
;

760 
æí
 +
°©e
->
°rm
.
avaû_ö
;

766 
°©e
->
°©s
.
öc_byãs
 +
æí
;

767 
°©e
->
°©s
.
öc_∑ckës
++;

768 
°©e
->
°©s
.
unc_byãs
 +
æí
;

769 
°©e
->
°©s
.
unc_∑ckës
++;

770 
	}
}

	@modules/if_ppp.c

44 
	#INET
 1

	)

46 
	~<sys/ty≥s.h
>

47 
	~<sys/∑øm.h
>

48 
	~<sys/î∫o.h
>

49 
	~<sys/mbuf.h
>

50 
	~<sys/sockë.h
>

51 
	~<√t/if.h
>

52 
	~<√t/√ti§.h
>

53 
	~<√t/µp_defs.h
>

54 
	~<√t/µpio.h
>

55 
	~<√töë/ö.h
>

56 
	~<√töë/ö_v¨.h
>

57 #ifde‡
__osf__


58 
	~<sys/io˘l.h
>

59 
	~<√t/if_ty≥s.h
>

61 
	~<sys/sockio.h
>

63 
	~"µp_mod.h
"

65 
	~<sys/°ªam.h
>

67 #ifde‡
SNIT_SUPPORT


68 
	~<sys/time.h
>

69 
	~<√t/nô_if.h
>

70 
	~<√töë/if_ëhî.h
>

73 #ifde‡
__osf__


74 
	#SIOCSIFMTU
 
SIOCSIPMTU


	)

75 
	#SIOCGIFMTU
 
SIOCRIPMTU


	)

76 
	#IFA_ADDR
(
iÁ
Ë(*(iÁ)->
iÁ_addr
)

	)

78 
	#IFA_ADDR
(
iÁ
Ë((iÁ)->
iÁ_addr
)

	)

81 
	#i‰_mtu
 
i‰_mëric


	)

83 
if_µp_›í
 
__P
((
queue_t
 *, , , ));

84 
if_µp_˛o£
 
__P
((
queue_t
 *, ));

85 
if_µp_wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

86 
if_µp_Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

88 
	#PPP_IF_ID
 0x8021

	)

89 
moduÀ_öfo
 
	gmöfo
 = {

90 
PPP_IF_ID
, "if_µp", 0, 
INFPSZ
, 4096, 128

93 
qöô
 
	gröô
 = {

94 
if_µp_Ωut
, 
NULL
, 
if_µp_›í
, 
if_µp_˛o£
, NULL, &
möfo
, NULL

97 
qöô
 
	gwöô
 = {

98 
if_µp_wput
, 
NULL
, NULL, NULL, NULL, &
möfo
, NULL

101 
°ªamèb
 
	gif_µpöfo
 = {

102 &
röô
, &
wöô
, 
NULL
, NULL

105 
	sif_µp_°©e
 {

106 
	munô
;

107 
queue_t
 *
	mq
;

108 
	mÊags
;

109 } 
	tif_µp_t
;

112 
	#DBGLOG
 1

	)

114 
	gif_µp_cou¡
;

116 
	gµp_«Œoc
;

117 
i‚ë
 **
	gifs
;

118 
if_µp_t
 **
	g°©es
;

120 
if_µp_ouçut
 
__P
((
i‚ë
 *, 
mbuf
 *,

121 
sockaddr
 *));

122 
if_µp_io˘l
 
__P
((
i‚ë
 *, 
u_öt
, 
ˇddr_t
));

123 
mbuf
 *
make_mbufs
 
__P
((
mblk_t
 *, ));

124 
mblk_t
 *
make_mesßge
 
__P
((
mbuf
 *, ));

126 #ifde‡
SNIT_SUPPORT


128 
ëhî_hódî
 
	g¢ô_ehdr
 = {{0}, {0}, 
ETHERTYPE_IP
};

131 #i‚de‡
__osf__


132 
µp_if_dëach
 
__P
((
i‚ë
 *));

139 
	$if_µp_u∆ﬂd
()

141 
i
;

143 i‡(
if_µp_cou¡
 > 0)

144  
EBUSY
;

145 
i
 = 0; i < 
µp_«Œoc
; ++i)

146 i‡(
ifs
[
i
] != 0)

147 
	`µp_if_dëach
(
ifs
[
i
]);

148 i‡(
ifs
) {

149 
	`FREE
(
ifs
, 
µp_«Œoc
 *  (
i‚ë
 *));

150 
	`FREE
(
°©es
, 
µp_«Œoc
 *  (
if_µp_t
 *));

152 
µp_«Œoc
 = 0;

154 
	}
}

161 
	$if_µp_›í
(
q
, 
dev
, 
Êag
, 
sÊag
)

162 
queue_t
 *
q
;

163 
dev
;

164 
Êag
, 
sÊag
;

166 
if_µp_t
 *
•
;

168 i‡(
q
->
q_±r
 == 0) {

169 
•
 = (
if_µp_t
 *Ë
	`ALLOC_SLEEP
( (if_ppp_t));

170 i‡(
•
 == 0)

171  
OPENFAIL
;

172 
	`bzîo
(
•
,  (
if_µp_t
));

173 
q
->
q_±r
 = (
ˇddr_t
Ë
•
;

174 
	`WR
(
q
)->
q_±r
 = (
ˇddr_t
Ë
•
;

175 
•
->
unô
 = -1;

176 
•
->
q
 = 
	`WR
(q);

177 
•
->
Êags
 = 0;

178 ++
if_µp_cou¡
;

181 
	}
}

184 
	$if_µp_˛o£
(
q
, 
Êag
)

185 
queue_t
 *
q
;

186 
Êag
;

188 
if_µp_t
 *
•
;

189 
i‚ë
 *
iÂ
;

191 
•
 = (
if_µp_t
 *Ë
q
->
q_±r
;

192 i‡(
•
 != 0) {

193 i‡(
•
->
Êags
 & 
DBGLOG
)

194 
	`¥ötf
("if_µ∞˛o£d, q=%x sp=%x\n", 
q
, 
•
);

195 i‡(
•
->
unô
 >= 0) {

196 i‡(
•
->
unô
 < 
µp_«Œoc
) {

197 
°©es
[
•
->
unô
] = 0;

198 
iÂ
 = 
ifs
[
•
->
unô
];

199 i‡(
iÂ
 != 0)

200 
iÂ
->
if_Êags
 &~(
IFF_UP
 | 
IFF_RUNNING
);

201 #ifde‡
DEBUG


203 
	`¥ötf
("if_µp: unô %dÇ⁄exi°ít!\n", 
•
->
unô
);

207 
	`FREE
(
•
,  (
if_µp_t
));

208 --
if_µp_cou¡
;

211 
	}
}

214 
	$if_µp_wput
(
q
, 
mp
)

215 
queue_t
 *
q
;

216 
mblk_t
 *
mp
;

218 
if_µp_t
 *
•
;

219 
iocblk
 *
i›
;

220 
îr‹
, 
unô
;

221 
i‚ë
 *
iÂ
;

223 
•
 = (
if_µp_t
 *Ë
q
->
q_±r
;

224 
mp
->
b_d©≠
->
db_ty≥
) {

225 
M_DATA
:

229 i‡(
•
->
Êags
 & 
DBGLOG
)

230 
	`¥ötf
("if_µp: gŸ M_DATAÜí=%d\n", 
	`msgdsize
(
mp
));

231 
	`‰ìmsg
(
mp
);

234 
M_IOCTL
:

235 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

236 
îr‹
 = 
EINVAL
;

238 i‡(
•
->
Êags
 & 
DBGLOG
)

239 
	`¥ötf
("if_ppp: got ioctl cmd=%x count=%d\n",

240 
i›
->
ioc_cmd
, i›->
ioc_cou¡
);

242 
i›
->
ioc_cmd
) {

243 
PPPIO_NEWPPA
:

244 i‡(
i›
->
ioc_cou¡
 !(Ë|| 
•
->
unô
 >= 0)

246 i‡((
îr‹
 = 
	`NOTSUSER
()) != 0)

248 
unô
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

251 i‡(
unô
 < 
µp_«Œoc
 && 
°©es
[unit] != 0) {

252 
îr‹
 = 
EADDRINUSE
;

257 
îr‹
 = 
ENOSR
;

258 i‡(
unô
 >
µp_«Œoc
) {

259 
√wn
;

260 
i‚ë
 **
√wifs
;

261 
if_µp_t
 **
√w°©es
;

263 
√wn
 = 
unô
 + 4;

264 i‡(
•
->
Êags
 & 
DBGLOG
)

265 
	`¥ötf
("if_µp:Éxãndög if†tÿ%d\n", 
√wn
);

266 
√wifs
 = (
i‚ë
 **)

267 
	`ALLOC_NOSLEEP
(
√wn
 *  (
i‚ë
 *));

268 i‡(
√wifs
 == 0)

270 
	`bzîo
(
√wifs
, 
√wn
 *  (
i‚ë
 *));

271 
√w°©es
 = (
if_µp_t
 **)

272 
	`ALLOC_NOSLEEP
(
√wn
 *  (
if_µp_t
 *));

273 i‡(
√w°©es
 == 0) {

274 
	`FREE
(
√wifs
, 
√wn
 *  (
i‚ë
 *));

277 
	`bzîo
(
√w°©es
, 
√wn
 *  (
if_µp_t
 *));

278 
	`bc›y
(
ifs
, 
√wifs
, 
µp_«Œoc
 * (
i‚ë
 *));

279 
	`bc›y
(
°©es
, 
√w°©es
, 
µp_«Œoc
 * (
if_µp_t
 *));

280 i‡(
ifs
) {

281 
	`FREE
(
ifs
, 
µp_«Œoc
 * (
i‚ë
 *));

282 
	`FREE
(
°©es
, 
µp_«Œoc
 * (
if_µp_t
 *));

284 
ifs
 = 
√wifs
;

285 
°©es
 = 
√w°©es
;

286 
µp_«Œoc
 = 
√wn
;

290 
iÂ
 = 
ifs
[
unô
];

291 i‡(
iÂ
 == 0) {

292 
iÂ
 = (
i‚ë
 *Ë
	`ALLOC_NOSLEEP
( (ifnet));

293 i‡(
iÂ
 == 0)

295 
	`bzîo
(
iÂ
,  (
i‚ë
));

296 
ifs
[
unô
] = 
iÂ
;

297 
iÂ
->
if_«me
 = "ppp";

298 
iÂ
->
if_unô
 = 
unô
;

299 
iÂ
->
if_mtu
 = 
PPP_MTU
;

300 
iÂ
->
if_Êags
 = 
IFF_POINTOPOINT
 | 
IFF_RUNNING
;

301 #i‚de‡
__osf__


302 #ifde‡
IFF_MULTICAST


303 
iÂ
->
if_Êags
 |
IFF_MULTICAST
;

306 
iÂ
->
if_ouçut
 = 
if_µp_ouçut
;

307 #ifde‡
__osf__


308 
iÂ
->
if_vîsi⁄
 = "Point-to-Point Protocol, version 2.3.11";

309 
iÂ
->
if_medümtu
 = 
PPP_MTU
;

310 
iÂ
->
if_ty≥
 = 
IFT_PPP
;

311 
iÂ
->
if_hdæí
 = 
PPP_HDRLEN
;

312 
iÂ
->
if_addæí
 = 0;

313 
iÂ
->
if_Êags
 |
IFF_NOARP
 | 
IFF_SIMPLEX
 | 
IFF_NOTRAILERS
;

314 #ifde‡
IFF_VAR_MTU


315 
iÂ
->
if_Êags
 |
IFF_VAR_MTU
;

317 #ifde‡
NETMASTERCPU


318 
iÂ
->
if_afföôy
 = 
NETMASTERCPU
;

321 
iÂ
->
if_io˘l
 = 
if_µp_io˘l
;

322 
iÂ
->
if_¢d
.
ifq_maxÀn
 = 
IFQ_MAXLEN
;

323 
	`if_©èch
(
iÂ
);

324 i‡(
•
->
Êags
 & 
DBGLOG
)

325 
	`¥ötf
("if_µp: cª©ed unô %d\n", 
unô
);

327 
iÂ
->
if_mtu
 = 
PPP_MTU
;

328 
iÂ
->
if_Êags
 |
IFF_RUNNING
;

331 
°©es
[
unô
] = 
•
;

332 
•
->
unô
 = unit;

334 
îr‹
 = 0;

335 
i›
->
ioc_cou¡
 = 0;

336 i‡(
•
->
Êags
 & 
DBGLOG
)

337 
	`¥ötf
("if_µp:áâached unô %d, sp=%x q=%x\n", 
unô
,

338 
•
, sp->
q
);

341 
PPPIO_DEBUG
:

342 
îr‹
 = -1;

343 i‡(
i›
->
ioc_cou¡
 == ()) {

344 i‡(*(*)
mp
->
b_c⁄t
->
b_Ωå
 =
PPPDBG_LOG
 + 
PPPDBG_IF
) {

345 
	`¥ötf
("if_µp: debugÜogÉ«bÀd, q=%x sp=%x\n", 
q
, 
•
);

346 
•
->
Êags
 |
DBGLOG
;

347 
îr‹
 = 0;

348 
i›
->
ioc_cou¡
 = 0;

354 
îr‹
 = -1;

358 i‡(
•
->
Êags
 & 
DBGLOG
)

359 
	`¥ötf
("if_µp: io˘»ªsu… %d\n", 
îr‹
);

360 i‡(
îr‹
 < 0)

361 
	`puäext
(
q
, 
mp
);

362 i‡(
îr‹
 == 0) {

363 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

364 
	`qª∂y
(
q
, 
mp
);

366 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

367 
i›
->
ioc_cou¡
 = 0;

368 
i›
->
ioc_îr‹
 = 
îr‹
;

369 
	`qª∂y
(
q
, 
mp
);

374 
	`puäext
(
q
, 
mp
);

377 
	}
}

380 
	$if_µp_Ωut
(
q
, 
mp
)

381 
queue_t
 *
q
;

382 
mblk_t
 *
mp
;

384 
if_µp_t
 *
•
;

385 
¥Ÿo
, 
s
;

386 
mbuf
 *
mb
;

387 
ifqueue
 *
öq
;

388 
i‚ë
 *
iÂ
;

389 
Àn
;

391 
•
 = (
if_µp_t
 *Ë
q
->
q_±r
;

392 
mp
->
b_d©≠
->
db_ty≥
) {

393 
M_DATA
:

398 i‡(
•
->
Êags
 & 
DBGLOG
)

399 
	`¥ötf
("if_ppp:ÑputÖktÜen %d data %x %x %x %x %x %x %x %x\n",

400 
	`msgdsize
(
mp
), mp->
b_Ωå
[0], mp->b_rptr[1], mp->b_rptr[2],

401 
mp
->
b_Ωå
[3], mp->b_rptr[4], mp->b_rptr[5], mp->b_rptr[6],

402 
mp
->
b_Ωå
[7]);

404 i‡(
•
->
unô
 < 0) {

405 
	`‰ìmsg
(
mp
);

408 i‡(
•
->
unô
 >
µp_«Œoc
 || (
iÂ
 = 
ifs
[sp->unit]) == 0) {

409 #ifde‡
DEBUG


410 
	`¥ötf
("if_µp:Çÿunô %d!\n", 
•
->
unô
);

412 
	`‰ìmsg
(
mp
);

416 i‡((
iÂ
->
if_Êags
 & 
IFF_UP
) == 0) {

417 
	`‰ìmsg
(
mp
);

420 ++
iÂ
->
if_ùackës
;

422 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

423 
	`adjmsg
(
mp
, 
PPP_HDRLEN
);

424 
Àn
 = 
	`msgdsize
(
mp
);

425 
mb
 = 
	`make_mbufs
(
mp
, (
i‚ë
 *));

426 
	`‰ìmsg
(
mp
);

427 i‡(
mb
 =
NULL
) {

428 i‡(
•
->
Êags
 & 
DBGLOG
)

429 
	`¥ötf
("if_µp%d: make_mbuf†Áûed\n", 
iÂ
->
if_unô
);

430 ++
iÂ
->
if_õº‹s
;

434 #ifde‡
SNIT_SUPPORT


435 i‡(
¥Ÿo
 =
PPP_IP
 && (
iÂ
->
if_Êags
 & 
IFF_PROMISC
)) {

436 
nô_if
 
nif
;

438 
nif
.
nif_hódî
 = (
ˇddr_t
Ë&
¢ô_ehdr
;

439 
nif
.
nif_hdæí
 = (
¢ô_ehdr
);

440 
nif
.
nif_bodyÀn
 = 
Àn
;

441 
nif
.
nif_¥omisc
 = 0;

442 
	`¢ô_öå
(
iÂ
, 
mb
, &
nif
);

452 #ifde‡
__osf__


453 
mb
->
m_pkthdr
.
rcvif
 = 
iÂ
;

454 
mb
->
m_pkthdr
.
Àn
 =Üen;

456 
mb
->
m_off
 -(
i‚ë
 *);

457 
mb
->
m_Àn
 +(
i‚ë
 *);

458 *
	`mtod
(
mb
, 
i‚ë
 **Ë
iÂ
;

461 
öq
 = 0;

462 
¥Ÿo
) {

463 
PPP_IP
:

464 
öq
 = &
ùöåq
;

465 
	`sched√ti§
(
NETISR_IP
);

468 i‡(
öq
 != 0) {

469 
s
 = 
	`•lhigh
();

470 i‡(
	`IF_QFULL
(
öq
)) {

471 
	`IF_DROP
(
öq
);

472 ++
iÂ
->
if_õº‹s
;

473 i‡(
•
->
Êags
 & 
DBGLOG
)

474 
	`¥ötf
("if_µp: inq fuŒ,ÖrŸo=%x\n", 
¥Ÿo
);

475 
	`m_‰ìm
(
mb
);

477 
	`IF_ENQUEUE
(
öq
, 
mb
);

479 
	`•lx
(
s
);

481 i‡(
•
->
Êags
 & 
DBGLOG
)

482 
	`¥ötf
("if_µp%d:ÖrŸo=%x?\n", 
iÂ
->
if_unô
, 
¥Ÿo
);

483 ++
iÂ
->
if_õº‹s
;

484 
	`m_‰ìm
(
mb
);

489 
	`puäext
(
q
, 
mp
);

492 
	}
}

499 
	$if_µp_ouçut
(
iÂ
, 
m0
, 
d°
)

500 
i‚ë
 *
iÂ
;

501 
mbuf
 *
m0
;

502 
sockaddr
 *
d°
;

504 
mblk_t
 *
mp
;

505 
¥Ÿo
, 
s
;

506 
if_µp_t
 *
•
;

507 
u_ch¨
 *
p
;

509 i‡((
iÂ
->
if_Êags
 & 
IFF_UP
) == 0) {

510 
	`m_‰ìm
(
m0
);

511  
ENETDOWN
;

514 i‡(()
iÂ
->
if_unô
 >
µp_«Œoc
) {

515 #ifde‡
DEBUG


516 
	`¥ötf
("if_µp_ouçut: unô %d?\n", 
iÂ
->
if_unô
);

518 
	`m_‰ìm
(
m0
);

519  
EINVAL
;

521 
•
 = 
°©es
[
iÂ
->
if_unô
];

522 i‡(
•
 == 0) {

523 #ifde‡
DEBUG


524 
	`¥ötf
("if_ppp_output:Ço queue?\n");

526 
	`m_‰ìm
(
m0
);

527  
ENETDOWN
;

530 i‡(
•
->
Êags
 & 
DBGLOG
) {

531 
p
 = 
	`mtod
(
m0
, 
u_ch¨
 *);

532 
	`¥ötf
("if_ppp_output%d:áf=%d data=%x %x %x %x %x %x %x %x q=%x\n",

533 
iÂ
->
if_unô
, 
d°
->
ß_Ámûy
, 
p
[0],Ö[1],Ö[2],Ö[3],Ö[4],

534 
p
[5],Ö[6],Ö[7], 
•
->
q
);

537 
d°
->
ß_Ámûy
) {

538 
AF_INET
:

539 
¥Ÿo
 = 
PPP_IP
;

540 #ifde‡
SNIT_SUPPORT


541 i‡(
iÂ
->
if_Êags
 & 
IFF_PROMISC
) {

542 
nô_if
 
nif
;

543 
mbuf
 *
m
;

544 
Àn
;

546 
Àn
 = 0, 
m
 = 
m0
; m !
NULL
; m = m->
m_√xt
)

547 
Àn
 +
m
->
m_Àn
;

548 
nif
.
nif_hódî
 = (
ˇddr_t
Ë&
¢ô_ehdr
;

549 
nif
.
nif_hdæí
 = (
¢ô_ehdr
);

550 
nif
.
nif_bodyÀn
 = 
Àn
;

551 
nif
.
nif_¥omisc
 = 0;

552 
	`¢ô_öå
(
iÂ
, 
m0
, &
nif
);

558 
	`m_‰ìm
(
m0
);

559  
EAFNOSUPPORT
;

562 ++
iÂ
->
if_›ackës
;

563 
mp
 = 
	`make_mesßge
(
m0
, 
PPP_HDRLEN
);

564 
	`m_‰ìm
(
m0
);

565 i‡(
mp
 == 0) {

566 ++
iÂ
->
if_€º‹s
;

567  
ENOBUFS
;

569 
mp
->
b_Ωå
 -
PPP_HDRLEN
;

570 
mp
->
b_Ωå
[0] = 
PPP_ALLSTATIONS
;

571 
mp
->
b_Ωå
[1] = 
PPP_UI
;

572 
mp
->
b_Ωå
[2] = 
¥Ÿo
 >> 8;

573 
mp
->
b_Ωå
[3] = 
¥Ÿo
;

575 
s
 = 
	`•l°r
();

576 i‡(
•
->
Êags
 & 
DBGLOG
)

577 
	`¥ötf
("if_ppp:Öutnext(%x, %x),Ñ=%x w=%xÖ=%x\n",

578 
•
->
q
, 
mp
, mp->
b_Ωå
, mp->
b_w±r
, 
¥Ÿo
);

579 
	`puäext
(
•
->
q
, 
mp
);

580 
	`•lx
(
s
);

583 
	}
}

589 
	$if_µp_io˘l
(
iÂ
, 
cmd
, 
d©a
)

590 
i‚ë
 *
iÂ
;

591 
u_öt
 
cmd
;

592 
ˇddr_t
 
d©a
;

594 
s
, 
îr‹
;

595 
i‰eq
 *
i‰
 = (i‰eq *Ë
d©a
;

596 
iÁddr
 *
iÁ
 = (iÁdd∏*Ë
d©a
;

597 
u_sh‹t
 
mtu
;

599 
îr‹
 = 0;

600 
s
 = 
	`•limp
();

601 
cmd
) {

602 
SIOCSIFFLAGS
:

603 i‡((
iÂ
->
if_Êags
 & 
IFF_RUNNING
) == 0)

604 
iÂ
->
if_Êags
 &~
IFF_UP
;

607 
SIOCSIFADDR
:

608 i‡(
	`IFA_ADDR
(
iÁ
).
ß_Ámûy
 !
AF_INET
)

609 
îr‹
 = 
EAFNOSUPPORT
;

612 
SIOCSIFDSTADDR
:

613 i‡(
	`IFA_ADDR
(
iÁ
).
ß_Ámûy
 !
AF_INET
)

614 
îr‹
 = 
EAFNOSUPPORT
;

617 
SIOCSIFMTU
:

618 i‡((
îr‹
 = 
	`NOTSUSER
()) != 0)

620 #ifde‡
__osf__


625 
	`bc›y
(
i‰
->
i‰_d©a
, &
mtu
,  (
u_sh‹t
));

626 
i‰
->
i‰_mtu
 = 
mtu
;

629 i‡(
i‰
->
i‰_mtu
 < 
PPP_MINMTU
 || i‰->i‰_mtu > 
PPP_MAXMTU
) {

630 
îr‹
 = 
EINVAL
;

633 
iÂ
->
if_mtu
 = 
i‰
->
i‰_mtu
;

636 
SIOCGIFMTU
:

637 
i‰
->
i‰_mtu
 = 
iÂ
->
if_mtu
;

640 
SIOCADDMULTI
:

641 
SIOCDELMULTI
:

642 
i‰
->
i‰_addr
.
ß_Ámûy
) {

643 
AF_INET
:

646 
îr‹
 = 
EAFNOSUPPORT
;

652 
îr‹
 = 
EINVAL
;

654 
	`•lx
(
s
);

655  (
îr‹
);

656 
	}
}

661 
mbuf
 *

662 
	$make_mbufs
(
mp
, 
off
)

663 
mblk_t
 *
mp
;

664 
off
;

666 
mbuf
 *
hód
, **
¥evp
, *
m
;

667 
Àn
, 
•a˚
, 
n
;

668 *
˝
, *
dp
;

670 
Àn
 = 
	`msgdsize
(
mp
);

671 i‡(
Àn
 == 0)

673 
¥evp
 = &
hód
;

674 
•a˚
 = 0;

675 
˝
 = 
mp
->
b_Ωå
;

676 #ifde‡
__osf__


677 
	`MGETHDR
(
m
, 
M_DONTWAIT
, 
MT_DATA
);

678 
m
->
m_Àn
 = 0;

679 
•a˚
 = 
MHLEN
;

680 *
¥evp
 = 
m
;

681 
¥evp
 = &
m
->
m_√xt
;

682 
dp
 = 
	`mtod
(
m
, *);

683 
Àn
 -
•a˚
;

684 
off
 = 0;

687 
˝
 >
mp
->
b_w±r
) {

688 
mp
 = mp->
b_c⁄t
;

689 i‡(
mp
 == 0) {

690 *
¥evp
 = 0;

691  
hód
;

693 
˝
 = 
mp
->
b_Ωå
;

695 
n
 = 
mp
->
b_w±r
 - 
˝
;

696 i‡(
•a˚
 == 0) {

697 
	`MGET
(
m
, 
M_DONTWAIT
, 
MT_DATA
);

698 *
¥evp
 = 
m
;

699 i‡(
m
 == 0) {

700 i‡(
hód
 != 0)

701 
	`m_‰ìm
(
hód
);

704 i‡(
Àn
 + 
off
 > 2 * 
MLEN
) {

705 #ifde‡
__osf__


706 
	`MCLGET
(
m
, 
M_DONTWAIT
);

708 
	`MCLGET
(
m
);

711 #ifde‡
__osf__


712 
•a˚
 = ((
m
->
m_Êags
 & 
M_EXT
Ë? 
MCLBYTES
 : 
MLEN
);

714 
•a˚
 = (
m
->
m_off
 > 
MMAXOFF
? 
MCLBYTES
: 
MLEN
Ë- 
off
;

715 
m
->
m_off
 +
off
;

717 
m
->
m_Àn
 = 0;

718 
Àn
 -
•a˚
;

719 
dp
 = 
	`mtod
(
m
, *);

720 
off
 = 0;

721 
¥evp
 = &
m
->
m_√xt
;

723 i‡(
n
 > 
•a˚
)

724 
n
 = 
•a˚
;

725 
	`bc›y
(
˝
, 
dp
, 
n
);

726 
˝
 +
n
;

727 
dp
 +
n
;

728 
•a˚
 -
n
;

729 
m
->
m_Àn
 +
n
;

731 
	}
}

736 
	#ALLOCB_MAX
 4096

	)

738 
mblk_t
 *

739 
	$make_mesßge
(
m
, 
off
)

740 
mbuf
 *
m
;

741 
off
;

743 
mblk_t
 *
hód
, **
¥evp
, *
mp
;

744 
Àn
, 
•a˚
, 
n
, 
nb
;

745 *
˝
, *
dp
;

746 
mbuf
 *
nm
;

748 
Àn
 = 0;

749 
nm
 = 
m
;Çm !0;Çm =Çm->
m_√xt
)

750 
Àn
 +
nm
->
m_Àn
;

751 
¥evp
 = &
hód
;

752 
•a˚
 = 0;

753 
˝
 = 
	`mtod
(
m
, *);

754 
nb
 = 
m
->
m_Àn
;

756 
nb
 <= 0) {

757 
m
 = m->
m_√xt
;

758 i‡(
m
 == 0) {

759 *
¥evp
 = 0;

760  
hód
;

762 
˝
 = 
	`mtod
(
m
, *);

763 
nb
 = 
m
->
m_Àn
;

765 i‡(
•a˚
 == 0) {

766 
•a˚
 = 
Àn
 + 
off
;

767 i‡(
•a˚
 > 
ALLOCB_MAX
)

768 
•a˚
 = 
ALLOCB_MAX
;

769 
mp
 = 
	`Ælocb
(
•a˚
, 
BPRI_LO
);

770 *
¥evp
 = 
mp
;

771 i‡(
mp
 == 0) {

772 i‡(
hód
 != 0)

773 
	`‰ìmsg
(
hód
);

776 
dp
 = 
mp
->
b_Ωå
 +
off
;

777 
•a˚
 -
off
;

778 
Àn
 -
•a˚
;

779 
off
 = 0;

780 
¥evp
 = &
mp
->
b_c⁄t
;

782 
n
 = 
nb
 < 
•a˚
?Çb: space;

783 
	`bc›y
(
˝
, 
dp
, 
n
);

784 
˝
 +
n
;

785 
dp
 +
n
;

786 
nb
 -
n
;

787 
•a˚
 -
n
;

788 
mp
->
b_w±r
 = 
dp
;

790 
	}
}

801 #i‚de‡
__osf__


807 
	~<√t/rouã.h
>

808 
	~<√töë/ö_pcb.h
>

809 
	~<√töë/ù_v¨.h
>

810 
	~<√töë/t˝.h
>

811 
	~<√töë/t˝_timî.h
>

812 
	~<√töë/t˝_v¨.h
>

813 
	~<√töë/udp.h
>

814 
	~<√töë/udp_v¨.h
>

817 
	$µp_if_dëach
(
iÂ
)

818 
i‚ë
 *
iÂ
;

820 
s
;

821 
öpcb
 *
pcb
;

822 
iÁddr
 *
iÁ
;

823 
ö_iÁddr
 **
ö≠
;

824 
i‚ë
 **
iÂp
;

826 
s
 = 
	`•lhigh
();

832 
pcb
 = 
tcb
.
öp_√xt
;Öcb != &tcb;Öcb =Öcb->inp_next)

833 i‡(
pcb
->
öp_rouã
.
ro_π
 &&Öcb->öp_rouã.ro_π->
π_iÂ
 =
iÂ
)

834 
	`ö_losög
(
pcb
);

835 
pcb
 = 
udb
.
öp_√xt
;Öcb != &udb;Öcb =Öcb->inp_next)

836 i‡(
pcb
->
öp_rouã
.
ro_π
 &&Öcb->öp_rouã.ro_π->
π_iÂ
 =
iÂ
)

837 
	`ö_losög
(
pcb
);

842 
iÁ
 = 
iÂ
->
if_addæi°
; iÁ !0; iÁ = iÁ->
iÁ_√xt
) {

843 
	`πöô
(
iÁ
, iÁ, 
SIOCDELRT
, 
RTF_HOST
);

844 
	`πöô
(
iÁ
, iÁ, 
SIOCDELRT
, 0);

850 
ö≠
 = &
ö_iÁddr
; *inap != 0; ) {

851 i‡((*
ö≠
)->
ü_iÁ
.
iÁ_iÂ
 =
iÂ
)

852 *
ö≠
 = (*ö≠)->
ü_√xt
;

854 
ö≠
 = &(*ö≠)->
ü_√xt
;

860 
iÂp
 = &
i‚ë
; (*ifpp) != 0; ) {

861 i‡(*
iÂp
 =
iÂ
)

863 
iÂp
 = &(*iÂp)->
if_√xt
;

865 i‡(*
iÂp
 == 0)

866 
	`¥ötf
("couldn'àföd i¡îÁ˚Öµ%d i¿i‚ëÜi°\n", 
iÂ
->
if_unô
);

868 *
iÂp
 = 
iÂ
->
if_√xt
;

870 
	`•lx
(
s
);

871 
	}
}

	@modules/ppp.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/∑øm.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/°ªam.h
>

46 
	~<sys/°r›ts.h
>

47 
	~<sys/î∫o.h
>

48 #ifde‡
__osf__


49 
	~<sys/io˘l.h
>

50 
	~<sys/cmn_îr.h
>

51 
	#que˛ass
(
mp
Ë((mp)->
b_b™d
 & 
QPCTL
)

	)

53 
	~<sys/ioccom.h
>

55 
	~<sys/time.h
>

56 #ifde‡
SVR4


57 
	~<sys/cmn_îr.h
>

58 
	~<sys/c⁄f.h
>

59 
	~<sys/dÕi.h
>

60 
	~<sys/ddi.h
>

61 #ifde‡
SOL2


62 
	~<sys/ksynch.h
>

63 
	~<sys/k°©.h
>

64 
	~<sys/sunddi.h
>

65 
	~<sys/ëhî√t.h
>

67 
	~<sys/sockë.h
>

68 
	~<sys/sockio.h
>

69 
	~<√t/if.h
>

70 
	~<√töë/ö.h
>

73 
	~<sys/u£r.h
>

75 
	~<√t/µp_defs.h
>

76 
	~<√t/µpio.h
>

77 
	~"µp_mod.h
"

83 #ifde‡
PRIOQ


86 
	~<√töë/ö.h
>

88 #ifde‡
__STDC__


89 
	#__P
(
x
Ë
	)
x

91 
	#__P
(
x
Ë()

	)

97 #i‚de‡
ETHERTYPE_IP


98 
	#ETHERTYPE_IP
 0x800

	)

101 #i‡!
deföed
(
ETHERTYPE_IPV6
)

102 
	#ETHERTYPE_IPV6
 0x86dd

	)

105 #i‡!
deföed
(
ETHERTYPE_ALLSAP
Ë&& deföed(
SOL2
)

106 
	#ETHERTYPE_ALLSAP
 0

	)

109 #i‡!
deföed
(
PPP_ALLSAP
Ë&& deföed(
SOL2
)

110 
	#PPP_ALLSAP
 
PPP_ALLSTATIONS


	)

113 
time_t
 
time
;

115 #ifde‡
SOL2


122 
krwlock_t
 
	gµp_lowî_lock
;

123 
	#LOCK_LOWER_W
 
	`rw_íãr
(&
µp_lowî_lock
, 
RW_WRITER
)

	)

124 
	#LOCK_LOWER_R
 
	`rw_íãr
(&
µp_lowî_lock
, 
RW_READER
)

	)

125 
	#TRYLOCK_LOWER_R
 
	`rw_åyíãr
(&
µp_lowî_lock
, 
RW_READER
)

	)

126 
	#UNLOCK_LOWER
 
	`rw_exô
(&
µp_lowî_lock
)

	)

128 
	#MT_ENTER
(
x
Ë
	`muãx_íãr
(x)

	)

129 
	#MT_EXIT
(
x
Ë
	`muãx_exô
(x)

	)

161 
	#LOCK_LOWER_W
 0

	)

162 
	#LOCK_LOWER_R
 0

	)

163 
	#TRYLOCK_LOWER_R
 1

	)

164 
	#UNLOCK_LOWER
 0

	)

165 
	#MT_ENTER
(
x
Ë0

	)

166 
	#MT_EXIT
(
x
Ë0

	)

173 
	suµî°r
 {

174 
mö‹_t
 
	mmn
;

175 
uµî°r
 *
	m√xtmn
;

176 
queue_t
 *
	mq
;

177 
	mÊags
;

178 
	m°©e
;

179 
	mßp
;

180 
	mªq_ßp
;

181 
uµî°r
 *
	mµa
;

182 
uµî°r
 *
	m√xt
;

183 
uöt
 
	mioc_id
;

184 
NPmode
 
	m≈mode
;

185 
	mrblocked
;

191 
	mµa_id
;

192 
queue_t
 *
	mlowîq
;

193 
uµî°r
 *
	m√xç∑
;

194 
	mmru
;

195 
	mmtu
;

196 
µp°©
 
	m°©s
;

197 
time_t
 
	mœ°_£¡
;

198 
time_t
 
	mœ°_ªcv
;

199 #ifde‡
SOL2


200 
kmuãx_t
 
	m°©s_lock
;

201 
k°©_t
 *
	mk°©s
;

203 #ifde‡
LACHTCP


204 
	mifÊags
;

205 
	mi‚ame
[
IFNAMSIZ
];

206 
if°©s
 
	mif°©s
;

208 } 
	tuµî°r_t
;

211 
	#US_PRIV
 1

	)

212 
	#US_CONTROL
 2

	)

213 
	#US_BLOCKED
 4

	)

214 
	#US_LASTMOD
 8

	)

215 
	#US_DBGLOG
 0x10

	)

216 
	#US_RBLOCKED
 0x20

	)

218 #i‡
deföed
(
SOL2
)

219 #i‡
DL_CURRENT_VERSION
 >= 2

220 
	#US_PROMISC
 0x40

	)

222 
	#US_RAWDATA
 0x80

	)

225 #ifde‡
PRIOQ


226 
u_ch¨
 
	gmax_b™d
=0;

227 
u_ch¨
 
	gdef_b™d
=0;

229 
	#IPPORT_DEFAULT
 65535

	)

241 
u_sh‹t
 
	g¥ioq_èbÀ
[]= {

246 
IPPORT_DEFAULT
, 0,

253 
uµî°r_t
 *
	gmö‹_devs
 = 
NULL
;

254 
uµî°r_t
 *
	gµas
 = 
NULL
;

256 #ifde‡
SVR4


257 
µp›í
 
__P
((
queue_t
 *, 
dev_t
 *, , , 
¸ed_t
 *));

258 
µp˛o£
 
__P
((
queue_t
 *, , 
¸ed_t
 *));

260 
µp›í
 
__P
((
queue_t
 *, , , ));

261 
µp˛o£
 
__P
((
queue_t
 *, ));

263 
µpuΩut
 
__P
((
queue_t
 *, 
mblk_t
 *));

264 
µpuwput
 
__P
((
queue_t
 *, 
mblk_t
 *));

265 
µpur§v
 
__P
((
queue_t
 *));

266 
µpuw§v
 
__P
((
queue_t
 *));

267 
µ∂Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

268 
µ∂wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

269 
µ∂r§v
 
__P
((
queue_t
 *));

270 
µ∂w§v
 
__P
((
queue_t
 *));

271 #i‚de‡
NO_DLPI


272 
dÕi_ªque°
 
__P
((
queue_t
 *, 
mblk_t
 *, 
uµî°r_t
 *));

273 
dÕi_îr‹
 
__P
((
queue_t
 *, 
uµî°r_t
 *, , , ));

274 
dÕi_ok
 
__P
((
queue_t
 *, ));

276 
£nd_d©a
 
__P
((
mblk_t
 *, 
uµî°r_t
 *));

277 
√w_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

278 
©èch_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

279 
dëach_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

280 
dëach_lowî
 
__P
((
queue_t
 *, 
mblk_t
 *));

281 
debug_dump
 
__P
((
queue_t
 *, 
mblk_t
 *));

282 
uµî°r_t
 *
föd_de°
 
__P
((upperstr_t *, ));

283 #i‡
deföed
(
SOL2
)

284 
uµî°r_t
 *
föd_¥omisc
 
__P
((upperstr_t *, ));

285 
mblk_t
 *
¥ïíd_ëhî
 
__P
((
uµî°r_t
 *, mblk_t *, ));

286 
mblk_t
 *
¥ïíd_udöd
 
__P
((
uµî°r_t
 *, mblk_t *, ));

287 
¥omisc_£ndup
 
__P
((
uµî°r_t
 *, 
mblk_t
 *, , ));

289 
put˘l2
 
__P
((
queue_t
 *, , , ));

290 
put˘l4
 
__P
((
queue_t
 *, , , ));

291 
∑ss_∑ckë
 
__P
((
uµî°r_t
 *
µa
, 
mblk_t
 *
mp
, 
outbound
));

292 #ifde‡
FILTER_PACKETS


293 
ù_h¨d_fûãr
 
__P
((
uµî°r_t
 *
µa
, 
mblk_t
 *
mp
, 
outbound
));

296 
	#PPP_ID
 0xb1a6

	)

297 
moduÀ_öfo
 
	gµp_öfo
 = {

298 #ifde‡
PRIOQ


299 
PPP_ID
, "ppp", 0, 512, 512, 384

301 
PPP_ID
, "ppp", 0, 512, 512, 128

305 
qöô
 
	gµpuröt
 = {

306 
µpuΩut
, 
µpur§v
, 
µp›í
, 
µp˛o£
, 
NULL
, &
µp_öfo
, NULL

309 
qöô
 
	gµpuwöt
 = {

310 
µpuwput
, 
µpuw§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

313 
qöô
 
	gµ∂röt
 = {

314 
µ∂Ωut
, 
µ∂r§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

317 
qöô
 
	gµ∂wöt
 = {

318 
µ∂wput
, 
µ∂w§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

321 #ifde‡
LACHTCP


322 
if°©s
 *ifstats;

323 
	gµpdevÊag
 = 0;

326 
°ªamèb
 
	gµpöfo
 = {

327 &
µpuröt
, &
µpuwöt
,

328 &
µ∂röt
, &
µ∂wöt


331 
	gµp_cou¡
;

336 #ifde‡
SOL2


337 
	#INCR_IPACKETS
(
µa
) \

338 i‡(
µa
->
k°©s
 != 0) { \

339 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[0].
vÆue
.
ul
++; \

340 }

	)

341 
	#INCR_IERRORS
(
µa
) \

342 i‡(
µa
->
k°©s
 != 0) { \

343 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[1].
vÆue
.
ul
++; \

344 }

	)

345 
	#INCR_OPACKETS
(
µa
) \

346 i‡(
µa
->
k°©s
 != 0) { \

347 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[2].
vÆue
.
ul
++; \

348 }

	)

349 
	#INCR_OERRORS
(
µa
) \

350 i‡(
µa
->
k°©s
 != 0) { \

351 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[3].
vÆue
.
ul
++; \

352 }

	)

355 #ifde‡
LACHTCP


356 
	#INCR_IPACKETS
(
µa
Ëµa->
if°©s
.
ifs_ùackës
++;

	)

357 
	#INCR_IERRORS
(
µa
Ëµa->
if°©s
.
ifs_õº‹s
++;

	)

358 
	#INCR_OPACKETS
(
µa
Ëµa->
if°©s
.
ifs_›ackës
++;

	)

359 
	#INCR_OERRORS
(
µa
Ëµa->
if°©s
.
ifs_€º‹s
++;

	)

366 #ifde‡
SVR4


367 
	$µp›í
(
q
, 
devp
, 
oÊag
, 
sÊag
, 
¸edp
)

368 
queue_t
 *
q
;

369 
dev_t
 *
devp
;

370 
oÊag
, 
sÊag
;

371 
¸ed_t
 *
¸edp
;

373 
	$µp›í
(
q
, 
dev
, 
oÊag
, 
sÊag
)

374 
queue_t
 *
q
;

375 
dev
;

376 
oÊag
, 
sÊag
;

379 
uµî°r_t
 *
up
;

380 
uµî°r_t
 **
¥evp
;

381 
mö‹_t
 
mn
;

382 #ifde‡
PRIOQ


383 
u_sh‹t
 *
±r
;

384 
u_ch¨
 
√w_b™d
;

387 i‡(
q
->
q_±r
)

388 
	`DRV_OPEN_OK
(
dev
);

390 #ifde‡
PRIOQ


395 
max_b™d
 = 1;

396 
def_b™d
 = 0;

397 
±r
 = 
¥ioq_èbÀ
;

398 *
±r
) {

399 
√w_b™d
 = 1;

400 *
±r
)

401 i‡(*
±r
++ =
IPPORT_DEFAULT
) {

402 
√w_b™d
 = 0;

403 
def_b™d
 = 
max_b™d
;

405 
max_b™d
 +
√w_b™d
;

406 
±r
++;

408 i‡(
def_b™d
)

409 
def_b™d
 = 
max_b™d
 - def_band;

410 --
max_b™d
;

413 i‡(
sÊag
 =
CLONEOPEN
) {

414 
mn
 = 0;

415 
¥evp
 = &
mö‹_devs
; (
up
 = *¥evpË!0;Öªv∞&up->
√xtmn
) {

416 i‡(
up
->
mn
 != mn)

418 ++
mn
;

421 #ifde‡
SVR4


422 
mn
 = 
	`gëmö‹
(*
devp
);

424 
mn
 = 
	`mö‹
(
dev
);

426 
¥evp
 = &
mö‹_devs
; (
up
 = *¥evpË!0;Öªv∞&up->
√xtmn
) {

427 i‡(
up
->
mn
 >= mn)

430 i‡(
up
->
mn
 == mn) {

432 
q
->
q_±r
 = 
	`WR
(q)->q_±∏(
ˇddr_t
Ë
up
;

433 
	`DRV_OPEN_OK
(
dev
);

440 
up
 = (
uµî°r_t
 *Ë
	`ALLOC_SLEEP
((upperstr_t));

441 
	`bzîo
((
ˇddr_t
Ë
up
, (
uµî°r_t
));

442 i‡(
up
 == 0) {

443 
	`DPRINT
("pppopen: out of kernel memory\n");

444 
	`OPEN_ERROR
(
ENXIO
);

446 
up
->
√xtmn
 = *
¥evp
;

447 *
¥evp
 = 
up
;

448 
up
->
mn
 = mn;

449 #ifde‡
SVR4


450 *
devp
 = 
	`makedevi˚
(
	`gëmaj‹
(*devp), 
mn
);

452 
up
->
q
 = q;

453 i‡(
	`NOTSUSER
() == 0)

454 
up
->
Êags
 |
US_PRIV
;

455 #i‚de‡
NO_DLPI


456 
up
->
°©e
 = 
DL_UNATTACHED
;

458 #ifde‡
LACHTCP


459 
up
->
ifÊags
 = 
IFF_UP
 | 
IFF_POINTOPOINT
;

461 
up
->
ßp
 = -1;

462 
up
->
œ°_£¡
 = up->
œ°_ªcv
 = 
time
;

463 
up
->
≈mode
 = 
NPMODE_DROP
;

464 
q
->
q_±r
 = (
ˇddr_t
Ë
up
;

465 
	`WR
(
q
)->
q_±r
 = (
ˇddr_t
Ë
up
;

466 
	`n€«bÀ
(
	`WR
(
q
));

467 #ifde‡
SOL2


468 
	`muãx_öô
(&
up
->
°©s_lock
, 
NULL
, 
MUTEX_DRIVER
, NULL);

470 ++
µp_cou¡
;

472 
	`q¥ocs⁄
(
q
);

473 
	`DRV_OPEN_OK
(
	`makedev
(
	`maj‹
(
dev
), 
mn
));

474 
	}
}

477 #ifde‡
SVR4


478 
	$µp˛o£
(
q
, 
Êag
, 
¸edp
)

479 
queue_t
 *
q
;

480 
Êag
;

481 
¸ed_t
 *
¸edp
;

483 
	$µp˛o£
(
q
, 
Êag
)

484 
queue_t
 *
q
;

485 
Êag
;

488 
uµî°r_t
 *
up
, **
uµ
;

489 
uµî°r_t
 *
as
, *
a¢ext
;

490 
uµî°r_t
 **
¥evp
;

492 
	`q¥ocsoff
(
q
);

494 
up
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

495 i‡(
up
 == 0) {

496 
	`DPRINT
("pppclose: q_ptr = 0\n");

499 i‡(
up
->
Êags
 & 
US_DBGLOG
)

500 
	`DPRINT2
("µp/%d: clo£, fœgs=%x\n", 
up
->
mn
, up->
Êags
);

501 i‡(
up
->
Êags
 & 
US_CONTROL
) {

502 #ifde‡
LACHTCP


503 
if°©s
 *
iÂ
, *
piÂ
;

505 i‡(
up
->
lowîq
 != 0) {

507 
	`DPRINT1
("ppp%d:Üower stream still connected on close?\n",

508 
up
->
mn
);

509 
LOCK_LOWER_W
;

510 
up
->
lowîq
->
q_±r
 = 0;

511 
	`RD
(
up
->
lowîq
)->
q_±r
 = 0;

512 
up
->
lowîq
 = 0;

513 
UNLOCK_LOWER
;

522 
as
 = 
up
->
√xt
;á†!0;á†
a¢ext
) {

523 
a¢ext
 = 
as
->
√xt
;

524 
as
->
√xt
 = 0;

525 
as
->
µa
 = 0;

526 i‡(
as
->
Êags
 & 
US_BLOCKED
) {

527 
as
->
Êags
 &~
US_BLOCKED
;

528 
	`Êushq
(
	`WR
(
as
->
q
), 
FLUSHDATA
);

531 
uµ
 = &
µas
; *uµ !0; uµ = &(*uµ)->
√xç∑
)

532 i‡(*
uµ
 =
up
) {

533 *
uµ
 = 
up
->
√xç∑
;

536 #ifde‡
LACHTCP


538 
iÂ
 = 
if°©s
, 
piÂ
 = 0; iÂ; iÂ = iÂ->
ifs_√xt
) {

539 i‡(
iÂ
 =&
up
->
if°©s
) {

540 i‡(
piÂ
)

541 
piÂ
->
ifs_√xt
 = 
iÂ
->ifs_next;

543 
if°©s
 = 
iÂ
->
ifs_√xt
;

546 
piÂ
 = 
iÂ
;

554 i‡((
as
 = 
up
->
µa
) != 0) {

555 ; 
as
->
√xt
 != 0;ás =ás->next)

556 i‡(
as
->
√xt
 =
up
) {

557 
as
->
√xt
 = 
up
->next;

563 #ifde‡
SOL2


564 i‡(
up
->
k°©s
)

565 
	`k°©_dñëe
(
up
->
k°©s
);

566 
	`muãx_de°roy
(&
up
->
°©s_lock
);

569 
q
->
q_±r
 = 
NULL
;

570 
	`WR
(
q
)->
q_±r
 = 
NULL
;

572 
¥evp
 = &
mö‹_devs
; *¥ev∞!0;Öªv∞&(*¥evp)->
√xtmn
) {

573 i‡(*
¥evp
 =
up
) {

574 *
¥evp
 = 
up
->
√xtmn
;

578 
	`FREE
(
up
, (
uµî°r_t
));

579 --
µp_cou¡
;

582 
	}
}

591 
	$µpuwput
(
q
, 
mp
)

592 
queue_t
 *
q
;

593 
mblk_t
 *
mp
;

595 
uµî°r_t
 *
us
, *
µa
, *
≈s
;

596 
iocblk
 *
i›
;

597 
lökblk
 *
lb
;

598 #ifde‡
LACHTCP


599 
i‰eq
 *
i‰
;

600 
i
;

602 
queue_t
 *
lq
;

603 
îr‹
, 
n
, 
ßp
;

604 
mblk_t
 *
mq
;

605 
µp_idÀ
 *
pù
;

606 #ifde‡
PRIOQ


607 
queue_t
 *
éq
;

609 #ifde‡
NO_DLPI


610 
uµî°r_t
 *
os
;

613 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

614 i‡(
us
 == 0) {

615 
	`DPRINT
("pppuwput: q_ptr = 0!\n");

618 i‡(
mp
 == 0) {

619 
	`DPRINT1
("µpuwput/%d: m∞0!\n", 
us
->
mn
);

622 i‡(
mp
->
b_d©≠
 == 0) {

623 
	`DPRINT1
("µpuwput/%d: mp->b_d©≠ = 0!\n", 
us
->
mn
);

626 
mp
->
b_d©≠
->
db_ty≥
) {

627 #i‚de‡
NO_DLPI


628 
M_PCPROTO
:

629 
M_PROTO
:

630 
	`dÕi_ªque°
(
q
, 
mp
, 
us
);

634 
M_DATA
:

635 i‡(
us
->
Êags
 & 
US_DBGLOG
)

636 
	`DPRINT3
("ppp/%d: uwput M_DATAÜen=%d flags=%x\n",

637 
us
->
mn
, 
	`msgdsize
(
mp
), us->
Êags
);

638 i‡(
us
->
µa
 =0 || 
	`msgdsize
(
mp
Ë> us->µa->
mtu
 + 
PPP_HDRLEN


639 #i‚de‡
NO_DLPI


640 || (
us
->
Êags
 & 
US_CONTROL
) == 0

643 
	`DPRINT1
("µpuwput: junk d©®Àn=%d\n", 
	`msgdsize
(
mp
));

644 
	`‰ìmsg
(
mp
);

647 #ifde‡
NO_DLPI


648 i‡((
us
->
Êags
 & 
US_CONTROL
Ë=0 && !
	`∑ss_∑ckë
(us, 
mp
, 1))

651 i‡(!
	`£nd_d©a
(
mp
, 
us
))

652 
	`putq
(
q
, 
mp
);

655 
M_IOCTL
:

656 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

657 
îr‹
 = 
EINVAL
;

658 i‡(
us
->
Êags
 & 
US_DBGLOG
)

659 
	`DPRINT3
("ppp/%d: ioctl %x count=%d\n",

660 
us
->
mn
, 
i›
->
ioc_cmd
, i›->
ioc_cou¡
);

661 
i›
->
ioc_cmd
) {

662 #i‡
	`deföed
(
SOL2
)

663 
DLIOCRAW
:

664 
us
->
Êags
 |
US_RAWDATA
;

665 
îr‹
 = 0;

668 
I_LINK
:

669 i‡((
us
->
Êags
 & 
US_CONTROL
Ë=0 || us->
lowîq
 != 0)

671 i‡(
mp
->
b_c⁄t
 == 0) {

672 
	`DPRINT1
("µpuwput/%d: io˘»I_LINK b_c⁄à0!\n", 
us
->
mn
);

675 
lb
 = (
lökblk
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

676 
lq
 = 
lb
->
l_qbŸ
;

677 i‡(
lq
 == 0) {

678 
	`DPRINT1
("µpuwput/%d: io˘»I_LINKÜ_qbŸ = 0!\n", 
us
->
mn
);

681 
LOCK_LOWER_W
;

682 
us
->
lowîq
 = 
lq
;

683 
lq
->
q_±r
 = (
ˇddr_t
Ë
q
;

684 
	`RD
(
lq
)->
q_±r
 = (
ˇddr_t
Ë
us
->
q
;

685 
UNLOCK_LOWER
;

686 
i›
->
ioc_cou¡
 = 0;

687 
îr‹
 = 0;

688 
us
->
Êags
 &~
US_LASTMOD
;

690 
	`qíabÀ
(
q
);

693 
	`put˘l2
(
lq
, 
M_CTL
, 
PPPCTL_UNIT
, 
us
->
µa_id
);

694 
	`put˘l4
(
lq
, 
M_CTL
, 
PPPCTL_MRU
, 
us
->
mru
);

695 
	`put˘l4
(
lq
, 
M_CTL
, 
PPPCTL_MTU
, 
us
->
mtu
);

696 #ifde‡
PRIOQ


701 
	`‰ìze°r
(
lq
);

702 
éq
 = 
lq
;Ålq->
q_√xt
 !
NULL
;Ålq =Ålq->q_next)

704 
	`°rq£t
(
éq
, 
QHIWAT
, 0, 256);

705 
	`°rq£t
(
éq
, 
QLOWAT
, 0, 128);

706 
	`un‰ìze°r
(
lq
);

710 
I_UNLINK
:

711 i‡(
mp
->
b_c⁄t
 == 0) {

712 
	`DPRINT1
("µpuwput/%d: io˘»I_UNLINK b_c⁄à0!\n", 
us
->
mn
);

715 
lb
 = (
lökblk
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

716 #i‡
DEBUG


717 i‡(
us
->
lowîq
 !
lb
->
l_qbŸ
) {

718 
	`DPRINT2
("ppp unlink:Üowerq=%x qbot=%x\n",

719 
us
->
lowîq
, 
lb
->
l_qbŸ
);

723 
i›
->
ioc_cou¡
 = 0;

724 
	`qwrôî
(
q
, 
mp
, 
dëach_lowî
, 
PERIM_OUTER
);

725 
îr‹
 = -1;

728 
PPPIO_NEWPPA
:

729 i‡(
us
->
Êags
 & 
US_CONTROL
)

731 i‡((
us
->
Êags
 & 
US_PRIV
) == 0) {

732 
îr‹
 = 
EPERM
;

736 i‡((
mq
 = 
mp
->
b_c⁄t
) == 0

737 || 
mq
->
b_d©≠
->
db_lim
 - mq->
b_Ωå
 < ()) {

738 
mq
 = 
	`Ælocb
((), 
BPRI_HI
);

739 i‡(
mq
 == 0) {

740 
îr‹
 = 
ENOSR
;

743 i‡(
mp
->
b_c⁄t
 != 0)

744 
	`‰ìmsg
(
mp
->
b_c⁄t
);

745 
mp
->
b_c⁄t
 = 
mq
;

746 
mq
->
b_c⁄t
 = 0;

748 
i›
->
ioc_cou¡
 = ();

749 
mq
->
b_w±r
 = mq->
b_Ωå
 + ();

750 
	`qwrôî
(
q
, 
mp
, 
√w_µa
, 
PERIM_OUTER
);

751 
îr‹
 = -1;

754 
PPPIO_ATTACH
:

757 i‡(
i›
->
ioc_cou¡
 !(Ë|| 
us
->
µa
 != 0)

759 i‡(
mp
->
b_c⁄t
 == 0) {

760 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_ATTACH b_c⁄à0!\n", 
us
->
mn
);

763 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

764 
µa
 = 
µas
;Ö∑ !0;Ö∑ =Ö∑->
√xç∑
)

765 i‡(
µa
->
µa_id
 =
n
)

767 i‡(
µa
 == 0)

769 
us
->
µa
 =Öpa;

770 
i›
->
ioc_cou¡
 = 0;

771 
	`qwrôî
(
q
, 
mp
, 
©èch_µa
, 
PERIM_OUTER
);

772 
îr‹
 = -1;

775 #ifde‡
NO_DLPI


776 
PPPIO_BIND
:

778 i‡(
i›
->
ioc_cou¡
 !(Ë|| 
us
->
µa
 == 0)

780 i‡(
mp
->
b_c⁄t
 == 0) {

781 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_BIND b_c⁄à0!\n", 
us
->
mn
);

784 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

786 i‡(
n
 < 0x21 ||Ç > 0x3fff || (n & 0x101) != 1)

789 
os
 = 
us
->
µa
; o†!0; o†os->
√xt
)

790 i‡(
os
->
ßp
 =
n
)

792 i‡(
os
 != 0)

794 
us
->
ßp
 = 
n
;

795 
i›
->
ioc_cou¡
 = 0;

796 
îr‹
 = 0;

800 
PPPIO_MRU
:

801 i‡(
i›
->
ioc_cou¡
 !(Ë|| (
us
->
Êags
 & 
US_CONTROL
) == 0)

803 i‡(
mp
->
b_c⁄t
 == 0) {

804 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_MRU b_c⁄à0!\n", 
us
->
mn
);

807 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

808 i‡(
n
 <0 ||Ç > 
PPP_MAXMRU
)

810 i‡(
n
 < 
PPP_MRU
)

811 
n
 = 
PPP_MRU
;

812 
us
->
mru
 = 
n
;

813 i‡(
us
->
lowîq
)

814 
	`put˘l4
(
us
->
lowîq
, 
M_CTL
, 
PPPCTL_MRU
, 
n
);

815 
îr‹
 = 0;

816 
i›
->
ioc_cou¡
 = 0;

819 
PPPIO_MTU
:

820 i‡(
i›
->
ioc_cou¡
 !(Ë|| (
us
->
Êags
 & 
US_CONTROL
) == 0)

822 i‡(
mp
->
b_c⁄t
 == 0) {

823 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_MTU b_c⁄à0!\n", 
us
->
mn
);

826 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

827 i‡(
n
 <0 ||Ç > 
PPP_MAXMTU
)

829 
us
->
mtu
 = 
n
;

830 #ifde‡
LACHTCP


832 
us
->
if°©s
.
ifs_mtu
 = 
n
;

834 i‡(
us
->
lowîq
)

835 
	`put˘l4
(
us
->
lowîq
, 
M_CTL
, 
PPPCTL_MTU
, 
n
);

836 
îr‹
 = 0;

837 
i›
->
ioc_cou¡
 = 0;

840 
PPPIO_LASTMOD
:

841 
us
->
Êags
 |
US_LASTMOD
;

842 
îr‹
 = 0;

845 
PPPIO_DEBUG
:

846 i‡(
i›
->
ioc_cou¡
 != ())

848 i‡(
mp
->
b_c⁄t
 == 0) {

849 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_DEBUG b_c⁄à0!\n", 
us
->
mn
);

852 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

853 i‡(
n
 =
PPPDBG_DUMP
 + 
PPPDBG_DRIVER
) {

854 
	`qwrôî
(
q
, 
NULL
, 
debug_dump
, 
PERIM_OUTER
);

855 
i›
->
ioc_cou¡
 = 0;

856 
îr‹
 = -1;

857 } i‡(
n
 =
PPPDBG_LOG
 + 
PPPDBG_DRIVER
) {

858 
	`DPRINT1
("µp/%d: debugÜogÉ«bÀd\n", 
us
->
mn
);

859 
us
->
Êags
 |
US_DBGLOG
;

860 
i›
->
ioc_cou¡
 = 0;

861 
îr‹
 = 0;

863 i‡(
us
->
µa
 =0 || us->µa->
lowîq
 == 0)

865 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

866 
îr‹
 = -1;

870 
PPPIO_NPMODE
:

871 i‡(
i›
->
ioc_cou¡
 != 2 * ())

873 i‡((
us
->
Êags
 & 
US_CONTROL
) == 0)

875 i‡(
mp
->
b_c⁄t
 == 0) {

876 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_NPMODE b_c⁄à0!\n", 
us
->
mn
);

879 
ßp
 = ((*)
mp
->
b_c⁄t
->
b_Ωå
)[0];

880 
≈s
 = 
us
->
√xt
;Çps != 0;Çps =Çps->next) {

881 i‡(
us
->
Êags
 & 
US_DBGLOG
)

882 
	`DPRINT2
("u†0x%x, us->√xt->ß∞0x%x\n", 
≈s
,Çps->
ßp
);

883 i‡(
≈s
->
ßp
 == sap)

886 i‡(
≈s
 == 0) {

887 i‡(
us
->
Êags
 & 
US_DBGLOG
)

888 
	`DPRINT2
("µp/%d:Çÿ°ªam f‹ s≠ %x\n", 
us
->
mn
, 
ßp
);

892 
≈s
->
≈mode
 = (
NPmode
Ë((*)
mp
->
b_c⁄t
->
b_Ωå
)[1];

893 i‡(
≈s
->
≈mode
 !
NPMODE_QUEUE
 && (≈s->
Êags
 & 
US_BLOCKED
) != 0)

894 
	`qíabÀ
(
	`WR
(
≈s
->
q
));

895 
i›
->
ioc_cou¡
 = 0;

896 
îr‹
 = 0;

899 
PPPIO_GIDLE
:

900 i‡((
µa
 = 
us
->ppa) == 0)

902 
mq
 = 
	`Ælocb
((
µp_idÀ
), 
BPRI_HI
);

903 i‡(
mq
 == 0) {

904 
îr‹
 = 
ENOSR
;

907 i‡(
mp
->
b_c⁄t
 != 0)

908 
	`‰ìmsg
(
mp
->
b_c⁄t
);

909 
mp
->
b_c⁄t
 = 
mq
;

910 
mq
->
b_c⁄t
 = 0;

911 
pù
 = (
µp_idÀ
 *Ë
mq
->
b_w±r
;

912 
pù
->
xmô_idÀ
 = 
time
 - 
µa
->
œ°_£¡
;

913 
pù
->
ªcv_idÀ
 = 
time
 - 
µa
->
œ°_ªcv
;

914 
mq
->
b_w±r
 +(
µp_idÀ
);

915 
i›
->
ioc_cou¡
 = (
µp_idÀ
);

916 
îr‹
 = 0;

919 #ifde‡
LACHTCP


920 
SIOCSIFNAME
:

922 i‡(
i›
->
ioc_cou¡
 !(
i‰eq
Ë|| 
us
->
µa
 == 0)

924 
i‰
 = (
i‰eq
 *)
mp
->
b_c⁄t
->
b_Ωå
;

926 
i
 = 0; i < 
IFNAMSIZ
; i++) {

927 i‡(
i‰
->
i‰_«me
[
i
] == 0 ||

928 (
i‰
->
i‰_«me
[
i
] >= '0' &&

929 
i‰
->
i‰_«me
[
i
] <= '9'))

932 
us
->
i‚ame
[
i
] = 
i‰
->
i‰_«me
[i];

934 
us
->
i‚ame
[
i
] = 0;

937 
n
 = 0; 
i
 < 
IFNAMSIZ
; i++) {

938 i‡(
i‰
->
i‰_«me
[
i
] == 0) {

942 
n
 =Ç * 10 + 
i‰
->
i‰_«me
[
i
] - '0';

947 i‡(
us
->
µa
->
µa_id
 !
n
)

949 
µa
 = 
us
->ppa;

952 
	`°∫˝y
 (
µa
->
i‚ame
, 
us
->i‚ame, 
IFNAMSIZ
);

954 
µa
->
if°©s
.
ifs_«me
 =Ö∑->
i‚ame
;

955 
µa
->
if°©s
.
ifs_unô
 = 
n
;

956 
µa
->
if°©s
.
ifs_a˘ive
 = 
us
->
°©e
 !
DL_UNBOUND
;

957 
µa
->
if°©s
.
ifs_mtu
 =Ö∑->
mtu
;

960 
µa
->
if°©s
.
ifs_√xt
 = ifstats;

961 
if°©s
 = &
µa
->ifstats;

963 
i›
->
ioc_cou¡
 = 0;

964 
îr‹
 = 0;

967 
SIOCGIFFLAGS
:

968 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

969 i‡(
us
->
µa
)

970 
us
 = us->
µa
;

974 ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
 = 
us
->
ifÊags
;

975 
îr‹
 = 0;

978 
SIOCSIFFLAGS
:

979 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

980 i‡(
us
->
µa
)

981 
us
 = us->
µa
;

985 
us
->
ifÊags
 = ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
;

986 
îr‹
 = 0;

989 
SIOCSIFADDR
:

990 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

991 i‡(
us
->
µa
)

992 
us
 = us->
µa
;

996 
us
->
ifÊags
 |
IFF_RUNNING
;

997 ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
 |
IFF_RUNNING
;

998 
îr‹
 = 0;

1001 
SIOCSIFMTU
:

1008 i‡((
mq
 = 
	`Ælocb
((
dl_öfo_ªq_t
), 
BPRI_HI
)) == 0)

1010 ((
DL_¥imôives
 *)
mq
->
b_Ωå
)->
dl_¥imôive
 = 
DL_INFO_REQ
;

1011 
mq
->
b_w±r
 = mq->
b_Ωå
 + (
dl_öfo_ªq_t
);

1012 
	`dÕi_ªque°
(
q
, 
mq
, 
us
);

1013 
îr‹
 = 0;

1016 
SIOCGIFNETMASK
:

1017 
SIOCSIFNETMASK
:

1018 
SIOCGIFADDR
:

1019 
SIOCGIFDSTADDR
:

1020 
SIOCSIFDSTADDR
:

1021 
SIOCGIFMETRIC
:

1022 
îr‹
 = 0;

1027 i‡(
us
->
µa
 =0 || us->µa->
lowîq
 == 0)

1029 
us
->
ioc_id
 = 
i›
->ioc_id;

1030 
îr‹
 = -1;

1031 
i›
->
ioc_cmd
) {

1032 
PPPIO_GETSTAT
:

1033 
PPPIO_GETCSTAT
:

1034 i‡(
us
->
Êags
 & 
US_LASTMOD
) {

1035 
îr‹
 = 
EINVAL
;

1038 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

1041 i‡(
us
->
Êags
 & 
US_PRIV
)

1042 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

1044 
	`DPRINT1
("µ∞io˘»%xÑeje˘ed\n", 
i›
->
ioc_cmd
);

1045 
îr‹
 = 
EPERM
;

1052 i‡(
îr‹
 > 0) {

1053 
i›
->
ioc_îr‹
 = 
îr‹
;

1054 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

1055 
	`qª∂y
(
q
, 
mp
);

1056 } i‡(
îr‹
 == 0) {

1057 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1058 
	`qª∂y
(
q
, 
mp
);

1062 
M_FLUSH
:

1063 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1064 
	`DPRINT2
("µp/%d: flush %x\n", 
us
->
mn
, *
mp
->
b_Ωå
);

1065 i‡(*
mp
->
b_Ωå
 & 
FLUSHW
)

1066 
	`Êushq
(
q
, 
FLUSHDATA
);

1067 i‡(*
mp
->
b_Ωå
 & 
FLUSHR
) {

1068 *
mp
->
b_Ωå
 &~
FLUSHW
;

1069 
	`qª∂y
(
q
, 
mp
);

1071 
	`‰ìmsg
(
mp
);

1075 
	`‰ìmsg
(
mp
);

1079 
	}
}

1081 #i‚de‡
NO_DLPI


1083 
	$dÕi_ªque°
(
q
, 
mp
, 
us
)

1084 
queue_t
 *
q
;

1085 
mblk_t
 *
mp
;

1086 
uµî°r_t
 *
us
;

1088 
DL_¥imôives
 *
d
 = (DL_¥imôive†*Ë
mp
->
b_Ωå
;

1089 
size
 = 
mp
->
b_w±r
 - mp->
b_Ωå
;

1090 
mblk_t
 *
ª∂y
, *
≈
;

1091 
uµî°r_t
 *
µa
, *
os
;

1092 
ßp
, 
Àn
;

1093 
dl_öfo_ack_t
 *
öfo
;

1094 
dl_böd_ack_t
 *
ackp
;

1095 #i‡
DL_CURRENT_VERSION
 >= 2

1096 
dl_phys_addr_ack_t
 *
∑ddøck
;

1097 
ëhî_addr
 
óddr
 = {0};

1100 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1101 
	`DPRINT3
("µp/%d: dÕò¥im %xÜí=%d\n", 
us
->
mn
,

1102 
d
->
dl_¥imôive
, 
size
);

1103 
d
->
dl_¥imôive
) {

1104 
DL_INFO_REQ
:

1105 i‡(
size
 < (
dl_öfo_ªq_t
))

1106 
bad¥im
;

1107 i‡((
ª∂y
 = 
	`Ælocb
((
dl_öfo_ack_t
), 
BPRI_HI
)) == 0)

1109 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1110 
öfo
 = (
dl_öfo_ack_t
 *Ë
ª∂y
->
b_w±r
;

1111 
ª∂y
->
b_w±r
 +(
dl_öfo_ack_t
);

1112 
	`bzîo
((
ˇddr_t
Ë
öfo
, (
dl_öfo_ack_t
));

1113 
öfo
->
dl_¥imôive
 = 
DL_INFO_ACK
;

1114 
öfo
->
dl_max_sdu
 = 
us
->
µa
? us->µa->
mtu
: 
PPP_MAXMTU
;

1115 
öfo
->
dl_mö_sdu
 = 1;

1116 
öfo
->
dl_addr_Àngth
 = (
uöt
);

1117 
öfo
->
dl_mac_ty≥
 = 
DL_ETHER
;

1118 
öfo
->
dl_cuºít_°©e
 = 
us
->
°©e
;

1119 
öfo
->
dl_£rvi˚_mode
 = 
DL_CLDLS
;

1120 
öfo
->
dl_¥ovidî_°yÀ
 = 
DL_STYLE2
;

1121 #i‡
DL_CURRENT_VERSION
 >= 2

1122 
öfo
->
dl_ßp_Àngth
 = (
uöt
);

1123 
öfo
->
dl_vîsi⁄
 = 
DL_CURRENT_VERSION
;

1125 
	`qª∂y
(
q
, 
ª∂y
);

1128 
DL_ATTACH_REQ
:

1129 i‡(
size
 < (
dl_©èch_ªq_t
))

1130 
bad¥im
;

1131 i‡(
us
->
°©e
 !
DL_UNATTACHED
 || us->
µa
 != 0) {

1132 
	`dÕi_îr‹
(
q
, 
us
, 
DL_ATTACH_REQ
, 
DL_OUTSTATE
, 0);

1135 
µa
 = 
µas
;Ö∑ !0;Ö∑ =Ö∑->
√xç∑
)

1136 i‡(
µa
->
µa_id
 =
d
->
©èch_ªq
.
dl_µa
)

1138 i‡(
µa
 == 0) {

1139 
	`dÕi_îr‹
(
q
, 
us
, 
DL_ATTACH_REQ
, 
DL_BADPPA
, 0);

1142 
us
->
µa
 =Öpa;

1143 
	`qwrôî
(
q
, 
mp
, 
©èch_µa
, 
PERIM_OUTER
);

1146 
DL_DETACH_REQ
:

1147 i‡(
size
 < (
dl_dëach_ªq_t
))

1148 
bad¥im
;

1149 i‡(
us
->
°©e
 !
DL_UNBOUND
 || us->
µa
 == 0) {

1150 
	`dÕi_îr‹
(
q
, 
us
, 
DL_DETACH_REQ
, 
DL_OUTSTATE
, 0);

1153 
	`qwrôî
(
q
, 
mp
, 
dëach_µa
, 
PERIM_OUTER
);

1156 
DL_BIND_REQ
:

1157 i‡(
size
 < (
dl_böd_ªq_t
))

1158 
bad¥im
;

1159 i‡(
us
->
°©e
 !
DL_UNBOUND
 || us->
µa
 == 0) {

1160 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_OUTSTATE
, 0);

1165 i‡(
d
->
böd_ªq
.
dl_£rvi˚_mode
 !
DL_CLDLS
) {

1166 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_UNSUPPORTED
, 0);

1173 
ßp
 = 
d
->
böd_ªq
.
dl_ßp
;

1174 
us
->
ªq_ßp
 = 
ßp
;

1176 #i‡
	`deföed
(
SOL2
)

1177 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1178 
	`DPRINT2
("DL_BIND_REQ: i∞give†ß∞0x%x, u†0x%x", 
ßp
, 
us
);

1180 i‡(
ßp
 =
ETHERTYPE_IP
)

1181 
ßp
 = 
PPP_IP
;

1182 i‡(
ßp
 =
ETHERTYPE_IPV6
)

1183 
ßp
 = 
PPP_IPV6
;

1184 i‡(
ßp
 =
ETHERTYPE_ALLSAP
)

1185 
ßp
 = 
PPP_ALLSAP
;

1187 
	`DPRINT2
("DL_BIND_REQ: uƒecognized s≠ = 0x%x, u†0x%x", 
ßp
, 
us
);

1188 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_BADADDR
, 0);

1192 i‡(
ßp
 =
ETHERTYPE_IP
)

1193 
ßp
 = 
PPP_IP
;

1194 i‡(
ßp
 < 0x21 || sap > 0x3fff || (sap & 0x101) != 1) {

1195 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_BADADDR
, 0);

1201 
os
 = 
us
->
µa
; o†!0; o†os->
√xt
)

1202 i‡(
os
->
ßp
 == sap)

1204 i‡(
os
 != 0) {

1205 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_NOADDR
, 0);

1209 
us
->
ßp
 = sap;

1210 
us
->
°©e
 = 
DL_IDLE
;

1212 i‡((
ª∂y
 = 
	`Ælocb
((
dl_böd_ack_t
Ë+ (
uöt
),

1213 
BPRI_HI
)) == 0)

1215 
ackp
 = (
dl_böd_ack_t
 *Ë
ª∂y
->
b_w±r
;

1216 
ª∂y
->
b_w±r
 +(
dl_böd_ack_t
Ë+ (
uöt
);

1217 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1218 
	`bzîo
((
ˇddr_t
Ë
ackp
, (
dl_böd_ack_t
));

1219 
ackp
->
dl_¥imôive
 = 
DL_BIND_ACK
;

1220 
ackp
->
dl_ßp
 = 
ßp
;

1221 
ackp
->
dl_addr_Àngth
 = (
uöt
);

1222 
ackp
->
dl_addr_off£t
 = (
dl_böd_ack_t
);

1223 *(
uöt
 *)(
ackp
+1Ë
ßp
;

1224 
	`qª∂y
(
q
, 
ª∂y
);

1227 
DL_UNBIND_REQ
:

1228 i‡(
size
 < (
dl_unböd_ªq_t
))

1229 
bad¥im
;

1230 i‡(
us
->
°©e
 !
DL_IDLE
) {

1231 
	`dÕi_îr‹
(
q
, 
us
, 
DL_UNBIND_REQ
, 
DL_OUTSTATE
, 0);

1234 
us
->
ßp
 = -1;

1235 
us
->
°©e
 = 
DL_UNBOUND
;

1236 #ifde‡
LACHTCP


1237 
us
->
µa
->
if°©s
.
ifs_a˘ive
 = 0;

1239 
	`dÕi_ok
(
q
, 
DL_UNBIND_REQ
);

1242 
DL_UNITDATA_REQ
:

1243 i‡(
size
 < (
dl_unôd©a_ªq_t
))

1244 
bad¥im
;

1245 i‡(
us
->
°©e
 !
DL_IDLE
) {

1246 
	`dÕi_îr‹
(
q
, 
us
, 
DL_UNITDATA_REQ
, 
DL_OUTSTATE
, 0);

1249 i‡((
µa
 = 
us
->ppa) == 0) {

1250 
	`cmn_îr
(
CE_CONT
, "ppp: in state dl_idle butÖpa == 0?\n");

1253 
Àn
 = 
mp
->
b_c⁄t
 =0? 0: 
	`msgdsize
(mp->b_cont);

1254 i‡(
Àn
 > 
µa
->
mtu
) {

1255 
	`DPRINT2
("dÕòd©®toÿœrgê(%d > %d)\n", 
Àn
, 
µa
->
mtu
);

1259 #i‡
	`deföed
(
SOL2
)

1264 i‡(
mp
->
b_c⁄t
)

1265 
	`¥omisc_£ndup
(
µa
, 
mp
->
b_c⁄t
, 
us
->
ßp
, 0);

1268 
mp
->
b_b™d
 = 0;

1269 #ifde‡
PRIOQ


1272 i‡(
mp
->
b_d©≠
->
db_ty≥
 =
M_PROTO
 && 
us
->
ßp
 =
PPP_IP


1273 && 
mp
->
b_c⁄t
 != 0) {

1274 
u_ch¨
 *
bb
, *
éh
;

1275 
ùhÀn
, 
Àn
;

1276 
u_sh‹t
 *
±r
;

1277 
u_ch¨
 
b™d_un£t
, 
cur_b™d
, 
syn
;

1278 
u_sh‹t
 
s_p‹t
, 
d_p‹t
;

1280 
bb
 = 
mp
->
b_c⁄t
->
b_Ωå
;

1281 
Àn
 = 
mp
->
b_c⁄t
->
b_w±r
 - mp->b_c⁄t->
b_Ωå
;

1282 
syn
 = 0;

1283 
s_p‹t
 = 
IPPORT_DEFAULT
;

1284 
d_p‹t
 = 
IPPORT_DEFAULT
;

1285 i‡(
Àn
 >= 20) {

1286 
ùhÀn
 = (
bb
[0] & 0x0f) * 4;

1287 
éh
 = 
bb
 + 
ùhÀn
;

1288 
Àn
 -
ùhÀn
;

1289 
bb
[9]) {

1290 
IPPROTO_TCP
:

1291 i‡(
Àn
 >= 20) {

1292 
s_p‹t
 = (
éh
[0] << 8) +Ålh[1];

1293 
d_p‹t
 = (
éh
[2] << 8) +Ålh[3];

1294 
syn
 = 
éh
[13] & 0x02;

1297 
IPPROTO_UDP
:

1298 i‡(
Àn
 >= 8) {

1299 
s_p‹t
 = (
éh
[0] << 8) +Ålh[1];

1300 
d_p‹t
 = (
éh
[2] << 8) +Ålh[3];

1310 
±r
 = 
¥ioq_èbÀ
;

1311 
cur_b™d
 = 
max_b™d
;

1312 
b™d_un£t
 = 1;

1313 *
±r
) {

1314 *
±r
 && 
b™d_un£t
)

1315 i‡(
s_p‹t
 =*
±r
 || 
d_p‹t
 == *ptr++) {

1316 
mp
->
b_b™d
 = 
cur_b™d
;

1317 
b™d_un£t
 = 0;

1320 
±r
++;

1321 
cur_b™d
--;

1323 i‡(
b™d_un£t
)

1324 
mp
->
b_b™d
 = 
def_b™d
;

1326 i‡(
syn
)

1327 
mp
->
b_b™d
++;

1331 i‡(
mp
->
b_d©≠
->
db_ªf
 > 1) {

1332 
≈
 = 
	`Ælocb
(
PPP_HDRLEN
, 
BPRI_HI
);

1333 i‡(
≈
 == 0)

1335 
≈
->
b_c⁄t
 = 
mp
->b_cont;

1336 
mp
->
b_c⁄t
 = 0;

1337 
	`‰ìb
(
mp
);

1338 
mp
 = 
≈
;

1340 
mp
->
b_d©≠
->
db_ty≥
 = 
M_DATA
;

1343 
mp
->
b_w±r
 = mp->
b_Ωå
 + 
PPP_HDRLEN
;

1344 
mp
->
b_Ωå
[0] = 
PPP_ALLSTATIONS
;

1345 
mp
->
b_Ωå
[1] = 
PPP_UI
;

1346 
mp
->
b_Ωå
[2] = 
us
->
ßp
 >> 8;

1347 
mp
->
b_Ωå
[3] = 
us
->
ßp
;

1348 i‡(
	`∑ss_∑ckë
(
us
, 
mp
, 1)) {

1349 i‡(!
	`£nd_d©a
(
mp
, 
us
))

1350 
	`putq
(
q
, 
mp
);

1354 #i‡
DL_CURRENT_VERSION
 >= 2

1355 
DL_PHYS_ADDR_REQ
:

1356 i‡(
size
 < (
dl_phys_addr_ªq_t
))

1357 
bad¥im
;

1363 i‡((
ª∂y
 = 
	`Ælocb
((
dl_phys_addr_ack_t
)+
ETHERADDRL
,

1364 
BPRI_HI
)) == 0)

1366 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1367 
∑ddøck
 = (
dl_phys_addr_ack_t
 *Ë
ª∂y
->
b_w±r
;

1368 
ª∂y
->
b_w±r
 +(
dl_phys_addr_ack_t
);

1369 
	`bzîo
((
ˇddr_t
Ë
∑ddøck
, (
dl_phys_addr_ack_t
)+
ETHERADDRL
);

1370 
∑ddøck
->
dl_¥imôive
 = 
DL_PHYS_ADDR_ACK
;

1371 
∑ddøck
->
dl_addr_Àngth
 = 
ETHERADDRL
;

1372 
∑ddøck
->
dl_addr_off£t
 = (
dl_phys_addr_ack_t
);

1373 
	`bc›y
(&
óddr
, 
ª∂y
->
b_w±r
, 
ETHERADDRL
);

1374 
ª∂y
->
b_w±r
 +
ETHERADDRL
;

1375 
	`qª∂y
(
q
, 
ª∂y
);

1378 #i‡
	`deföed
(
SOL2
)

1379 
DL_PROMISCON_REQ
:

1380 i‡(
size
 < (
dl_¥omisc⁄_ªq_t
))

1381 
bad¥im
;

1382 
us
->
Êags
 |
US_PROMISC
;

1383 
	`dÕi_ok
(
q
, 
DL_PROMISCON_REQ
);

1386 
DL_PROMISCOFF_REQ
:

1387 i‡(
size
 < (
dl_¥omiscoff_ªq_t
))

1388 
bad¥im
;

1389 
us
->
Êags
 &~
US_PROMISC
;

1390 
	`dÕi_ok
(
q
, 
DL_PROMISCOFF_REQ
);

1393 
DL_PROMISCON_REQ
:

1394 
DL_PROMISCOFF_REQ
:

1398 #i‡
DL_CURRENT_VERSION
 >= 2

1399 
DL_SET_PHYS_ADDR_REQ
:

1400 
DL_SUBS_BIND_REQ
:

1401 
DL_SUBS_UNBIND_REQ
:

1402 
DL_ENABMULTI_REQ
:

1403 
DL_DISABMULTI_REQ
:

1404 
DL_XID_REQ
:

1405 
DL_TEST_REQ
:

1406 
DL_REPLY_UPDATE_REQ
:

1407 
DL_REPLY_REQ
:

1408 
DL_DATA_ACK_REQ
:

1410 
DL_CONNECT_REQ
:

1411 
DL_TOKEN_REQ
:

1412 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_NOTSUPPORTED
, 0);

1415 
DL_CONNECT_RES
:

1416 
DL_DISCONNECT_REQ
:

1417 
DL_RESET_REQ
:

1418 
DL_RESET_RES
:

1419 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_OUTSTATE
, 0);

1422 
DL_UDQOS_REQ
:

1423 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_BADQOSTYPE
, 0);

1426 #i‡
DL_CURRENT_VERSION
 >= 2

1427 
DL_TEST_RES
:

1428 
DL_XID_RES
:

1433 
	`cmn_îr
(
CE_CONT
, "µp: unknow¿dÕò¥im 0x%x\n", 
d
->
dl_¥imôive
);

1435 
bad¥im
:

1436 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_BADPRIM
, 0);

1439 
	`‰ìmsg
(
mp
);

1440 
	}
}

1443 
	$dÕi_îr‹
(
q
, 
us
, 
¥im
, 
îr
, 
uîr
)

1444 
queue_t
 *
q
;

1445 
uµî°r_t
 *
us
;

1446 
¥im
, 
îr
, 
uîr
;

1448 
mblk_t
 *
ª∂y
;

1449 
dl_îr‹_ack_t
 *
îΩ
;

1451 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1452 
	`DPRINT3
("µp/%d: dÕòîr‹,Örim=%x,Éº=%x\n", 
us
->
mn
, 
¥im
, 
îr
);

1453 
ª∂y
 = 
	`Ælocb
((
dl_îr‹_ack_t
), 
BPRI_HI
);

1454 i‡(
ª∂y
 == 0)

1456 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1457 
îΩ
 = (
dl_îr‹_ack_t
 *Ë
ª∂y
->
b_w±r
;

1458 
ª∂y
->
b_w±r
 +(
dl_îr‹_ack_t
);

1459 
îΩ
->
dl_¥imôive
 = 
DL_ERROR_ACK
;

1460 
îΩ
->
dl_îr‹_¥imôive
 = 
¥im
;

1461 
îΩ
->
dl_î∫o
 = 
îr
;

1462 
îΩ
->
dl_unix_î∫o
 = 
uîr
;

1463 
	`qª∂y
(
q
, 
ª∂y
);

1464 
	}
}

1467 
	$dÕi_ok
(
q
, 
¥im
)

1468 
queue_t
 *
q
;

1469 
¥im
;

1471 
mblk_t
 *
ª∂y
;

1472 
dl_ok_ack_t
 *
okp
;

1474 
ª∂y
 = 
	`Ælocb
((
dl_ok_ack_t
), 
BPRI_HI
);

1475 i‡(
ª∂y
 == 0)

1477 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1478 
okp
 = (
dl_ok_ack_t
 *Ë
ª∂y
->
b_w±r
;

1479 
ª∂y
->
b_w±r
 +(
dl_ok_ack_t
);

1480 
okp
->
dl_¥imôive
 = 
DL_OK_ACK
;

1481 
okp
->
dl_c‹ª˘_¥imôive
 = 
¥im
;

1482 
	`qª∂y
(
q
, 
ª∂y
);

1483 
	}
}

1487 
	$∑ss_∑ckë
(
us
, 
mp
, 
outbound
)

1488 
uµî°r_t
 *
us
;

1489 
mblk_t
 *
mp
;

1490 
outbound
;

1492 
∑ss
;

1493 
uµî°r_t
 *
µa
;

1495 i‡((
µa
 = 
us
->ppa) == 0) {

1496 
	`‰ìmsg
(
mp
);

1500 #ifde‡
FILTER_PACKETS


1501 
∑ss
 = 
	`ù_h¨d_fûãr
(
us
, 
mp
, 
outbound
);

1507 
∑ss
 = 1;

1510 i‡(
∑ss
 < 0) {

1512 i‡(
µa
->
lowîq
 == 0) {

1513 
	`‰ìmsg
(
mp
);

1516 
∑ss
 = 1;

1517 } i‡(
∑ss
) {

1518 i‡(
outbound
)

1519 
µa
->
œ°_£¡
 = 
time
;

1521 
µa
->
œ°_ªcv
 = 
time
;

1524  
∑ss
;

1525 
	}
}

1534 
	$£nd_d©a
(
mp
, 
us
)

1535 
mblk_t
 *
mp
;

1536 
uµî°r_t
 *
us
;

1538 
uµî°r_t
 *
µa
;

1540 i‡((
us
->
Êags
 & 
US_BLOCKED
Ë|| us->
≈mode
 =
NPMODE_QUEUE
)

1542 
µa
 = 
us
->ppa;

1543 i‡(
µa
 =0 || 
us
->
≈mode
 =
NPMODE_DROP
 || us->≈modê=
NPMODE_ERROR
) {

1544 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1545 
	`DPRINT2
("µp/%d: dr›pögÖkà“pmode=%d)\n", 
us
->
mn
, us->
≈mode
);

1546 
	`‰ìmsg
(
mp
);

1549 i‡(
µa
->
lowîq
 == 0) {

1551 i‡(
	`bˇ≈uäext
(
µa
->
q
, 
mp
->
b_b™d
)) {

1556 
mblk_t
 *
≈
 = 
	`c›ymsg
(
mp
);

1557 
	`‰ìmsg
(
mp
);

1558 i‡(
≈
 != 0)

1559 
	`puäext
(
µa
->
q
, 
≈
);

1563 i‡(
	`bˇ≈uäext
(
µa
->
lowîq
, 
mp
->
b_b™d
)) {

1564 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1565 
µa
->
°©s
.
µp_›ackës
++;

1566 
µa
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
mp
);

1567 #ifde‡
INCR_OPACKETS


1568 
	`INCR_OPACKETS
(
µa
);

1570 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1576 
	`puäext
(
µa
->
lowîq
, 
mp
);

1580 
us
->
Êags
 |
US_BLOCKED
;

1582 
	}
}

1590 
	$√w_µa
(
q
, 
mp
)

1591 
queue_t
 *
q
;

1592 
mblk_t
 *
mp
;

1594 
uµî°r_t
 *
us
, *
up
, **
u•
;

1595 
µa_id
;

1597 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1598 i‡(
us
 == 0) {

1599 
	`DPRINT
("new_ppa: q_ptr = 0!\n");

1603 
u•
 = &
µas
;

1604 
µa_id
 = 0;

1605 (
up
 = *
u•
Ë!0 && 
µa_id
 == up->ppa_id) {

1606 ++
µa_id
;

1607 
u•
 = &
up
->
√xç∑
;

1609 
us
->
µa_id
 =Öpa_id;

1610 
us
->
µa
 = us;

1611 
us
->
√xt
 = 0;

1612 
us
->
√xç∑
 = *
u•
;

1613 *
u•
 = 
us
;

1614 
us
->
Êags
 |
US_CONTROL
;

1615 
us
->
≈mode
 = 
NPMODE_PASS
;

1617 
us
->
mtu
 = 
PPP_MTU
;

1618 
us
->
mru
 = 
PPP_MRU
;

1620 #ifde‡
SOL2


1624 i‡(
us
->
k°©s
 == 0) {

1625 
unô
[32];

1627 
	`•rötf
(
unô
, "µp%d", 
us
->
µa
->
µa_id
);

1628 
us
->
k°©s
 = 
	`k°©_¸óã
("µp", us->
µa
->
µa_id
, 
unô
,

1629 "√t", 
KSTAT_TYPE_NAMED
, 4, 0);

1630 i‡(
us
->
k°©s
 != 0) {

1631 
k°©_«med_t
 *
kn
 = 
	`KSTAT_NAMED_PTR
(
us
->
k°©s
);

1633 
	`°r˝y
(
kn
[0].
«me
, "ipackets");

1634 
kn
[0].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1635 
	`°r˝y
(
kn
[1].
«me
, "ierrors");

1636 
kn
[1].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1637 
	`°r˝y
(
kn
[2].
«me
, "opackets");

1638 
kn
[2].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1639 
	`°r˝y
(
kn
[3].
«me
, "oerrors");

1640 
kn
[3].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1641 
	`k°©_ö°Æl
(
us
->
k°©s
);

1646 *(*)
mp
->
b_c⁄t
->
b_Ωå
 = 
µa_id
;

1647 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1648 
	`qª∂y
(
q
, 
mp
);

1649 
	}
}

1652 
	$©èch_µa
(
q
, 
mp
)

1653 
queue_t
 *
q
;

1654 
mblk_t
 *
mp
;

1656 
uµî°r_t
 *
us
, *
t
;

1658 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1659 i‡(
us
 == 0) {

1660 
	`DPRINT
("attach_ppa: q_ptr = 0!\n");

1664 #i‚de‡
NO_DLPI


1665 
us
->
°©e
 = 
DL_UNBOUND
;

1667 
t
 = 
us
->
µa
;Å->
√xt
 != 0;Å =Å->next)

1669 
t
->
√xt
 = 
us
;

1670 
us
->
√xt
 = 0;

1671 i‡(
mp
->
b_d©≠
->
db_ty≥
 =
M_IOCTL
) {

1672 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1673 
	`qª∂y
(
q
, 
mp
);

1675 #i‚de‡
NO_DLPI


1676 
	`dÕi_ok
(
q
, 
DL_ATTACH_REQ
);

1679 
	}
}

1682 
	$dëach_µa
(
q
, 
mp
)

1683 
queue_t
 *
q
;

1684 
mblk_t
 *
mp
;

1686 
uµî°r_t
 *
us
, *
t
;

1688 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1689 i‡(
us
 == 0) {

1690 
	`DPRINT
("detach_ppa: q_ptr = 0!\n");

1694 
t
 = 
us
->
µa
;Å->
√xt
 != 0;Å =Å->next)

1695 i‡(
t
->
√xt
 =
us
) {

1696 
t
->
√xt
 = 
us
->next;

1699 
us
->
√xt
 = 0;

1700 
us
->
µa
 = 0;

1701 #i‚de‡
NO_DLPI


1702 
us
->
°©e
 = 
DL_UNATTACHED
;

1703 
	`dÕi_ok
(
q
, 
DL_DETACH_REQ
);

1705 
	}
}

1713 
	$dëach_lowî
(
q
, 
mp
)

1714 
queue_t
 *
q
;

1715 
mblk_t
 *
mp
;

1717 
uµî°r_t
 *
us
;

1719 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1720 i‡(
us
 == 0) {

1721 
	`DPRINT
("detach_lower: q_ptr = 0!\n");

1725 
LOCK_LOWER_W
;

1726 
us
->
lowîq
->
q_±r
 = 0;

1727 
	`RD
(
us
->
lowîq
)->
q_±r
 = 0;

1728 
us
->
lowîq
 = 0;

1729 
UNLOCK_LOWER
;

1732 
	`qíabÀ
(
us
->
q
);

1734 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1735 
	`qª∂y
(
q
, 
mp
);

1736 
	}
}

1739 
	$µpuw§v
(
q
)

1740 
queue_t
 *
q
;

1742 
uµî°r_t
 *
us
, *
as
;

1743 
mblk_t
 *
mp
;

1745 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1746 i‡(
us
 == 0) {

1747 
	`DPRINT
("pppuwsrv: q_ptr = 0!\n");

1758 i‡(
us
->
Êags
 & 
US_CONTROL
) {

1759 
as
 = 
us
->
√xt
;ás != 0;ás =ás->next)

1760 
	`qíabÀ
(
	`WR
(
as
->
q
));

1764 
us
->
Êags
 &~
US_BLOCKED
;

1765 (
mp
 = 
	`gëq
(
q
)) != 0) {

1766 i‡(!
	`£nd_d©a
(
mp
, 
us
)) {

1767 
	`putbq
(
q
, 
mp
);

1773 
	}
}

1777 
	$µ∂wput
(
q
, 
mp
)

1778 
queue_t
 *
q
;

1779 
mblk_t
 *
mp
;

1781 
	`puäext
(
q
, 
mp
);

1783 
	}
}

1786 
	$µ∂w§v
(
q
)

1787 
queue_t
 *
q
;

1789 
queue_t
 *
uq
;

1796 
LOCK_LOWER_R
;

1797 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

1798 i‡(
uq
 != 0)

1799 
	`qíabÀ
(
uq
);

1800 
UNLOCK_LOWER
;

1802 
	}
}

1808 
	$µpuΩut
(
q
, 
mp
)

1809 
queue_t
 *
q
;

1810 
mblk_t
 *
mp
;

1812 
uµî°r_t
 *
µa
, *
us
;

1813 
¥Ÿo
, 
Àn
;

1814 
iocblk
 *
i›
;

1816 
µa
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1817 i‡(
µa
 == 0) {

1818 
	`DPRINT
("pppurput: q_ptr = 0!\n");

1822 
mp
->
b_d©≠
->
db_ty≥
) {

1823 
M_CTL
:

1824 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1825 *
mp
->
b_Ωå
) {

1826 
PPPCTL_IERROR
:

1827 #ifde‡
INCR_IERRORS


1828 
	`INCR_IERRORS
(
µa
);

1830 
µa
->
°©s
.
µp_õº‹s
++;

1832 
PPPCTL_OERROR
:

1833 #ifde‡
INCR_OERRORS


1834 
	`INCR_OERRORS
(
µa
);

1836 
µa
->
°©s
.
µp_€º‹s
++;

1839 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1840 
	`‰ìmsg
(
mp
);

1843 
M_IOCACK
:

1844 
M_IOCNAK
:

1849 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

1850 
us
 = 
µa
; u†!0; u†us->
√xt
)

1851 i‡(
us
->
ioc_id
 =
i›
->ioc_id)

1853 i‡(
us
 == 0)

1854 
	`‰ìmsg
(
mp
);

1856 
	`puäext
(
us
->
q
, 
mp
);

1859 
M_HANGUP
:

1866 
	`‰ìmsg
(
mp
);

1867 
mp
 = 
	`Ælocb
(1, 
BPRI_HI
);

1868 i‡(
mp
 == 0) {

1869 
	`DPRINT1
("µp/%d: couldn'àÆloˇãÉo‡mesßge!\n", 
µa
->
mn
);

1872 
	`puäext
(
µa
->
q
, 
mp
);

1876 i‡(
mp
->
b_d©≠
->
db_ty≥
 =
M_DATA
) {

1877 
Àn
 = 
	`msgdsize
(
mp
);

1878 i‡(
mp
->
b_w±r
 - mp->
b_Ωå
 < 
PPP_HDRLEN
) {

1879 
	`PULLUP
(
mp
, 
PPP_HDRLEN
);

1880 i‡(
mp
 == 0) {

1881 
	`DPRINT1
("µp_uΩut: msgpuŒu∞Áûed (Àn=%d)\n", 
Àn
);

1885 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1886 
µa
->
°©s
.
µp_ùackës
++;

1887 
µa
->
°©s
.
µp_ibyãs
 +
Àn
;

1888 #ifde‡
INCR_IPACKETS


1889 
	`INCR_IPACKETS
(
µa
);

1891 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1893 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

1895 #i‡
	`deföed
(
SOL2
)

1900 
	`¥omisc_£ndup
(
µa
, 
mp
, 
¥Ÿo
, 1);

1903 i‡(
¥Ÿo
 < 0x8000 && (
us
 = 
	`föd_de°
(
µa
,Öroto)) != 0) {

1911 i‡(!
	`∑ss_∑ckë
(
us
, 
mp
, 0))

1913 i‡(!
us
->
rblocked
 && !
	`ˇ≈ut
(us->
q
))

1914 
us
->
rblocked
 = 1;

1915 i‡(!
us
->
rblocked
)

1916 
	`putq
(
us
->
q
, 
mp
);

1918 
	`putq
(
q
, 
mp
);

1927 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || 
	`ˇ≈uäext
(
µa
->
q
))

1928 
	`puäext
(
µa
->
q
, 
mp
);

1930 
	`putq
(
q
, 
mp
);

1935 
	}
}

1938 
	$µpur§v
(
q
)

1939 
queue_t
 *
q
;

1941 
uµî°r_t
 *
us
, *
as
;

1942 
mblk_t
 *
mp
, *
hdr
;

1943 #i‚de‡
NO_DLPI


1944 
dl_unôd©a_öd_t
 *
ud
;

1946 
¥Ÿo
;

1948 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1949 i‡(
us
 == 0) {

1950 
	`DPRINT
("pppursrv: q_ptr = 0!\n");

1954 i‡(
us
->
Êags
 & 
US_CONTROL
) {

1960 i‡(
us
->
lowîq
 == 0) {

1961 
as
 = 
us
;

1963 i‡(
as
->
Êags
 & 
US_BLOCKED
)

1964 
	`qíabÀ
(
	`WR
(
as
->
q
));

1965 
as
 =ás->
√xt
;

1966 } 
as
 != 0);

1977 (
mp
 = 
	`gëq
(
q
)) != 0) {

1978 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

1979 i‡(
¥Ÿo
 < 0x8000 && (
as
 = 
	`föd_de°
(
us
,Öroto)) != 0) {

1980 i‡(!
	`ˇ≈ut
(
as
->
q
))

1982 
	`putq
(
as
->
q
, 
mp
);

1984 i‡(!
	`ˇ≈uäext
(
q
))

1986 
	`puäext
(
q
, 
mp
);

1989 i‡(
mp
) {

1990 
	`putbq
(
q
, 
mp
);

1993 
as
 = 
us
->
√xt
;ás != 0;ás =ás->next)

1994 
as
->
rblocked
 = 0;

2003 i‡(
us
->
lowîq
 != 0)

2004 
	`qíabÀ
(
	`RD
(
us
->
lowîq
));

2013 (
mp
 = 
	`gëq
(
q
)) != 0) {

2014 i‡(!
	`ˇ≈uäext
(
q
)) {

2015 
	`putbq
(
q
, 
mp
);

2018 #i‚de‡
NO_DLPI


2019 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

2020 
mp
->
b_Ωå
 +
PPP_HDRLEN
;

2021 
hdr
 = 
	`Ælocb
((
dl_unôd©a_öd_t
Ë+ 2 * (
uöt
),

2022 
BPRI_MED
);

2023 i‡(
hdr
 == 0) {

2025 
	`‰ìmsg
(
mp
);

2028 
hdr
->
b_d©≠
->
db_ty≥
 = 
M_PROTO
;

2029 
ud
 = (
dl_unôd©a_öd_t
 *Ë
hdr
->
b_w±r
;

2030 
hdr
->
b_w±r
 +(
dl_unôd©a_öd_t
Ë+ 2 * (
uöt
);

2031 
hdr
->
b_c⁄t
 = 
mp
;

2032 
ud
->
dl_¥imôive
 = 
DL_UNITDATA_IND
;

2033 
ud
->
dl_de°_addr_Àngth
 = (
uöt
);

2034 
ud
->
dl_de°_addr_off£t
 = (
dl_unôd©a_öd_t
);

2035 
ud
->
dl_§c_addr_Àngth
 = (
uöt
);

2036 
ud
->
dl_§c_addr_off£t
 = ud->
dl_de°_addr_off£t
 + (
uöt
);

2037 #i‡
DL_CURRENT_VERSION
 >= 2

2038 
ud
->
dl_group_addªss
 = 0;

2043 ((
uöt
 *)(
ud
 + 1))[0] = 
us
->
ªq_ßp
;

2044 ((
uöt
 *)(
ud
 + 1))[1] = 
us
->
ªq_ßp
;

2045 
	`puäext
(
q
, 
hdr
);

2047 
	`puäext
(
q
, 
mp
);

2056 i‡(
us
->
µa
)

2057 
	`qíabÀ
(
us
->
µa
->
q
);

2061 
	}
}

2063 
uµî°r_t
 *

2064 
	$föd_de°
(
µa
, 
¥Ÿo
)

2065 
uµî°r_t
 *
µa
;

2066 
¥Ÿo
;

2068 
uµî°r_t
 *
us
;

2070 
us
 = 
µa
->
√xt
; us != 0; us = us->next)

2071 i‡(
¥Ÿo
 =
us
->
ßp
)

2073  
us
;

2074 
	}
}

2076 #i‡
deföed
 (
SOL2
)

2081 
uµî°r_t
 *

2082 
	$föd_¥omisc
(
us
, 
¥Ÿo
)

2083 
uµî°r_t
 *
us
;

2084 
¥Ÿo
;

2087 i‡((
¥Ÿo
 !
PPP_IP
Ë&& (¥Ÿÿ!
PPP_IPV6
))

2088  (
uµî°r_t
 *)0;

2090  ; 
us
; u†us->
√xt
) {

2091 i‡((
us
->
Êags
 & 
US_PROMISC
Ë&& (us->
°©e
 =
DL_IDLE
))

2092  
us
;

2095  (
uµî°r_t
 *)0;

2096 
	}
}

2101 
mblk_t
 *

2102 
	$¥ïíd_ëhî
(
us
, 
mp
, 
¥Ÿo
)

2103 
uµî°r_t
 *
us
;

2104 
mblk_t
 *
mp
;

2105 
¥Ÿo
;

2107 
mblk_t
 *
eh
;

2108 
ty≥
;

2110 i‡((
eh
 = 
	`Ælocb
((
ëhî_hódî
), 
BPRI_HI
)) == 0) {

2111 
	`‰ìmsg
(
mp
);

2112  (
mblk_t
 *)0;

2115 i‡(
¥Ÿo
 =
PPP_IP
)

2116 
ty≥
 = 
ETHERTYPE_IP
;

2117 i‡(
¥Ÿo
 =
PPP_IPV6
)

2118 
ty≥
 = 
ETHERTYPE_IPV6
;

2120 
ty≥
 = 
¥Ÿo
;

2122 
eh
->
b_w±r
 +(
ëhî_hódî
);

2123 
	`bzîo
((
ˇddr_t
)
eh
->
b_Ωå
, (
ëhî_hódî
));

2124 ((
ëhî_hódî
 *)
eh
->
b_Ωå
)->
ëhî_ty≥
 = 
	`ht⁄s
(()
ty≥
);

2125 
eh
->
b_c⁄t
 = 
mp
;

2126  (
eh
);

2127 
	}
}

2132 
mblk_t
 *

2133 
	$¥ïíd_udöd
(
us
, 
mp
, 
¥Ÿo
)

2134 
uµî°r_t
 *
us
;

2135 
mblk_t
 *
mp
;

2136 
¥Ÿo
;

2138 
dl_unôd©a_öd_t
 *
dlu
;

2139 
mblk_t
 *
dh
;

2140 
size_t
 
size
;

2142 
size
 = (
dl_unôd©a_öd_t
);

2143 i‡((
dh
 = 
	`Ælocb
(
size
, 
BPRI_MED
)) == 0) {

2144 
	`‰ìmsg
(
mp
);

2145  (
mblk_t
 *)0;

2148 
dh
->
b_d©≠
->
db_ty≥
 = 
M_PROTO
;

2149 
dh
->
b_w±r
 = dh->
b_d©≠
->
db_lim
;

2150 
dh
->
b_Ωå
 = dh->
b_w±r
 - 
size
;

2152 
dlu
 = (
dl_unôd©a_öd_t
 *)
dh
->
b_Ωå
;

2153 
dlu
->
dl_¥imôive
 = 
DL_UNITDATA_IND
;

2154 
dlu
->
dl_de°_addr_Àngth
 = 0;

2155 
dlu
->
dl_de°_addr_off£t
 = (
dl_unôd©a_öd_t
);

2156 
dlu
->
dl_§c_addr_Àngth
 = 0;

2157 
dlu
->
dl_§c_addr_off£t
 = (
dl_unôd©a_öd_t
);

2158 
dlu
->
dl_group_addªss
 = 0;

2160 
dh
->
b_c⁄t
 = 
mp
;

2161  (
dh
);

2162 
	}
}

2168 
	$¥omisc_£ndup
(
µa
, 
mp
, 
¥Ÿo
, 
skù
)

2169 
uµî°r_t
 *
µa
;

2170 
mblk_t
 *
mp
;

2171 
¥Ÿo
, 
skù
;

2173 
mblk_t
 *
dup_mp
, *
dup_dup_mp
;

2174 
uµî°r_t
 *
¥us
, *
≈rus
;

2176 i‡((
¥us
 = 
	`föd_¥omisc
(
µa
, 
¥Ÿo
)) != 0) {

2177 i‡(
dup_mp
 = 
	`dupmsg
(
mp
)) {

2179 i‡(
skù
)

2180 
dup_mp
->
b_Ωå
 +
PPP_HDRLEN
;

2182  ; 
≈rus
 = 
	`föd_¥omisc
(
¥us
->
√xt
, 
¥Ÿo
);

2183 
¥us
 = 
≈rus
) {

2185 i‡(
dup_dup_mp
 = 
	`dupmsg
(
dup_mp
)) {

2186 i‡(
	`ˇ≈uäext
(
¥us
->
q
)) {

2187 i‡(
¥us
->
Êags
 & 
US_RAWDATA
) {

2188 
dup_dup_mp
 = 
	`¥ïíd_ëhî
(
¥us
, dup_dup_mp, 
¥Ÿo
);

2189 
	`puäext
(
¥us
->
q
, 
dup_dup_mp
);

2191 
dup_dup_mp
 = 
	`¥ïíd_udöd
(
¥us
, dup_dup_mp, 
¥Ÿo
);

2192 
	`puäext
(
¥us
->
q
, 
dup_dup_mp
);

2195 
	`DPRINT
("ppp_urput: dataÅoÖromisc q dropped\n");

2196 
	`‰ìmsg
(
dup_dup_mp
);

2201 i‡(
	`ˇ≈uäext
(
¥us
->
q
)) {

2202 i‡(
¥us
->
Êags
 & 
US_RAWDATA
) {

2203 
dup_mp
 = 
	`¥ïíd_ëhî
(
¥us
, dup_mp, 
¥Ÿo
);

2204 
	`puäext
(
¥us
->
q
, 
dup_mp
);

2206 
dup_mp
 = 
	`¥ïíd_udöd
(
¥us
, dup_mp, 
¥Ÿo
);

2207 
	`puäext
(
¥us
->
q
, 
dup_mp
);

2210 
	`DPRINT
("ppp_urput: dataÅoÖromisc q dropped\n");

2211 
	`‰ìmsg
(
dup_mp
);

2215 
	}
}

2225 
	$µ∂Ωut
(
q
, 
mp
)

2226 
queue_t
 *
q
;

2227 
mblk_t
 *
mp
;

2229 
queue_t
 *
uq
;

2230 
iocblk
 *
i›
;

2232 
mp
->
b_d©≠
->
db_ty≥
) {

2233 
M_IOCTL
:

2234 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

2235 
i›
->
ioc_îr‹
 = 
EINVAL
;

2236 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

2237 
	`qª∂y
(
q
, 
mp
);

2239 
M_FLUSH
:

2240 i‡(*
mp
->
b_Ωå
 & 
FLUSHR
)

2241 
	`Êushq
(
q
, 
FLUSHDATA
);

2242 i‡(*
mp
->
b_Ωå
 & 
FLUSHW
) {

2243 *
mp
->
b_Ωå
 &~
FLUSHR
;

2244 
	`qª∂y
(
q
, 
mp
);

2246 
	`‰ìmsg
(
mp
);

2254 i‡(!
TRYLOCK_LOWER_R
) {

2255 
	`putq
(
q
, 
mp
);

2262 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

2263 i‡(
uq
 == 0) {

2264 
UNLOCK_LOWER
;

2265 
	`DPRINT1
("µ∂Ωut: q = %x, uq = 0??\n", 
q
);

2266 
	`‰ìmsg
(
mp
);

2276 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || (
	`qsize
(
q
Ë=0 && 
	`ˇ≈ut
(
uq
)))

2277 
	`put
(
uq
, 
mp
);

2279 
	`putq
(
q
, 
mp
);

2281 
UNLOCK_LOWER
;

2283 
	}
}

2286 
	$µ∂r§v
(
q
)

2287 
queue_t
 *
q
;

2289 
mblk_t
 *
mp
;

2290 
queue_t
 *
uq
;

2297 
LOCK_LOWER_R
;

2298 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

2299 i‡(
uq
 == 0) {

2300 
UNLOCK_LOWER
;

2301 
	`Êushq
(
q
, 
FLUSHALL
);

2302 
	`DPRINT1
("µ∂r§v: q = %x, uq = 0??\n", 
q
);

2305 (
mp
 = 
	`gëq
(
q
)) != 0) {

2306 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || 
	`ˇ≈ut
(
uq
))

2307 
	`put
(
uq
, 
mp
);

2309 
	`putbq
(
q
, 
mp
);

2313 
UNLOCK_LOWER
;

2315 
	}
}

2318 
	$put˘l2
(
q
, 
ty≥
, 
code
, 
vÆ
)

2319 
queue_t
 *
q
;

2320 
ty≥
, 
code
, 
vÆ
;

2322 
mblk_t
 *
mp
;

2324 
mp
 = 
	`Ælocb
(2, 
BPRI_HI
);

2325 i‡(
mp
 == 0)

2327 
mp
->
b_d©≠
->
db_ty≥
 = 
ty≥
;

2328 
mp
->
b_w±r
[0] = 
code
;

2329 
mp
->
b_w±r
[1] = 
vÆ
;

2330 
mp
->
b_w±r
 += 2;

2331 
	`puäext
(
q
, 
mp
);

2333 
	}
}

2336 
	$put˘l4
(
q
, 
ty≥
, 
code
, 
vÆ
)

2337 
queue_t
 *
q
;

2338 
ty≥
, 
code
, 
vÆ
;

2340 
mblk_t
 *
mp
;

2342 
mp
 = 
	`Ælocb
(4, 
BPRI_HI
);

2343 i‡(
mp
 == 0)

2345 
mp
->
b_d©≠
->
db_ty≥
 = 
ty≥
;

2346 
mp
->
b_w±r
[0] = 
code
;

2347 ((*)
mp
->
b_w±r
)[1] = 
vÆ
;

2348 
mp
->
b_w±r
 += 4;

2349 
	`puäext
(
q
, 
mp
);

2351 
	}
}

2354 
	$debug_dump
(
q
, 
mp
)

2355 
queue_t
 *
q
;

2356 
mblk_t
 *
mp
;

2358 
uµî°r_t
 *
us
;

2359 
queue_t
 *
uq
, *
lq
;

2361 
	`DPRINT
("ppp upper streams:\n");

2362 
us
 = 
mö‹_devs
; u†!0; u†us->
√xtmn
) {

2363 
uq
 = 
us
->
q
;

2364 
	`DPRINT3
(" %d: q=%xÑlev=%d",

2365 
us
->
mn
, 
uq
, (uq? 
	`qsize
(uq): 0));

2366 
	`DPRINT3
(" wÀv=%d fœgs=0x%b", (
uq
? 
	`qsize
(
	`WR
(uq)): 0),

2367 
us
->
Êags
, "\020\1priv\2control\3blocked\4last");

2368 
	`DPRINT3
(" sèã=%x s≠=%xÑeq_ßp=%x", 
us
->
°©e
, us->
ßp
,

2369 
us
->
ªq_ßp
);

2370 i‡(
us
->
µa
 == 0)

2371 
	`DPRINT
("Öpa=?\n");

2373 
	`DPRINT1
("Ö∑=%d\n", 
us
->
µa
->
µa_id
);

2374 i‡(
us
->
Êags
 & 
US_CONTROL
) {

2375 
lq
 = 
us
->
lowîq
;

2376 
	`DPRINT3
(" control for %dÜq=%xÑlev=%d",

2377 
us
->
µa_id
, 
lq
, (lq? 
	`qsize
(
	`RD
(lq)): 0));

2378 
	`DPRINT3
(" wlev=%d mru=%d mtu=%d\n",

2379 (
lq
? 
	`qsize
÷q): 0), 
us
->
mru
, us->
mtu
);

2382 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

2383 
	`qª∂y
(
q
, 
mp
);

2384 
	}
}

2386 #ifde‡
FILTER_PACKETS


2387 
	~<√töë/ö_sy°m.h
>

2388 
	~<√töë/ù.h
>

2389 
	~<√töë/udp.h
>

2390 
	~<√töë/t˝.h
>

2392 
	#MAX_IPHDR
 128

	)

2402 
	spktfût_èb
 {

2403 
	m¥Ÿo
;

2404 
u_sh‹t
 
	mp‹t
;

2405 
u_sh‹t
 
	mok_if_lök_up
;

2406 } 
	gpktfût_èb
[] = {

2407 { 
IPPROTO_UDP
, 520, 1 },

2408 { 
IPPROTO_UDP
, 123, 1 },

2414 
	$ù_h¨d_fûãr
(
us
, 
mp
, 
outbound
)

2415 
uµî°r_t
 *
us
;

2416 
mblk_t
 *
mp
;

2417 
outbound
;

2419 
ù
 *ip;

2420 
pktfût_èb
 *
p·
;

2421 
mblk_t
 *
ãmp_mp
;

2422 
¥Ÿo
;

2423 
Àn
, 
hÀn
;

2427 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

2428 i‡(
us
->
Êags
 & 
US_DBGLOG
)

2429 
	`DPRINT3
("µp/%d: fûãr,ÖrŸo=0x%x, out=%d\n", 
us
->
mn
, 
¥Ÿo
, 
outbound
);

2431 
¥Ÿo
)

2433 
PPP_IP
:

2434 i‡((
mp
->
b_w±r
 - mp->
b_Ωå
Ë=
PPP_HDRLEN
 && mp->
b_c⁄t
 != 0) {

2435 
ãmp_mp
 = 
mp
->
b_c⁄t
;

2436 
Àn
 = 
	`msgdsize
(
ãmp_mp
);

2437 
hÀn
 = (
Àn
 < 
MAX_IPHDR
) ?Üen : MAX_IPHDR;

2438 
	`PULLUP
(
ãmp_mp
, 
hÀn
);

2439 i‡(
ãmp_mp
 == 0) {

2440 
	`DPRINT2
("ppp/%d: filter,ÖullupÇext failed,Üen=%d\n",

2441 
us
->
mn
, 
hÀn
);

2442 
mp
->
b_c⁄t
 = 0;

2443 
	`‰ìmsg
(
mp
);

2446 
ù
 = (ù *)
mp
->
b_c⁄t
->
b_Ωå
;

2449 
Àn
 = 
	`msgdsize
(
mp
);

2450 
hÀn
 = (
Àn
 < (
PPP_HDRLEN
+
MAX_IPHDR
)) ?Üen : (PPP_HDRLEN+MAX_IPHDR);

2451 
	`PULLUP
(
mp
, 
hÀn
);

2452 i‡(
mp
 == 0) {

2453 
	`DPRINT2
("ppp/%d: filter,Öullup failed,Üen=%d\n",

2454 
us
->
mn
, 
hÀn
);

2457 
ù
 = (ù *)(
mp
->
b_Ωå
 + 
PPP_HDRLEN
);

2465 
p·
=
pktfût_èb
;Ö·->
¥Ÿo
 != -1;Öft++) {

2466 i‡(
ù
->
ù_p
 =
p·
->
¥Ÿo
) {

2467 
p·
->
¥Ÿo
) {

2468 
IPPROTO_UDP
:

2469 i‡(((
udphdr
 *Ë&((*)
ù
)[ù->
ù_hl
])->
uh_dp‹t


2470 =
	`ht⁄s
(
p·
->
p‹t
)Ë
ídf‹
;

2472 
IPPROTO_TCP
:

2473 i‡(((
t˝hdr
 *Ë&((*)
ù
)[ù->
ù_hl
])->
th_dp‹t


2474 =
	`ht⁄s
(
p·
->
p‹t
)Ë
ídf‹
;

2479 
ídf‹
:

2480 i‡(
p·
->
¥Ÿo
 != -1) {

2481 i‡(
us
->
Êags
 & 
US_DBGLOG
)

2482 
	`DPRINT3
("ppp/%d: found IPÖkt,Öroto=0x%x (%d)\n",

2483 
us
->
mn
, 
p·
->
¥Ÿo
,Ö·->
p‹t
);

2486  
p·
->
ok_if_lök_up
? -1: 0;

2492 
	}
}

	@modules/ppp_ahdlc.c

65 
	~<sys/ty≥s.h
>

66 
	~<sys/∑øm.h
>

67 
	~<sys/°ªam.h
>

68 
	~<sys/î∫o.h
>

70 #ifde‡
SVR4


71 
	~<sys/c⁄f.h
>

72 
	~<sys/kmem.h
>

73 
	~<sys/cmn_îr.h
>

74 
	~<sys/ddi.h
>

76 
	~<sys/u£r.h
>

77 #ifde‡
__osf__


78 
	~<sys/cmn_îr.h
>

82 
	~<√t/µp_defs.h
>

83 
	~<√t/µpio.h
>

84 
	~"µp_mod.h
"

89 #i‡
deföed
(
SOL2
)

90 
	#USE_MUTEX


	)

100 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

101 
	töçoöãr_t
;

102 
	tuöçoöãr_t
;

104 
	töçoöãr_t
;

105 
	tuöçoöãr_t
;

108 
MOD_OPEN_DECL
(
ahdlc_›í
);

109 
MOD_CLOSE_DECL
(
ahdlc_˛o£
);

110 
ahdlc_wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

111 
ahdlc_Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

112 
ahdlc_ícode
 
__P
((
queue_t
 *, 
mblk_t
 *));

113 
ahdlc_decode
 
__P
((
queue_t
 *, 
mblk_t
 *));

114 
msg_byã
 
__P
((
mblk_t
 *, ));

116 #i‡
deföed
(
SOL2
)

121 
	#FLAG_TIME
 1500

	)

122 
	#ABS
(
x
Ë(x >0 ? x : (-x))

	)

128 
	#MSG_BYTE
(
mp
, 
i
Ë((iË< (mp)->
b_w±r
 - (mp)->
b_Ωå
? (mp)->b_rptr[i]: \

129 
	`msg_byã
((
mp
), (
i
)))

	)

134 
	#LCP_USE_DFLT
(
mp
Ë(1 <(
code
 = 
	`MSG_BYTE
((mp), 4)Ë&& codê<7)

	)

139 
moduÀ_öfo
 
	gmöfo
 = {

140 0x7d23, "µp_ahdl", 0, 
INFPSZ
, 32768, 512

143 
qöô
 
	gröô
 = {

144 
ahdlc_Ωut
, 
NULL
, 
ahdlc_›í
, 
ahdlc_˛o£
, NULL, &
möfo
, NULL

147 
qöô
 
	gwöô
 = {

148 
ahdlc_wput
, 
NULL
, NULL, NULL, NULL, &
möfo
, NULL

151 #i‡
deföed
(
SVR4
Ë&& !deföed(
SOL2
)

152 
	gphdldevÊag
 = 0;

153 
	#µp_ahdlcöfo
 
phdlöfo


	)

156 
°ªamèb
 
	gµp_ahdlcöfo
 = {

157 &
röô
,

158 &
wöô
,

159 
NULL
,

160 
NULL
,

161 #i‡
deföed
(
SUNOS4
)

162 
NULL


166 #i‡
deföed
(
SUNOS4
)

167 
	gµp_ahdlc_cou¡
 = 0;

173 
	sahdlc_°©e
 {

174 #i‡
deföed
(
USE_MUTEX
)

175 
kmuãx_t
 
	mlock
;

177 
	mÊags
;

178 
mblk_t
 *
	mrx_buf
;

179 
	mrx_buf_size
;

180 
ush‹t_t
 
	möfcs
;

181 
u_öt32_t
 
	mxaccm
[8];

182 
u_öt32_t
 
	møccm
;

183 
	mmtu
;

184 
	mmru
;

185 
	munô
;

186 
µp°©
 
	m°©s
;

187 #i‡
deföed
(
SOL2
)

188 
˛ock_t
 
	mÊag_time
;

189 
˛ock_t
 
	mlbﬁt
;

191 } 
	tahdlc_°©e_t
;

196 
	#ESCAPED
 0x100

	)

197 
	#IFLUSH
 0x200

	)

202 
	#RCV_FLAGS
 (
RCV_B7_1
|
RCV_B7_0
|
RCV_ODDP
|
RCV_EVNP
)

	)

207 
u_sh‹t
 
	gfc°ab
[256] = {

242 
u_öt32_t
 
	g∑rôyèb
[8] =

251 
	$MOD_OPEN
(
ahdlc_›í
)

253 
ahdlc_°©e_t
 *
°©e
;

258 i‡(
q
->
q_±r
) {

265 i‡(
sÊag
 !
MODOPEN
) {

269 
°©e
 = (
ahdlc_°©e_t
 *Ë
	`ALLOC_NOSLEEP
((ahdlc_state_t));

270 i‡(
°©e
 == 0)

271 
	`OPEN_ERROR
(
ENOSR
);

272 
	`bzîo
((
ˇddr_t
Ë
°©e
, (
ahdlc_°©e_t
));

274 
q
->
q_±r
 = (
ˇddr_t
Ë
°©e
;

275 
	`WR
(
q
)->
q_±r
 = (
ˇddr_t
Ë
°©e
;

277 #i‡
	`deföed
(
USE_MUTEX
)

278 
	`muãx_öô
(&
°©e
->
lock
, 
NULL
, 
MUTEX_DEFAULT
, NULL);

279 
	`muãx_íãr
(&
°©e
->
lock
);

282 
°©e
->
xaccm
[0] = ~0;

283 
°©e
->
xaccm
[3] = 0x60000000;

284 
°©e
->
mru
 = 
PPP_MRU
;

285 #i‡
	`deföed
(
SOL2
)

286 
°©e
->
Êag_time
 = 
	`drv_u£˘ohz
(
FLAG_TIME
);

289 #i‡
	`deföed
(
USE_MUTEX
)

290 
	`muãx_exô
(&
°©e
->
lock
);

293 #i‡
	`deföed
(
SUNOS4
)

294 
µp_ahdlc_cou¡
++;

297 
	`q¥ocs⁄
(
q
);

300 
	}
}

305 
	$MOD_CLOSE
(
ahdlc_˛o£
)

307 
ahdlc_°©e_t
 *
°©e
;

309 
	`q¥ocsoff
(
q
);

311 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

313 i‡(
°©e
 == 0) {

314 
	`DPRINT
("state == 0 ináhdlc_close\n");

318 #i‡
	`deföed
(
USE_MUTEX
)

319 
	`muãx_íãr
(&
°©e
->
lock
);

322 i‡(
°©e
->
rx_buf
 != 0) {

323 
	`‰ìmsg
(
°©e
->
rx_buf
);

324 
°©e
->
rx_buf
 = 0;

327 #i‡
	`deföed
(
USE_MUTEX
)

328 
	`muãx_exô
(&
°©e
->
lock
);

329 
	`muãx_de°roy
(&
°©e
->
lock
);

332 
	`FREE
(
q
->
q_±r
, (
ahdlc_°©e_t
));

333 
q
->
q_±r
 = 
NULL
;

334 
	`OTHERQ
(
q
)->
q_±r
 = 
NULL
;

336 #i‡
	`deföed
(
SUNOS4
)

337 i‡(
µp_ahdlc_cou¡
)

338 
µp_ahdlc_cou¡
--;

342 
	}
}

348 
	$ahdlc_wput
(
q
, 
mp
)

349 
queue_t
 *
q
;

350 
mblk_t
 *
mp
;

352 
ahdlc_°©e_t
 *
°©e
;

353 
iocblk
 *
i›
;

354 
îr‹
;

355 
mblk_t
 *
≈
;

356 
µp_°©s
 *
p•
;

358 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

359 i‡(
°©e
 == 0) {

360 
	`DPRINT
("state == 0 ináhdlc_wput\n");

361 
	`‰ìmsg
(
mp
);

365 
mp
->
b_d©≠
->
db_ty≥
) {

366 
M_DATA
:

371 
	`ahdlc_ícode
(
q
, 
mp
);

372 
	`‰ìmsg
(
mp
);

375 
M_IOCTL
:

376 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

377 
îr‹
 = 
EINVAL
;

378 
i›
->
ioc_cmd
) {

379 
PPPIO_XACCM
:

380 i‡((
i›
->
ioc_cou¡
 < (
u_öt32_t
)) ||

381 (
i›
->
ioc_cou¡
 > (
ext_accm
))) {

384 i‡(
mp
->
b_c⁄t
 == 0) {

385 
	`DPRINT1
("ahdlc_wput/%d: PPPIO_XACCM b_c⁄à0!\n", 
°©e
->
unô
);

388 #i‡
	`deföed
(
USE_MUTEX
)

389 
	`muãx_íãr
(&
°©e
->
lock
);

391 
	`bc›y
((
ˇddr_t
)
mp
->
b_c⁄t
->
b_Ωå
, (ˇddr_t)
°©e
->
xaccm
,

392 
i›
->
ioc_cou¡
);

393 
°©e
->
xaccm
[2] &= ~0x40000000;

394 
°©e
->
xaccm
[3] |= 0x60000000;

395 #i‡
	`deföed
(
USE_MUTEX
)

396 
	`muãx_exô
(&
°©e
->
lock
);

398 
i›
->
ioc_cou¡
 = 0;

399 
îr‹
 = 0;

402 
PPPIO_RACCM
:

403 i‡(
i›
->
ioc_cou¡
 !(
u_öt32_t
))

405 i‡(
mp
->
b_c⁄t
 == 0) {

406 
	`DPRINT1
("ahdlc_wput/%d: PPPIO_RACCM b_c⁄à0!\n", 
°©e
->
unô
);

409 #i‡
	`deföed
(
USE_MUTEX
)

410 
	`muãx_íãr
(&
°©e
->
lock
);

412 
	`bc›y
((
ˇddr_t
)
mp
->
b_c⁄t
->
b_Ωå
, (ˇddr_t)&
°©e
->
øccm
,

413 (
u_öt32_t
));

414 #i‡
	`deföed
(
USE_MUTEX
)

415 
	`muãx_exô
(&
°©e
->
lock
);

417 
i›
->
ioc_cou¡
 = 0;

418 
îr‹
 = 0;

421 
PPPIO_GCLEAN
:

422 
≈
 = 
	`Ælocb
((), 
BPRI_HI
);

423 i‡(
≈
 == 0) {

424 
îr‹
 = 
ENOSR
;

427 i‡(
mp
->
b_c⁄t
 != 0)

428 
	`‰ìmsg
(
mp
->
b_c⁄t
);

429 
mp
->
b_c⁄t
 = 
≈
;

430 #i‡
	`deföed
(
USE_MUTEX
)

431 
	`muãx_íãr
(&
°©e
->
lock
);

433 *(*)
≈
->
b_w±r
 = 
°©e
->
Êags
 & 
RCV_FLAGS
;

434 #i‡
	`deföed
(
USE_MUTEX
)

435 
	`muãx_exô
(&
°©e
->
lock
);

437 
≈
->
b_w±r
 += ();

438 
i›
->
ioc_cou¡
 = ();

439 
îr‹
 = 0;

442 
PPPIO_GETSTAT
:

443 
≈
 = 
	`Ælocb
((
µp_°©s
), 
BPRI_HI
);

444 i‡(
≈
 == 0) {

445 
îr‹
 = 
ENOSR
;

448 i‡(
mp
->
b_c⁄t
 != 0)

449 
	`‰ìmsg
(
mp
->
b_c⁄t
);

450 
mp
->
b_c⁄t
 = 
≈
;

451 
p•
 = (
µp_°©s
 *Ë
≈
->
b_w±r
;

452 
≈
->
b_w±r
 +(
µp_°©s
);

453 
	`bzîo
((
ˇddr_t
)
p•
, (
µp_°©s
));

454 
p•
->
p
 = 
°©e
->
°©s
;

455 
i›
->
ioc_cou¡
 = (
µp_°©s
);

456 
îr‹
 = 0;

459 
PPPIO_LASTMOD
:

461 
îr‹
 = 0;

465 
îr‹
 = -1;

469 i‡(
îr‹
 < 0)

470 
	`puäext
(
q
, 
mp
);

471 i‡(
îr‹
 == 0) {

472 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

473 
	`qª∂y
(
q
, 
mp
);

475 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

476 
i›
->
ioc_cou¡
 = 0;

477 
i›
->
ioc_îr‹
 = 
îr‹
;

478 
	`qª∂y
(
q
, 
mp
);

482 
M_CTL
:

483 *
mp
->
b_Ωå
) {

484 
PPPCTL_MTU
:

485 #i‡
	`deföed
(
USE_MUTEX
)

486 
	`muãx_íãr
(&
°©e
->
lock
);

488 
°©e
->
mtu
 = ((*)
mp
->
b_Ωå
)[1];

489 #i‡
	`deföed
(
USE_MUTEX
)

490 
	`muãx_exô
(&
°©e
->
lock
);

492 
	`‰ìmsg
(
mp
);

494 
PPPCTL_MRU
:

495 #i‡
	`deföed
(
USE_MUTEX
)

496 
	`muãx_íãr
(&
°©e
->
lock
);

498 
°©e
->
mru
 = ((*)
mp
->
b_Ωå
)[1];

499 #i‡
	`deföed
(
USE_MUTEX
)

500 
	`muãx_exô
(&
°©e
->
lock
);

502 
	`‰ìmsg
(
mp
);

504 
PPPCTL_UNIT
:

505 #i‡
	`deföed
(
USE_MUTEX
)

506 
	`muãx_íãr
(&
°©e
->
lock
);

508 
°©e
->
unô
 = 
mp
->
b_Ωå
[1];

509 #i‡
	`deföed
(
USE_MUTEX
)

510 
	`muãx_exô
(&
°©e
->
lock
);

514 
	`puäext
(
q
, 
mp
);

519 
	`puäext
(
q
, 
mp
);

523 
	}
}

529 
	$ahdlc_Ωut
(
q
, 
mp
)

530 
queue_t
 *
q
;

531 
mblk_t
 *
mp
;

533 
ahdlc_°©e_t
 *
°©e
;

535 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

536 i‡(
°©e
 == 0) {

537 
	`DPRINT
("state == 0 ináhdlc_rput\n");

538 
	`‰ìmsg
(
mp
);

542 
mp
->
b_d©≠
->
db_ty≥
) {

543 
M_DATA
:

544 
	`ahdlc_decode
(
q
, 
mp
);

547 
M_HANGUP
:

548 #i‡
	`deföed
(
USE_MUTEX
)

549 
	`muãx_íãr
(&
°©e
->
lock
);

551 i‡(
°©e
->
rx_buf
 != 0) {

553 
	`‰ìmsg
(
°©e
->
rx_buf
);

554 
°©e
->
rx_buf
 = 0;

556 
°©e
->
Êags
 = 
IFLUSH
;

557 #i‡
	`deföed
(
USE_MUTEX
)

558 
	`muãx_exô
(&
°©e
->
lock
);

560 
	`puäext
(
q
, 
mp
);

564 
	`puäext
(
q
, 
mp
);

567 
	}
}

572 
	#IN_TX_MAP
(
c
, 
m
Ë((m)[(cË>> 5] & (1 << ((cË& 0x1f)))

	)

575 
	$ahdlc_ícode
(
q
, 
mp
)

576 
queue_t
 *
q
;

577 
mblk_t
 *
mp
;

579 
ahdlc_°©e_t
 *
°©e
;

580 
u_öt32_t
 *
xaccm
, 
loc_xaccm
[8];

581 
ush‹t_t
 
fcs
;

582 
size_t
 
outmp_Àn
;

583 
mblk_t
 *
outmp
, *
tmp
;

584 
uch¨_t
 *
dp
, 
fcs_vÆ
;

585 
is_l˝
, 
code
;

586 #i‡
	`deföed
(
SOL2
)

587 
˛ock_t
 
lbﬁt
;

590 i‡(
	`msgdsize
(
mp
) < 4) {

594 
°©e
 = (
ahdlc_°©e_t
 *)
q
->
q_±r
;

595 #i‡
	`deföed
(
USE_MUTEX
)

596 
	`muãx_íãr
(&
°©e
->
lock
);

603 
outmp_Àn
 = (
	`msgdsize
(
mp
) << 1) +

604 ((
fcs
) << 2) +

605 ((
uch¨_t
) << 1);

607 
outmp
 = 
	`Ælocb
(
outmp_Àn
, 
BPRI_MED
);

608 i‡(
outmp
 =
NULL
) {

609 
°©e
->
°©s
.
µp_€º‹s
++;

610 #i‡
	`deföed
(
USE_MUTEX
)

611 
	`muãx_exô
(&
°©e
->
lock
);

613 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

617 #i‡
	`deföed
(
SOL2
)

622 i‡(
	`drv_gë∑rm
(
LBOLT
, &
lbﬁt
) != -1) {

623 i‡(
	`ABS
((
˛ock_t
)
lbﬁt
 - 
°©e
->lbﬁtË> sèã->
Êag_time
) {

624 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

626 
°©e
->
lbﬁt
 =Übolt;

628 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

635 i‡(
	`qsize
(
q
->
q_√xt
) == 0) {

636 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

644 
is_l˝
 = ((
	`MSG_BYTE
(
mp
, 0Ë=
PPP_ALLSTATIONS
) &&

645 (
	`MSG_BYTE
(
mp
, 1Ë=
PPP_UI
) &&

646 (
	`MSG_BYTE
(
mp
, 2Ë=(
PPP_LCP
 >> 8)) &&

647 (
	`MSG_BYTE
(
mp
, 3Ë=(
PPP_LCP
 & 0xff)) &&

648 
	`LCP_USE_DFLT
(
mp
));

650 
xaccm
 = 
°©e
->xaccm;

651 i‡(
is_l˝
) {

652 
	`bc›y
((
ˇddr_t
)
°©e
->
xaccm
, (ˇddr_t)
loc_xaccm
, (loc_xaccm));

653 
loc_xaccm
[0] = ~0;

654 
xaccm
 = 
loc_xaccm
;

657 
fcs
 = 
PPP_INITFCS
;

662 
tmp
 = 
mp
;Åmp;Åm∞tmp->
b_c⁄t
) {

663 i‡(
tmp
->
b_d©≠
->
db_ty≥
 =
M_DATA
) {

664 
dp
 = 
tmp
->
b_Ωå
; d∞<Åmp->
b_w±r
; dp++) {

665 
fcs
 = 
	`PPP_FCS
(fcs, *
dp
);

666 i‡(
	`IN_TX_MAP
(*
dp
, 
xaccm
)) {

667 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

668 *
outmp
->
b_w±r
++ = *
dp
 ^ 
PPP_TRANS
;

670 *
outmp
->
b_w±r
++ = *
dp
;

682 
fcs_vÆ
 = (
fcs
 ^ 0xffff) & 0xff;

683 i‡(
	`IN_TX_MAP
(
fcs_vÆ
, 
xaccm
)) {

684 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

685 *
outmp
->
b_w±r
++ = 
fcs_vÆ
 ^ 
PPP_TRANS
;

687 *
outmp
->
b_w±r
++ = 
fcs_vÆ
;

690 
fcs_vÆ
 = ((
fcs
 ^ 0xffff) >> 8) & 0xff;

691 i‡(
	`IN_TX_MAP
(
fcs_vÆ
, 
xaccm
)) {

692 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

693 *
outmp
->
b_w±r
++ = 
fcs_vÆ
 ^ 
PPP_TRANS
;

695 *
outmp
->
b_w±r
++ = 
fcs_vÆ
;

701 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

703 
°©e
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
outmp
);

704 
°©e
->
°©s
.
µp_›ackës
++;

706 #i‡
	`deföed
(
USE_MUTEX
)

707 
	`muãx_exô
(&
°©e
->
lock
);

710 
	`puäext
(
q
, 
outmp
);

712 
	}
}

717 
	#IN_RX_MAP
(
c
, 
m
Ë((((Ë(
uch¨_t
) (c)) < 0x20) && \

718 (
m
Ë& (1 << (
c
)))

	)

725 
	$ahdlc_decode
(
q
, 
mp
)

726 
queue_t
 *
q
;

727 
mblk_t
 *
mp
;

729 
ahdlc_°©e_t
 *
°©e
;

730 
mblk_t
 *
om
;

731 
uch¨_t
 *
dp
;

733 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

735 #i‡
	`deföed
(
USE_MUTEX
)

736 
	`muãx_íãr
(&
°©e
->
lock
);

739 
°©e
->
°©s
.
µp_ibyãs
 +
	`msgdsize
(
mp
);

741 ; 
mp
 !0; 
om
 = mp->
b_c⁄t
, 
	`‰ìb
(mp), mp = om)

742 
dp
 = 
mp
->
b_Ωå
; d∞< mp->
b_w±r
; dp++) {

749 i‡(*
dp
 & 0x80)

750 
°©e
->
Êags
 |
RCV_B7_1
;

752 
°©e
->
Êags
 |
RCV_B7_0
;

754 i‡(
∑rôyèb
[*
dp
 >> 5] & (1 << (*dp & 0x1f)))

755 
°©e
->
Êags
 |
RCV_ODDP
;

757 
°©e
->
Êags
 |
RCV_EVNP
;

762 i‡(*
dp
 =
PPP_FLAG
) {

768 i‡((
°©e
->
Êags
 & 
IFLUSH
) ||

769 (
°©e
->
rx_buf
 == 0) ||

770 (
	`msgdsize
(
°©e
->
rx_buf
) == 0)) {

772 
°©e
->
Êags
 &~
IFLUSH
;

781 
om
 = 
°©e
->
rx_buf
;

783 i‡(
°©e
->
öfcs
 =
PPP_GOODFCS
) {

784 
°©e
->
°©s
.
µp_ùackës
++;

785 
	`adjmsg
(
om
, -
PPP_FCSLEN
);

786 
	`puäext
(
q
, 
om
);

788 
	`DPRINT2
("ppp%d: bad fcs (len=%d)\n",

789 
°©e
->
unô
, 
	`msgdsize
(°©e->
rx_buf
));

790 
	`‰ìmsg
(
°©e
->
rx_buf
);

791 
°©e
->
Êags
 &~(
IFLUSH
 | 
ESCAPED
);

792 
°©e
->
°©s
.
µp_õº‹s
++;

793 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

796 
°©e
->
rx_buf
 = 0;

800 i‡(
°©e
->
Êags
 & 
IFLUSH
) {

810 i‡(
°©e
->
rx_buf
 == 0) {

811 
°©e
->
rx_buf_size
 = (°©e->
mru
 < 
PPP_MRU
 ? PPP_MRU : state->mru);

812 
°©e
->
rx_buf_size
 +((
u_öt32_t
) << 3);

813 
°©e
->
rx_buf
 = 
	`Ælocb
(°©e->
rx_buf_size
, 
BPRI_MED
);

818 i‡(
°©e
->
rx_buf
 == 0) {

819 
°©e
->
Êags
 |
IFLUSH
;

822 
°©e
->
Êags
 &~(
IFLUSH
 | 
ESCAPED
);

823 
°©e
->
öfcs
 = 
PPP_INITFCS
;

826 i‡(*
dp
 =
PPP_ESCAPE
) {

827 
°©e
->
Êags
 |
ESCAPED
;

835 i‡(
°©e
->
Êags
 & 
ESCAPED
) {

836 *
dp
 ^
PPP_TRANS
;

837 
°©e
->
Êags
 &~
ESCAPED
;

838 } i‡(
	`IN_RX_MAP
(*
dp
, 
°©e
->
øccm
))

846 i‡(
	`msgdsize
(
°©e
->
rx_buf
Ë< sèã->
rx_buf_size
) {

847 
°©e
->
öfcs
 = 
	`PPP_FCS
(°©e->öfcs, *
dp
);

848 *
°©e
->
rx_buf
->
b_w±r
++ = *
dp
;

850 
	`DPRINT2
("ppp%d: frameÅooÜong (%d)\n",

851 
°©e
->
unô
, 
	`msgdsize
(°©e->
rx_buf
));

852 
	`‰ìmsg
(
°©e
->
rx_buf
);

853 
°©e
->
rx_buf
 = 0;

854 
°©e
->
Êags
 |
IFLUSH
;

858 #i‡
	`deföed
(
USE_MUTEX
)

859 
	`muãx_exô
(&
°©e
->
lock
);

861 
	}
}

864 
	$msg_byã
(
mp
, 
i
)

865 
mblk_t
 *
mp
;

866 
i
;

868 
mp
 !0 && 
i
 >mp->
b_w±r
 - mp->
b_Ωå
)

869 
mp
 = mp->
b_c⁄t
;

870 i‡(
mp
 == 0)

872  
mp
->
b_Ωå
[
i
];

873 
	}
}

	@modules/ppp_comp.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/∑øm.h
>

44 
	~<sys/î∫o.h
>

45 
	~<sys/°ªam.h
>

47 #ifde‡
SVR4


48 
	~<sys/c⁄f.h
>

49 
	~<sys/cmn_îr.h
>

50 
	~<sys/ddi.h
>

52 
	~<sys/u£r.h
>

53 #ifde‡
__osf__


54 
	~<sys/cmn_îr.h
>

58 
	~<√t/µp_defs.h
>

59 
	~<√t/µpio.h
>

60 
	~"µp_mod.h
"

62 #ifde‡
__osf__


63 
	~<sys/mbuf.h
>

64 
	~<sys/¥Ÿosw.h
>

67 
	~<√töë/ö.h
>

68 
	~<√töë/ö_sy°m.h
>

69 
	~<√töë/ù.h
>

70 
	~<√t/vjcom¥ess.h
>

72 
	#PACKETPTR
 
mblk_t
 *

	)

73 
	~<√t/µp-comp.h
>

75 
MOD_OPEN_DECL
(
µp_comp_›í
);

76 
MOD_CLOSE_DECL
(
µp_comp_˛o£
);

77 
µp_comp_Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

78 
µp_comp_r§v
 
__P
((
queue_t
 *));

79 
µp_comp_wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

80 
µp_comp_w§v
 
__P
((
queue_t
 *));

81 
µp_comp_c˝
 
__P
((
queue_t
 *, 
mblk_t
 *, ));

82 
msg_byã
 
__P
((
mblk_t
 *, ));

85 
	#MSG_BYTE
(
mp
, 
i
Ë((iË< (mp)->
b_w±r
 - (mp)->
b_Ωå
? (mp)->b_rptr[i]: \

86 
	`msg_byã
((
mp
), (
i
)))

	)

89 
	#LCP_USE_DFLT
(
mp
Ë(1 <(
code
 = 
	`MSG_BYTE
((mp), 4)Ë&& codê<7)

	)

91 
	#PPP_COMP_ID
 0xbadf

	)

92 
moduÀ_öfo
 
	gmöfo
 = {

93 #ifde‡
PRIOQ


94 
PPP_COMP_ID
, "µp_comp", 0, 
INFPSZ
, 16512, 16384,

96 
PPP_COMP_ID
, "µp_comp", 0, 
INFPSZ
, 16384, 4096,

100 
qöô
 
	gr_öô
 = {

101 
µp_comp_Ωut
, 
µp_comp_r§v
, 
µp_comp_›í
, 
µp_comp_˛o£
,

102 
NULL
, &
möfo
, NULL

105 
qöô
 
	gw_öô
 = {

106 
µp_comp_wput
, 
µp_comp_w§v
, 
NULL
, NULL, NULL, &
möfo
, NULL

109 #i‡
deföed
(
SVR4
Ë&& !deföed(
SOL2
)

110 
	gpcmpdevÊag
 = 0;

111 
	#µp_compöfo
 
pcmpöfo


	)

113 
°ªamèb
 
	gµp_compöfo
 = {

114 &
r_öô
, &
w_öô
, 
NULL
, NULL

117 
	gµp_comp_cou¡
;

119 #ifde‡
__osf__


121 
µp_comp_Æloc
 
__P
((
comp_°©e_t
 *));

122 
	smemªq
 {

123 
	mcomp_›ts
[20];

124 
	mcmd
;

125 
	mthªad_°©us
;

126 *
	mªtu∫ed_mem
;

127 } 
	tmemªq_t
;

131 
	scomp_°©e
 {

132 
	mÊags
;

133 
	mmru
;

134 
	mmtu
;

135 
	munô
;

136 
com¥ess‹
 *
	mxcomp
;

137 *
	mx°©e
;

138 
com¥ess‹
 *
	mrcomp
;

139 *
	mr°©e
;

140 
vjcom¥ess
 
	mvj_comp
;

141 
	mvj_œ°_õº‹s
;

142 
µp°©
 
	m°©s
;

143 #ifde‡
__osf__


144 
memªq_t
 
	mmemªq
;

145 
thªad_t
 
	mthªad
;

147 } 
	tcomp_°©e_t
;

150 #ifde‡
__osf__


151 
èsk_t
 
fú°_èsk
;

155 
	#CCP_ERR
 (
CCP_ERROR
 | 
CCP_FATALERROR
)

	)

156 
	#LAST_MOD
 0x1000000

	)

157 
	#DBGLOG
 0x2000000

	)

159 
	#MAX_IPHDR
 128

	)

160 
	#MAX_VJHDR
 20

	)

162 #unde‡
MIN


163 
	#MIN
(
a
, 
b
Ë(◊Ë< (b)? (a): (b))

	)

169 #i‡
DO_BSD_COMPRESS


170 
com¥ess‹
 
µp_bsd_com¥ess
;

172 #i‡
DO_DEFLATE


173 
com¥ess‹
 
µp_deÊ©e
, 
µp_deÊ©e_dø·
;

176 
com¥ess‹
 *
	gµp_com¥ess‹s
[] = {

177 #i‡
DO_BSD_COMPRESS


178 &
µp_bsd_com¥ess
,

180 #i‡
DO_DEFLATE


181 &
µp_deÊ©e
,

182 &
µp_deÊ©e_dø·
,

184 
NULL


190 
	$MOD_OPEN
(
µp_comp_›í
)

192 
comp_°©e_t
 *
˝
;

193 #ifde‡
__osf__


194 
thªad_t
 
thªad
;

197 i‡(
q
->
q_±r
 =
NULL
) {

198 
˝
 = (
comp_°©e_t
 *Ë
	`ALLOC_SLEEP
((comp_state_t));

199 i‡(
˝
 =
NULL
)

200 
	`OPEN_ERROR
(
ENOSR
);

201 
	`bzîo
((
ˇddr_t
)
˝
, (
comp_°©e_t
));

202 
	`WR
(
q
)->
q_±r
 = q->q_±∏(
ˇddr_t
Ë
˝
;

203 
˝
->
mru
 = 
PPP_MRU
;

204 
˝
->
mtu
 = 
PPP_MTU
;

205 
˝
->
x°©e
 = 
NULL
;

206 
˝
->
r°©e
 = 
NULL
;

207 
	`vj_com¥ess_öô
(&
˝
->
vj_comp
, -1);

208 #ifde‡
__osf__


209 i‡(!(
thªad
 = 
	`kî√l_thªad_w_¨g
(
fú°_èsk
, 
µp_comp_Æloc
, (*)
˝
)))

210 
	`OPEN_ERROR
(
ENOSR
);

211 
˝
->
thªad
 =Åhread;

213 ++
µp_comp_cou¡
;

214 
	`q¥ocs⁄
(
q
);

217 
	}
}

219 
	$MOD_CLOSE
(
µp_comp_˛o£
)

221 
comp_°©e_t
 *
˝
;

223 
	`q¥ocsoff
(
q
);

224 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

225 i‡(
˝
 !
NULL
) {

226 i‡(
˝
->
x°©e
 !
NULL
)

227 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

228 i‡(
˝
->
r°©e
 !
NULL
)

229 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

230 #ifde‡
__osf__


231 i‡(!
˝
->
thªad
)

232 
	`¥ötf
("ppp_comp_close: NULLÅhread!\n");

234 
	`thªad_ãrmö©e
(
˝
->
thªad
);

236 
	`FREE
(
˝
, (
comp_°©e_t
));

237 
q
->
q_±r
 = 
NULL
;

238 
	`OTHERQ
(
q
)->
q_±r
 = 
NULL
;

239 --
µp_comp_cou¡
;

242 
	}
}

244 #ifde‡
__osf__


253 
	$µp_comp_Æloc
(
comp_°©e_t
 *
˝
)

255 
Àn
, 
cmd
;

256 *
com¥ess‹_›ti⁄s
;

257 
thªad_t
 
thªad
;

258 *(*
comp_Æloˇt‹
)();

261 #i‡
	`deföed
(
MAJOR_VERSION
) && (MAJOR_VERSION <= 2)

266 
thªad
 = 
	`cuºít_thªad
();

267 
˝
 = 
thªad
->
ª∂y_p‹t
;

268 
thªad
->
ª∂y_p‹t
 = 
PORT_NULL
;

273 
	`as£π_waô
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
, 
TRUE
);

274 
	`thªad_block
();

276 i‡(
	`thªad_should_hÆt
(
	`cuºít_thªad
()))

277 
	`thªad_hÆt_£lf
();

278 
cmd
 = 
˝
->
memªq
.cmd;

279 
com¥ess‹_›ti⁄s
 = &
˝
->
memªq
.
comp_›ts
[0];

280 
Àn
 = 
com¥ess‹_›ti⁄s
[1];

281 i‡(
cmd
 =
PPPIO_XCOMP
) {

282 
˝
->
memªq
.
ªtu∫ed_mem
 = cp->
xcomp
->
	`comp_Æloc
(
com¥ess‹_›ti⁄s
, 
Àn
);

283 i‡(!
˝
->
memªq
.
ªtu∫ed_mem
) {

284 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

286 
˝
->
memªq
.
thªad_°©us
 = 0;

289 
˝
->
memªq
.
ªtu∫ed_mem
 = cp->
rcomp
->
	`decomp_Æloc
(
com¥ess‹_›ti⁄s
, 
Àn
);

290 i‡(!
˝
->
memªq
.
ªtu∫ed_mem
) {

291 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

293 
˝
->
memªq
.
thªad_°©us
 = 0;

297 
	}
}

321 
	$µp_comp_wput
(
q
, 
mp
)

322 
queue_t
 *
q
;

323 
mblk_t
 *
mp
;

325 
iocblk
 *
i›
;

326 
comp_°©e_t
 *
˝
;

327 
îr‹
, 
Àn
, 
n
;

328 
Êags
, 
mask
;

329 
mblk_t
 *
≈
;

330 
com¥ess‹
 **
comp
;

331 
µp_°©s
 *
p•
;

332 
µp_comp_°©s
 *
c•
;

333 *
›t_d©a
;

334 
nx¶Ÿs
, 
ƒ¶Ÿs
;

336 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

337 i‡(
˝
 == 0) {

338 
	`DPRINT
("cp == 0 inÖpp_comp_wput\n");

339 
	`‰ìmsg
(
mp
);

343 
mp
->
b_d©≠
->
db_ty≥
) {

345 
M_DATA
:

346 
	`putq
(
q
, 
mp
);

349 
M_IOCTL
:

350 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

351 
îr‹
 = 
EINVAL
;

352 
i›
->
ioc_cmd
) {

354 
PPPIO_CFLAGS
:

356 i‡(
i›
->
ioc_cou¡
 != 2 * ())

358 i‡(
mp
->
b_c⁄t
 == 0) {

359 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_CFLAGS b_c⁄à0!\n", 
˝
->
unô
);

362 
Êags
 = ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[0];

363 
mask
 = ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[1];

364 
˝
->
Êags
 = (˝->Êag†& ~
mask
) | (flags & mask);

365 i‡((
mask
 & 
CCP_ISOPEN
Ë&& (
Êags
 & CCP_ISOPEN) == 0) {

366 i‡(
˝
->
x°©e
 !
NULL
) {

367 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

368 
˝
->
x°©e
 = 
NULL
;

370 i‡(
˝
->
r°©e
 !
NULL
) {

371 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

372 
˝
->
r°©e
 = 
NULL
;

374 
˝
->
Êags
 &~
CCP_ISUP
;

376 
îr‹
 = 0;

377 
i›
->
ioc_cou¡
 = ();

378 ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[0] = 
˝
->
Êags
;

379 
mp
->
b_c⁄t
->
b_w±r
 = mp->b_c⁄t->
b_Ωå
 + ();

382 
PPPIO_VJINIT
:

386 i‡(
i›
->
ioc_cou¡
 != 2)

388 i‡(
mp
->
b_c⁄t
 == 0) {

389 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_VJINIT b_c⁄à0!\n", 
˝
->
unô
);

392 
nx¶Ÿs
 = 
mp
->
b_c⁄t
->
b_Ωå
[0] + 1;

393 
ƒ¶Ÿs
 = 
mp
->
b_c⁄t
->
b_Ωå
[1] + 1;

394 i‡(
nx¶Ÿs
 > 
MAX_STATES
 || 
ƒ¶Ÿs
 > MAX_STATES)

396 
	`vj_com¥ess_öô
(&
˝
->
vj_comp
, 
nx¶Ÿs
);

397 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

398 
îr‹
 = 0;

399 
i›
->
ioc_cou¡
 = 0;

402 
PPPIO_XCOMP
:

403 
PPPIO_RCOMP
:

404 i‡(
i›
->
ioc_cou¡
 <= 0)

406 i‡(
mp
->
b_c⁄t
 == 0) {

407 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_[XR]COMP b_c⁄à0!\n", 
˝
->
unô
);

410 
›t_d©a
 = 
mp
->
b_c⁄t
->
b_Ωå
;

411 
Àn
 = 
mp
->
b_c⁄t
->
b_w±r
 - 
›t_d©a
;

412 i‡(
Àn
 > 
i›
->
ioc_cou¡
)

413 
Àn
 = 
i›
->
ioc_cou¡
;

414 i‡(
›t_d©a
[1] < 2 || o±_d©a[1] > 
Àn
)

416 
comp
 = 
µp_com¥ess‹s
; *com∞!
NULL
; ++comp)

417 i‡((*
comp
)->
com¥ess_¥Ÿo
 =
›t_d©a
[0]) {

419 
îr‹
 = 0;

420 #i‚de‡
__osf__


421 i‡(
i›
->
ioc_cmd
 =
PPPIO_XCOMP
) {

426 i‡(
˝
->
x°©e
 !
NULL
) {

427 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

428 
˝
->
x°©e
 = 
NULL
;

430 
˝
->
xcomp
 = *
comp
;

431 
˝
->
x°©e
 = (*
comp
)->
	`comp_Æloc
(
›t_d©a
, 
Àn
);

432 i‡(
˝
->
x°©e
 =
NULL
)

433 
îr‹
 = 
ENOSR
;

435 i‡(
˝
->
r°©e
 !
NULL
) {

436 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

437 
˝
->
r°©e
 = 
NULL
;

439 
˝
->
rcomp
 = *
comp
;

440 
˝
->
r°©e
 = (*
comp
)->
	`decomp_Æloc
(
›t_d©a
, 
Àn
);

441 i‡(
˝
->
r°©e
 =
NULL
)

442 
îr‹
 = 
ENOSR
;

445 i‡((
îr‹
 = 
˝
->
memªq
.
thªad_°©us
Ë!
EAGAIN
)

446 i‡(
i›
->
ioc_cmd
 =
PPPIO_XCOMP
) {

447 i‡(
˝
->
x°©e
) {

448 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

449 
˝
->
x°©e
 = 0;

453 i‡( (
˝
->
memªq
.
comp_›ts
Ë< 
Àn
) {

454 
	`¥ötf
("ˇn'àh™dÀ o±i⁄†f‹ com¥ess‹ %d (%d)\n", 
›t_d©a
[0],

455 
›t_d©a
[1]);

456 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

457 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

461 i‡(
˝
->
memªq
.
thªad_°©us
 =0 && !˝->memªq.
ªtu∫ed_mem
) {

462 
	`bc›y
(
›t_d©a
, 
˝
->
memªq
.
comp_›ts
, 
Àn
);

463 
˝
->
memªq
.
cmd
 = 
PPPIO_XCOMP
;

464 
˝
->
xcomp
 = *
comp
;

465 
îr‹
 = 
˝
->
memªq
.
thªad_°©us
 = 
EAGAIN
;

466 
	`thªad_wakeup
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
);

468 
˝
->
x°©e
 = cp->
memªq
.
ªtu∫ed_mem
;

469 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

470 
˝
->
memªq
.
thªad_°©us
 = 0;

473 i‡(
˝
->
r°©e
) {

474 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

475 
˝
->
r°©e
 = 
NULL
;

477 i‡( (
˝
->
memªq
.
comp_›ts
Ë< 
Àn
) {

478 
	`¥ötf
("ˇn'àh™dÀ o±i⁄†f‹ com¥ess‹ %d (%d)\n", 
›t_d©a
[0],

479 
›t_d©a
[1]);

480 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

481 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

483 i‡(
˝
->
memªq
.
thªad_°©us
 =0 && !˝->memªq.
ªtu∫ed_mem
) {

484 
	`bc›y
(
›t_d©a
, 
˝
->
memªq
.
comp_›ts
, 
Àn
);

485 
˝
->
memªq
.
cmd
 = 
PPPIO_RCOMP
;

486 
˝
->
rcomp
 = *
comp
;

487 
îr‹
 = 
˝
->
memªq
.
thªad_°©us
 = 
EAGAIN
;

488 
	`thªad_wakeup
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
);

490 
˝
->
r°©e
 = cp->
memªq
.
ªtu∫ed_mem
;

491 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

492 
˝
->
memªq
.
thªad_°©us
 = 0;

498 
i›
->
ioc_cou¡
 = 0;

501 
PPPIO_GETSTAT
:

502 i‡((
˝
->
Êags
 & 
LAST_MOD
) == 0) {

503 
îr‹
 = -1;

506 
≈
 = 
	`Ælocb
((
µp_°©s
), 
BPRI_HI
);

507 i‡(
≈
 == 0) {

508 
îr‹
 = 
ENOSR
;

511 i‡(
mp
->
b_c⁄t
 != 0)

512 
	`‰ìmsg
(
mp
->
b_c⁄t
);

513 
mp
->
b_c⁄t
 = 
≈
;

514 
p•
 = (
µp_°©s
 *Ë
≈
->
b_w±r
;

515 
≈
->
b_w±r
 +(
µp_°©s
);

516 
i›
->
ioc_cou¡
 = (
µp_°©s
);

517 
p•
->
p
 = 
˝
->
°©s
;

518 
p•
->
vj
 = 
˝
->
vj_comp
.
°©s
;

519 
îr‹
 = 0;

522 
PPPIO_GETCSTAT
:

523 
≈
 = 
	`Ælocb
((
µp_comp_°©s
), 
BPRI_HI
);

524 i‡(
≈
 == 0) {

525 
îr‹
 = 
ENOSR
;

528 i‡(
mp
->
b_c⁄t
 != 0)

529 
	`‰ìmsg
(
mp
->
b_c⁄t
);

530 
mp
->
b_c⁄t
 = 
≈
;

531 
c•
 = (
µp_comp_°©s
 *Ë
≈
->
b_w±r
;

532 
≈
->
b_w±r
 +(
µp_comp_°©s
);

533 
i›
->
ioc_cou¡
 = (
µp_comp_°©s
);

534 
	`bzîo
((
ˇddr_t
)
c•
, (
µp_comp_°©s
));

535 i‡(
˝
->
x°©e
 != 0)

536 (*
˝
->
xcomp
->
comp_°©
)(˝->
x°©e
, &
c•
->
c
);

537 i‡(
˝
->
r°©e
 != 0)

538 (*
˝
->
rcomp
->
decomp_°©
)(˝->
r°©e
, &
c•
->
d
);

539 
îr‹
 = 0;

542 
PPPIO_DEBUG
:

543 i‡(
i›
->
ioc_cou¡
 != ())

545 i‡(
mp
->
b_c⁄t
 == 0) {

546 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_DEBUG b_c⁄à0!\n", 
˝
->
unô
);

549 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

550 i‡(
n
 =
PPPDBG_LOG
 + 
PPPDBG_COMP
) {

551 
	`DPRINT1
("µp_comp%d: debugÜogÉ«bÀd\n", 
˝
->
unô
);

552 
˝
->
Êags
 |
DBGLOG
;

553 
îr‹
 = 0;

554 
i›
->
ioc_cou¡
 = 0;

556 
îr‹
 = -1;

560 
PPPIO_LASTMOD
:

561 
˝
->
Êags
 |
LAST_MOD
;

562 
îr‹
 = 0;

566 
îr‹
 = -1;

570 i‡(
îr‹
 < 0)

571 
	`puäext
(
q
, 
mp
);

572 i‡(
îr‹
 == 0) {

573 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

574 
	`qª∂y
(
q
, 
mp
);

576 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

577 
i›
->
ioc_îr‹
 = 
îr‹
;

578 
i›
->
ioc_cou¡
 = 0;

579 
	`qª∂y
(
q
, 
mp
);

583 
M_CTL
:

584 *
mp
->
b_Ωå
) {

585 
PPPCTL_MTU
:

586 
˝
->
mtu
 = ((*)
mp
->
b_Ωå
)[1];

588 
PPPCTL_MRU
:

589 
˝
->
mru
 = ((*)
mp
->
b_Ωå
)[1];

591 
PPPCTL_UNIT
:

592 
˝
->
unô
 = 
mp
->
b_Ωå
[1];

595 
	`puäext
(
q
, 
mp
);

599 
	`puäext
(
q
, 
mp
);

603 
	}
}

606 
	$µp_comp_w§v
(
q
)

607 
queue_t
 *
q
;

609 
mblk_t
 *
mp
, *
cmp
 = 
NULL
;

610 
comp_°©e_t
 *
˝
;

611 
Àn
, 
¥Ÿo
, 
ty≥
, 
hÀn
, 
code
;

612 
ù
 *ip;

613 *
vjhdr
, *
dp
;

615 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

616 i‡(
˝
 == 0) {

617 
	`DPRINT
("cp == 0 inÖpp_comp_wsrv\n");

621 (
mp
 = 
	`gëq
(
q
)) != 0) {

623 #ifde‡
PRIOQ


624 i‡(!
	`bˇ≈uäext
(
q
,
mp
->
b_b™d
))

626 i‡(!
	`ˇ≈uäext
(
q
))

629 
	`putbq
(
q
, 
mp
);

636 
Àn
 = 
	`msgdsize
(
mp
);

637 i‡(
Àn
 < 
PPP_HDRLEN
) {

638 
	`DPRINT1
("µp_comp_w§v: bogu†sh‹à∑ckë (%d)\n", 
Àn
);

639 
	`‰ìmsg
(
mp
);

640 
˝
->
°©s
.
µp_€º‹s
++;

641 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

644 
¥Ÿo
 = (
	`MSG_BYTE
(
mp
, 2) << 8) + MSG_BYTE(mp, 3);

650 i‡(
¥Ÿo
 =
PPP_CCP
)

651 
hÀn
 = 
Àn
;

652 i‡(
¥Ÿo
 =
PPP_IP
)

653 
hÀn
 = 
PPP_HDRLEN
 + 
MAX_IPHDR
;

655 
hÀn
 = 
PPP_HDRLEN
;

656 i‡(
hÀn
 > 
Àn
)

657 
hÀn
 = 
Àn
;

658 i‡(
mp
->
b_w±r
 < mp->
b_Ωå
 + 
hÀn
 || mp->
b_d©≠
->
db_ªf
 > 1) {

659 
	`PULLUP
(
mp
, 
hÀn
);

660 i‡(
mp
 == 0) {

661 
	`DPRINT1
("µp_comp_w§v:ÖuŒu∞Áûed (%d)\n", 
hÀn
);

662 
˝
->
°©s
.
µp_€º‹s
++;

663 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

671 i‡(
¥Ÿo
 =
PPP_IP
 && (
˝
->
Êags
 & 
COMP_VJC
)) {

672 
ù
 = (ù *Ë(
mp
->
b_Ωå
 + 
PPP_HDRLEN
);

673 i‡(
ù
->
ù_p
 =
IPPROTO_TCP
) {

674 
ty≥
 = 
	`vj_com¥ess_t˝
(
ù
, 
Àn
 - 
PPP_HDRLEN
, &
˝
->
vj_comp
,

675 (
˝
->
Êags
 & 
COMP_VJCCID
), &
vjhdr
);

676 
ty≥
) {

677 
TYPE_UNCOMPRESSED_TCP
:

678 
mp
->
b_Ωå
[3] = 
¥Ÿo
 = 
PPP_VJC_UNCOMP
;

680 
TYPE_COMPRESSED_TCP
:

681 
dp
 = 
vjhdr
 - 
PPP_HDRLEN
;

682 
dp
[1] = 
mp
->
b_Ωå
[1];

683 
dp
[0] = 
mp
->
b_Ωå
[0];

684 
dp
[2] = 0;

685 
dp
[3] = 
¥Ÿo
 = 
PPP_VJC_COMP
;

686 
mp
->
b_Ωå
 = 
dp
;

695 i‡(
¥Ÿo
 =
PPP_CCP
)

696 
	`µp_comp_c˝
(
q
, 
mp
, 0);

697 i‡(
¥Ÿo
 !
PPP_LCP
 && (
˝
->
Êags
 & 
CCP_COMP_RUN
)

698 && 
˝
->
x°©e
 !
NULL
) {

699 
Àn
 = 
	`msgdsize
(
mp
);

700 (*
˝
->
xcomp
->
com¥ess
)(˝->
x°©e
, &
cmp
, 
mp
, 
Àn
,

701 (
˝
->
Êags
 & 
CCP_ISUP
? cp->
mtu
 + 
PPP_HDRLEN
: 0));

702 i‡(
cmp
 !
NULL
) {

703 #ifde‡
PRIOQ


704 
cmp
->
b_b™d
=
mp
->b_band;

706 
	`‰ìmsg
(
mp
);

707 
mp
 = 
cmp
;

714 i‡((
˝
->
Êags
 & 
COMP_AC
)

715 && !(
¥Ÿo
 =
PPP_LCP
 && 
	`LCP_USE_DFLT
(
mp
))) {

716 
mp
->
b_Ωå
 += 2;

717 i‡(
¥Ÿo
 < 0x100 && (
˝
->
Êags
 & 
COMP_PROT
))

718 ++
mp
->
b_Ωå
;

719 } i‡(
¥Ÿo
 < 0x100 && (
˝
->
Êags
 & 
COMP_PROT
)) {

721 
mp
->
b_Ωå
[2] = mp->b_rptr[1];

722 
mp
->
b_Ωå
[1] = mp->b_rptr[0];

723 ++
mp
->
b_Ωå
;

726 
˝
->
°©s
.
µp_›ackës
++;

727 
˝
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
mp
);

728 
	`puäext
(
q
, 
mp
);

732 
	}
}

735 
	$µp_comp_Ωut
(
q
, 
mp
)

736 
queue_t
 *
q
;

737 
mblk_t
 *
mp
;

739 
comp_°©e_t
 *
˝
;

740 
iocblk
 *
i›
;

741 
µp_°©s
 *
p•
;

743 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

744 i‡(
˝
 == 0) {

745 
	`DPRINT
("cp == 0 inÖpp_comp_rput\n");

746 
	`‰ìmsg
(
mp
);

750 
mp
->
b_d©≠
->
db_ty≥
) {

752 
M_DATA
:

753 
	`putq
(
q
, 
mp
);

756 
M_IOCACK
:

757 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

758 
i›
->
ioc_cmd
) {

759 
PPPIO_GETSTAT
:

764 i‡(
mp
->
b_c⁄t
 =0 || 
i›
->
ioc_cou¡
 !(
µp_°©s
))

766 
p•
 = (
µp_°©s
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

767 
p•
->
vj
 = 
˝
->
vj_comp
.
°©s
;

770 
	`puäext
(
q
, 
mp
);

773 
M_CTL
:

774 
mp
->
b_Ωå
[0]) {

775 
PPPCTL_IERROR
:

776 ++
˝
->
°©s
.
µp_õº‹s
;

778 
PPPCTL_OERROR
:

779 ++
˝
->
°©s
.
µp_€º‹s
;

782 
	`puäext
(
q
, 
mp
);

786 
	`puäext
(
q
, 
mp
);

790 
	}
}

793 
	$µp_comp_r§v
(
q
)

794 
queue_t
 *
q
;

796 
¥Ÿo
, 
rv
, 
i
;

797 
mblk_t
 *
mp
, *
dmp
 = 
NULL
, *
≈
;

798 
uch¨_t
 *
dp
, *
ùhdr
;

799 
comp_°©e_t
 *
˝
;

800 
Àn
, 
hÀn
, 
vjÀn
;

801 
u_öt
 
ùhÀn
;

803 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

804 i‡(
˝
 == 0) {

805 
	`DPRINT
("cp == 0 inÖpp_comp_rsrv\n");

809 (
mp
 = 
	`gëq
(
q
)) != 0) {

811 i‡(!
	`ˇ≈uäext
(
q
)) {

812 
	`putbq
(
q
, 
mp
);

816 
Àn
 = 
	`msgdsize
(
mp
);

817 
˝
->
°©s
.
µp_ibyãs
 +
Àn
;

818 
˝
->
°©s
.
µp_ùackës
++;

823 
i
 = 0;

824 
¥Ÿo
 = 
	`MSG_BYTE
(
mp
, 0);

825 i‡(
¥Ÿo
 =
PPP_ALLSTATIONS
) {

826 
i
 = 2;

827 
¥Ÿo
 = 
	`MSG_BYTE
(
mp
, 2);

829 i‡((
¥Ÿo
 & 1) == 0) {

830 ++
i
;

831 
¥Ÿo
 = (¥Ÿÿ<< 8Ë+ 
	`MSG_BYTE
(
mp
, 
i
);

833 
hÀn
 = 
i
 + 1;

839 i‡(
hÀn
 < ((
˝
->
Êags
 & 
DECOMP_AC
)? 0: 2)

840 + ((
˝
->
Êags
 & 
DECOMP_PROT
)? 1: 2)) {

842 
bad
;

844 i‡(
mp
->
b_Ωå
 + 
hÀn
 > mp->
b_w±r
) {

845 
	`adjmsg
(
mp
, 
hÀn
);

846 
hÀn
 = 0;

848 i‡(
hÀn
 !
PPP_HDRLEN
) {

857 
dp
 = 
mp
->
b_Ωå
 + 
hÀn
 - 
PPP_HDRLEN
;

858 i‡(
dp
 < 
mp
->
b_d©≠
->
db_ba£
 || mp->b_d©≠->
db_ªf
 > 1) {

859 
≈
 = 
	`Ælocb
(
PPP_HDRLEN
, 
BPRI_MED
);

860 i‡(
≈
 == 0)

861 
bad
;

862 
≈
->
b_c⁄t
 = 
mp
;

863 
mp
->
b_Ωå
 +
hÀn
;

864 
mp
 = 
≈
;

865 
dp
 = 
mp
->
b_w±r
;

866 
mp
->
b_w±r
 +
PPP_HDRLEN
;

868 
mp
->
b_Ωå
 = 
dp
;

870 
dp
[0] = 
PPP_ALLSTATIONS
;

871 
dp
[1] = 
PPP_UI
;

872 
dp
[2] = 
¥Ÿo
 >> 8;

873 
dp
[3] = 
¥Ÿo
;

880 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

881 i‡(
¥Ÿo
 =
PPP_CCP
) {

882 
Àn
 = 
	`msgdsize
(
mp
);

883 i‡(
mp
->
b_w±r
 < mp->
b_Ωå
 + 
Àn
) {

884 
	`PULLUP
(
mp
, 
Àn
);

885 i‡(
mp
 == 0)

886 
bad
;

888 
	`µp_comp_c˝
(
q
, 
mp
, 1);

889 } i‡(
¥Ÿo
 =
PPP_COMP
) {

890 i‡((
˝
->
Êags
 & 
CCP_ISUP
)

891 && (
˝
->
Êags
 & 
CCP_DECOMP_RUN
Ë&& cp->
r°©e


892 && (
˝
->
Êags
 & 
CCP_ERR
) == 0) {

893 
rv
 = (*
˝
->
rcomp
->
decom¥ess
)(˝->
r°©e
, 
mp
, &
dmp
);

894 
rv
) {

895 
DECOMP_OK
:

896 
	`‰ìmsg
(
mp
);

897 
mp
 = 
dmp
;

898 i‡(
mp
 =
NULL
) {

903 
DECOMP_ERROR
:

904 
˝
->
Êags
 |
CCP_ERROR
;

905 ++
˝
->
°©s
.
µp_õº‹s
;

906 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

908 
DECOMP_FATALERROR
:

909 
˝
->
Êags
 |
CCP_FATALERROR
;

910 ++
˝
->
°©s
.
µp_õº‹s
;

911 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

915 } i‡(
˝
->
r°©e
 && (˝->
Êags
 & 
CCP_DECOMP_RUN
)) {

916 (*
˝
->
rcomp
->
öcomp
)(˝->
r°©e
, 
mp
);

922 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

923 i‡(
¥Ÿo
 =
PPP_VJC_COMP
 ||ÖrŸÿ=
PPP_VJC_UNCOMP
) {

924 
Àn
 = 
	`msgdsize
(
mp
Ë- 
PPP_HDRLEN
;

925 i‡((
˝
->
Êags
 & 
DECOMP_VJC
Ë=0 || 
Àn
 <= 0)

926 
bad
;

932 
≈
 = 
mp
;

933 
dp
 = 
≈
->
b_Ωå
 + 
PPP_HDRLEN
;

934 i‡(
dp
 >
mp
->
b_w±r
) {

935 
≈
 =Çp->
b_c⁄t
;

936 
dp
 = 
≈
->
b_Ωå
;

942 
hÀn
 = (
¥Ÿo
 =
PPP_VJC_COMP
)? 
MAX_VJHDR
: 
MAX_IPHDR
;

943 i‡(
hÀn
 > 
Àn
)

944 
hÀn
 = 
Àn
;

945 i‡(
≈
->
b_w±r
 < 
dp
 + 
hÀn
 ||Çp->
b_d©≠
->
db_ªf
 > 1) {

946 
	`PULLUP
(
mp
, 
hÀn
 + 
PPP_HDRLEN
);

947 i‡(
mp
 == 0)

948 
bad
;

949 
≈
 = 
mp
;

950 
dp
 = 
≈
->
b_Ωå
 + 
PPP_HDRLEN
;

953 i‡(
¥Ÿo
 =
PPP_VJC_COMP
) {

958 i‡(
˝
->
°©s
.
µp_õº‹s
 !˝->
vj_œ°_õº‹s
) {

959 i‡(
˝
->
Êags
 & 
DBGLOG
)

960 
	`DPRINT1
("µp%d:Ñe£âög VJ\n", 
˝
->
unô
);

961 
	`vj_uncom¥ess_îr
(&
˝
->
vj_comp
);

962 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

965 
vjÀn
 = 
	`vj_uncom¥ess_t˝
(
dp
, 
≈
->
b_w±r
 - dp, 
Àn
,

966 &
˝
->
vj_comp
, &
ùhdr
, &
ùhÀn
);

967 i‡(
vjÀn
 < 0) {

968 i‡(
˝
->
Êags
 & 
DBGLOG
)

969 
	`DPRINT2
("ppp%d: vj_uncomp_tcp failed,ÖktÜen %d\n",

970 
˝
->
unô
, 
Àn
);

971 ++
˝
->
vj_œ°_õº‹s
;

972 
bad
;

976 i‡(
mp
 !
≈
) {

977 
	`‰ìb
(
mp
);

978 
mp
 = 
≈
;

980 
mp
->
b_Ωå
 = 
dp
 + 
vjÀn
;

983 i‡((
≈
 = 
	`Ælocb
(
ùhÀn
 + 
PPP_HDRLEN
 + 4, 
BPRI_MED
)) == 0)

984 
bad
;

985 
dp
 = 
≈
->
b_Ωå
;

986 
dp
[0] = 
PPP_ALLSTATIONS
;

987 
dp
[1] = 
PPP_UI
;

988 
dp
[2] = 
PPP_IP
 >> 8;

989 
dp
[3] = 
PPP_IP
;

990 
	`bc›y
((
ˇddr_t
)
ùhdr
, (ˇddr_t)
dp
 + 
PPP_HDRLEN
, 
ùhÀn
);

991 
≈
->
b_w±r
 = 
dp
 + 
ùhÀn
 + 
PPP_HDRLEN
;

992 
≈
->
b_c⁄t
 = 
mp
;

996 i‡(
mp
->
b_w±r
 - mp->
b_Ωå
 > 4) {

997 
	`bc›y
((
ˇddr_t
)
mp
->
b_Ωå
, (ˇddr_t)
≈
->
b_w±r
, 4);

998 
mp
->
b_Ωå
 += 4;

999 
≈
->
b_w±r
 += 4;

1001 
	`bc›y
((
ˇddr_t
)
mp
->
b_Ωå
, (ˇddr_t)
≈
->
b_w±r
,

1002 
mp
->
b_w±r
 - mp->
b_Ωå
);

1003 
≈
->
b_w±r
 +
mp
->b_w±∏- mp->
b_Ωå
;

1004 
≈
->
b_c⁄t
 = 
mp
->b_cont;

1005 
	`‰ìb
(
mp
);

1008 
mp
 = 
≈
;

1014 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

1015 i‡(!
	`vj_uncom¥ess_uncomp
(
dp
, 
hÀn
, &
˝
->
vj_comp
)) {

1016 i‡(
˝
->
Êags
 & 
DBGLOG
)

1017 
	`DPRINT2
("ppp%d: vj_uncomp_uncomp failed,ÖktÜen %d\n",

1018 
˝
->
unô
, 
Àn
);

1019 ++
˝
->
vj_œ°_õº‹s
;

1020 
bad
;

1022 
mp
->
b_Ωå
[3] = 
PPP_IP
;

1026 
	`puäext
(
q
, 
mp
);

1029 
bad
:

1030 i‡(
mp
 != 0)

1031 
	`‰ìmsg
(
mp
);

1032 
˝
->
°©s
.
µp_õº‹s
++;

1033 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

1037 
	}
}

1044 
	$µp_comp_c˝
(
q
, 
mp
, 
rcvd
)

1045 
queue_t
 *
q
;

1046 
mblk_t
 *
mp
;

1047 
rcvd
;

1049 
Àn
, 
˛í
;

1050 
comp_°©e_t
 *
˝
;

1051 *
dp
;

1053 
Àn
 = 
	`msgdsize
(
mp
);

1054 i‡(
Àn
 < 
PPP_HDRLEN
 + 
CCP_HDRLEN
)

1057 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

1058 
dp
 = 
mp
->
b_Ωå
 + 
PPP_HDRLEN
;

1059 
Àn
 -
PPP_HDRLEN
;

1060 
˛í
 = 
	`CCP_LENGTH
(
dp
);

1061 i‡(
˛í
 > 
Àn
)

1064 
	`CCP_CODE
(
dp
)) {

1065 
CCP_CONFREQ
:

1066 
CCP_TERMREQ
:

1067 
CCP_TERMACK
:

1068 
˝
->
Êags
 &~
CCP_ISUP
;

1071 
CCP_CONFACK
:

1072 i‡((
˝
->
Êags
 & (
CCP_ISOPEN
 | 
CCP_ISUP
)) == CCP_ISOPEN

1073 && 
˛í
 >
CCP_HDRLEN
 + 
CCP_OPT_MINLEN


1074 && 
˛í
 >
CCP_HDRLEN
 + 
	`CCP_OPT_LENGTH
(
dp
 + CCP_HDRLEN)) {

1075 i‡(!
rcvd
) {

1076 i‡(
˝
->
x°©e
 !
NULL


1077 && (*
˝
->
xcomp
->
comp_öô
)

1078 (
˝
->
x°©e
, 
dp
 + 
CCP_HDRLEN
, 
˛í
 - CCP_HDRLEN,

1079 
˝
->
unô
, 0, ((˝->
Êags
 & 
DBGLOG
) != 0)))

1080 
˝
->
Êags
 |
CCP_COMP_RUN
;

1082 i‡(
˝
->
r°©e
 !
NULL


1083 && (*
˝
->
rcomp
->
decomp_öô
)

1084 (
˝
->
r°©e
, 
dp
 + 
CCP_HDRLEN
, 
˛í
 - CCP_HDRLEN,

1085 
˝
->
unô
, 0, cp->
mru
, ((˝->
Êags
 & 
DBGLOG
) != 0)))

1086 
˝
->
Êags
 = (˝->Êag†& ~
CCP_ERR
Ë| 
CCP_DECOMP_RUN
;

1091 
CCP_RESETACK
:

1092 i‡(
˝
->
Êags
 & 
CCP_ISUP
) {

1093 i‡(!
rcvd
) {

1094 i‡(
˝
->
x°©e
 && (˝->
Êags
 & 
CCP_COMP_RUN
))

1095 (*
˝
->
xcomp
->
comp_ª£t
)(˝->
x°©e
);

1097 i‡(
˝
->
r°©e
 && (˝->
Êags
 & 
CCP_DECOMP_RUN
)) {

1098 (*
˝
->
rcomp
->
decomp_ª£t
)(˝->
r°©e
);

1099 
˝
->
Êags
 &~
CCP_ERROR
;

1105 
	}
}

1108 
	$dump_msg
(
mp
)

1109 
mblk_t
 *
mp
;

1111 
dblk_t
 *
db
;

1113 
mp
 != 0) {

1114 
db
 = 
mp
->
b_d©≠
;

1115 
	`DPRINT2
("mp=%x c⁄t=%x ", 
mp
, mp->
b_c⁄t
);

1116 
	`DPRINT3
("Ωå=%x w±r=%x d©≠=%x\n", 
mp
->
b_Ωå
, mp->
b_w±r
, 
db
);

1117 
	`DPRINT2
(" ba£=%xÜim=%x", 
db
->
db_ba£
, db->
db_lim
);

1118 
	`DPRINT2
("Ñef=%dÅy≥=%d\n", 
db
->
db_ªf
, db->
db_ty≥
);

1119 
mp
 = mp->
b_c⁄t
;

1121 
	}
}

1125 
	$msg_byã
(
mp
, 
i
)

1126 
mblk_t
 *
mp
;

1127 
i
;

1129 
mp
 !0 && 
i
 >mp->
b_w±r
 - mp->
b_Ωå
)

1130 
mp
 = mp->
b_c⁄t
;

1131 i‡(
mp
 == 0)

1133  
mp
->
b_Ωå
[
i
];

1134 
	}
}

	@modules/ppp_mod.h

8 #ifde‡
SVR4


9 
	~<sys/kmem.h
>

10 
	#ALLOC_SLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KM_SLEEP
)

	)

11 
	#ALLOC_NOSLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KM_NOSLEEP
)

	)

12 
	#FREE
(
p
, 
n
Ë
	`kmem_‰ì
(’), (n))

	)

15 #ifde‡
SUNOS4


16 
	~<sys/kmem_Æloc.h
>

17 
	#ALLOC_SLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KMEM_SLEEP
)

	)

18 
	#ALLOC_NOSLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KMEM_NOSLEEP
)

	)

19 
	#FREE
(
p
, 
n
Ë
	`kmem_‰ì
(’), (n))

	)

20 
	#NOTSUSER
(Ë(
	`su£r
()? 0: 
EPERM
)

	)

21 
	#bˇ≈uäext
(
q
, 
b™d
Ë
	`ˇ≈uäext
((q))

	)

24 #ifde‡
__osf__


25 
	~<sys/mÆloc.h
>

35 #ifde‡
BUCKETINDX


36 
	#ALLOC_SLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETP
“), 
M_DEVBUF
, 
M_WAITOK
)

	)

37 
	#ALLOC_NOSLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETP
“), 
M_DEVBUF
, 
M_NOWAIT
)

	)

39 
	#ALLOC_SLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETINDEX
“), 
M_DEVBUF
, 
M_WAITOK
)

	)

40 
	#ALLOC_NOSLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETINDEX
“), 
M_DEVBUF
, 
M_NOWAIT
)

	)

43 
	#bˇ≈uäext
(
q
, 
b™d
Ë
	`ˇ≈uäext
((q))

	)

45 #ifde‡
FREE


46 #unde‡
FREE


48 
	#FREE
(
p
, 
n
Ë
	`‰ì
((*)’), 
M_DEVBUF
)

	)

50 
	#NO_DLPI
 1

	)

52 #i‚de‡
IFT_PPP


53 
	#IFT_PPP
 0x17

	)

56 
	~<sys/¥oc.h
>

57 
	#NOTSUSER
(Ë(
	`su£r
(
u
.
u_¥o˝
->
p_r¸ed
, &u.
u_acÊag
Ë? 
EPERM
 : 0)

	)

63 #ifde‡
AIX4


64 
	#ALLOC_SLEEP
(
n
Ë
	`xmÆloc
(“), 0, 
pö√d_hóp
Ë

	)

65 
	#ALLOC_NOSLEEP
(
n
Ë
	`xmÆloc
(“), 0, 
pö√d_hóp
Ë

	)

66 
	#FREE
(
p
, 
n
Ë
	`xm‰ì
(’), 
pö√d_hóp
)

	)

67 
	#NOTSUSER
(Ë(
	`su£r
()? 0: 
EPERM
)

	)

73 #ifde‡
DEBUG


74 #i‡
deföed
(
SVR4
Ë|| deföed(
__osf__
)

75 #i‡
deföed
(
SNI
)

76 
	~<sys/°æog.h
>

77 
	#STRLOG_ID
 4712

	)

78 
	#DPRINT
(
f
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f)

	)

79 
	#DPRINT1
(
f
, 
a1
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1)

	)

80 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1,á2)

	)

81 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1,á2,á3)

	)

83 
	#DPRINT
(
f
Ë
	`cmn_îr
(
CE_CONT
, f)

	)

84 
	#DPRINT1
(
f
, 
a1
Ë
	`cmn_îr
(
CE_CONT
, f,á1)

	)

85 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`cmn_îr
(
CE_CONT
, f,á1,á2)

	)

86 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`cmn_îr
(
CE_CONT
, f,á1,á2,á3)

	)

89 
	#DPRINT
(
f
Ë
	`¥ötf
(f)

	)

90 
	#DPRINT1
(
f
, 
a1
Ë
	`¥ötf
(f,á1)

	)

91 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`¥ötf
(f,á1,á2)

	)

92 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`¥ötf
(f,á1,á2,á3)

	)

96 
	#DPRINT
(
f
Ë0

	)

97 
	#DPRINT1
(
f
, 
a1
Ë0

	)

98 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë0

	)

99 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë0

	)

102 #i‚de‡
SVR4


103 
	tuch¨_t
;

104 
	tush‹t_t
;

105 #i‚de‡
__osf__


106 
	tmö‹_t
;

113 #i‚de‡
D_MP


114 
	#q¥ocs⁄
(
q
)

	)

115 
	#q¥ocsoff
(
q
)

	)

116 
	#put
(
q
, 
mp
Ë((*(q)->
q_qöfo
->
qi_puç
)((q), (mp)))

	)

117 
	#ˇ≈uäext
(
q
Ë
	`ˇ≈ut
((q)->
q_√xt
)

	)

118 
	#qwrôî
(
q
, 
mp
, 
func
, 
sc›e
Ë(func)((q), (mp))

	)

121 #ifde‡
D_MP


123 
	#PULLUP
(
mp
, 
Àn
) \

125 
mblk_t
 *
≈
 = 
	`msgpuŒup
((
mp
), (
Àn
)); \

126 
	`‰ìmsg
((
mp
)); \

127 
mp
 = 
≈
; \

128 } 0)

	)

132 
	#PULLUP
(
mp
, 
Àn
) \

134 i‡(!
	`puŒupmsg
((
mp
), (
Àn
))) { \

135 
	`‰ìmsg
((
mp
)); \

136 
mp
 = 0; \

138 } 0)

	)

144 #ifde‡
SVR4


145 
	#MOD_OPEN_DECL
(
«me
) \

146 
«me
 
	`__P
((
queue_t
 *, 
dev_t
 *, , , 
¸ed_t
 *))

	)

148 
	#MOD_CLOSE_DECL
(
«me
) \

149 
«me
 
	`__P
((
queue_t
 *, , 
¸ed_t
 *))

	)

151 
	#MOD_OPEN
(
«me
) \

152 
	`«me
(
q
, 
devp
, 
Êag
, 
sÊag
, 
¸edp
) \

153 
queue_t
 *
q
; \

154 
dev_t
 *
devp
; \

155 
Êag
, 
sÊag
; \

156 
¸ed_t
 *
¸edp
;

	)

158 
	#MOD_CLOSE
(
«me
) \

159 
	`«me
(
q
, 
Êag
, 
¸edp
) \

160 
queue_t
 *
q
; \

161 
Êag
; \

162 
¸ed_t
 *
¸edp
;

	)

164 
	#OPEN_ERROR
(
x
Ë (x)

	)

165 
	#DRV_OPEN_OK
(
dev
Ë 0

	)

167 
	#NOTSUSER
(Ë(
	`drv_¥iv
(
¸edp
))

	)

170 
	#MOD_OPEN_DECL
(
«me
) \

171 
«me
 
	`__P
((
queue_t
 *, , , ))

	)

173 
	#MOD_CLOSE_DECL
(
«me
) \

174 
«me
 
	`__P
((
queue_t
 *, ))

	)

176 
	#MOD_OPEN
(
«me
) \

177 
	`«me
(
q
, 
dev
, 
Êag
, 
sÊag
) \

178 
queue_t
 *
q
; \

179 
dev
; \

180 
Êag
, 
sÊag
;

	)

182 
	#MOD_CLOSE
(
«me
) \

183 
	`«me
(
q
, 
Êag
) \

184 
queue_t
 *
q
; \

185 
Êag
;

	)

187 
	#OPEN_ERROR
(
x
Ë{ 
u
.
u_îr‹
 = (x);  
OPENFAIL
; }

	)

188 
	#DRV_OPEN_OK
(
dev
Ë (dev)

	)

	@modules/vjcompress.c

35 
	~<sys/ty≥s.h
>

36 
	~<sys/∑øm.h
>

38 #ifde‡
SVR4


39 #i‚de‡
__GNUC__


40 
	~<sys/byã‹dî.h
>

43 
	~"/u§/ö˛ude/sys/byã‹dî.h
"

47 #ifde‡
__osf__


48 
	~<√t/√t_globÆs.h
>

50 
	~<√töë/ö.h
>

52 #ifde‡
AIX4


53 
	#_NETINET_IN_SYSTM_H_


	)

54 
u_l⁄g
 
	tn_l⁄g
;

56 
	~<√töë/ö_sy°m.h
>

59 #ifde‡
SOL2


60 
	~<sys/sunddi.h
>

63 
	~<√töë/ù.h
>

64 
	~<√töë/t˝.h
>

66 
	~<√t/µp_defs.h
>

67 
	~<√t/vjcom¥ess.h
>

69 #i‚de‡
VJ_NO_STATS


70 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
cou¡î

72 
	#INCR
(
cou¡î
)

	)

75 
	#BCMP
(
p1
, 
p2
, 
n
Ë
	`bcmp
((*)’1), (*)’2), ()“))

	)

76 #unde‡
BCOPY


77 
	#BCOPY
(
p1
, 
p2
, 
n
Ë
	`bc›y
((*)’1), (*)’2), ()“))

	)

78 #i‚de‡
KERNEL


79 
	#ovbc›y
 
bc›y


	)

82 #ifde‡
__osf__


83 
	#gëù_hl
(
ba£
Ë(((ba£).
ù_vhl
)&0xf)

	)

84 
	#gëth_off
(
ba£
Ë((((ba£).
th_xoff
)&0xf0)>>4)

	)

87 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

88 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

92 
	$vj_com¥ess_öô
(
comp
, 
max_°©e
)

93 
vjcom¥ess
 *
comp
;

94 
max_°©e
;

96 
u_öt
 
i
;

97 
c°©e
 *
t°©e
 = 
comp
->tstate;

99 i‡(
max_°©e
 == -1)

100 
max_°©e
 = 
MAX_STATES
 - 1;

101 
	`bzîo
((*)
comp
, (*comp));

102 
i
 = 
max_°©e
; i > 0; --i) {

103 
t°©e
[
i
].
cs_id
 = i;

104 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

106 
t°©e
[0].
cs_√xt
 = &t°©e[
max_°©e
];

107 
t°©e
[0].
cs_id
 = 0;

108 
comp
->
œ°_cs
 = &
t°©e
[0];

109 
comp
->
œ°_ªcv
 = 255;

110 
comp
->
œ°_xmô
 = 255;

111 
comp
->
Êags
 = 
VJF_TOSS
;

112 
	}
}

119 
	#ENCODE
(
n
) { \

120 i‡((
u_sh‹t
)(
n
) >= 256) { \

121 *
˝
++ = 0; \

122 
˝
[1] = (
n
); \

123 
˝
[0] = (
n
) >> 8; \

124 
˝
 += 2; \

126 *
˝
++ = (
n
); \

128 }

	)

129 
	#ENCODEZ
(
n
) { \

130 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

131 *
˝
++ = 0; \

132 
˝
[1] = (
n
); \

133 
˝
[0] = (
n
) >> 8; \

134 
˝
 += 2; \

136 *
˝
++ = (
n
); \

138 }

	)

140 
	#DECODEL
(
f
) { \

141 i‡(*
˝
 == 0) {\

142 
u_öt32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

143 (
f
Ë
	`ht⁄l
(
tmp
); \

144 
˝
 += 3; \

146 
u_öt32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u_öt32_t)*
˝
++; \

147 (
f
Ë
	`ht⁄l
(
tmp
); \

149 }

	)

151 
	#DECODES
(
f
) { \

152 i‡(*
˝
 == 0) {\

153 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

154 (
f
Ë
	`ht⁄s
(
tmp
); \

155 
˝
 += 3; \

157 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (
u_öt32_t
)*
˝
++; \

158 (
f
Ë
	`ht⁄s
(
tmp
); \

160 }

	)

162 
	#DECODEU
(
f
) { \

163 i‡(*
˝
 == 0) {\

164 (
f
Ë
	`ht⁄s
((
˝
[1] << 8) | cp[2]); \

165 
˝
 += 3; \

167 (
f
Ë
	`ht⁄s
((
u_öt32_t
)*
˝
++); \

169 }

	)

171 
u_öt


172 
	$vj_com¥ess_t˝
(
ù
, 
mÀn
, 
comp
, 
com¥ess_cid
, 
vjhdΩ
)

173 
ù
 *ip;

174 
u_öt
 
mÀn
;

175 
vjcom¥ess
 *
comp
;

176 
com¥ess_cid
;

177 
u_ch¨
 **
vjhdΩ
;

179 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

180 
u_öt
 
hÀn
 = 
	`gëù_hl
(*
ù
);

181 
t˝hdr
 *
Ÿh
;

182 
t˝hdr
 *
th
;

183 
u_öt
 
dñèS
, 
dñèA
;

184 
u_öt
 
ch™ges
 = 0;

185 
u_ch¨
 
√w_£q
[16];

186 
u_ch¨
 *
˝
 = 
√w_£q
;

194 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
mÀn
 < 40)

195  (
TYPE_IP
);

197 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

198 i‡((
th
->
th_Êags
 & (
TH_SYN
|
TH_FIN
|
TH_RST
|
TH_ACK
)) != TH_ACK)

199  (
TYPE_IP
);

207 
	`INCR
(
vjs_∑ckës
);

208 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr ||

209 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr ||

210 *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

223 
c°©e
 *
lcs
;

224 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

227 
lcs
 = 
cs
; c†cs->
cs_√xt
;

228 
	`INCR
(
vjs_£¨ches
);

229 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

230 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

231 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)])

232 
found
;

233 } 
cs
 !
œ°cs
);

243 
	`INCR
(
vjs_mis£s
);

244 
comp
->
œ°_cs
 = 
lcs
;

245 
hÀn
 +
	`gëth_off
(*
th
);

246 
hÀn
 <<= 2;

247 i‡(
hÀn
 > 
mÀn
)

248  (
TYPE_IP
);

249 
uncom¥es£d
;

251 
found
:

255 i‡(
cs
 =
œ°cs
)

256 
comp
->
œ°_cs
 = 
lcs
;

258 
lcs
->
cs_√xt
 = 
cs
->cs_next;

259 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

260 
œ°cs
->
cs_√xt
 = 
cs
;

275 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

276 
dñèS
 = 
hÀn
;

277 
hÀn
 +
	`gëth_off
(*
th
);

278 
hÀn
 <<= 2;

279 i‡(
hÀn
 > 
mÀn
)

280  (
TYPE_IP
);

282 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0] ||

283 ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3] ||

284 ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4] ||

285 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
) ||

286 (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2)) ||

287 (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2)))

288 
uncom¥es£d
;

296 i‡(
th
->
th_Êags
 & 
TH_URG
) {

297 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

298 
	`ENCODEZ
(
dñèS
);

299 
ch™ges
 |
NEW_U
;

300 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp)

305 
uncom¥es£d
;

307 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) > 0) {

308 
	`ENCODE
(
dñèS
);

309 
ch™ges
 |
NEW_W
;

312 i‡((
dñèA
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) > 0) {

313 i‡(
dñèA
 > 0xffff)

314 
uncom¥es£d
;

315 
	`ENCODE
(
dñèA
);

316 
ch™ges
 |
NEW_A
;

319 i‡((
dñèS
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) > 0) {

320 i‡(
dñèS
 > 0xffff)

321 
uncom¥es£d
;

322 
	`ENCODE
(
dñèS
);

323 
ch™ges
 |
NEW_S
;

326 
ch™ges
) {

337 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

338 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
)

343 
SPECIAL_I
:

344 
SPECIAL_D
:

349 
uncom¥es£d
;

351 
NEW_S
|
NEW_A
:

352 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

354 
ch™ges
 = 
SPECIAL_I
;

355 
˝
 = 
√w_£q
;

359 
NEW_S
:

360 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

362 
ch™ges
 = 
SPECIAL_D
;

363 
˝
 = 
√w_£q
;

368 
dñèS
 = 
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id);

369 i‡(
dñèS
 != 1) {

370 
	`ENCODEZ
(
dñèS
);

371 
ch™ges
 |
NEW_I
;

373 i‡(
th
->
th_Êags
 & 
TH_PUSH
)

374 
ch™ges
 |
TCP_PUSH_BIT
;

379 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

380 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

391 
dñèS
 = 
˝
 - 
√w_£q
;

392 
˝
 = (
u_ch¨
 *)
ù
;

393 i‡(
com¥ess_cid
 =0 || 
comp
->
œ°_xmô
 !
cs
->
cs_id
) {

394 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

395 
hÀn
 -
dñèS
 + 4;

396 *
vjhdΩ
 = (
˝
 +
hÀn
);

397 *
˝
++ = 
ch™ges
 | 
NEW_C
;

398 *
˝
++ = 
cs
->
cs_id
;

400 
hÀn
 -
dñèS
 + 3;

401 *
vjhdΩ
 = (
˝
 +
hÀn
);

402 *
˝
++ = 
ch™ges
;

404 *
˝
++ = 
dñèA
 >> 8;

405 *
˝
++ = 
dñèA
;

406 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

407 
	`INCR
(
vjs_com¥es£d
);

408  (
TYPE_COMPRESSED_TCP
);

415 
uncom¥es£d
:

416 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

417 
ù
->
ù_p
 = 
cs
->
cs_id
;

418 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

419  (
TYPE_UNCOMPRESSED_TCP
);

420 
	}
}

426 
	$vj_uncom¥ess_îr
(
comp
)

427 
vjcom¥ess
 *
comp
;

429 
comp
->
Êags
 |
VJF_TOSS
;

430 
	`INCR
(
vjs_îr‹ö
);

431 
	}
}

437 
	$vj_uncom¥ess_uncomp
(
buf
, 
buÊí
, 
comp
)

438 
u_ch¨
 *
buf
;

439 
buÊí
;

440 
vjcom¥ess
 *
comp
;

442 
u_öt
 
hÀn
;

443 
c°©e
 *
cs
;

444 
ù
 *ip;

446 
ù
 = (ù *Ë
buf
;

447 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

448 i‡(
ù
->
ù_p
 >
MAX_STATES


449 || 
hÀn
 + (
t˝hdr
Ë> 
buÊí


450 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

451 > 
buÊí


452 || 
hÀn
 > 
MAX_HDR
) {

453 
comp
->
Êags
 |
VJF_TOSS
;

454 
	`INCR
(
vjs_îr‹ö
);

457 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

458 
comp
->
Êags
 &=~ 
VJF_TOSS
;

459 
ù
->
ù_p
 = 
IPPROTO_TCP
;

460 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

461 
cs
->
cs_hÀn
 = 
hÀn
;

462 
	`INCR
(
vjs_uncom¥es£dö
);

464 
	}
}

475 
	$vj_uncom¥ess_t˝
(
buf
, 
buÊí
, 
tŸÆ_Àn
, 
comp
, 
hdΩ
, 
hÀ≈
)

476 
u_ch¨
 *
buf
;

477 
buÊí
, 
tŸÆ_Àn
;

478 
vjcom¥ess
 *
comp
;

479 
u_ch¨
 **
hdΩ
;

480 
u_öt
 *
hÀ≈
;

482 
u_ch¨
 *
˝
;

483 
u_öt
 
hÀn
, 
ch™ges
;

484 
t˝hdr
 *
th
;

485 
c°©e
 *
cs
;

486 
u_sh‹t
 *
bp
;

487 
u_öt
 
vjÀn
;

488 
u_öt32_t
 
tmp
;

490 
	`INCR
(
vjs_com¥es£dö
);

491 
˝
 = 
buf
;

492 
ch™ges
 = *
˝
++;

493 i‡(
ch™ges
 & 
NEW_C
) {

496 i‡(*
˝
 >
MAX_STATES
)

497 
bad
;

499 
comp
->
Êags
 &=~ 
VJF_TOSS
;

500 
comp
->
œ°_ªcv
 = *
˝
++;

505 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

506 
	`INCR
(
vjs_tos£d
);

510 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

511 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

512 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

513 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

514 
˝
 += 2;

515 i‡(
ch™ges
 & 
TCP_PUSH_BIT
)

516 
th
->
th_Êags
 |
TH_PUSH
;

518 
th
->
th_Êags
 &=~ 
TH_PUSH
;

520 
ch™ges
 & 
SPECIALS_MASK
) {

521 
SPECIAL_I
:

523 
u_öt32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

525 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

526 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

527 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

528 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

532 
SPECIAL_D
:

534 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

535 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

539 i‡(
ch™ges
 & 
NEW_U
) {

540 
th
->
th_Êags
 |
TH_URG
;

541 
	`DECODEU
(
th
->
th_uΩ
);

543 
th
->
th_Êags
 &=~ 
TH_URG
;

544 i‡(
ch™ges
 & 
NEW_W
)

545 
	`DECODES
(
th
->
th_wö
);

546 i‡(
ch™ges
 & 
NEW_A
)

547 
	`DECODEL
(
th
->
th_ack
);

548 i‡(
ch™ges
 & 
NEW_S
)

549 
	`DECODEL
(
th
->
th_£q
);

552 i‡(
ch™ges
 & 
NEW_I
) {

553 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

555 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

556 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

564 
vjÀn
 = 
˝
 - 
buf
;

565 
buÊí
 -
vjÀn
;

566 i‡(
buÊí
 < 0)

569 
bad
;

571 
tŸÆ_Àn
 +
cs
->
cs_hÀn
 - 
vjÀn
;

572 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tŸÆ_Àn
);

575 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

576 
cs
->
cs_ù
.
ù_sum
 = 0;

577 
ch™ges
 = 0; 
hÀn
 > 0; hlen -= 2)

578 
ch™ges
 +*
bp
++;

579 
ch™ges
 = (changes & 0xffff) + (changes >> 16);

580 
ch™ges
 = (changes & 0xffff) + (changes >> 16);

581 
cs
->
cs_ù
.
ù_sum
 = ~ 
ch™ges
;

583 *
hdΩ
 = (
u_ch¨
 *Ë&
cs
->
cs_ù
;

584 *
hÀ≈
 = 
cs
->
cs_hÀn
;

585  
vjÀn
;

587 
bad
:

588 
comp
->
Êags
 |
VJF_TOSS
;

589 
	`INCR
(
vjs_îr‹ö
);

591 
	}
}

	@pppd/auth.c

71 
	#RCSID
 "$Id:áuth.c,v 1.117 2008/07/01 12:27:56Öaulu†Ex∞$"

	)

73 
	~<°dio.h
>

74 
	~<°ddef.h
>

75 
	~<°dlib.h
>

76 
	~<uni°d.h
>

77 
	~<î∫o.h
>

78 
	~<pwd.h
>

79 
	~<gΩ.h
>

80 
	~<°rög.h
>

81 
	~<°rögs.h
>

82 
	~<sys/ty≥s.h
>

83 
	~<sys/°©.h
>

84 
	~<sys/sockë.h
>

85 
	~<utmp.h
>

86 
	~<f˙é.h
>

87 #i‡
deföed
(
_PATH_LASTLOG
Ë&& deföed(
__löux__
)

88 
	~<œ°log.h
>

91 
	~<√tdb.h
>

92 
	~<√töë/ö.h
>

93 
	~<¨∑/öë.h
>

96 #ifde‡
HAS_SHADOW


97 
	~<shadow.h
>

98 #i‚de‡
PW_PPP


99 
	#PW_PPP
 
PW_LOGIN


	)

102 
	~<time.h
>

104 #ifde‡
SYSTEMD


105 
	~<sy°emd/sd-d´m⁄.h
>

108 
	~"µpd.h
"

109 
	~"fsm.h
"

110 
	~"l˝.h
"

111 
	~"c˝.h
"

112 
	~"e˝.h
"

113 
	~"ù˝.h
"

114 
	~"u∑p.h
"

115 
	~"ch≠-√w.h
"

116 
	~"óp.h
"

117 #ifde‡
USE_EAPTLS


118 
	~"óp-és.h
"

120 #ifde‡
CBCP_SUPPORT


121 
	~"cb˝.h
"

123 
	~"∑th«mes.h
"

124 
	~"£ssi⁄.h
"

128 
	#NONWILD_SERVER
 1

	)

129 
	#NONWILD_CLIENT
 2

	)

131 
	#ISWILD
(
w‹d
Ë(w‹d[0] ='*' && w‹d[1] =0)

	)

134 
	g≥î_auth«me
[
MAXNAMELEN
];

137 
	gauth_≥ndög
[
NUM_PPP
];

140 
	gauth_d⁄e
[
NUM_PPP
];

143 
≥rmôãd_ù
 *
	gaddªs£s
[
NUM_PPP
];

147 
w‹dli°
 *
	gnﬂuth_addrs
;

150 
	gªmŸe_numbî
[
MAXNAMELEN
];

153 
w‹dli°
 *
	g≥rmôãd_numbîs
;

156 
w‹dli°
 *
	gexåa_›ti⁄s
;

159 
	gnum_≈_›í
;

162 
	gnum_≈_up
;

165 
	g∑sswd_‰om_fûe
;

168 
boﬁ
 
	gdeÁu…_auth
;

171 (*
idÀ_time_hook
Ë
	`__P
((
µp_idÀ
 *)Ë
NULL
;

174 (*
∑p_check_hook
Ë
	`__P
(()Ë
NULL
;

177 (*
∑p_auth_hook
Ë
	`__P
((*
u£r
, *
∑sswd
, **
msgp
,

178 
w‹dli°
 **
∑ddrs
,

179 
w‹dli°
 **
p›ts
)Ë
NULL
;

182 (*
∑p_logout_hook
Ë
	`__P
(()Ë
NULL
;

185 (*
∑p_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
)Ë
NULL
;

188 (*
ch≠_check_hook
Ë
	`__P
(()Ë
NULL
;

191 (*
ch≠_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
)Ë
NULL
;

193 #ifde‡
USE_EAPTLS


195 (*
ó±ls_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
)Ë
NULL
;

200 (*
nuŒ_auth_hook
Ë
	`__P
((
w‹dli°
 **
∑ddrs
,

201 
w‹dli°
 **
p›ts
)Ë
NULL
;

203 (*
Ælowed_addªss_hook
Ë
	`__P
((
u_öt32_t
 
addr
)Ë
NULL
;

205 #ifde‡
HAVE_MULTILINK


207 (*
mu…ûök_joö_hook
Ë
	`__P
(()Ë
NULL
;

212 
nŸifõr
 *
auth_up_nŸifõr
 = 
NULL
;

215 
nŸifõr
 *
lök_down_nŸifõr
 = 
NULL
;

221 
	es¸ùt_°©e
 {

222 
s_down
,

223 
s_up


226 
s¸ùt_°©e
 
auth_°©e
 = 
s_down
;

227 
s¸ùt_°©e
 
auth_s¸ùt_°©e
 = 
s_down
;

228 
pid_t
 
auth_s¸ùt_pid
 = 0;

233 
boﬁ
 
u£logö
 = 0;

234 
boﬁ
 
£ssi⁄_mgmt
 = 0;

235 
boﬁ
 
¸y±∑p
 = 0;

236 
boﬁ
 
ªfu£_∑p
 = 0;

237 
boﬁ
 
ªfu£_ch≠
 = 0;

238 
boﬁ
 
ªfu£_óp
 = 0;

239 #ifde‡
CHAPMS


240 
boﬁ
 
ªfu£_msch≠
 = 0;

241 
boﬁ
 
ªfu£_msch≠_v2
 = 0;

243 
boﬁ
 
ªfu£_msch≠
 = 1;

244 
boﬁ
 
ªfu£_msch≠_v2
 = 1;

246 
boﬁ
 
u£ho°«me
 = 0;

247 
boﬁ
 
auth_ªquúed
 = 0;

248 
boﬁ
 
Ælow_™y_ù
 = 0;

249 
boﬁ
 
ex∂icô_ªmŸe
 = 0;

250 
boﬁ
 
ex∂icô_u£r
 = 0;

251 
boﬁ
 
ex∂icô_∑sswd
 = 0;

252 
ªmŸe_«me
[
MAXNAMELEN
];

253 #ifde‡
USE_EAPTLS


254 *
ˇ˚π_fûe
 = 
NULL
;

255 *
ˇ_∑th
 = 
NULL
;

256 *
˚π_fûe
 = 
NULL
;

257 *
¥ivkey_fûe
 = 
NULL
;

258 *
¸l_dú
 = 
NULL
;

259 *
¸l_fûe
 = 
NULL
;

260 *
max_és_vîsi⁄
 = 
NULL
;

261 
boﬁ
 
√ed_≥î_óp
 = 0;

264 *
ua‚ame
;

266 *
¸y±
 
	`__P
((const *, const *));

270 
√tw‹k_pha£
 
	`__P
(());

271 
check_idÀ
 
	`__P
((*));

272 
c⁄√˘_time_expúed
 
	`__P
((*));

273 
nuŒ_logö
 
	`__P
(());

274 
gë_∑p_∑sswd
 
	`__P
((*));

275 
have_∑p_£¸ë
 
	`__P
((*));

276 
have_ch≠_£¸ë
 
	`__P
((*, *, , *));

277 
have_§p_£¸ë
 
	`__P
((*
˛õ¡
, *
£rvî
, 
√ed_ù
,

278 *
œcks_ùp
));

280 #ifde‡
USE_EAPTLS


281 
have_ó±ls_£¸ë_£rvî


282 
	`__P
((*
˛õ¡
, *
£rvî
, 
√ed_ù
, *
œcks_ùp
));

283 
have_ó±ls_£¸ë_˛õ¡
 
	`__P
((*
˛õ¡
, *
£rvî
));

284 
sˇn_authfûe_ó±ls
 
	`__P
((
FILE
 * 
f
, *
˛õ¡
, *
£rvî
,

285 *
˛i_˚π
, *
£rv_˚π
,

286 *
ˇ_˚π
, *
pk
,

287 
w‹dli°
 ** 
addrs
,

288 
w‹dli°
 ** 
›ts
,

289 *
fûíame
, 
Êags
));

292 
ù_addr_check
 
	`__P
((
u_öt32_t
, 
≥rmôãd_ù
 *));

293 
sˇn_authfûe
 
	`__P
((
FILE
 *, *, *, *,

294 
w‹dli°
 **, wordlist **,

296 
‰ì_w‹dli°
 
	`__P
((
w‹dli°
 *));

297 
auth_s¸ùt
 
	`__P
((*));

298 
auth_s¸ùt_d⁄e
 
	`__P
((*));

299 
£t_Ælowed_addrs
 
	`__P
((, 
w‹dli°
 *, wordlist *));

300 
some_ù_ok
 
	`__P
((
w‹dli°
 *));

301 
£tu∑pfûe
 
	`__P
((**));

302 
¥ivgroup
 
	`__P
((**));

303 
£t_nﬂuth_addr
 
	`__P
((**));

304 
£t_≥rmôãd_numbî
 
	`__P
((**));

305 
check_ac˚ss
 
	`__P
((
FILE
 *, *));

306 
w‹dli°_cou¡
 
	`__P
((
w‹dli°
 *));

308 #ifde‡
MAXOCTETS


309 
check_maxo˘ës
 
	`__P
((*));

315 
›ti⁄_t
 
auth_›ti⁄s
[] = {

316 { "auth", 
o_boﬁ
, &
auth_ªquúed
,

317 "Requúêauthítiˇti⁄ fromÖìr", 
OPT_PRIO
 | 1 },

318 { "nﬂuth", 
o_boﬁ
, &
auth_ªquúed
,

319 "D⁄'àªquúê≥îÅÿauthítiˇã", 
OPT_PRIOSUB
 | 
OPT_PRIV
,

320 &
Ælow_™y_ù
 },

321 { "ªquúe-∑p", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_u∑p
,

323 
OPT_PRIOSUB
 | 1, &
auth_ªquúed
 },

324 { "+∑p", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_u∑p
,

326 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 1, &
auth_ªquúed
 },

327 { "ªquúe-ch≠", 
o_boﬁ
, &
auth_ªquúed
,

329 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MD5
,

330 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

331 { "+ch≠", 
o_boﬁ
, &
auth_ªquúed
,

333 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MD5
,

334 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

335 #ifde‡
CHAPMS


336 { "ªquúe-msch≠", 
o_boﬁ
, &
auth_ªquúed
,

338 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MICROSOFT
,

339 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

340 { "+msch≠", 
o_boﬁ
, &
auth_ªquúed
,

342 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MICROSOFT
,

343 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

344 { "ªquúe-msch≠-v2", 
o_boﬁ
, &
auth_ªquúed
,

346 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MICROSOFT_V2
,

347 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

348 { "+msch≠-v2", 
o_boﬁ
, &
auth_ªquúed
,

350 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2OR
 | 
MDTYPE_MICROSOFT_V2
,

351 &
l˝_w™t›ti⁄s
[0].
ch≠_mdty≥
 },

354 { "ªfu£-∑p", 
o_boﬁ
, &
ªfu£_∑p
,

356 { "-∑p", 
o_boﬁ
, &
ªfu£_∑p
,

357 "D⁄'àÆlow PAPáuthítiˇti⁄ wôhÖìr", 
OPT_ALIAS
 | 1 },

358 { "ªfu£-ch≠", 
o_boﬁ
, &
ªfu£_ch≠
,

360 
OPT_A2CLRB
 | 
MDTYPE_MD5
,

361 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

362 { "-ch≠", 
o_boﬁ
, &
ªfu£_ch≠
,

364 
OPT_ALIAS
 | 
OPT_A2CLRB
 | 
MDTYPE_MD5
,

365 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

366 #ifde‡
CHAPMS


367 { "ªfu£-msch≠", 
o_boﬁ
, &
ªfu£_msch≠
,

369 
OPT_A2CLRB
 | 
MDTYPE_MICROSOFT
,

370 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

371 { "-msch≠", 
o_boﬁ
, &
ªfu£_msch≠
,

373 
OPT_ALIAS
 | 
OPT_A2CLRB
 | 
MDTYPE_MICROSOFT
,

374 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

375 { "ªfu£-msch≠-v2", 
o_boﬁ
, &
ªfu£_msch≠_v2
,

377 
OPT_A2CLRB
 | 
MDTYPE_MICROSOFT_V2
,

378 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

379 { "-msch≠-v2", 
o_boﬁ
, &
ªfu£_msch≠_v2
,

381 
OPT_ALIAS
 | 
OPT_A2CLRB
 | 
MDTYPE_MICROSOFT_V2
,

382 &
l˝_Ælow›ti⁄s
[0].
ch≠_mdty≥
 },

385 { "ªquúe-óp", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_óp
,

386 "RequúêEAPáuthítiˇti⁄ fromÖìr", 
OPT_PRIOSUB
 | 1,

387 &
auth_ªquúed
 },

388 { "ªfu£-óp", 
o_boﬁ
, &
ªfu£_óp
,

391 { "«me", 
o_°rög
, 
our_«me
,

393 
OPT_PRIO
 | 
OPT_PRIV
 | 
OPT_STATIC
, 
NULL
, 
MAXNAMELEN
 },

395 { "+ua", 
o_•ecül
, (*)
£tu∑pfûe
,

397 
OPT_PRIO
 | 
OPT_A2STRVAL
, &
ua‚ame
 },

399 { "u£r", 
o_°rög
, 
u£r
,

400 "SëÇamêf‹áuth wôhÖìr", 
OPT_PRIO
 | 
OPT_STATIC
,

401 &
ex∂icô_u£r
, 
MAXNAMELEN
 },

403 { "∑ssw‹d", 
o_°rög
, 
∑sswd
,

405 
OPT_PRIO
 | 
OPT_STATIC
 | 
OPT_HIDE
,

406 &
ex∂icô_∑sswd
, 
MAXSECRETLEN
 },

408 { "u£ho°«me", 
o_boﬁ
, &
u£ho°«me
,

411 { "ªmŸíame", 
o_°rög
, 
ªmŸe_«me
,

412 "SëÑemŸê«mêf‹áuthítiˇti⁄", 
OPT_PRIO
 | 
OPT_STATIC
,

413 &
ex∂icô_ªmŸe
, 
MAXNAMELEN
 },

415 { "logö", 
o_boﬁ
, &
u£logö
,

416 "U£ sy°emÖassw‹d d©aba£ f‹ PAP", 
OPT_A2COPY
 | 1 ,

417 &
£ssi⁄_mgmt
 },

418 { "íabÀ-£ssi⁄", 
o_boﬁ
, &
£ssi⁄_mgmt
,

419 "E«bÀ sessi⁄áccou¡ög f‹ÑemŸê≥îs", 
OPT_PRIV
 | 1 },

421 { "∑p¸y±", 
o_boﬁ
, &
¸y±∑p
,

424 { "¥ivgroup", 
o_•ecül
, (*)
¥ivgroup
,

425 "AŒow grou∞membî†tÿu£Örivûeged o±i⁄s", 
OPT_PRIV
 | 
OPT_A2LIST
 },

427 { "Ælow-ù", 
o_•ecül
, (*)
£t_nﬂuth_addr
,

429 
OPT_PRIV
 | 
OPT_A2LIST
 },

431 { "ªmŸíumbî", 
o_°rög
, 
ªmŸe_numbî
,

432 "SëÑemŸêãÀph⁄ênumbî f‹áuthítiˇti⁄", 
OPT_PRIO
 | 
OPT_STATIC
,

433 
NULL
, 
MAXNAMELEN
 },

435 { "Ælow-numbî", 
o_•ecül
, (*)
£t_≥rmôãd_numbî
,

437 
OPT_PRIV
 | 
OPT_A2LIST
 },

439 #ifde‡
USE_EAPTLS


440 { "ˇ", 
o_°rög
, &
ˇ˚π_fûe
, "EAP-TLS CA certificate in PEM format" },

441 { "ˇ∑th", 
o_°rög
, &
ˇ_∑th
, "EAP-TLS CA certificate directory" },

442 { "˚π", 
o_°rög
, &
˚π_fûe
, "EAP-TLS client certificate in PEM format" },

443 { "key", 
o_°rög
, &
¥ivkey_fûe
, "EAP-TLS clientÖrivate key in PEM format" },

444 { "¸l-dú", 
o_°rög
, &
¸l_dú
, "Use CRLs in directory" },

445 { "¸l", 
o_°rög
, &
¸l_fûe
, "Use specific CRL file" },

446 { "max-és-vîsi⁄", 
o_°rög
, &
max_és_vîsi⁄
,

448 { "√ed-≥î-óp", 
o_boﬁ
, &
√ed_≥î_óp
,

451 { 
NULL
 }

452 
	}
};

458 
	$£tu∑pfûe
(
¨gv
)

459 **
¨gv
;

461 
FILE
 *
ufûe
;

462 
l
;

463 
uid_t
 
euid
;

464 
u
[
MAXNAMELEN
], 
p
[
MAXSECRETLEN
];

465 *
‚ame
;

467 
l˝_Ælow›ti⁄s
[0].
√g_u∑p
 = 1;

470 
‚ame
 = 
	`°rdup
(*
¨gv
);

471 i‡(
‚ame
 =
NULL
)

472 
	`novm
("+ua fileÇame");

473 
euid
 = 
	`gëeuid
();

474 i‡(
	`£ãuid
(
	`gëuid
()) == -1) {

475 
	`›ti⁄_îr‹
("u«bÀÅÿª£àuid bef‹ê›íög %s: %m", 
‚ame
);

476 
	`‰ì
(
‚ame
);

479 
ufûe
 = 
	`f›í
(
‚ame
, "r");

480 i‡(
	`£ãuid
(
euid
) == -1)

481 
	`Áèl
("unableÅoÑegainÖrivileges: %m");

482 i‡(
ufûe
 =
NULL
) {

483 
	`›ti⁄_îr‹
("u«bÀÅÿ›í u£∏logö d©®fûê%s", 
‚ame
);

484 
	`‰ì
(
‚ame
);

487 
	`check_ac˚ss
(
ufûe
, 
‚ame
);

488 
ua‚ame
 = 
‚ame
;

491 i‡(
	`fgës
(
u
, 
MAXNAMELEN
 - 1, 
ufûe
Ë=
NULL


492 || 
	`fgës
(
p
, 
MAXSECRETLEN
 - 1, 
ufûe
Ë=
NULL
) {

493 
	`f˛o£
(
ufûe
);

494 
	`›ti⁄_îr‹
("u«bÀÅÿªad u£∏logö d©®fûê%s", 
‚ame
);

495 
	`‰ì
(
‚ame
);

498 
	`f˛o£
(
ufûe
);

501 
l
 = 
	`°æí
(
u
);

502 i‡(
l
 > 0 && 
u
[l-1] == '\n')

503 
u
[
l
-1] = 0;

504 
l
 = 
	`°æí
(
p
);

505 i‡(
l
 > 0 && 
p
[l-1] == '\n')

506 
p
[
l
-1] = 0;

508 i‡(
	`ovîride_vÆue
("u£r", 
›ti⁄_¥i‹ôy
, 
‚ame
)) {

509 
	`°æ˝y
(
u£r
, 
u
, (user));

510 
ex∂icô_u£r
 = 1;

512 i‡(
	`ovîride_vÆue
("∑sswd", 
›ti⁄_¥i‹ôy
, 
‚ame
)) {

513 
	`°æ˝y
(
∑sswd
, 
p
, (passwd));

514 
ex∂icô_∑sswd
 = 1;

517 
	`‰ì
(
‚ame
);

519 
	}
}

526 
	$¥ivgroup
(
¨gv
)

527 **
¨gv
;

529 
group
 *
g
;

530 
i
;

532 
g
 = 
	`gëg∫am
(*
¨gv
);

533 i‡(
g
 == 0) {

534 
	`›ti⁄_îr‹
("grou∞%†i†unknown", *
¨gv
);

537 
i
 = 0; i < 
ngroups
; ++i) {

538 i‡(
groups
[
i
] =
g
->
gr_gid
) {

539 
¥ivûeged
 = 1;

544 
	}
}

552 
	$£t_nﬂuth_addr
(
¨gv
)

553 **
¨gv
;

555 *
addr
 = *
¨gv
;

556 
l
 = 
	`°æí
(
addr
) + 1;

557 
w‹dli°
 *
wp
;

559 
wp
 = (
w‹dli°
 *Ë
	`mÆloc
((w‹dli°Ë+ 
l
);

560 i‡(
wp
 =
NULL
)

561 
	`novm
("allow-ipárgument");

562 
wp
->
w‹d
 = (*) (wp + 1);

563 
wp
->
√xt
 = 
nﬂuth_addrs
;

564 
	`BCOPY
(
addr
, 
wp
->
w‹d
, 
l
);

565 
nﬂuth_addrs
 = 
wp
;

567 
	}
}

574 
	$£t_≥rmôãd_numbî
(
¨gv
)

575 **
¨gv
;

577 *
numbî
 = *
¨gv
;

578 
l
 = 
	`°æí
(
numbî
) + 1;

579 
w‹dli°
 *
wp
;

581 
wp
 = (
w‹dli°
 *Ë
	`mÆloc
((w‹dli°Ë+ 
l
);

582 i‡(
wp
 =
NULL
)

583 
	`novm
("allow-numberárgument");

584 
wp
->
w‹d
 = (*) (wp + 1);

585 
wp
->
√xt
 = 
≥rmôãd_numbîs
;

586 
	`BCOPY
(
numbî
, 
wp
->
w‹d
, 
l
);

587 
≥rmôãd_numbîs
 = 
wp
;

589 
	}
}

596 
	$lök_ªquúed
(
unô
)

597 
unô
;

599 
	}
}

604 
	$°¨t_lök
(
unô
)

605 
unô
;

607 
°©us
 = 
EXIT_CONNECT_FAILED
;

608 
	`√w_pha£
(
PHASE_SERIALCONN
);

610 
hungup
 = 0;

611 
devfd
 = 
the_ch™√l
->
	`c⁄√˘
();

612 i‡(
devfd
 < 0)

613 
Áû
;

623 
fd_µp
 = 
the_ch™√l
->
	`e°ablish_µp
(
devfd
);

624 i‡(
fd_µp
 < 0) {

625 
°©us
 = 
EXIT_FATAL_ERROR
;

626 
disc⁄√˘
;

629 i‡(!
dem™d
 && 
ifunô
 >= 0)

630 
	`£t_ifunô
(1);

636 i‡(
ifunô
 >= 0)

637 
	`nŸi˚
("C⁄√˘: %†<--> %s", 
i‚ame
, 
µp_dev«m
);

639 
	`nŸi˚
("SèπögÇegŸüti⁄ o¿%s", 
µp_dev«m
);

640 
	`add_fd
(
fd_µp
);

642 
°©us
 = 
EXIT_NEGOTIATION_FAILED
;

643 
	`√w_pha£
(
PHASE_ESTABLISH
);

645 
	`l˝_lowîup
(0);

648 
disc⁄√˘
:

649 
	`√w_pha£
(
PHASE_DISCONNECT
);

650 i‡(
the_ch™√l
->
disc⁄√˘
)

651 
the_ch™√l
->
	`disc⁄√˘
();

653 
Áû
:

654 
	`√w_pha£
(
PHASE_DEAD
);

655 i‡(
the_ch™√l
->
˛ónup
)

656 (*
the_ch™√l
->
˛ónup
)();

657 
	}
}

664 
	$lök_ãrmö©ed
(
unô
)

665 
unô
;

667 i‡(
pha£
 =
PHASE_DEAD
 ||Öha£ =
PHASE_MASTER
)

669 
	`√w_pha£
(
PHASE_DISCONNECT
);

671 i‡(
∑p_logout_hook
) {

672 
	`∑p_logout_hook
();

674 
	`£ssi⁄_íd
(
dev«m
);

676 i‡(!
doög_mu…ûök
) {

677 
	`nŸi˚
("ConnectionÅerminated.");

678 
	`¥öt_lök_°©s
();

680 
	`nŸi˚
("LinkÅerminated.");

687 i‡(!
doög_mu…ûök
 && !
dem™d
)

688 
	`ªmove_pidfûes
();

695 i‡(
fd_µp
 >= 0) {

696 
	`ªmove_fd
(
fd_µp
);

697 
	`˛ón_check
();

698 
the_ch™√l
->
	`di£°ablish_µp
(
devfd
);

699 i‡(
doög_mu…ûök
)

700 
	`mp_exô_bundÀ
();

701 
fd_µp
 = -1;

703 i‡(!
hungup
)

704 
	`l˝_lowîdown
(0);

705 i‡(!
doög_mu…ûök
 && !
dem™d
)

706 
	`s¸ùt_un£ãnv
("IFNAME");

712 i‡(
devfd
 >0 && 
the_ch™√l
->
disc⁄√˘
) {

713 
the_ch™√l
->
	`disc⁄√˘
();

714 
devfd
 = -1;

716 i‡(
the_ch™√l
->
˛ónup
)

717 (*
the_ch™√l
->
˛ónup
)();

719 i‡(
doög_mu…ûök
 && 
mu…ûök_ma°î
) {

720 i‡(!
bundÀ_ãrmö©ög
) {

721 
	`√w_pha£
(
PHASE_MASTER
);

722 i‡(
ma°î_dëach
 && !
dëached
)

723 
	`dëach
();

725 
	`mp_bundÀ_ãrmö©ed
();

727 
	`√w_pha£
(
PHASE_DEAD
);

728 
	}
}

734 
	$lök_down
(
unô
)

735 
unô
;

737 i‡(
auth_°©e
 !
s_down
) {

738 
	`nŸify
(
lök_down_nŸifõr
, 0);

739 
auth_°©e
 = 
s_down
;

740 i‡(
auth_s¸ùt_°©e
 =
s_up
 && 
auth_s¸ùt_pid
 == 0) {

741 
	`upd©e_lök_°©s
(
unô
);

742 
auth_s¸ùt_°©e
 = 
s_down
;

743 
	`auth_s¸ùt
(
_PATH_AUTHDOWN
);

746 i‡(!
doög_mu…ûök
) {

747 
	`uµî_œyîs_down
(
unô
);

748 i‡(
pha£
 !
PHASE_DEAD
 &&Öha£ !
PHASE_MASTER
)

749 
	`√w_pha£
(
PHASE_ESTABLISH
);

753 
	}
}

755 
	$uµî_œyîs_down
(
unô
)

757 
i
;

758 
¥Ÿít
 *
¥Ÿp
;

760 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

761 i‡(!
¥Ÿp
->
íabÀd_Êag
)

763 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
)

764 (*
¥Ÿp
->
lowîdown
)(
unô
);

765 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
)

766 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

768 
num_≈_›í
 = 0;

769 
num_≈_up
 = 0;

770 
	}
}

777 
	$lök_e°ablished
(
unô
)

778 
unô
;

780 
auth
;

781 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

782 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

783 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

784 #ifde‡
USE_EAPTLS


785 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

787 
i
;

788 
¥Ÿít
 *
¥Ÿp
;

793 i‡(!
doög_mu…ûök
) {

794 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

795 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag


796 && 
¥Ÿp
->
lowîup
 !
NULL
)

797 (*
¥Ÿp
->
lowîup
)(
unô
);

800 i‡(!
auth_ªquúed
 && 
nﬂuth_addrs
 !
NULL
)

801 
	`£t_Ælowed_addrs
(
unô
, 
NULL
, NULL);

803 i‡(
auth_ªquúed
 && !(
go
->
√g_u∑p
 || go->
√g_ch≠
 || go->
√g_óp
)) {

811 i‡(
nﬂuth_addrs
 !
NULL
) {

812 
	`£t_Ælowed_addrs
(
unô
, 
NULL
, NULL);

813 } i‡(!
wo
->
√g_u∑p
 || 
u£logö
 || !
	`nuŒ_logö
(
unô
)) {

814 
	`w¨n
("peerÑefusedÅoáuthenticate:ÅerminatingÜink");

815 
°©us
 = 
EXIT_PEER_AUTH_FAILED
;

816 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

821 #ifde‡
USE_EAPTLS


822 i‡(
√ed_≥î_óp
 && !
ao
->
√g_óp
) {

823 
	`w¨n
("eapÑequiredÅoáuthenticate us butÇo suitable secrets");

824 
	`l˝_˛o£
(
unô
, "couldn'tÇegotiateÉap");

825 
°©us
 = 
EXIT_AUTH_TOPEER_FAILED
;

829 i‡(
√ed_≥î_óp
 && !
ho
->
√g_óp
) {

830 
	`w¨n
("peer doesn't wantÅoáuthenticate us withÉap");

831 
	`l˝_˛o£
(
unô
, "couldn'tÇegotiateÉap");

832 
°©us
 = 
EXIT_PEER_AUTH_FAILED
;

837 
	`√w_pha£
(
PHASE_AUTHENTICATE
);

838 
auth
 = 0;

839 i‡(
go
->
√g_óp
) {

840 
	`óp_auth≥î
(
unô
, 
our_«me
);

841 
auth
 |
EAP_PEER
;

842 } i‡(
go
->
√g_ch≠
) {

843 
	`ch≠_auth_≥î
(
unô
, 
our_«me
, 
	`CHAP_DIGEST
(
go
->
ch≠_mdty≥
));

844 
auth
 |
CHAP_PEER
;

845 } i‡(
go
->
√g_u∑p
) {

846 
	`u∑p_auth≥î
(
unô
);

847 
auth
 |
PAP_PEER
;

849 i‡(
ho
->
√g_óp
) {

850 
	`óp_authwôh≥î
(
unô
, 
u£r
);

851 
auth
 |
EAP_WITHPEER
;

852 } i‡(
ho
->
√g_ch≠
) {

853 
	`ch≠_auth_wôh_≥î
(
unô
, 
u£r
, 
	`CHAP_DIGEST
(
ho
->
ch≠_mdty≥
));

854 
auth
 |
CHAP_WITHPEER
;

855 } i‡(
ho
->
√g_u∑p
) {

858 i‡(
∑sswd
[0] =0 && !
ex∂icô_∑sswd
) {

859 
∑sswd_‰om_fûe
 = 1;

860 i‡(!
	`gë_∑p_∑sswd
(
∑sswd
))

861 
	`îr‹
("No secret found for PAPÜogin");

863 
	`u∑p_authwôh≥î
(
unô
, 
u£r
, 
∑sswd
);

864 
auth
 |
PAP_WITHPEER
;

866 
auth_≥ndög
[
unô
] = 
auth
;

867 
auth_d⁄e
[
unô
] = 0;

869 i‡(!
auth
)

870 
	`√tw‹k_pha£
(
unô
);

871 
	}
}

877 
	$√tw‹k_pha£
(
unô
)

878 
unô
;

880 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

883 i‡(*
ªmŸe_numbî
)

884 
	`nŸi˚
("≥î from cÆlögÇumbî %qáuth‹ized", 
ªmŸe_numbî
);

889 i‡(
go
->
√g_ch≠
 || go->
√g_u∑p
 || go->
√g_óp
) {

890 
	`nŸify
(
auth_up_nŸifõr
, 0);

891 
auth_°©e
 = 
s_up
;

892 i‡(
auth_s¸ùt_°©e
 =
s_down
 && 
auth_s¸ùt_pid
 == 0) {

893 
auth_s¸ùt_°©e
 = 
s_up
;

894 
	`auth_s¸ùt
(
_PATH_AUTHUP
);

898 #ifde‡
CBCP_SUPPORT


902 i‡(
go
->
√g_cb˝
) {

903 
	`√w_pha£
(
PHASE_CALLBACK
);

904 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

912 i‡(
exåa_›ti⁄s
) {

913 
	`›ti⁄s_‰om_li°
(
exåa_›ti⁄s
, 1);

914 
	`‰ì_w‹dli°
(
exåa_›ti⁄s
);

915 
exåa_›ti⁄s
 = 0;

917 
	`°¨t_√tw‹ks
(
unô
);

918 
	}
}

921 
	$°¨t_√tw‹ks
(
unô
)

922 
unô
;

924 
i
;

925 
¥Ÿít
 *
¥Ÿp
;

926 
e˝_ªquúed
, 
mµe_ªquúed
;

928 
	`√w_pha£
(
PHASE_NETWORK
);

930 #ifde‡
HAVE_MULTILINK


931 i‡(
mu…ûök
) {

932 i‡(
	`mp_joö_bundÀ
()) {

933 i‡(
mu…ûök_joö_hook
)

934 (*
mu…ûök_joö_hook
)();

935 i‡(
updëach
 && !
nodëach
)

936 
	`dëach
();

942 #ifde‡
PPP_FILTER


943 i‡(!
dem™d
)

944 
	`£t_fûãrs
(&
∑ss_fûãr
, &
a˘ive_fûãr
);

947 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

948 i‡((
¥Ÿp
->
¥Ÿocﬁ
 =
PPP_ECP
 ||ÖrŸp->¥Ÿocﬁ =
PPP_CCP
)

949 && 
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
)

950 (*
¥Ÿp
->
›í
)(0);

955 
e˝_ªquúed
 = 
e˝_gŸ›ti⁄s
[
unô
].
ªquúed
;

956 
mµe_ªquúed
 = 
c˝_gŸ›ti⁄s
[
unô
].
mµe
;

957 i‡(!
e˝_ªquúed
 && !
mµe_ªquúed
)

958 
	`c⁄töue_√tw‹ks
(
unô
);

959 
	}
}

962 
	$c⁄töue_√tw‹ks
(
unô
)

963 
unô
;

965 
i
;

966 
¥Ÿít
 *
¥Ÿp
;

971 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

972 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000

973 && 
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
 &&ÖrŸp->¥Ÿocﬁ !
PPP_ECP


974 && 
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

975 (*
¥Ÿp
->
›í
)(0);

976 ++
num_≈_›í
;

979 i‡(
num_≈_›í
 == 0)

981 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

982 
	}
}

988 
	$auth_≥î_Áû
(
unô
, 
¥Ÿocﬁ
)

989 
unô
, 
¥Ÿocﬁ
;

994 
°©us
 = 
EXIT_PEER_AUTH_FAILED
;

995 
	`l˝_˛o£
(
unô
, "Authentication failed");

996 
	}
}

1002 
	$auth_≥î_suc˚ss
(
unô
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
, 
«me
, 
«mñí
)

1003 
unô
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
;

1004 *
«me
;

1005 
«mñí
;

1007 
bô
;

1009 
¥Ÿocﬁ
) {

1010 
PPP_CHAP
:

1011 
bô
 = 
CHAP_PEER
;

1012 
¥Ÿ_Êav‹
) {

1013 
CHAP_MD5
:

1014 
bô
 |
CHAP_MD5_PEER
;

1016 #ifde‡
CHAPMS


1017 
CHAP_MICROSOFT
:

1018 
bô
 |
CHAP_MS_PEER
;

1020 
CHAP_MICROSOFT_V2
:

1021 
bô
 |
CHAP_MS2_PEER
;

1026 
PPP_PAP
:

1027 
bô
 = 
PAP_PEER
;

1029 
PPP_EAP
:

1030 
bô
 = 
EAP_PEER
;

1033 
	`w¨n
("auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x", 
¥Ÿocﬁ
);

1040 i‡(
«mñí
 > (
≥î_auth«me
) - 1)

1041 
«mñí
 = (
≥î_auth«me
) - 1;

1042 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

1043 
≥î_auth«me
[
«mñí
] = 0;

1044 
	`s¸ùt_£ãnv
("PEERNAME", 
≥î_auth«me
, 0);

1047 
auth_d⁄e
[
unô
] |
bô
;

1053 i‡((
auth_≥ndög
[
unô
] &~
bô
) == 0)

1054 
	`√tw‹k_pha£
(
unô
);

1055 
	}
}

1061 
	$auth_wôh≥î_Áû
(
unô
, 
¥Ÿocﬁ
)

1062 
unô
, 
¥Ÿocﬁ
;

1064 i‡(
∑sswd_‰om_fûe
)

1065 
	`BZERO
(
∑sswd
, 
MAXSECRETLEN
);

1072 
°©us
 = 
EXIT_AUTH_TOPEER_FAILED
;

1073 
	`l˝_˛o£
(
unô
, "FailedÅoáuthenticate ourselvesÅoÖeer");

1074 
	}
}

1080 
	$auth_wôh≥î_suc˚ss
(
unô
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
)

1081 
unô
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
;

1083 
bô
;

1084 c⁄° *
¥Ÿ
 = "";

1086 
¥Ÿocﬁ
) {

1087 
PPP_CHAP
:

1088 
bô
 = 
CHAP_WITHPEER
;

1089 
¥Ÿ
 = "CHAP";

1090 
¥Ÿ_Êav‹
) {

1091 
CHAP_MD5
:

1092 
bô
 |
CHAP_MD5_WITHPEER
;

1094 #ifde‡
CHAPMS


1095 
CHAP_MICROSOFT
:

1096 
bô
 |
CHAP_MS_WITHPEER
;

1098 
CHAP_MICROSOFT_V2
:

1099 
bô
 |
CHAP_MS2_WITHPEER
;

1104 
PPP_PAP
:

1105 i‡(
∑sswd_‰om_fûe
)

1106 
	`BZERO
(
∑sswd
, 
MAXSECRETLEN
);

1107 
bô
 = 
PAP_WITHPEER
;

1108 
¥Ÿ
 = "PAP";

1110 
PPP_EAP
:

1111 
bô
 = 
EAP_WITHPEER
;

1112 
¥Ÿ
 = "EAP";

1115 
	`w¨n
("auth_wôh≥î_suc˚ss: unknow¿¥Ÿocﬁ %x", 
¥Ÿocﬁ
);

1116 
bô
 = 0;

1119 
	`nŸi˚
("%†authítiˇti⁄ suc˚eded", 
¥Ÿ
);

1122 
auth_d⁄e
[
unô
] |
bô
;

1128 i‡((
auth_≥ndög
[
unô
] &~
bô
) == 0)

1129 
	`√tw‹k_pha£
(
unô
);

1130 
	}
}

1137 
	$≈_up
(
unô
, 
¥Ÿo
)

1138 
unô
, 
¥Ÿo
;

1140 
éim
;

1142 i‡(
num_≈_up
 == 0) {

1146 
°©us
 = 
EXIT_OK
;

1147 
unsuc˚ss
 = 0;

1148 
	`√w_pha£
(
PHASE_RUNNING
);

1150 i‡(
idÀ_time_hook
 != 0)

1151 
éim
 = (*
idÀ_time_hook
)(
NULL
);

1153 
éim
 = 
idÀ_time_limô
;

1154 i‡(
éim
 > 0)

1155 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
éim
);

1161 i‡(
maxc⁄√˘
 > 0)

1162 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
maxc⁄√˘
);

1164 #ifde‡
MAXOCTETS


1165 i‡(
maxo˘ës
 > 0)

1166 
	`TIMEOUT
(
check_maxo˘ës
, 
NULL
, 
maxo˘ës_timeout
);

1172 i‡(
updëach
 && !
nodëach
) {

1173 
	`dbglog
("updetach is set. Now detaching.");

1174 
	`dëach
();

1175 #ifde‡
SYSTEMD


1176 } i‡(
nodëach
 && 
up_sdnŸify
) {

1177 
	`dbglog
("up_sdnotify is set. NowÇotifying systemd: READY=1");

1178 
	`sd_nŸify
(0, "READY=1");

1182 ++
num_≈_up
;

1183 
	}
}

1189 
	$≈_down
(
unô
, 
¥Ÿo
)

1190 
unô
, 
¥Ÿo
;

1192 i‡(--
num_≈_up
 == 0) {

1193 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

1194 
	`UNTIMEOUT
(
c⁄√˘_time_expúed
, 
NULL
);

1195 #ifde‡
MAXOCTETS


1196 
	`UNTIMEOUT
(
check_maxo˘ës
, 
NULL
);

1198 
	`√w_pha£
(
PHASE_NETWORK
);

1200 
	}
}

1206 
	$≈_föished
(
unô
, 
¥Ÿo
)

1207 
unô
, 
¥Ÿo
;

1209 i‡(--
num_≈_›í
 <= 0) {

1211 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

1213 
	}
}

1215 #ifde‡
MAXOCTETS


1217 
	$check_maxo˘ës
(
¨g
)

1218 *
¨g
;

1220 
u£d
;

1222 
	`upd©e_lök_°©s
(
ifunô
);

1223 
lök_°©s_vÆid
=0;

1225 
maxo˘ës_dú
) {

1226 
PPP_OCTETS_DIRECTION_IN
:

1227 
u£d
 = 
lök_°©s
.
byãs_ö
;

1229 
PPP_OCTETS_DIRECTION_OUT
:

1230 
u£d
 = 
lök_°©s
.
byãs_out
;

1232 
PPP_OCTETS_DIRECTION_MAXOVERAL
:

1233 
PPP_OCTETS_DIRECTION_MAXSESSION
:

1234 
u£d
 = (
lök_°©s
.
byãs_ö
 >Üök_°©s.
byãs_out
) ?Üink_stats.bytes_in :Üink_stats.bytes_out;

1237 
u£d
 = 
lök_°©s
.
byãs_ö
+lök_°©s.
byãs_out
;

1240 i‡(
u£d
 > 
maxo˘ës
) {

1241 
	`nŸi˚
("Tøffi¯limôÑóched. Limô: %u U£d: %u", 
maxo˘ës
, 
u£d
);

1242 
°©us
 = 
EXIT_TRAFFIC_LIMIT
;

1243 
	`l˝_˛o£
(0, "TrafficÜimit");

1244 
√ed_hﬁdoff
 = 0;

1246 
	`TIMEOUT
(
check_maxo˘ës
, 
NULL
, 
maxo˘ës_timeout
);

1248 
	}
}

1256 
	$check_idÀ
(
¨g
)

1257 *
¨g
;

1259 
µp_idÀ
 
idÀ
;

1260 
time_t
 
ôime
;

1261 
éim
;

1263 i‡(!
	`gë_idÀ_time
(0, &
idÀ
))

1265 i‡(
idÀ_time_hook
 != 0) {

1266 
éim
 = 
	`idÀ_time_hook
(&
idÀ
);

1268 
ôime
 = 
	`MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

1269 
éim
 = 
idÀ_time_limô
 - 
ôime
;

1271 i‡(
éim
 <= 0) {

1273 
	`nŸi˚
("Terminating connection dueÅoÜack ofáctivity.");

1274 
°©us
 = 
EXIT_IDLE_TIMEOUT
;

1275 
	`l˝_˛o£
(0, "Link inactive");

1276 
√ed_hﬁdoff
 = 0;

1278 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
éim
);

1280 
	}
}

1286 
	$c⁄√˘_time_expúed
(
¨g
)

1287 *
¨g
;

1289 
	`öfo
("ConnectÅimeÉxpired");

1290 
°©us
 = 
EXIT_CONNECT_TIME
;

1291 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

1292 
	}
}

1298 
	$auth_check_›ti⁄s
()

1300 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

1301 
ˇn_auth
;

1302 
œcks_ù
;

1305 i‡(
our_«me
[0] =0 || 
u£ho°«me
)

1306 
	`°æ˝y
(
our_«me
, 
ho°«me
, (our_name));

1309 i‡(
u£r
[0] =0 && !
ex∂icô_u£r
)

1310 
	`°æ˝y
(
u£r
, 
our_«me
, (user));

1316 i‡(!
auth_ªquúed
 && !
Ælow_™y_ù
 && 
	`have_rouã_to
(0Ë&& !
¥ivûeged
) {

1317 
auth_ªquúed
 = 1;

1318 
deÁu…_auth
 = 1;

1322 i‡(
wo
->
ch≠_mdty≥
)

1323 
wo
->
√g_ch≠
 = 1;

1326 i‡(
auth_ªquúed
) {

1327 
Ælow_™y_ù
 = 0;

1328 i‡(!
wo
->
√g_ch≠
 && !wo->
√g_u∑p
 && !wo->
√g_óp
) {

1329 
wo
->
√g_ch≠
 = 
ch≠_mdty≥_Æl
 !
MDTYPE_NONE
;

1330 
wo
->
ch≠_mdty≥
 = 
ch≠_mdty≥_Æl
;

1331 
wo
->
√g_u∑p
 = 1;

1332 
wo
->
√g_óp
 = 1;

1335 
wo
->
√g_ch≠
 = 0;

1336 
wo
->
ch≠_mdty≥
 = 
MDTYPE_NONE
;

1337 
wo
->
√g_u∑p
 = 0;

1338 
wo
->
√g_óp
 = 0;

1346 
œcks_ù
 = 0;

1347 
ˇn_auth
 = 
wo
->
√g_u∑p
 && (
u£logö
 || 
	`have_∑p_£¸ë
(&
œcks_ù
));

1348 i‡(!
ˇn_auth
 && (
wo
->
√g_ch≠
 || wo->
√g_óp
)) {

1349 
ˇn_auth
 = 
	`have_ch≠_£¸ë
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
),

1350 
our_«me
, 1, &
œcks_ù
);

1352 i‡(!
ˇn_auth
 && 
wo
->
√g_óp
) {

1353 
ˇn_auth
 = 
	`have_§p_£¸ë
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
),

1354 
our_«me
, 1, &
œcks_ù
);

1357 #ifde‡
USE_EAPTLS


1358 i‡(!
ˇn_auth
 && 
wo
->
√g_óp
) {

1359 
ˇn_auth
 =

1360 
	`have_ó±ls_£¸ë_£rvî
((
ex∂icô_ªmŸe
 ? 
ªmŸe_«me
 :

1361 
NULL
), 
our_«me
, 1, &
œcks_ù
);

1366 i‡(
auth_ªquúed
 && !
ˇn_auth
 && 
nﬂuth_addrs
 =
NULL
) {

1367 i‡(
deÁu…_auth
) {

1368 
	`›ti⁄_îr‹
(

1370 
	`›ti⁄_îr‹
(

1372 } i‡(
ex∂icô_ªmŸe
)

1373 
	`›ti⁄_îr‹
(

1375 
ªmŸe_«me
);

1377 
	`›ti⁄_îr‹
(

1379 
	`›ti⁄_îr‹
(

1381 i‡(
œcks_ù
)

1382 
	`›ti⁄_îr‹
(

1385 
	`exô
(1);

1391 i‡(!
	`auth_numbî
()) {

1392 
	`w¨n
("ˇŒögÇumbî %q i†nŸáuth‹ized", 
ªmŸe_numbî
);

1393 
	`exô
(
EXIT_CNID_AUTH_FAILED
);

1395 
	}
}

1403 
	$auth_ª£t
(
unô
)

1404 
unô
;

1406 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

1407 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

1408 
hadch≠
;

1410 
hadch≠
 = -1;

1411 
ao
->
√g_u∑p
 = !
ªfu£_∑p
 && (
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
NULL
));

1412 
ao
->
√g_ch≠
 = (!
ªfu£_ch≠
 || !
ªfu£_msch≠
 || !
ªfu£_msch≠_v2
)

1413 && ((
∑sswd
[0] !0 || 
ex∂icô_∑sswd
) ||

1414 (
hadch≠
 = 
	`have_ch≠_£¸ë
(
u£r
, (
ex∂icô_ªmŸe
? 
ªmŸe_«me
:

1415 
NULL
), 0, NULL)));

1416 
ao
->
√g_óp
 = !
ªfu£_óp
 && (

1417 
∑sswd
[0] != 0 ||

1418 (
hadch≠
 =1 || (hadch≠ =-1 && 
	`have_ch≠_£¸ë
(
u£r
,

1419 (
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
), 0, NULL))) ||

1420 
	`have_§p_£¸ë
(
u£r
, (
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
), 0, NULL)

1421 #ifde‡
USE_EAPTLS


1422 || 
	`have_ó±ls_£¸ë_˛õ¡
(
u£r
, (
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
))

1426 
hadch≠
 = -1;

1427 i‡(
go
->
√g_u∑p
 && !
u£logö
 && !
	`have_∑p_£¸ë
(
NULL
))

1428 
go
->
√g_u∑p
 = 0;

1429 i‡(
go
->
√g_ch≠
) {

1430 i‡(!(
hadch≠
 = 
	`have_ch≠_£¸ë
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
),

1431 
our_«me
, 1, 
NULL
)))

1432 
go
->
√g_ch≠
 = 0;

1434 i‡(
go
->
√g_óp
 &&

1435 (
hadch≠
 == 0 || (hadchap == -1 &&

1436 !
	`have_ch≠_£¸ë
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
), 
our_«me
,

1437 1, 
NULL
))) &&

1438 !
	`have_§p_£¸ë
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
), 
our_«me
, 1,

1439 
NULL
)

1440 #ifde‡
USE_EAPTLS


1441 && !
	`have_ó±ls_£¸ë_£rvî
((
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
),

1442 
our_«me
, 1, 
NULL
)

1445 
go
->
√g_óp
 = 0;

1446 
	}
}

1460 
	$check_∑sswd
(
unô
, 
au£r
, 
u£æí
, 
≠asswd
, 
∑sswdÀn
, 
msg
)

1461 
unô
;

1462 *
au£r
;

1463 
u£æí
;

1464 *
≠asswd
;

1465 
∑sswdÀn
;

1466 **
msg
;

1468 
ªt
;

1469 *
fûíame
;

1470 
FILE
 *
f
;

1471 
w‹dli°
 *
addrs
 = 
NULL
, *
›ts
 = NULL;

1472 
∑sswd
[256], 
u£r
[256];

1473 
£¸ë
[
MAXWORDLEN
];

1474 
©ãm±s
 = 0;

1481 
	`¶¥ötf
(
∑sswd
, ’asswd), "%.*v", 
∑sswdÀn
, 
≠asswd
);

1482 
	`¶¥ötf
(
u£r
, (u£r), "%.*v", 
u£æí
, 
au£r
);

1483 *
msg
 = "";

1488 i‡(
∑p_auth_hook
) {

1489 
ªt
 = (*
∑p_auth_hook
)(
u£r
, 
∑sswd
, 
msg
, &
addrs
, &
›ts
);

1490 i‡(
ªt
 >= 0) {

1493 i‡(
ªt
)

1494 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

1495 i‡(
›ts
 != 0)

1496 
	`‰ì_w‹dli°
(
›ts
);

1497 i‡(
addrs
 != 0)

1498 
	`‰ì_w‹dli°
(
addrs
);

1499 
	`BZERO
(
∑sswd
, (passwd));

1500  
ªt
? 
UPAP_AUTHACK
: 
UPAP_AUTHNAK
;

1508 
fûíame
 = 
_PATH_UPAPFILE
;

1509 
addrs
 = 
›ts
 = 
NULL
;

1510 
ªt
 = 
UPAP_AUTHNAK
;

1511 
f
 = 
	`f›í
(
fûíame
, "r");

1512 i‡(
f
 =
NULL
) {

1513 
	`îr‹
("C™'à›í PAPÖassw‹d fûê%s: %m", 
fûíame
);

1516 
	`check_ac˚ss
(
f
, 
fûíame
);

1517 i‡(
	`sˇn_authfûe
(
f
, 
u£r
, 
our_«me
, 
£¸ë
, &
addrs
, &
›ts
, 
fûíame
, 0) < 0) {

1518 
	`w¨n
("nÿPAP se¸ë found f‹ %s", 
u£r
);

1524 
logö_£¸ë
 = 
	`°rcmp
(
£¸ë
, "@login") == 0;

1525 
ªt
 = 
UPAP_AUTHACK
;

1526 i‡(
u£logö
 || 
logö_£¸ë
) {

1528 i‡(
	`£ssi⁄_fuŒ
(
u£r
, 
∑sswd
, 
dev«m
, 
msg
) == 0) {

1529 
ªt
 = 
UPAP_AUTHNAK
;

1531 } i‡(
£ssi⁄_mgmt
) {

1532 i‡(
	`£ssi⁄_check
(
u£r
, 
NULL
, 
dev«m
, NULL) == 0) {

1533 
	`w¨n
("Pì∏%q faûed PAP Sessi⁄ vîifiˇti⁄", 
u£r
);

1534 
ªt
 = 
UPAP_AUTHNAK
;

1537 i‡(
£¸ë
[0] !0 && !
logö_£¸ë
) {

1539 i‡(
¸y±∑p
 || 
	`°rcmp
(
∑sswd
, 
£¸ë
) != 0) {

1540 *
cbuf
 = 
	`¸y±
(
∑sswd
, 
£¸ë
);

1541 i‡(!
cbuf
 || 
	`°rcmp
(cbuf, 
£¸ë
) != 0)

1542 
ªt
 = 
UPAP_AUTHNAK
;

1546 
	`f˛o£
(
f
);

1549 i‡(
ªt
 =
UPAP_AUTHNAK
) {

1550 i‡(**
msg
 == 0)

1551 *
msg
 = "Login incorrect";

1558 i‡(
©ãm±s
++ >= 10) {

1559 
	`w¨n
("%d LOGIN FAILURES ON %s, %s", 
©ãm±s
, 
dev«m
, 
u£r
);

1560 
	`l˝_˛o£
(
unô
, "login failed");

1562 i‡(
©ãm±s
 > 3)

1563 
	`¶ìp
((
u_öt
Ë(
©ãm±s
 - 3) * 5);

1564 i‡(
›ts
 !
NULL
)

1565 
	`‰ì_w‹dli°
(
›ts
);

1568 
©ãm±s
 = 0;

1569 i‡(**
msg
 == 0)

1570 *
msg
 = "Login ok";

1571 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

1574 i‡(
addrs
 !
NULL
)

1575 
	`‰ì_w‹dli°
(
addrs
);

1576 
	`BZERO
(
∑sswd
, (passwd));

1577 
	`BZERO
(
£¸ë
, (secret));

1579  
ªt
;

1580 
	}
}

1588 
	$nuŒ_logö
(
unô
)

1589 
unô
;

1591 *
fûíame
;

1592 
FILE
 *
f
;

1593 
i
, 
ªt
;

1594 
w‹dli°
 *
addrs
, *
›ts
;

1595 
£¸ë
[
MAXWORDLEN
];

1600 
ªt
 = -1;

1601 i‡(
nuŒ_auth_hook
)

1602 
ªt
 = (*
nuŒ_auth_hook
)(&
addrs
, &
›ts
);

1607 i‡(
ªt
 <= 0) {

1608 
fûíame
 = 
_PATH_UPAPFILE
;

1609 
addrs
 = 
NULL
;

1610 
f
 = 
	`f›í
(
fûíame
, "r");

1611 i‡(
f
 =
NULL
)

1613 
	`check_ac˚ss
(
f
, 
fûíame
);

1615 
i
 = 
	`sˇn_authfûe
(
f
, "", 
our_«me
, 
£¸ë
, &
addrs
, &
›ts
, 
fûíame
, 0);

1616 
ªt
 = 
i
 >0 && 
£¸ë
[0] == 0;

1617 
	`BZERO
(
£¸ë
, (secret));

1618 
	`f˛o£
(
f
);

1621 i‡(
ªt
)

1622 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

1623 i‡(
›ts
 != 0)

1624 
	`‰ì_w‹dli°
(
›ts
);

1625 i‡(
addrs
 != 0)

1626 
	`‰ì_w‹dli°
(
addrs
);

1628  
ªt
;

1629 
	}
}

1639 
	$gë_∑p_∑sswd
(
∑sswd
)

1640 *
∑sswd
;

1642 *
fûíame
;

1643 
FILE
 *
f
;

1644 
ªt
;

1645 
£¸ë
[
MAXWORDLEN
];

1650 i‡(
∑p_∑sswd_hook
) {

1651 
ªt
 = (*
∑p_∑sswd_hook
)(
u£r
, 
∑sswd
);

1652 i‡(
ªt
 >= 0)

1653  
ªt
;

1656 
fûíame
 = 
_PATH_UPAPFILE
;

1657 
f
 = 
	`f›í
(
fûíame
, "r");

1658 i‡(
f
 =
NULL
)

1660 
	`check_ac˚ss
(
f
, 
fûíame
);

1661 
ªt
 = 
	`sˇn_authfûe
(
f
, 
u£r
,

1662 (
ªmŸe_«me
[0]?ÑemŸe_«me: 
NULL
),

1663 
£¸ë
, 
NULL
, NULL, 
fûíame
, 0);

1664 
	`f˛o£
(
f
);

1665 i‡(
ªt
 < 0)

1667 i‡(
∑sswd
 !
NULL
)

1668 
	`°æ˝y
(
∑sswd
, 
£¸ë
, 
MAXSECRETLEN
);

1669 
	`BZERO
(
£¸ë
, (secret));

1671 
	}
}

1679 
	$have_∑p_£¸ë
(
œcks_ùp
)

1680 *
œcks_ùp
;

1682 
FILE
 *
f
;

1683 
ªt
;

1684 *
fûíame
;

1685 
w‹dli°
 *
addrs
;

1688 i‡(
∑p_check_hook
) {

1689 
ªt
 = (*
∑p_check_hook
)();

1690 i‡(
ªt
 >= 0)

1691  
ªt
;

1694 
fûíame
 = 
_PATH_UPAPFILE
;

1695 
f
 = 
	`f›í
(
fûíame
, "r");

1696 i‡(
f
 =
NULL
)

1699 
ªt
 = 
	`sˇn_authfûe
(
f
, (
ex∂icô_ªmŸe
? 
ªmŸe_«me
: 
NULL
), 
our_«me
,

1700 
NULL
, &
addrs
, NULL, 
fûíame
, 0);

1701 
	`f˛o£
(
f
);

1702 i‡(
ªt
 >0 && !
	`some_ù_ok
(
addrs
)) {

1703 i‡(
œcks_ùp
 != 0)

1704 *
œcks_ùp
 = 1;

1705 
ªt
 = -1;

1707 i‡(
addrs
 != 0)

1708 
	`‰ì_w‹dli°
(
addrs
);

1710  
ªt
 >= 0;

1711 
	}
}

1721 
	$have_ch≠_£¸ë
(
˛õ¡
, 
£rvî
, 
√ed_ù
, 
œcks_ùp
)

1722 *
˛õ¡
;

1723 *
£rvî
;

1724 
√ed_ù
;

1725 *
œcks_ùp
;

1727 
FILE
 *
f
;

1728 
ªt
;

1729 *
fûíame
;

1730 
w‹dli°
 *
addrs
;

1732 i‡(
ch≠_check_hook
) {

1733 
ªt
 = (*
ch≠_check_hook
)();

1734 i‡(
ªt
 >= 0) {

1735  
ªt
;

1739 
fûíame
 = 
_PATH_CHAPFILE
;

1740 
f
 = 
	`f›í
(
fûíame
, "r");

1741 i‡(
f
 =
NULL
)

1744 i‡(
˛õ¡
 !
NULL
 && client[0] == 0)

1745 
˛õ¡
 = 
NULL
;

1746 i‡(
£rvî
 !
NULL
 && server[0] == 0)

1747 
£rvî
 = 
NULL
;

1749 
ªt
 = 
	`sˇn_authfûe
(
f
, 
˛õ¡
, 
£rvî
, 
NULL
, &
addrs
, NULL, 
fûíame
, 0);

1750 
	`f˛o£
(
f
);

1751 i‡(
ªt
 >0 && 
√ed_ù
 && !
	`some_ù_ok
(
addrs
)) {

1752 i‡(
œcks_ùp
 != 0)

1753 *
œcks_ùp
 = 1;

1754 
ªt
 = -1;

1756 i‡(
addrs
 != 0)

1757 
	`‰ì_w‹dli°
(
addrs
);

1759  
ªt
 >= 0;

1760 
	}
}

1770 
	$have_§p_£¸ë
(
˛õ¡
, 
£rvî
, 
√ed_ù
, 
œcks_ùp
)

1771 *
˛õ¡
;

1772 *
£rvî
;

1773 
√ed_ù
;

1774 *
œcks_ùp
;

1776 
FILE
 *
f
;

1777 
ªt
;

1778 *
fûíame
;

1779 
w‹dli°
 *
addrs
;

1781 
fûíame
 = 
_PATH_SRPFILE
;

1782 
f
 = 
	`f›í
(
fûíame
, "r");

1783 i‡(
f
 =
NULL
)

1786 i‡(
˛õ¡
 !
NULL
 && client[0] == 0)

1787 
˛õ¡
 = 
NULL
;

1788 i‡(
£rvî
 !
NULL
 && server[0] == 0)

1789 
£rvî
 = 
NULL
;

1791 
ªt
 = 
	`sˇn_authfûe
(
f
, 
˛õ¡
, 
£rvî
, 
NULL
, &
addrs
, NULL, 
fûíame
, 0);

1792 
	`f˛o£
(
f
);

1793 i‡(
ªt
 >0 && 
√ed_ù
 && !
	`some_ù_ok
(
addrs
)) {

1794 i‡(
œcks_ùp
 != 0)

1795 *
œcks_ùp
 = 1;

1796 
ªt
 = -1;

1798 i‡(
addrs
 != 0)

1799 
	`‰ì_w‹dli°
(
addrs
);

1801  
ªt
 >= 0;

1802 
	}
}

1811 
	$gë_£¸ë
(
unô
, 
˛õ¡
, 
£rvî
, 
£¸ë
, 
£¸ë_Àn
, 
am_£rvî
)

1812 
unô
;

1813 *
˛õ¡
;

1814 *
£rvî
;

1815 *
£¸ë
;

1816 *
£¸ë_Àn
;

1817 
am_£rvî
;

1819 
FILE
 *
f
;

1820 
ªt
, 
Àn
;

1821 *
fûíame
;

1822 
w‹dli°
 *
addrs
, *
›ts
;

1823 
£cbuf
[
MAXWORDLEN
];

1825 i‡(!
am_£rvî
 && 
∑sswd
[0] != 0) {

1826 
	`°æ˝y
(
£cbuf
, 
∑sswd
, (secbuf));

1827 } i‡(!
am_£rvî
 && 
ch≠_∑sswd_hook
) {

1828 i‡–(*
ch≠_∑sswd_hook
)(
˛õ¡
, 
£cbuf
) < 0) {

1829 
	`îr‹
("UnableÅo obtain CHAPÖassword for %s on %s fromÖlugin",

1830 
˛õ¡
, 
£rvî
);

1834 
fûíame
 = 
_PATH_CHAPFILE
;

1835 
addrs
 = 
NULL
;

1836 
£cbuf
[0] = 0;

1838 
f
 = 
	`f›í
(
fûíame
, "r");

1839 i‡(
f
 =
NULL
) {

1840 
	`îr‹
("C™'à›í ch≠ se¸ë fûê%s: %m", 
fûíame
);

1843 
	`check_ac˚ss
(
f
, 
fûíame
);

1845 
ªt
 = 
	`sˇn_authfûe
(
f
, 
˛õ¡
, 
£rvî
, 
£cbuf
, &
addrs
, &
›ts
, 
fûíame
, 0);

1846 
	`f˛o£
(
f
);

1847 i‡(
ªt
 < 0)

1850 i‡(
am_£rvî
)

1851 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

1852 i‡(
›ts
 != 0)

1853 
	`‰ì_w‹dli°
(
›ts
);

1854 i‡(
addrs
 != 0)

1855 
	`‰ì_w‹dli°
(
addrs
);

1858 
Àn
 = 
	`°æí
(
£cbuf
);

1859 i‡(
Àn
 > 
MAXSECRETLEN
) {

1860 
	`îr‹
("Se¸ë f‹ %†⁄ %†i†toÿl⁄g", 
˛õ¡
, 
£rvî
);

1861 
Àn
 = 
MAXSECRETLEN
;

1863 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

1864 
	`BZERO
(
£cbuf
, (secbuf));

1865 *
£¸ë_Àn
 = 
Àn
;

1868 
	}
}

1877 
	$gë_§p_£¸ë
(
unô
, 
˛õ¡
, 
£rvî
, 
£¸ë
, 
am_£rvî
)

1878 
unô
;

1879 *
˛õ¡
;

1880 *
£rvî
;

1881 *
£¸ë
;

1882 
am_£rvî
;

1884 
FILE
 *
Â
;

1885 
ªt
;

1886 *
fûíame
;

1887 
w‹dli°
 *
addrs
, *
›ts
;

1889 i‡(!
am_£rvî
 && 
∑sswd
[0] != '\0') {

1890 
	`°æ˝y
(
£¸ë
, 
∑sswd
, 
MAXWORDLEN
);

1892 
fûíame
 = 
_PATH_SRPFILE
;

1893 
addrs
 = 
NULL
;

1895 
Â
 = 
	`f›í
(
fûíame
, "r");

1896 i‡(
Â
 =
NULL
) {

1897 
	`îr‹
("C™'à›í sΩ se¸ë fûê%s: %m", 
fûíame
);

1900 
	`check_ac˚ss
(
Â
, 
fûíame
);

1902 
£¸ë
[0] = '\0';

1903 
ªt
 = 
	`sˇn_authfûe
(
Â
, 
˛õ¡
, 
£rvî
, 
£¸ë
, &
addrs
, &
›ts
,

1904 
fûíame
, 
am_£rvî
);

1905 
	`f˛o£
(
Â
);

1906 i‡(
ªt
 < 0)

1909 i‡(
am_£rvî
)

1910 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

1911 i‡(
›ts
 !
NULL
)

1912 
	`‰ì_w‹dli°
(
›ts
);

1913 i‡(
addrs
 !
NULL
)

1914 
	`‰ì_w‹dli°
(
addrs
);

1918 
	}
}

1926 
	$£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
)

1927 
unô
;

1928 
w‹dli°
 *
addrs
;

1929 
w‹dli°
 *
›ts
;

1931 
n
;

1932 
w‹dli°
 *
≠
, **
∂ök
;

1933 
≥rmôãd_ù
 *
ù
;

1934 *
±r_w‹d
, *
±r_mask
;

1935 
ho°ít
 *
hp
;

1936 
√ã¡
 *
≈
;

1937 
u_öt32_t
 
a
, 
mask
, 
ah
, 
off£t
;

1938 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

1939 
u_öt32_t
 
sugge°ed_ù
 = 0;

1941 i‡(
addªs£s
[
unô
] !
NULL
)

1942 
	`‰ì
(
addªs£s
[
unô
]);

1943 
addªs£s
[
unô
] = 
NULL
;

1944 i‡(
exåa_›ti⁄s
 !
NULL
)

1945 
	`‰ì_w‹dli°
(
exåa_›ti⁄s
);

1946 
exåa_›ti⁄s
 = 
›ts
;

1951 
n
 = 
	`w‹dli°_cou¡
(
addrs
Ë+ w‹dli°_cou¡(
nﬂuth_addrs
);

1952 i‡(
n
 == 0)

1954 
ù
 = (
≥rmôãd_ù
 *Ë
	`mÆloc
((
n
 + 1) * (permitted_ip));

1955 i‡(
ù
 == 0)

1959 
∂ök
 = &
addrs
; *∂ök !
NULL
;Ölök = &(*∂ök)->
√xt
)

1961 *
∂ök
 = 
nﬂuth_addrs
;

1963 
n
 = 0;

1964 
≠
 = 
addrs
;á∞!
NULL
;á∞≠->
√xt
) {

1966 
±r_w‹d
 = 
≠
->
w‹d
;

1967 i‡(
	`°rcmp
(
±r_w‹d
, "-") == 0)

1969 i‡(
	`°rcmp
(
±r_w‹d
, "*") == 0) {

1970 
ù
[
n
].
≥rmô
 = 1;

1971 
ù
[
n
].
ba£
 = ip[n].
mask
 = 0;

1972 ++
n
;

1976 
ù
[
n
].
≥rmô
 = 1;

1977 i‡(*
±r_w‹d
 == '!') {

1978 
ù
[
n
].
≥rmô
 = 0;

1979 ++
±r_w‹d
;

1982 
mask
 = ~ (
u_öt32_t
) 0;

1983 
off£t
 = 0;

1984 
±r_mask
 = 
	`°rchr
 (
±r_w‹d
, '/');

1985 i‡(
±r_mask
 !
NULL
) {

1986 
bô_cou¡
;

1987 *
ídp
;

1989 
bô_cou¡
 = (Ë
	`°πﬁ
 (
±r_mask
+1, &
ídp
, 10);

1990 i‡(
bô_cou¡
 <= 0 || bit_count > 32) {

1991 
	`w¨n
("invalidáddressÜength %v ináuth.áddressÜist",

1992 
±r_mask
+1);

1995 
bô_cou¡
 = 32 - bit_count;

1996 i‡(*
ídp
 == '+') {

1997 
off£t
 = 
ifunô
 + 1;

1998 ++
ídp
;

2000 i‡(*
ídp
 != 0) {

2001 
	`w¨n
("övÆidáddªs†Àngth sy¡ax: %v", 
±r_mask
+1);

2004 *
±r_mask
 = '\0';

2005 
mask
 <<
bô_cou¡
;

2008 
hp
 = 
	`gëho°by«me
(
±r_w‹d
);

2009 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

2010 
a
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

2012 
≈
 = 
	`gë√tby«me
 (
±r_w‹d
);

2013 i‡(
≈
 !
NULL
 &&Çp->
n_addπy≥
 =
AF_INET
) {

2014 
a
 = 
	`ht⁄l
 ((
u_öt32_t
)
≈
->
n_√t
);

2015 i‡(
±r_mask
 =
NULL
) {

2017 
ah
 = 
	`¡ohl
(
a
);

2018 i‡(
	`IN_CLASSA
(
ah
))

2019 
mask
 = 
IN_CLASSA_NET
;

2020 i‡(
	`IN_CLASSB
(
ah
))

2021 
mask
 = 
IN_CLASSB_NET
;

2022 i‡(
	`IN_CLASSC
(
ah
))

2023 
mask
 = 
IN_CLASSC_NET
;

2026 
a
 = 
	`öë_addr
 (
±r_w‹d
);

2030 i‡(
±r_mask
 !
NULL
)

2031 *
±r_mask
 = '/';

2033 i‡(
a
 =(
u_öt32_t
)-1L) {

2034 
	`w¨n
("unknow¿ho° %†öáuth.áddªs†li°", 
≠
->
w‹d
);

2037 i‡(
off£t
 != 0) {

2038 i‡(
off£t
 >~
mask
) {

2039 
	`w¨n
("interface unit %dÅooÜarge for subnet %v",

2040 
ifunô
, 
±r_w‹d
);

2043 
a
 = 
	`ht⁄l
((
	`¡ohl
◊Ë& 
mask
Ë+ 
off£t
);

2044 
mask
 = ~(
u_öt32_t
)0;

2046 
ù
[
n
].
mask
 = 
	`ht⁄l
(mask);

2047 
ù
[
n
].
ba£
 = 
a
 & ip[n].
mask
;

2048 ++
n
;

2049 i‡(~
mask
 =0 && 
sugge°ed_ù
 == 0)

2050 
sugge°ed_ù
 = 
a
;

2052 *
∂ök
 = 
NULL
;

2054 
ù
[
n
].
≥rmô
 = 0;

2055 
ù
[
n
].
ba£
 = 0;

2056 
ù
[
n
].
mask
 = 0;

2058 
addªs£s
[
unô
] = 
ù
;

2065 i‡(
sugge°ed_ù
 != 0

2066 && (
wo
->
hißddr
 =0 || !
	`auth_ù_addr
(
unô
, wo->hisaddr))) {

2067 
wo
->
hißddr
 = 
sugge°ed_ù
;

2072 i‡(
n
 > 1)

2073 
wo
->
ac˚±_ªmŸe
 = 1;

2075 
	}
}

2082 
	$auth_ù_addr
(
unô
, 
addr
)

2083 
unô
;

2084 
u_öt32_t
 
addr
;

2086 
ok
;

2089 i‡(
	`bad_ù_adrs
(
addr
))

2092 i‡(
Ælowed_addªss_hook
) {

2093 
ok
 = 
	`Ælowed_addªss_hook
(
addr
);

2094 i‡(
ok
 >= 0)  ok;

2097 i‡(
addªs£s
[
unô
] !
NULL
) {

2098 
ok
 = 
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

2099 i‡(
ok
 >= 0)

2100  
ok
;

2103 i‡(
auth_ªquúed
)

2105  
Ælow_™y_ù
 || 
¥ivûeged
 || !
	`have_rouã_to
(
addr
);

2106 
	}
}

2109 
	$ù_addr_check
(
addr
, 
addrs
)

2110 
u_öt32_t
 
addr
;

2111 
≥rmôãd_ù
 *
addrs
;

2113 ; ; ++
addrs
)

2114 i‡((
addr
 & 
addrs
->
mask
Ë=addrs->
ba£
)

2115  
addrs
->
≥rmô
;

2116 
	}
}

2124 
	$bad_ù_adrs
(
addr
)

2125 
u_öt32_t
 
addr
;

2127 
addr
 = 
	`¡ohl
(addr);

2128  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


2129 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

2130 
	}
}

2137 
	$some_ù_ok
(
addrs
)

2138 
w‹dli°
 *
addrs
;

2140 ; 
addrs
 !0;áddr†addrs->
√xt
) {

2141 i‡(
addrs
->
w‹d
[0] == '-')

2143 i‡(
addrs
->
w‹d
[0] != '!')

2147 
	}
}

2154 
	$auth_numbî
()

2156 
w‹dli°
 *
wp
 = 
≥rmôãd_numbîs
;

2157 
l
;

2160 i‡(!
wp
)

2164 
wp
) {

2166 
l
 = 
	`°æí
(
wp
->
w‹d
);

2167 i‡((
wp
->
w‹d
)[
l
 - 1] == '*')

2168 
l
--;

2169 i‡(!
	`°∫ˇ£cmp
(
wp
->
w‹d
, 
ªmŸe_numbî
, 
l
))

2171 
wp
 = wp->
√xt
;

2175 
	}
}

2181 
	$check_ac˚ss
(
f
, 
fûíame
)

2182 
FILE
 *
f
;

2183 *
fûíame
;

2185 
°©
 
sbuf
;

2187 i‡(
	`f°©
(
	`fûío
(
f
), &
sbuf
) < 0) {

2188 
	`w¨n
("ˇ¬Ÿ sèà£¸ë fûê%s: %m", 
fûíame
);

2189 } i‡((
sbuf
.
°_mode
 & (
S_IRWXG
 | 
S_IRWXO
)) != 0) {

2190 
	`w¨n
("Warning - secret file %s has worldánd/or groupáccess",

2191 
fûíame
);

2193 
	}
}

2211 
	$sˇn_authfûe
(
f
, 
˛õ¡
, 
£rvî
, 
£¸ë
, 
addrs
, 
›ts
, 
fûíame
, 
Êags
)

2212 
FILE
 *
f
;

2213 *
˛õ¡
;

2214 *
£rvî
;

2215 *
£¸ë
;

2216 
w‹dli°
 **
addrs
;

2217 
w‹dli°
 **
›ts
;

2218 *
fûíame
;

2219 
Êags
;

2221 
√wlöe
, 
xxx
;

2222 
gŸ_Êag
, 
be°_Êag
;

2223 
FILE
 *
sf
;

2224 
w‹dli°
 *
≠
, *
addr_li°
, *
Æi°
, **
≠p
;

2225 
w‹d
[
MAXWORDLEN
];

2226 
©fûe
[
MAXWORDLEN
];

2227 
l£¸ë
[
MAXWORDLEN
];

2228 *
˝
;

2230 i‡(
addrs
 !
NULL
)

2231 *
addrs
 = 
NULL
;

2232 i‡(
›ts
 !
NULL
)

2233 *
›ts
 = 
NULL
;

2234 
addr_li°
 = 
NULL
;

2235 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2237 
√wlöe
 = 1;

2238 
be°_Êag
 = -1;

2243 !
√wlöe
 && 
	`gëw‹d
(
f
, 
w‹d
, &√wlöe, 
fûíame
))

2245 i‡(!
√wlöe
)

2251 
gŸ_Êag
 = 0;

2252 i‡(
˛õ¡
 !
NULL
 && 
	`°rcmp
(
w‹d
, clõ¡Ë!0 && !
	`ISWILD
(word)) {

2253 
√wlöe
 = 0;

2256 i‡(!
	`ISWILD
(
w‹d
))

2257 
gŸ_Êag
 = 
NONWILD_CLIENT
;

2262 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2264 i‡(
√wlöe
)

2266 i‡(!
	`ISWILD
(
w‹d
)) {

2267 i‡(
£rvî
 !
NULL
 && 
	`°rcmp
(
w‹d
, server) != 0)

2269 
gŸ_Êag
 |
NONWILD_SERVER
;

2276 i‡(
gŸ_Êag
 <
be°_Êag
)

2282 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2284 i‡(
√wlöe
)

2291 i‡(
Êags
 && ((
˝
 = 
	`°rchr
(
w‹d
, ':')Ë=
NULL
 ||

2292 
	`°rchr
(
˝
 + 1, ':'Ë=
NULL
))

2295 i‡(
£¸ë
 !
NULL
) {

2299 i‡(
w‹d
[0] == '@' && word[1] == '/') {

2300 
	`°æ˝y
(
©fûe
, 
w‹d
+1, (atfile));

2301 i‡((
sf
 = 
	`f›í
(
©fûe
, "r")Ë=
NULL
) {

2302 
	`w¨n
("ˇn'à›í indúe˘ se¸ë fûê%s", 
©fûe
);

2305 
	`check_ac˚ss
(
sf
, 
©fûe
);

2306 i‡(!
	`gëw‹d
(
sf
, 
w‹d
, &
xxx
, 
©fûe
)) {

2307 
	`w¨n
("nÿ£¸ë i¿ödúe˘ se¸ë fûê%s", 
©fûe
);

2308 
	`f˛o£
(
sf
);

2311 
	`f˛o£
(
sf
);

2313 
	`°æ˝y
(
l£¸ë
, 
w‹d
, (lsecret));

2319 
≠p
 = &
Æi°
;

2321 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
) ||Çewline)

2323 
≠
 = (
w‹dli°
 *)

2324 
	`mÆloc
((
w‹dli°
Ë+ 
	`°æí
(
w‹d
) + 1);

2325 i‡(
≠
 =
NULL
)

2326 
	`novm
("authorizedáddresses");

2327 
≠
->
w‹d
 = (*) (ap + 1);

2328 
	`°r˝y
(
≠
->
w‹d
, word);

2329 *
≠p
 = 
≠
;

2330 
≠p
 = &
≠
->
√xt
;

2332 *
≠p
 = 
NULL
;

2337 
be°_Êag
 = 
gŸ_Êag
;

2338 i‡(
addr_li°
)

2339 
	`‰ì_w‹dli°
(
addr_li°
);

2340 
addr_li°
 = 
Æi°
;

2341 i‡(
£¸ë
 !
NULL
)

2342 
	`°æ˝y
(
£¸ë
, 
l£¸ë
, 
MAXWORDLEN
);

2344 i‡(!
√wlöe
)

2349 
≠p
 = &
addr_li°
; (
≠
 = *≠pË!
NULL
;áµ = &≠->
√xt
)

2350 i‡(
	`°rcmp
(
≠
->
w‹d
, "--") == 0)

2353 i‡(
≠
 !
NULL
) {

2354 
≠
 =áp->
√xt
;

2355 
	`‰ì
(*
≠p
);

2356 *
≠p
 = 
NULL
;

2358 i‡(
›ts
 !
NULL
)

2359 *
›ts
 = 
≠
;

2360 i‡(
≠
 !
NULL
)

2361 
	`‰ì_w‹dli°
(
≠
);

2362 i‡(
addrs
 !
NULL
)

2363 *
addrs
 = 
addr_li°
;

2364 i‡(
addr_li°
 !
NULL
)

2365 
	`‰ì_w‹dli°
(
addr_li°
);

2367  
be°_Êag
;

2368 
	}
}

2374 
	$w‹dli°_cou¡
(
wp
)

2375 
w‹dli°
 *
wp
;

2377 
n
;

2379 
n
 = 0; 
wp
 !
NULL
; w∞wp->
√xt
)

2380 ++
n
;

2381  
n
;

2382 
	}
}

2388 
	$‰ì_w‹dli°
(
wp
)

2389 
w‹dli°
 *
wp
;

2391 
w‹dli°
 *
√xt
;

2393 
wp
 !
NULL
) {

2394 
√xt
 = 
wp
->next;

2395 
	`‰ì
(
wp
);

2396 
wp
 = 
√xt
;

2398 
	}
}

2405 
	$auth_s¸ùt_d⁄e
(
¨g
)

2406 *
¨g
;

2408 
auth_s¸ùt_pid
 = 0;

2409 
auth_s¸ùt_°©e
) {

2410 
s_up
:

2411 i‡(
auth_°©e
 =
s_down
) {

2412 
auth_s¸ùt_°©e
 = 
s_down
;

2413 
	`auth_s¸ùt
(
_PATH_AUTHDOWN
);

2416 
s_down
:

2417 i‡(
auth_°©e
 =
s_up
) {

2418 
auth_s¸ùt_°©e
 = 
s_up
;

2419 
	`auth_s¸ùt
(
_PATH_AUTHUP
);

2423 
	}
}

2430 
	$auth_s¸ùt
(
s¸ùt
)

2431 *
s¸ùt
;

2433 
°r•ìd
[32];

2434 
∑sswd
 *
pw
;

2435 
°ruid
[32];

2436 *
u£r_«me
;

2437 *
¨gv
[8];

2439 i‡((
pw
 = 
	`gëpwuid
(
	`gëuid
())Ë!
NULL
 &&Öw->
pw_«me
 != NULL)

2440 
u£r_«me
 = 
pw
->
pw_«me
;

2442 
	`¶¥ötf
(
°ruid
, (°ruid), "%d", 
	`gëuid
());

2443 
u£r_«me
 = 
°ruid
;

2445 
	`¶¥ötf
(
°r•ìd
, (°r•ìd), "%d", 
baud_øã
);

2447 
¨gv
[0] = 
s¸ùt
;

2448 
¨gv
[1] = 
i‚ame
;

2449 
¨gv
[2] = 
≥î_auth«me
;

2450 
¨gv
[3] = 
u£r_«me
;

2451 
¨gv
[4] = 
dev«m
;

2452 
¨gv
[5] = 
°r•ìd
;

2453 
¨gv
[6] = 
NULL
;

2455 
auth_s¸ùt_pid
 = 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
auth_s¸ùt_d⁄e
, 
NULL
, 0);

2456 
	}
}

2459 #ifde‡
USE_EAPTLS


2461 
	$have_ó±ls_£¸ë_£rvî
(
˛õ¡
, 
£rvî
, 
√ed_ù
, 
œcks_ùp
)

2462 *
˛õ¡
;

2463 *
£rvî
;

2464 
√ed_ù
;

2465 *
œcks_ùp
;

2467 
FILE
 *
f
;

2468 
ªt
;

2469 *
fûíame
;

2470 
w‹dli°
 *
addrs
;

2471 
£rv˚πfûe
[
MAXWORDLEN
];

2472 
˛i˚πfûe
[
MAXWORDLEN
];

2473 
ˇ˚πfûe
[
MAXWORDLEN
];

2474 
pkfûe
[
MAXWORDLEN
];

2476 
fûíame
 = 
_PATH_EAPTLSSERVFILE
;

2477 
f
 = 
	`f›í
(
fûíame
, "r");

2478 i‡(
f
 =
NULL
)

2481 i‡(
˛õ¡
 !
NULL
 && client[0] == 0)

2482 
˛õ¡
 = 
NULL
;

2483 i‡(
£rvî
 !
NULL
 && server[0] == 0)

2484 
£rvî
 = 
NULL
;

2486 
ªt
 =

2487 
	`sˇn_authfûe_ó±ls
(
f
, 
˛õ¡
, 
£rvî
, 
˛i˚πfûe
, 
£rv˚πfûe
,

2488 
ˇ˚πfûe
, 
pkfûe
, &
addrs
, 
NULL
, 
fûíame
,

2491 
	`f˛o£
(
f
);

2499 i‡(
ªt
 >0 && 
√ed_ù
 && !
	`some_ù_ok
(
addrs
)) {

2500 i‡(
œcks_ùp
 != 0)

2501 *
œcks_ùp
 = 1;

2502 
ªt
 = -1;

2504 i‡(
addrs
 != 0)

2505 
	`‰ì_w‹dli°
(
addrs
);

2507  
ªt
 >= 0;

2508 
	}
}

2512 
	$have_ó±ls_£¸ë_˛õ¡
(
˛õ¡
, 
£rvî
)

2513 *
˛õ¡
;

2514 *
£rvî
;

2516 
FILE
 *
f
;

2517 
ªt
;

2518 *
fûíame
;

2519 
w‹dli°
 *
addrs
 = 
NULL
;

2520 
£rv˚πfûe
[
MAXWORDLEN
];

2521 
˛i˚πfûe
[
MAXWORDLEN
];

2522 
ˇ˚πfûe
[
MAXWORDLEN
];

2523 
pkfûe
[
MAXWORDLEN
];

2525 i‡(
˛õ¡
 !
NULL
 && client[0] == 0)

2526 
˛õ¡
 = 
NULL
;

2527 i‡(
£rvî
 !
NULL
 && server[0] == 0)

2528 
£rvî
 = 
NULL
;

2530 i‡((
ˇ˚π_fûe
 || 
ˇ_∑th
Ë&& 
˚π_fûe
 && 
¥ivkey_fûe
)

2533 
fûíame
 = 
_PATH_EAPTLSCLIFILE
;

2534 
f
 = 
	`f›í
(
fûíame
, "r");

2535 i‡(
f
 =
NULL
)

2538 
ªt
 =

2539 
	`sˇn_authfûe_ó±ls
(
f
, 
˛õ¡
, 
£rvî
, 
˛i˚πfûe
, 
£rv˚πfûe
,

2540 
ˇ˚πfûe
, 
pkfûe
, &
addrs
, 
NULL
, 
fûíame
,

2542 
	`f˛o£
(
f
);

2550 i‡(
addrs
 != 0)

2551 
	`‰ì_w‹dli°
(
addrs
);

2553  
ªt
 >= 0;

2554 
	}
}

2558 
	$sˇn_authfûe_ó±ls
(
f
, 
˛õ¡
, 
£rvî
, 
˛i_˚π
, 
£rv_˚π
, 
ˇ_˚π
, 
pk
,

2559 
addrs
, 
›ts
, 
fûíame
, 
Êags
)

2560 
FILE
 *
f
;

2561 *
˛õ¡
;

2562 *
£rvî
;

2563 *
˛i_˚π
;

2564 *
£rv_˚π
;

2565 *
ˇ_˚π
;

2566 *
pk
;

2567 
w‹dli°
 **
addrs
;

2568 
w‹dli°
 **
›ts
;

2569 *
fûíame
;

2570 
Êags
;

2572 
√wlöe
;

2573 
gŸ_Êag
, 
be°_Êag
;

2574 
w‹dli°
 *
≠
, *
addr_li°
, *
Æi°
, **
≠p
;

2575 
w‹d
[
MAXWORDLEN
];

2577 i‡(
addrs
 !
NULL
)

2578 *
addrs
 = 
NULL
;

2579 i‡(
›ts
 !
NULL
)

2580 *
›ts
 = 
NULL
;

2581 
addr_li°
 = 
NULL
;

2582 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2584 
√wlöe
 = 1;

2585 
be°_Êag
 = -1;

2590 !
√wlöe
 && 
	`gëw‹d
(
f
, 
w‹d
, &√wlöe, 
fûíame
));

2591 i‡(!
√wlöe
)

2597 
gŸ_Êag
 = 0;

2598 i‡(
˛õ¡
 !
NULL
 && 
	`°rcmp
(
w‹d
, clõ¡Ë!0 && !
	`ISWILD
(word)) {

2599 
√wlöe
 = 0;

2602 i‡(!
	`ISWILD
(
w‹d
))

2603 
gŸ_Êag
 = 
NONWILD_CLIENT
;

2608 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2610 i‡(
√wlöe
)

2612 i‡(!
	`ISWILD
(
w‹d
)) {

2613 i‡(
£rvî
 !
NULL
 && 
	`°rcmp
(
w‹d
, server) != 0)

2615 
gŸ_Êag
 |
NONWILD_SERVER
;

2622 i‡(
gŸ_Êag
 <
be°_Êag
)

2628 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2630 i‡(
√wlöe
)

2632 i‡(
	`°rcmp
(
w‹d
, "-") != 0) {

2633 
	`°æ˝y
(
˛i_˚π
, 
w‹d
, 
MAXWORDLEN
);

2635 
˛i_˚π
[0] = 0;

2640 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2642 i‡(
√wlöe
)

2644 i‡(
	`°rcmp
(
w‹d
, "-") != 0) {

2645 
	`°æ˝y
(
£rv_˚π
, 
w‹d
, 
MAXWORDLEN
);

2647 
£rv_˚π
[0] = 0;

2652 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2654 i‡(
√wlöe
)

2656 
	`°æ˝y
(
ˇ_˚π
, 
w‹d
, 
MAXWORDLEN
);

2661 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
))

2663 i‡(
√wlöe
)

2665 
	`°æ˝y
(
pk
, 
w‹d
, 
MAXWORDLEN
);

2671 
≠p
 = &
Æi°
;

2673 i‡(!
	`gëw‹d
(
f
, 
w‹d
, &
√wlöe
, 
fûíame
) ||Çewline)

2675 
≠
 = (
w‹dli°
 *)

2676 
	`mÆloc
((
w‹dli°
Ë+ 
	`°æí
(
w‹d
) + 1);

2677 i‡(
≠
 =
NULL
)

2678 
	`novm
("authorizedáddresses");

2679 
≠
->
w‹d
 = (*) (ap + 1);

2680 
	`°r˝y
(
≠
->
w‹d
, word);

2681 *
≠p
 = 
≠
;

2682 
≠p
 = &
≠
->
√xt
;

2684 *
≠p
 = 
NULL
;

2688 
be°_Êag
 = 
gŸ_Êag
;

2689 i‡(
addr_li°
)

2690 
	`‰ì_w‹dli°
(
addr_li°
);

2691 
addr_li°
 = 
Æi°
;

2693 i‡(!
√wlöe
)

2698 
≠p
 = &
addr_li°
; (
≠
 = *≠pË!
NULL
;áµ = &≠->
√xt
)

2699 i‡(
	`°rcmp
(
≠
->
w‹d
, "--") == 0)

2702 i‡(
≠
 !
NULL
) {

2703 
≠
 =áp->
√xt
;

2704 
	`‰ì
(*
≠p
);

2705 *
≠p
 = 
NULL
;

2707 i‡(
›ts
 !
NULL
)

2708 *
›ts
 = 
≠
;

2709 i‡(
≠
 !
NULL
)

2710 
	`‰ì_w‹dli°
(
≠
);

2711 i‡(
addrs
 !
NULL
)

2712 *
addrs
 = 
addr_li°
;

2713 i‡(
addr_li°
 !
NULL
)

2714 
	`‰ì_w‹dli°
(
addr_li°
);

2716  
be°_Êag
;

2717 
	}
}

2721 
	$gë_ó±ls_£¸ë
(
unô
, 
˛õ¡
, 
£rvî
, 
˛i˚πfûe
, 
£rv˚πfûe
,

2722 
ˇ˚πfûe
, 
ˇ∑th
, 
pkfûe
, 
am_£rvî
)

2723 
unô
;

2724 *
˛õ¡
;

2725 *
£rvî
;

2726 *
˛i˚πfûe
;

2727 *
£rv˚πfûe
;

2728 *
ˇ˚πfûe
;

2729 *
ˇ∑th
;

2730 *
pkfûe
;

2731 
am_£rvî
;

2733 
FILE
 *
Â
;

2734 
ªt
;

2735 *
fûíame
 = 
NULL
;

2736 
w‹dli°
 *
addrs
 = 
NULL
;

2737 
w‹dli°
 *
›ts
 = 
NULL
;

2740 
	`bzîo
(
˛i˚πfûe
, 
MAXWORDLEN
);

2741 
	`bzîo
(
£rv˚πfûe
, 
MAXWORDLEN
);

2742 
	`bzîo
(
ˇ˚πfûe
, 
MAXWORDLEN
);

2743 
	`bzîo
(
ˇ∑th
, 
MAXWORDLEN
);

2744 
	`bzîo
(
pkfûe
, 
MAXWORDLEN
);

2747 i‡(!
am_£rvî
 && (
ˇ˚π_fûe
 || 
ˇ_∑th
Ë&& 
˚π_fûe
 && 
¥ivkey_fûe
 )

2749 
	`°æ˝y
–
˛i˚πfûe
, 
˚π_fûe
, 
MAXWORDLEN
 );

2750 i‡(
ˇ˚π_fûe
)

2751 
	`°æ˝y
–
ˇ˚πfûe
, 
ˇ˚π_fûe
, 
MAXWORDLEN
 );

2752 i‡(
ˇ_∑th
)

2753 
	`°æ˝y
–
ˇ∑th
, 
ˇ_∑th
, 
MAXWORDLEN
 );

2754 
	`°æ˝y
–
pkfûe
, 
¥ivkey_fûe
, 
MAXWORDLEN
 );

2758 
fûíame
 = (
am_£rvî
 ? 
_PATH_EAPTLSSERVFILE
 : 
_PATH_EAPTLSCLIFILE
);

2759 
addrs
 = 
NULL
;

2761 
Â
 = 
	`f›í
(
fûíame
, "r");

2762 i‡(
Â
 =
NULL
)

2764 
	`îr‹
("C™'à›íÉ≠-é†£¸ë fûê%s: %m", 
fûíame
);

2768 
	`check_ac˚ss
(
Â
, 
fûíame
);

2770 
ªt
 = 
	`sˇn_authfûe_ó±ls
(
Â
, 
˛õ¡
, 
£rvî
, 
˛i˚πfûe
, 
£rv˚πfûe
,

2771 
ˇ˚πfûe
, 
pkfûe
, &
addrs
, &
›ts
, 
fûíame
, 0);

2773 
	`f˛o£
(
Â
);

2775 i‡(
ªt
 < 0)  0;

2778 i‡(
ó±ls_∑sswd_hook
)

2780 
	`dbglog
( "CallingÉaptlsÖassword hook" );

2781 i‡–(*
ó±ls_∑sswd_hook
)(
pkfûe
, 
∑sswd
) < 0)

2783 
	`îr‹
("UnableÅo obtain EAP-TLSÖassword for %s (%s) fromÖlugin",

2784 
˛õ¡
, 
pkfûe
);

2788 i‡(
am_£rvî
)

2789 
	`£t_Ælowed_addrs
(
unô
, 
addrs
, 
›ts
);

2790 i‡(
›ts
 !
NULL
)

2791 
	`‰ì_w‹dli°
(
›ts
);

2792 i‡(
addrs
 !
NULL
)

2793 
	`‰ì_w‹dli°
(
addrs
);

2796 
	}
}

	@pppd/cbcp.c

36 
	#RCSID
 "$Id: cb˝.c,v 1.17 2006/05/22 00:04:07Öaulu†Ex∞$"

	)

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/time.h
>

43 
	~"µpd.h
"

44 
	~"cb˝.h
"

45 
	~"fsm.h
"

46 
	~"l˝.h
"

52 
£tcb˝
 
__P
((**));

54 
›ti⁄_t
 
	gcb˝_›ti⁄_li°
[] = {

55 { "ˇŒback", 
o_•ecül
, (*)
£tcb˝
,

56 "Ask f‹ cÆlback", 
OPT_PRIO
 | 
OPT_A2STRVAL
, &
cb˝
[0].
us_numbî
 },

57 { 
NULL
 }

63 
cb˝_öô
 
__P
((
unô
));

64 
cb˝_›í
 
__P
((
unô
));

65 
cb˝_lowîup
 
__P
((
unô
));

66 
cb˝_öput
 
__P
((
unô
, 
u_ch¨
 *
pkt
, 
Àn
));

67 
cb˝_¥Ÿªj
 
__P
((
unô
));

68 
cb˝_¥öçkt
 
__P
((
u_ch¨
 *
pkt
, 
Àn
,

69 (*
¥öãr
Ë
	`__P
((*, *, ...)),

70 *
¨g
));

72 
¥Ÿít
 
cb˝_¥Ÿít
 = {

73 
PPP_CBCP
,

74 
cb˝_öô
,

75 
cb˝_öput
,

76 
cb˝_¥Ÿªj
,

77 
cb˝_lowîup
,

78 
NULL
,

79 
cb˝_›í
,

80 
NULL
,

81 
cb˝_¥öçkt
,

82 
NULL
,

85 
NULL
,

86 
cb˝_›ti⁄_li°
,

87 
NULL
,

88 
NULL
,

89 
NULL


90 
	}
};

92 
cb˝_°©e
 
	gcb˝
[
NUM_PPP
];

96 
cb˝_ªcvªq
 
__P
((
cb˝_°©e
 *
us
, 
u_ch¨
 *
pckt
, 
Àn
));

97 
cb˝_ª•
 
__P
((
cb˝_°©e
 *
us
));

98 
cb˝_up
 
__P
((
cb˝_°©e
 *
us
));

99 
cb˝_ªcvack
 
__P
((
cb˝_°©e
 *
us
, 
u_ch¨
 *
pckt
, 
Àn
));

100 
cb˝_£nd
 
__P
((
cb˝_°©e
 *
us
, 
code
, 
u_ch¨
 *
buf
, 
Àn
));

104 
	$£tcb˝
(
¨gv
)

105 **
¨gv
;

107 
l˝_w™t›ti⁄s
[0].
√g_cb˝
 = 1;

108 
cb˝_¥Ÿít
.
íabÀd_Êag
 = 1;

109 
cb˝
[0].
us_numbî
 = 
	`°rdup
(*
¨gv
);

110 i‡(
cb˝
[0].
us_numbî
 == 0)

111 
	`novm
("callbackÇumber");

112 
cb˝
[0].
us_ty≥
 |(1 << 
CB_CONF_USER
);

113 
cb˝
[0].
us_ty≥
 |(1 << 
CB_CONF_ADMIN
);

115 
	}
}

119 
	$cb˝_öô
(
iÁ˚
)

120 
iÁ˚
;

122 
cb˝_°©e
 *
us
;

124 
us
 = &
cb˝
[
iÁ˚
];

125 
	`mem£t
(
us
, 0, (
cb˝_°©e
));

126 
us
->
us_unô
 = 
iÁ˚
;

127 
us
->
us_ty≥
 |(1 << 
CB_CONF_NO
);

128 
	}
}

132 
	$cb˝_lowîup
(
iÁ˚
)

133 
iÁ˚
;

135 
cb˝_°©e
 *
us
 = &
cb˝
[
iÁ˚
];

137 
	`dbglog
("cbcp_lowerup");

138 
	`dbglog
("w™t: %d", 
us
->
us_ty≥
);

140 i‡(
us
->
us_ty≥
 =
CB_CONF_USER
)

141 
	`dbglog
("ph⁄êno: %s", 
us
->
us_numbî
);

142 
	}
}

145 
	$cb˝_›í
(
unô
)

146 
unô
;

148 
	`dbglog
("cbcp_open");

149 
	}
}

153 
	$cb˝_öput
(
unô
, 
ö∑ckë
, 
pkéí
)

154 
unô
;

155 
u_ch¨
 *
ö∑ckë
;

156 
pkéí
;

158 
u_ch¨
 *
öp
;

159 
u_ch¨
 
code
, 
id
;

160 
u_sh‹t
 
Àn
;

162 
cb˝_°©e
 *
us
 = &
cb˝
[
unô
];

164 
öp
 = 
ö∑ckë
;

166 i‡(
pkéí
 < 
CBCP_MINLEN
) {

167 i‡(
debug
)

168 
	`dbglog
("CBCPÖacket isÅoo small");

172 
	`GETCHAR
(
code
, 
öp
);

173 
	`GETCHAR
(
id
, 
öp
);

174 
	`GETSHORT
(
Àn
, 
öp
);

176 i‡(
Àn
 > 
pkéí
 ||Üí < 
CBCP_MINLEN
) {

177 i‡(
debug
)

178 
	`dbglog
("CBCPÖackë: invÆidÜígth %d", 
Àn
);

182 
Àn
 -
CBCP_MINLEN
;

184 
code
) {

185 
CBCP_REQ
:

186 
us
->
us_id
 = 
id
;

187 
	`cb˝_ªcvªq
(
us
, 
öp
, 
Àn
);

190 
CBCP_RESP
:

191 i‡(
debug
)

192 
	`dbglog
("CBCP_RESPÑeceived");

195 
CBCP_ACK
:

196 i‡(
debug
 && 
id
 !
us
->
us_id
)

197 
	`dbglog
("id doesn't match:Éxpected %dÑecv %d",

198 
us
->
us_id
, 
id
);

200 
	`cb˝_ªcvack
(
us
, 
öp
, 
Àn
);

206 
	}
}

209 
	$cb˝_¥Ÿªj
(
iÁ˚
)

211 
	}
}

213 *
	gcb˝_codíames
[] = {

217 *
	gcb˝_›ti⁄«mes
[] = {

226 
	$cb˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

227 
u_ch¨
 *
p
;

228 
∂í
;

229 (*
¥öãr
Ë
	`__P
((*, *, ...));

230 *
¨g
;

232 
code
, 
›t
, 
id
, 
Àn
, 
ﬁí
, 
dñay
;

233 
u_ch¨
 *
p°¨t
;

235 i‡(
∂í
 < 
HEADERLEN
)

237 
p°¨t
 = 
p
;

238 
	`GETCHAR
(
code
, 
p
);

239 
	`GETCHAR
(
id
, 
p
);

240 
	`GETSHORT
(
Àn
, 
p
);

241 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

244 i‡(
code
 >1 && codê<(
cb˝_codíames
) / (*))

245 
	`¥öãr
(
¨g
, " %s", 
cb˝_codíames
[
code
-1]);

247 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

249 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

250 
Àn
 -
HEADERLEN
;

252 
code
) {

253 
CBCP_REQ
:

254 
CBCP_RESP
:

255 
CBCP_ACK
:

256 
Àn
 >= 2) {

257 
	`GETCHAR
(
›t
, 
p
);

258 
	`GETCHAR
(
ﬁí
, 
p
);

260 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

264 
	`¥öãr
(
¨g
, " <");

265 
Àn
 -
ﬁí
;

267 i‡(
›t
 >1 && o± <(
cb˝_›ti⁄«mes
) / (*))

268 
	`¥öãr
(
¨g
, " %s", 
cb˝_›ti⁄«mes
[
›t
-1]);

270 
	`¥öãr
(
¨g
, " o±i⁄=0x%x", 
›t
);

272 i‡(
ﬁí
 > 2) {

273 
	`GETCHAR
(
dñay
, 
p
);

274 
	`¥öãr
(
¨g
, " dñay = %d", 
dñay
);

277 i‡(
ﬁí
 > 3) {

278 
addπ
;

279 
°r
[256];

281 
	`GETCHAR
(
addπ
, 
p
);

282 
	`mem˝y
(
°r
, 
p
, 
ﬁí
 - 4);

283 
°r
[
ﬁí
 - 4] = 0;

284 
	`¥öãr
(
¨g
, "Çumbî = %s", 
°r
);

286 
	`¥öãr
(
¨g
, ">");

294 ; 
Àn
 > 0; --len) {

295 
	`GETCHAR
(
code
, 
p
);

296 
	`¥öãr
(
¨g
, " %.2x", 
code
);

299  
p
 - 
p°¨t
;

300 
	}
}

304 
	$cb˝_ªcvªq
(
us
, 
pckt
, 
pckéí
)

305 
cb˝_°©e
 *
us
;

306 
u_ch¨
 *
pckt
;

307 
pckéí
;

309 
u_ch¨
 
ty≥
, 
›t_Àn
, 
dñay
, 
addr_ty≥
;

310 
addªss
[256];

311 
Àn
 = 
pckéí
;

313 
addªss
[0] = 0;

315 
Àn
 >= 2) {

316 
	`dbglog
("Àngth: %d", 
Àn
);

318 
	`GETCHAR
(
ty≥
, 
pckt
);

319 
	`GETCHAR
(
›t_Àn
, 
pckt
);

320 i‡(
›t_Àn
 < 2 || o±_À¿> 
Àn
)

323 i‡(
›t_Àn
 > 2)

324 
	`GETCHAR
(
dñay
, 
pckt
);

326 
us
->
us_Ælowed
 |(1 << 
ty≥
);

328 
ty≥
) {

329 
CB_CONF_NO
:

330 
	`dbglog
("no callbackállowed");

333 
CB_CONF_USER
:

334 
	`dbglog
("user callbackállowed");

335 i‡(
›t_Àn
 > 4) {

336 
	`GETCHAR
(
addr_ty≥
, 
pckt
);

337 
	`mem˝y
(
addªss
, 
pckt
, 
›t_Àn
 - 4);

338 
addªss
[
›t_Àn
 - 4] = 0;

339 i‡(
addªss
[0])

340 
	`dbglog
("addªss: %s", 
addªss
);

344 
CB_CONF_ADMIN
:

345 
	`dbglog
("userádmin definedállowed");

348 
CB_CONF_LIST
:

351 
Àn
 -
›t_Àn
;

353 i‡(
Àn
 != 0) {

354 i‡(
debug
)

355 
	`dbglog
("cb˝_ªcvªq: mÆf‹medÖackë (%d byã†À·)", 
Àn
);

359 
	`cb˝_ª•
(
us
);

360 
	}
}

363 
	$cb˝_ª•
(
us
)

364 
cb˝_°©e
 *
us
;

366 
u_ch¨
 
cb_ty≥
;

367 
u_ch¨
 
buf
[256];

368 
u_ch¨
 *
buÂ
 = 
buf
;

369 
Àn
 = 0;

370 
¶í
;

372 
cb_ty≥
 = 
us
->
us_Ælowed
 & us->
us_ty≥
;

373 
	`dbglog
("cb˝_ª• cb_ty≥=%d", 
cb_ty≥
);

376 i‡(!
cb_ty≥
)

377 
	`l˝_down
(
us
->
us_unô
);

380 i‡(
cb_ty≥
 & ( 1 << 
CB_CONF_USER
 ) ) {

381 
	`dbglog
("cbcp_resp CONF_USER");

382 
¶í
 = 
	`°æí
(
us
->
us_numbî
);

383 i‡(
¶í
 > 250) {

384 
	`w¨n
("callbackÇumberÅruncatedÅo 250 characters");

385 
¶í
 = 250;

387 
	`PUTCHAR
(
CB_CONF_USER
, 
buÂ
);

388 
Àn
 = 3 + 1 + 
¶í
 + 1;

389 
	`PUTCHAR
(
Àn
 , 
buÂ
);

390 
	`PUTCHAR
(5, 
buÂ
);

391 
	`PUTCHAR
(1, 
buÂ
);

392 
	`BCOPY
(
us
->
us_numbî
, 
buÂ
, 
¶í
 + 1);

393 
	`cb˝_£nd
(
us
, 
CBCP_RESP
, 
buf
, 
Àn
);

397 i‡(
cb_ty≥
 & ( 1 << 
CB_CONF_ADMIN
 ) ) {

398 
	`dbglog
("cbcp_resp CONF_ADMIN");

399 
	`PUTCHAR
(
CB_CONF_ADMIN
, 
buÂ
);

400 
Àn
 = 3;

401 
	`PUTCHAR
(
Àn
, 
buÂ
);

402 
	`PUTCHAR
(5, 
buÂ
);

403 
	`cb˝_£nd
(
us
, 
CBCP_RESP
, 
buf
, 
Àn
);

407 i‡(
cb_ty≥
 & ( 1 << 
CB_CONF_NO
 ) ) {

408 
	`dbglog
("cbcp_resp CONF_NO");

409 
	`PUTCHAR
(
CB_CONF_NO
, 
buÂ
);

410 
Àn
 = 2;

411 
	`PUTCHAR
(
Àn
 , 
buÂ
);

412 
	`cb˝_£nd
(
us
, 
CBCP_RESP
, 
buf
, 
Àn
);

413 
	`°¨t_√tw‹ks
(
us
->
us_unô
);

416 
	}
}

419 
	$cb˝_£nd
(
us
, 
code
, 
buf
, 
Àn
)

420 
cb˝_°©e
 *
us
;

421 
code
;

422 
u_ch¨
 *
buf
;

423 
Àn
;

425 
u_ch¨
 *
ouç
;

426 
ouéí
;

428 
ouç
 = 
ouçackë_buf
;

430 
ouéí
 = 4 + 
Àn
;

432 
	`MAKEHEADER
(
ouç
, 
PPP_CBCP
);

434 
	`PUTCHAR
(
code
, 
ouç
);

435 
	`PUTCHAR
(
us
->
us_id
, 
ouç
);

436 
	`PUTSHORT
(
ouéí
, 
ouç
);

438 i‡(
Àn
)

439 
	`BCOPY
(
buf
, 
ouç
, 
Àn
);

441 
	`ouçut
(
us
->
us_unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

442 
	}
}

445 
	$cb˝_ªcvack
(
us
, 
pckt
, 
Àn
)

446 
cb˝_°©e
 *
us
;

447 
u_ch¨
 *
pckt
;

448 
Àn
;

450 
u_ch¨
 
ty≥
, 
dñay
, 
addr_ty≥
;

451 
›t_Àn
;

452 
addªss
[256];

454 i‡(
Àn
 >= 2) {

455 
	`GETCHAR
(
ty≥
, 
pckt
);

456 
	`GETCHAR
(
›t_Àn
, 
pckt
);

457 i‡(
›t_Àn
 >2 && o±_À¿<
Àn
) {

459 i‡(
›t_Àn
 > 2)

460 
	`GETCHAR
(
dñay
, 
pckt
);

462 i‡(
›t_Àn
 > 4) {

463 
	`GETCHAR
(
addr_ty≥
, 
pckt
);

464 
	`mem˝y
(
addªss
, 
pckt
, 
›t_Àn
 - 4);

465 
addªss
[
›t_Àn
 - 4] = 0;

466 i‡(
addªss
[0])

467 
	`dbglog
("≥î wû»ˇŒ: %s", 
addªss
);

469 i‡(
ty≥
 =
CB_CONF_NO
)

472 
	`cb˝_up
(
us
);

474 } i‡(
debug
)

475 
	`dbglog
("cbcp_recvack: malformedÖacket");

477 
	}
}

481 
	$cb˝_up
(
us
)

482 
cb˝_°©e
 *
us
;

484 
≥rsi°
 = 0;

485 
°©us
 = 
EXIT_CALLBACK
;

486 
	`l˝_˛o£
(0, "Call me back,Ölease");

487 
	}
}

	@pppd/cbcp.h

1 #i‚de‡
CBCP_H


2 
	#CBCP_H


	)

4 
	scb˝_°©e
 {

5 
	mus_unô
;

6 
u_ch¨
 
	mus_id
;

7 
u_ch¨
 
	mus_Ælowed
;

8 
	mus_ty≥
;

9 *
	mus_numbî
;

10 } 
	tcb˝_°©e
;

12 
cb˝_°©e
 
cb˝
[];

14 
¥Ÿít
 
cb˝_¥Ÿít
;

16 
	#CBCP_MINLEN
 4

	)

18 
	#CBCP_REQ
 1

	)

19 
	#CBCP_RESP
 2

	)

20 
	#CBCP_ACK
 3

	)

22 
	#CB_CONF_NO
 1

	)

23 
	#CB_CONF_USER
 2

	)

24 
	#CB_CONF_ADMIN
 3

	)

25 
	#CB_CONF_LIST
 4

	)

	@pppd/ccp.c

31 
	#RCSID
 "$Id: c˝.c,v 1.50 2005/06/26 19:34:41 c¨ls⁄j Ex∞$"

	)

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

36 
	~"µpd.h
"

37 
	~"fsm.h
"

38 
	~"c˝.h
"

39 
	~<√t/µp-comp.h
>

41 #ifde‡
MPPE


42 
	~"ch≠_ms.h
"

43 
	~"l˝.h
"

54 
	#DEFLATE_MIN_WORKS
 9

	)

59 
£tbsdcomp
 
__P
((**));

60 
£tdeÊ©e
 
__P
((**));

61 
	gbsd_vÆue
[8];

62 
	gdeÊ©e_vÆue
[8];

67 #ifde‡
MPPE


68 
boﬁ
 
	gªfu£_mµe_°©eful
 = 1;

71 
›ti⁄_t
 
	gc˝_›ti⁄_li°
[] = {

72 { "noc˝", 
o_boﬁ
, &
c˝_¥Ÿít
.
íabÀd_Êag
,

74 { "-c˝", 
o_boﬁ
, &
c˝_¥Ÿít
.
íabÀd_Êag
,

75 "DißbÀ CCPÇegŸüti⁄", 
OPT_ALIAS
 },

77 { "bsdcomp", 
o_•ecül
, (*)
£tbsdcomp
,

79 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, 
bsd_vÆue
 },

80 { "nobsdcomp", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
,

81 "d⁄'àÆlow BSD-Com¥ess", 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

82 &
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 },

83 { "-bsdcomp", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
,

84 "d⁄'àÆlow BSD-Com¥ess", 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

85 &
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 },

87 { "deÊ©e", 
o_•ecül
, (*)
£tdeÊ©e
,

89 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, 
deÊ©e_vÆue
 },

90 { "nodeÊ©e", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
deÊ©e
,

91 "d⁄'àÆlow DeÊ©êcom¥essi⁄", 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

92 &
c˝_Ælow›ti⁄s
[0].
deÊ©e
 },

93 { "-deÊ©e", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
deÊ©e
,

94 "d⁄'àÆlow DeÊ©êcom¥essi⁄", 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

95 &
c˝_Ælow›ti⁄s
[0].
deÊ©e
 },

97 { "nodeÊ©edø·", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
deÊ©e_dø·
,

98 "d⁄'àu£ dø· deÊ©ê#", 
OPT_A2COPY
,

99 &
c˝_Ælow›ti⁄s
[0].
deÊ©e_dø·
 },

101 { "¥edi˘‹1", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
¥edi˘‹_1
,

102 "ªque° Pªdi˘‹-1", 
OPT_PRIO
 | 1 },

103 { "n›ªdi˘‹1", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
¥edi˘‹_1
,

104 "d⁄'àÆlow Pªdi˘‹-1", 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

105 &
c˝_Ælow›ti⁄s
[0].
¥edi˘‹_1
 },

106 { "-¥edi˘‹1", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
¥edi˘‹_1
,

107 "d⁄'àÆlow Pªdi˘‹-1", 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLR
,

108 &
c˝_Ælow›ti⁄s
[0].
¥edi˘‹_1
 },

110 #ifde‡
MPPE


112 { "ªquúe-mµe", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
mµe
,

114 
OPT_PRIO
 | 
MPPE_OPT_40
 | 
MPPE_OPT_128
 },

115 { "+mµe", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
mµe
,

117 
OPT_ALIAS
 | 
OPT_PRIO
 | 
MPPE_OPT_40
 | 
MPPE_OPT_128
 },

118 { "nomµe", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
mµe
,

119 "d⁄'àÆlow MPPEÉn¸y±i⁄", 
OPT_PRIO
 },

120 { "-mµe", 
o_boﬁ
, &
c˝_w™t›ti⁄s
[0].
mµe
,

121 "d⁄'àÆlow MPPEÉn¸y±i⁄", 
OPT_ALIAS
 | 
OPT_PRIO
 },

124 { "ªquúe-mµe-40", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

125 "ªquúêMPPE 40-bôÉn¸y±i⁄", 
OPT_PRIO
 | 
OPT_A2OR
 | 
MPPE_OPT_40
,

126 &
c˝_w™t›ti⁄s
[0].
mµe
 },

127 { "+mµe-40", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

128 "ªquúêMPPE 40-bôÉn¸y±i⁄", 
OPT_PRIO
 | 
OPT_A2OR
 | 
MPPE_OPT_40
,

129 &
c˝_w™t›ti⁄s
[0].
mµe
 },

130 { "nomµe-40", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

132 
OPT_PRIOSUB
 | 
OPT_A2CLRB
 | 
MPPE_OPT_40
, &
c˝_w™t›ti⁄s
[0].
mµe
 },

133 { "-mµe-40", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

135 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLRB
 | 
MPPE_OPT_40
,

136 &
c˝_w™t›ti⁄s
[0].
mµe
 },

138 { "ªquúe-mµe-128", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

139 "ªquúêMPPE 128-bôÉn¸y±i⁄", 
OPT_PRIO
 | 
OPT_A2OR
 | 
MPPE_OPT_128
,

140 &
c˝_w™t›ti⁄s
[0].
mµe
 },

141 { "+mµe-128", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

143 
OPT_ALIAS
 | 
OPT_PRIO
 | 
OPT_A2OR
 | 
MPPE_OPT_128
,

144 &
c˝_w™t›ti⁄s
[0].
mµe
 },

145 { "nomµe-128", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

147 
OPT_PRIOSUB
 | 
OPT_A2CLRB
 | 
MPPE_OPT_128
, &
c˝_w™t›ti⁄s
[0].
mµe
 },

148 { "-mµe-128", 
o_boﬁ
, &
c˝_Ælow›ti⁄s
[0].
mµe
,

150 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLRB
 | 
MPPE_OPT_128
,

151 &
c˝_w™t›ti⁄s
[0].
mµe
 },

154 { "mµe-°©eful", 
o_boﬁ
, &
ªfu£_mµe_°©eful
,

155 "Ælow MPPE sèãfu»mode", 
OPT_PRIO
 },

156 { "nomµe-°©eful", 
o_boﬁ
, &
ªfu£_mµe_°©eful
,

157 "dißŒow MPPE sèãfu»mode", 
OPT_PRIO
 | 1 },

160 { 
NULL
 }

166 
c˝_öô
 
__P
((
unô
));

167 
c˝_›í
 
__P
((
unô
));

168 
c˝_˛o£
 
__P
((
unô
, *));

169 
c˝_lowîup
 
__P
((
unô
));

170 
c˝_lowîdown
 
__P
(());

171 
c˝_öput
 
__P
((
unô
, 
u_ch¨
 *
pkt
, 
Àn
));

172 
c˝_¥Ÿªj
 
__P
((
unô
));

173 
c˝_¥öçkt
 
__P
((
u_ch¨
 *
pkt
, 
Àn
,

174 (*
¥öãr
Ë
	`__P
((*, *, ...)),

175 *
¨g
));

176 
c˝_d©aöput
 
	`__P
((
unô
, 
u_ch¨
 *
pkt
, 
Àn
));

178 
¥Ÿít
 
c˝_¥Ÿít
 = {

179 
PPP_CCP
,

180 
c˝_öô
,

181 
c˝_öput
,

182 
c˝_¥Ÿªj
,

183 
c˝_lowîup
,

184 
c˝_lowîdown
,

185 
c˝_›í
,

186 
c˝_˛o£
,

187 
c˝_¥öçkt
,

188 
c˝_d©aöput
,

192 
c˝_›ti⁄_li°
,

193 
NULL
,

194 
NULL
,

195 
NULL


196 
	}
};

198 
fsm
 
	gc˝_fsm
[
NUM_PPP
];

199 
c˝_›ti⁄s
 
	gc˝_w™t›ti⁄s
[
NUM_PPP
];

200 
c˝_›ti⁄s
 
	gc˝_gŸ›ti⁄s
[
NUM_PPP
];

201 
c˝_›ti⁄s
 
	gc˝_Ælow›ti⁄s
[
NUM_PPP
];

202 
c˝_›ti⁄s
 
	gc˝_his›ti⁄s
[
NUM_PPP
];

207 
c˝_ª£tci
 
__P
((
fsm
 *));

208 
c˝_cûí
 
__P
((
fsm
 *));

209 
c˝_addci
 
__P
((
fsm
 *, 
u_ch¨
 *, *));

210 
c˝_ackci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

211 
c˝_«kci
 
__P
((
fsm
 *, 
u_ch¨
 *, , ));

212 
c˝_ªjci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

213 
c˝_ªqci
 
__P
((
fsm
 *, 
u_ch¨
 *, *, ));

214 
c˝_up
 
__P
((
fsm
 *));

215 
c˝_down
 
__P
((
fsm
 *));

216 
c˝_extcode
 
__P
((
fsm
 *, , , 
u_ch¨
 *, ));

217 
c˝_øck_timeout
 
__P
((*));

218 *
mëhod_«me
 
__P
((
c˝_›ti⁄s
 *, ccp_options *));

220 
fsm_ˇŒbacks
 
	gc˝_ˇŒbacks
 = {

221 
c˝_ª£tci
,

222 
c˝_cûí
,

223 
c˝_addci
,

224 
c˝_ackci
,

225 
c˝_«kci
,

226 
c˝_ªjci
,

227 
c˝_ªqci
,

228 
c˝_up
,

229 
c˝_down
,

230 
NULL
,

231 
NULL
,

232 
NULL
,

233 
NULL
,

234 
c˝_extcode
,

241 
	#ANY_COMPRESS
(
›t
Ë((›t).
deÊ©e
 || (›t).
bsd_com¥ess
 \

242 || (
›t
).
¥edi˘‹_1
 || (›t).
¥edi˘‹_2
 \

243 || (
›t
).
mµe
)

	)

248 
	gc˝_loˇl°©e
[
NUM_PPP
];

249 
	#RACK_PENDING
 1

	)

250 
	#RREQ_REPEAT
 2

	)

252 
	#RACKTIMEOUT
 1

	)

254 
	gÆl_ªje˘ed
[
NUM_PPP
];

260 
	$£tbsdcomp
(
¨gv
)

261 **
¨gv
;

263 
rbôs
, 
abôs
;

264 *
°r
, *
ídp
;

266 
°r
 = *
¨gv
;

267 
abôs
 = 
rbôs
 = 
	`°πﬁ
(
°r
, &
ídp
, 0);

268 i‡(
ídp
 !
°r
 && *endp == ',') {

269 
°r
 = 
ídp
 + 1;

270 
abôs
 = 
	`°πﬁ
(
°r
, &
ídp
, 0);

272 i‡(*
ídp
 !0 ||Énd∞=
°r
) {

273 
	`›ti⁄_îr‹
("övÆidÖ¨amëî '%s' f‹ bsdcom∞›ti⁄", *
¨gv
);

276 i‡((
rbôs
 !0 && (rbô†< 
BSD_MIN_BITS
 ||Ñbô†> 
BSD_MAX_BITS
))

277 || (
abôs
 !0 && (abô†< 
BSD_MIN_BITS
 ||ábô†> 
BSD_MAX_BITS
))) {

278 
	`›ti⁄_îr‹
("bsdcomp option values must be 0 or %d .. %d",

279 
BSD_MIN_BITS
, 
BSD_MAX_BITS
);

282 i‡(
rbôs
 > 0) {

283 
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
 = 1;

284 
c˝_w™t›ti⁄s
[0].
bsd_bôs
 = 
rbôs
;

286 
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
 = 0;

287 i‡(
abôs
 > 0) {

288 
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 = 1;

289 
c˝_Ælow›ti⁄s
[0].
bsd_bôs
 = 
abôs
;

291 
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 = 0;

292 
	`¶¥ötf
(
bsd_vÆue
, (bsd_value),

293 
rbôs
 =
abôs
? "%d": "%d,%d",Ñbits,ábits);

296 
	}
}

299 
	$£tdeÊ©e
(
¨gv
)

300 **
¨gv
;

302 
rbôs
, 
abôs
;

303 *
°r
, *
ídp
;

305 
°r
 = *
¨gv
;

306 
abôs
 = 
rbôs
 = 
	`°πﬁ
(
°r
, &
ídp
, 0);

307 i‡(
ídp
 !
°r
 && *endp == ',') {

308 
°r
 = 
ídp
 + 1;

309 
abôs
 = 
	`°πﬁ
(
°r
, &
ídp
, 0);

311 i‡(*
ídp
 !0 ||Énd∞=
°r
) {

312 
	`›ti⁄_îr‹
("övÆidÖ¨amëî '%s' f‹ deÊ©ê›ti⁄", *
¨gv
);

315 i‡((
rbôs
 !0 && (rbô†< 
DEFLATE_MIN_SIZE
 ||Ñbô†> 
DEFLATE_MAX_SIZE
))

316 || (
abôs
 !0 && (abô†< 
DEFLATE_MIN_SIZE


317 || 
abôs
 > 
DEFLATE_MAX_SIZE
))) {

318 
	`›ti⁄_îr‹
("deflate option values must be 0 or %d .. %d",

319 
DEFLATE_MIN_SIZE
, 
DEFLATE_MAX_SIZE
);

322 i‡(
rbôs
 =
DEFLATE_MIN_SIZE
 || 
abôs
 == DEFLATE_MIN_SIZE) {

323 i‡(
rbôs
 =
DEFLATE_MIN_SIZE
)

324 
rbôs
 = 
DEFLATE_MIN_WORKS
;

325 i‡(
abôs
 =
DEFLATE_MIN_SIZE
)

326 
abôs
 = 
DEFLATE_MIN_WORKS
;

327 
	`w¨n
("deflate option value of %d changedÅo %dÅoávoid zlib bug",

328 
DEFLATE_MIN_SIZE
, 
DEFLATE_MIN_WORKS
);

330 i‡(
rbôs
 > 0) {

331 
c˝_w™t›ti⁄s
[0].
deÊ©e
 = 1;

332 
c˝_w™t›ti⁄s
[0].
deÊ©e_size
 = 
rbôs
;

334 
c˝_w™t›ti⁄s
[0].
deÊ©e
 = 0;

335 i‡(
abôs
 > 0) {

336 
c˝_Ælow›ti⁄s
[0].
deÊ©e
 = 1;

337 
c˝_Ælow›ti⁄s
[0].
deÊ©e_size
 = 
abôs
;

339 
c˝_Ælow›ti⁄s
[0].
deÊ©e
 = 0;

340 
	`¶¥ötf
(
deÊ©e_vÆue
, (deflate_value),

341 
rbôs
 =
abôs
? "%d": "%d,%d",Ñbits,ábits);

344 
	}
}

350 
	$c˝_öô
(
unô
)

351 
unô
;

353 
fsm
 *
f
 = &
c˝_fsm
[
unô
];

355 
f
->
unô
 = unit;

356 
f
->
¥Ÿocﬁ
 = 
PPP_CCP
;

357 
f
->
ˇŒbacks
 = &
c˝_ˇŒbacks
;

358 
	`fsm_öô
(
f
);

360 
	`mem£t
(&
c˝_w™t›ti⁄s
[
unô
], 0, (
c˝_›ti⁄s
));

361 
	`mem£t
(&
c˝_gŸ›ti⁄s
[
unô
], 0, (
c˝_›ti⁄s
));

362 
	`mem£t
(&
c˝_Ælow›ti⁄s
[
unô
], 0, (
c˝_›ti⁄s
));

363 
	`mem£t
(&
c˝_his›ti⁄s
[
unô
], 0, (
c˝_›ti⁄s
));

365 
c˝_w™t›ti⁄s
[0].
deÊ©e
 = 1;

366 
c˝_w™t›ti⁄s
[0].
deÊ©e_size
 = 
DEFLATE_MAX_SIZE
;

367 
c˝_w™t›ti⁄s
[0].
deÊ©e_c‹ª˘
 = 1;

368 
c˝_w™t›ti⁄s
[0].
deÊ©e_dø·
 = 1;

369 
c˝_Ælow›ti⁄s
[0].
deÊ©e
 = 1;

370 
c˝_Ælow›ti⁄s
[0].
deÊ©e_size
 = 
DEFLATE_MAX_SIZE
;

371 
c˝_Ælow›ti⁄s
[0].
deÊ©e_c‹ª˘
 = 1;

372 
c˝_Ælow›ti⁄s
[0].
deÊ©e_dø·
 = 1;

374 
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
 = 1;

375 
c˝_w™t›ti⁄s
[0].
bsd_bôs
 = 
BSD_MAX_BITS
;

376 
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 = 1;

377 
c˝_Ælow›ti⁄s
[0].
bsd_bôs
 = 
BSD_MAX_BITS
;

379 
c˝_Ælow›ti⁄s
[0].
¥edi˘‹_1
 = 1;

380 
	}
}

386 
	$c˝_›í
(
unô
)

387 
unô
;

389 
fsm
 *
f
 = &
c˝_fsm
[
unô
];

391 i‡(
f
->
°©e
 !
OPENED
)

392 
	`c˝_Êags_£t
(
unô
, 1, 0);

398 
	`c˝_ª£tci
(
f
);

399 i‡(!
	`ANY_COMPRESS
(
c˝_gŸ›ti⁄s
[
unô
]))

400 
f
->
Êags
 |
OPT_SILENT
;

402 
	`fsm_›í
(
f
);

403 
	}
}

409 
	$c˝_˛o£
(
unô
, 
ªas⁄
)

410 
unô
;

411 *
ªas⁄
;

413 
	`c˝_Êags_£t
(
unô
, 0, 0);

414 
	`fsm_˛o£
(&
c˝_fsm
[
unô
], 
ªas⁄
);

415 
	}
}

421 
	$c˝_lowîup
(
unô
)

422 
unô
;

424 
	`fsm_lowîup
(&
c˝_fsm
[
unô
]);

425 
	}
}

431 
	$c˝_lowîdown
(
unô
)

432 
unô
;

434 
	`fsm_lowîdown
(&
c˝_fsm
[
unô
]);

435 
	}
}

441 
	$c˝_öput
(
unô
, 
p
, 
Àn
)

442 
unô
;

443 
u_ch¨
 *
p
;

444 
Àn
;

446 
fsm
 *
f
 = &
c˝_fsm
[
unô
];

447 
ﬁd°©e
;

452 
ﬁd°©e
 = 
f
->
°©e
;

453 
	`fsm_öput
(
f
, 
p
, 
Àn
);

454 i‡(
ﬁd°©e
 =
OPENED
 && 
p
[0] =
TERMREQ
 && 
f
->
°©e
 != OPENED) {

455 
	`nŸi˚
("Compression disabled byÖeer.");

456 #ifde‡
MPPE


457 i‡(
c˝_gŸ›ti⁄s
[
unô
].
mµe
) {

458 
	`îr‹
("MPPE disabled, closing LCP");

459 
	`l˝_˛o£
(
unô
, "MPPE disabled byÖeer");

468 i‡(
ﬁd°©e
 =
REQSENT
 && 
p
[0] =
TERMACK


469 && !
	`ANY_COMPRESS
(
c˝_gŸ›ti⁄s
[
unô
]))

470 
	`c˝_˛o£
(
unô
, "No compressionÇegotiated");

471 
	}
}

477 
	$c˝_extcode
(
f
, 
code
, 
id
, 
p
, 
Àn
)

478 
fsm
 *
f
;

479 
code
, 
id
;

480 
u_ch¨
 *
p
;

481 
Àn
;

483 
code
) {

484 
CCP_RESETREQ
:

485 i‡(
f
->
°©e
 !
OPENED
)

489 
	`fsm_sd©a
(
f
, 
CCP_RESETACK
, 
id
, 
NULL
, 0);

492 
CCP_RESETACK
:

493 i‡(
c˝_loˇl°©e
[
f
->
unô
] & 
RACK_PENDING
 && 
id
 =f->
ªqid
) {

494 
c˝_loˇl°©e
[
f
->
unô
] &~(
RACK_PENDING
 | 
RREQ_REPEAT
);

495 
	`UNTIMEOUT
(
c˝_øck_timeout
, 
f
);

504 
	}
}

510 
	$c˝_¥Ÿªj
(
unô
)

511 
unô
;

513 
	`c˝_Êags_£t
(
unô
, 0, 0);

514 
	`fsm_lowîdown
(&
c˝_fsm
[
unô
]);

516 #ifde‡
MPPE


517 i‡(
c˝_gŸ›ti⁄s
[
unô
].
mµe
) {

518 
	`îr‹
("MPPEÑequired butÖeerÇegotiation failed");

519 
	`l˝_˛o£
(
unô
, "MPPEÑequired butÖeerÇegotiation failed");

523 
	}
}

529 
	$c˝_ª£tci
(
f
)

530 
fsm
 *
f
;

532 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

533 
u_ch¨
 
›t_buf
[
CCP_MAX_OPTION_LENGTH
];

535 *
go
 = 
c˝_w™t›ti⁄s
[
f
->
unô
];

536 
Æl_ªje˘ed
[
f
->
unô
] = 0;

538 #ifde‡
MPPE


539 i‡(
go
->
mµe
) {

540 
c˝_›ti⁄s
 *
ao
 = &
c˝_Ælow›ti⁄s
[
f
->
unô
];

541 
auth_msch≠_bôs
 = 
auth_d⁄e
[
f
->
unô
];

542 #ifde‡
USE_EAPTLS


543 
auth_óp_bôs
 = 
auth_d⁄e
[
f
->
unô
];

545 
numbôs
;

558 
auth_msch≠_bôs
 &(
CHAP_MS_WITHPEER
 | 
CHAP_MS_PEER
 |

559 
CHAP_MS2_WITHPEER
 | 
CHAP_MS2_PEER
);

561 
auth_msch≠_bôs
 >>
CHAP_MS_SHIFT
;

562 
numbôs
 = 0;

564 
numbôs
 +
auth_msch≠_bôs
 & 1;

565 
auth_msch≠_bôs
 >>= 1;

566 } 
auth_msch≠_bôs
);

567 i‡(
numbôs
 > 1) {

568 
	`îr‹
("MPPEÑequired, butáuth done in both directions.");

569 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

573 #ifde‡
USE_EAPTLS


581 
auth_óp_bôs
 &(
EAP_WITHPEER
 | 
EAP_PEER
 );

583 i‡((
numbôs
 =0Ë&& (
auth_óp_bôs
 == 0)) {

584 
	`îr‹
("MPPEÑequired, but MS-CHAP[v2]Çor EAP-TLSáutháreÖerformed.");

586 i‡(!
numbôs
) {

587 
	`îr‹
("MPPEÑequired, but MS-CHAP[v2]áuthÇotÖerformed.");

589 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

594 i‡(!
mµe_keys_£t
) {

595 
	`îr‹
("MPPEÑequired, but keysáreÇotávailable. "

597 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

602 i‡(
auth_d⁄e
[
f
->
unô
] & (
CHAP_MS_WITHPEER
 | 
CHAP_MS_PEER
)) {

604 i‡(
go
->
mµe
 & 
MPPE_OPT_40
) {

605 
	`nŸi˚
("Disabling 40-bit MPPE; MS-CHAP LMÇot supported");

606 
go
->
mµe
 &~
MPPE_OPT_40
;

607 
c˝_w™t›ti⁄s
[
f
->
unô
].
mµe
 &~
MPPE_OPT_40
;

612 i‡(!(
go
->
mµe
 & (
MPPE_OPT_40
 | 
MPPE_OPT_128
))) {

614 
	`îr‹
("MPPEÑequired, but both 40-bitánd 128-bit disabled.");

615 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

620 
ao
->
mµe
 = 
go
->mppe;

622 
ao
->
bsd_com¥ess
 = 
go
->bsd_compress = 0;

623 
ao
->
¥edi˘‹_1
 = 
go
->predictor_1 = 0;

624 
ao
->
¥edi˘‹_2
 = 
go
->predictor_2 = 0;

625 
ao
->
deÊ©e
 = 
go
->deflate = 0;

633 #ifde‡
MPPE


634 i‡(
go
->
mµe
) {

635 
›t_buf
[0] = 
CI_MPPE
;

636 
›t_buf
[1] = 
CILEN_MPPE
;

637 
	`MPPE_OPTS_TO_CI
(
go
->
mµe
, &
›t_buf
[2]);

639 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_MPPE
 + 
MPPE_MAX_KEY_LEN
, 0) <= 0) {

640 
	`îr‹
("MPPEÑequired, but kernel hasÇo support.");

641 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

645 i‡(
go
->
bsd_com¥ess
) {

646 
›t_buf
[0] = 
CI_BSD_COMPRESS
;

647 
›t_buf
[1] = 
CILEN_BSD_COMPRESS
;

648 
›t_buf
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
BSD_MIN_BITS
);

649 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_BSD_COMPRESS
, 0) <= 0)

650 
go
->
bsd_com¥ess
 = 0;

652 i‡(
go
->
deÊ©e
) {

653 i‡(
go
->
deÊ©e_c‹ª˘
) {

654 
›t_buf
[0] = 
CI_DEFLATE
;

655 
›t_buf
[1] = 
CILEN_DEFLATE
;

656 
›t_buf
[2] = 
	`DEFLATE_MAKE_OPT
(
DEFLATE_MIN_WORKS
);

657 
›t_buf
[3] = 
DEFLATE_CHK_SEQUENCE
;

658 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_DEFLATE
, 0) <= 0)

659 
go
->
deÊ©e_c‹ª˘
 = 0;

661 i‡(
go
->
deÊ©e_dø·
) {

662 
›t_buf
[0] = 
CI_DEFLATE_DRAFT
;

663 
›t_buf
[1] = 
CILEN_DEFLATE
;

664 
›t_buf
[2] = 
	`DEFLATE_MAKE_OPT
(
DEFLATE_MIN_WORKS
);

665 
›t_buf
[3] = 
DEFLATE_CHK_SEQUENCE
;

666 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_DEFLATE
, 0) <= 0)

667 
go
->
deÊ©e_dø·
 = 0;

669 i‡(!
go
->
deÊ©e_c‹ª˘
 && !go->
deÊ©e_dø·
)

670 
go
->
deÊ©e
 = 0;

672 i‡(
go
->
¥edi˘‹_1
) {

673 
›t_buf
[0] = 
CI_PREDICTOR_1
;

674 
›t_buf
[1] = 
CILEN_PREDICTOR_1
;

675 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_PREDICTOR_1
, 0) <= 0)

676 
go
->
¥edi˘‹_1
 = 0;

678 i‡(
go
->
¥edi˘‹_2
) {

679 
›t_buf
[0] = 
CI_PREDICTOR_2
;

680 
›t_buf
[1] = 
CILEN_PREDICTOR_2
;

681 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_PREDICTOR_2
, 0) <= 0)

682 
go
->
¥edi˘‹_2
 = 0;

684 
	}
}

690 
	$c˝_cûí
(
f
)

691 
fsm
 *
f
;

693 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

695  (
go
->
bsd_com¥ess
? 
CILEN_BSD_COMPRESS
: 0)

696 + (
go
->
deÊ©e
 && go->
deÊ©e_c‹ª˘
? 
CILEN_DEFLATE
: 0)

697 + (
go
->
deÊ©e
 && go->
deÊ©e_dø·
? 
CILEN_DEFLATE
: 0)

698 + (
go
->
¥edi˘‹_1
? 
CILEN_PREDICTOR_1
: 0)

699 + (
go
->
¥edi˘‹_2
? 
CILEN_PREDICTOR_2
: 0)

700 + (
go
->
mµe
? 
CILEN_MPPE
: 0);

701 
	}
}

707 
	$c˝_addci
(
f
, 
p
, 
À≈
)

708 
fsm
 *
f
;

709 
u_ch¨
 *
p
;

710 *
À≈
;

712 
ªs
;

713 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

714 
u_ch¨
 *
p0
 = 
p
;

721 #ifde‡
MPPE


722 i‡(
go
->
mµe
) {

723 
u_ch¨
 
›t_buf
[
CILEN_MPPE
 + 
MPPE_MAX_KEY_LEN
];

725 
p
[0] = 
›t_buf
[0] = 
CI_MPPE
;

726 
p
[1] = 
›t_buf
[1] = 
CILEN_MPPE
;

727 
	`MPPE_OPTS_TO_CI
(
go
->
mµe
, &
p
[2]);

728 
	`MPPE_OPTS_TO_CI
(
go
->
mµe
, &
›t_buf
[2]);

729 
	`BCOPY
(
mµe_ªcv_key
, &
›t_buf
[
CILEN_MPPE
], 
MPPE_MAX_KEY_LEN
);

730 
ªs
 = 
	`c˝_ã°
(
f
->
unô
, 
›t_buf
, 
CILEN_MPPE
 + 
MPPE_MAX_KEY_LEN
, 0);

731 i‡(
ªs
 > 0)

732 
p
 +
CILEN_MPPE
;

735 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable in kernel");

738 i‡(
go
->
deÊ©e
) {

739 
p
[0] = 
go
->
deÊ©e_c‹ª˘
? 
CI_DEFLATE
: 
CI_DEFLATE_DRAFT
;

740 
p
[1] = 
CILEN_DEFLATE
;

741 
p
[2] = 
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
);

742 
p
[3] = 
DEFLATE_CHK_SEQUENCE
;

743 i‡(
p
 !
p0
) {

744 
p
 +
CILEN_DEFLATE
;

747 i‡(
go
->
deÊ©e_size
 < 
DEFLATE_MIN_WORKS
) {

748 
go
->
deÊ©e
 = 0;

751 
ªs
 = 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_DEFLATE
, 0);

752 i‡(
ªs
 > 0) {

753 
p
 +
CILEN_DEFLATE
;

755 } i‡(
ªs
 < 0) {

756 
go
->
deÊ©e
 = 0;

759 --
go
->
deÊ©e_size
;

760 
p
[2] = 
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
);

763 i‡(
p
 !
p0
 && 
go
->
deÊ©e_c‹ª˘
 && go->
deÊ©e_dø·
) {

764 
p
[0] = 
CI_DEFLATE_DRAFT
;

765 
p
[1] = 
CILEN_DEFLATE
;

766 
p
[2] =Ö[2 - 
CILEN_DEFLATE
];

767 
p
[3] = 
DEFLATE_CHK_SEQUENCE
;

768 
p
 +
CILEN_DEFLATE
;

771 i‡(
go
->
bsd_com¥ess
) {

772 
p
[0] = 
CI_BSD_COMPRESS
;

773 
p
[1] = 
CILEN_BSD_COMPRESS
;

774 
p
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
go
->
bsd_bôs
);

775 i‡(
p
 !
p0
) {

776 
p
 +
CILEN_BSD_COMPRESS
;

779 i‡(
go
->
bsd_bôs
 < 
BSD_MIN_BITS
) {

780 
go
->
bsd_com¥ess
 = 0;

783 
ªs
 = 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_BSD_COMPRESS
, 0);

784 i‡(
ªs
 > 0) {

785 
p
 +
CILEN_BSD_COMPRESS
;

787 } i‡(
ªs
 < 0) {

788 
go
->
bsd_com¥ess
 = 0;

791 --
go
->
bsd_bôs
;

792 
p
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
go
->
bsd_bôs
);

797 i‡(
go
->
¥edi˘‹_1
) {

798 
p
[0] = 
CI_PREDICTOR_1
;

799 
p
[1] = 
CILEN_PREDICTOR_1
;

800 i‡(
p
 =
p0
 && 
	`c˝_ã°
(
f
->
unô
,Ö, 
CILEN_PREDICTOR_1
, 0) <= 0) {

801 
go
->
¥edi˘‹_1
 = 0;

803 
p
 +
CILEN_PREDICTOR_1
;

806 i‡(
go
->
¥edi˘‹_2
) {

807 
p
[0] = 
CI_PREDICTOR_2
;

808 
p
[1] = 
CILEN_PREDICTOR_2
;

809 i‡(
p
 =
p0
 && 
	`c˝_ã°
(
f
->
unô
,Ö, 
CILEN_PREDICTOR_2
, 0) <= 0) {

810 
go
->
¥edi˘‹_2
 = 0;

812 
p
 +
CILEN_PREDICTOR_2
;

816 
go
->
mëhod
 = (
p
 > 
p0
)?Ö0[0]: -1;

818 *
À≈
 = 
p
 - 
p0
;

819 
	}
}

826 
	$c˝_ackci
(
f
, 
p
, 
Àn
)

827 
fsm
 *
f
;

828 
u_ch¨
 *
p
;

829 
Àn
;

831 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

832 
u_ch¨
 *
p0
 = 
p
;

834 #ifde‡
MPPE


835 i‡(
go
->
mµe
) {

836 
u_ch¨
 
›t_buf
[
CILEN_MPPE
];

838 
›t_buf
[0] = 
CI_MPPE
;

839 
›t_buf
[1] = 
CILEN_MPPE
;

840 
	`MPPE_OPTS_TO_CI
(
go
->
mµe
, &
›t_buf
[2]);

841 i‡(
Àn
 < 
CILEN_MPPE
 || 
	`memcmp
(
›t_buf
, 
p
, CILEN_MPPE))

843 
p
 +
CILEN_MPPE
;

844 
Àn
 -
CILEN_MPPE
;

846 i‡(
Àn
 == 0)

850 i‡(
go
->
deÊ©e
) {

851 i‡(
Àn
 < 
CILEN_DEFLATE


852 || 
p
[0] !(
go
->
deÊ©e_c‹ª˘
? 
CI_DEFLATE
: 
CI_DEFLATE_DRAFT
)

853 || 
p
[1] !
CILEN_DEFLATE


854 || 
p
[2] !
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
)

855 || 
p
[3] !
DEFLATE_CHK_SEQUENCE
)

857 
p
 +
CILEN_DEFLATE
;

858 
Àn
 -
CILEN_DEFLATE
;

860 i‡(
Àn
 == 0)

862 i‡(
go
->
deÊ©e_c‹ª˘
 && go->
deÊ©e_dø·
) {

863 i‡(
Àn
 < 
CILEN_DEFLATE


864 || 
p
[0] !
CI_DEFLATE_DRAFT


865 || 
p
[1] !
CILEN_DEFLATE


866 || 
p
[2] !
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
)

867 || 
p
[3] !
DEFLATE_CHK_SEQUENCE
)

869 
p
 +
CILEN_DEFLATE
;

870 
Àn
 -
CILEN_DEFLATE
;

873 i‡(
go
->
bsd_com¥ess
) {

874 i‡(
Àn
 < 
CILEN_BSD_COMPRESS


875 || 
p
[0] !
CI_BSD_COMPRESS
 ||Ö[1] !
CILEN_BSD_COMPRESS


876 || 
p
[2] !
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
go
->
bsd_bôs
))

878 
p
 +
CILEN_BSD_COMPRESS
;

879 
Àn
 -
CILEN_BSD_COMPRESS
;

881 i‡(
p
 =
p0
 && 
Àn
 == 0)

884 i‡(
go
->
¥edi˘‹_1
) {

885 i‡(
Àn
 < 
CILEN_PREDICTOR_1


886 || 
p
[0] !
CI_PREDICTOR_1
 ||Ö[1] !
CILEN_PREDICTOR_1
)

888 
p
 +
CILEN_PREDICTOR_1
;

889 
Àn
 -
CILEN_PREDICTOR_1
;

891 i‡(
p
 =
p0
 && 
Àn
 == 0)

894 i‡(
go
->
¥edi˘‹_2
) {

895 i‡(
Àn
 < 
CILEN_PREDICTOR_2


896 || 
p
[0] !
CI_PREDICTOR_2
 ||Ö[1] !
CILEN_PREDICTOR_2
)

898 
p
 +
CILEN_PREDICTOR_2
;

899 
Àn
 -
CILEN_PREDICTOR_2
;

901 i‡(
p
 =
p0
 && 
Àn
 == 0)

905 i‡(
Àn
 != 0)

908 
	}
}

915 
	$c˝_«kci
(
f
, 
p
, 
Àn
, 
åót_as_ªje˘
)

916 
fsm
 *
f
;

917 
u_ch¨
 *
p
;

918 
Àn
;

919 
åót_as_ªje˘
;

921 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

922 
c˝_›ti⁄s
 
no
;

923 
c˝_›ti⁄s
 
åy
;

925 
	`mem£t
(&
no
, 0, (no));

926 
åy
 = *
go
;

928 #ifde‡
MPPE


929 i‡(
go
->
mµe
 && 
Àn
 >
CILEN_MPPE


930 && 
p
[0] =
CI_MPPE
 &&Ö[1] =
CILEN_MPPE
) {

931 
no
.
mµe
 = 1;

936 
	`MPPE_CI_TO_OPTS
(&
p
[2], 
åy
.
mµe
);

937 i‡((
åy
.
mµe
 & 
MPPE_OPT_STATEFUL
Ë&& 
ªfu£_mµe_°©eful
) {

938 
	`îr‹
("Refusing MPPE stateful mode offered byÖeer");

939 
åy
.
mµe
 = 0;

940 } i‡(((
go
->
mµe
 | 
MPPE_OPT_STATEFUL
Ë& 
åy
.mppe) !=Åry.mppe) {

942 
åy
.
mµe
 = 0;

945 i‡(!
åy
.
mµe
) {

946 
	`îr‹
("MPPEÑequired butÖeerÇegotiation failed");

947 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÖeerÇegotiation failed");

951 i‡(
go
->
deÊ©e
 && 
Àn
 >
CILEN_DEFLATE


952 && 
p
[0] =(
go
->
deÊ©e_c‹ª˘
? 
CI_DEFLATE
: 
CI_DEFLATE_DRAFT
)

953 && 
p
[1] =
CILEN_DEFLATE
) {

954 
no
.
deÊ©e
 = 1;

959 i‡(
	`DEFLATE_METHOD
(
p
[2]Ë!
DEFLATE_METHOD_VAL


960 || 
	`DEFLATE_SIZE
(
p
[2]Ë< 
DEFLATE_MIN_WORKS


961 || 
p
[3] !
DEFLATE_CHK_SEQUENCE
)

962 
åy
.
deÊ©e
 = 0;

963 i‡(
	`DEFLATE_SIZE
(
p
[2]Ë< 
go
->
deÊ©e_size
)

964 
åy
.
deÊ©e_size
 = 
	`DEFLATE_SIZE
(
p
[2]);

965 
p
 +
CILEN_DEFLATE
;

966 
Àn
 -
CILEN_DEFLATE
;

967 i‡(
go
->
deÊ©e_c‹ª˘
 && go->
deÊ©e_dø·


968 && 
Àn
 >
CILEN_DEFLATE
 && 
p
[0] =
CI_DEFLATE_DRAFT


969 && 
p
[1] =
CILEN_DEFLATE
) {

970 
p
 +
CILEN_DEFLATE
;

971 
Àn
 -
CILEN_DEFLATE
;

975 i‡(
go
->
bsd_com¥ess
 && 
Àn
 >
CILEN_BSD_COMPRESS


976 && 
p
[0] =
CI_BSD_COMPRESS
 &&Ö[1] =
CILEN_BSD_COMPRESS
) {

977 
no
.
bsd_com¥ess
 = 1;

982 i‡(
	`BSD_VERSION
(
p
[2]Ë!
BSD_CURRENT_VERSION
)

983 
åy
.
bsd_com¥ess
 = 0;

984 i‡(
	`BSD_NBITS
(
p
[2]Ë< 
go
->
bsd_bôs
)

985 
åy
.
bsd_bôs
 = 
	`BSD_NBITS
(
p
[2]);

986 
p
 +
CILEN_BSD_COMPRESS
;

987 
Àn
 -
CILEN_BSD_COMPRESS
;

996 i‡(
f
->
°©e
 !
OPENED
)

997 *
go
 = 
åy
;

999 
	}
}

1005 
	$c˝_ªjci
(
f
, 
p
, 
Àn
)

1006 
fsm
 *
f
;

1007 
u_ch¨
 *
p
;

1008 
Àn
;

1010 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

1011 
c˝_›ti⁄s
 
åy
;

1013 
åy
 = *
go
;

1019 i‡(
Àn
 =0 && 
Æl_ªje˘ed
[
f
->
unô
])

1022 #ifde‡
MPPE


1023 i‡(
go
->
mµe
 && 
Àn
 >
CILEN_MPPE


1024 && 
p
[0] =
CI_MPPE
 &&Ö[1] =
CILEN_MPPE
) {

1025 
	`îr‹
("MPPEÑequired butÖeerÑefused");

1026 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÖeerÑefused");

1027 
p
 +
CILEN_MPPE
;

1028 
Àn
 -
CILEN_MPPE
;

1031 i‡(
go
->
deÊ©e_c‹ª˘
 && 
Àn
 >
CILEN_DEFLATE


1032 && 
p
[0] =
CI_DEFLATE
 &&Ö[1] =
CILEN_DEFLATE
) {

1033 i‡(
p
[2] !
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
)

1034 || 
p
[3] !
DEFLATE_CHK_SEQUENCE
)

1036 
åy
.
deÊ©e_c‹ª˘
 = 0;

1037 
p
 +
CILEN_DEFLATE
;

1038 
Àn
 -
CILEN_DEFLATE
;

1040 i‡(
go
->
deÊ©e_dø·
 && 
Àn
 >
CILEN_DEFLATE


1041 && 
p
[0] =
CI_DEFLATE_DRAFT
 &&Ö[1] =
CILEN_DEFLATE
) {

1042 i‡(
p
[2] !
	`DEFLATE_MAKE_OPT
(
go
->
deÊ©e_size
)

1043 || 
p
[3] !
DEFLATE_CHK_SEQUENCE
)

1045 
åy
.
deÊ©e_dø·
 = 0;

1046 
p
 +
CILEN_DEFLATE
;

1047 
Àn
 -
CILEN_DEFLATE
;

1049 i‡(!
åy
.
deÊ©e_c‹ª˘
 && !åy.
deÊ©e_dø·
)

1050 
åy
.
deÊ©e
 = 0;

1051 i‡(
go
->
bsd_com¥ess
 && 
Àn
 >
CILEN_BSD_COMPRESS


1052 && 
p
[0] =
CI_BSD_COMPRESS
 &&Ö[1] =
CILEN_BSD_COMPRESS
) {

1053 i‡(
p
[2] !
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
go
->
bsd_bôs
))

1055 
åy
.
bsd_com¥ess
 = 0;

1056 
p
 +
CILEN_BSD_COMPRESS
;

1057 
Àn
 -
CILEN_BSD_COMPRESS
;

1059 i‡(
go
->
¥edi˘‹_1
 && 
Àn
 >
CILEN_PREDICTOR_1


1060 && 
p
[0] =
CI_PREDICTOR_1
 &&Ö[1] =
CILEN_PREDICTOR_1
) {

1061 
åy
.
¥edi˘‹_1
 = 0;

1062 
p
 +
CILEN_PREDICTOR_1
;

1063 
Àn
 -
CILEN_PREDICTOR_1
;

1065 i‡(
go
->
¥edi˘‹_2
 && 
Àn
 >
CILEN_PREDICTOR_2


1066 && 
p
[0] =
CI_PREDICTOR_2
 &&Ö[1] =
CILEN_PREDICTOR_2
) {

1067 
åy
.
¥edi˘‹_2
 = 0;

1068 
p
 +
CILEN_PREDICTOR_2
;

1069 
Àn
 -
CILEN_PREDICTOR_2
;

1072 i‡(
Àn
 != 0)

1075 i‡(
f
->
°©e
 !
OPENED
)

1076 *
go
 = 
åy
;

1079 
	}
}

1087 
	$c˝_ªqci
(
f
, 
p
, 
À≈
, 
d⁄t_«k
)

1088 
fsm
 *
f
;

1089 
u_ch¨
 *
p
;

1090 *
À≈
;

1091 
d⁄t_«k
;

1093 
ªt
, 
√wªt
, 
ªs
;

1094 
u_ch¨
 *
p0
, *
ªç
;

1095 
Àn
, 
˛í
, 
ty≥
, 
nb
;

1096 
c˝_›ti⁄s
 *
ho
 = &
c˝_his›ti⁄s
[
f
->
unô
];

1097 
c˝_›ti⁄s
 *
ao
 = &
c˝_Ælow›ti⁄s
[
f
->
unô
];

1098 #ifde‡
MPPE


1099 
boﬁ
 
ªj_f‹_ci_mµe
 = 1;

1103 
ªt
 = 
CONFACK
;

1104 
ªç
 = 
p0
 = 
p
;

1105 
Àn
 = *
À≈
;

1107 
	`mem£t
(
ho
, 0, (
c˝_›ti⁄s
));

1108 
ho
->
mëhod
 = (
Àn
 > 0)? 
p
[0]: -1;

1110 
Àn
 > 0) {

1111 
√wªt
 = 
CONFACK
;

1112 i‡(
Àn
 < 2 || 
p
[1] < 2 ||Ö[1] >Üen) {

1114 
˛í
 = 
Àn
;

1115 
√wªt
 = 
CONFREJ
;

1118 
ty≥
 = 
p
[0];

1119 
˛í
 = 
p
[1];

1121 
ty≥
) {

1122 #ifde‡
MPPE


1123 
CI_MPPE
:

1124 i‡(!
ao
->
mµe
 || 
˛í
 !
CILEN_MPPE
) {

1125 
√wªt
 = 
CONFREJ
;

1128 
	`MPPE_CI_TO_OPTS
(&
p
[2], 
ho
->
mµe
);

1131 i‡(
ho
->
mµe
 & 
MPPE_OPT_UNSUPPORTED
) {

1132 
√wªt
 = 
CONFNAK
;

1133 
ho
->
mµe
 &~
MPPE_OPT_UNSUPPORTED
;

1135 i‡(
ho
->
mµe
 & 
MPPE_OPT_UNKNOWN
) {

1136 
√wªt
 = 
CONFNAK
;

1137 
ho
->
mµe
 &~
MPPE_OPT_UNKNOWN
;

1141 i‡(
ho
->
mµe
 & 
MPPE_OPT_STATEFUL
) {

1148 i‡(
ªfu£_mµe_°©eful
) {

1149 
	`îr‹
("Refusing MPPE stateful mode offered byÖeer");

1150 
√wªt
 = 
CONFREJ
;

1156 i‡((
ho
->
mµe
 & 
MPPE_OPT_128
)

1157 && (
ho
->
mµe
 & 
MPPE_OPT_40
)) {

1159 
√wªt
 = 
CONFNAK
;

1160 i‡(
ao
->
mµe
 & 
MPPE_OPT_128
)

1161 
ho
->
mµe
 &~
MPPE_OPT_40
;

1162 i‡(
ao
->
mµe
 & 
MPPE_OPT_40
)

1163 
ho
->
mµe
 &~
MPPE_OPT_128
;

1165 
√wªt
 = 
CONFREJ
;

1168 } i‡(
ho
->
mµe
 & 
MPPE_OPT_128
) {

1169 i‡(!(
ao
->
mµe
 & 
MPPE_OPT_128
)) {

1170 
√wªt
 = 
CONFREJ
;

1173 } i‡(
ho
->
mµe
 & 
MPPE_OPT_40
) {

1174 i‡(!(
ao
->
mµe
 & 
MPPE_OPT_40
)) {

1175 
√wªt
 = 
CONFREJ
;

1181 
√wªt
 = 
CONFNAK
;

1184 
ho
->
mµe
 = 
ao
->mppe;

1188 
	`MPPE_OPTS_TO_CI
(
ho
->
mµe
, &
p
[2]);

1189 i‡(
√wªt
 =
CONFACK
) {

1190 
u_ch¨
 
›t_buf
[
CILEN_MPPE
 + 
MPPE_MAX_KEY_LEN
];

1191 
mtu
;

1193 
	`BCOPY
(
p
, 
›t_buf
, 
CILEN_MPPE
);

1194 
	`BCOPY
(
mµe_£nd_key
, &
›t_buf
[
CILEN_MPPE
],

1195 
MPPE_MAX_KEY_LEN
);

1196 i‡(
	`c˝_ã°
(
f
->
unô
, 
›t_buf
,

1197 
CILEN_MPPE
 + 
MPPE_MAX_KEY_LEN
, 1) <= 0) {

1199 
	`îr‹
("MPPEÑequired, but kernel hasÇo support.");

1200 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÇotávailable");

1201 
√wªt
 = 
CONFREJ
;

1209 
mtu
 = 
	`√tif_gë_mtu
(
f
->
unô
);

1210 i‡(
mtu
)

1211 
	`√tif_£t_mtu
(
f
->
unô
, 
mtu
 - 
MPPE_PAD
);

1213 
√wªt
 = 
CONFREJ
;

1221 
ªj_f‹_ci_mµe
 = 0;

1224 
CI_DEFLATE
:

1225 
CI_DEFLATE_DRAFT
:

1226 i‡(!
ao
->
deÊ©e
 || 
˛í
 !
CILEN_DEFLATE


1227 || (!
ao
->
deÊ©e_c‹ª˘
 && 
ty≥
 =
CI_DEFLATE
)

1228 || (!
ao
->
deÊ©e_dø·
 && 
ty≥
 =
CI_DEFLATE_DRAFT
)) {

1229 
√wªt
 = 
CONFREJ
;

1233 
ho
->
deÊ©e
 = 1;

1234 
ho
->
deÊ©e_size
 = 
nb
 = 
	`DEFLATE_SIZE
(
p
[2]);

1235 i‡(
	`DEFLATE_METHOD
(
p
[2]Ë!
DEFLATE_METHOD_VAL


1236 || 
p
[3] !
DEFLATE_CHK_SEQUENCE


1237 || 
nb
 > 
ao
->
deÊ©e_size
 ||Çb < 
DEFLATE_MIN_WORKS
) {

1238 
√wªt
 = 
CONFNAK
;

1239 i‡(!
d⁄t_«k
) {

1240 
p
[2] = 
	`DEFLATE_MAKE_OPT
(
ao
->
deÊ©e_size
);

1241 
p
[3] = 
DEFLATE_CHK_SEQUENCE
;

1253 i‡(
p
 =
p0
) {

1255 
ªs
 = 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_DEFLATE
, 1);

1256 i‡(
ªs
 > 0)

1258 i‡(
ªs
 < 0 || 
nb
 =
DEFLATE_MIN_WORKS
 || 
d⁄t_«k
) {

1259 
√wªt
 = 
CONFREJ
;

1260 
p
[2] = 
	`DEFLATE_MAKE_OPT
(
ho
->
deÊ©e_size
);

1263 
√wªt
 = 
CONFNAK
;

1264 --
nb
;

1265 
p
[2] = 
	`DEFLATE_MAKE_OPT
(
nb
);

1270 
CI_BSD_COMPRESS
:

1271 i‡(!
ao
->
bsd_com¥ess
 || 
˛í
 !
CILEN_BSD_COMPRESS
) {

1272 
√wªt
 = 
CONFREJ
;

1276 
ho
->
bsd_com¥ess
 = 1;

1277 
ho
->
bsd_bôs
 = 
nb
 = 
	`BSD_NBITS
(
p
[2]);

1278 i‡(
	`BSD_VERSION
(
p
[2]Ë!
BSD_CURRENT_VERSION


1279 || 
nb
 > 
ao
->
bsd_bôs
 ||Çb < 
BSD_MIN_BITS
) {

1280 
√wªt
 = 
CONFNAK
;

1281 i‡(!
d⁄t_«k
) {

1282 
p
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
ao
->
bsd_bôs
);

1294 i‡(
p
 =
p0
) {

1296 
ªs
 = 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_BSD_COMPRESS
, 1);

1297 i‡(
ªs
 > 0)

1299 i‡(
ªs
 < 0 || 
nb
 =
BSD_MIN_BITS
 || 
d⁄t_«k
) {

1300 
√wªt
 = 
CONFREJ
;

1301 
p
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
,

1302 
ho
->
bsd_bôs
);

1305 
√wªt
 = 
CONFNAK
;

1306 --
nb
;

1307 
p
[2] = 
	`BSD_MAKE_OPT
(
BSD_CURRENT_VERSION
, 
nb
);

1312 
CI_PREDICTOR_1
:

1313 i‡(!
ao
->
¥edi˘‹_1
 || 
˛í
 !
CILEN_PREDICTOR_1
) {

1314 
√wªt
 = 
CONFREJ
;

1318 
ho
->
¥edi˘‹_1
 = 1;

1319 i‡(
p
 =
p0


1320 && 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_PREDICTOR_1
, 1) <= 0) {

1321 
√wªt
 = 
CONFREJ
;

1325 
CI_PREDICTOR_2
:

1326 i‡(!
ao
->
¥edi˘‹_2
 || 
˛í
 !
CILEN_PREDICTOR_2
) {

1327 
√wªt
 = 
CONFREJ
;

1331 
ho
->
¥edi˘‹_2
 = 1;

1332 i‡(
p
 =
p0


1333 && 
	`c˝_ã°
(
f
->
unô
, 
p
, 
CILEN_PREDICTOR_2
, 1) <= 0) {

1334 
√wªt
 = 
CONFREJ
;

1339 
√wªt
 = 
CONFREJ
;

1343 i‡(
√wªt
 =
CONFNAK
 && 
d⁄t_«k
)

1344 
√wªt
 = 
CONFREJ
;

1345 i‡(!(
√wªt
 =
CONFACK
 || (√wªà=
CONFNAK
 && 
ªt
 =
CONFREJ
))) {

1347 i‡(
√wªt
 =
CONFREJ
 && 
ªt
 =
CONFNAK
)

1348 
ªç
 = 
p0
;

1349 
ªt
 = 
√wªt
;

1350 i‡(
p
 !
ªç
)

1351 
	`BCOPY
(
p
, 
ªç
, 
˛í
);

1352 
ªç
 +
˛í
;

1355 
p
 +
˛í
;

1356 
Àn
 -
˛í
;

1359 i‡(
ªt
 !
CONFACK
) {

1360 i‡(
ªt
 =
CONFREJ
 && *
À≈
 =
ªç
 - 
p0
)

1361 
Æl_ªje˘ed
[
f
->
unô
] = 1;

1363 *
À≈
 = 
ªç
 - 
p0
;

1365 #ifde‡
MPPE


1366 i‡(
ªt
 =
CONFREJ
 && 
ao
->
mµe
 && 
ªj_f‹_ci_mµe
) {

1367 
	`îr‹
("MPPEÑequired butÖeerÇegotiation failed");

1368 
	`l˝_˛o£
(
f
->
unô
, "MPPEÑequired butÖeerÇegotiation failed");

1371  
ªt
;

1372 
	}
}

1378 
	$mëhod_«me
(
›t
, 
›t2
)

1379 
c˝_›ti⁄s
 *
›t
, *
›t2
;

1381 
ªsu…
[64];

1383 i‡(!
	`ANY_COMPRESS
(*
›t
))

1385 
›t
->
mëhod
) {

1386 #ifde‡
MPPE


1387 
CI_MPPE
:

1389 *
p
 = 
ªsu…
;

1390 *
q
 = 
ªsu…
 + (result);

1392 
	`¶¥ötf
(
p
, 
q
 -Ö, "MPPE ");

1393 
p
 += 5;

1394 i‡(
›t
->
mµe
 & 
MPPE_OPT_128
) {

1395 
	`¶¥ötf
(
p
, 
q
 -Ö, "128-bit ");

1396 
p
 += 8;

1398 i‡(
›t
->
mµe
 & 
MPPE_OPT_40
) {

1399 
	`¶¥ötf
(
p
, 
q
 -Ö, "40-bit ");

1400 
p
 += 7;

1402 i‡(
›t
->
mµe
 & 
MPPE_OPT_STATEFUL
)

1403 
	`¶¥ötf
(
p
, 
q
 -Ö, "stateful");

1405 
	`¶¥ötf
(
p
, 
q
 -Ö, "stateless");

1410 
CI_DEFLATE
:

1411 
CI_DEFLATE_DRAFT
:

1412 i‡(
›t2
 !
NULL
 && o±2->
deÊ©e_size
 !
›t
->deflate_size)

1413 
	`¶¥ötf
(
ªsu…
, (result), "Deflate%s (%d/%d)",

1414 (
›t
->
mëhod
 =
CI_DEFLATE_DRAFT
? "(old#)": ""),

1415 
›t
->
deÊ©e_size
, 
›t2
->deflate_size);

1417 
	`¶¥ötf
(
ªsu…
, (result), "Deflate%s (%d)",

1418 (
›t
->
mëhod
 =
CI_DEFLATE_DRAFT
? "(old#)": ""),

1419 
›t
->
deÊ©e_size
);

1421 
CI_BSD_COMPRESS
:

1422 i‡(
›t2
 !
NULL
 && o±2->
bsd_bôs
 !
›t
->bsd_bits)

1423 
	`¶¥ötf
(
ªsu…
, (result), "BSD-Compress (%d/%d)",

1424 
›t
->
bsd_bôs
, 
›t2
->bsd_bits);

1426 
	`¶¥ötf
(
ªsu…
, (result), "BSD-Compress (%d)",

1427 
›t
->
bsd_bôs
);

1429 
CI_PREDICTOR_1
:

1431 
CI_PREDICTOR_2
:

1434 
	`¶¥ötf
(
ªsu…
, ‘esu…), "Mëhod %d", 
›t
->
mëhod
);

1436  
ªsu…
;

1437 
	}
}

1443 
	$c˝_up
(
f
)

1444 
fsm
 *
f
;

1446 
c˝_›ti⁄s
 *
go
 = &
c˝_gŸ›ti⁄s
[
f
->
unô
];

1447 
c˝_›ti⁄s
 *
ho
 = &
c˝_his›ti⁄s
[
f
->
unô
];

1448 
mëhod1
[64];

1450 
	`c˝_Êags_£t
(
f
->
unô
, 1, 1);

1451 i‡(
	`ANY_COMPRESS
(*
go
)) {

1452 i‡(
	`ANY_COMPRESS
(*
ho
)) {

1453 i‡(
go
->
mëhod
 =
ho
->method) {

1454 
	`nŸi˚
("%†com¥essi⁄É«bÀd", 
	`mëhod_«me
(
go
, 
ho
));

1456 
	`°æ˝y
(
mëhod1
, 
	`mëhod_«me
(
go
, 
NULL
), (method1));

1457 
	`nŸi˚
("%s / %s compressionÉnabled",

1458 
mëhod1
, 
	`mëhod_«me
(
ho
, 
NULL
));

1461 
	`nŸi˚
("%†ª˚ivêcom¥essi⁄É«bÀd", 
	`mëhod_«me
(
go
, 
NULL
));

1462 } i‡(
	`ANY_COMPRESS
(*
ho
))

1463 
	`nŸi˚
("%†å™smô com¥essi⁄É«bÀd", 
	`mëhod_«me
(
ho
, 
NULL
));

1464 #ifde‡
MPPE


1465 i‡(
go
->
mµe
) {

1466 
	`BZERO
(
mµe_ªcv_key
, 
MPPE_MAX_KEY_LEN
);

1467 
	`BZERO
(
mµe_£nd_key
, 
MPPE_MAX_KEY_LEN
);

1468 
	`c⁄töue_√tw‹ks
(
f
->
unô
);

1471 
	}
}

1477 
	$c˝_down
(
f
)

1478 
fsm
 *
f
;

1480 i‡(
c˝_loˇl°©e
[
f
->
unô
] & 
RACK_PENDING
)

1481 
	`UNTIMEOUT
(
c˝_øck_timeout
, 
f
);

1482 
c˝_loˇl°©e
[
f
->
unô
] = 0;

1483 
	`c˝_Êags_£t
(
f
->
unô
, 1, 0);

1484 #ifde‡
MPPE


1485 i‡(
c˝_gŸ›ti⁄s
[
f
->
unô
].
mµe
) {

1486 
c˝_gŸ›ti⁄s
[
f
->
unô
].
mµe
 = 0;

1487 i‡(
l˝_fsm
[
f
->
unô
].
°©e
 =
OPENED
) {

1489 
	`îr‹
("MPPE disabled");

1490 
	`l˝_˛o£
(
f
->
unô
, "MPPE disabled");

1494 
	}
}

1499 *
	gc˝_codíames
[] = {

1502 
NULL
, NULL, NULL, NULL, NULL, NULL,

1507 
	$c˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

1508 
u_ch¨
 *
p
;

1509 
∂í
;

1510 (*
¥öãr
Ë
	`__P
((*, *, ...));

1511 *
¨g
;

1513 
u_ch¨
 *
p0
, *
›ãnd
;

1514 
code
, 
id
, 
Àn
;

1515 
›éí
;

1517 
p0
 = 
p
;

1518 i‡(
∂í
 < 
HEADERLEN
)

1520 
code
 = 
p
[0];

1521 
id
 = 
p
[1];

1522 
Àn
 = (
p
[2] << 8) +Ö[3];

1523 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

1526 i‡(
code
 >1 && codê<(
c˝_codíames
) / (*)

1527 && 
c˝_codíames
[
code
-1] !
NULL
)

1528 
	`¥öãr
(
¨g
, " %s", 
c˝_codíames
[
code
-1]);

1530 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1531 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1532 
Àn
 -
HEADERLEN
;

1533 
p
 +
HEADERLEN
;

1535 
code
) {

1536 
CONFREQ
:

1537 
CONFACK
:

1538 
CONFNAK
:

1539 
CONFREJ
:

1541 
Àn
 >= 2) {

1542 
code
 = 
p
[0];

1543 
›éí
 = 
p
[1];

1544 i‡(
›éí
 < 2 || o±À¿> 
Àn
)

1546 
	`¥öãr
(
¨g
, " <");

1547 
Àn
 -
›éí
;

1548 
›ãnd
 = 
p
 + 
›éí
;

1549 
code
) {

1550 #ifde‡
MPPE


1551 
CI_MPPE
:

1552 i‡(
›éí
 >
CILEN_MPPE
) {

1553 
u_ch¨
 
mµe_›ts
;

1555 
	`MPPE_CI_TO_OPTS
(&
p
[2], 
mµe_›ts
);

1556 
	`¥öãr
(
¨g
, "mppe %s %s %s %s %s %s%s",

1557 (
p
[2] & 
MPPE_H_BIT
)? "+H": "-H",

1558 (
p
[5] & 
MPPE_M_BIT
)? "+M": "-M",

1559 (
p
[5] & 
MPPE_S_BIT
)? "+S": "-S",

1560 (
p
[5] & 
MPPE_L_BIT
)? "+L": "-L",

1561 (
p
[5] & 
MPPE_D_BIT
)? "+D": "-D",

1562 (
p
[5] & 
MPPE_C_BIT
)? "+C": "-C",

1563 (
mµe_›ts
 & 
MPPE_OPT_UNKNOWN
)? " +U": "");

1564 i‡(
mµe_›ts
 & 
MPPE_OPT_UNKNOWN
)

1565 
	`¥öãr
(
¨g
, " (%.2x %.2x %.2x %.2x)",

1566 
p
[2],Ö[3],Ö[4],Ö[5]);

1567 
p
 +
CILEN_MPPE
;

1571 
CI_DEFLATE
:

1572 
CI_DEFLATE_DRAFT
:

1573 i‡(
›éí
 >
CILEN_DEFLATE
) {

1574 
	`¥öãr
(
¨g
, "deflate%s %d",

1575 (
code
 =
CI_DEFLATE_DRAFT
? "(old#)": ""),

1576 
	`DEFLATE_SIZE
(
p
[2]));

1577 i‡(
	`DEFLATE_METHOD
(
p
[2]Ë!
DEFLATE_METHOD_VAL
)

1578 
	`¥öãr
(
¨g
, " mëhod %d", 
	`DEFLATE_METHOD
(
p
[2]));

1579 i‡(
p
[3] !
DEFLATE_CHK_SEQUENCE
)

1580 
	`¥öãr
(
¨g
, " check %d", 
p
[3]);

1581 
p
 +
CILEN_DEFLATE
;

1584 
CI_BSD_COMPRESS
:

1585 i‡(
›éí
 >
CILEN_BSD_COMPRESS
) {

1586 
	`¥öãr
(
¨g
, "bsd v%d %d", 
	`BSD_VERSION
(
p
[2]),

1587 
	`BSD_NBITS
(
p
[2]));

1588 
p
 +
CILEN_BSD_COMPRESS
;

1591 
CI_PREDICTOR_1
:

1592 i‡(
›éí
 >
CILEN_PREDICTOR_1
) {

1593 
	`¥öãr
(
¨g
, "predictor 1");

1594 
p
 +
CILEN_PREDICTOR_1
;

1597 
CI_PREDICTOR_2
:

1598 i‡(
›éí
 >
CILEN_PREDICTOR_2
) {

1599 
	`¥öãr
(
¨g
, "predictor 2");

1600 
p
 +
CILEN_PREDICTOR_2
;

1604 
p
 < 
›ãnd
)

1605 
	`¥öãr
(
¨g
, " %.2x", *
p
++);

1606 
	`¥öãr
(
¨g
, ">");

1610 
TERMACK
:

1611 
TERMREQ
:

1612 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1613 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1614 
p
 +
Àn
;

1615 
Àn
 = 0;

1621 --
Àn
 >= 0)

1622 
	`¥öãr
(
¨g
, " %.2x", *
p
++);

1624  
p
 - 
p0
;

1625 
	}
}

1640 
	$c˝_d©aöput
(
unô
, 
pkt
, 
Àn
)

1641 
unô
;

1642 
u_ch¨
 *
pkt
;

1643 
Àn
;

1645 
fsm
 *
f
;

1647 
f
 = &
c˝_fsm
[
unô
];

1648 i‡(
f
->
°©e
 =
OPENED
) {

1649 i‡(
	`c˝_Áèl_îr‹
(
unô
)) {

1653 
	`îr‹
("Lost compression sync: disabling compression");

1654 
	`c˝_˛o£
(
unô
, "Lost compression sync");

1655 #ifde‡
MPPE


1659 i‡(
c˝_gŸ›ti⁄s
[
unô
].
mµe
) {

1660 
	`îr‹
("Too many MPPEÉrrors, closing LCP");

1661 
	`l˝_˛o£
(
unô
, "Too many MPPEÉrrors");

1670 i‡(!(
c˝_loˇl°©e
[
f
->
unô
] & 
RACK_PENDING
)) {

1671 
	`fsm_sd©a
(
f
, 
CCP_RESETREQ
, f->
ªqid
 = ++f->
id
, 
NULL
, 0);

1672 
	`TIMEOUT
(
c˝_øck_timeout
, 
f
, 
RACKTIMEOUT
);

1673 
c˝_loˇl°©e
[
f
->
unô
] |
RACK_PENDING
;

1675 
c˝_loˇl°©e
[
f
->
unô
] |
RREQ_REPEAT
;

1678 
	}
}

1684 
	$c˝_øck_timeout
(
¨g
)

1685 *
¨g
;

1687 
fsm
 *
f
 = 
¨g
;

1689 i‡(
f
->
°©e
 =
OPENED
 && 
c˝_loˇl°©e
[f->
unô
] & 
RREQ_REPEAT
) {

1690 
	`fsm_sd©a
(
f
, 
CCP_RESETREQ
, f->
ªqid
, 
NULL
, 0);

1691 
	`TIMEOUT
(
c˝_øck_timeout
, 
f
, 
RACKTIMEOUT
);

1692 
c˝_loˇl°©e
[
f
->
unô
] &~
RREQ_REPEAT
;

1694 
c˝_loˇl°©e
[
f
->
unô
] &~
RACK_PENDING
;

1695 
	}
}

	@pppd/ccp.h

33 
	sc˝_›ti⁄s
 {

34 
boﬁ
 
	mbsd_com¥ess
;

35 
boﬁ
 
	mdeÊ©e
;

36 
boﬁ
 
	m¥edi˘‹_1
;

37 
boﬁ
 
	m¥edi˘‹_2
;

38 
boﬁ
 
	mdeÊ©e_c‹ª˘
;

39 
boﬁ
 
	mdeÊ©e_dø·
;

40 
u_ch¨
 
	mmµe
;

41 
u_sh‹t
 
	mbsd_bôs
;

42 
u_sh‹t
 
	mdeÊ©e_size
;

43 
	mmëhod
;

44 } 
	tc˝_›ti⁄s
;

46 
fsm
 
c˝_fsm
[];

47 
c˝_›ti⁄s
 
c˝_w™t›ti⁄s
[];

48 
c˝_›ti⁄s
 
c˝_gŸ›ti⁄s
[];

49 
c˝_›ti⁄s
 
c˝_Ælow›ti⁄s
[];

50 
c˝_›ti⁄s
 
c˝_his›ti⁄s
[];

52 
¥Ÿít
 
c˝_¥Ÿít
;

	@pppd/chap-md5.c

31 
	#RCSID
 "$Id: ch≠-md5.c,v 1.4 2004/11/09 22:39:25Öaulu†Ex∞$"

	)

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~"µpd.h
"

36 
	~"ch≠-√w.h
"

37 
	~"ch≠-md5.h
"

38 
	~"magic.h
"

39 
	~"md5.h
"

41 
	#MD5_HASH_SIZE
 16

	)

42 
	#MD5_MIN_CHALLENGE
 16

	)

43 
	#MD5_MAX_CHALLENGE
 24

	)

46 
	$ch≠_md5_gíî©e_chÆÀnge
(*
˝
)

48 
˛í
;

50 
˛í
 = ()(
	`dønd48
(Ë* (
MD5_MAX_CHALLENGE
 - 
MD5_MIN_CHALLENGE
))

51 + 
MD5_MIN_CHALLENGE
;

52 *
˝
++ = 
˛í
;

53 
	`øndom_byãs
(
˝
, 
˛í
);

54 
	}
}

57 
	$ch≠_md5_vîify_ª•⁄£
(
id
, *
«me
,

58 *
£¸ë
, 
£¸ë_Àn
,

59 *
chÆÀnge
, *
ª•⁄£
,

60 *
mesßge
, 
mesßge_•a˚
)

62 
MD5_CTX
 
˘x
;

63 
idbyã
 = 
id
;

64 
hash
[
MD5_HASH_SIZE
];

65 
chÆÀnge_Àn
, 
ª•⁄£_Àn
;

67 
chÆÀnge_Àn
 = *
chÆÀnge
++;

68 
ª•⁄£_Àn
 = *
ª•⁄£
++;

69 i‡(
ª•⁄£_Àn
 =
MD5_HASH_SIZE
) {

71 
	`MD5_Inô
(&
˘x
);

72 
	`MD5_Upd©e
(&
˘x
, &
idbyã
, 1);

73 
	`MD5_Upd©e
(&
˘x
, 
£¸ë
, 
£¸ë_Àn
);

74 
	`MD5_Upd©e
(&
˘x
, 
chÆÀnge
, 
chÆÀnge_Àn
);

75 
	`MD5_FöÆ
(
hash
, &
˘x
);

78 i‡(
	`memcmp
(
hash
, 
ª•⁄£
, 
MD5_HASH_SIZE
) == 0) {

79 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "Access granted");

83 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "Access denied");

85 
	}
}

88 
	$ch≠_md5_make_ª•⁄£
(*
ª•⁄£
, 
id
, *
our_«me
,

89 *
chÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

90 *
¥iv©e
)

92 
MD5_CTX
 
˘x
;

93 
idbyã
 = 
id
;

94 
chÆÀnge_Àn
 = *
chÆÀnge
++;

96 
	`MD5_Inô
(&
˘x
);

97 
	`MD5_Upd©e
(&
˘x
, &
idbyã
, 1);

98 
	`MD5_Upd©e
(&
˘x
, (
u_ch¨
 *)
£¸ë
, 
£¸ë_Àn
);

99 
	`MD5_Upd©e
(&
˘x
, 
chÆÀnge
, 
chÆÀnge_Àn
);

100 
	`MD5_FöÆ
(&
ª•⁄£
[1], &
˘x
);

101 
ª•⁄£
[0] = 
MD5_HASH_SIZE
;

102 
	}
}

104 
ch≠_dige°_ty≥
 
	gmd5_dige°
 = {

105 
CHAP_MD5
,

106 
ch≠_md5_gíî©e_chÆÀnge
,

107 
ch≠_md5_vîify_ª•⁄£
,

108 
ch≠_md5_make_ª•⁄£
,

109 
NULL
,

110 
NULL
,

114 
	$ch≠_md5_öô
()

116 
	`ch≠_ªgi°î_dige°
(&
md5_dige°
);

117 
	}
}

	@pppd/chap-md5.h

31 
ch≠_md5_öô
();

	@pppd/chap-new.c

31 
	#RCSID
 "$Id: ch≠-√w.c,v 1.9 2007/06/19 02:08:35 c¨ls⁄j Ex∞$"

	)

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~"µpd.h
"

36 
	~"£ssi⁄.h
"

37 
	~"ch≠-√w.h
"

38 
	~"ch≠-md5.h
"

40 #ifde‡
CHAPMS


41 
	~"ch≠_ms.h
"

42 
	#MDTYPE_ALL
 (
MDTYPE_MICROSOFT_V2
 | 
MDTYPE_MICROSOFT
 | 
MDTYPE_MD5
)

	)

44 
	#MDTYPE_ALL
 (
MDTYPE_MD5
)

	)

47 
	gch≠_mdty≥_Æl
 = 
MDTYPE_ALL
;

50 (*
ch≠_vîify_hook
)(*
«me
, *
ou∫ame
, 
id
,

51 
ch≠_dige°_ty≥
 *
dige°
,

52 *
chÆÀnge
, *
ª•⁄£
,

53 *
mesßge
, 
mesßge_•a˚
Ë
NULL
;

58 
ch≠_timeout_time
 = 3;

59 
ch≠_max_å™smôs
 = 10;

60 
ch≠_ªchÆÀnge_time
 = 0;

65 
›ti⁄_t
 
ch≠_›ti⁄_li°
[] = {

66 { "ch≠-ª°¨t", 
o_öt
, &
ch≠_timeout_time
,

67 "SëÅimeouàf‹ CHAP", 
OPT_PRIO
 },

68 { "ch≠-max-chÆÀnge", 
o_öt
, &
ch≠_max_å™smôs
,

69 "Së max #xmô†f‹ chÆÀnge", 
OPT_PRIO
 },

70 { "ch≠-öãrvÆ", 
o_öt
, &
ch≠_ªchÆÀnge_time
,

71 "Së i¡îvÆ f‹ÑechÆÀnge", 
OPT_PRIO
 },

72 { 
NULL
 }

73 
	}
};

78 
	sch≠_˛õ¡_°©e
 {

79 
	mÊags
;

80 *
	m«me
;

81 
ch≠_dige°_ty≥
 *
	mdige°
;

82 
	m¥iv
[64];

83 } 
	g˛õ¡
;

89 
	#CHAL_MAX_PKTLEN
 (
PPP_HDRLEN
 + 
CHAP_HDRLEN
 + 4 + 
MAX_CHALLENGE_LEN
 + 
MAXNAMELEN
)

	)

90 
	#RESP_MAX_PKTLEN
 (
PPP_HDRLEN
 + 
CHAP_HDRLEN
 + 4 + 
MAX_RESPONSE_LEN
 + 
MAXNAMELEN
)

	)

92 
	sch≠_£rvî_°©e
 {

93 
	mÊags
;

94 
	mid
;

95 *
	m«me
;

96 
ch≠_dige°_ty≥
 *
	mdige°
;

97 
	mchÆÀnge_xmôs
;

98 
	mchÆÀnge_pkéí
;

99 
	mchÆÀnge
[
CHAL_MAX_PKTLEN
];

100 
	mmesßge
[256];

101 } 
	g£rvî
;

104 
	#LOWERUP
 1

	)

105 
	#AUTH_STARTED
 2

	)

106 
	#AUTH_DONE
 4

	)

107 
	#AUTH_FAILED
 8

	)

108 
	#TIMEOUT_PENDING
 0x10

	)

109 
	#CHALLENGE_VALID
 0x20

	)

114 
ch≠_öô
(
unô
);

115 
ch≠_lowîup
(
unô
);

116 
ch≠_lowîdown
(
unô
);

117 
ch≠_timeout
(*
¨g
);

118 
ch≠_gíî©e_chÆÀnge
(
ch≠_£rvî_°©e
 *
ss
);

119 
ch≠_h™dÀ_ª•⁄£
(
ch≠_£rvî_°©e
 *
ss
, 
code
,

120 *
pkt
, 
Àn
);

121 
ch≠_vîify_ª•⁄£
(*
«me
, *
ou∫ame
, 
id
,

122 
ch≠_dige°_ty≥
 *
dige°
,

123 *
chÆÀnge
, *
ª•⁄£
,

124 *
mesßge
, 
mesßge_•a˚
);

125 
ch≠_ª•⁄d
(
ch≠_˛õ¡_°©e
 *
cs
, 
id
,

126 *
pkt
, 
Àn
);

127 
ch≠_h™dÀ_°©us
(
ch≠_˛õ¡_°©e
 *
cs
, 
code
, 
id
,

128 *
pkt
, 
Àn
);

129 
ch≠_¥Ÿªj
(
unô
);

130 
ch≠_öput
(
unô
, *
pkt
, 
pkéí
);

131 
ch≠_¥öt_pkt
(*
p
, 
∂í
,

132 (*
¥öãr
Ë
	`__P
((*, *, ...)), *
¨g
);

135 
ch≠_dige°_ty≥
 *
ch≠_dige°s
;

141 
	$ch≠_öô
(
unô
)

143 
	`mem£t
(&
˛õ¡
, 0, (client));

144 
	`mem£t
(&
£rvî
, 0, (server));

146 
	`ch≠_md5_öô
();

147 #ifde‡
CHAPMS


148 
	`ch≠ms_öô
();

150 
	}
}

156 
	$ch≠_ªgi°î_dige°
(
ch≠_dige°_ty≥
 *
dp
)

158 
dp
->
√xt
 = 
ch≠_dige°s
;

159 
ch≠_dige°s
 = 
dp
;

160 
	}
}

166 
	$ch≠_lowîup
(
unô
)

168 
ch≠_˛õ¡_°©e
 *
cs
 = &
˛õ¡
;

169 
ch≠_£rvî_°©e
 *
ss
 = &
£rvî
;

171 
cs
->
Êags
 |
LOWERUP
;

172 
ss
->
Êags
 |
LOWERUP
;

173 i‡(
ss
->
Êags
 & 
AUTH_STARTED
)

174 
	`ch≠_timeout
(
ss
);

175 
	}
}

178 
	$ch≠_lowîdown
(
unô
)

180 
ch≠_˛õ¡_°©e
 *
cs
 = &
˛õ¡
;

181 
ch≠_£rvî_°©e
 *
ss
 = &
£rvî
;

183 
cs
->
Êags
 = 0;

184 i‡(
ss
->
Êags
 & 
TIMEOUT_PENDING
)

185 
	`UNTIMEOUT
(
ch≠_timeout
, 
ss
);

186 
ss
->
Êags
 = 0;

187 
	}
}

195 
	$ch≠_auth_≥î
(
unô
, *
our_«me
, 
dige°_code
)

197 
ch≠_£rvî_°©e
 *
ss
 = &
£rvî
;

198 
ch≠_dige°_ty≥
 *
dp
;

200 i‡(
ss
->
Êags
 & 
AUTH_STARTED
) {

201 
	`îr‹
("CHAP:Öeeráuthenticationálready started!");

204 
dp
 = 
ch≠_dige°s
; d∞!
NULL
; d∞dp->
√xt
)

205 i‡(
dp
->
code
 =
dige°_code
)

207 i‡(
dp
 =
NULL
)

208 
	`Áèl
("CHAP digest 0x%xÑequested butÇotávailable",

209 
dige°_code
);

211 
ss
->
dige°
 = 
dp
;

212 
ss
->
«me
 = 
our_«me
;

214 
ss
->
id
 = ()(
	`dønd48
() * 256);

215 
ss
->
Êags
 |
AUTH_STARTED
;

216 i‡(
ss
->
Êags
 & 
LOWERUP
)

217 
	`ch≠_timeout
(
ss
);

218 
	}
}

225 
	$ch≠_auth_wôh_≥î
(
unô
, *
our_«me
, 
dige°_code
)

227 
ch≠_˛õ¡_°©e
 *
cs
 = &
˛õ¡
;

228 
ch≠_dige°_ty≥
 *
dp
;

230 i‡(
cs
->
Êags
 & 
AUTH_STARTED
) {

231 
	`îr‹
("CHAP:áuthentication withÖeerálready started!");

234 
dp
 = 
ch≠_dige°s
; d∞!
NULL
; d∞dp->
√xt
)

235 i‡(
dp
->
code
 =
dige°_code
)

237 i‡(
dp
 =
NULL
)

238 
	`Áèl
("CHAP digest 0x%xÑequested butÇotávailable",

239 
dige°_code
);

241 
cs
->
dige°
 = 
dp
;

242 
cs
->
«me
 = 
our_«me
;

243 
cs
->
Êags
 |
AUTH_STARTED
;

244 
	}
}

252 
	$ch≠_timeout
(*
¨g
)

254 
ch≠_£rvî_°©e
 *
ss
 = 
¨g
;

256 
ss
->
Êags
 &~
TIMEOUT_PENDING
;

257 i‡((
ss
->
Êags
 & 
CHALLENGE_VALID
) == 0) {

258 
ss
->
chÆÀnge_xmôs
 = 0;

259 
	`ch≠_gíî©e_chÆÀnge
(
ss
);

260 
ss
->
Êags
 |
CHALLENGE_VALID
;

261 } i‡(
ss
->
chÆÀnge_xmôs
 >
ch≠_max_å™smôs
) {

262 
ss
->
Êags
 &~
CHALLENGE_VALID
;

263 
ss
->
Êags
 |
AUTH_DONE
 | 
AUTH_FAILED
;

264 
	`auth_≥î_Áû
(0, 
PPP_CHAP
);

268 
	`ouçut
(0, 
ss
->
chÆÀnge
, ss->
chÆÀnge_pkéí
);

269 ++
ss
->
chÆÀnge_xmôs
;

270 
ss
->
Êags
 |
TIMEOUT_PENDING
;

271 
	`TIMEOUT
(
ch≠_timeout
, 
¨g
, 
ch≠_timeout_time
);

272 
	}
}

279 
	$ch≠_gíî©e_chÆÀnge
(
ch≠_£rvî_°©e
 *
ss
)

281 
˛í
 = 1, 
∆í
, 
Àn
;

282 *
p
;

284 
p
 = 
ss
->
chÆÀnge
;

285 
	`MAKEHEADER
(
p
, 
PPP_CHAP
);

286 
p
 +
CHAP_HDRLEN
;

287 
ss
->
dige°
->
	`gíî©e_chÆÀnge
(
p
);

288 
˛í
 = *
p
;

289 
∆í
 = 
	`°æí
(
ss
->
«me
);

290 
	`mem˝y
(
p
 + 1 + 
˛í
, 
ss
->
«me
, 
∆í
);

292 
Àn
 = 
CHAP_HDRLEN
 + 1 + 
˛í
 + 
∆í
;

293 
ss
->
chÆÀnge_pkéí
 = 
PPP_HDRLEN
 + 
Àn
;

295 
p
 = 
ss
->
chÆÀnge
 + 
PPP_HDRLEN
;

296 
p
[0] = 
CHAP_CHALLENGE
;

297 
p
[1] = ++
ss
->
id
;

298 
p
[2] = 
Àn
 >> 8;

299 
p
[3] = 
Àn
;

300 
	}
}

306 
	$ch≠_h™dÀ_ª•⁄£
(
ch≠_£rvî_°©e
 *
ss
, 
id
,

307 *
pkt
, 
Àn
)

309 
ª•⁄£_Àn
, 
ok
, 
mÀn
;

310 *
ª•⁄£
, *
p
;

311 *
«me
 = 
NULL
;

312 (*
vîifõr
)(*, *, , 
ch≠_dige°_ty≥
 *,

314 
∫ame
[
MAXNAMELEN
+1];

316 i‡((
ss
->
Êags
 & 
LOWERUP
) == 0)

318 i‡(
id
 !
ss
->
chÆÀnge
[
PPP_HDRLEN
+1] || 
Àn
 < 2)

320 i‡(
ss
->
Êags
 & 
CHALLENGE_VALID
) {

321 
ª•⁄£
 = 
pkt
;

322 
	`GETCHAR
(
ª•⁄£_Àn
, 
pkt
);

323 
Àn
 -
ª•⁄£_Àn
 + 1;

324 
«me
 = (*)
pkt
 + 
ª•⁄£_Àn
;

325 i‡(
Àn
 < 0)

328 i‡(
ss
->
Êags
 & 
TIMEOUT_PENDING
) {

329 
ss
->
Êags
 &~
TIMEOUT_PENDING
;

330 
	`UNTIMEOUT
(
ch≠_timeout
, 
ss
);

333 i‡(
ex∂icô_ªmŸe
) {

334 
«me
 = 
ªmŸe_«me
;

337 
	`¶¥ötf
(
∫ame
, ‘«me), "%.*v", 
Àn
, 
«me
);

338 
«me
 = 
∫ame
;

341 i‡(
ch≠_vîify_hook
)

342 
vîifõr
 = 
ch≠_vîify_hook
;

344 
vîifõr
 = 
ch≠_vîify_ª•⁄£
;

345 
ok
 = (*
vîifõr
)(
«me
, 
ss
->«me, 
id
, ss->
dige°
,

346 
ss
->
chÆÀnge
 + 
PPP_HDRLEN
 + 
CHAP_HDRLEN
,

347 
ª•⁄£
, 
ss
->
mesßge
, (ss->message));

348 i‡(!
ok
 || !
	`auth_numbî
()) {

349 
ss
->
Êags
 |
AUTH_FAILED
;

350 
	`w¨n
("Pì∏%q faûed CHAPáuthítiˇti⁄", 
«me
);

352 } i‡((
ss
->
Êags
 & 
AUTH_DONE
) == 0)

356 
p
 = 
ouçackë_buf
;

357 
	`MAKEHEADER
(
p
, 
PPP_CHAP
);

358 
mÀn
 = 
	`°æí
(
ss
->
mesßge
);

359 
Àn
 = 
CHAP_HDRLEN
 + 
mÀn
;

360 
p
[0] = (
ss
->
Êags
 & 
AUTH_FAILED
)? 
CHAP_FAILURE
: 
CHAP_SUCCESS
;

361 
p
[1] = 
id
;

362 
p
[2] = 
Àn
 >> 8;

363 
p
[3] = 
Àn
;

364 i‡(
mÀn
 > 0)

365 
	`mem˝y
(
p
 + 
CHAP_HDRLEN
, 
ss
->
mesßge
, 
mÀn
);

366 
	`ouçut
(0, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
Àn
);

368 i‡(
ss
->
Êags
 & 
CHALLENGE_VALID
) {

369 
ss
->
Êags
 &~
CHALLENGE_VALID
;

370 i‡(!(
ss
->
Êags
 & 
AUTH_DONE
Ë&& !(ss->Êag†& 
AUTH_FAILED
)) {

380 i‡(
£ssi⁄_mgmt
 &&

381 
	`£ssi⁄_check
(
«me
, 
NULL
, 
dev«m
, NULL) == 0) {

382 
ss
->
Êags
 |
AUTH_FAILED
;

383 
	`w¨n
("Pì∏%q faûed CHAP Sessi⁄ vîifiˇti⁄", 
«me
);

386 i‡(
ss
->
Êags
 & 
AUTH_FAILED
) {

387 
	`auth_≥î_Áû
(0, 
PPP_CHAP
);

389 i‡((
ss
->
Êags
 & 
AUTH_DONE
) == 0)

390 
	`auth_≥î_suc˚ss
(0, 
PPP_CHAP
,

391 
ss
->
dige°
->
code
,

392 
«me
, 
	`°æí
(name));

393 i‡(
ch≠_ªchÆÀnge_time
) {

394 
ss
->
Êags
 |
TIMEOUT_PENDING
;

395 
	`TIMEOUT
(
ch≠_timeout
, 
ss
,

396 
ch≠_ªchÆÀnge_time
);

399 
ss
->
Êags
 |
AUTH_DONE
;

401 
	}
}

409 
	$ch≠_vîify_ª•⁄£
(*
«me
, *
ou∫ame
, 
id
,

410 
ch≠_dige°_ty≥
 *
dige°
,

411 *
chÆÀnge
, *
ª•⁄£
,

412 *
mesßge
, 
mesßge_•a˚
)

414 
ok
;

415 
£¸ë
[
MAXSECRETLEN
];

416 
£¸ë_Àn
;

419 i‡(!
	`gë_£¸ë
(0, 
«me
, 
ou∫ame
, (*)
£¸ë
, &
£¸ë_Àn
, 1)) {

420 
	`îr‹
("NÿCHAP se¸ë found f‹áuthítiˇtög %q", 
«me
);

424 
ok
 = 
dige°
->
	`vîify_ª•⁄£
(
id
, 
«me
, 
£¸ë
, 
£¸ë_Àn
, 
chÆÀnge
,

425 
ª•⁄£
, 
mesßge
, 
mesßge_•a˚
);

426 
	`mem£t
(
£¸ë
, 0, (secret));

428  
ok
;

429 
	}
}

435 
	$ch≠_ª•⁄d
(
ch≠_˛õ¡_°©e
 *
cs
, 
id
,

436 *
pkt
, 
Àn
)

438 
˛í
, 
∆í
;

439 
£¸ë_Àn
;

440 *
p
;

441 
ª•⁄£
[
RESP_MAX_PKTLEN
];

442 
∫ame
[
MAXNAMELEN
+1];

443 
£¸ë
[
MAXSECRETLEN
+1];

445 i‡((
cs
->
Êags
 & (
LOWERUP
 | 
AUTH_STARTED
)) != (LOWERUP | AUTH_STARTED))

447 i‡(
Àn
 < 2 ||Üí < 
pkt
[0] + 1)

449 
˛í
 = 
pkt
[0];

450 
∆í
 = 
Àn
 - (
˛í
 + 1);

453 
	`¶¥ötf
(
∫ame
, ‘«me), "%.*v", 
∆í
, 
pkt
 + 
˛í
 + 1);

456 i‡(
ex∂icô_ªmŸe
 || (
ªmŸe_«me
[0] !0 && 
∫ame
[0] == 0))

457 
	`°æ˝y
(
∫ame
, 
ªmŸe_«me
, (rname));

460 i‡(!
	`gë_£¸ë
(0, 
cs
->
«me
, 
∫ame
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

461 
£¸ë_Àn
 = 0;

462 
	`w¨n
("NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%q", 
∫ame
);

465 
p
 = 
ª•⁄£
;

466 
	`MAKEHEADER
(
p
, 
PPP_CHAP
);

467 
p
 +
CHAP_HDRLEN
;

469 
cs
->
dige°
->
	`make_ª•⁄£
(
p
, 
id
, cs->
«me
, 
pkt
,

470 
£¸ë
, 
£¸ë_Àn
, 
cs
->
¥iv
);

471 
	`mem£t
(
£¸ë
, 0, 
£¸ë_Àn
);

473 
˛í
 = *
p
;

474 
∆í
 = 
	`°æí
(
cs
->
«me
);

475 
	`mem˝y
(
p
 + 
˛í
 + 1, 
cs
->
«me
, 
∆í
);

477 
p
 = 
ª•⁄£
 + 
PPP_HDRLEN
;

478 
Àn
 = 
CHAP_HDRLEN
 + 
˛í
 + 1 + 
∆í
;

479 
p
[0] = 
CHAP_RESPONSE
;

480 
p
[1] = 
id
;

481 
p
[2] = 
Àn
 >> 8;

482 
p
[3] = 
Àn
;

484 
	`ouçut
(0, 
ª•⁄£
, 
PPP_HDRLEN
 + 
Àn
);

485 
	}
}

488 
	$ch≠_h™dÀ_°©us
(
ch≠_˛õ¡_°©e
 *
cs
, 
code
, 
id
,

489 *
pkt
, 
Àn
)

491 c⁄° *
msg
 = 
NULL
;

493 i‡((
cs
->
Êags
 & (
AUTH_DONE
|
AUTH_STARTED
|
LOWERUP
))

494 !(
AUTH_STARTED
|
LOWERUP
))

496 
cs
->
Êags
 |
AUTH_DONE
;

498 i‡(
code
 =
CHAP_SUCCESS
) {

500 i‡(
cs
->
dige°
->
check_suc˚ss
 !
NULL
) {

501 i‡(!(*
cs
->
dige°
->
check_suc˚ss
)(
id
, 
pkt
, 
Àn
))

502 
code
 = 
CHAP_FAILURE
;

504 
msg
 = "CHAPáuthentication succeeded";

506 i‡(
cs
->
dige°
->
h™dÀ_Áûuª
 !
NULL
)

507 (*
cs
->
dige°
->
h™dÀ_Áûuª
)(
pkt
, 
Àn
);

509 
msg
 = "CHAPáuthentication failed";

511 i‡(
msg
) {

512 i‡(
Àn
 > 0)

513 
	`öfo
("%s: %.*v", 
msg
, 
Àn
, 
pkt
);

515 
	`öfo
("%s", 
msg
);

517 i‡(
code
 =
CHAP_SUCCESS
)

518 
	`auth_wôh≥î_suc˚ss
(0, 
PPP_CHAP
, 
cs
->
dige°
->
code
);

520 
cs
->
Êags
 |
AUTH_FAILED
;

521 
	`îr‹
("CHAPáuthentication failed");

522 
	`auth_wôh≥î_Áû
(0, 
PPP_CHAP
);

524 
	}
}

527 
	$ch≠_öput
(
unô
, *
pkt
, 
pkéí
)

529 
ch≠_˛õ¡_°©e
 *
cs
 = &
˛õ¡
;

530 
ch≠_£rvî_°©e
 *
ss
 = &
£rvî
;

531 
code
, 
id
;

532 
Àn
;

534 i‡(
pkéí
 < 
CHAP_HDRLEN
)

536 
	`GETCHAR
(
code
, 
pkt
);

537 
	`GETCHAR
(
id
, 
pkt
);

538 
	`GETSHORT
(
Àn
, 
pkt
);

539 i‡(
Àn
 < 
CHAP_HDRLEN
 ||Üí > 
pkéí
)

541 
Àn
 -
CHAP_HDRLEN
;

543 
code
) {

544 
CHAP_CHALLENGE
:

545 
	`ch≠_ª•⁄d
(
cs
, 
id
, 
pkt
, 
Àn
);

547 
CHAP_RESPONSE
:

548 
	`ch≠_h™dÀ_ª•⁄£
(
ss
, 
id
, 
pkt
, 
Àn
);

550 
CHAP_FAILURE
:

551 
CHAP_SUCCESS
:

552 
	`ch≠_h™dÀ_°©us
(
cs
, 
code
, 
id
, 
pkt
, 
Àn
);

555 
	}
}

558 
	$ch≠_¥Ÿªj
(
unô
)

560 
ch≠_˛õ¡_°©e
 *
cs
 = &
˛õ¡
;

561 
ch≠_£rvî_°©e
 *
ss
 = &
£rvî
;

563 i‡(
ss
->
Êags
 & 
TIMEOUT_PENDING
) {

564 
ss
->
Êags
 &~
TIMEOUT_PENDING
;

565 
	`UNTIMEOUT
(
ch≠_timeout
, 
ss
);

567 i‡(
ss
->
Êags
 & 
AUTH_STARTED
) {

568 
ss
->
Êags
 = 0;

569 
	`auth_≥î_Áû
(0, 
PPP_CHAP
);

571 i‡((
cs
->
Êags
 & (
AUTH_STARTED
|
AUTH_DONE
)) == AUTH_STARTED) {

572 
cs
->
Êags
 &~
AUTH_STARTED
;

573 
	`îr‹
("CHAPáuthentication failed dueÅoÖrotocol-reject");

574 
	`auth_wôh≥î_Áû
(0, 
PPP_CHAP
);

576 
	}
}

581 *
	gch≠_code_«mes
[] = {

586 
ch≠_¥öt_pkt
(*
p
, 
∂í
,

587 (*
¥öãr
Ë
	`__P
((*, *, ...)), *
¨g
)

589 
code
, 
id
, 
Àn
;

590 
˛í
, 
∆í
;

591 
x
;

593 i‡(
∂í
 < 
CHAP_HDRLEN
)

595 
	`GETCHAR
(
code
, 
p
);

596 
	`GETCHAR
(
id
, 
p
);

597 
	`GETSHORT
(
Àn
, 
p
);

598 i‡(
Àn
 < 
CHAP_HDRLEN
 ||Üí > 
∂í
)

601 i‡(
code
 >1 && codê<(
ch≠_code_«mes
) / (*))

602 
	`¥öãr
(
¨g
, " %s", 
ch≠_code_«mes
[
code
-1]);

604 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

605 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

606 
Àn
 -
CHAP_HDRLEN
;

607 
code
) {

608 
CHAP_CHALLENGE
:

609 
CHAP_RESPONSE
:

610 i‡(
Àn
 < 1)

612 
˛í
 = 
p
[0];

613 i‡(
Àn
 < 
˛í
 + 1)

615 ++
p
;

616 
∆í
 = 
Àn
 - 
˛í
 - 1;

617 
	`¥öãr
(
¨g
, " <");

618 ; 
˛í
 > 0; --clen) {

619 
	`GETCHAR
(
x
, 
p
);

620 
	`¥öãr
(
¨g
, "%.2x", 
x
);

622 
	`¥öãr
(
¨g
, ">,Çame = ");

623 
	`¥öt_°rög
((*)
p
, 
∆í
, 
¥öãr
, 
¨g
);

625 
CHAP_FAILURE
:

626 
CHAP_SUCCESS
:

627 
	`¥öãr
(
¨g
, " ");

628 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

631 
˛í
 = 
Àn
; clen > 0; --clen) {

632 
	`GETCHAR
(
x
, 
p
);

633 
	`¥öãr
(
¨g
, " %.2x", 
x
);

637  
Àn
 + 
CHAP_HDRLEN
;

638 
	}
}

640 
¥Ÿít
 
	gch≠_¥Ÿít
 = {

641 
PPP_CHAP
,

642 
ch≠_öô
,

643 
ch≠_öput
,

644 
ch≠_¥Ÿªj
,

645 
ch≠_lowîup
,

646 
ch≠_lowîdown
,

647 
NULL
,

648 
NULL
,

649 
ch≠_¥öt_pkt
,

650 
NULL
,

653 
NULL
,

654 
ch≠_›ti⁄_li°
,

655 
NULL
,

	@pppd/chap-new.h

34 
	#CHAP_HDRLEN
 4

	)

39 
	#CHAP_CHALLENGE
 1

	)

40 
	#CHAP_RESPONSE
 2

	)

41 
	#CHAP_SUCCESS
 3

	)

42 
	#CHAP_FAILURE
 4

	)

47 
	#CHAP_MD5
 5

	)

48 
	#CHAP_MICROSOFT
 0x80

	)

49 
	#CHAP_MICROSOFT_V2
 0x81

	)

54 
	#MAX_CHALLENGE_LEN
 64

	)

55 
	#MAX_RESPONSE_LEN
 64

	)

58 
	#MDTYPE_MICROSOFT_V2
 0x1

	)

59 
	#MDTYPE_MICROSOFT
 0x2

	)

60 
	#MDTYPE_MD5
 0x4

	)

61 
	#MDTYPE_NONE
 0

	)

64 
ch≠_mdty≥_Æl
;

67 
	#CHAP_DIGEST
(
mdty≥
) \

68 ((
mdty≥
Ë& 
MDTYPE_MD5
)? 
CHAP_MD5
: \

69 ((
mdty≥
Ë& 
MDTYPE_MICROSOFT_V2
)? 
CHAP_MICROSOFT_V2
: \

70 ((
mdty≥
Ë& 
MDTYPE_MICROSOFT
)? 
CHAP_MICROSOFT
: \

71 0

	)

74 
	#CHAP_MDTYPE
(
mdty≥
Ë((mdty≥Ë^ ((mdty≥Ë- 1)Ë& (mdty≥)

	)

77 
	#CHAP_MDTYPE_D
(
dige°
) \

78 ((
dige°
Ë=
CHAP_MICROSOFT_V2
)? 
MDTYPE_MICROSOFT_V2
: \

79 ((
dige°
Ë=
CHAP_MICROSOFT
)? 
MDTYPE_MICROSOFT
: \

80 ((
dige°
Ë=
CHAP_MD5
)? 
MDTYPE_MD5
: \

81 0

	)

84 
	#CHAP_CANDIGEST
(
mdty≥
, 
dige°
) \

85 ((
dige°
Ë=
CHAP_MICROSOFT_V2
)? (
mdty≥
Ë& 
MDTYPE_MICROSOFT_V2
: \

86 ((
dige°
Ë=
CHAP_MICROSOFT
)? (
mdty≥
Ë& 
MDTYPE_MICROSOFT
: \

87 ((
dige°
Ë=
CHAP_MD5
)? (
mdty≥
Ë& 
MDTYPE_MD5
: \

88 0

	)

93 
	sch≠_dige°_ty≥
 {

94 
	mcode
;

100 (*
	mgíî©e_chÆÀnge
)(*
	mchÆÀnge
);

101 (*
	mvîify_ª•⁄£
)(
	mid
, *
	m«me
,

102 *
	m£¸ë
, 
	m£¸ë_Àn
,

103 *
	mchÆÀnge
, *
	mª•⁄£
,

104 *
	mmesßge
, 
	mmesßge_•a˚
);

105 (*
	mmake_ª•⁄£
)(*
	mª•⁄£
, 
	mid
, *
	mour_«me
,

106 *
	mchÆÀnge
, *
	m£¸ë
, 
	m£¸ë_Àn
,

107 *
	m¥iv
);

108 (*
	mcheck_suc˚ss
)(
	mid
, *
	mpkt
, 
	mÀn
);

109 (*
	mh™dÀ_Áûuª
)(*
	mpkt
, 
	mÀn
);

111 
ch≠_dige°_ty≥
 *
	m√xt
;

115 (*
ch≠_vîify_hook
)(*
«me
, *
ou∫ame
, 
id
,

116 
ch≠_dige°_ty≥
 *
dige°
,

117 *
chÆÀnge
, *
ª•⁄£
,

118 *
mesßge
, 
mesßge_•a˚
);

121 
	`ch≠_ªgi°î_dige°
(
ch≠_dige°_ty≥
 *);

124 
	`ch≠_auth_≥î
(
unô
, *
our_«me
, 
dige°_code
);

127 
	`ch≠_auth_wôh_≥î
(
unô
, *
our_«me
, 
dige°_code
);

130 
¥Ÿít
 
ch≠_¥Ÿít
;

	@pppd/chap_ms.c

77 
	#RCSID
 "$Id: ch≠_ms.c,v 1.38 2007/12/01 20:10:51 c¨ls⁄j Ex∞$"

	)

79 #ifde‡
CHAPMS


81 
	~<°dio.h
>

82 
	~<°dlib.h
>

83 
	~<°rög.h
>

84 
	~<˘y≥.h
>

85 
	~<sys/ty≥s.h
>

86 
	~<sys/time.h
>

87 
	~<uni°d.h
>

89 
	~"µpd.h
"

90 
	~"ch≠-√w.h
"

91 
	~"ch≠_ms.h
"

92 
	~"md4.h
"

93 
	~"sha1.h
"

94 
	~"µp¸y±.h
"

95 
	~"magic.h
"

99 
ascii2unicode
 
__P
(([], , 
u_ch¨
[]));

100 
NTPassw‹dHash
 
__P
((
u_ch¨
 *, , u_ch¨[
MD4_SIGNATURE_SIZE
]));

101 
ChÆÀngeRe•⁄£
 
__P
((
u_ch¨
 *, u_char *, u_char[24]));

102 
Ch≠MS_NT
 
__P
((
u_ch¨
 *, *, , u_char[24]));

103 
Ch≠MS2_NT
 
__P
((
u_ch¨
 *, u_char[16], *, *, ,

104 
u_ch¨
[24]));

105 
Gíî©eAuthítiˇt‹Re•⁄£Pœö


106 
__P
((*, , 
u_ch¨
[24], u_char[16], u_char *,

107 *, 
u_ch¨
[41]));

108 #ifde‡
MSLANMAN


109 
Ch≠MS_LANM™
 
__P
((
u_ch¨
 *, *, , u_char *));

112 #ifde‡
MPPE


113 
Së_Sèπ_Key
 
__P
((
u_ch¨
 *, *, ));

114 
SëMa°îKeys
 
__P
((*, , 
u_ch¨
[24], ));

117 #ifde‡
MSLANMAN


118 
boﬁ
 
	gms_œnm™
 = 0;

122 #ifde‡
MPPE


123 
u_ch¨
 
	gmµe_£nd_key
[
MPPE_MAX_KEY_LEN
];

124 
u_ch¨
 
	gmµe_ªcv_key
[
MPPE_MAX_KEY_LEN
];

125 
	gmµe_keys_£t
 = 0;

127 #ifde‡
DEBUGMPPEKEY


130 *
	gmsch≠_chÆÀnge
 = 
NULL
;

132 *
	gmsch≠2_≥î_chÆÀnge
 = 
NULL
;

135 
	~"fsm.h
"

136 
	~"c˝.h
"

137 
	~<√t/µp-comp.h
>

143 
›ti⁄_t
 
	gch≠ms_›ti⁄_li°
[] = {

144 #ifde‡
MSLANMAN


145 { "ms-œnm™", 
o_boﬁ
, &
ms_œnm™
,

148 #ifde‡
DEBUGMPPEKEY


149 { "msch≠-chÆÀnge", 
o_°rög
, &
msch≠_chÆÀnge
,

151 { "msch≠2-≥î-chÆÀnge", 
o_°rög
, &
msch≠2_≥î_chÆÀnge
,

154 { 
NULL
 }

164 
	$ch≠ms_gíî©e_chÆÀnge
(*
chÆÀnge
)

166 *
chÆÀnge
++ = 8;

167 #ifde‡
DEBUGMPPEKEY


168 i‡(
msch≠_chÆÀnge
 && 
	`°æí
(mschap_challenge) == 8)

169 
	`mem˝y
(
chÆÀnge
, 
msch≠_chÆÀnge
, 8);

172 
	`øndom_byãs
(
chÆÀnge
, 8);

173 
	}
}

176 
	$ch≠ms2_gíî©e_chÆÀnge
(*
chÆÀnge
)

178 *
chÆÀnge
++ = 16;

179 #ifde‡
DEBUGMPPEKEY


180 i‡(
msch≠_chÆÀnge
 && 
	`°æí
(mschap_challenge) == 16)

181 
	`mem˝y
(
chÆÀnge
, 
msch≠_chÆÀnge
, 16);

184 
	`øndom_byãs
(
chÆÀnge
, 16);

185 
	}
}

188 
	$ch≠ms_vîify_ª•⁄£
(
id
, *
«me
,

189 *
£¸ë
, 
£¸ë_Àn
,

190 *
chÆÀnge
, *
ª•⁄£
,

191 *
mesßge
, 
mesßge_•a˚
)

193 
md
[
MS_CHAP_RESPONSE_LEN
];

194 
diff
;

195 
chÆÀnge_Àn
, 
ª•⁄£_Àn
;

197 
chÆÀnge_Àn
 = *
chÆÀnge
++;

198 
ª•⁄£_Àn
 = *
ª•⁄£
++;

199 i‡(
ª•⁄£_Àn
 !
MS_CHAP_RESPONSE_LEN
)

200 
bad
;

202 #i‚de‡
MSLANMAN


203 i‡(!
ª•⁄£
[
MS_CHAP_USENT
]) {

205 
	`nŸi˚
("PeerÑequest for LANMANáuthÇot supported");

206 
bad
;

211 
	`Ch≠MS
(
chÆÀnge
, (*)
£¸ë
, 
£¸ë_Àn
, 
md
);

213 #ifde‡
MSLANMAN


215 i‡(!
ª•⁄£
[
MS_CHAP_USENT
])

216 
diff
 = 
	`memcmp
(&
ª•⁄£
[
MS_CHAP_LANMANRESP
],

217 &
md
[
MS_CHAP_LANMANRESP
], 
MS_CHAP_LANMANRESP_LEN
);

220 
diff
 = 
	`memcmp
(&
ª•⁄£
[
MS_CHAP_NTRESP
], &
md
[MS_CHAP_NTRESP],

221 
MS_CHAP_NTRESP_LEN
);

223 i‡(
diff
 == 0) {

224 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "Access granted");

228 
bad
:

230 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "E=691 R=1 C=%0.*B V=0",

231 
chÆÀnge_Àn
, 
chÆÀnge
);

233 
	}
}

236 
	$ch≠ms2_vîify_ª•⁄£
(
id
, *
«me
,

237 *
£¸ë
, 
£¸ë_Àn
,

238 *
chÆÀnge
, *
ª•⁄£
,

239 *
mesßge
, 
mesßge_•a˚
)

241 
md
[
MS_CHAP2_RESPONSE_LEN
];

242 
ßª•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1];

243 
chÆÀnge_Àn
, 
ª•⁄£_Àn
;

245 
chÆÀnge_Àn
 = *
chÆÀnge
++;

246 
ª•⁄£_Àn
 = *
ª•⁄£
++;

247 i‡(
ª•⁄£_Àn
 !
MS_CHAP2_RESPONSE_LEN
)

248 
bad
;

251 
	`Ch≠MS2
(
chÆÀnge
, &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
], 
«me
,

252 (*)
£¸ë
, 
£¸ë_Àn
, 
md
,

253 (*)
ßª•⁄£
, 
MS_CHAP2_AUTHENTICATOR
);

275 i‡(
	`memcmp
(&
md
[
MS_CHAP2_NTRESP
], &
ª•⁄£
[MS_CHAP2_NTRESP],

276 
MS_CHAP2_NTRESP_LEN
) == 0) {

277 i‡(
ª•⁄£
[
MS_CHAP2_FLAGS
])

278 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "S=%s", 
ßª•⁄£
);

280 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "S=%s M=%s",

281 
ßª•⁄£
, "Access granted");

285 
bad
:

307 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "E=691 R=1 C=%0.*B V=0 M=%s",

308 
chÆÀnge_Àn
, 
chÆÀnge
, "Access denied");

310 
	}
}

313 
	$ch≠ms_make_ª•⁄£
(*
ª•⁄£
, 
id
, *
our_«me
,

314 *
chÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

315 *
¥iv©e
)

317 
chÆÀnge
++;

318 *
ª•⁄£
++ = 
MS_CHAP_RESPONSE_LEN
;

319 
	`Ch≠MS
(
chÆÀnge
, 
£¸ë
, 
£¸ë_Àn
, 
ª•⁄£
);

320 
	}
}

322 
	sch≠ms2_ª•⁄£_ˇche_íåy
 {

323 
	mid
;

324 
	mchÆÀnge
[16];

325 
	mª•⁄£
[
MS_CHAP2_RESPONSE_LEN
];

326 
	mauth_ª•⁄£
[
MS_AUTH_RESPONSE_LENGTH
];

329 
	#CHAPMS2_MAX_RESPONSE_CACHE_SIZE
 10

	)

330 
ch≠ms2_ª•⁄£_ˇche_íåy


331 
	gch≠ms2_ª•⁄£_ˇche
[
CHAPMS2_MAX_RESPONSE_CACHE_SIZE
];

332 
	gch≠ms2_ª•⁄£_ˇche_√xt_ödex
 = 0;

333 
	gch≠ms2_ª•⁄£_ˇche_size
 = 0;

336 
	$ch≠ms2_add_to_ª•⁄£_ˇche
(
id
, *
chÆÀnge
,

337 *
ª•⁄£
,

338 *
auth_ª•⁄£
)

340 
i
 = 
ch≠ms2_ª•⁄£_ˇche_√xt_ödex
;

342 
ch≠ms2_ª•⁄£_ˇche
[
i
].
id
 = id;

343 
	`mem˝y
(
ch≠ms2_ª•⁄£_ˇche
[
i
].
chÆÀnge
, challenge, 16);

344 
	`mem˝y
(
ch≠ms2_ª•⁄£_ˇche
[
i
].
ª•⁄£
,Ñesponse,

345 
MS_CHAP2_RESPONSE_LEN
);

346 
	`mem˝y
(
ch≠ms2_ª•⁄£_ˇche
[
i
].
auth_ª•⁄£
,

347 
auth_ª•⁄£
, 
MS_AUTH_RESPONSE_LENGTH
);

348 
ch≠ms2_ª•⁄£_ˇche_√xt_ödex
 =

349 (
i
 + 1Ë% 
CHAPMS2_MAX_RESPONSE_CACHE_SIZE
;

350 i‡(
ch≠ms2_ª•⁄£_ˇche_√xt_ödex
 > 
ch≠ms2_ª•⁄£_ˇche_size
)

351 
ch≠ms2_ª•⁄£_ˇche_size
 = 
ch≠ms2_ª•⁄£_ˇche_√xt_ödex
;

352 
	`dbglog
("addedÑe•⁄£ cachêíåy %d", 
i
);

353 
	}
}

355 
ch≠ms2_ª•⁄£_ˇche_íåy
*

356 
	$ch≠ms2_föd_ö_ª•⁄£_ˇche
(
id
, *
chÆÀnge
,

357 *
auth_ª•⁄£
)

359 
i
;

361 
i
 = 0; i < 
ch≠ms2_ª•⁄£_ˇche_size
; i++) {

362 i‡(
id
 =
ch≠ms2_ª•⁄£_ˇche
[
i
].id

363 && (!
chÆÀnge


364 || 
	`memcmp
(
chÆÀnge
,

365 
ch≠ms2_ª•⁄£_ˇche
[
i
].
chÆÀnge
,

367 && (!
auth_ª•⁄£


368 || 
	`memcmp
(
auth_ª•⁄£
,

369 
ch≠ms2_ª•⁄£_ˇche
[
i
].
auth_ª•⁄£
,

370 
MS_AUTH_RESPONSE_LENGTH
) == 0)) {

371 
	`dbglog
("ª•⁄£ found i¿ˇchê”¡ry %d)", 
i
);

372  &
ch≠ms2_ª•⁄£_ˇche
[
i
];

375  
NULL
;

376 
	}
}

379 
	$ch≠ms2_make_ª•⁄£
(*
ª•⁄£
, 
id
, *
our_«me
,

380 *
chÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

381 *
¥iv©e
)

383 c⁄° 
ch≠ms2_ª•⁄£_ˇche_íåy
 *
ˇche_íåy
;

384 
auth_ª•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1];

386 
chÆÀnge
++;

387 *
ª•⁄£
++ = 
MS_CHAP2_RESPONSE_LEN
;

388 
ˇche_íåy
 = 
	`ch≠ms2_föd_ö_ª•⁄£_ˇche
(
id
, 
chÆÀnge
, 
NULL
);

389 i‡(
ˇche_íåy
) {

390 
	`mem˝y
(
ª•⁄£
, 
ˇche_íåy
->ª•⁄£, 
MS_CHAP2_RESPONSE_LEN
);

393 
	`Ch≠MS2
(
chÆÀnge
,

394 #ifde‡
DEBUGMPPEKEY


395 
msch≠2_≥î_chÆÀnge
,

397 
NULL
,

399 
our_«me
, 
£¸ë
, 
£¸ë_Àn
, 
ª•⁄£
, 
auth_ª•⁄£
,

400 
MS_CHAP2_AUTHENTICATEE
);

401 
	`ch≠ms2_add_to_ª•⁄£_ˇche
(
id
, 
chÆÀnge
, 
ª•⁄£
, 
auth_ª•⁄£
);

402 
	}
}

405 
	$ch≠ms2_check_suc˚ss
(
id
, *
msg
, 
Àn
)

407 i‡((
Àn
 < 
MS_AUTH_RESPONSE_LENGTH
 + 2) ||

408 
	`°∫cmp
((*)
msg
, "S=", 2) != 0) {

410 
	`îr‹
("MS-CHAPv2 SuccessÖacket is badly formed.");

413 
msg
 += 2;

414 
Àn
 -= 2;

415 i‡(
Àn
 < 
MS_AUTH_RESPONSE_LENGTH


416 || !
	`ch≠ms2_föd_ö_ª•⁄£_ˇche
(
id
, 
NULL
 , 
msg
)) {

418 
	`îr‹
("MS-CHAPv2 mutualáuthentication failed.");

422 
msg
 +
MS_AUTH_RESPONSE_LENGTH
;

423 
Àn
 -
MS_AUTH_RESPONSE_LENGTH
;

424 i‡((
Àn
 >3Ë&& !
	`°∫cmp
((*)
msg
, " M=", 3)) {

425 
msg
 += 3;

426 } i‡((
Àn
 >2Ë&& !
	`°∫cmp
((*)
msg
, "M=", 2)) {

427 
msg
 += 2;

428 } i‡(
Àn
) {

430 
	`îr‹
("MS-CHAPv2 SuccessÖacket is badly formed.");

434 
	}
}

437 
	$ch≠ms_h™dÀ_Áûuª
(*
öp
, 
Àn
)

439 
îr
;

440 *
p
, *
msg
;

443 
msg
 = 
	`mÆloc
(
Àn
 + 1);

444 i‡(!
msg
) {

445 
	`nŸi˚
("Out of memory in chapms_handle_failure");

448 
	`BCOPY
(
öp
, 
msg
, 
Àn
);

449 
msg
[
Àn
] = 0;

450 
p
 = 
msg
;

458 i‡(!
	`°∫cmp
(
p
, "E=", 2))

459 
îr
 = 
	`°πﬁ
(
p
+2, 
NULL
, 10);

461 
¥öt_msg
;

463 i‡(
Àn
 && ((
p
 = 
	`°r°r
’, " M=")Ë!
NULL
)) {

465 
p
 += 3;

468 
îr
) {

469 
MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS
:

470 
p
 = "E=646 RestrictedÜogon hours";

473 
MS_CHAP_ERROR_ACCT_DISABLED
:

474 
p
 = "E=647 Account disabled";

477 
MS_CHAP_ERROR_PASSWD_EXPIRED
:

478 
p
 = "E=648 PasswordÉxpired";

481 
MS_CHAP_ERROR_NO_DIALIN_PERMISSION
:

482 
p
 = "E=649 No dialinÖermission";

485 
MS_CHAP_ERROR_AUTHENTICATION_FAILURE
:

486 
p
 = "E=691 Authentication failure";

489 
MS_CHAP_ERROR_CHANGING_PASSWORD
:

491 
p
 = "E=709 Error changingÖassword";

495 
	`‰ì
(
msg
);

496 
	`îr‹
("Unknown MS-CHAPáuthentication failure: %.*v",

497 
Àn
, 
öp
);

501 
¥öt_msg
:

502 i‡(
p
 !
NULL
)

503 
	`îr‹
("MS-CHAPáuthítiˇti⁄ faûed: %v", 
p
);

504 
	`‰ì
(
msg
);

505 
	}
}

508 
	$ChÆÀngeRe•⁄£
(
u_ch¨
 *
chÆÀnge
,

509 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
],

510 
u_ch¨
 
ª•⁄£
[24])

512 
u_ch¨
 
ZPassw‹dHash
[21];

514 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

515 
	`BCOPY
(
Passw‹dHash
, 
ZPassw‹dHash
, 
MD4_SIGNATURE_SIZE
);

518 
	`dbglog
("ChallengeResponse - ZPasswordHash %.*B",

519 (
ZPassw‹dHash
), ZPasswordHash);

522 (Ë
	`DesSëkey
(
ZPassw‹dHash
 + 0);

523 
	`DesEn¸y±
(
chÆÀnge
, 
ª•⁄£
 + 0);

524 (Ë
	`DesSëkey
(
ZPassw‹dHash
 + 7);

525 
	`DesEn¸y±
(
chÆÀnge
, 
ª•⁄£
 + 8);

526 (Ë
	`DesSëkey
(
ZPassw‹dHash
 + 14);

527 
	`DesEn¸y±
(
chÆÀnge
, 
ª•⁄£
 + 16);

530 
	`dbglog
("ChÆÀngeRe•⁄£ -Ñe•⁄£ %.24B", 
ª•⁄£
);

532 
	}
}

535 
	$ChÆÀngeHash
(
u_ch¨
 
PìrChÆÀnge
[16], u_ch¨ *
rchÆÀnge
,

536 *
u£∫ame
, 
u_ch¨
 
ChÆÀnge
[8])

539 
SHA1_CTX
 
sha1C⁄ãxt
;

540 
u_ch¨
 
sha1Hash
[
SHA1_SIGNATURE_SIZE
];

541 *
u£r
;

544 i‡((
u£r
 = 
	`°ºchr
(
u£∫ame
, '\\')Ë!
NULL
)

545 ++
u£r
;

547 
u£r
 = 
u£∫ame
;

549 
	`SHA1_Inô
(&
sha1C⁄ãxt
);

550 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
PìrChÆÀnge
, 16);

551 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
rchÆÀnge
, 16);

552 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, (*)
u£r
, 
	`°æí
(user));

553 
	`SHA1_FöÆ
(
sha1Hash
, &
sha1C⁄ãxt
);

555 
	`BCOPY
(
sha1Hash
, 
ChÆÀnge
, 8);

556 
	}
}

566 
	$ascii2unicode
(
ascii
[], 
ascii_Àn
, 
u_ch¨
 
unicode
[])

568 
i
;

570 
	`BZERO
(
unicode
, 
ascii_Àn
 * 2);

571 
i
 = 0; i < 
ascii_Àn
; i++)

572 
unicode
[
i
 * 2] = (
u_ch¨
Ë
ascii
[i];

573 
	}
}

576 
	$NTPassw‹dHash
(
u_ch¨
 *
£¸ë
, 
£¸ë_Àn
, u_ch¨ 
hash
[
MD4_SIGNATURE_SIZE
])

578 #ifde‡
__NëBSD__


580 
mdÀn
 = 
£¸ë_Àn
;

582 
mdÀn
 = 
£¸ë_Àn
 * 8;

584 
MD4_CTX
 
md4C⁄ãxt
;

586 
	`MD4Inô
(&
md4C⁄ãxt
);

588 
mdÀn
 > 512) {

589 
	`MD4Upd©e
(&
md4C⁄ãxt
, 
£¸ë
, 512);

590 
£¸ë
 += 64;

591 
mdÀn
 -= 512;

593 
	`MD4Upd©e
(&
md4C⁄ãxt
, 
£¸ë
, 
mdÀn
);

594 
	`MD4FöÆ
(
hash
, &
md4C⁄ãxt
);

596 
	}
}

599 
	$Ch≠MS_NT
(
u_ch¨
 *
rchÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

600 
u_ch¨
 
NTRe•⁄£
[24])

602 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

603 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
];

606 
	`ascii2unicode
(
£¸ë
, 
£¸ë_Àn
, 
unicodePassw‹d
);

607 
	`NTPassw‹dHash
(
unicodePassw‹d
, 
£¸ë_Àn
 * 2, 
Passw‹dHash
);

609 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
NTRe•⁄£
);

610 
	}
}

613 
	$Ch≠MS2_NT
(
u_ch¨
 *
rchÆÀnge
, u_ch¨ 
PìrChÆÀnge
[16], *
u£∫ame
,

614 *
£¸ë
, 
£¸ë_Àn
, 
u_ch¨
 
NTRe•⁄£
[24])

616 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

617 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
];

618 
u_ch¨
 
ChÆÀnge
[8];

620 
	`ChÆÀngeHash
(
PìrChÆÀnge
, 
rchÆÀnge
, 
u£∫ame
, 
ChÆÀnge
);

623 
	`ascii2unicode
(
£¸ë
, 
£¸ë_Àn
, 
unicodePassw‹d
);

624 
	`NTPassw‹dHash
(
unicodePassw‹d
, 
£¸ë_Àn
 * 2, 
Passw‹dHash
);

626 
	`ChÆÀngeRe•⁄£
(
ChÆÀnge
, 
Passw‹dHash
, 
NTRe•⁄£
);

627 
	}
}

629 #ifde‡
MSLANMAN


630 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

633 
	$Ch≠MS_LANM™
(
u_ch¨
 *
rchÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

634 *
ª•⁄£
)

636 
i
;

637 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

638 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
];

641 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

642 
i
 = 0; i < 
£¸ë_Àn
; i++)

643 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

644 (Ë
	`DesSëkey
(
Uˇ£Passw‹d
 + 0);

645 
	`DesEn¸y±
–
StdText
, 
Passw‹dHash
 + 0 );

646 (Ë
	`DesSëkey
(
Uˇ£Passw‹d
 + 7);

647 
	`DesEn¸y±
–
StdText
, 
Passw‹dHash
 + 8 );

648 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, &
ª•⁄£
[
MS_CHAP_LANMANRESP
]);

649 
	}
}

654 
Gíî©eAuthítiˇt‹Re•⁄£
(
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
],

655 
u_ch¨
 
NTRe•⁄£
[24], u_ch¨ 
PìrChÆÀnge
[16],

656 
u_ch¨
 *
rchÆÀnge
, *
u£∫ame
,

657 
u_ch¨
 
authRe•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1])

662 
u_ch¨
 
	gMagic1
[39] =

667 
u_ch¨
 
	gMagic2
[41] =

674 
	gi
;

675 
SHA1_CTX
 
	gsha1C⁄ãxt
;

676 
u_ch¨
 
	gDige°
[
SHA1_SIGNATURE_SIZE
];

677 
u_ch¨
 
	gChÆÀnge
[8];

679 
SHA1_Inô
(&
sha1C⁄ãxt
);

680 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Passw‹dHashHash
, 
MD4_SIGNATURE_SIZE
);

681 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
NTRe•⁄£
, 24);

682 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Magic1
, (Magic1));

683 
SHA1_FöÆ
(
Dige°
, &
sha1C⁄ãxt
);

685 
ChÆÀngeHash
(
PìrChÆÀnge
, 
rchÆÀnge
, 
u£∫ame
, 
ChÆÀnge
);

687 
SHA1_Inô
(&
sha1C⁄ãxt
);

688 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Dige°
, (Digest));

689 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
ChÆÀnge
, (Challenge));

690 
SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Magic2
, (Magic2));

691 
SHA1_FöÆ
(
Dige°
, &
sha1C⁄ãxt
);

694 
	gi
 = 0; i < 
MAX
((
MS_AUTH_RESPONSE_LENGTH
 / 2), (
Dige°
)); i++)

695 
•rötf
((*)&
authRe•⁄£
[
i
 * 2], "%02X", 
Dige°
[i]);

700 
	gGíî©eAuthítiˇt‹Re•⁄£Pœö


701 (*
	g£¸ë
, 
	g£¸ë_Àn
,

702 
u_ch¨
 
	gNTRe•⁄£
[24], u_ch¨ 
	gPìrChÆÀnge
[16],

703 
u_ch¨
 *
	grchÆÀnge
, *
	gu£∫ame
,

704 
u_ch¨
 
	gauthRe•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1])

706 
u_ch¨
 
	gunicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

707 
u_ch¨
 
	gPassw‹dHash
[
MD4_SIGNATURE_SIZE
];

708 
u_ch¨
 
	gPassw‹dHashHash
[
MD4_SIGNATURE_SIZE
];

711 
ascii2unicode
(
£¸ë
, 
£¸ë_Àn
, 
unicodePassw‹d
);

712 
NTPassw‹dHash
(
unicodePassw‹d
, 
£¸ë_Àn
 * 2, 
Passw‹dHash
);

713 
NTPassw‹dHash
(
Passw‹dHash
, (PasswordHash),

714 
Passw‹dHashHash
);

716 
Gíî©eAuthítiˇt‹Re•⁄£
(
Passw‹dHashHash
, 
NTRe•⁄£
, 
PìrChÆÀnge
,

717 
rchÆÀnge
, 
u£∫ame
, 
authRe•⁄£
);

721 #ifde‡
MPPE


727 
	$mµe_£t_keys
(
u_ch¨
 *
rchÆÀnge
, u_ch¨ 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
])

729 
SHA1_CTX
 
sha1C⁄ãxt
;

730 
u_ch¨
 
Dige°
[
SHA1_SIGNATURE_SIZE
];

732 
	`SHA1_Inô
(&
sha1C⁄ãxt
);

733 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Passw‹dHashHash
, 
MD4_SIGNATURE_SIZE
);

734 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Passw‹dHashHash
, 
MD4_SIGNATURE_SIZE
);

735 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
rchÆÀnge
, 8);

736 
	`SHA1_FöÆ
(
Dige°
, &
sha1C⁄ãxt
);

739 
	`BCOPY
(
Dige°
, 
mµe_£nd_key
, (mppe_send_key));

740 
	`BCOPY
(
Dige°
, 
mµe_ªcv_key
, (mppe_recv_key));

742 
mµe_keys_£t
 = 1;

743 
	}
}

749 
	$Së_Sèπ_Key
(
u_ch¨
 *
rchÆÀnge
, *
£¸ë
, 
£¸ë_Àn
)

751 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

752 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
];

753 
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
];

756 
	`ascii2unicode
(
£¸ë
, 
£¸ë_Àn
, 
unicodePassw‹d
);

757 
	`NTPassw‹dHash
(
unicodePassw‹d
, 
£¸ë_Àn
 * 2, 
Passw‹dHash
);

758 
	`NTPassw‹dHash
(
Passw‹dHash
, (Passw‹dHash), 
Passw‹dHashHash
);

760 
	`mµe_£t_keys
(
rchÆÀnge
, 
Passw‹dHashHash
);

761 
	}
}

770 
	$mµe_£t_keys2
(
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
],

771 
u_ch¨
 
NTRe•⁄£
[24], 
IsSîvî
)

773 
SHA1_CTX
 
sha1C⁄ãxt
;

774 
u_ch¨
 
Ma°îKey
[
SHA1_SIGNATURE_SIZE
];

775 
u_ch¨
 
Dige°
[
SHA1_SIGNATURE_SIZE
];

777 
u_ch¨
 
SHA∑d1
[40] =

782 
u_ch¨
 
SHA∑d2
[40] =

789 
u_ch¨
 
Magic1
[27] =

795 
u_ch¨
 
Magic2
[84] =

807 
u_ch¨
 
Magic3
[84] =

817 
u_ch¨
 *
s
;

819 
	`SHA1_Inô
(&
sha1C⁄ãxt
);

820 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Passw‹dHashHash
, 
MD4_SIGNATURE_SIZE
);

821 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
NTRe•⁄£
, 24);

822 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Magic1
, (Magic1));

823 
	`SHA1_FöÆ
(
Ma°îKey
, &
sha1C⁄ãxt
);

828 i‡(
IsSîvî
)

829 
s
 = 
Magic3
;

831 
s
 = 
Magic2
;

832 
	`SHA1_Inô
(&
sha1C⁄ãxt
);

833 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Ma°îKey
, 16);

834 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
SHA∑d1
, (SHApad1));

835 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
s
, 84);

836 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
SHA∑d2
, (SHApad2));

837 
	`SHA1_FöÆ
(
Dige°
, &
sha1C⁄ãxt
);

839 
	`BCOPY
(
Dige°
, 
mµe_£nd_key
, (mppe_send_key));

844 i‡(
IsSîvî
)

845 
s
 = 
Magic2
;

847 
s
 = 
Magic3
;

848 
	`SHA1_Inô
(&
sha1C⁄ãxt
);

849 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
Ma°îKey
, 16);

850 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
SHA∑d1
, (SHApad1));

851 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
s
, 84);

852 
	`SHA1_Upd©e
(&
sha1C⁄ãxt
, 
SHA∑d2
, (SHApad2));

853 
	`SHA1_FöÆ
(
Dige°
, &
sha1C⁄ãxt
);

855 
	`BCOPY
(
Dige°
, 
mµe_ªcv_key
, (mppe_recv_key));

857 
mµe_keys_£t
 = 1;

858 
	}
}

864 
	$SëMa°îKeys
(*
£¸ë
, 
£¸ë_Àn
, 
u_ch¨
 
NTRe•⁄£
[24], 
IsSîvî
)

866 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

867 
u_ch¨
 
Passw‹dHash
[
MD4_SIGNATURE_SIZE
];

868 
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
];

870 
	`ascii2unicode
(
£¸ë
, 
£¸ë_Àn
, 
unicodePassw‹d
);

871 
	`NTPassw‹dHash
(
unicodePassw‹d
, 
£¸ë_Àn
 * 2, 
Passw‹dHash
);

872 
	`NTPassw‹dHash
(
Passw‹dHash
, (Passw‹dHash), 
Passw‹dHashHash
);

873 
	`mµe_£t_keys2
(
Passw‹dHashHash
, 
NTRe•⁄£
, 
IsSîvî
);

874 
	}
}

880 
	$Ch≠MS
(
u_ch¨
 *
rchÆÀnge
, *
£¸ë
, 
£¸ë_Àn
,

881 *
ª•⁄£
)

883 
	`BZERO
(
ª•⁄£
, 
MS_CHAP_RESPONSE_LEN
);

885 
	`Ch≠MS_NT
(
rchÆÀnge
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
[
MS_CHAP_NTRESP
]);

887 #ifde‡
MSLANMAN


888 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
£¸ë
, 
£¸ë_Àn
,

889 &
ª•⁄£
[
MS_CHAP_LANMANRESP
]);

892 
ª•⁄£
[
MS_CHAP_USENT
] = !
ms_œnm™
;

894 
ª•⁄£
[
MS_CHAP_USENT
] = 1;

897 #ifde‡
MPPE


898 
	`Së_Sèπ_Key
(
rchÆÀnge
, 
£¸ë
, 
£¸ë_Àn
);

900 
	}
}

914 
	$Ch≠MS2
(
u_ch¨
 *
rchÆÀnge
, u_ch¨ *
PìrChÆÀnge
,

915 *
u£r
, *
£¸ë
, 
£¸ë_Àn
, *
ª•⁄£
,

916 
u_ch¨
 
authRe•⁄£
[], 
authítiˇt‹
)

919 
u_ch¨
 *
p
 = &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
];

920 
i
;

922 
	`BZERO
(
ª•⁄£
, 
MS_CHAP2_RESPONSE_LEN
);

925 i‡(!
PìrChÆÀnge
)

926 
i
 = 0; i < 
MS_CHAP2_PEER_CHAL_LEN
; i++)

927 *
p
++ = (
u_ch¨
Ë(
	`dønd48
() * 0xff);

929 
	`BCOPY
(
PìrChÆÀnge
, &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
],

930 
MS_CHAP2_PEER_CHAL_LEN
);

933 
	`Ch≠MS2_NT
(
rchÆÀnge
, &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
], 
u£r
,

934 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
[
MS_CHAP2_NTRESP
]);

937 
	`Gíî©eAuthítiˇt‹Re•⁄£Pœö
(
£¸ë
, 
£¸ë_Àn
,

938 &
ª•⁄£
[
MS_CHAP2_NTRESP
],

939 &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
],

940 
rchÆÀnge
, 
u£r
, 
authRe•⁄£
);

942 #ifde‡
MPPE


943 
	`SëMa°îKeys
(
£¸ë
, 
£¸ë_Àn
,

944 &
ª•⁄£
[
MS_CHAP2_NTRESP
], 
authítiˇt‹
);

946 
	}
}

948 #ifde‡
MPPE


953 
	$£t_mµe_íc_ty≥s
(
pﬁicy
, 
ty≥s
)

956 i‡(
pﬁicy
 !
MPPE_ENC_POL_ENC_ALLOWED
 ||

957 
pﬁicy
 !
MPPE_ENC_POL_ENC_REQUIRED
)

961 i‡(
pﬁicy
 =
MPPE_ENC_POL_ENC_ALLOWED
 && !
c˝_w™t›ti⁄s
[0].
mµe
)

968 
ty≥s
) {

969 
MPPE_ENC_TYPES_RC4_40
:

970 
c˝_w™t›ti⁄s
[0].
mµe
 &~
MPPE_OPT_128
;

972 
MPPE_ENC_TYPES_RC4_128
:

973 
c˝_w™t›ti⁄s
[0].
mµe
 &~
MPPE_OPT_40
;

978 
	}
}

981 
ch≠_dige°_ty≥
 
	gch≠ms_dige°
 = {

982 
CHAP_MICROSOFT
,

983 
ch≠ms_gíî©e_chÆÀnge
,

984 
ch≠ms_vîify_ª•⁄£
,

985 
ch≠ms_make_ª•⁄£
,

986 
NULL
,

987 
ch≠ms_h™dÀ_Áûuª
,

990 
ch≠_dige°_ty≥
 
	gch≠ms2_dige°
 = {

991 
CHAP_MICROSOFT_V2
,

992 
ch≠ms2_gíî©e_chÆÀnge
,

993 
ch≠ms2_vîify_ª•⁄£
,

994 
ch≠ms2_make_ª•⁄£
,

995 
ch≠ms2_check_suc˚ss
,

996 
ch≠ms_h™dÀ_Áûuª
,

1000 
	$ch≠ms_öô
()

1002 
	`ch≠_ªgi°î_dige°
(&
ch≠ms_dige°
);

1003 
	`ch≠_ªgi°î_dige°
(&
ch≠ms2_dige°
);

1004 
	`add_›ti⁄s
(
ch≠ms_›ti⁄_li°
);

1005 
	}
}

	@pppd/chap_ms.h

33 #i‚de‡
__CHAPMS_INCLUDE__


35 
	#MD4_SIGNATURE_SIZE
 16

	)

36 
	#MAX_NT_PASSWORD
 256

	)

38 
	#MS_CHAP_RESPONSE_LEN
 49

	)

39 
	#MS_CHAP2_RESPONSE_LEN
 49

	)

40 
	#MS_AUTH_RESPONSE_LENGTH
 40

	)

44 
	#MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS
 646

	)

45 
	#MS_CHAP_ERROR_ACCT_DISABLED
 647

	)

46 
	#MS_CHAP_ERROR_PASSWD_EXPIRED
 648

	)

47 
	#MS_CHAP_ERROR_NO_DIALIN_PERMISSION
 649

	)

48 
	#MS_CHAP_ERROR_AUTHENTICATION_FAILURE
 691

	)

49 
	#MS_CHAP_ERROR_CHANGING_PASSWORD
 709

	)

54 
	#MS_CHAP_LANMANRESP
 0

	)

55 
	#MS_CHAP_LANMANRESP_LEN
 24

	)

56 
	#MS_CHAP_NTRESP
 24

	)

57 
	#MS_CHAP_NTRESP_LEN
 24

	)

58 
	#MS_CHAP_USENT
 48

	)

63 
	#MS_CHAP2_PEER_CHALLENGE
 0

	)

64 
	#MS_CHAP2_PEER_CHAL_LEN
 16

	)

65 
	#MS_CHAP2_RESERVED_LEN
 8

	)

66 
	#MS_CHAP2_NTRESP
 24

	)

67 
	#MS_CHAP2_NTRESP_LEN
 24

	)

68 
	#MS_CHAP2_FLAGS
 48

	)

70 #ifde‡
MPPE


71 
	~"mµe.h
"

72 
u_ch¨
 
mµe_£nd_key
[
MPPE_MAX_KEY_LEN
];

73 
u_ch¨
 
mµe_ªcv_key
[
MPPE_MAX_KEY_LEN
];

74 
mµe_keys_£t
;

77 
	#MPPE_ENC_POL_ENC_ALLOWED
 1

	)

78 
	#MPPE_ENC_POL_ENC_REQUIRED
 2

	)

79 
	#MPPE_ENC_TYPES_RC4_40
 2

	)

80 
	#MPPE_ENC_TYPES_RC4_128
 4

	)

83 
£t_mµe_íc_ty≥s
(, );

87 
	#MS_CHAP2_AUTHENTICATEE
 0

	)

88 
	#MS_CHAP2_AUTHENTICATOR
 1

	)

90 
Ch≠MS
 
__P
((
u_ch¨
 *, *, , u_char *));

91 
Ch≠MS2
 
__P
((
u_ch¨
 *, u_char *, *, *, ,

92 
u_ch¨
 *, u_ch¨[
MS_AUTH_RESPONSE_LENGTH
+1], ));

93 #ifde‡
MPPE


94 
mµe_£t_keys
 
__P
((
u_ch¨
 *, u_ch¨[
MD4_SIGNATURE_SIZE
]));

95 
mµe_£t_keys2
(
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
],

96 
u_ch¨
 
NTRe•⁄£
[24], 
IsSîvî
);

99 
ChÆÀngeHash
 
__P
((
u_ch¨
[16], u_char *, *, u_char[8]));

101 
Gíî©eAuthítiˇt‹Re•⁄£
(
u_ch¨
 
Passw‹dHashHash
[
MD4_SIGNATURE_SIZE
],

102 
u_ch¨
 
NTRe•⁄£
[24], u_ch¨ 
PìrChÆÀnge
[16],

103 
u_ch¨
 *
rchÆÀnge
, *
u£∫ame
,

104 
u_ch¨
 
authRe•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1]);

106 
ch≠ms_öô
();

108 
	#__CHAPMS_INCLUDE__


	)

	@pppd/demand.c

31 
	#RCSID
 "$Id: dem™d.c,v 1.20 2005/08/25 12:14:18Öaulu†Ex∞$"

	)

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<√tdb.h
>

39 
	~<sys/∑øm.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/waô.h
>

42 
	~<sys/time.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/sockë.h
>

46 #ifde‡
PPP_FILTER


47 
	~<pˇp-bpf.h
>

50 
	~"µpd.h
"

51 
	~"fsm.h
"

52 
	~"ù˝.h
"

53 
	~"l˝.h
"

56 *
	g‰ame
;

57 
	g‰amñí
;

58 
	g‰amemax
;

59 
	gesˇ≥_Êag
;

60 
	gÊush_Êag
;

61 
	gfcs
;

63 
	s∑ckë
 {

64 
	mÀngth
;

65 
∑ckë
 *
	m√xt
;

66 
	md©a
[1];

69 
∑ckë
 *
	g≥nd_q
;

70 
∑ckë
 *
	g≥nd_qèû
;

72 
a˘ive_∑ckë
 
__P
((*, ));

78 
	$dem™d_c⁄f
()

80 
i
;

81 
¥Ÿít
 *
¥Ÿp
;

85 
‰amemax
 = 
PPP_MRU
;

86 
‰amemax
 +
PPP_HDRLEN
 + 
PPP_FCSLEN
;

87 
‰ame
 = 
	`mÆloc
(
‰amemax
);

88 i‡(
‰ame
 =
NULL
)

89 
	`novm
("demand frame");

90 
‰amñí
 = 0;

91 
≥nd_q
 = 
NULL
;

92 
esˇ≥_Êag
 = 0;

93 
Êush_Êag
 = 0;

94 
fcs
 = 
PPP_INITFCS
;

96 
	`√tif_£t_mtu
(0, 
	`MIN
(
l˝_Ælow›ti⁄s
[0].
mru
, 
PPP_MRU
));

97 i‡(
	`µp_£nd_c⁄fig
(0, 
PPP_MRU
, (
u_öt32_t
) 0, 0, 0) < 0

98 || 
	`µp_ªcv_c⁄fig
(0, 
PPP_MRU
, (
u_öt32_t
) 0, 0, 0) < 0)

99 
	`Áèl
("Couldn't set up demand-dialled PPP interface: %m");

101 #ifde‡
PPP_FILTER


102 
	`£t_fûãrs
(&
∑ss_fûãr
, &
a˘ive_fûãr
);

108 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

109 i‡(
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
dem™d_c⁄f
 !
NULL
)

110 i‡(!((*
¥Ÿp
->
dem™d_c⁄f
)(0)))

111 
	`dõ
(1);

112 
	}
}

119 
	$dem™d_block
()

121 
i
;

122 
¥Ÿít
 *
¥Ÿp
;

124 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

125 i‡(
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
dem™d_c⁄f
 !
NULL
)

126 
	`si‚pmode
(0, 
¥Ÿp
->
¥Ÿocﬁ
 & ~0x8000, 
NPMODE_QUEUE
);

127 
	`gë_lo›_ouçut
();

128 
	}
}

135 
	$dem™d_disˇrd
()

137 
∑ckë
 *
pkt
, *
√xçkt
;

138 
i
;

139 
¥Ÿít
 *
¥Ÿp
;

141 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

142 i‡(
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
dem™d_c⁄f
 !
NULL
)

143 
	`si‚pmode
(0, 
¥Ÿp
->
¥Ÿocﬁ
 & ~0x8000, 
NPMODE_ERROR
);

144 
	`gë_lo›_ouçut
();

147 
pkt
 = 
≥nd_q
;Ökà!
NULL
;Ökà
√xçkt
) {

148 
√xçkt
 = 
pkt
->
√xt
;

149 
	`‰ì
(
pkt
);

151 
≥nd_q
 = 
NULL
;

152 
‰amñí
 = 0;

153 
Êush_Êag
 = 0;

154 
esˇ≥_Êag
 = 0;

155 
fcs
 = 
PPP_INITFCS
;

156 
	}
}

162 
	$dem™d_unblock
()

164 
i
;

165 
¥Ÿít
 *
¥Ÿp
;

167 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

168 i‡(
¥Ÿp
->
íabÀd_Êag
 &&ÖrŸp->
dem™d_c⁄f
 !
NULL
)

169 
	`si‚pmode
(0, 
¥Ÿp
->
¥Ÿocﬁ
 & ~0x8000, 
NPMODE_PASS
);

170 
	}
}

175 
u_sh‹t
 
	gfc°ab
[256] = {

216 
	$lo›_ch¨s
(
p
, 
n
)

217 *
p
;

218 
n
;

220 
c
, 
rv
;

222 
rv
 = 0;

223 ; 
n
 > 0; --n) {

224 
c
 = *
p
++;

225 i‡(
c
 =
PPP_FLAG
) {

226 i‡(!
esˇ≥_Êag
 && !
Êush_Êag


227 && 
‰amñí
 > 2 && 
fcs
 =
PPP_GOODFCS
) {

228 
‰amñí
 -= 2;

229 i‡(
	`lo›_‰ame
((*)
‰ame
, 
‰amñí
))

230 
rv
 = 1;

232 
‰amñí
 = 0;

233 
Êush_Êag
 = 0;

234 
esˇ≥_Êag
 = 0;

235 
fcs
 = 
PPP_INITFCS
;

238 i‡(
Êush_Êag
)

240 i‡(
esˇ≥_Êag
) {

241 
c
 ^
PPP_TRANS
;

242 
esˇ≥_Êag
 = 0;

243 } i‡(
c
 =
PPP_ESCAPE
) {

244 
esˇ≥_Êag
 = 1;

247 i‡(
‰amñí
 >
‰amemax
) {

248 
Êush_Êag
 = 1;

251 
‰ame
[
‰amñí
++] = 
c
;

252 
fcs
 = 
	`PPP_FCS
(fcs, 
c
);

254  
rv
;

255 
	}
}

268 
	$lo›_‰ame
(
‰ame
, 
Àn
)

269 *
‰ame
;

270 
Àn
;

272 
∑ckë
 *
pkt
;

275 i‡(
Àn
 < 
PPP_HDRLEN
)

277 i‡((
	`PPP_PROTOCOL
(
‰ame
) & 0x8000) != 0)

279 i‡(!
	`a˘ive_∑ckë
(
‰ame
, 
Àn
))

282 
pkt
 = (
∑ckë
 *Ë
	`mÆloc
((∑ckëË+ 
Àn
);

283 i‡(
pkt
 !
NULL
) {

284 
pkt
->
Àngth
 = 
Àn
;

285 
pkt
->
√xt
 = 
NULL
;

286 
	`mem˝y
(
pkt
->
d©a
, 
‰ame
, 
Àn
);

287 i‡(
≥nd_q
 =
NULL
)

288 
≥nd_q
 = 
pkt
;

290 
≥nd_qèû
->
√xt
 = 
pkt
;

291 
≥nd_qèû
 = 
pkt
;

294 
	}
}

301 
	$dem™d_ªxmô
(
¥Ÿo
)

302 
¥Ÿo
;

304 
∑ckë
 *
pkt
, *
¥ev
, *
√xçkt
;

306 
¥ev
 = 
NULL
;

307 
pkt
 = 
≥nd_q
;

308 
≥nd_q
 = 
NULL
;

309 ; 
pkt
 !
NULL
;Ökà
√xçkt
) {

310 
√xçkt
 = 
pkt
->
√xt
;

311 i‡(
	`PPP_PROTOCOL
(
pkt
->
d©a
Ë=
¥Ÿo
) {

312 
	`ouçut
(0, 
pkt
->
d©a
,Ökt->
Àngth
);

313 
	`‰ì
(
pkt
);

315 i‡(
¥ev
 =
NULL
)

316 
≥nd_q
 = 
pkt
;

318 
¥ev
->
√xt
 = 
pkt
;

319 
¥ev
 = 
pkt
;

322 
≥nd_qèû
 = 
¥ev
;

323 i‡(
¥ev
 !
NULL
)

324 
¥ev
->
√xt
 = 
NULL
;

325 
	}
}

332 
	$a˘ive_∑ckë
(
p
, 
Àn
)

333 *
p
;

334 
Àn
;

336 
¥Ÿo
, 
i
;

337 
¥Ÿít
 *
¥Ÿp
;

339 i‡(
Àn
 < 
PPP_HDRLEN
)

341 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
p
);

342 #ifde‡
PPP_FILTER


343 
p
[0] = 1;

344 i‡((
∑ss_fûãr
.
bf_Àn
 != 0

345 && 
	`bpf_fûãr
(
∑ss_fûãr
.
bf_ö¢s
, 
p
, 
Àn
,Üen) == 0)

346 || (
a˘ive_fûãr
.
bf_Àn
 != 0

347 && 
	`bpf_fûãr
(
a˘ive_fûãr
.
bf_ö¢s
, 
p
, 
Àn
,Üen) == 0)) {

348 
p
[0] = 0xff;

351 
p
[0] = 0xff;

353 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

354 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 && (¥Ÿp->¥Ÿocﬁ & ~0x8000Ë=
¥Ÿo
) {

355 i‡(!
¥Ÿp
->
íabÀd_Êag
)

357 i‡(
¥Ÿp
->
a˘ive_pkt
 =
NULL
)

359  (*
¥Ÿp
->
a˘ive_pkt
)(
p
, 
Àn
);

363 
	}
}

	@pppd/eap-tls.c

32 
	~<°rög.h
>

33 
	~<°rögs.h
>

34 
	~<uni°d.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<›ís¶/c⁄f.h
>

40 
	~<›ís¶/ígöe.h
>

41 
	~<›ís¶/hmac.h
>

42 
	~<›ís¶/îr.h
>

43 
	~<›ís¶/ui.h
>

44 
	~<›ís¶/x509v3.h
>

46 
	~"µpd.h
"

47 
	~"óp.h
"

48 
	~"óp-és.h
"

49 
	~"fsm.h
"

50 
	~"l˝.h
"

51 
	~"∑th«mes.h
"

53 
	spw_cb_d©a


55 c⁄° *
	m∑ssw‹d
;

56 c⁄° *
	m¥om±_öfo
;

57 } 
	tPW_CB_DATA
;

60 
CONF
 *
	gs¶_c⁄fig
 = 
NULL
;

61 
ENGINE
 *
	g˚π_ígöe
 = 
NULL
;

62 
ENGINE
 *
	gpkey_ígöe
 = 
NULL
;

65 
	ghave_£ssi⁄_tickë
 = 0;

67 
s¶_vîify_ˇŒback
(, 
X509_STORE_CTX
 *);

68 
s¶_msg_ˇŒback
(
wrôe_p
, 
vîsi⁄
, 
˘
, c⁄° *
buf
,

69 
size_t
 
Àn
, 
SSL
 * 
s¶
, *
¨g
);

70 
s¶_√w_£ssi⁄_cb
(
SSL
 *
s
, 
SSL_SESSION
 *
£ss
);

72 
X509
 *
gë_X509_‰om_fûe
(*
fûíame
);

73 
s¶_cmp_˚πs
(*
fûíame
, 
X509
 * 
a
);

75 #ifde‡
MPPE


77 
	#EAPTLS_MPPE_KEY_LEN
 32

	)

84 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

86 
	#TLS_mëhod
 
SSLv23_mëhod


	)

88 
	#SSL3_RT_HEADER
 0x100

	)

90 #i‚de‡
SSL_CTX_£t_max_¥Ÿo_vîsi⁄


92 
ölöe
 
	$SSL_CTX_£t_max_¥Ÿo_vîsi⁄
(
SSL_CTX
 *
˘x
, 
és_vî_max
)

94 
s¶›t
 = 0;

96 i‡(
és_vî_max
 < 
TLS1_VERSION
)

98 
s¶›t
 |
SSL_OP_NO_TLSv1
;

100 #ifde‡
SSL_OP_NO_TLSv1_1


101 i‡(
és_vî_max
 < 
TLS1_1_VERSION
)

103 
s¶›t
 |
SSL_OP_NO_TLSv1_1
;

106 #ifde‡
SSL_OP_NO_TLSv1_2


107 i‡(
és_vî_max
 < 
TLS1_2_VERSION
)

109 
s¶›t
 |
SSL_OP_NO_TLSv1_2
;

112 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
s¶›t
);

115 
	}
}

124 
	$ó±ls_gí_mµe_keys
(
ó±ls_£ssi⁄
 *
ës
, 
˛õ¡
)

126 
out
[4*
EAPTLS_MPPE_KEY_LEN
];

127 c⁄° *
¥f_œbñ
;

128 
size_t
 
¥f_size
;

129 
óp_és13_c⁄ãxt
[] = { 
EAPT_TLS
 };

130 *
c⁄ãxt
 = 
NULL
;

131 
size_t
 
c⁄ãxt_Àn
 = 0;

132 *
p
;

134 
	`dbglog
("EAP-TLS generating MPPE keys");

135 i‡(
ës
->
és_v13
)

137 
¥f_œbñ
 = "EXPORTER_EAP_TLS_Key_Material";

138 
c⁄ãxt
 = 
óp_és13_c⁄ãxt
;

139 
c⁄ãxt_Àn
 = 1;

143 
¥f_œbñ
 = "client EAPÉncryption";

146 
	`dbglog
("EAP-TLS PRFÜabñ = %s", 
¥f_œbñ
);

147 
¥f_size
 = 
	`°æí
(
¥f_œbñ
);

148 i‡(
	`SSL_exp‹t_keyög_m©îül
(
ës
->
s¶
, 
out
, (out), 
¥f_œbñ
, 
¥f_size
,

149 
c⁄ãxt
, 
c⁄ãxt_Àn
, 0) != 1)

151 
	`w¨n
( "EAP-TLS: Failed generating keying material" );

160 i‡(
˛õ¡
)

162 
p
 = 
out
;

163 
	`BCOPY
–
p
, 
mµe_£nd_key
, (mppe_send_key) );

164 
p
 +
EAPTLS_MPPE_KEY_LEN
;

165 
	`BCOPY
–
p
, 
mµe_ªcv_key
, (mppe_recv_key) );

169 
p
 = 
out
;

170 
	`BCOPY
–
p
, 
mµe_ªcv_key
, (mppe_recv_key) );

171 
p
 +
EAPTLS_MPPE_KEY_LEN
;

172 
	`BCOPY
–
p
, 
mµe_£nd_key
, (mppe_send_key) );

175 
mµe_keys_£t
 = 1;

176 
	}
}

180 
	$log_s¶_îr‹s
( )

182 
s¶_îr
 = 
	`ERR_gë_îr‹
();

184 i‡(
s¶_îr
 != 0)

185 
	`dbglog
("EAP-TLS SSLÉrror stack:");

186 
s¶_îr
 != 0) {

187 
	`dbglog
–
	`ERR_îr‹_°rög
–
s¶_îr
, 
NULL
 ) );

188 
s¶_îr
 = 
	`ERR_gë_îr‹
();

190 
	}
}

193 
	$∑ssw‹d_ˇŒback
 (*
buf
, 
size
, 
rwÊag
, *
u
)

195 i‡(
buf
)

197 
	`°æ˝y
 (
buf
, 
∑sswd
, 
size
);

198  
	`°æí
 (
buf
);

201 
	}
}

204 
CONF
 *
	$ó±ls_s¶_lﬂd_c⁄fig
( )

206 
CONF
 *
c⁄fig
;

207 
ªt_code
;

208 
îr‹_löe
 = 33;

210 
c⁄fig
 = 
	`NCONF_√w
–
NULL
 );

211 
	`dbglog
( "Loading OpenSSL config file" );

212 
ªt_code
 = 
	`NCONF_lﬂd
–
c⁄fig
, 
_PATH_OPENSSLCONFFILE
, &
îr‹_löe
 );

213 i‡(
ªt_code
 == 0)

215 
	`w¨n
–"EAP-TLS: Eº‹ i¿O≥nSSL c⁄fig fûê%†©Üöê%d", 
_PATH_OPENSSLCONFFILE
, 
îr‹_löe
 );

216 
	`NCONF_‰ì
–
c⁄fig
 );

217 
c⁄fig
 = 
NULL
;

218 
	`ERR_˛ór_îr‹
();

221 
	`dbglog
( "Loading OpenSSL built-ins" );

222 
	`ENGINE_lﬂd_buûtö_ígöes
();

223 
	`OPENSSL_lﬂd_buûtö_moduÀs
();

225 
	`dbglog
( "Loading OpenSSL configured modules" );

226 i‡(
	`CONF_moduÀs_lﬂd
–
c⁄fig
, 
NULL
, 0 ) <= 0 )

228 
	`w¨n
( "EAP-TLS: ErrorÜoading OpenSSL modules" );

229 
	`log_s¶_îr‹s
();

230 
c⁄fig
 = 
NULL
;

233  
c⁄fig
;

234 
	}
}

236 
ENGINE
 *
	$ó±ls_s¶_lﬂd_ígöe
–*
ígöe_«me
 )

238 
ENGINE
 *
e
 = 
NULL
;

240 
	`dbglog
( "Enabling OpenSSLáutoÉngines" );

241 
	`ENGINE_ªgi°î_Æl_com∂ëe
();

243 
	`dbglog
–"Lﬂdög O≥nSSL '%s'Éngöêsuµ‹t", 
ígöe_«me
 );

244 
e
 = 
	`ENGINE_by_id
–
ígöe_«me
 );

245 i‡(!
e
)

247 
	`dbglog
–"EAP-TLS: C™nŸÜﬂd '%s'Éngöêsuµ‹t,Åryög 'dy«mic'", 
ígöe_«me
 );

248 
e
 = 
	`ENGINE_by_id
( "dynamic" );

249 i‡(
e
)

251 i‡(!
	`ENGINE_˘æ_cmd_°rög
(
e
, "SO_PATH", 
ígöe_«me
, 0)

252 || !
	`ENGINE_˘æ_cmd_°rög
(
e
, "LOAD", 
NULL
, 0))

254 
	`w¨n
–"EAP-TLS: Eº‹Üﬂdög dy«mi¯ígöê'%s'", 
ígöe_«me
 );

255 
	`log_s¶_îr‹s
();

256 
	`ENGINE_‰ì
(
e
);

257 
e
 = 
NULL
;

262 
	`w¨n
( "EAP-TLS: CannotÜoad dynamicÉngine support" );

266 i‡(
e
)

268 
	`dbglog
( "InitialisingÉngine" );

269 if(!
	`ENGINE_£t_deÁu…
(
e
, 
ENGINE_METHOD_ALL
))

271 
	`w¨n
( "EAP-TLS: Cannot useÅhatÉngine" );

272 
	`log_s¶_îr‹s
();

273 
	`ENGINE_‰ì
(
e
);

274 
e
 = 
NULL
;

278  
e
;

279 
	}
}

287 
SSL_CTX
 *
	$ó±ls_öô_s¶
(
öô_£rvî
, *
ˇ˚πfûe
, *
ˇ∑th
,

288 *
˚πfûe
, *
≥î_˚πfûe
, *
¥ivkeyfûe
)

290 *
˚π_ígöe_«me
 = 
NULL
;

291 *
˚π_idítifõr
 = 
NULL
;

292 *
pkey_ígöe_«me
 = 
NULL
;

293 *
pkey_idítifõr
 = 
NULL
;

294 
SSL_CTX
 *
˘x
;

295 
SSL
 *
s¶
;

296 
X509_STORE
 *
˚π°‹e
;

297 
X509_LOOKUP
 *
lookup
;

298 
X509
 *
tmp
;

299 
ªt
;

300 #i‡
	`deföed
(
TLS1_2_VERSION
)

301 
és_vîsi⁄
 = 
TLS1_2_VERSION
;

302 #ñi‡
	`deföed
(
TLS1_1_VERSION
)

303 
és_vîsi⁄
 = 
TLS1_1_VERSION
;

305 
és_vîsi⁄
 = 
TLS1_VERSION
;

311 i‡(!(
ˇ˚πfûe
[0] || 
ˇ∑th
[0]))

313 
	`îr‹
("EAP-TLS: CA certificate file orÖath missing");

314  
NULL
;

317 i‡(!
˚πfûe
[0])

319 
	`îr‹
("EAP-TLS: Certificate missing");

320  
NULL
;

323 i‡(!
¥ivkeyfûe
[0])

325 
	`îr‹
("EAP-TLS: Private key missing");

326  
NULL
;

329 
	`SSL_libøry_öô
();

330 
	`SSL_lﬂd_îr‹_°rögs
();

335 i‡(!
s¶_c⁄fig
)

336 
s¶_c⁄fig
 = 
	`ó±ls_s¶_lﬂd_c⁄fig
();

338 
˘x
 = 
	`SSL_CTX_√w
(
	`TLS_mëhod
());

340 i‡(!
˘x
) {

341 
	`îr‹
("EAP-TLS: Cannot initialize SSL CTX context");

342 
Áû
;

351 i‡–
	`ödex
–
˚πfûe
, '/' ) =
NULL
 && index( certfile, '.') == NULL )

353 
˚π_idítifõr
 = 
	`ödex
–
˚πfûe
, ':' );

355 i‡(
˚π_idítifõr
)

357 
˚π_ígöe_«me
 = 
˚πfûe
;

358 *
˚π_idítifõr
 = '\0';

359 
˚π_idítifõr
++;

361 
	`dbglog
–"Found cîtifiˇãÉngöê'%s'", 
˚π_ígöe_«me
 );

362 
	`dbglog
–"Found cîtifiˇã idítifõ∏'%s'", 
˚π_idítifõr
 );

372 i‡–
	`ödex
–
¥ivkeyfûe
, '/' ) =
NULL
 && index(Örivkeyfile, '.') == NULL )

374 
pkey_idítifõr
 = 
	`ödex
–
¥ivkeyfûe
, ':' );

376 i‡(
pkey_idítifõr
)

378 
pkey_ígöe_«me
 = 
¥ivkeyfûe
;

379 *
pkey_idítifõr
 = '\0';

380 
pkey_idítifõr
++;

382 
	`dbglog
–"FoundÖriv©ekeyÉngöê'%s'", 
pkey_ígöe_«me
 );

383 
	`dbglog
–"FoundÖriv©ekey idítifõ∏'%s'", 
pkey_idítifõr
 );

387 i‡(
˚π_idítifõr
 && 
pkey_idítifõr
)

389 i‡(
	`°æí
–
˚π_idítifõr
 ) == 0)

391 i‡(
	`°æí
–
pkey_idítifõr
 ) == 0)

392 
	`îr‹
( "EAP-TLS: bothÅhe certificateándÖrivatekey identifiersáre missing!" );

395 
	`dbglog
( "SubstitutingÖrivatekey identifier for certificate identifier" );

396 
˚π_idítifõr
 = 
pkey_idítifõr
;

401 i‡(
	`°æí
–
pkey_idítifõr
 ) == 0)

403 
	`dbglog
( "Substituting certificate identifier forÖrivatekey identifier" );

404 
pkey_idítifõr
 = 
˚π_idítifõr
;

409 i‡(
s¶_c⁄fig
 && 
˚π_ígöe_«me
)

410 
˚π_ígöe
 = 
	`ó±ls_s¶_lﬂd_ígöe
–
˚π_ígöe_«me
 );

412 i‡(
s¶_c⁄fig
 && 
pkey_ígöe_«me
)

415 i‡–
˚π_ígöe
 && 
	`°rcmp
–
˚π_ígöe_«me
, 
pkey_ígöe_«me
) == 0 )

416 
pkey_ígöe
 = 
˚π_ígöe
;

418 
pkey_ígöe
 = 
	`ó±ls_s¶_lﬂd_ígöe
–
pkey_ígöe_«me
 );

421 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
 (
˘x
, 
∑ssw‹d_ˇŒback
);

423 i‡(
	`°æí
(
ˇ˚πfûe
Ë=0Ëˇ˚πfûê
NULL
;

424 i‡(
	`°æí
(
ˇ∑th
Ë=0Ëˇ∑th = 
NULL
;

426 i‡(!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
ˇ˚πfûe
, 
ˇ∑th
))

428 
	`îr‹
("EAP-TLS: CannotÜoad verifyÜocations");

429 i‡(
ˇ˚πfûe
Ë
	`dbglog
("CA certificate file = [%s]", cacertfile);

430 i‡(
ˇ∑th
Ë
	`dbglog
("CA certificateÖath = [%s]", capath);

431 
Áû
;

434 i‡(
öô_£rvî
)

435 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
˘x
, 
	`SSL_lﬂd_˛õ¡_CA_fûe
(
ˇ˚πfûe
));

437 i‡(
˚π_ígöe
)

441 c⁄° *
s_¶Ÿ_˚π_id
;

442 
X509
 *
˚π
;

443 } 
˚π_öfo
;

445 
˚π_öfo
.
s_¶Ÿ_˚π_id
 = 
˚π_idítifõr
;

446 
˚π_öfo
.
˚π
 = 
NULL
;

448 i‡(!
	`ENGINE_˘æ_cmd
–
˚π_ígöe
, "LOAD_CERT_CTRL", 0, &
˚π_öfo
, 
NULL
, 0 ) )

450 
	`îr‹
–"EAP-TLS: Eº‹Üﬂdög cîtifiˇã wôh id '%s' fromÉngöe", 
˚π_idítifõr
 );

451 
Áû
;

454 i‡(
˚π_öfo
.
˚π
)

456 
	`dbglog
( "GotÅhe certificate,ádding itÅo SSL context" );

457 
	`dbglog
–"subje˘ = %s", 
	`X509_NAME_⁄ñöe
–
	`X509_gë_subje˘_«me
–
˚π_öfo
.
˚π
 ), 
NULL
, 0 ) );

458 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
˘x
, 
˚π_öfo
.
˚π
) <= 0)

460 
	`îr‹
("EAP-TLS: C™nŸ u£ PKCS11 cîtifiˇã %s", 
˚π_idítifõr
);

461 
Áû
;

466 
	`w¨n
("EAP-TLS: C™nŸÜﬂd PKCS11 key %s", 
˚π_idítifõr
);

467 
	`log_s¶_îr‹s
();

472 i‡(!
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
˚πfûe
))

474 
	`îr‹
–"EAP-TLS: C™nŸ u£Öubli¯˚πifiˇã %s", 
˚πfûe
 );

475 
Áû
;

483 
s¶
 = 
	`SSL_√w
(
˘x
);

484 
tmp
 = 
	`SSL_gë_˚πifiˇã
(
s¶
);

486 
ªt
 = 
	`X509_cmp_time
(
	`X509_gë_nŸBef‹e
(
tmp
), 
NULL
);

487 i‡(
ªt
 == 0)

489 
	`w¨n
( "EAP-TLS: FailedÅoÑead certificateÇotBefore field.");

491 i‡(
ªt
 > 0)

493 
	`w¨n
( "EAP-TLS: Your certificate isÇot yet valid!");

496 
ªt
 = 
	`X509_cmp_time
(
	`X509_gë_nŸA·î
(
tmp
), 
NULL
);

497 i‡(
ªt
 == 0)

499 
	`w¨n
( "EAP-TLS: FailedÅoÑead certificateÇotAfter field.");

501 i‡(
ªt
 < 0)

503 
	`w¨n
( "EAP-TLS: Your certificate hasÉxpired!");

505 
	`SSL_‰ì
(
s¶
);

507 i‡(
pkey_ígöe
)

509 
EVP_PKEY
 *
pkey
 = 
NULL
;

510 
PW_CB_DATA
 
cb_d©a
;

512 
cb_d©a
.
∑ssw‹d
 = 
∑sswd
;

513 
cb_d©a
.
¥om±_öfo
 = 
pkey_idítifõr
;

515 i‡(
∑sswd
[0] != 0)

517 
UI_METHOD
* 
å™s„r_pö
 = 
	`UI_¸óã_mëhod
("transfer_pin");

519 
	`wrôî
 (
UI
 *
ui
, 
UI_STRING
 *
uis
)

521 
PW_CB_DATA
* 
cb_d©a
 = (PW_CB_DATA*)
	`UI_gë0_u£r_d©a
(
ui
);

522 
	`UI_£t_ªsu…
(
ui
, 
uis
, 
cb_d©a
->
∑ssw‹d
);

525 
	`°ub
 (
UI
* 
ui
) { 1;};

526 
	`°ub_ªadî
 (
UI
 *
ui
, 
UI_STRING
 *
uis
) { 1;};

528 
	`UI_mëhod_£t_wrôî
(
å™s„r_pö
, 
wrôî
);

529 
	`UI_mëhod_£t_›íî
(
å™s„r_pö
, 
°ub
);

530 
	`UI_mëhod_£t_˛o£r
(
å™s„r_pö
, 
°ub
);

531 
	`UI_mëhod_£t_Êushî
(
å™s„r_pö
, 
°ub
);

532 
	`UI_mëhod_£t_ªadî
(
å™s„r_pö
, 
°ub_ªadî
);

534 
	`dbglog
–"Usög ou∏¥iv©êkey '%s' i¿ígöe", 
pkey_idítifõr
 );

535 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
pkey_ígöe
, 
pkey_idítifõr
, 
å™s„r_pö
, &
cb_d©a
);

537 i‡(
å™s„r_pö
Ë
	`UI_de°roy_mëhod
(transfer_pin);

540 
	`dbglog
–"LﬂdögÖriv©êkey '%s' fromÉngöe", 
pkey_idítifõr
 );

541 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
pkey_ígöe
, 
pkey_idítifõr
, 
NULL
, NULL);

543 i‡(
pkey
)

545 
	`dbglog
( "GotÅheÖrivate key,ádding itÅo SSL context" );

546 i‡(
	`SSL_CTX_u£_Priv©eKey
(
˘x
, 
pkey
) <= 0)

548 
	`îr‹
("EAP-TLS: C™nŸ u£ PKCS11 key %s", 
pkey_idítifõr
);

549 
Áû
;

554 
	`w¨n
("EAP-TLS: C™nŸÜﬂd PKCS11 key %s", 
pkey_idítifõr
);

555 
	`log_s¶_îr‹s
();

560 i‡(!
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
¥ivkeyfûe
, 
SSL_FILETYPE_PEM
))

562 
	`îr‹
("EAP-TLS: C™nŸ u£Öriv©êkey %s", 
¥ivkeyfûe
);

563 
Áû
;

567 i‡(
	`SSL_CTX_check_¥iv©e_key
(
˘x
) != 1) {

568 
	`îr‹
("EAP-TLS: Priv©êkey %†Áû†£curôy check", 
¥ivkeyfûe
);

569 
Áû
;

573 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_NO_SSLv2
 | 
SSL_OP_NO_SSLv3


574 #ifde‡
SSL_OP_NO_TICKET


575 | 
SSL_OP_NO_TICKET


595 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
, 
SSL_SESS_CACHE_CLIENT
 | 
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

596 
	`SSL_CTX_£ss_£t_√w_cb
(
˘x
, 
s¶_√w_£ssi⁄_cb
);

599 i‡(
max_és_vîsi⁄
)

601 i‡(
	`°∫cmp
(
max_és_vîsi⁄
, "1.0", 3) == 0)

602 
és_vîsi⁄
 = 
TLS1_VERSION
;

603 i‡(
	`°∫cmp
(
max_és_vîsi⁄
, "1.1", 3) == 0)

604 
és_vîsi⁄
 = 
TLS1_1_VERSION
;

605 i‡(
	`°∫cmp
(
max_és_vîsi⁄
, "1.2", 3) == 0)

606 #ifde‡
TLS1_2_VERSION


607 
és_vîsi⁄
 = 
TLS1_2_VERSION
;

610 
	`w¨n
("TLSv1.2Çotávailable. DefaultingÅo TLSv1.1");

611 
és_vîsi⁄
 = 
TLS_1_1_VERSION
;

614 i‡(
	`°∫cmp
(
max_és_vîsi⁄
, "1.3", 3) == 0)

615 #ifde‡
TLS1_3_VERSION


616 
és_vîsi⁄
 = 
TLS1_3_VERSION
;

618 
	`w¨n
("TLSv1.3Çotávailable.");

622 
	`dbglog
("EAP-TLS: Sëtög maxÖrŸocﬁ vîsi⁄Åÿ0x%X", 
és_vîsi⁄
);

623 
	`SSL_CTX_£t_max_¥Ÿo_vîsi⁄
(
˘x
, 
és_vîsi⁄
);

625 
	`SSL_CTX_£t_vîify_dïth
(
˘x
, 5);

626 
	`SSL_CTX_£t_vîify
(
˘x
,

627 
SSL_VERIFY_PEER
 |

628 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
,

629 &
s¶_vîify_ˇŒback
);

631 i‡(
¸l_dú
) {

632 i‡(!(
˚π°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
))) {

633 
	`îr‹
("EAP-TLS: FailedÅo get certificate store");

634 
Áû
;

637 i‡(!(
lookup
 =

638 
	`X509_STORE_add_lookup
(
˚π°‹e
, 
	`X509_LOOKUP_hash_dú
()))) {

639 
	`îr‹
("EAP-TLS: StoreÜookup for CRL failed");

641 
Áû
;

644 
	`X509_LOOKUP_add_dú
(
lookup
, 
¸l_dú
, 
X509_FILETYPE_PEM
);

645 
	`X509_STORE_£t_Êags
(
˚π°‹e
, 
X509_V_FLAG_CRL_CHECK
);

648 i‡(
¸l_fûe
) {

649 
FILE
 *
Â
 = 
NULL
;

650 
X509_CRL
 *
¸l
 = 
NULL
;

652 
Â
 = 
	`f›í
(
¸l_fûe
, "r");

653 i‡(!
Â
) {

654 
	`îr‹
("EAP-TLS: C™nŸ o≥¿CRL fûê'%s'", 
¸l_fûe
);

655 
Áû
;

658 
¸l
 = 
	`PEM_ªad_X509_CRL
(
Â
, 
NULL
, NULL, NULL);

659 i‡(!
¸l
) {

660 
	`îr‹
("EAP-TLS: C™nŸÑód CRL fûê'%s'", 
¸l_fûe
);

661 
Áû
;

664 i‡(!(
˚π°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
˘x
))) {

665 
	`îr‹
("EAP-TLS: FailedÅo get certificate store");

666 
Áû
;

668 i‡(!
	`X509_STORE_add_¸l
(
˚π°‹e
, 
¸l
)) {

669 
	`îr‹
("EAP-TLS: Cannotádd CRLÅo certificate store");

670 
Áû
;

672 
	`X509_STORE_£t_Êags
(
˚π°‹e
, 
X509_V_FLAG_CRL_CHECK
);

679 i‡(
≥î_˚πfûe
[0]) {

680 i‡(!(
tmp
 = 
	`gë_X509_‰om_fûe
(
≥î_˚πfûe
))) {

681 
	`îr‹
("EAP-TLS: ErrorÜoading client certificate from file %s",

682 
≥î_˚πfûe
);

683 
Áû
;

685 
	`X509_‰ì
(
tmp
);

688  
˘x
;

690 
Áû
:

691 
	`log_s¶_îr‹s
();

692 
	`SSL_CTX_‰ì
(
˘x
);

693  
NULL
;

694 
	}
}

700 
	$ó±ls_gë_mtu
(
unô
)

702 
mtu
, 
mru
;

704 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

705 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

706 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

707 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

709 
mtu
 = 
ho
->
√g_mru
? ho->
mru
: 
PPP_MRU
;

710 
mru
 = 
go
->
√g_mru
? 
	`MAX
(
wo
->mru, go->mru): 
PPP_MRU
;

711 
mtu
 = 
	`MIN
(MIN(mtu, 
mru
), 
ao
->mru)- 
PPP_HDRLEN
 - 10;

713 
	`dbglog
("MTU = %d", 
mtu
);

714  
mtu
;

715 
	}
}

721 
	$ó±ls_öô_s¶_£rvî
(
óp_°©e
 * 
e•
)

723 
ó±ls_£ssi⁄
 *
ës
;

724 
£rv˚πfûe
[
MAXWORDLEN
];

725 
˛i˚πfûe
[
MAXWORDLEN
];

726 
ˇ˚πfûe
[
MAXWORDLEN
];

727 
ˇ∑th
[
MAXWORDLEN
];

728 
pkfûe
[
MAXWORDLEN
];

732 
e•
->
es_£rvî
.
ó_£ssi⁄
 = 
	`mÆloc
((
ó±ls_£ssi⁄
));

733 i‡(!
e•
->
es_£rvî
.
ó_£ssi⁄
)

734 
	`Áèl
("AllocationÉrror");

735 
ës
 = 
e•
->
es_£rvî
.
ó_£ssi⁄
;

737 i‡(!
e•
->
es_£rvî
.
ó_≥î
) {

738 
	`îr‹
("EAP-TLS: Error: clientÇameÇot set (BUG)");

742 
	`°æ˝y
(
ës
->
≥î
, 
e•
->
es_£rvî
.
ó_≥î
, 
MAXWORDLEN
-1);

744 
	`dbglog
( "gettingÉaptls secret" );

745 i‡(!
	`gë_ó±ls_£¸ë
(
e•
->
es_unô
,É•->
es_£rvî
.
ó_≥î
,

746 
e•
->
es_£rvî
.
ó_«me
, 
˛i˚πfûe
,

747 
£rv˚πfûe
, 
ˇ˚πfûe
, 
ˇ∑th
, 
pkfûe
, 1)) {

748 
	`îr‹
( "EAP-TLS: Cannot get secret/password for client \"%s\", server \"%s\"",

749 
e•
->
es_£rvî
.
ó_≥î
,É•->es_£rvî.
ó_«me
 );

753 
ës
->
mtu
 = 
	`ó±ls_gë_mtu
(
e•
->
es_unô
);

755 
ës
->
˘x
 = 
	`ó±ls_öô_s¶
(1, 
ˇ˚πfûe
, 
ˇ∑th
, 
£rv˚πfûe
, 
˛i˚πfûe
, 
pkfûe
);

756 i‡(!
ës
->
˘x
)

757 
Áû
;

759 i‡(!(
ës
->
s¶
 = 
	`SSL_√w
”ts->
˘x
)))

760 
Áû
;

765 
	`SSL_£t_mode
(
ës
->
s¶
, 
SSL_MODE_AUTO_RETRY
);

770 
ës
->
öto_s¶
 = 
	`BIO_√w
(
	`BIO_s_mem
());

771 
ës
->
‰om_s¶
 = 
	`BIO_√w
(
	`BIO_s_mem
());

772 
	`SSL_£t_bio
(
ës
->
s¶
,Éts->
öto_s¶
,Éts->
‰om_s¶
);

774 
	`SSL_£t_msg_ˇŒback
(
ës
->
s¶
, 
s¶_msg_ˇŒback
);

775 
	`SSL_£t_msg_ˇŒback_¨g
(
ës
->
s¶
,Éts);

781 
	`SSL_£t_ex_d©a
(
ës
->
s¶
, 0,Éts);

783 
	`SSL_£t_ac˚±_°©e
(
ës
->
s¶
);

785 
ës
->
és_v13
 = 0;

787 
ës
->
d©a
 = 
NULL
;

788 
ës
->
d©Æí
 = 0;

789 
ës
->
Æît_£¡
 = 0;

790 
ës
->
Æît_ªcv
 = 0;

796 i‡(
˛i˚πfûe
[0])

797 
	`°æ˝y
(&
ës
->
≥î˚πfûe
[0], 
˛i˚πfûe
, 
MAXWORDLEN
);

799 
ës
->
≥î˚πfûe
[0] = 0;

803 
Áû
:

804 
	`SSL_CTX_‰ì
(
ës
->
˘x
);

806 
	}
}

811 
	$ó±ls_öô_s¶_˛õ¡
(
óp_°©e
 * 
e•
)

813 
ó±ls_£ssi⁄
 *
ës
;

814 
£rv˚πfûe
[
MAXWORDLEN
];

815 
˛i˚πfûe
[
MAXWORDLEN
];

816 
ˇ˚πfûe
[
MAXWORDLEN
];

817 
ˇ∑th
[
MAXWORDLEN
];

818 
pkfûe
[
MAXWORDLEN
];

823 
e•
->
es_˛õ¡
.
ó_£ssi⁄
 = 
	`mÆloc
((
ó±ls_£ssi⁄
));

824 i‡(!
e•
->
es_˛õ¡
.
ó_£ssi⁄
)

825 
	`Áèl
("AllocationÉrror");

826 
ës
 = 
e•
->
es_˛õ¡
.
ó_£ssi⁄
;

832 i‡(
e•
->
es_˛õ¡
.
ó_≥î
)

833 
	`°æ˝y
(
ës
->
≥î
, 
e•
->
es_˛õ¡
.
ó_≥î
, 
MAXWORDLEN
-1);

835 
ës
->
≥î
[0] = 0;

837 
ës
->
mtu
 = 
	`ó±ls_gë_mtu
(
e•
->
es_unô
);

839 
	`dbglog
( "calling get_eaptls_secret" );

840 i‡(!
	`gë_ó±ls_£¸ë
(
e•
->
es_unô
,É•->
es_˛õ¡
.
ó_«me
,

841 
ës
->
≥î
, 
˛i˚πfûe
,

842 
£rv˚πfûe
, 
ˇ˚πfûe
, 
ˇ∑th
, 
pkfûe
, 0)) {

843 
	`îr‹
( "EAP-TLS: Cannot get secret/password for client \"%s\", server \"%s\"",

844 
e•
->
es_˛õ¡
.
ó_«me
, 
ës
->
≥î
 );

848 
	`dbglog
( "callingÉaptls_init_ssl" );

849 
ës
->
˘x
 = 
	`ó±ls_öô_s¶
(0, 
ˇ˚πfûe
, 
ˇ∑th
, 
˛i˚πfûe
, 
£rv˚πfûe
, 
pkfûe
);

850 i‡(!
ës
->
˘x
)

851 
Áû
;

853 
ës
->
s¶
 = 
	`SSL_√w
”ts->
˘x
);

855 i‡(!
ës
->
s¶
)

856 
Áû
;

861 
	`dbglog
( "Initializing SSL BIOs" );

862 
ës
->
öto_s¶
 = 
	`BIO_√w
(
	`BIO_s_mem
());

863 
ës
->
‰om_s¶
 = 
	`BIO_√w
(
	`BIO_s_mem
());

864 
	`SSL_£t_bio
(
ës
->
s¶
,Éts->
öto_s¶
,Éts->
‰om_s¶
);

866 
	`SSL_£t_msg_ˇŒback
(
ës
->
s¶
, 
s¶_msg_ˇŒback
);

867 
	`SSL_£t_msg_ˇŒback_¨g
(
ës
->
s¶
,Éts);

873 
	`SSL_£t_ex_d©a
(
ës
->
s¶
, 0,Éts);

875 
	`SSL_£t_c⁄√˘_°©e
(
ës
->
s¶
);

877 
ës
->
és_v13
 = 0;

879 
ës
->
d©a
 = 
NULL
;

880 
ës
->
d©Æí
 = 0;

881 
ës
->
Æît_£¡
 = 0;

882 
ës
->
Æît_ªcv
 = 0;

889 i‡(
£rv˚πfûe
[0])

890 
	`°æ˝y
(
ës
->
≥î˚πfûe
, 
£rv˚πfûe
, 
MAXWORDLEN
);

892 
ës
->
≥î˚πfûe
[0] = 0;

896 
Áû
:

897 
	`dbglog
( "eaptls_init_ssl_client: fail" );

898 
	`SSL_CTX_‰ì
(
ës
->
˘x
);

901 
	}
}

903 
	$ó±ls_‰ì_£ssi⁄
(
ó±ls_£ssi⁄
 *
ës
)

905 i‡(
ës
->
s¶
)

906 
	`SSL_‰ì
(
ës
->
s¶
);

908 i‡(
ës
->
˘x
)

909 
	`SSL_CTX_‰ì
(
ës
->
˘x
);

911 
	`‰ì
(
ës
);

912 
	}
}

915 
	$ó±ls_is_öô_föished
(
ó±ls_£ssi⁄
 *
ës
)

917 i‡(
ës
->
s¶
 && 
	`SSL_is_öô_föished
(ets->ssl))

919 i‡(
ës
->
és_v13
)

920  
have_£ssi⁄_tickë
;

926 
	}
}

932 
	$ó±ls_ª˚ive
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 * 
öp
, 
Àn
)

934 
u_ch¨
 
Êags
;

935 
u_öt
 
é¶í
 = 0;

936 
u_ch¨
 
dummy
[65536];

938 i‡(
Àn
 < 1) {

939 
	`w¨n
("EAP-TLS:ÑeceivedÇo or invalid data");

943 
	`GETCHAR
(
Êags
, 
öp
);

944 
Àn
--;

946 i‡(
Êags
 & 
EAP_TLS_FLAGS_LI
 && 
Àn
 > 4) {

954 
	`GETLONG
(
é¶í
, 
öp
);

955 
Àn
 -= 4;

957 i‡(!
ës
->
d©a
) {

959 i‡(
é¶í
 > 
EAP_TLS_MAX_LEN
) {

960 
	`îr‹
("EAP-TLS: TLS mesßgêÀngth > %d,Årunˇãd", 
EAP_TLS_MAX_LEN
);

961 
é¶í
 = 
EAP_TLS_MAX_LEN
;

967 
ës
->
d©a
 = 
	`mÆloc
(
é¶í
);

968 i‡(!
ës
->
d©a
)

969 
	`Áèl
("EAP-TLS:állocationÉrror\n");

971 
ës
->
d©Æí
 = 0;

972 
ës
->
é¶í
 =Ålslen;

975 
	`w¨n
("EAP-TLS:Çon-first LIÖacket?Åhat's odd...");

977 i‡(!
ës
->
d©a
) {

982 
ës
->
d©a
 = 
	`mÆloc
(
Àn
);

983 i‡(!
ës
->
d©a
)

984 
	`Áèl
("EAP-TLS: memoryállocationÉrror inÉaptls_receive\n");

986 
ës
->
d©Æí
 = 0;

987 
ës
->
é¶í
 = 
Àn
;

990 i‡(
Êags
 & 
EAP_TLS_FLAGS_MF
)

991 
ës
->
‰ag
 = 1;

993 
ës
->
‰ag
 = 0;

995 i‡(
Àn
 < 0) {

996 
	`w¨n
("EAP-TLS:Ñeceived malformed data");

1000 i‡(
Àn
 + 
ës
->
d©Æí
 >Éts->
é¶í
) {

1001 
	`w¨n
("EAP-TLS:Ñeceived data > TLS messageÜength");

1005 
	`BCOPY
(
öp
, 
ës
->
d©a
 +Éts->
d©Æí
, 
Àn
);

1006 
ës
->
d©Æí
 +
Àn
;

1008 i‡(!
ës
->
‰ag
) {

1014 i‡(
ës
->
d©Æí
 !ës->
é¶í
) {

1015 
	`w¨n
("EAP-TLS:Ñeceived data != TLS messageÜength");

1019 i‡(
	`BIO_wrôe
(
ës
->
öto_s¶
,Éts->
d©a
,Éts->
d©Æí
) == -1)

1020 
	`log_s¶_îr‹s
();

1022 
	`SSL_ªad
(
ës
->
s¶
, 
dummy
, 65536);

1024 
	`‰ì
(
ës
->
d©a
);

1025 
ës
->
d©a
 = 
NULL
;

1026 
ës
->
d©Æí
 = 0;

1030 
	}
}

1038 
	$ó±ls_£nd
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 ** 
ouç
)

1040 
boﬁ
 
fú°
 = 0;

1041 
size
;

1042 
u_ch¨
 
‰omés
[65536];

1043 
ªs
;

1044 
u_ch¨
 *
°¨t
;

1046 
°¨t
 = *
ouç
;

1048 i‡(!
ës
->
d©a
)

1050 if(!
ës
->
Æît_£¡
)

1052 
ªs
 = 
	`SSL_ªad
(
ës
->
s¶
, 
‰omés
, 65536);

1058 i‡((
ªs
 = 
	`BIO_ªad
(
ës
->
‰om_s¶
, 
‰omés
, 65536)) == -1)

1060 
	`w¨n
("EAP-TLS send: No data from BIO_read");

1064 
ës
->
d©Æí
 = 
ªs
;

1066 
ës
->
d©a
 = 
	`mÆloc
”ts->
d©Æí
);

1067 i‡(!
ës
->
d©a
)

1068 
	`Áèl
("EAP-TLS: memoryállocationÉrror inÉaptls_send\n");

1070 
	`BCOPY
(
‰omés
, 
ës
->
d©a
,Éts->
d©Æí
);

1072 
ës
->
off£t
 = 0;

1073 
fú°
 = 1;

1076 
size
 = 
ës
->
d©Æí
 -Éts->
off£t
;

1078 i‡(
size
 > 
ës
->
mtu
) {

1079 
size
 = 
ës
->
mtu
;

1080 
ës
->
‰ag
 = 1;

1082 
ës
->
‰ag
 = 0;

1084 
	`PUTCHAR
(
EAPT_TLS
, *
ouç
);

1089 i‡(
ës
->
‰ag
 && 
fú°
) {

1090 
	`PUTCHAR
(
EAP_TLS_FLAGS_LI
 | 
EAP_TLS_FLAGS_MF
, *
ouç
);

1091 
	`PUTLONG
(
ës
->
d©Æí
, *
ouç
);

1092 } i‡(
ës
->
‰ag
) {

1093 
	`PUTCHAR
(
EAP_TLS_FLAGS_MF
, *
ouç
);

1095 
	`PUTCHAR
(0, *
ouç
);

1100 
	`BCOPY
(
ës
->
d©a
 +Éts->
off£t
, *
ouç
, 
size
);

1101 
	`INCPTR
(
size
, *
ouç
);

1106 
	`BCOPY
(
°¨t
, &
ës
->
πx
[0], *
ouç
 - start);

1107 
ës
->
πx_Àn
 = *
ouç
 - 
°¨t
;

1109 
ës
->
off£t
 +
size
;

1111 i‡(
ës
->
off£t
 >ës->
d©Æí
) {

1117 
	`‰ì
(
ës
->
d©a
);

1118 
ës
->
d©a
 = 
NULL
;

1119 
ës
->
d©Æí
 = 0;

1120 
ës
->
off£t
 = 0;

1124 
	}
}

1129 
	$ó±ls_ªå™smô
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 ** 
ouç
)

1131 
	`BCOPY
(
ës
->
πx
, *
ouç
,Éts->
πx_Àn
);

1132 
	`INCPTR
(
ës
->
πx_Àn
, *
ouç
);

1133 
	}
}

1141 
	$s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 * 
˘x
)

1143 
subje˘
[256];

1144 
˙_°r
[256];

1145 
X509
 *
≥î_˚π
;

1146 
îr
, 
dïth
;

1147 
SSL
 *
s¶
;

1148 
ó±ls_£ssi⁄
 *
ës
;

1150 
≥î_˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

1151 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

1152 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
);

1154 
	`dbglog
("˚πifiˇã vîify dïth: %d", 
dïth
);

1156 i‡(
auth_ªquúed
 && !
ok
) {

1157 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
≥î_˚π
),

1158 
subje˘
, 256);

1160 
	`X509_NAME_gë_ãxt_by_NID
(
	`X509_gë_subje˘_«me
(
≥î_˚π
),

1161 
NID_comm⁄Name
, 
˙_°r
, 256);

1163 
	`dbglog
("Certificate verificationÉrror:\n depth: %d CN: %s"

1164 "\¿îr: %d (%s)\n", 
dïth
, 
˙_°r
, 
îr
,

1165 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

1170 
s¶
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,

1171 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

1173 
ës
 = (
ó±ls_£ssi⁄
 *)
	`SSL_gë_ex_d©a
(
s¶
, 0);

1175 i‡(
ës
 =
NULL
) {

1176 
	`îr‹
("Error: SSL_get_ex_dataÑeturned NULL");

1180 
	`log_s¶_îr‹s
();

1182 i‡(!
dïth
)

1186 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
≥î_˚π
),

1187 
subje˘
, 256);

1189 
	`X509_NAME_gë_ãxt_by_NID
(
	`X509_gë_subje˘_«me
(
≥î_˚π
),

1190 
NID_comm⁄Name
, 
˙_°r
, 256);

1196 i‡(!
ës
->
≥î
[0]) {

1197 
	`w¨n
("PeerÇameÇot specified:Ço check");

1198  
ok
;

1204 i‡(
	`°rcmp
(
˙_°r
, 
ës
->
≥î
)) {

1205 
îr‹


1207 
˙_°r
, 
ës
->
≥î
);

1211 
	`w¨n
("Cîtifiˇã CN: %†,Öì∏«mê%s", 
˙_°r
, 
ës
->
≥î
);

1216 i‡(
ës
->
≥î˚πfûe
[0]) {

1217 i‡(
	`s¶_cmp_˚πs
(&
ës
->
≥î˚πfûe
[0], 
≥î_˚π
)

1219 
îr‹


1226  
ok
;

1227 
	}
}

1232 
	$s¶_cmp_˚πs
(*
fûíame
, 
X509
 * 
a
)

1234 
X509
 *
b
;

1235 
ªt
;

1237 i‡(!(
b
 = 
	`gë_X509_‰om_fûe
(
fûíame
)))

1240 
ªt
 = 
	`X509_cmp
(
a
, 
b
);

1241 
	`X509_‰ì
(
b
);

1243  
ªt
;

1245 
	}
}

1247 
X509
 *
	$gë_X509_‰om_fûe
(*
fûíame
)

1249 
FILE
 *
Â
;

1250 
X509
 *
ªt
;

1252 i‡(!(
Â
 = 
	`f›í
(
fûíame
, "r")))

1253  
NULL
;

1255 
ªt
 = 
	`PEM_ªad_X509
(
Â
, 
NULL
, NULL, NULL);

1257 
	`f˛o£
(
Â
);

1259  
ªt
;

1260 
	}
}

1268 
	$s¶_msg_ˇŒback
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1269 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 * 
s¶
, *
¨g
)

1271 
°rög
[256];

1272 
ó±ls_£ssi⁄
 *
ës
 = (ó±ls_£ssi⁄ *)
¨g
;

1273 
code
;

1274 c⁄° *
msg
 = 
buf
;

1275 
hvîs
 = 
msg
[1] << 8 | msg[2];

1277 if(
wrôe_p
)

1278 
	`°r˝y
(
°rög
, " -> ");

1280 
	`°r˝y
(
°rög
, " <- ");

1282 
c⁄ã¡_ty≥
) {

1284 
SSL3_RT_HEADER
:

1285 
	`°rˇt
(
°rög
, "SSL/TLS Header: ");

1286 
hvîs
) {

1287 
SSL3_VERSION
:

1288 
	`°rˇt
(
°rög
, "SSL 3.0");

1290 
TLS1_VERSION
:

1291 
	`°rˇt
(
°rög
, "TLS 1.0");

1293 
TLS1_1_VERSION
:

1294 
	`°rˇt
(
°rög
, "TLS 1.1");

1296 
TLS1_2_VERSION
:

1297 
	`°rˇt
(
°rög
, "TLS 1.2");

1300 
	`•rötf
(
°rög
, "SSL/TLS Hódî: Unknow¿vîsi⁄ (%d)", 
hvîs
);

1304 
SSL3_RT_ALERT
:

1305 
	`°rˇt
(
°rög
, "Alert: ");

1306 
code
 = 
msg
[1];

1308 i‡(
wrôe_p
) {

1309 
ës
->
Æît_£¡
 = 1;

1310 
ës
->
Æît_£¡_desc
 = 
code
;

1312 
ës
->
Æît_ªcv
 = 1;

1313 
ës
->
Æît_ªcv_desc
 = 
code
;

1316 
	`°rˇt
(
°rög
, 
	`SSL_Æît_desc_°rög_l⁄g
(
code
));

1319 
SSL3_RT_CHANGE_CIPHER_SPEC
:

1320 
	`°rˇt
(
°rög
, "ChangeCipherSpec");

1323 #ifde‡
SSL3_RT_INNER_CONTENT_TYPE


1324 
SSL3_RT_INNER_CONTENT_TYPE
:

1325 
	`°rˇt
(
°rög
, "InnerContentType (TLS1.3)");

1329 
SSL3_RT_HANDSHAKE
:

1331 
	`°rˇt
(
°rög
, "Handshake: ");

1332 
code
 = 
msg
[0];

1334 
code
) {

1335 
SSL3_MT_HELLO_REQUEST
:

1336 
	`°rˇt
(
°rög
,"Hello Request");

1338 
SSL3_MT_CLIENT_HELLO
:

1339 
	`°rˇt
(
°rög
,"Client Hello");

1341 
SSL3_MT_SERVER_HELLO
:

1342 
	`°rˇt
(
°rög
,"Server Hello");

1344 #ifde‡
SSL3_MT_NEWSESSION_TICKET


1345 
SSL3_MT_NEWSESSION_TICKET
:

1346 
	`°rˇt
(
°rög
,"New Session Ticket");

1349 #ifde‡
SSL3_MT_END_OF_EARLY_DATA


1350 
SSL3_MT_END_OF_EARLY_DATA
:

1351 
	`°rˇt
(
°rög
,"End of Early Data");

1354 #ifde‡
SSL3_MT_ENCRYPTED_EXTENSIONS


1355 
SSL3_MT_ENCRYPTED_EXTENSIONS
:

1356 
	`°rˇt
(
°rög
,"Encryped Extensions");

1359 
SSL3_MT_CERTIFICATE
:

1360 
	`°rˇt
(
°rög
,"Certificate");

1362 
SSL3_MT_SERVER_KEY_EXCHANGE
:

1363 
	`°rˇt
(
°rög
,"Server Key Exchange");

1365 
SSL3_MT_CERTIFICATE_REQUEST
:

1366 
	`°rˇt
(
°rög
,"Certificate Request");

1368 
SSL3_MT_SERVER_DONE
:

1369 
	`°rˇt
(
°rög
,"Server Hello Done");

1371 
SSL3_MT_CERTIFICATE_VERIFY
:

1372 
	`°rˇt
(
°rög
,"Certificate Verify");

1374 
SSL3_MT_CLIENT_KEY_EXCHANGE
:

1375 
	`°rˇt
(
°rög
,"Client Key Exchange");

1377 
SSL3_MT_FINISHED
:

1378 
	`°rˇt
(
°rög
,"Finished: ");

1379 
hvîs
 = 
	`SSL_vîsi⁄
(
s¶
);

1380 
hvîs
){

1381 
SSL3_VERSION
:

1382 
	`°rˇt
(
°rög
, "SSL 3.0");

1384 
TLS1_VERSION
:

1385 
	`°rˇt
(
°rög
, "TLS 1.0");

1387 
TLS1_1_VERSION
:

1388 
	`°rˇt
(
°rög
, "TLS 1.1");

1390 
TLS1_2_VERSION
:

1391 
	`°rˇt
(
°rög
, "TLS 1.2");

1393 #ifde‡
TLS1_3_VERSION


1394 
TLS1_3_VERSION
:

1395 
	`°rˇt
(
°rög
, "TLS 1.3 (experimental)");

1396 
ës
->
és_v13
 = 1;

1400 
	`°rˇt
(
°rög
, "Unknown version");

1404 
	`•rötf
–
°rög
, "H™dshake: Unknow¿SSL3 codêª˚ived: %d", 
code
 );

1409 
	`•rötf
–
°rög
, "SSL mesßgêc⁄èö†unknow¿c⁄ã¡Åy≥: %d", 
c⁄ã¡_ty≥
 );

1413 if(
c⁄ã¡_ty≥
 =
SSL3_RT_ALERT
)

1414 
	`îr‹
("%s", 
°rög
);

1416 
	`dbglog
("%s", 
°rög
);

1417 
	}
}

1420 
	$s¶_√w_£ssi⁄_cb
(
SSL
 *
s
, 
SSL_SESSION
 *
£ss
)

1422 
	`dbglog
("EAP-TLS: Post-Handshake New Session Ticketárrived:");

1423 
have_£ssi⁄_tickë
 = 1;

1427 
	}
}

	@pppd/eap-tls.h

33 #i‚de‡
__EAP_TLS_H__


34 
	#__EAP_TLS_H__


	)

36 
	~"óp.h
"

38 
	~<›ís¶/s¶.h
>

39 
	~<›ís¶/bio.h
>

41 
	#EAP_TLS_FLAGS_LI
 128

	)

42 
	#EAP_TLS_FLAGS_MF
 64

	)

43 
	#EAP_TLS_FLAGS_START
 32

	)

45 
	#EAP_TLS_MAX_LEN
 65536

	)

47 
	só±ls_£ssi⁄


49 
u_ch¨
 *
	md©a
;

50 
	md©Æí
;

51 
	moff£t
;

52 
	mé¶í
;

53 
boﬁ
 
	m‰ag
;

54 
boﬁ
 
	més_v13
;

55 
SSL_CTX
 *
	m˘x
;

56 
SSL
 *
	ms¶
;

57 
BIO
 *
	m‰om_s¶
;

58 
BIO
 *
	möto_s¶
;

59 
	m≥î
[
MAXWORDLEN
];

60 
	m≥î˚πfûe
[
MAXWORDLEN
];

61 
boﬁ
 
	mÆît_£¡
;

62 
u_ch¨
 
	mÆît_£¡_desc
;

63 
boﬁ
 
	mÆît_ªcv
;

64 
u_ch¨
 
	mÆît_ªcv_desc
;

65 
	mπx
[
EAP_TLS_MAX_LEN
];

66 
	mπx_Àn
;

67 
	mmtu
;

71 
SSL_CTX
 *
ó±ls_öô_s¶
(
öô_£rvî
, *
ˇ˚πfûe
, *
ˇ∑th
,

72 *
˚πfûe
, *
≥î_˚πfûe
, *
¥ivkeyfûe
);

73 
ó±ls_öô_s¶_£rvî
(
óp_°©e
 * 
e•
);

74 
ó±ls_öô_s¶_˛õ¡
(
óp_°©e
 * 
e•
);

75 
ó±ls_‰ì_£ssi⁄
(
ó±ls_£ssi⁄
 *
ës
);

77 
ó±ls_is_öô_föished
(
ó±ls_£ssi⁄
 *
ës
);

79 
ó±ls_ª˚ive
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 * 
öp
, 
Àn
);

80 
ó±ls_£nd
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 ** 
ouç
);

81 
ó±ls_ªå™smô
(
ó±ls_£ssi⁄
 *
ës
, 
u_ch¨
 ** 
ouç
);

83 
gë_ó±ls_£¸ë
(
unô
, *
˛õ¡
, *
£rvî
,

84 *
˛i˚πfûe
, *
£rv˚πfûe
, *
ˇ˚πfûe
,

85 *
ˇ∑th
, *
pkfûe
, 
am_£rvî
);

87 #ifde‡
MPPE


88 
	~"mµe.h
"

89 
u_ch¨
 
mµe_£nd_key
[
MPPE_MAX_KEY_LEN
];

90 
u_ch¨
 
mµe_ªcv_key
[
MPPE_MAX_KEY_LEN
];

91 
mµe_keys_£t
;

93 
ó±ls_gí_mµe_keys
(
ó±ls_£ssi⁄
 *
ës
, 
˛õ¡
);

	@pppd/eap.c

51 
	#RCSID
 "$Id:É≠.c,v 1.4 2004/11/09 22:39:25Öaulu†Ex∞$"

	)

57 
	~<°dio.h
>

58 
	~<°dlib.h
>

59 
	~<°rög.h
>

60 
	~<uni°d.h
>

61 
	~<pwd.h
>

62 
	~<sys/ty≥s.h
>

63 
	~<sys/°©.h
>

64 
	~<f˙é.h
>

65 
	~<as£π.h
>

66 
	~<î∫o.h
>

68 
	~"µpd.h
"

69 
	~"∑th«mes.h
"

70 
	~"md5.h
"

71 
	~"óp.h
"

73 #ifde‡
USE_SRP


74 
	~<t_pwd.h
>

75 
	~<t_£rvî.h
>

76 
	~<t_˛õ¡.h
>

77 
	~"µp¸y±.h
"

80 #i‚de‡
SHA_DIGESTSIZE


81 
	#SHA_DIGESTSIZE
 20

	)

84 #ifde‡
USE_EAPTLS


85 
	~"óp-és.h
"

88 
óp_°©e
 
	góp_°©es
[
NUM_PPP
];

89 #ifde‡
USE_SRP


90 *
	g≤_£¸ë
 = 
NULL
;

96 
›ti⁄_t
 
	góp_›ti⁄_li°
[] = {

97 { "óp-ª°¨t", 
o_öt
, &
óp_°©es
[0].
es_£rvî
.
ó_timeout
,

99 { "óp-max-§eq", 
o_öt
, &
óp_°©es
[0].
es_£rvî
.
ó_maxªque°s
,

101 { "óp-timeout", 
o_öt
, &
óp_°©es
[0].
es_˛õ¡
.
ó_timeout
,

103 { "óp-max-ºeq", 
o_öt
, &
óp_°©es
[0].
es_˛õ¡
.
ó_maxªque°s
,

105 { "óp-öãrvÆ", 
o_öt
, &
óp_°©es
[0].
es_ªchÆÀnge
,

107 #ifde‡
USE_SRP


108 { "§p-öãrvÆ", 
o_öt
, &
óp_°©es
[0].
es_lwªchÆÀnge
,

110 { "§p-≤-£¸ë", 
o_°rög
, &
≤_£¸ë
,

112 { "§p-u£-p£ud⁄ym", 
o_boﬁ
, &
óp_°©es
[0].
es_u£p£udo
,

115 { 
NULL
 }

121 
óp_öô
 
__P
((
unô
));

122 
óp_öput
 
__P
((
unô
, 
u_ch¨
 *
öp
, 
öÀn
));

123 
óp_¥Ÿªj
 
__P
((
unô
));

124 
óp_lowîup
 
__P
((
unô
));

125 
óp_lowîdown
 
__P
((
unô
));

126 
óp_¥öçkt
 
__P
((
u_ch¨
 *
öp
, 
öÀn
,

127 (*)(*
¨g
, *
fmt
, ...), *arg));

129 
¥Ÿít
 
óp_¥Ÿít
 = {

130 
PPP_EAP
,

131 
óp_öô
,

132 
óp_öput
,

133 
óp_¥Ÿªj
,

134 
óp_lowîup
,

135 
óp_lowîdown
,

136 
NULL
,

137 
NULL
,

138 
óp_¥öçkt
,

139 
NULL
,

142 
NULL
,

143 
óp_›ti⁄_li°
,

144 
NULL
,

145 
NULL
,

146 
NULL


147 
	}
};

152 c⁄° 
u_ch¨
 
	gwkmodulus
[] = {

188 
óp_£rvî_timeout
 
__P
((*
¨g
));

194 
	$óp_°©e_«me
(
esc
)

195 
óp_°©e_code
 
esc
;

197 c⁄° *
°©e_«mes
[] = { 
EAP_STATES
 };

199  (
°©e_«mes
[()
esc
]);

200 
	}
}

207 
	$óp_öô
(
unô
)

208 
unô
;

210 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

212 
	`BZERO
(
e•
,  (*esp));

213 
e•
->
es_unô
 = 
unô
;

214 
e•
->
es_£rvî
.
ó_timeout
 = 
EAP_DEFTIMEOUT
;

215 
e•
->
es_£rvî
.
ó_maxªque°s
 = 
EAP_DEFTRANSMITS
;

216 
e•
->
es_£rvî
.
ó_id
 = (
u_ch¨
)(
	`dønd48
() * 0x100);

217 
e•
->
es_˛õ¡
.
ó_timeout
 = 
EAP_DEFREQTIME
;

218 
e•
->
es_˛õ¡
.
ó_maxªque°s
 = 
EAP_DEFALLOWREQ
;

219 #ifde‡
USE_EAPTLS


220 
e•
->
es_˛õ¡
.
ó_usög_ó±ls
 = 0;

222 
	}
}

229 
	$óp_˛õ¡_timeout
(
¨g
)

230 *
¨g
;

232 
óp_°©e
 *
e•
 = (óp_°©ê*Ë
¨g
;

234 i‡(!
	`óp_˛õ¡_a˘ive
(
e•
))

237 
	`îr‹
("EAP:Åimeout waiting for Request fromÖeer");

238 
	`auth_wôh≥î_Áû
(
e•
->
es_unô
, 
PPP_EAP
);

239 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópBadAuth
;

240 
	}
}

249 
	$óp_authwôh≥î
(
unô
, 
loˇ ame
)

250 
unô
;

251 *
loˇ ame
;

253 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

256 
e•
->
es_˛õ¡
.
ó_«me
 = 
loˇ ame
;

257 
e•
->
es_˛õ¡
.
ó_«mñí
 = 
	`°æí
(
loˇ ame
);

259 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópLi°í
;

265 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0)

266 
	`TIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
,

267 
e•
->
es_˛õ¡
.
ó_timeout
);

268 
	}
}

275 
	$óp_£nd_Áûuª
(
e•
)

276 
óp_°©e
 *
e•
;

278 
u_ch¨
 *
ouç
;

280 
ouç
 = 
ouçackë_buf
;

282 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

284 
	`PUTCHAR
(
EAP_FAILURE
, 
ouç
);

285 
e•
->
es_£rvî
.
ó_id
++;

286 
	`PUTCHAR
(
e•
->
es_£rvî
.
ó_id
, 
ouç
);

287 
	`PUTSHORT
(
EAP_HEADERLEN
, 
ouç
);

289 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
EAP_HEADERLEN
 + 
PPP_HDRLEN
);

291 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

292 
	`auth_≥î_Áû
(
e•
->
es_unô
, 
PPP_EAP
);

293 
	}
}

300 
	$óp_£nd_suc˚ss
(
e•
)

301 
óp_°©e
 *
e•
;

303 
u_ch¨
 *
ouç
;

305 
ouç
 = 
ouçackë_buf
;

307 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

309 
	`PUTCHAR
(
EAP_SUCCESS
, 
ouç
);

310 
e•
->
es_£rvî
.
ó_id
++;

311 
	`PUTCHAR
(
e•
->
es_£rvî
.
ó_id
, 
ouç
);

312 
	`PUTSHORT
(
EAP_HEADERLEN
, 
ouç
);

314 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
EAP_HEADERLEN
);

316 
	`auth_≥î_suc˚ss
(
e•
->
es_unô
, 
PPP_EAP
, 0,

317 
e•
->
es_£rvî
.
ó_≥î
,É•->es_£rvî.
ó_≥îÀn
);

318 
	}
}

320 #ifde‡
USE_SRP


325 
boﬁ


326 
	$≤¸y±_£tkey
(
timeoffs
)

328 
tm
 *
ç
;

329 
tbuf
[9];

330 
SHA1_CTX
 
˘xt
;

331 
u_ch¨
 
dig
[
SHA_DIGESTSIZE
];

332 
time_t
 
ª·ime
;

334 i‡(
≤_£¸ë
 =
NULL
)

336 
ª·ime
 = 
	`time
(
NULL
Ë+ 
timeoffs
;

337 
ç
 = 
	`loˇ…ime
(&
ª·ime
);

338 
	`SHA1Inô
(&
˘xt
);

339 
	`SHA1Upd©e
(&
˘xt
, 
≤_£¸ë
, 
	`°æí
(pn_secret));

340 
	`°r·ime
(
tbuf
,  (tbuf), "%Y%m%d", 
ç
);

341 
	`SHA1Upd©e
(&
˘xt
, 
tbuf
, 
	`°æí
(tbuf));

342 
	`SHA1FöÆ
(
dig
, &
˘xt
);

343  (
	`DesSëkey
(
dig
));

344 
	}
}

346 
	gba£64
[] =

349 
	sb64°©e
 {

350 
u_öt32_t
 
	mbs_bôs
;

351 
	mbs_offs
;

355 
	$b64íc
(
bs
, 
öp
, 
öÀn
, 
ouç
)

356 
b64°©e
 *
bs
;

357 
u_ch¨
 *
öp
;

358 
öÀn
;

359 
u_ch¨
 *
ouç
;

361 
ouéí
 = 0;

363 
öÀn
 > 0) {

364 
bs
->
bs_bôs
 = (bs->bs_bô†<< 8Ë| *
öp
++;

365 
öÀn
--;

366 
bs
->
bs_offs
 += 8;

367 i‡(
bs
->
bs_offs
 >= 24) {

368 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 18) & 0x3F];

369 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 12) & 0x3F];

370 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 6) & 0x3F];

371 *
ouç
++ = 
ba£64
[
bs
->
bs_bôs
 & 0x3F];

372 
ouéí
 += 4;

373 
bs
->
bs_offs
 = 0;

374 
bs
->
bs_bôs
 = 0;

377  (
ouéí
);

378 
	}
}

381 
	$b64Êush
(
bs
, 
ouç
)

382 
b64°©e
 *
bs
;

383 
u_ch¨
 *
ouç
;

385 
ouéí
 = 0;

387 i‡(
bs
->
bs_offs
 == 8) {

388 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 2) & 0x3F];

389 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 << 4) & 0x3F];

390 
ouéí
 = 2;

391 } i‡(
bs
->
bs_offs
 == 16) {

392 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 10) & 0x3F];

393 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 >> 4) & 0x3F];

394 *
ouç
++ = 
ba£64
[(
bs
->
bs_bôs
 << 2) & 0x3F];

395 
ouéí
 = 3;

397 
bs
->
bs_offs
 = 0;

398 
bs
->
bs_bôs
 = 0;

399  (
ouéí
);

400 
	}
}

403 
	$b64dec
(
bs
, 
öp
, 
öÀn
, 
ouç
)

404 
b64°©e
 *
bs
;

405 
u_ch¨
 *
öp
;

406 
öÀn
;

407 
u_ch¨
 *
ouç
;

409 
ouéí
 = 0;

410 *
˝
;

412 
öÀn
 > 0) {

413 i‡((
˝
 = 
	`°rchr
(
ba£64
, *
öp
++)Ë=
NULL
)

415 
bs
->
bs_bôs
 = (bs->bs_bô†<< 6Ë| (
˝
 - 
ba£64
);

416 
öÀn
--;

417 
bs
->
bs_offs
 += 6;

418 i‡(
bs
->
bs_offs
 >= 8) {

419 *
ouç
++ = 
bs
->
bs_bôs
 >> (bs->
bs_offs
 - 8);

420 
ouéí
++;

421 
bs
->
bs_offs
 -= 8;

424  (
ouéí
);

425 
	}
}

435 
	$óp_figuª_√xt_°©e
(
e•
, 
°©us
)

436 
óp_°©e
 *
e•
;

437 
°©us
;

439 #ifde‡
USE_SRP


440 
£cbuf
[
MAXWORDLEN
], 
˛ór
[8], *
•
, *
dp
;

441 
t_pw
 
çw
;

442 
t_c⁄„¡
 *
t˚
, 
myt˚
;

443 *
˝
, *
˝2
;

444 
t_£rvî
 *
ts
;

445 
id
, 
i
, 
∂í
, 
toffs
;

446 
u_ch¨
 
vÆs
[2];

447 
b64°©e
 
bs
;

449 #ifde‡
USE_EAPTLS


450 
ó±ls_£ssi⁄
 *
ës
;

451 
£¸ë_Àn
;

452 
£¸ë
[
MAXWORDLEN
];

455 
e•
->
es_£rvî
.
ó_timeout
 =É•->
es_ßvedtime
;

456 #ifde‡
USE_EAPTLS


457 
e•
->
es_£rvî
.
ó_¥ev_°©e
 =É•->es_£rvî.
ó_°©e
;

459 
e•
->
es_£rvî
.
ó_°©e
) {

460 
ópBadAuth
:

463 
ópIdítify
:

464 #ifde‡
USE_SRP


466 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

467 i‡(
ts
 !
NULL
) {

468 
	`t_£rvî˛o£
(
ts
);

469 
e•
->
es_£rvî
.
ó_£ssi⁄
 = 
NULL
;

470 
e•
->
es_£rvî
.
ó_skey
 = 
NULL
;

473 i‡(
°©us
 != 0) {

474 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

477 #ifde‡
USE_SRP


479 i‡(
e•
->
es_£rvî
.
ó_≥îÀn
 > 
SRP_PSEUDO_LEN
 &&

480 
	`°∫cmp
(
e•
->
es_£rvî
.
ó_≥î
, 
SRP_PSEUDO_ID
,

481 
SRP_PSEUDO_LEN
) == 0 &&

482 (
e•
->
es_£rvî
.
ó_≥îÀn
 - 
SRP_PSEUDO_LEN
) * 3 / 4 <

483  (
£cbuf
)) {

484 
	`BZERO
(&
bs
,  (bs));

485 
∂í
 = 
	`b64dec
(&
bs
,

486 
e•
->
es_£rvî
.
ó_≥î
 + 
SRP_PSEUDO_LEN
,

487 
e•
->
es_£rvî
.
ó_≥îÀn
 - 
SRP_PSEUDO_LEN
,

488 
£cbuf
);

489 
toffs
 = 0;

490 
i
 = 0; i < 5; i++) {

491 
	`≤¸y±_£tkey
(
toffs
);

492 
toffs
 -= 86400;

493 i‡(!
	`DesDe¸y±
(
£cbuf
, 
˛ór
)) {

494 
	`dbglog
("no DES here; cannot decode "

498 
id
 = *(*)
˛ór
;

499 i‡(
id
 + 1 <
∂í
 && id + 9 >Ölen)

502 i‡(
∂í
 % 8 =0 && 
i
 < 5) {

508 i‡((
i
 = 
∂í
 = *(*)
˛ór
) > 7)

509 
i
 = 7;

510 
e•
->
es_£rvî
.
ó_≥îÀn
 = 
∂í
;

511 
dp
 = (*)
e•
->
es_£rvî
.
ó_≥î
;

512 
	`BCOPY
(
˛ór
 + 1, 
dp
, 
i
);

513 
∂í
 -
i
;

514 
dp
 +
i
;

515 
•
 = 
£cbuf
 + 8;

516 
∂í
 > 0) {

517 (Ë
	`DesDe¸y±
(
•
, 
dp
);

518 
•
 += 8;

519 
dp
 += 8;

520 
∂í
 -= 8;

522 
e•
->
es_£rvî
.
ó_≥î
[

523 
e•
->
es_£rvî
.
ó_≥îÀn
] = '\0';

524 
	`dbglog
("decodedÖseudonymÅo \"%.*q\"",

525 
e•
->
es_£rvî
.
ó_≥îÀn
,

526 
e•
->
es_£rvî
.
ó_≥î
);

528 
	`dbglog
("failedÅo decodeÑealÇame");

534 i‡(
	`gë_§p_£¸ë
(
e•
->
es_unô
,É•->
es_£rvî
.
ó_≥î
,

535 
e•
->
es_£rvî
.
ó_«me
, (*)
£cbuf
, 1) != 0) {

537 
e•
->
es_£rvî
.
ó_°©e
 = 
ópMD5ChÆl
;

539 
id
 = 
	`°πﬁ
((*)
£cbuf
, &
˝
, 10);

540 i‡(*
˝
++ !':' || 
id
 < 0)

542 i‡(
id
 == 0) {

543 
myt˚
.
ödex
 = 0;

544 
myt˚
.
modulus
.
d©a
 = (
u_ch¨
 *)
wkmodulus
;

545 
myt˚
.
modulus
.
Àn
 =  (
wkmodulus
);

546 
myt˚
.
gíî©‹
.
d©a
 = (
u_ch¨
 *)"\002";

547 
myt˚
.
gíî©‹
.
Àn
 = 1;

548 
t˚
 = &
myt˚
;

549 } i‡((
t˚
 = 
	`gëtcid
(
id
)Ë!
NULL
) {

555 i‡(
e•
->
es_£rvî
.
ó_timeout
 > 0 &&

556 
e•
->
es_£rvî
.
ó_timeout
 < 30)

557 
e•
->
es_£rvî
.
ó_timeout
 = 30;

561 i‡((
˝2
 = 
	`°rchr
(
˝
, ':')Ë=
NULL
)

563 *
˝2
++ = '\0';

564 
çw
.
≥buf
.
«me
 = 
e•
->
es_£rvî
.
ó_≥î
;

565 
çw
.
≥buf
.
∑ssw‹d
.
Àn
 = 
	`t_‰omb64
((*Èpw.
pwbuf
,

566 
˝
);

567 
çw
.
≥buf
.
∑ssw‹d
.
d©a
 =Åpw.
pwbuf
;

568 
çw
.
≥buf
.
ß…
.
Àn
 = 
	`t_‰omb64
((*Èpw.
ß…buf
,

569 
˝2
);

570 
çw
.
≥buf
.
ß…
.
d©a
 =Åpw.
ß…buf
;

571 i‡((
ts
 = 
	`t_£rvî›íøw
(&
çw
.
≥buf
, 
t˚
)Ë=
NULL
)

573 
e•
->
es_£rvî
.
ó_£ssi⁄
 = (*)
ts
;

574 
e•
->
es_£rvî
.
ó_°©e
 = 
ópSRP1
;

575 
vÆs
[0] = 
e•
->
es_£rvî
.
ó_id
 + 1;

576 
vÆs
[1] = 
EAPT_SRP
;

577 
	`t_£rvîaddexd©a
(
ts
, 
vÆs
, 2);

579 
	`t_£rvîgíexp
(
ts
);

583 #ifde‡
USE_EAPTLS


584 i‡(!
	`gë_£¸ë
(
e•
->
es_unô
,É•->
es_£rvî
.
ó_≥î
,

585 
e•
->
es_£rvî
.
ó_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

587 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSèπ
;

592 
e•
->
es_£rvî
.
ó_°©e
 = 
ópMD5ChÆl
;

595 #ifde‡
USE_EAPTLS


596 
ópTlsSèπ
:

598 if(!
	`ó±ls_öô_s¶_£rvî
(
e•
)) {

599 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

603 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecv
;

606 
ópTlsRecv
:

607 
ës
 = (
ó±ls_£ssi⁄
 *Ë
e•
->
es_£rvî
.
ó_£ssi⁄
;

609 if(
ës
->
Æît_£¡
) {

610 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSídAÀπ
;

614 i‡(
°©us
) {

615 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

618 
ës
 = (
ó±ls_£ssi⁄
 *Ë
e•
->
es_£rvî
.
ó_£ssi⁄
;

620 if(
ës
->
‰ag
)

621 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSídAck
;

623 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSíd
;

626 
ópTlsSíd
:

627 
ës
 = (
ó±ls_£ssi⁄
 *Ë
e•
->
es_£rvî
.
ó_£ssi⁄
;

629 if(
ës
->
‰ag
)

630 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecvAck
;

632 if(
	`SSL_is_öô_föished
(
ës
->
s¶
))

633 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecvClõ¡
;

636 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecv
;

639 
ópTlsSídAck
:

640 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecv
;

643 
ópTlsRecvAck
:

644 i‡(
°©us
)

646 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

650 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSíd
;

653 
ópTlsSídAÀπ
:

654 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsRecvAÀπAck
;

658 
ópSRP1
:

659 #ifde‡
USE_SRP


660 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

661 i‡(
ts
 !
NULL
 && 
°©us
 != 0) {

662 
	`t_£rvî˛o£
(
ts
);

663 
e•
->
es_£rvî
.
ó_£ssi⁄
 = 
NULL
;

664 
e•
->
es_£rvî
.
ó_skey
 = 
NULL
;

667 i‡(
°©us
 == 1) {

668 
e•
->
es_£rvî
.
ó_°©e
 = 
ópMD5ChÆl
;

669 } i‡(
°©us
 !0 || 
e•
->
es_£rvî
.
ó_£ssi⁄
 =
NULL
) {

670 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

672 
e•
->
es_£rvî
.
ó_°©e
 = 
ópSRP2
;

676 
ópSRP2
:

677 #ifde‡
USE_SRP


678 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

679 i‡(
ts
 !
NULL
 && 
°©us
 != 0) {

680 
	`t_£rvî˛o£
(
ts
);

681 
e•
->
es_£rvî
.
ó_£ssi⁄
 = 
NULL
;

682 
e•
->
es_£rvî
.
ó_skey
 = 
NULL
;

685 i‡(
°©us
 !0 || 
e•
->
es_£rvî
.
ó_£ssi⁄
 =
NULL
) {

686 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

688 
e•
->
es_£rvî
.
ó_°©e
 = 
ópSRP3
;

692 
ópSRP3
:

693 
ópSRP4
:

694 #ifde‡
USE_SRP


695 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

696 i‡(
ts
 !
NULL
 && 
°©us
 != 0) {

697 
	`t_£rvî˛o£
(
ts
);

698 
e•
->
es_£rvî
.
ó_£ssi⁄
 = 
NULL
;

699 
e•
->
es_£rvî
.
ó_skey
 = 
NULL
;

702 i‡(
°©us
 !0 || 
e•
->
es_£rvî
.
ó_£ssi⁄
 =
NULL
) {

703 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

705 
e•
->
es_£rvî
.
ó_°©e
 = 
ópO≥n
;

709 
ópMD5ChÆl
:

710 i‡(
°©us
 != 0) {

711 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

713 
e•
->
es_£rvî
.
ó_°©e
 = 
ópO≥n
;

718 
e•
->
es_£rvî
.
ó_°©e
 = 
ópBadAuth
;

721 i‡(
e•
->
es_£rvî
.
ó_°©e
 =
ópBadAuth
)

722 
	`óp_£nd_Áûuª
(
e•
);

724 #ifde‡
USE_EAPTLS


725 
	`dbglog
("EAP id=0x%2x '%s' -> '%s'", 
e•
->
es_£rvî
.
ó_id
, 
	`óp_°©e_«me
”•->es_£rvî.
ó_¥ev_°©e
),É≠_°©e_«me”•->es_£rvî.
ó_°©e
));

727 
	}
}

734 
	$óp_£nd_ªque°
(
e•
)

735 
óp_°©e
 *
e•
;

737 
u_ch¨
 *
ouç
;

738 
u_ch¨
 *
À∆oc
;

739 
u_ch¨
 *
±r
;

740 
ouéí
;

741 
chÆÀn
;

742 *
°r
;

743 #ifde‡
USE_SRP


744 
t_£rvî
 *
ts
;

745 
u_ch¨
 
˛ór
[8], 
cùhî
[8], 
dig
[
SHA_DIGESTSIZE
], *
›å
, *
˝
;

746 
i
, 
j
;

747 
b64°©e
 
b64
;

748 
SHA1_CTX
 
˘xt
;

752 i‡(
e•
->
es_£rvî
.
ó_°©e
 < 
ópIdítify
 &&

753 
e•
->
es_£rvî
.
ó_°©e
 !
ópInôül
) {

754 
e•
->
es_£rvî
.
ó_°©e
 = 
ópIdítify
;

755 i‡(
ex∂icô_ªmŸe
) {

761 
e•
->
es_£rvî
.
ó_≥î
 = 
ªmŸe_«me
;

762 
e•
->
es_£rvî
.
ó_≥îÀn
 = 
	`°æí
(
ªmŸe_«me
);

763 
	`óp_figuª_√xt_°©e
(
e•
, 0);

767 i‡(
e•
->
es_£rvî
.
ó_maxªque°s
 > 0 &&

768 
e•
->
es_£rvî
.
ó_ªque°s
 >e•->es_£rvî.
ó_maxªque°s
) {

769 i‡(
e•
->
es_£rvî
.
ó_ª•⁄£s
 > 0)

770 
	`îr‹
("EAP:Åoo many Requests sent");

772 
	`îr‹
("EAP:ÇoÑesponseÅo Requests");

773 
	`óp_£nd_Áûuª
(
e•
);

777 
ouç
 = 
ouçackë_buf
;

779 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

781 
	`PUTCHAR
(
EAP_REQUEST
, 
ouç
);

782 
	`PUTCHAR
(
e•
->
es_£rvî
.
ó_id
, 
ouç
);

783 
À∆oc
 = 
ouç
;

784 
	`INCPTR
(2, 
ouç
);

786 
e•
->
es_£rvî
.
ó_°©e
) {

787 
ópIdítify
:

788 
	`PUTCHAR
(
EAPT_IDENTITY
, 
ouç
);

789 
°r
 = "Name";

790 
chÆÀn
 = 
	`°æí
(
°r
);

791 
	`BCOPY
(
°r
, 
ouç
, 
chÆÀn
);

792 
	`INCPTR
(
chÆÀn
, 
ouç
);

795 
ópMD5ChÆl
:

796 
	`PUTCHAR
(
EAPT_MD5CHAP
, 
ouç
);

801 
chÆÀn
 = (
	`dønd48
() *

802 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) +

803 
MIN_CHALLENGE_LENGTH
;

804 
	`PUTCHAR
(
chÆÀn
, 
ouç
);

805 
e•
->
es_chÆÀn
 = 
chÆÀn
;

806 
±r
 = 
e•
->
es_chÆÀnge
;

807 --
chÆÀn
 >= 0)

808 *
±r
++ = (
u_ch¨
Ë(
	`dønd48
() * 0x100);

809 
	`BCOPY
(
e•
->
es_chÆÀnge
, 
ouç
,É•->
es_chÆÀn
);

810 
	`INCPTR
(
e•
->
es_chÆÀn
, 
ouç
);

811 
	`BCOPY
(
e•
->
es_£rvî
.
ó_«me
, 
ouç
,É•->es_£rvî.
ó_«mñí
);

812 
	`INCPTR
(
e•
->
es_£rvî
.
ó_«mñí
, 
ouç
);

815 #ifde‡
USE_EAPTLS


816 
ópTlsSèπ
:

817 
	`PUTCHAR
(
EAPT_TLS
, 
ouç
);

818 
	`PUTCHAR
(
EAP_TLS_FLAGS_START
, 
ouç
);

819 
	`óp_figuª_√xt_°©e
(
e•
, 0);

822 
ópTlsSíd
:

823 
	`ó±ls_£nd
(
e•
->
es_£rvî
.
ó_£ssi⁄
, &
ouç
);

824 
	`óp_figuª_√xt_°©e
(
e•
, 0);

827 
ópTlsSídAck
:

828 
	`PUTCHAR
(
EAPT_TLS
, 
ouç
);

829 
	`PUTCHAR
(0, 
ouç
);

830 
	`óp_figuª_√xt_°©e
(
e•
, 0);

833 
ópTlsSídAÀπ
:

834 
	`ó±ls_£nd
(
e•
->
es_£rvî
.
ó_£ssi⁄
, &
ouç
);

835 
	`óp_figuª_√xt_°©e
(
e•
, 0);

839 #ifde‡
USE_SRP


840 
ópSRP1
:

841 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

842 
	`PUTCHAR
(
EAPSRP_CHALLENGE
, 
ouç
);

844 
	`PUTCHAR
(
e•
->
es_£rvî
.
ó_«mñí
, 
ouç
);

845 
	`BCOPY
(
e•
->
es_£rvî
.
ó_«me
, 
ouç
,É•->es_£rvî.
ó_«mñí
);

846 
	`INCPTR
(
e•
->
es_£rvî
.
ó_«mñí
, 
ouç
);

848 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

849 
	`as£π
(
ts
 !
NULL
);

850 
	`PUTCHAR
(
ts
->
s
.
Àn
, 
ouç
);

851 
	`BCOPY
(
ts
->
s
.
d©a
, 
ouç
,Ås->s.
Àn
);

852 
	`INCPTR
(
ts
->
s
.
Àn
, 
ouç
);

854 i‡(
ts
->
g
.
Àn
 =1 &&Ås->g.
d©a
[0] == 2) {

855 
	`PUTCHAR
(0, 
ouç
);

857 
	`PUTCHAR
(
ts
->
g
.
Àn
, 
ouç
);

858 
	`BCOPY
(
ts
->
g
.
d©a
, 
ouç
,Ås->g.
Àn
);

859 
	`INCPTR
(
ts
->
g
.
Àn
, 
ouç
);

862 i‡(
ts
->
n
.
Àn
 ! (
wkmodulus
) ||

863 
	`BCMP
(
ts
->
n
.
d©a
, 
wkmodulus
,  (wkmodulus)) != 0) {

864 
	`BCOPY
(
ts
->
n
.
d©a
, 
ouç
,Ås->n.
Àn
);

865 
	`INCPTR
(
ts
->
n
.
Àn
, 
ouç
);

869 
ópSRP2
:

870 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

871 
	`PUTCHAR
(
EAPSRP_SKEY
, 
ouç
);

873 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

874 
	`as£π
(
ts
 !
NULL
);

875 
	`BCOPY
(
ts
->
B
.
d©a
, 
ouç
,Ås->B.
Àn
);

876 
	`INCPTR
(
ts
->
B
.
Àn
, 
ouç
);

879 
ópSRP3
:

880 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

881 
	`PUTCHAR
(
EAPSRP_SVALIDATOR
, 
ouç
);

882 
	`PUTLONG
(
SRPVAL_EBIT
, 
ouç
);

883 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

884 
	`as£π
(
ts
 !
NULL
);

885 
	`BCOPY
(
	`t_£rvîª•⁄£
(
ts
), 
ouç
, 
SHA_DIGESTSIZE
);

886 
	`INCPTR
(
SHA_DIGESTSIZE
, 
ouç
);

888 i‡(
	`≤¸y±_£tkey
(0)) {

890 
›å
 = 
ouç
;

891 
˝
 = (*)
e•
->
es_£rvî
.
ó_≥î
;

892 i‡((
j
 = 
i
 = 
e•
->
es_£rvî
.
ó_≥îÀn
) > 7)

893 
j
 = 7;

894 
˛ór
[0] = 
i
;

895 
	`BCOPY
(
˝
, 
˛ór
 + 1, 
j
);

896 
i
 -
j
;

897 
˝
 +
j
;

898 i‡(!
	`DesEn¸y±
(
˛ór
, 
cùhî
)) {

899 
	`dbglog
("no DES here;Çot generatingÖseudonym");

902 
	`BZERO
(&
b64
,  (b64));

903 
ouç
++;

904 
ouç
 +
	`b64íc
(&
b64
, 
cùhî
, 8, outp);

905 
i
 >= 8) {

906 (Ë
	`DesEn¸y±
(
˝
, 
cùhî
);

907 
ouç
 +
	`b64íc
(&
b64
, 
cùhî
, 8, outp);

908 
˝
 += 8;

909 
i
 -= 8;

911 i‡(
i
 > 0) {

912 
	`BCOPY
(
˝
, 
˛ór
, 
i
);

913 
˝
 +
i
;

914 
i
 < 8) {

915 *
˝
++ = 
	`dønd48
() * 0x100;

916 
i
++;

918 (Ë
	`DesEn¸y±
(
˛ór
, 
cùhî
);

919 
ouç
 +
	`b64íc
(&
b64
, 
cùhî
, 8, outp);

921 
ouç
 +
	`b64Êush
(&
b64
, outp);

924 
i
 = 
ouç
 - 
›å
 - 1;

925 *
›å
 = 
i
;

926 
i
 %
SHA_DIGESTSIZE
;

927 i‡(
i
 != 0) {

928 
i
 < 
SHA_DIGESTSIZE
) {

929 *
ouç
++ = 
	`dønd48
() * 0x100;

930 
i
++;

935 
	`SHA1Inô
(&
˘xt
);

936 
	`SHA1Upd©e
(&
˘xt
, &
e•
->
es_£rvî
.
ó_id
, 1);

937 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_£rvî
.
ó_skey
,

938 
SESSION_KEY_LEN
);

939 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_£rvî
.
ó_≥î
,

940 
e•
->
es_£rvî
.
ó_≥îÀn
);

941 
›å
 < 
ouç
) {

942 
	`SHA1FöÆ
(
dig
, &
˘xt
);

943 
˝
 = 
dig
;

944 
˝
 < 
dig
 + 
SHA_DIGESTSIZE
)

945 *
›å
++ ^*
˝
++;

946 
	`SHA1Inô
(&
˘xt
);

947 
	`SHA1Upd©e
(&
˘xt
, &
e•
->
es_£rvî
.
ó_id
, 1);

948 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_£rvî
.
ó_skey
,

949 
SESSION_KEY_LEN
);

950 
	`SHA1Upd©e
(&
˘xt
, 
›å
 - 
SHA_DIGESTSIZE
,

951 
SHA_DIGESTSIZE
);

956 
ópSRP4
:

957 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

958 
	`PUTCHAR
(
EAPSRP_LWRECHALLENGE
, 
ouç
);

959 
chÆÀn
 = 
MIN_CHALLENGE_LENGTH
 +

960 ((
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
Ë* 
	`dønd48
());

961 
e•
->
es_chÆÀn
 = 
chÆÀn
;

962 
±r
 = 
e•
->
es_chÆÀnge
;

963 --
chÆÀn
 >= 0)

964 *
±r
++ = 
	`dønd48
() * 0x100;

965 
	`BCOPY
(
e•
->
es_chÆÀnge
, 
ouç
,É•->
es_chÆÀn
);

966 
	`INCPTR
(
e•
->
es_chÆÀn
, 
ouç
);

974 
ouéí
 = (
ouç
 - 
ouçackë_buf
Ë- 
PPP_HDRLEN
;

975 
	`PUTSHORT
(
ouéí
, 
À∆oc
);

977 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

979 
e•
->
es_£rvî
.
ó_ªque°s
++;

981 i‡(
e•
->
es_£rvî
.
ó_timeout
 > 0)

982 
	`TIMEOUT
(
óp_£rvî_timeout
, 
e•
,É•->
es_£rvî
.
ó_timeout
);

983 
	}
}

992 
	$óp_auth≥î
(
unô
, 
loˇ ame
)

993 
unô
;

994 *
loˇ ame
;

996 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

999 
e•
->
es_£rvî
.
ó_«me
 = 
loˇ ame
;

1000 
e•
->
es_£rvî
.
ó_«mñí
 = 
	`°æí
(
loˇ ame
);

1002 
e•
->
es_ßvedtime
 =É•->
es_£rvî
.
ó_timeout
;

1005 i‡(
e•
->
es_£rvî
.
ó_°©e
 =
ópInôül
 ||

1006 
e•
->
es_£rvî
.
ó_°©e
 =
ópPídög
) {

1007 
e•
->
es_£rvî
.
ó_°©e
 = 
ópPídög
;

1011 
e•
->
es_£rvî
.
ó_°©e
 = 
ópPídög
;

1014 
	`óp_£nd_ªque°
(
e•
);

1015 
	}
}

1022 
	$óp_£rvî_timeout
(
¨g
)

1023 *
¨g
;

1025 #ifde‡
USE_EAPTLS


1026 
u_ch¨
 *
ouç
;

1027 
u_ch¨
 *
À∆oc
;

1028 
ouéí
;

1031 
óp_°©e
 *
e•
 = (óp_°©ê*Ë
¨g
;

1033 i‡(!
	`óp_£rvî_a˘ive
(
e•
))

1036 #ifde‡
USE_EAPTLS


1037 
e•
->
es_£rvî
.
ó_¥ev_°©e
) {

1043 (
ópTlsSèπ
):

1044 (
ópTlsSídAck
):

1045 
e•
->
es_£rvî
.
ó_°©e
 =É•->es_£rvî.
ó_¥ev_°©e
;

1051 (
ópTlsSíd
):

1052 (
ópTlsSídAÀπ
):

1053 
ouç
 = 
ouçackë_buf
;

1054 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1055 
	`PUTCHAR
(
EAP_REQUEST
, 
ouç
);

1056 
	`PUTCHAR
(
e•
->
es_£rvî
.
ó_id
, 
ouç
);

1057 
À∆oc
 = 
ouç
;

1058 
	`INCPTR
(2, 
ouç
);

1060 
	`ó±ls_ªå™smô
(
e•
->
es_£rvî
.
ó_£ssi⁄
, &
ouç
);

1062 
ouéí
 = (
ouç
 - 
ouçackë_buf
Ë- 
PPP_HDRLEN
;

1063 
	`PUTSHORT
(
ouéí
, 
À∆oc
);

1064 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

1065 
e•
->
es_£rvî
.
ó_ªque°s
++;

1067 i‡(
e•
->
es_£rvî
.
ó_timeout
 > 0)

1068 
	`TIMEOUT
(
óp_£rvî_timeout
, 
e•
,É•->
es_£rvî
.
ó_timeout
);

1077 
	`óp_£nd_ªque°
(
e•
);

1078 
	}
}

1086 
	$óp_ªchÆÀnge
(
¨g
)

1087 *
¨g
;

1089 
óp_°©e
 *
e•
 = (óp_°©ê*)
¨g
;

1091 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópO≥n
 &&

1092 
e•
->
es_£rvî
.
ó_°©e
 !
ópSRP4
)

1095 
e•
->
es_£rvî
.
ó_ªque°s
 = 0;

1096 
e•
->
es_£rvî
.
ó_°©e
 = 
ópIdítify
;

1097 
	`óp_figuª_√xt_°©e
(
e•
, 0);

1098 
e•
->
es_£rvî
.
ó_id
++;

1099 
	`óp_£nd_ªque°
(
e•
);

1100 
	}
}

1103 
	$§p_lwªchÆÀnge
(
¨g
)

1104 *
¨g
;

1106 
óp_°©e
 *
e•
 = (óp_°©ê*)
¨g
;

1108 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópO≥n
 ||

1109 
e•
->
es_£rvî
.
ó_ty≥
 !
EAPT_SRP
)

1112 
e•
->
es_£rvî
.
ó_ªque°s
 = 0;

1113 
e•
->
es_£rvî
.
ó_°©e
 = 
ópSRP4
;

1114 
e•
->
es_£rvî
.
ó_id
++;

1115 
	`óp_£nd_ªque°
(
e•
);

1116 
	}
}

1127 
	$óp_lowîup
(
unô
)

1128 
unô
;

1130 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

1133 i‡(
e•
->
es_£rvî
.
ó_≥î
 !
NULL
 &&

1134 
e•
->
es_£rvî
.
ó_≥î
 !
ªmŸe_«me
)

1135 
	`‰ì
(
e•
->
es_£rvî
.
ó_≥î
);

1136 
e•
->
es_£rvî
.
ó_≥î
 = 
NULL
;

1137 i‡(
e•
->
es_˛õ¡
.
ó_≥î
 !
NULL
)

1138 
	`‰ì
(
e•
->
es_˛õ¡
.
ó_≥î
);

1139 
e•
->
es_˛õ¡
.
ó_≥î
 = 
NULL
;

1141 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópClo£d
;

1142 
e•
->
es_£rvî
.
ó_°©e
 = 
ópClo£d
;

1143 
	}
}

1151 
	$óp_lowîdown
(
unô
)

1152 
unô
;

1154 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

1156 i‡(
	`óp_˛õ¡_a˘ive
(
e•
Ë&&É•->
es_˛õ¡
.
ó_timeout
 > 0) {

1157 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

1159 i‡(
	`óp_£rvî_a˘ive
(
e•
)) {

1160 i‡(
e•
->
es_£rvî
.
ó_timeout
 > 0) {

1161 
	`UNTIMEOUT
(
óp_£rvî_timeout
, (*)
e•
);

1164 i‡((
e•
->
es_£rvî
.
ó_°©e
 =
ópO≥n
 ||

1165 
e•
->
es_£rvî
.
ó_°©e
 =
ópSRP4
) &&

1166 
e•
->
es_ªchÆÀnge
 > 0) {

1167 
	`UNTIMEOUT
(
óp_ªchÆÀnge
, (*)
e•
);

1169 i‡(
e•
->
es_£rvî
.
ó_°©e
 =
ópO≥n
 &&

1170 
e•
->
es_lwªchÆÀnge
 > 0) {

1171 
	`UNTIMEOUT
(
§p_lwªchÆÀnge
, (*)
e•
);

1175 
e•
->
es_˛õ¡
.
ó_°©e
 =É•->
es_£rvî
.ó_°©ê
ópInôül
;

1176 
e•
->
es_˛õ¡
.
ó_ªque°s
 =É•->
es_£rvî
.ea_requests = 0;

1177 
	}
}

1186 
	$óp_¥Ÿªj
(
unô
)

1187 
unô
;

1189 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

1191 i‡(
	`óp_˛õ¡_a˘ive
(
e•
)) {

1192 
	`îr‹
("EAPáuthentication failed dueÅo Protocol-Reject");

1193 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_EAP
);

1195 i‡(
	`óp_£rvî_a˘ive
(
e•
)) {

1196 
	`îr‹
("EAPáuthentication ofÖeer failed on Protocol-Reject");

1197 
	`auth_≥î_Áû
(
unô
, 
PPP_EAP
);

1199 
	`óp_lowîdown
(
unô
);

1200 
	}
}

1206 
	$óp_£nd_ª•⁄£
(
e•
, 
id
, 
ty≥num
, 
°r
, 
Àn°r
)

1207 
óp_°©e
 *
e•
;

1208 
u_ch¨
 
id
;

1209 
u_ch¨
 
ty≥num
;

1210 
u_ch¨
 *
°r
;

1211 
Àn°r
;

1213 
u_ch¨
 *
ouç
;

1214 
msgÀn
;

1216 
ouç
 = 
ouçackë_buf
;

1218 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1220 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1221 
	`PUTCHAR
(
id
, 
ouç
);

1222 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1223 
msgÀn
 = 
EAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
Àn°r
;

1224 
	`PUTSHORT
(
msgÀn
, 
ouç
);

1225 
	`PUTCHAR
(
ty≥num
, 
ouç
);

1226 i‡(
Àn°r
 > 0) {

1227 
	`BCOPY
(
°r
, 
ouç
, 
Àn°r
);

1230 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
msgÀn
);

1231 
	}
}

1237 
	$óp_ch≠_ª•⁄£
(
e•
, 
id
, 
hash
, 
«me
, 
«mñí
)

1238 
óp_°©e
 *
e•
;

1239 
u_ch¨
 
id
;

1240 
u_ch¨
 *
hash
;

1241 *
«me
;

1242 
«mñí
;

1244 
u_ch¨
 *
ouç
;

1245 
msgÀn
;

1247 
ouç
 = 
ouçackë_buf
;

1249 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1251 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1252 
	`PUTCHAR
(
id
, 
ouç
);

1253 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1254 
msgÀn
 = 
EAP_HEADERLEN
 + 2 *  (
u_ch¨
Ë+ 
MD5_SIGNATURE_SIZE
 +

1255 
«mñí
;

1256 
	`PUTSHORT
(
msgÀn
, 
ouç
);

1257 
	`PUTCHAR
(
EAPT_MD5CHAP
, 
ouç
);

1258 
	`PUTCHAR
(
MD5_SIGNATURE_SIZE
, 
ouç
);

1259 
	`BCOPY
(
hash
, 
ouç
, 
MD5_SIGNATURE_SIZE
);

1260 
	`INCPTR
(
MD5_SIGNATURE_SIZE
, 
ouç
);

1261 i‡(
«mñí
 > 0) {

1262 
	`BCOPY
(
«me
, 
ouç
, 
«mñí
);

1265 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
msgÀn
);

1266 
	}
}

1268 #ifde‡
USE_SRP


1273 
	$óp_§p_ª•⁄£
(
e•
, 
id
, 
subty≥num
, 
°r
, 
Àn°r
)

1274 
óp_°©e
 *
e•
;

1275 
u_ch¨
 
id
;

1276 
u_ch¨
 
subty≥num
;

1277 
u_ch¨
 *
°r
;

1278 
Àn°r
;

1280 
u_ch¨
 *
ouç
;

1281 
msgÀn
;

1283 
ouç
 = 
ouçackë_buf
;

1285 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1287 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1288 
	`PUTCHAR
(
id
, 
ouç
);

1289 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1290 
msgÀn
 = 
EAP_HEADERLEN
 + 2 *  (
u_ch¨
Ë+ 
Àn°r
;

1291 
	`PUTSHORT
(
msgÀn
, 
ouç
);

1292 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

1293 
	`PUTCHAR
(
subty≥num
, 
ouç
);

1294 i‡(
Àn°r
 > 0) {

1295 
	`BCOPY
(
°r
, 
ouç
, 
Àn°r
);

1298 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
msgÀn
);

1299 
	}
}

1305 
	$óp_§pvÆ_ª•⁄£
(
e•
, 
id
, 
Êags
, 
°r
)

1306 
óp_°©e
 *
e•
;

1307 
u_ch¨
 
id
;

1308 
u_öt32_t
 
Êags
;

1309 
u_ch¨
 *
°r
;

1311 
u_ch¨
 *
ouç
;

1312 
msgÀn
;

1314 
ouç
 = 
ouçackë_buf
;

1316 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1318 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1319 
	`PUTCHAR
(
id
, 
ouç
);

1320 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1321 
msgÀn
 = 
EAP_HEADERLEN
 + 2 *  (
u_ch¨
Ë+  (
u_öt32_t
) +

1322 
SHA_DIGESTSIZE
;

1323 
	`PUTSHORT
(
msgÀn
, 
ouç
);

1324 
	`PUTCHAR
(
EAPT_SRP
, 
ouç
);

1325 
	`PUTCHAR
(
EAPSRP_CVALIDATOR
, 
ouç
);

1326 
	`PUTLONG
(
Êags
, 
ouç
);

1327 
	`BCOPY
(
°r
, 
ouç
, 
SHA_DIGESTSIZE
);

1329 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
msgÀn
);

1330 
	}
}

1333 #ifde‡
USE_EAPTLS


1338 
	$óp_és_ª•⁄£
(
e•
, 
id
)

1339 
óp_°©e
 *
e•
;

1340 
u_ch¨
 
id
;

1342 
u_ch¨
 *
ouç
;

1343 
ouéí
;

1344 
u_ch¨
 *
À∆oc
;

1346 
ouç
 = 
ouçackë_buf
;

1348 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1350 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1351 
	`PUTCHAR
(
id
, 
ouç
);

1353 
À∆oc
 = 
ouç
;

1354 
	`INCPTR
(2, 
ouç
);

1360 if(
id
 =
e•
->
es_˛õ¡
.
ó_id
)

1361 
	`ó±ls_ªå™smô
(
e•
->
es_˛õ¡
.
ó_£ssi⁄
, &
ouç
);

1363 
	`ó±ls_£nd
(
e•
->
es_˛õ¡
.
ó_£ssi⁄
, &
ouç
);

1365 
ouéí
 = (
ouç
 - 
ouçackë_buf
Ë- 
PPP_HDRLEN
;

1366 
	`PUTSHORT
(
ouéí
, 
À∆oc
);

1368 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
ouéí
);

1370 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1371 
	}
}

1377 
	$óp_és_£ndack
(
e•
, 
id
)

1378 
óp_°©e
 *
e•
;

1379 
u_ch¨
 
id
;

1381 
u_ch¨
 *
ouç
;

1382 
ouéí
;

1383 
u_ch¨
 *
À∆oc
;

1385 
ouç
 = 
ouçackë_buf
;

1387 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1389 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1390 
	`PUTCHAR
(
id
, 
ouç
);

1391 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1393 
À∆oc
 = 
ouç
;

1394 
	`INCPTR
(2, 
ouç
);

1396 
	`PUTCHAR
(
EAPT_TLS
, 
ouç
);

1397 
	`PUTCHAR
(0, 
ouç
);

1399 
ouéí
 = (
ouç
 - 
ouçackë_buf
Ë- 
PPP_HDRLEN
;

1400 
	`PUTSHORT
(
ouéí
, 
À∆oc
);

1402 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
ouéí
);

1403 
	}
}

1407 
	$óp_£nd_«k
(
e•
, 
id
, 
ty≥
)

1408 
óp_°©e
 *
e•
;

1409 
u_ch¨
 
id
;

1410 
u_ch¨
 
ty≥
;

1412 
u_ch¨
 *
ouç
;

1413 
msgÀn
;

1415 
ouç
 = 
ouçackë_buf
;

1417 
	`MAKEHEADER
(
ouç
, 
PPP_EAP
);

1419 
	`PUTCHAR
(
EAP_RESPONSE
, 
ouç
);

1420 
	`PUTCHAR
(
id
, 
ouç
);

1421 
e•
->
es_˛õ¡
.
ó_id
 = 
id
;

1422 
msgÀn
 = 
EAP_HEADERLEN
 + 2 *  (
u_ch¨
);

1423 
	`PUTSHORT
(
msgÀn
, 
ouç
);

1424 
	`PUTCHAR
(
EAPT_NAK
, 
ouç
);

1425 
	`PUTCHAR
(
ty≥
, 
ouç
);

1427 
	`ouçut
(
e•
->
es_unô
, 
ouçackë_buf
, 
PPP_HDRLEN
 + 
msgÀn
);

1428 
	}
}

1430 #ifde‡
USE_SRP


1432 
	$«me_of_≤_fûe
()

1434 *
u£r
, *
∑th
, *
fûe
;

1435 
∑sswd
 *
pw
;

1436 
size_t
 
∂
;

1437 
boﬁ
 
≤logged
 = 0;

1439 
pw
 = 
	`gëpwuid
(
	`gëuid
());

1440 i‡(
pw
 =
NULL
 || (
u£r
 =Öw->
pw_dú
) == NULL || user[0] == 0) {

1441 
î∫o
 = 
EINVAL
;

1442  (
NULL
);

1444 
fûe
 = 
_PATH_PSEUDONYM
;

1445 
∂
 = 
	`°æí
(
u£r
Ë+ såÀn(
fûe
) + 2;

1446 
∑th
 = 
	`mÆloc
(
∂
);

1447 i‡(
∑th
 =
NULL
)

1448  (
NULL
);

1449 (Ë
	`¶¥ötf
(
∑th
, 
∂
, "%s/%s", 
u£r
, 
fûe
);

1450 i‡(!
≤logged
) {

1451 
	`dbglog
("p£ud⁄ym fûe: %s", 
∑th
);

1452 
≤logged
 = 1;

1454  (
∑th
);

1455 
	}
}

1458 
	$›í_≤_fûe
(
modebôs
)

1459 
mode_t
 
modebôs
;

1461 *
∑th
;

1462 
fd
, 
îr
;

1464 i‡((
∑th
 = 
	`«me_of_≤_fûe
()Ë=
NULL
)

1466 
fd
 = 
	`›í
(
∑th
, 
modebôs
, 
S_IRUSR
 | 
S_IWUSR
);

1467 
îr
 = 
î∫o
;

1468 
	`‰ì
(
∑th
);

1469 
î∫o
 = 
îr
;

1470  (
fd
);

1471 
	}
}

1474 
	$ªmove_≤_fûe
()

1476 *
∑th
;

1478 i‡((
∑th
 = 
	`«me_of_≤_fûe
()Ë!
NULL
) {

1479 (Ë
	`u∆ök
(
∑th
);

1480 (Ë
	`‰ì
(
∑th
);

1482 
	}
}

1485 
	$wrôe_p£ud⁄ym
(
e•
, 
öp
, 
Àn
, 
id
)

1486 
óp_°©e
 *
e•
;

1487 
u_ch¨
 *
öp
;

1488 
Àn
, 
id
;

1490 
u_ch¨
 
vÆ
;

1491 
u_ch¨
 *
d©p
, *
digp
;

1492 
SHA1_CTX
 
˘xt
;

1493 
u_ch¨
 
dig
[
SHA_DIGESTSIZE
];

1494 
dsize
, 
fd
, 
ﬁí
 = 
Àn
;

1500 
vÆ
 = 
id
;

1501 
Àn
 > 0) {

1502 i‡((
dsize
 = 
Àn
 % 
SHA_DIGESTSIZE
) == 0)

1503 
dsize
 = 
SHA_DIGESTSIZE
;

1504 
Àn
 -
dsize
;

1505 
d©p
 = 
öp
 + 
Àn
;

1506 
	`SHA1Inô
(&
˘xt
);

1507 
	`SHA1Upd©e
(&
˘xt
, &
vÆ
, 1);

1508 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_˛õ¡
.
ó_skey
, 
SESSION_KEY_LEN
);

1509 i‡(
Àn
 > 0) {

1510 
	`SHA1Upd©e
(&
˘xt
, 
d©p
, 
SHA_DIGESTSIZE
);

1512 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_˛õ¡
.
ó_«me
,

1513 
e•
->
es_˛õ¡
.
ó_«mñí
);

1515 
	`SHA1FöÆ
(
dig
, &
˘xt
);

1516 
digp
 = 
dig
; dig∞< dig + 
SHA_DIGESTSIZE
; digp++)

1517 *
d©p
++ ^*
digp
;

1521 i‡(
ﬁí
 <0 || *
öp
 + 1 > olen) {

1522 
	`dbglog
("EAP: decodedÖ£ud⁄ym i†unußbÀ <%.*B>", 
ﬁí
, 
öp
);

1527 
fd
 = 
	`›í_≤_fûe
(
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
);

1528 i‡(
fd
 < 0) {

1529 
	`dbglog
("EAP:Érror savingÖseudonym: %m");

1532 
Àn
 = 
	`wrôe
(
fd
, 
öp
 + 1, *inp);

1533 i‡(
	`˛o£
(
fd
Ë!-1 && 
Àn
 =*
öp
) {

1534 
	`dbglog
("EAP: savedÖseudonym");

1535 
e•
->
es_u£dp£udo
 = 0;

1537 
	`dbglog
("EAP: failedÅo saveÖseudonym");

1538 
	`ªmove_≤_fûe
();

1540 
	}
}

1547 
	$óp_ªque°
(
e•
, 
öp
, 
id
, 
Àn
)

1548 
óp_°©e
 *
e•
;

1549 
u_ch¨
 *
öp
;

1550 
id
;

1551 
Àn
;

1553 
u_ch¨
 
ty≥num
;

1554 
u_ch¨
 
vÆÀn
;

1555 
£¸ë_Àn
;

1556 
£¸ë
[
MAXWORDLEN
];

1557 
rho°«me
[256];

1558 
MD5_CTX
 
mdC⁄ãxt
;

1559 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

1560 #ifde‡
USE_EAPTLS


1561 
u_ch¨
 
Êags
;

1562 
ó±ls_£ssi⁄
 *
ës
 = 
e•
->
es_˛õ¡
.
ó_£ssi⁄
;

1565 #ifde‡
USE_SRP


1566 
t_˛õ¡
 *
tc
;

1567 
t_num
 
svÆ
, 
gvÆ
, 
NvÆ
, *
Ap
, 
BvÆ
;

1568 
u_ch¨
 
vÆs
[2];

1569 
SHA1_CTX
 
˘xt
;

1570 
u_ch¨
 
dig
[
SHA_DIGESTSIZE
];

1571 
fd
;

1577 i‡(
e•
->
es_˛õ¡
.
ó_°©e
 <
ópClo£d
)

1586 
e•
->
es_˛õ¡
.
ó_ªque°s
++;

1587 i‡(
e•
->
es_˛õ¡
.
ó_maxªque°s
 != 0 &&

1588 
e•
->
es_˛õ¡
.
ó_ªque°s
 >É•->es_˛õ¡.
ó_maxªque°s
) {

1589 
	`öfo
("EAP:ÑeceivedÅoo many Request messages");

1590 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0) {

1591 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

1593 
	`auth_wôh≥î_Áû
(
e•
->
es_unô
, 
PPP_EAP
);

1597 i‡(
Àn
 <= 0) {

1598 
	`îr‹
("EAP:Émpty Request message discarded");

1602 
	`GETCHAR
(
ty≥num
, 
öp
);

1603 
Àn
--;

1605 
ty≥num
) {

1606 
EAPT_IDENTITY
:

1607 i‡(
Àn
 > 0)

1608 
	`öfo
("EAP: IdítôyÖrom± \"%.*q\"", 
Àn
, 
öp
);

1609 #ifde‡
USE_SRP


1610 i‡(
e•
->
es_u£p£udo
 &&

1611 (
e•
->
es_u£dp£udo
 == 0 ||

1612 (
e•
->
es_u£dp£udo
 == 1 &&

1613 
id
 =
e•
->
es_˛õ¡
.
ó_id
))) {

1614 
e•
->
es_u£dp£udo
 = 1;

1616 i‡((
fd
 = 
	`›í_≤_fûe
(
O_RDONLY
)) >= 0) {

1617 
	`°r˝y
(
rho°«me
, 
SRP_PSEUDO_ID
);

1618 
Àn
 = 
	`ªad
(
fd
, 
rho°«me
 + 
SRP_PSEUDO_LEN
,

1619  (
rho°«me
Ë- 
SRP_PSEUDO_LEN
);

1621 i‡(
Àn
 > 0) {

1622 
	`óp_£nd_ª•⁄£
(
e•
, 
id
, 
ty≥num
,

1623 
rho°«me
, 
Àn
 + 
SRP_PSEUDO_LEN
);

1625 (Ë
	`˛o£
(
fd
);

1626 i‡(
Àn
 > 0)

1631 i‡(
e•
->
es_u£p£udo
 &&É•->
es_u£dp£udo
 != 2) {

1632 
	`ªmove_≤_fûe
();

1633 
e•
->
es_u£dp£udo
 = 2;

1636 
	`óp_£nd_ª•⁄£
(
e•
, 
id
, 
ty≥num
,É•->
es_˛õ¡
.
ó_«me
,

1637 
e•
->
es_˛õ¡
.
ó_«mñí
);

1640 
EAPT_NOTIFICATION
:

1641 i‡(
Àn
 > 0)

1642 
	`öfo
("EAP: NŸifiˇti⁄ \"%.*q\"", 
Àn
, 
öp
);

1643 
	`óp_£nd_ª•⁄£
(
e•
, 
id
, 
ty≥num
, 
NULL
, 0);

1646 
EAPT_NAK
:

1651 
	`w¨n
("EAP: unexpected Nak in Request; ignored");

1655 
EAPT_MD5CHAP
:

1656 i‡(
Àn
 < 1) {

1657 
	`îr‹
("EAP:Ñeceived MD5-Challenge withÇo data");

1661 
	`GETCHAR
(
vÆÀn
, 
öp
);

1662 
Àn
--;

1663 i‡(
vÆÀn
 < 8 || vÆÀ¿> 
Àn
) {

1664 
	`îr‹
("EAP: MD5-Challenge with badÜength %d (8..%d)",

1665 
vÆÀn
, 
Àn
);

1667 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_SRP
);

1672 i‡(
Àn
 - 
vÆÀn
 > (
rho°«me
)) {

1673 
	`dbglog
("EAP:ÅrimmingÑeallyÜongÖeerÇame down");

1674 
	`BCOPY
(
öp
 + 
vÆÀn
, 
rho°«me
,  (rhostname) - 1);

1675 
rho°«me
[ (rhostname) - 1] = '\0';

1677 
	`BCOPY
(
öp
 + 
vÆÀn
, 
rho°«me
, 
Àn
 - vallen);

1678 
rho°«me
[
Àn
 - 
vÆÀn
] = '\0';

1682 i‡(
ex∂icô_ªmŸe
 ||

1683 (
ªmŸe_«me
[0] !'\0' && 
vÆÀn
 =
Àn
))

1684 
	`°æ˝y
(
rho°«me
, 
ªmŸe_«me
,  (rhostname));

1690 i‡(!
	`gë_£¸ë
(
e•
->
es_unô
,É•->
es_˛õ¡
.
ó_«me
,

1691 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

1692 
	`dbglog
("EAP:ÇÿMD5 se¸ë f‹áuthÅÿ%q", 
rho°«me
);

1693 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_SRP
);

1696 
	`MD5_Inô
(&
mdC⁄ãxt
);

1697 
ty≥num
 = 
id
;

1698 
	`MD5_Upd©e
(&
mdC⁄ãxt
, &
ty≥num
, 1);

1699 
	`MD5_Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
 *)
£¸ë
, 
£¸ë_Àn
);

1700 
	`BZERO
(
£¸ë
,  (secret));

1701 
	`MD5_Upd©e
(&
mdC⁄ãxt
, 
öp
, 
vÆÀn
);

1702 
	`MD5_FöÆ
(
hash
, &
mdC⁄ãxt
);

1703 
	`óp_ch≠_ª•⁄£
(
e•
, 
id
, 
hash
,É•->
es_˛õ¡
.
ó_«me
,

1704 
e•
->
es_˛õ¡
.
ó_«mñí
);

1707 #ifde‡
USE_EAPTLS


1708 
EAPT_TLS
:

1710 
e•
->
es_˛õ¡
.
ó_°©e
) {

1712 
ópLi°í
:

1714 i‡(
Àn
 < 1) {

1715 
	`îr‹
("EAP:Ñeceived EAP-TLS ListenÖacket withÇo data");

1719 
	`GETCHAR
(
Êags
, 
öp
);

1720 if(
Êags
 & 
EAP_TLS_FLAGS_START
){

1722 
e•
->
es_˛õ¡
.
ó_usög_ó±ls
 = 1;

1724 i‡(
ex∂icô_ªmŸe
){

1725 
e•
->
es_˛õ¡
.
ó_≥î
 = 
	`°rdup
(
ªmŸe_«me
);

1726 
e•
->
es_˛õ¡
.
ó_≥îÀn
 = 
	`°æí
(
ªmŸe_«me
);

1728 
e•
->
es_˛õ¡
.
ó_≥î
 = 
NULL
;

1731 if(!
	`ó±ls_öô_s¶_˛õ¡
(
e•
)) {

1732 
	`dbglog
("cannot init ssl");

1733 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_TLS
);

1734 
e•
->
es_˛õ¡
.
ó_usög_ó±ls
 = 0;

1738 
ës
 = 
e•
->
es_˛õ¡
.
ó_£ssi⁄
;

1739 
	`óp_és_ª•⁄£
(
e•
, 
id
);

1740 
e•
->
es_˛õ¡
.
ó_°©e
 = (
ës
->
‰ag
 ? 
ópTlsRecvAck
 : 
ópTlsRecv
);

1745 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_TLS
);

1748 
ópTlsRecvAck
:

1749 
	`óp_és_ª•⁄£
(
e•
, 
id
);

1750 
e•
->
es_˛õ¡
.
ó_°©e
 = (
ës
->
‰ag
 ? 
ópTlsRecvAck
 : 
ópTlsRecv
);

1753 
ópTlsRecv
:

1754 i‡(
Àn
 < 1) {

1755 
	`îr‹
("EAP: discarding EAP-TLS ReceiveÖacket withÇo data");

1759 
	`ó±ls_ª˚ive
(
ës
, 
öp
, 
Àn
);

1761 if(
ës
->
‰ag
) {

1762 
	`óp_és_£ndack
(
e•
, 
id
);

1763 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópTlsRecv
;

1767 if(
ës
->
Æît_ªcv
) {

1768 
	`óp_és_£ndack
(
e•
, 
id
);

1769 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópTlsRecvFaûuª
;

1774 if(
	`ó±ls_is_öô_föished
(
ës
)) {

1775 #ifde‡
MPPE


1776 
	`ó±ls_gí_mµe_keys
(
ës
, 1);

1778 
	`ó±ls_‰ì_£ssi⁄
(
ës
);

1779 
	`óp_és_£ndack
(
e•
, 
id
);

1780 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópTlsRecvSuc˚ss
;

1784 
	`óp_és_ª•⁄£
(
e•
,
id
);

1785 
e•
->
es_˛õ¡
.
ó_°©e
 = (
ës
->
‰ag
 ? 
ópTlsRecvAck
 : 
ópTlsRecv
);

1789 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_TLS
);

1790 
e•
->
es_˛õ¡
.
ó_usög_ó±ls
 = 0;

1797 #ifde‡
USE_SRP


1798 
EAPT_SRP
:

1799 i‡(
Àn
 < 1) {

1800 
	`îr‹
("EAP:ÑeceivedÉmpty SRP Request");

1806 
	`GETCHAR
(
vÆÀn
, 
öp
);

1807 
Àn
--;

1808 
vÆÀn
) {

1809 
EAPSRP_CHALLENGE
:

1810 
tc
 = 
NULL
;

1811 i‡(
e•
->
es_˛õ¡
.
ó_£ssi⁄
 !
NULL
) {

1812 
tc
 = (
t_˛õ¡
 *)
e•
->
es_˛õ¡
.

1813 
ó_£ssi⁄
;

1819 i‡(
id
 !
e•
->
es_˛õ¡
.
ó_id
) {

1820 
	`t_˛õ¡˛o£
(
tc
);

1821 
e•
->
es_˛õ¡
.
ó_£ssi⁄
 = 
NULL
;

1822 
tc
 = 
NULL
;

1826 
e•
->
es_˛õ¡
.
ó_skey
 = 
NULL
;

1827 i‡(
tc
 =
NULL
) {

1828 
	`GETCHAR
(
vÆÀn
, 
öp
);

1829 
Àn
--;

1830 i‡(
vÆÀn
 >
Àn
) {

1831 
	`îr‹
("EAP: badly-formed SRP Challenge"

1836 
	`BCOPY
(
öp
, 
rho°«me
, 
vÆÀn
);

1837 
rho°«me
[
vÆÀn
] = '\0';

1838 
	`INCPTR
(
vÆÀn
, 
öp
);

1839 
Àn
 -
vÆÀn
;

1845 i‡(
ex∂icô_ªmŸe
 ||

1846 (
ªmŸe_«me
[0] !'\0' && 
vÆÀn
 == 0)) {

1847 
	`°æ˝y
(
rho°«me
, 
ªmŸe_«me
,

1848  (
rho°«me
));

1851 i‡(
e•
->
es_˛õ¡
.
ó_≥î
 !
NULL
)

1852 
	`‰ì
(
e•
->
es_˛õ¡
.
ó_≥î
);

1853 
e•
->
es_˛õ¡
.
ó_≥î
 = 
	`°rdup
(
rho°«me
);

1854 
e•
->
es_˛õ¡
.
ó_≥îÀn
 = 
	`°æí
(
rho°«me
);

1856 
	`GETCHAR
(
vÆÀn
, 
öp
);

1857 
Àn
--;

1858 i‡(
vÆÀn
 >
Àn
) {

1859 
	`îr‹
("EAP: badly-formed SRP Challenge"

1864 
svÆ
.
d©a
 = 
öp
;

1865 
svÆ
.
Àn
 = 
vÆÀn
;

1866 
	`INCPTR
(
vÆÀn
, 
öp
);

1867 
Àn
 -
vÆÀn
;

1869 
	`GETCHAR
(
vÆÀn
, 
öp
);

1870 
Àn
--;

1871 i‡(
vÆÀn
 > 
Àn
) {

1872 
	`îr‹
("EAP: badly-formed SRP Challenge"

1878 i‡(
vÆÀn
 == 0) {

1879 
gvÆ
.
d©a
 = (
u_ch¨
 *)"\002";

1880 
gvÆ
.
Àn
 = 1;

1882 
gvÆ
.
d©a
 = 
öp
;

1883 
gvÆ
.
Àn
 = 
vÆÀn
;

1885 
	`INCPTR
(
vÆÀn
, 
öp
);

1886 
Àn
 -
vÆÀn
;

1892 i‡(
Àn
 == 0) {

1893 
NvÆ
.
d©a
 = (
u_ch¨
 *)
wkmodulus
;

1894 
NvÆ
.
Àn
 =  (
wkmodulus
);

1896 
NvÆ
.
d©a
 = 
öp
;

1897 
NvÆ
.
Àn
 =Üen;

1899 
tc
 = 
	`t_˛õ¡›í
(
e•
->
es_˛õ¡
.
ó_«me
,

1900 &
NvÆ
, &
gvÆ
, &
svÆ
);

1901 i‡(
tc
 =
NULL
) {

1902 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_MD5CHAP
);

1905 
e•
->
es_˛õ¡
.
ó_£ssi⁄
 = (*)
tc
;

1908 
vÆs
[0] = 
id
;

1909 
vÆs
[1] = 
EAPT_SRP
;

1910 
	`t_˛õ¡addexd©a
(
tc
, 
vÆs
, 2);

1912 
Ap
 = 
	`t_˛õ¡gíexp
(
tc
);

1913 
	`óp_§p_ª•⁄£
(
e•
, 
id
, 
EAPSRP_CKEY
, 
Ap
->
d©a
,

1914 
Ap
->
Àn
);

1917 
EAPSRP_SKEY
:

1918 
tc
 = (
t_˛õ¡
 *)
e•
->
es_˛õ¡
.
ó_£ssi⁄
;

1919 i‡(
tc
 =
NULL
) {

1920 
	`w¨n
("EAP:Öeer sent Subtype 2 without 1");

1921 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_MD5CHAP
);

1924 i‡(
e•
->
es_˛õ¡
.
ó_skey
 !
NULL
) {

1929 i‡(
id
 !
e•
->
es_˛õ¡
.
ó_id
) {

1930 
	`w¨n
("EAP: ID changed from %dÅo %d "

1932 
e•
->
es_˛õ¡
.
ó_id
, 
id
);

1935 i‡(
	`gë_§p_£¸ë
(
e•
->
es_unô
,

1936 
e•
->
es_˛õ¡
.
ó_«me
,

1937 
e•
->
es_˛õ¡
.
ó_≥î
, 
£¸ë
, 0) == 0) {

1943 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_MD5CHAP
);

1946 
BvÆ
.
d©a
 = 
öp
;

1947 
BvÆ
.
Àn
 =Üen;

1948 
	`t_˛õ¡∑sswd
(
tc
, 
£¸ë
);

1949 
	`BZERO
(
£¸ë
,  (secret));

1950 
e•
->
es_˛õ¡
.
ó_skey
 =

1951 
	`t_˛õ¡gëkey
(
tc
, &
BvÆ
);

1952 i‡(
e•
->
es_˛õ¡
.
ó_skey
 =
NULL
) {

1954 
	`îr‹
("EAP: SRP server isÑogue");

1955 
˛õ¡_Áûuª
;

1958 
	`óp_§pvÆ_ª•⁄£
(
e•
, 
id
, 
SRPVAL_EBIT
,

1959 
	`t_˛õ¡ª•⁄£
(
tc
));

1962 
EAPSRP_SVALIDATOR
:

1963 
tc
 = (
t_˛õ¡
 *)
e•
->
es_˛õ¡
.
ó_£ssi⁄
;

1964 i‡(
tc
 =
NULL
 || 
e•
->
es_˛õ¡
.
ó_skey
 == NULL) {

1965 
	`w¨n
("EAP:Öeer sent Subtype 3 without 1/2");

1966 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_MD5CHAP
);

1974 i‡(
e•
->
es_˛õ¡
.
ó_°©e
 =
ópO≥n
) {

1975 i‡(
id
 !
e•
->
es_˛õ¡
.
ó_id
) {

1976 
	`w¨n
("EAP: ID changed from %dÅo %d "

1978 
e•
->
es_˛õ¡
.
ó_id
, 
id
);

1981 
Àn
 - (
u_öt32_t
Ë+ 
SHA_DIGESTSIZE
;

1982 i‡(
Àn
 < 0 || 
	`t_˛õ¡vîify
(
tc
, 
öp
 +

1983  (
u_öt32_t
)) != 0) {

1984 
	`îr‹
("EAP: SRP server verification "

1986 
˛õ¡_Áûuª
;

1988 
	`GETLONG
(
e•
->
es_˛õ¡
.
ó_keyÊags
, 
öp
);

1990 i‡(
Àn
 > 0 && 
e•
->
es_u£p£udo
) {

1991 
	`INCPTR
(
SHA_DIGESTSIZE
, 
öp
);

1992 
	`wrôe_p£ud⁄ym
(
e•
, 
öp
, 
Àn
, 
id
);

2000 
	`óp_§p_ª•⁄£
(
e•
, 
id
, 
EAPSRP_ACK
, 
NULL
, 0);

2003 
EAPSRP_LWRECHALLENGE
:

2004 i‡(
Àn
 < 4) {

2005 
	`w¨n
("EAP: malformed LightweightÑechallenge");

2008 
	`SHA1Inô
(&
˘xt
);

2009 
vÆs
[0] = 
id
;

2010 
	`SHA1Upd©e
(&
˘xt
, 
vÆs
, 1);

2011 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_˛õ¡
.
ó_skey
,

2012 
SESSION_KEY_LEN
);

2013 
	`SHA1Upd©e
(&
˘xt
, 
öp
, 
Àn
);

2014 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_˛õ¡
.
ó_«me
,

2015 
e•
->
es_˛õ¡
.
ó_«mñí
);

2016 
	`SHA1FöÆ
(
dig
, &
˘xt
);

2017 
	`óp_§p_ª•⁄£
(
e•
, 
id
, 
EAPSRP_LWRECHALLENGE
, 
dig
,

2018 
SHA_DIGESTSIZE
);

2022 
	`îr‹
("EAP: unknow¿SRP Subty≥ %d", 
vÆÀn
);

2023 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_MD5CHAP
);

2030 
	`öfo
("EAP: unknow¿authítiˇti⁄Åy≥ %d; Nakög", 
ty≥num
);

2031 
	`óp_£nd_«k
(
e•
, 
id
, 
EAPT_SRP
);

2035 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0) {

2036 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

2037 
	`TIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
,

2038 
e•
->
es_˛õ¡
.
ó_timeout
);

2042 #ifde‡
USE_SRP


2043 
˛õ¡_Áûuª
:

2044 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópBadAuth
;

2045 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0) {

2046 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

2048 
e•
->
es_˛õ¡
.
ó_£ssi⁄
 = 
NULL
;

2049 
	`t_˛õ¡˛o£
(
tc
);

2050 
	`auth_wôh≥î_Áû
(
e•
->
es_unô
, 
PPP_EAP
);

2052 
	}
}

2058 
	$óp_ª•⁄£
(
e•
, 
öp
, 
id
, 
Àn
)

2059 
óp_°©e
 *
e•
;

2060 
u_ch¨
 *
öp
;

2061 
id
;

2062 
Àn
;

2064 
u_ch¨
 
ty≥num
;

2065 
u_ch¨
 
vÆÀn
;

2066 
£¸ë_Àn
;

2067 
£¸ë
[
MAXSECRETLEN
];

2068 
rho°«me
[256];

2069 
MD5_CTX
 
mdC⁄ãxt
;

2070 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

2071 #ifde‡
USE_SRP


2072 
t_£rvî
 *
ts
;

2073 
t_num
 
A
;

2074 
SHA1_CTX
 
˘xt
;

2075 
u_ch¨
 
dig
[
SHA_DIGESTSIZE
];

2076 
SHA1_CTX
 
˘xt
;

2077 
u_ch¨
 
dig
[
SHA_DIGESTSIZE
];

2080 #ifde‡
USE_EAPTLS


2081 
ó±ls_£ssi⁄
 *
ës
;

2082 
u_ch¨
 
Êags
;

2088 i‡(
e•
->
es_£rvî
.
ó_°©e
 <
ópClo£d
)

2091 i‡(
e•
->
es_£rvî
.
ó_id
 !
id
) {

2092 
	`dbglog
("EAP: disˇrdög Re•⁄£ %d;Éx≥˘ed ID %d", 
id
,

2093 
e•
->
es_£rvî
.
ó_id
);

2097 
e•
->
es_£rvî
.
ó_ª•⁄£s
++;

2099 i‡(
Àn
 <= 0) {

2100 
	`îr‹
("EAP:Émpty Response message discarded");

2104 
	`GETCHAR
(
ty≥num
, 
öp
);

2105 
Àn
--;

2107 
ty≥num
) {

2108 
EAPT_IDENTITY
:

2109 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópIdítify
) {

2110 
	`dbglog
("EAP disˇrdög unw™ãd Idítify \"%.q\"", 
Àn
,

2111 
öp
);

2114 
	`öfo
("EAP: u«uthítiˇãdÖì∏«mê\"%.*q\"", 
Àn
, 
öp
);

2115 i‡(
e•
->
es_£rvî
.
ó_≥î
 !
NULL
 &&

2116 
e•
->
es_£rvî
.
ó_≥î
 !
ªmŸe_«me
)

2117 
	`‰ì
(
e•
->
es_£rvî
.
ó_≥î
);

2118 
e•
->
es_£rvî
.
ó_≥î
 = 
	`mÆloc
(
Àn
 + 1);

2119 i‡(
e•
->
es_£rvî
.
ó_≥î
 =
NULL
) {

2120 
e•
->
es_£rvî
.
ó_≥îÀn
 = 0;

2121 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2124 
	`BCOPY
(
öp
, 
e•
->
es_£rvî
.
ó_≥î
, 
Àn
);

2125 
e•
->
es_£rvî
.
ó_≥î
[
Àn
] = '\0';

2126 
e•
->
es_£rvî
.
ó_≥îÀn
 = 
Àn
;

2127 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2130 #ifde‡
USE_EAPTLS


2131 
EAPT_TLS
:

2132 
e•
->
es_£rvî
.
ó_°©e
) {

2134 
ópTlsRecv
:

2136 
ës
 = (
ó±ls_£ssi⁄
 *Ë
e•
->
es_£rvî
.
ó_£ssi⁄
;

2138 
	`óp_figuª_√xt_°©e
(
e•
,

2139 
	`ó±ls_ª˚ive
(
e•
->
es_£rvî
.
ó_£ssi⁄
, 
öp
, 
Àn
));

2141 if(
ës
->
Æît_ªcv
) {

2142 
	`óp_£nd_Áûuª
(
e•
);

2147 
ópTlsRecvAck
:

2148 if(
Àn
 > 1) {

2149 
	`dbglog
("EAP-TLS ACK withÉxtra data");

2151 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2154 
ópTlsRecvClõ¡
:

2156 i‡(
Àn
 > 0) {

2157 
	`GETCHAR
(
Êags
, 
öp
);

2159 if(
Àn
 =1 && !
Êags
) {

2160 #ifde‡
MPPE


2161 
	`ó±ls_gí_mµe_keys
–
e•
->
es_£rvî
.
ó_£ssi⁄
, 0 );

2163 
	`óp_£nd_suc˚ss
(
e•
);

2166 
	`w¨n
("Serveráuthentication failed");

2167 
	`óp_£nd_Áûuª
(
e•
);

2171 
	`w¨n
("Bogus EAP-TLSÖacketÑeceived from client");

2173 
	`ó±ls_‰ì_£ssi⁄
(
e•
->
es_£rvî
.
ó_£ssi⁄
);

2177 
ópTlsRecvAÀπAck
:

2178 
	`óp_£nd_Áûuª
(
e•
);

2182 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2188 
EAPT_NOTIFICATION
:

2189 
	`dbglog
("EAP unexpected Notification;Ñesponse discarded");

2192 
EAPT_NAK
:

2193 i‡(
Àn
 < 1) {

2194 
	`öfo
("EAP: Nak Response withÇo suggestedÖrotocol");

2195 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2199 
	`GETCHAR
(
vÆÀn
, 
öp
);

2200 
Àn
--;

2202 i‡(!
ex∂icô_ªmŸe
 && 
e•
->
es_£rvî
.
ó_°©e
 =
ópIdítify
){

2204 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2208 
vÆÀn
) {

2209 
EAPT_SRP
:

2211 
e•
->
es_£rvî
.
ó_°©e
 = 
ópIdítify
;

2212 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2215 
EAPT_MD5CHAP
:

2216 
e•
->
es_£rvî
.
ó_°©e
 = 
ópMD5ChÆl
;

2219 #ifde‡
USE_EAPTLS


2221 
EAPT_TLS
:

2222 
e•
->
es_£rvî
.
ó_°©e
 = 
ópTlsSèπ
;

2227 
	`dbglog
("EAP:Öì∏ªque°ög unknow¿Ty≥ %d", 
vÆÀn
);

2228 
e•
->
es_£rvî
.
ó_°©e
) {

2229 
ópSRP1
:

2230 
ópSRP2
:

2231 
ópSRP3
:

2232 
e•
->
es_£rvî
.
ó_°©e
 = 
ópMD5ChÆl
;

2234 
ópMD5ChÆl
:

2235 
ópSRP4
:

2236 
e•
->
es_£rvî
.
ó_°©e
 = 
ópIdítify
;

2237 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2246 
EAPT_MD5CHAP
:

2247 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópMD5ChÆl
) {

2248 
	`îr‹
("EAP: unexpected MD5-Response");

2249 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2252 i‡(
Àn
 < 1) {

2253 
	`îr‹
("EAP:Ñeceived MD5-Response withÇo data");

2254 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2257 
	`GETCHAR
(
vÆÀn
, 
öp
);

2258 
Àn
--;

2259 i‡(
vÆÀn
 !16 || vÆÀ¿> 
Àn
) {

2260 
	`îr‹
("EAP: MD5-Re•⁄£ wôh badÜígth %d", 
vÆÀn
);

2261 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2266 i‡(
Àn
 - 
vÆÀn
 > (
rho°«me
)) {

2267 
	`dbglog
("EAP:ÅrimmingÑeallyÜongÖeerÇame down");

2268 
	`BCOPY
(
öp
 + 
vÆÀn
, 
rho°«me
,  (rhostname) - 1);

2269 
rho°«me
[ (rhostname) - 1] = '\0';

2271 
	`BCOPY
(
öp
 + 
vÆÀn
, 
rho°«me
, 
Àn
 - vallen);

2272 
rho°«me
[
Àn
 - 
vÆÀn
] = '\0';

2276 i‡(
ex∂icô_ªmŸe
 ||

2277 (
ªmŸe_«me
[0] !'\0' && 
vÆÀn
 =
Àn
))

2278 
	`°æ˝y
(
rho°«me
, 
ªmŸe_«me
,  (rhostname));

2284 i‡(!
	`gë_£¸ë
(
e•
->
es_unô
, 
rho°«me
,

2285 
e•
->
es_£rvî
.
ó_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

2286 
	`dbglog
("EAP:ÇÿMD5 se¸ë f‹áuth o‡%q", 
rho°«me
);

2287 
	`óp_£nd_Áûuª
(
e•
);

2290 
	`MD5_Inô
(&
mdC⁄ãxt
);

2291 
	`MD5_Upd©e
(&
mdC⁄ãxt
, &
e•
->
es_£rvî
.
ó_id
, 1);

2292 
	`MD5_Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
 *)
£¸ë
, 
£¸ë_Àn
);

2293 
	`BZERO
(
£¸ë
,  (secret));

2294 
	`MD5_Upd©e
(&
mdC⁄ãxt
, 
e•
->
es_chÆÀnge
,É•->
es_chÆÀn
);

2295 
	`MD5_FöÆ
(
hash
, &
mdC⁄ãxt
);

2296 i‡(
	`BCMP
(
hash
, 
öp
, 
MD5_SIGNATURE_SIZE
) != 0) {

2297 
	`óp_£nd_Áûuª
(
e•
);

2300 
e•
->
es_£rvî
.
ó_ty≥
 = 
EAPT_MD5CHAP
;

2301 
	`óp_£nd_suc˚ss
(
e•
);

2302 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2303 i‡(
e•
->
es_ªchÆÀnge
 != 0)

2304 
	`TIMEOUT
(
óp_ªchÆÀnge
, 
e•
,É•->
es_ªchÆÀnge
);

2307 #ifde‡
USE_SRP


2308 
EAPT_SRP
:

2309 i‡(
Àn
 < 1) {

2310 
	`îr‹
("EAP:Émpty SRP Response");

2311 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2314 
	`GETCHAR
(
ty≥num
, 
öp
);

2315 
Àn
--;

2316 
ty≥num
) {

2317 
EAPSRP_CKEY
:

2318 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópSRP1
) {

2319 
	`îr‹
("EAP: unexpected SRP Subtype 1 Response");

2320 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2323 
A
.
d©a
 = 
öp
;

2324 
A
.
Àn
 =Üen;

2325 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

2326 
	`as£π
(
ts
 !
NULL
);

2327 
e•
->
es_£rvî
.
ó_skey
 = 
	`t_£rvîgëkey
(
ts
, &
A
);

2328 i‡(
e•
->
es_£rvî
.
ó_skey
 =
NULL
) {

2330 
	`îr‹
("EAP: bogus A value from client");

2331 
	`óp_£nd_Áûuª
(
e•
);

2333 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2337 
EAPSRP_CVALIDATOR
:

2338 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópSRP2
) {

2339 
	`îr‹
("EAP: unexpected SRP Subtype 2 Response");

2340 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2343 i‡(
Àn
 <  (
u_öt32_t
Ë+ 
SHA_DIGESTSIZE
) {

2344 
	`îr‹
("EAP: M1Üígth %d < %d", 
Àn
,

2345  (
u_öt32_t
Ë+ 
SHA_DIGESTSIZE
);

2346 
	`óp_figuª_√xt_°©e
(
e•
, 1);

2349 
	`GETLONG
(
e•
->
es_£rvî
.
ó_keyÊags
, 
öp
);

2350 
ts
 = (
t_£rvî
 *)
e•
->
es_£rvî
.
ó_£ssi⁄
;

2351 
	`as£π
(
ts
 !
NULL
);

2352 i‡(
	`t_£rvîvîify
(
ts
, 
öp
)) {

2353 
	`öfo
("EAP: unableÅo validate client identity");

2354 
	`óp_£nd_Áûuª
(
e•
);

2357 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2360 
EAPSRP_ACK
:

2361 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópSRP3
) {

2362 
	`îr‹
("EAP: unexpected SRP Subtype 3 Response");

2363 
	`óp_£nd_Áûuª
(
e•
);

2366 
e•
->
es_£rvî
.
ó_ty≥
 = 
EAPT_SRP
;

2367 
	`óp_£nd_suc˚ss
(
e•
);

2368 
	`óp_figuª_√xt_°©e
(
e•
, 0);

2369 i‡(
e•
->
es_ªchÆÀnge
 != 0)

2370 
	`TIMEOUT
(
óp_ªchÆÀnge
, 
e•
,

2371 
e•
->
es_ªchÆÀnge
);

2372 i‡(
e•
->
es_lwªchÆÀnge
 != 0)

2373 
	`TIMEOUT
(
§p_lwªchÆÀnge
, 
e•
,

2374 
e•
->
es_lwªchÆÀnge
);

2377 
EAPSRP_LWRECHALLENGE
:

2378 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópSRP4
) {

2379 
	`öfo
("EAP: unexpected SRP Subtype 4 Response");

2382 i‡(
Àn
 !
SHA_DIGESTSIZE
) {

2383 
	`îr‹
("EAP: bad LightweightÑechallenge "

2387 
	`SHA1Inô
(&
˘xt
);

2388 
vÆÀn
 = 
id
;

2389 
	`SHA1Upd©e
(&
˘xt
, &
vÆÀn
, 1);

2390 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_£rvî
.
ó_skey
,

2391 
SESSION_KEY_LEN
);

2392 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_chÆÀnge
,É•->
es_chÆÀn
);

2393 
	`SHA1Upd©e
(&
˘xt
, 
e•
->
es_£rvî
.
ó_≥î
,

2394 
e•
->
es_£rvî
.
ó_≥îÀn
);

2395 
	`SHA1FöÆ
(
dig
, &
˘xt
);

2396 i‡(
	`BCMP
(
dig
, 
öp
, 
SHA_DIGESTSIZE
) != 0) {

2397 
	`îr‹
("EAP: failed LightweightÑechallenge");

2398 
	`óp_£nd_Áûuª
(
e•
);

2401 
e•
->
es_£rvî
.
ó_°©e
 = 
ópO≥n
;

2402 i‡(
e•
->
es_lwªchÆÀnge
 != 0)

2403 
	`TIMEOUT
(
§p_lwªchÆÀnge
, 
e•
,

2404 
e•
->
es_lwªchÆÀnge
);

2412 
	`îr‹
("EAP: unknow¿Re•⁄£Åy≥ %d; ign‹ed", 
ty≥num
);

2416 i‡(
e•
->
es_£rvî
.
ó_timeout
 > 0) {

2417 
	`UNTIMEOUT
(
óp_£rvî_timeout
, (*)
e•
);

2420 i‡(
e•
->
es_£rvî
.
ó_°©e
 !
ópBadAuth
 &&

2421 
e•
->
es_£rvî
.
ó_°©e
 !
ópO≥n
) {

2422 
e•
->
es_£rvî
.
ó_id
++;

2423 
	`óp_£nd_ªque°
(
e•
);

2425 
	}
}

2431 
	$óp_suc˚ss
(
e•
, 
öp
, 
id
, 
Àn
)

2432 
óp_°©e
 *
e•
;

2433 
u_ch¨
 *
öp
;

2434 
id
;

2435 
Àn
;

2437 i‡(
e•
->
es_˛õ¡
.
ó_°©e
 !
ópO≥n
 && !
	`óp_˛õ¡_a˘ive
(esp)

2438 #ifde‡
USE_EAPTLS


2439 && 
e•
->
es_˛õ¡
.
ó_°©e
 !
ópTlsRecvSuc˚ss


2442 
	`dbglog
("EAP unexpected success message in state %s (%d)",

2443 
	`óp_°©e_«me
(
e•
->
es_˛õ¡
.
ó_°©e
),

2444 
e•
->
es_˛õ¡
.
ó_°©e
);

2448 #ifde‡
USE_EAPTLS


2449 if(
e•
->
es_˛õ¡
.
ó_usög_ó±ls
 &&É•->es_˛õ¡.
ó_°©e
 !=

2450 
ópTlsRecvSuc˚ss
) {

2451 
	`dbglog
("EAP-TLS unexpected success message in state %s (%d)",

2452 
	`óp_°©e_«me
(
e•
->
es_˛õ¡
.
ó_°©e
),

2453 
e•
->
es_˛õ¡
.
ó_°©e
);

2458 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0) {

2459 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

2462 i‡(
Àn
 > 0) {

2464 
	`PRINTMSG
(
öp
, 
Àn
);

2467 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópO≥n
;

2468 
	`auth_wôh≥î_suc˚ss
(
e•
->
es_unô
, 
PPP_EAP
, 0);

2469 
	}
}

2475 
	$óp_Áûuª
(
e•
, 
öp
, 
id
, 
Àn
)

2476 
óp_°©e
 *
e•
;

2477 
u_ch¨
 *
öp
;

2478 
id
;

2479 
Àn
;

2484 i‡(
e•
->
es_˛õ¡
.
ó_°©e
 <
ópClo£d
)

2487 i‡(!
	`óp_˛õ¡_a˘ive
(
e•
)) {

2488 
	`dbglog
("EAP unexpected failure message in state %s (%d)",

2489 
	`óp_°©e_«me
(
e•
->
es_˛õ¡
.
ó_°©e
),

2490 
e•
->
es_˛õ¡
.
ó_°©e
);

2493 i‡(
e•
->
es_˛õ¡
.
ó_timeout
 > 0) {

2494 
	`UNTIMEOUT
(
óp_˛õ¡_timeout
, (*)
e•
);

2497 i‡(
Àn
 > 0) {

2499 
	`PRINTMSG
(
öp
, 
Àn
);

2502 
e•
->
es_˛õ¡
.
ó_°©e
 = 
ópBadAuth
;

2504 
	`îr‹
("EAP:ÖeerÑeportsáuthentication failure");

2505 
	`auth_wôh≥î_Áû
(
e•
->
es_unô
, 
PPP_EAP
);

2506 
	}
}

2512 
	$óp_öput
(
unô
, 
öp
, 
öÀn
)

2513 
unô
;

2514 
u_ch¨
 *
öp
;

2515 
öÀn
;

2517 
óp_°©e
 *
e•
 = &
óp_°©es
[
unô
];

2518 
u_ch¨
 
code
, 
id
;

2519 
Àn
;

2525 i‡(
öÀn
 < 
EAP_HEADERLEN
) {

2526 
	`îr‹
("EAP:ÖackëÅoÿsh‹t: %d < %d", 
öÀn
, 
EAP_HEADERLEN
);

2529 
	`GETCHAR
(
code
, 
öp
);

2530 
	`GETCHAR
(
id
, 
öp
);

2531 
	`GETSHORT
(
Àn
, 
öp
);

2532 i‡(
Àn
 < 
EAP_HEADERLEN
 ||Üí > 
öÀn
) {

2533 
	`îr‹
("EAP:Öackë ha†ûÀgÆÜígth fõld %d (%d..%d)", 
Àn
,

2534 
EAP_HEADERLEN
, 
öÀn
);

2537 
Àn
 -
EAP_HEADERLEN
;

2540 
code
) {

2541 
EAP_REQUEST
:

2542 
	`óp_ªque°
(
e•
, 
öp
, 
id
, 
Àn
);

2545 
EAP_RESPONSE
:

2546 
	`óp_ª•⁄£
(
e•
, 
öp
, 
id
, 
Àn
);

2549 
EAP_SUCCESS
:

2550 
	`óp_suc˚ss
(
e•
, 
öp
, 
id
, 
Àn
);

2553 
EAP_FAILURE
:

2554 
	`óp_Áûuª
(
e•
, 
öp
, 
id
, 
Àn
);

2559 
	`w¨n
("EAP: unknow¿codê%dÑe˚ived", 
code
);

2562 
	}
}

2567 *
	góp_codíames
[] = {

2571 *
	góp_ty≥«mes
[] = {

2573 "OTP", "Gíîic-Tokí", 
NULL
, NULL,

2580 
	$óp_¥öçkt
(
öp
, 
öÀn
, 
¥öãr
, 
¨g
)

2581 
u_ch¨
 *
öp
;

2582 
öÀn
;

2583 (*
¥öãr
Ë
	`__P
((*, *, ...));

2584 *
¨g
;

2586 
code
, 
id
, 
Àn
, 
πy≥
, 
vÆÀn
;

2587 
u_ch¨
 *
p°¨t
;

2588 
u_öt32_t
 
uvÆ
;

2589 #ifde‡
USE_EAPTLS


2590 
u_ch¨
 
Êags
;

2593 i‡(
öÀn
 < 
EAP_HEADERLEN
)

2595 
p°¨t
 = 
öp
;

2596 
	`GETCHAR
(
code
, 
öp
);

2597 
	`GETCHAR
(
id
, 
öp
);

2598 
	`GETSHORT
(
Àn
, 
öp
);

2599 i‡(
Àn
 < 
EAP_HEADERLEN
 ||Üí > 
öÀn
)

2602 i‡(
code
 >1 && codê<(
óp_codíames
) / (*))

2603 
	`¥öãr
(
¨g
, " %s", 
óp_codíames
[
code
-1]);

2605 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

2606 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

2607 
Àn
 -
EAP_HEADERLEN
;

2608 
code
) {

2609 
EAP_REQUEST
:

2610 i‡(
Àn
 < 1) {

2611 
	`¥öãr
(
¨g
, " <missingÅype>");

2614 
	`GETCHAR
(
πy≥
, 
öp
);

2615 
Àn
--;

2616 i‡(
πy≥
 >= 1 &&

2617 
πy≥
 < (
óp_ty≥«mes
) /  (*))

2618 
	`¥öãr
(
¨g
, " %s", 
óp_ty≥«mes
[
πy≥
-1]);

2620 
	`¥öãr
(
¨g
, "Åy≥=0x%x", 
πy≥
);

2621 
πy≥
) {

2622 
EAPT_IDENTITY
:

2623 
EAPT_NOTIFICATION
:

2624 i‡(
Àn
 > 0) {

2625 
	`¥öãr
(
¨g
, " <Message ");

2626 
	`¥öt_°rög
((*)
öp
, 
Àn
, 
¥öãr
, 
¨g
);

2627 
	`¥öãr
(
¨g
, ">");

2628 
	`INCPTR
(
Àn
, 
öp
);

2629 
Àn
 = 0;

2631 
	`¥öãr
(
¨g
, " <No message>");

2635 
EAPT_MD5CHAP
:

2636 i‡(
Àn
 <= 0)

2638 
	`GETCHAR
(
vÆÀn
, 
öp
);

2639 
Àn
--;

2640 i‡(
vÆÀn
 > 
Àn
)

2641 
åunˇãd
;

2642 
	`¥öãr
(
¨g
, " <VÆue%.*B>", 
vÆÀn
, 
öp
);

2643 
	`INCPTR
(
vÆÀn
, 
öp
);

2644 
Àn
 -
vÆÀn
;

2645 i‡(
Àn
 > 0) {

2646 
	`¥öãr
(
¨g
, " <Name ");

2647 
	`¥öt_°rög
((*)
öp
, 
Àn
, 
¥öãr
, 
¨g
);

2648 
	`¥öãr
(
¨g
, ">");

2649 
	`INCPTR
(
Àn
, 
öp
);

2650 
Àn
 = 0;

2652 
	`¥öãr
(
¨g
, " <NoÇame>");

2656 #ifde‡
USE_EAPTLS


2657 
EAPT_TLS
:

2658 i‡(
Àn
 < 1)

2660 
	`GETCHAR
(
Êags
, 
öp
);

2661 
Àn
--;

2663 if(
Êags
 =0 && 
Àn
 == 0){

2664 
	`¥öãr
(
¨g
, " Ack");

2668 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_LI
 ? " L":" -");

2669 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_MF
 ? "M":"-");

2670 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_START
 ? "S":"- ");

2674 
EAPT_SRP
:

2675 i‡(
Àn
 < 3)

2676 
åunˇãd
;

2677 
	`GETCHAR
(
vÆÀn
, 
öp
);

2678 
Àn
--;

2679 
	`¥öãr
(
¨g
, "-%d", 
vÆÀn
);

2680 
vÆÀn
) {

2681 
EAPSRP_CHALLENGE
:

2682 
	`GETCHAR
(
vÆÀn
, 
öp
);

2683 
Àn
--;

2684 i‡(
vÆÀn
 >
Àn
)

2685 
åunˇãd
;

2686 i‡(
vÆÀn
 > 0) {

2687 
	`¥öãr
(
¨g
, " <Name ");

2688 
	`¥öt_°rög
((*)
öp
, 
vÆÀn
, 
¥öãr
,

2689 
¨g
);

2690 
	`¥öãr
(
¨g
, ">");

2692 
	`¥öãr
(
¨g
, " <NoÇame>");

2694 
	`INCPTR
(
vÆÀn
, 
öp
);

2695 
Àn
 -
vÆÀn
;

2696 
	`GETCHAR
(
vÆÀn
, 
öp
);

2697 
Àn
--;

2698 i‡(
vÆÀn
 >
Àn
)

2699 
åunˇãd
;

2700 
	`¥öãr
(
¨g
, " <s%.*B>", 
vÆÀn
, 
öp
);

2701 
	`INCPTR
(
vÆÀn
, 
öp
);

2702 
Àn
 -
vÆÀn
;

2703 
	`GETCHAR
(
vÆÀn
, 
öp
);

2704 
Àn
--;

2705 i‡(
vÆÀn
 > 
Àn
)

2706 
åunˇãd
;

2707 i‡(
vÆÀn
 == 0) {

2708 
	`¥öãr
(
¨g
, " <Default g=2>");

2710 
	`¥öãr
(
¨g
, " <g%.*B>", 
vÆÀn
, 
öp
);

2712 
	`INCPTR
(
vÆÀn
, 
öp
);

2713 
Àn
 -
vÆÀn
;

2714 i‡(
Àn
 == 0) {

2715 
	`¥öãr
(
¨g
, " <Default N>");

2717 
	`¥öãr
(
¨g
, " <N%.*B>", 
Àn
, 
öp
);

2718 
	`INCPTR
(
Àn
, 
öp
);

2719 
Àn
 = 0;

2723 
EAPSRP_SKEY
:

2724 
	`¥öãr
(
¨g
, " <B%.*B>", 
Àn
, 
öp
);

2725 
	`INCPTR
(
Àn
, 
öp
);

2726 
Àn
 = 0;

2729 
EAPSRP_SVALIDATOR
:

2730 i‡(
Àn
 <  (
u_öt32_t
))

2732 
	`GETLONG
(
uvÆ
, 
öp
);

2733 
Àn
 - (
u_öt32_t
);

2734 i‡(
uvÆ
 & 
SRPVAL_EBIT
) {

2735 
	`¥öãr
(
¨g
, " E");

2736 
uvÆ
 &~
SRPVAL_EBIT
;

2738 i‡(
uvÆ
 != 0) {

2739 
	`¥öãr
(
¨g
, " f<%X>", 
uvÆ
);

2741 i‡((
vÆÀn
 = 
Àn
Ë> 
SHA_DIGESTSIZE
)

2742 
vÆÀn
 = 
SHA_DIGESTSIZE
;

2743 
	`¥öãr
(
¨g
, " <M2%.*B%s>", 
Àn
, 
öp
,

2744 
Àn
 < 
SHA_DIGESTSIZE
 ? "?" : "");

2745 
	`INCPTR
(
vÆÀn
, 
öp
);

2746 
Àn
 -
vÆÀn
;

2747 i‡(
Àn
 > 0) {

2748 
	`¥öãr
(
¨g
, " <PN%.*B>", 
Àn
, 
öp
);

2749 
	`INCPTR
(
Àn
, 
öp
);

2750 
Àn
 = 0;

2754 
EAPSRP_LWRECHALLENGE
:

2755 
	`¥öãr
(
¨g
, " <ChÆÀnge%.*B>", 
Àn
, 
öp
);

2756 
	`INCPTR
(
Àn
, 
öp
);

2757 
Àn
 = 0;

2764 
EAP_RESPONSE
:

2765 i‡(
Àn
 < 1)

2767 
	`GETCHAR
(
πy≥
, 
öp
);

2768 
Àn
--;

2769 i‡(
πy≥
 >= 1 &&

2770 
πy≥
 < (
óp_ty≥«mes
) /  (*))

2771 
	`¥öãr
(
¨g
, " %s", 
óp_ty≥«mes
[
πy≥
-1]);

2773 
	`¥öãr
(
¨g
, "Åy≥=0x%x", 
πy≥
);

2774 
πy≥
) {

2775 
EAPT_IDENTITY
:

2776 i‡(
Àn
 > 0) {

2777 
	`¥öãr
(
¨g
, " <Name ");

2778 
	`¥öt_°rög
((*)
öp
, 
Àn
, 
¥öãr
, 
¨g
);

2779 
	`¥öãr
(
¨g
, ">");

2780 
	`INCPTR
(
Àn
, 
öp
);

2781 
Àn
 = 0;

2785 #ifde‡
USE_EAPTLS


2786 
EAPT_TLS
:

2787 i‡(
Àn
 < 1)

2789 
	`GETCHAR
(
Êags
, 
öp
);

2790 
Àn
--;

2792 if(
Êags
 =0 && 
Àn
 == 0){

2793 
	`¥öãr
(
¨g
, " Ack");

2797 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_LI
 ? " L":" -");

2798 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_MF
 ? "M":"-");

2799 
	`¥öãr
(
¨g
, 
Êags
 & 
EAP_TLS_FLAGS_START
 ? "S":"- ");

2804 
EAPT_NAK
:

2805 i‡(
Àn
 <= 0) {

2806 
	`¥öãr
(
¨g
, " <missing hint>");

2809 
	`GETCHAR
(
πy≥
, 
öp
);

2810 
Àn
--;

2811 
	`¥öãr
(
¨g
, " <Sugge°ed-ty≥ %02X", 
πy≥
);

2812 i‡(
πy≥
 >= 1 &&

2813 
πy≥
 <  (
óp_ty≥«mes
) /  (*))

2814 
	`¥öãr
(
¨g
, " (%s)", 
óp_ty≥«mes
[
πy≥
-1]);

2815 
	`¥öãr
(
¨g
, ">");

2818 
EAPT_MD5CHAP
:

2819 i‡(
Àn
 <= 0) {

2820 
	`¥öãr
(
¨g
, " <missingÜength>");

2823 
	`GETCHAR
(
vÆÀn
, 
öp
);

2824 
Àn
--;

2825 i‡(
vÆÀn
 > 
Àn
)

2826 
åunˇãd
;

2827 
	`¥öãr
(
¨g
, " <VÆue%.*B>", 
vÆÀn
, 
öp
);

2828 
	`INCPTR
(
vÆÀn
, 
öp
);

2829 
Àn
 -
vÆÀn
;

2830 i‡(
Àn
 > 0) {

2831 
	`¥öãr
(
¨g
, " <Name ");

2832 
	`¥öt_°rög
((*)
öp
, 
Àn
, 
¥öãr
, 
¨g
);

2833 
	`¥öãr
(
¨g
, ">");

2834 
	`INCPTR
(
Àn
, 
öp
);

2835 
Àn
 = 0;

2837 
	`¥öãr
(
¨g
, " <NoÇame>");

2841 
EAPT_SRP
:

2842 i‡(
Àn
 < 1)

2843 
åunˇãd
;

2844 
	`GETCHAR
(
vÆÀn
, 
öp
);

2845 
Àn
--;

2846 
	`¥öãr
(
¨g
, "-%d", 
vÆÀn
);

2847 
vÆÀn
) {

2848 
EAPSRP_CKEY
:

2849 
	`¥öãr
(
¨g
, " <A%.*B>", 
Àn
, 
öp
);

2850 
	`INCPTR
(
Àn
, 
öp
);

2851 
Àn
 = 0;

2854 
EAPSRP_CVALIDATOR
:

2855 i‡(
Àn
 <  (
u_öt32_t
))

2857 
	`GETLONG
(
uvÆ
, 
öp
);

2858 
Àn
 - (
u_öt32_t
);

2859 i‡(
uvÆ
 & 
SRPVAL_EBIT
) {

2860 
	`¥öãr
(
¨g
, " E");

2861 
uvÆ
 &~
SRPVAL_EBIT
;

2863 i‡(
uvÆ
 != 0) {

2864 
	`¥öãr
(
¨g
, " f<%X>", 
uvÆ
);

2866 
	`¥öãr
(
¨g
, " <M1%.*B%s>", 
Àn
, 
öp
,

2867 
Àn
 =
SHA_DIGESTSIZE
 ? "" : "?");

2868 
	`INCPTR
(
Àn
, 
öp
);

2869 
Àn
 = 0;

2872 
EAPSRP_ACK
:

2875 
EAPSRP_LWRECHALLENGE
:

2876 
	`¥öãr
(
¨g
, " <Re•⁄£%.*B%s>", 
Àn
, 
öp
,

2877 
Àn
 =
SHA_DIGESTSIZE
 ? "" : "?");

2878 i‡((
vÆÀn
 = 
Àn
Ë> 
SHA_DIGESTSIZE
)

2879 
vÆÀn
 = 
SHA_DIGESTSIZE
;

2880 
	`INCPTR
(
vÆÀn
, 
öp
);

2881 
Àn
 -
vÆÀn
;

2888 
EAP_SUCCESS
:

2889 
EAP_FAILURE
:

2892 
åunˇãd
:

2893 
	`¥öãr
(
¨g
, " <truncated>");

2897 i‡(
Àn
 > 8)

2898 
	`¥öãr
(
¨g
, "%8B...", 
öp
);

2899 i‡(
Àn
 > 0)

2900 
	`¥öãr
(
¨g
, "%.*B", 
Àn
, 
öp
);

2901 
	`INCPTR
(
Àn
, 
öp
);

2903  (
öp
 - 
p°¨t
);

2904 
	}
}

	@pppd/eap.h

23 #i‚de‡
PPP_EAP_H


24 
	#PPP_EAP_H


	)

26 #ifdef 
__˝lu•lus


33 
	#EAP_HEADERLEN
 4

	)

37 
	#EAP_REQUEST
 1

	)

38 
	#EAP_RESPONSE
 2

	)

39 
	#EAP_SUCCESS
 3

	)

40 
	#EAP_FAILURE
 4

	)

43 
	#EAPT_IDENTITY
 1

	)

44 
	#EAPT_NOTIFICATION
 2

	)

45 
	#EAPT_NAK
 3

	)

46 
	#EAPT_MD5CHAP
 4

	)

47 
	#EAPT_OTP
 5

	)

48 
	#EAPT_TOKEN
 6

	)

50 
	#EAPT_RSA
 9

	)

51 
	#EAPT_DSS
 10

	)

52 
	#EAPT_KEA
 11

	)

53 
	#EAPT_KEA_VALIDATE
 12

	)

54 
	#EAPT_TLS
 13

	)

55 
	#EAPT_DEFENDER
 14

	)

56 
	#EAPT_W2K
 15

	)

57 
	#EAPT_ARCOT
 16

	)

58 
	#EAPT_CISCOWIRELESS
 17

	)

59 
	#EAPT_NOKIACARD
 18

	)

60 
	#EAPT_SRP
 19

	)

64 
	#EAPSRP_CHALLENGE
 1

	)

65 
	#EAPSRP_CKEY
 1

	)

66 
	#EAPSRP_SKEY
 2

	)

67 
	#EAPSRP_CVALIDATOR
 2

	)

68 
	#EAPSRP_SVALIDATOR
 3

	)

69 
	#EAPSRP_ACK
 3

	)

70 
	#EAPSRP_LWRECHALLENGE
 4

	)

72 
	#SRPVAL_EBIT
 0x00000001

	)

74 
	#SRP_PSEUDO_ID
 "p£udo_"

	)

75 
	#SRP_PSEUDO_LEN
 7

	)

77 
	#MD5_SIGNATURE_SIZE
 16

	)

78 
	#MIN_CHALLENGE_LENGTH
 16

	)

79 
	#MAX_CHALLENGE_LENGTH
 24

	)

81 
	eóp_°©e_code
 {

82 
ópInôül
 = 0,

83 
ópPídög
,

84 
ópClo£d
,

85 
ópLi°í
,

86 
ópIdítify
,

87 
ópTlsSèπ
,

88 
ópTlsRecv
,

89 
ópTlsSídAck
,

90 
ópTlsSíd
,

91 
ópTlsRecvAck
,

92 
ópTlsRecvClõ¡
,

93 
ópTlsSídAÀπ
,

94 
ópTlsRecvAÀπAck
,

95 
ópTlsRecvSuc˚ss
,

96 
ópTlsRecvFaûuª
,

97 
ópSRP1
,

98 
ópSRP2
,

99 
ópSRP3
,

100 
ópMD5ChÆl
,

101 
ópO≥n
,

102 
ópSRP4
,

103 
ópBadAuth


106 
	#EAP_STATES
 \

110 "SRP1", "SRP2", "SRP3", "MD5ChÆl", "O≥n", "SRP4", "BadAuth"

	)

112 #ifde‡
USE_EAPTLS


113 
	#óp_˛õ¡_a˘ive
(
e•
Ë(”•)->
es_˛õ¡
.
ó_°©e
 !
ópInôül
 &&\

114 (
e•
)->
es_˛õ¡
.
ó_°©e
 !
ópPídög
 &&\

115 (
e•
)->
es_˛õ¡
.
ó_°©e
 !
ópClo£d
)

	)

117 
	#óp_˛õ¡_a˘ive
(
e•
Ë(”•)->
es_˛õ¡
.
ó_°©e
 =
ópLi°í
)

	)

120 
	#óp_£rvî_a˘ive
(
e•
) \

121 ((
e•
)->
es_£rvî
.
ó_°©e
 >
ópIdítify
 && \

122 (
e•
)->
es_£rvî
.
ó_°©e
 <
ópMD5ChÆl
)

	)

124 
	sóp_auth
 {

125 *
ó_«me
;

126 *
ó_≥î
;

127 *
ó_£ssi⁄
;

128 
u_ch¨
 *
ó_skey
;

129 
ó_timeout
;

130 
ó_maxªque°s
;

131 
u_sh‹t
 
ó_«mñí
;

132 
u_sh‹t
 
ó_≥îÀn
;

133 
óp_°©e_code
 
ó_°©e
;

134 #ifde‡
USE_EAPTLS


135 
óp_°©e_code
 
ó_¥ev_°©e
;

137 
u_ch¨
 
ó_id
;

138 
u_ch¨
 
ó_ªque°s
;

139 
u_ch¨
 
ó_ª•⁄£s
;

140 
u_ch¨
 
ó_ty≥
;

141 
u_öt32_t
 
ó_keyÊags
;

142 #ifde‡
USE_EAPTLS


143 
boﬁ
 
ó_usög_ó±ls
;

150 
	sóp_°©e
 {

151 
es_unô
;

152 
óp_auth
 
es_˛õ¡
;

153 
óp_auth
 
es_£rvî
;

154 
es_ßvedtime
;

155 
es_ªchÆÀnge
;

156 
es_lwªchÆÀnge
;

157 
boﬁ
 
es_u£p£udo
;

158 
es_u£dp£udo
;

159 
es_chÆÀn
;

160 
u_ch¨
 
es_chÆÀnge
[
MAX_CHALLENGE_LENGTH
];

161 } 
	tóp_°©e
;

166 
	#EAP_DEFTIMEOUT
 3

	)

167 #ifde‡
USE_EAPTLS


168 
	#EAP_DEFTRANSMITS
 30

	)

171 
	#EAP_DEFTRANSMITS
 10

	)

173 
	#EAP_DEFREQTIME
 20

	)

174 
	#EAP_DEFALLOWREQ
 20

	)

176 
óp_°©e
 
óp_°©es
[];

178 
óp_authwôh≥î
 
__P
((
unô
, *
loˇ ame
));

179 
óp_auth≥î
 
__P
((
unô
, *
loˇ ame
));

181 
¥Ÿít
 
óp_¥Ÿít
;

183 #ifdef 
__˝lu•lus


	@pppd/ecp.c

60 
	#RCSID
 "$Id:É˝.c,v 1.4 2004/11/04 10:02:26Öaulu†Ex∞$"

	)

63 
	~<°rög.h
>

65 
	~"µpd.h
"

66 
	~"fsm.h
"

67 
	~"e˝.h
"

69 
›ti⁄_t
 
	ge˝_›ti⁄_li°
[] = {

70 { "n€˝", 
o_boﬁ
, &
e˝_¥Ÿít
.
íabÀd_Êag
,

72 { "-e˝", 
o_boﬁ
, &
e˝_¥Ÿít
.
íabÀd_Êag
,

73 "DißbÀ ECPÇegŸüti⁄", 
OPT_ALIAS
 },

75 { 
NULL
 }

81 
e˝_öô
 
__P
((
unô
));

90 
e˝_¥öçkt
 
__P
((
u_ch¨
 *
pkt
, 
Àn
,

91 (*
¥öãr
Ë
	`__P
((*, *, ...)),

92 *
¨g
));

97 
¥Ÿít
 
e˝_¥Ÿít
 = {

98 
PPP_ECP
,

99 
e˝_öô
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
e˝_¥öçkt
,

107 
NULL
,

111 
e˝_›ti⁄_li°
,

112 
NULL
,

113 
NULL
,

114 
NULL


115 
	}
};

117 
fsm
 
	ge˝_fsm
[
NUM_PPP
];

118 
e˝_›ti⁄s
 
	ge˝_w™t›ti⁄s
[
NUM_PPP
];

119 
e˝_›ti⁄s
 
	ge˝_gŸ›ti⁄s
[
NUM_PPP
];

120 
e˝_›ti⁄s
 
	ge˝_Ælow›ti⁄s
[
NUM_PPP
];

121 
e˝_›ti⁄s
 
	ge˝_his›ti⁄s
[
NUM_PPP
];

123 
fsm_ˇŒbacks
 
	ge˝_ˇŒbacks
 = {

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

145 
	$e˝_öô
(
unô
)

146 
unô
;

148 
fsm
 *
f
 = &
e˝_fsm
[
unô
];

150 
f
->
unô
 = unit;

151 
f
->
¥Ÿocﬁ
 = 
PPP_ECP
;

152 
f
->
ˇŒbacks
 = &
e˝_ˇŒbacks
;

153 
	`fsm_öô
(
f
);

155 
	`mem£t
(&
e˝_w™t›ti⁄s
[
unô
], 0, (
e˝_›ti⁄s
));

156 
	`mem£t
(&
e˝_gŸ›ti⁄s
[
unô
], 0, (
e˝_›ti⁄s
));

157 
	`mem£t
(&
e˝_Ælow›ti⁄s
[
unô
], 0, (
e˝_›ti⁄s
));

158 
	`mem£t
(&
e˝_his›ti⁄s
[
unô
], 0, (
e˝_›ti⁄s
));

160 
	}
}

164 
	$e˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

165 
u_ch¨
 *
p
;

166 
∂í
;

167 (*
¥öãr
Ë
	`__P
((*, *, ...));

168 *
¨g
;

171 
	}
}

	@pppd/ecp.h

34 
	se˝_›ti⁄s
 {

35 
boﬁ
 
	mªquúed
;

36 
	mí˘y≥
;

37 } 
	te˝_›ti⁄s
;

39 
fsm
 
e˝_fsm
[];

40 
e˝_›ti⁄s
 
e˝_w™t›ti⁄s
[];

41 
e˝_›ti⁄s
 
e˝_gŸ›ti⁄s
[];

42 
e˝_›ti⁄s
 
e˝_Ælow›ti⁄s
[];

43 
e˝_›ti⁄s
 
e˝_his›ti⁄s
[];

45 
¥Ÿít
 
e˝_¥Ÿít
;

	@pppd/eui64.c

38 
	#RCSID
 "$Id:Éui64.c,v 1.6 2002/12/04 23:03:32Öaulu†Ex∞$"

	)

40 
	~"µpd.h
"

47 
	$eui64_¡ﬂ
(
e
)

48 
eui64_t
 
e
;

50 
buf
[32];

52 
	`¢¥ötf
(
buf
, 32, "%02x%02x:%02x%02x:%02x%02x:%02x%02x",

53 
e
.
e8
[0],É.e8[1],É.e8[2],É.e8[3],

54 
e
.
e8
[4],É.e8[5],É.e8[6],É.e8[7]);

55  
buf
;

56 
	}
}

	@pppd/eui64.h

38 #i‚de‡
__EUI64_H__


39 
	#__EUI64_H__


	)

41 #i‡!
deföed
(
INET6
)

45 #i‡
deföed
(
SOL2
)

46 
	~<√töë/ö.h
>

49 
uöt8_t
 
	me8
[8];

50 
uöt32_t
 
	me32
[2];

51 } 
	teui64_t
;

57 
	#s6_addr8
 
_S6_un
.
_S6_u8


	)

58 
	#s6_addr32
 
_S6_un
.
_S6_u32


	)

69 
u_öt8_t
 
	me8
[8];

70 
u_öt16_t
 
	me16
[4];

71 
u_öt32_t
 
	me32
[2];

72 } 
	teui64_t
;

76 
	#eui64_iszîo
(
e
Ë((”).
e32
[0] | (e).e32[1]Ë=0)

	)

77 
	#eui64_equÆs
(
e
, 
o
Ë((”).
e32
[0] == (o).e32[0]) && \

78 ((
e
).
e32
[1] =(
o
).e32[1]))

	)

79 
	#eui64_zîo
(
e
Ë”).
e32
[0] = (e).e32[1] = 0;

	)

81 
	#eui64_c›y
(
s
, 
d
Ë
	`mem˝y
(&(d), &(s), (
eui64_t
))

	)

83 
	#eui64_magic
(
e
) do { \

84 (
e
).
e32
[0] = 
	`magic
(); \

85 (
e
).
e32
[1] = 
	`magic
(); \

86 (
e
).
e8
[0] &= ~2; \

87 } 0)

	)

88 
	#eui64_magic_nz
(
x
) do { \

89 
	`eui64_magic
(
x
); \

90 } 
	`eui64_iszîo
(
x
))

	)

91 
	#eui64_magic_√
(
x
, 
y
) do { \

92 
	`eui64_magic
(
x
); \

93 } 
	`eui64_equÆs
(
x
, 
y
))

	)

95 
	#eui64_gë
(
Œ
, 
˝
) do { \

96 
	`eui64_c›y
((*
˝
), (
Œ
)); \

97 (
˝
Ë+(
eui64_t
); \

98 } 0)

	)

100 
	#eui64_put
(
Œ
, 
˝
) do { \

101 
	`eui64_c›y
((
Œ
), (*
˝
)); \

102 (
˝
Ë+(
eui64_t
); \

103 } 0)

	)

105 
	#eui64_£t32
(
e
, 
l
) do { \

106 (
e
).
e32
[0] = 0; \

107 (
e
).
e32
[1] = 
	`ht⁄l
(
l
); \

108 } 0)

	)

109 
	#eui64_£éo32
(
e
, 
l
Ë
	`eui64_£t32
”,Ü)

	)

111 *
eui64_¡ﬂ
 
__P
((
eui64_t
));

	@pppd/fsm.c

43 
	#RCSID
 "$Id: fsm.c,v 1.23 2004/11/13 02:28:15Öaulu†Ex∞$"

	)

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<sys/ty≥s.h
>

55 
	~"µpd.h
"

56 
	~"fsm.h
"

59 
fsm_timeout
 
__P
((*));

60 
fsm_rc⁄‰eq
 
__P
((
fsm
 *, , 
u_ch¨
 *, ));

61 
fsm_rc⁄Áck
 
__P
((
fsm
 *, , 
u_ch¨
 *, ));

62 
fsm_rc⁄‚akªj
 
__P
((
fsm
 *, , , 
u_ch¨
 *, ));

63 
fsm_πîmªq
 
__P
((
fsm
 *, , 
u_ch¨
 *, ));

64 
fsm_πîmack
 
__P
((
fsm
 *));

65 
fsm_rcodîej
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

66 
fsm_sc⁄‰eq
 
__P
((
fsm
 *, ));

68 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

70 
	g≥î_mru
[
NUM_PPP
];

79 
	$fsm_öô
(
f
)

80 
fsm
 *
f
;

82 
f
->
°©e
 = 
INITIAL
;

83 
f
->
Êags
 = 0;

84 
f
->
id
 = 0;

85 
f
->
timeouâime
 = 
DEFTIMEOUT
;

86 
f
->
maxc⁄‰eqå™smôs
 = 
DEFMAXCONFREQS
;

87 
f
->
maxãrmå™smôs
 = 
DEFMAXTERMREQS
;

88 
f
->
max«klo›s
 = 
DEFMAXNAKLOOPS
;

89 
f
->
ãrm_ªas⁄_Àn
 = 0;

90 
	}
}

97 
	$fsm_lowîup
(
f
)

98 
fsm
 *
f
;

100  
f
->
°©e
 ){

101 
INITIAL
:

102 
f
->
°©e
 = 
CLOSED
;

105 
STARTING
:

106 if–
f
->
Êags
 & 
OPT_SILENT
 )

107 
f
->
°©e
 = 
STOPPED
;

110 
	`fsm_sc⁄‰eq
(
f
, 0);

111 
f
->
°©e
 = 
REQSENT
;

116 
	`FSMDEBUG
(("%s: U∞evíàö sèã %d!", 
	`PROTO_NAME
(
f
), f->
°©e
));

118 
	}
}

127 
	$fsm_lowîdown
(
f
)

128 
fsm
 *
f
;

130  
f
->
°©e
 ){

131 
CLOSED
:

132 
f
->
°©e
 = 
INITIAL
;

135 
STOPPED
:

136 
f
->
°©e
 = 
STARTING
;

137 if–
f
->
ˇŒbacks
->
°¨tög
 )

138 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

141 
CLOSING
:

142 
f
->
°©e
 = 
INITIAL
;

143 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

146 
STOPPING
:

147 
REQSENT
:

148 
ACKRCVD
:

149 
ACKSENT
:

150 
f
->
°©e
 = 
STARTING
;

151 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

154 
OPENED
:

155 if–
f
->
ˇŒbacks
->
down
 )

156 (*
f
->
ˇŒbacks
->
down
)(f);

157 
f
->
°©e
 = 
STARTING
;

161 
	`FSMDEBUG
(("%s: Dow¿evíàö sèã %d!", 
	`PROTO_NAME
(
f
), f->
°©e
));

163 
	}
}

170 
	$fsm_›í
(
f
)

171 
fsm
 *
f
;

173  
f
->
°©e
 ){

174 
INITIAL
:

175 
f
->
°©e
 = 
STARTING
;

176 if–
f
->
ˇŒbacks
->
°¨tög
 )

177 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

180 
CLOSED
:

181 if–
f
->
Êags
 & 
OPT_SILENT
 )

182 
f
->
°©e
 = 
STOPPED
;

185 
	`fsm_sc⁄‰eq
(
f
, 0);

186 
f
->
°©e
 = 
REQSENT
;

190 
CLOSING
:

191 
f
->
°©e
 = 
STOPPING
;

193 
STOPPED
:

194 
OPENED
:

195 if–
f
->
Êags
 & 
OPT_RESTART
 ){

196 
	`fsm_lowîdown
(
f
);

197 
	`fsm_lowîup
(
f
);

201 
	}
}

210 
	$ãrmö©e_œyî
(
f
, 
√xt°©e
)

211 
fsm
 *
f
;

212 
√xt°©e
;

214 if–
f
->
°©e
 !
OPENED
 )

215 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

216 if–
f
->
ˇŒbacks
->
down
 )

217 (*
f
->
ˇŒbacks
->
down
)(f);

220 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

221 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

222 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

224 i‡(
f
->
ªå™smôs
 == 0) {

230 
f
->
°©e
 = 
√xt°©e
 =
CLOSING
 ? 
CLOSED
 : 
STOPPED
;

231 if–
f
->
ˇŒbacks
->
föished
 )

232 (*
f
->
ˇŒbacks
->
föished
)(f);

236 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

237 --
f
->
ªå™smôs
;

239 
f
->
°©e
 = 
√xt°©e
;

240 
	}
}

249 
	$fsm_˛o£
(
f
, 
ªas⁄
)

250 
fsm
 *
f
;

251 *
ªas⁄
;

253 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

254 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

255  
f
->
°©e
 ){

256 
STARTING
:

257 
f
->
°©e
 = 
INITIAL
;

259 
STOPPED
:

260 
f
->
°©e
 = 
CLOSED
;

262 
STOPPING
:

263 
f
->
°©e
 = 
CLOSING
;

266 
REQSENT
:

267 
ACKRCVD
:

268 
ACKSENT
:

269 
OPENED
:

270 
	`ãrmö©e_œyî
(
f
, 
CLOSING
);

273 
	}
}

280 
	$fsm_timeout
(
¨g
)

281 *
¨g
;

283 
fsm
 *
f
 = (fsm *Ë
¨g
;

285 
f
->
°©e
) {

286 
CLOSING
:

287 
STOPPING
:

288 if–
f
->
ªå™smôs
 <= 0 ){

292 
f
->
°©e
 = (f->°©ê=
CLOSING
)? 
CLOSED
: 
STOPPED
;

293 if–
f
->
ˇŒbacks
->
föished
 )

294 (*
f
->
ˇŒbacks
->
föished
)(f);

297 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

298 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

299 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

300 --
f
->
ªå™smôs
;

304 
REQSENT
:

305 
ACKRCVD
:

306 
ACKSENT
:

307 i‡(
f
->
ªå™smôs
 <= 0) {

308 
	`w¨n
("%s:Åimeouà£ndög C⁄fig-Reque°s\n", 
	`PROTO_NAME
(
f
));

309 
f
->
°©e
 = 
STOPPED
;

310 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 )

311 (*
f
->
ˇŒbacks
->
föished
)(f);

315 i‡(
f
->
ˇŒbacks
->
ªå™smô
)

316 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

317 
	`fsm_sc⁄‰eq
(
f
, 1);

318 if–
f
->
°©e
 =
ACKRCVD
 )

319 
f
->
°©e
 = 
REQSENT
;

324 
	`FSMDEBUG
(("%s: Timeouàevíàö sèã %d!", 
	`PROTO_NAME
(
f
), f->
°©e
));

326 
	}
}

333 
	$fsm_öput
(
f
, 
ö∑ckë
, 
l
)

334 
fsm
 *
f
;

335 
u_ch¨
 *
ö∑ckë
;

336 
l
;

338 
u_ch¨
 *
öp
;

339 
u_ch¨
 
code
, 
id
;

340 
Àn
;

346 
öp
 = 
ö∑ckë
;

347 i‡(
l
 < 
HEADERLEN
) {

348 
	`FSMDEBUG
(("fsm_öput(%x): Rcvd sh‹àhódî.", 
f
->
¥Ÿocﬁ
));

351 
	`GETCHAR
(
code
, 
öp
);

352 
	`GETCHAR
(
id
, 
öp
);

353 
	`GETSHORT
(
Àn
, 
öp
);

354 i‡(
Àn
 < 
HEADERLEN
) {

355 
	`FSMDEBUG
(("fsm_öput(%x): Rcvd iŒegÆÜígth.", 
f
->
¥Ÿocﬁ
));

358 i‡(
Àn
 > 
l
) {

359 
	`FSMDEBUG
(("fsm_öput(%x): Rcvd sh‹à∑ckë.", 
f
->
¥Ÿocﬁ
));

362 
Àn
 -
HEADERLEN
;

364 if–
f
->
°©e
 =
INITIAL
 || f->°©ê=
STARTING
 ){

365 
	`FSMDEBUG
(("fsm_input(%x): RcvdÖacket in state %d.",

366 
f
->
¥Ÿocﬁ
, f->
°©e
));

373 
code
) {

374 
CONFREQ
:

375 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

378 
CONFACK
:

379 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

382 
CONFNAK
:

383 
CONFREJ
:

384 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

387 
TERMREQ
:

388 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

391 
TERMACK
:

392 
	`fsm_πîmack
(
f
);

395 
CODEREJ
:

396 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

400 if–!
f
->
ˇŒbacks
->
extcode


401 || !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) )

402 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

405 
	}
}

412 
	$fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
)

413 
fsm
 *
f
;

414 
u_ch¨
 
id
;

415 
u_ch¨
 *
öp
;

416 
Àn
;

418 
code
, 
ªje˘_if_dißgªe
;

420  
f
->
°©e
 ){

421 
CLOSED
:

423 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

425 
CLOSING
:

426 
STOPPING
:

429 
OPENED
:

431 if–
f
->
ˇŒbacks
->
down
 )

432 (*
f
->
ˇŒbacks
->
down
)(f);

433 
	`fsm_sc⁄‰eq
(
f
, 0);

434 
f
->
°©e
 = 
REQSENT
;

437 
STOPPED
:

439 
	`fsm_sc⁄‰eq
(
f
, 0);

440 
f
->
°©e
 = 
REQSENT
;

448 i‡(
f
->
ˇŒbacks
->
ªqci
){

449 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

450 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

451 } i‡(
Àn
)

452 
code
 = 
CONFREJ
;

454 
code
 = 
CONFACK
;

457 
	`fsm_sd©a
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

459 i‡(
code
 =
CONFACK
) {

460 i‡(
f
->
°©e
 =
ACKRCVD
) {

461 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

462 
f
->
°©e
 = 
OPENED
;

463 i‡(
f
->
ˇŒbacks
->
up
)

464 (*
f
->
ˇŒbacks
->
up
)(f);

466 
f
->
°©e
 = 
ACKSENT
;

467 
f
->
«klo›s
 = 0;

471 i‡(
f
->
°©e
 !
ACKRCVD
)

472 
f
->
°©e
 = 
REQSENT
;

473 if–
code
 =
CONFNAK
 )

474 ++
f
->
«klo›s
;

476 
	}
}

483 
	$fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
)

484 
fsm
 *
f
;

485 
id
;

486 
u_ch¨
 *
öp
;

487 
Àn
;

489 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
)

491 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
):

492 (
Àn
 == 0)) ){

494 
	`îr‹
("Re˚ived bad c⁄figuª-ack: %P", 
öp
, 
Àn
);

497 
f
->
£í_ack
 = 1;

498 
f
->
∫aklo›s
 = 0;

500 
f
->
°©e
) {

501 
CLOSED
:

502 
STOPPED
:

503 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

506 
REQSENT
:

507 
f
->
°©e
 = 
ACKRCVD
;

508 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

511 
ACKRCVD
:

513 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

514 
	`fsm_sc⁄‰eq
(
f
, 0);

515 
f
->
°©e
 = 
REQSENT
;

518 
ACKSENT
:

519 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

520 
f
->
°©e
 = 
OPENED
;

521 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

522 i‡(
f
->
ˇŒbacks
->
up
)

523 (*
f
->
ˇŒbacks
->
up
)(f);

526 
OPENED
:

528 i‡(
f
->
ˇŒbacks
->
down
)

529 (*
f
->
ˇŒbacks
->
down
)(f);

530 
	`fsm_sc⁄‰eq
(
f
, 0);

531 
f
->
°©e
 = 
REQSENT
;

534 
	}
}

541 
	$fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
)

542 
fsm
 *
f
;

543 
code
, 
id
;

544 
u_ch¨
 *
öp
;

545 
Àn
;

547 
ªt
;

548 
åót_as_ªje˘
;

550 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
)

553 i‡(
code
 =
CONFNAK
) {

554 ++
f
->
∫aklo›s
;

555 
åót_as_ªje˘
 = (
f
->
∫aklo›s
 >f->
max«klo›s
);

556 i‡(
f
->
ˇŒbacks
->
«kci
 =
NULL


557 || !(
ªt
 = 
f
->
ˇŒbacks
->
	`«kci
(f, 
öp
, 
Àn
, 
åót_as_ªje˘
))) {

558 
	`îr‹
("Re˚ived bad c⁄figuª-«k: %P", 
öp
, 
Àn
);

562 
f
->
∫aklo›s
 = 0;

563 i‡(
f
->
ˇŒbacks
->
ªjci
 =
NULL


564 || !(
ªt
 = 
f
->
ˇŒbacks
->
	`ªjci
(f, 
öp
, 
Àn
))) {

565 
	`îr‹
("Re˚ived bad c⁄figuª-ªj: %P", 
öp
, 
Àn
);

570 
f
->
£í_ack
 = 1;

572 
f
->
°©e
) {

573 
CLOSED
:

574 
STOPPED
:

575 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

578 
REQSENT
:

579 
ACKSENT
:

581 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

582 i‡(
ªt
 < 0)

583 
f
->
°©e
 = 
STOPPED
;

585 
	`fsm_sc⁄‰eq
(
f
, 0);

588 
ACKRCVD
:

590 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

591 
	`fsm_sc⁄‰eq
(
f
, 0);

592 
f
->
°©e
 = 
REQSENT
;

595 
OPENED
:

597 i‡(
f
->
ˇŒbacks
->
down
)

598 (*
f
->
ˇŒbacks
->
down
)(f);

599 
	`fsm_sc⁄‰eq
(
f
, 0);

600 
f
->
°©e
 = 
REQSENT
;

603 
	}
}

610 
	$fsm_πîmªq
(
f
, 
id
, 
p
, 
Àn
)

611 
fsm
 *
f
;

612 
id
;

613 
u_ch¨
 *
p
;

614 
Àn
;

616 
f
->
°©e
) {

617 
ACKRCVD
:

618 
ACKSENT
:

619 
f
->
°©e
 = 
REQSENT
;

622 
OPENED
:

623 i‡(
Àn
 > 0) {

624 
	`öfo
("%†ãrmö©ed byÖì∏(%0.*v)", 
	`PROTO_NAME
(
f
), 
Àn
, 
p
);

626 
	`öfo
("%†ãrmö©ed byÖìr", 
	`PROTO_NAME
(
f
));

627 
f
->
ªå™smôs
 = 0;

628 
f
->
°©e
 = 
STOPPING
;

629 i‡(
f
->
ˇŒbacks
->
down
)

630 (*
f
->
ˇŒbacks
->
down
)(f);

631 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

635 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

636 
	}
}

643 
	$fsm_πîmack
(
f
)

644 
fsm
 *
f
;

646 
f
->
°©e
) {

647 
CLOSING
:

648 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

649 
f
->
°©e
 = 
CLOSED
;

650 if–
f
->
ˇŒbacks
->
föished
 )

651 (*
f
->
ˇŒbacks
->
föished
)(f);

653 
STOPPING
:

654 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

655 
f
->
°©e
 = 
STOPPED
;

656 if–
f
->
ˇŒbacks
->
föished
 )

657 (*
f
->
ˇŒbacks
->
föished
)(f);

660 
ACKRCVD
:

661 
f
->
°©e
 = 
REQSENT
;

664 
OPENED
:

665 i‡(
f
->
ˇŒbacks
->
down
)

666 (*
f
->
ˇŒbacks
->
down
)(f);

667 
	`fsm_sc⁄‰eq
(
f
, 0);

668 
f
->
°©e
 = 
REQSENT
;

671 
	}
}

678 
	$fsm_rcodîej
(
f
, 
öp
, 
Àn
)

679 
fsm
 *
f
;

680 
u_ch¨
 *
öp
;

681 
Àn
;

683 
u_ch¨
 
code
, 
id
;

685 i‡(
Àn
 < 
HEADERLEN
) {

686 
	`FSMDEBUG
(("fsm_rcoderej: Rcvd short Code-RejectÖacket!"));

689 
	`GETCHAR
(
code
, 
öp
);

690 
	`GETCHAR
(
id
, 
öp
);

691 
	`w¨n
("%s: Rcvd Code-Reje˘ f‹ codê%d, id %d", 
	`PROTO_NAME
(
f
), 
code
, 
id
);

693 if–
f
->
°©e
 =
ACKRCVD
 )

694 
f
->
°©e
 = 
REQSENT
;

695 
	}
}

704 
	$fsm_¥Ÿªje˘
(
f
)

705 
fsm
 *
f
;

707  
f
->
°©e
 ){

708 
CLOSING
:

709 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

711 
CLOSED
:

712 
f
->
°©e
 = 
CLOSED
;

713 if–
f
->
ˇŒbacks
->
föished
 )

714 (*
f
->
ˇŒbacks
->
föished
)(f);

717 
STOPPING
:

718 
REQSENT
:

719 
ACKRCVD
:

720 
ACKSENT
:

721 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

723 
STOPPED
:

724 
f
->
°©e
 = 
STOPPED
;

725 if–
f
->
ˇŒbacks
->
föished
 )

726 (*
f
->
ˇŒbacks
->
föished
)(f);

729 
OPENED
:

730 
	`ãrmö©e_œyî
(
f
, 
STOPPING
);

734 
	`FSMDEBUG
(("%s: Protocol-rejectÉvent in state %d!",

735 
	`PROTO_NAME
(
f
), f->
°©e
));

737 
	}
}

744 
	$fsm_sc⁄‰eq
(
f
, 
ªå™smô
)

745 
fsm
 *
f
;

746 
ªå™smô
;

748 
u_ch¨
 *
ouç
;

749 
cûí
;

751 if–
f
->
°©e
 !
REQSENT
 && f->°©ê!
ACKRCVD
 && f->°©ê!
ACKSENT
 ){

753 if–
f
->
ˇŒbacks
->
ª£tci
 )

754 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

755 
f
->
«klo›s
 = 0;

756 
f
->
∫aklo›s
 = 0;

759 if–!
ªå™smô
 ){

761 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

762 
f
->
ªqid
 = ++f->
id
;

765 
f
->
£í_ack
 = 0;

770 
ouç
 = 
ouçackë_buf
 + 
PPP_HDRLEN
 + 
HEADERLEN
;

771 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ){

772 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

773 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
 )

774 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

775 i‡(
f
->
ˇŒbacks
->
addci
)

776 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

778 
cûí
 = 0;

781 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

784 --
f
->
ªå™smôs
;

785 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

786 
	}
}

795 
	$fsm_sd©a
(
f
, 
code
, 
id
, 
d©a
, 
d©Æí
)

796 
fsm
 *
f
;

797 
u_ch¨
 
code
, 
id
;

798 
u_ch¨
 *
d©a
;

799 
d©Æí
;

801 
u_ch¨
 *
ouç
;

802 
ouéí
;

805 
ouç
 = 
ouçackë_buf
;

806 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
)

807 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

808 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
)

809 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

810 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

811 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

812 
	`PUTCHAR
(
code
, 
ouç
);

813 
	`PUTCHAR
(
id
, 
ouç
);

814 
	`PUTSHORT
(
ouéí
, 
ouç
);

815 
	`ouçut
(
f
->
unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

816 
	}
}

	@pppd/fsm.h

48 
	#HEADERLEN
 4

	)

54 
	#CONFREQ
 1

	)

55 
	#CONFACK
 2

	)

56 
	#CONFNAK
 3

	)

57 
	#CONFREJ
 4

	)

58 
	#TERMREQ
 5

	)

59 
	#TERMACK
 6

	)

60 
	#CODEREJ
 7

	)

66 
	sfsm
 {

67 
	munô
;

68 
	m¥Ÿocﬁ
;

69 
	m°©e
;

70 
	mÊags
;

71 
u_ch¨
 
	mid
;

72 
u_ch¨
 
	mªqid
;

73 
u_ch¨
 
	m£í_ack
;

74 
	mtimeouâime
;

75 
	mmaxc⁄‰eqå™smôs
;

76 
	mªå™smôs
;

77 
	mmaxãrmå™smôs
;

78 
	m«klo›s
;

79 
	m∫aklo›s
;

80 
	mmax«klo›s
;

81 
fsm_ˇŒbacks
 *
	mˇŒbacks
;

82 *
	mãrm_ªas⁄
;

83 
	mãrm_ªas⁄_Àn
;

84 } 
	tfsm
;

87 
	sfsm_ˇŒbacks
 {

88 (*
	mª£tci
)

89 
__P
((
fsm
 *));

90 (*
	mcûí
)

91 
__P
((
fsm
 *));

92 (*
	maddci
)

93 
__P
((
fsm
 *, 
u_ch¨
 *, *));

94 (*
	mackci
)

95 
__P
((
fsm
 *, 
u_ch¨
 *, ));

96 (*
	m«kci
)

97 
__P
((
fsm
 *, 
u_ch¨
 *, , ));

98 (*
	mªjci
)

99 
__P
((
fsm
 *, 
u_ch¨
 *, ));

100 (*
	mªqci
)

101 
__P
((
fsm
 *, 
u_ch¨
 *, *, ));

102 (*
	mup
)

103 
__P
((
fsm
 *));

104 (*
	mdown
)

105 
__P
((
fsm
 *));

106 (*
	m°¨tög
)

107 
__P
((
fsm
 *));

108 (*
	mföished
)

109 
__P
((
fsm
 *));

110 (*
	m¥Ÿªje˘
)

111 
__P
(());

112 (*
	mªå™smô
)

113 
__P
((
fsm
 *));

114 (*
	mextcode
)

115 
__P
((
fsm
 *, , , 
u_ch¨
 *, ));

116 *
	m¥Ÿo_«me
;

117 } 
	tfsm_ˇŒbacks
;

123 
	#INITIAL
 0

	)

124 
	#STARTING
 1

	)

125 
	#CLOSED
 2

	)

126 
	#STOPPED
 3

	)

127 
	#CLOSING
 4

	)

128 
	#STOPPING
 5

	)

129 
	#REQSENT
 6

	)

130 
	#ACKRCVD
 7

	)

131 
	#ACKSENT
 8

	)

132 
	#OPENED
 9

	)

138 
	#OPT_PASSIVE
 1

	)

139 
	#OPT_RESTART
 2

	)

140 
	#OPT_SILENT
 4

	)

146 
	#DEFTIMEOUT
 3

	)

147 
	#DEFMAXTERMREQS
 2

	)

148 
	#DEFMAXCONFREQS
 10

	)

149 
	#DEFMAXNAKLOOPS
 5

	)

155 
fsm_öô
 
__P
((
fsm
 *));

156 
fsm_lowîup
 
__P
((
fsm
 *));

157 
fsm_lowîdown
 
__P
((
fsm
 *));

158 
fsm_›í
 
__P
((
fsm
 *));

159 
fsm_˛o£
 
__P
((
fsm
 *, *));

160 
fsm_öput
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

161 
fsm_¥Ÿªje˘
 
__P
((
fsm
 *));

162 
fsm_sd©a
 
__P
((
fsm
 *, , , 
u_ch¨
 *, ));

168 
≥î_mru
[];

	@pppd/ipcp.c

43 
	#RCSID
 "$Id: ip˝.c,v 1.73 2008/05/26 08:33:22Öaulu†Ex∞$"

	)

49 
	~<°dio.h
>

50 
	~<°rög.h
>

51 
	~<°dlib.h
>

52 
	~<√tdb.h
>

53 
	~<sys/∑øm.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<√töë/ö.h
>

57 
	~<¨∑/öë.h
>

59 
	~"µpd.h
"

60 
	~"fsm.h
"

61 
	~"ù˝.h
"

62 
	~"∑th«mes.h
"

66 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

67 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

68 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

69 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

71 
u_öt32_t
 
	g√tmask
 = 0;

73 
boﬁ
 
	gdißbÀ_deÁu…ù
 = 0;

74 
boﬁ
 
	gn‹emŸeù
 = 0;

77 (*
ù_up_hook
Ë
	`__P
(()Ë
NULL
;

80 (*
ù_down_hook
Ë
	`__P
(()Ë
NULL
;

83 (*
ù_choo£_hook
Ë
	`__P
((
u_öt32_t
 *)Ë
NULL
;

86 
nŸifõr
 *
ù_up_nŸifõr
 = 
NULL
;

87 
nŸifõr
 *
ù_down_nŸifõr
 = 
NULL
;

90 
deÁu…_rouã_£t
[
NUM_PPP
];

91 
¥oxy_¨p_£t
[
NUM_PPP
];

92 
boﬁ
 
u£≥îdns
;

93 
ù˝_is_up
;

94 
ù˝_is_›í
;

95 
boﬁ
 
ask_f‹_loˇl
;

96 
vj_vÆue
[8];

97 
√tmask_°r
[20];

102 
ù˝_ª£tci
 
	`__P
((
fsm
 *));

103 
ù˝_cûí
 
	`__P
((
fsm
 *));

104 
ù˝_addci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, *));

105 
ù˝_ackci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, ));

106 
ù˝_«kci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, , ));

107 
ù˝_ªjci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, ));

108 
ù˝_ªqci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, *, ));

109 
ù˝_up
 
	`__P
((
fsm
 *));

110 
ù˝_down
 
	`__P
((
fsm
 *));

111 
ù˝_föished
 
	`__P
((
fsm
 *));

113 
fsm
 
ù˝_fsm
[
NUM_PPP
];

115 
fsm_ˇŒbacks
 
ù˝_ˇŒbacks
 = {

116 
ù˝_ª£tci
,

117 
ù˝_cûí
,

118 
ù˝_addci
,

119 
ù˝_ackci
,

120 
ù˝_«kci
,

121 
ù˝_ªjci
,

122 
ù˝_ªqci
,

123 
ù˝_up
,

124 
ù˝_down
,

125 
NULL
,

126 
ù˝_föished
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

131 
	}
};

136 
£tvj¶Ÿs
 
__P
((**));

137 
£tdnßddr
 
__P
((**));

138 
£twößddr
 
__P
((**));

139 
£äëmask
 
__P
((**));

140 
£tùaddr
 
__P
((*, **, ));

141 
¥ötùaddr
 
__P
((
›ti⁄_t
 *, (*)(*, *,...),*));

143 
›ti⁄_t
 
ù˝_›ti⁄_li°
[] = {

144 { "noù", 
o_boﬁ
, &
ù˝_¥Ÿít
.
íabÀd_Êag
,

146 { "-ù", 
o_boﬁ
, &
ù˝_¥Ÿít
.
íabÀd_Êag
,

147 "DißbÀ IPánd IPCP", 
OPT_ALIAS
 },

149 { "novj", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
√g_vj
,

150 "DißbÀ VJ com¥essi⁄", 
OPT_A2CLR
, &
ù˝_Ælow›ti⁄s
[0].
√g_vj
 },

151 { "-vj", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
√g_vj
,

152 "DißbÀ VJ com¥essi⁄", 
OPT_ALIAS
 | 
OPT_A2CLR
,

153 &
ù˝_Ælow›ti⁄s
[0].
√g_vj
 },

155 { "novjccomp", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
cÊag
,

156 "DißbÀ VJ c⁄√˘i⁄-ID com¥essi⁄", 
OPT_A2CLR
,

157 &
ù˝_Ælow›ti⁄s
[0].
cÊag
 },

158 { "-vjccomp", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
cÊag
,

159 "DißbÀ VJ c⁄√˘i⁄-ID com¥essi⁄", 
OPT_ALIAS
 | 
OPT_A2CLR
,

160 &
ù˝_Ælow›ti⁄s
[0].
cÊag
 },

162 { "vj-max-¶Ÿs", 
o_•ecül
, (*)
£tvj¶Ÿs
,

164 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, 
vj_vÆue
 },

166 { "ù˝-ac˚±-loˇl", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
ac˚±_loˇl
,

168 { "ù˝-ac˚±-ªmŸe", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
ac˚±_ªmŸe
,

171 { "ù∑øm", 
o_°rög
, &
ù∑øm
,

172 "Së i∞s¸ùà∑ømëî", 
OPT_PRIO
 },

174 { "noùdeÁu…", 
o_boﬁ
, &
dißbÀ_deÁu…ù
,

177 { "ms-dns", 
o_•ecül
, (*)
£tdnßddr
,

178 "DNSáddªs†f‹Åhê≥î'†u£", 
OPT_A2LIST
 },

179 { "ms-wös", 
o_•ecül
, (*)
£twößddr
,

180 "Name£rvî f‹ SMB ovî TCP/IP f‹Öìr", 
OPT_A2LIST
 },

182 { "ù˝-ª°¨t", 
o_öt
, &
ù˝_fsm
[0].
timeouâime
,

183 "SëÅimeouàf‹ IPCP", 
OPT_PRIO
 },

184 { "ù˝-max-ãrmö©e", 
o_öt
, &
ù˝_fsm
[0].
maxãrmå™smôs
,

185 "Së max #xmô†f‹Åîm-ªqs", 
OPT_PRIO
 },

186 { "ù˝-max-c⁄figuª", 
o_öt
, &
ù˝_fsm
[0].
maxc⁄‰eqå™smôs
,

187 "Së max #xmô†f‹ c⁄f-ªqs", 
OPT_PRIO
 },

188 { "ù˝-max-Áûuª", 
o_öt
, &
ù˝_fsm
[0].
max«klo›s
,

189 "Së max #c⁄f-«k†f‹ IPCP", 
OPT_PRIO
 },

191 { "deÁu…rouã", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
deÁu…_rouã
,

192 "Add deÁu…Ñouã", 
OPT_ENABLE
|1, &
ù˝_Ælow›ti⁄s
[0].
deÁu…_rouã
 },

193 { "nodeÁu…rouã", 
o_boﬁ
, &
ù˝_Ælow›ti⁄s
[0].
deÁu…_rouã
,

194 "dißbÀ deÁu…rouã o±i⁄", 
OPT_A2CLR
,

195 &
ù˝_w™t›ti⁄s
[0].
deÁu…_rouã
 },

196 { "-deÁu…rouã", 
o_boﬁ
, &
ù˝_Ælow›ti⁄s
[0].
deÁu…_rouã
,

197 "dißbÀ deÁu…rouã o±i⁄", 
OPT_ALIAS
 | 
OPT_A2CLR
,

198 &
ù˝_w™t›ti⁄s
[0].
deÁu…_rouã
 },

200 { "¥oxy¨p", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
¥oxy_¨p
,

201 "AddÖroxy ARPÉ¡ry", 
OPT_ENABLE
|1, &
ù˝_Ælow›ti⁄s
[0].
¥oxy_¨p
 },

202 { "n›roxy¨p", 
o_boﬁ
, &
ù˝_Ælow›ti⁄s
[0].
¥oxy_¨p
,

203 "dißbÀÖroxy¨∞›ti⁄", 
OPT_A2CLR
,

204 &
ù˝_w™t›ti⁄s
[0].
¥oxy_¨p
 },

205 { "-¥oxy¨p", 
o_boﬁ
, &
ù˝_Ælow›ti⁄s
[0].
¥oxy_¨p
,

206 "dißbÀÖroxy¨∞›ti⁄", 
OPT_ALIAS
 | 
OPT_A2CLR
,

207 &
ù˝_w™t›ti⁄s
[0].
¥oxy_¨p
 },

209 { "u£≥îdns", 
o_boﬁ
, &
u£≥îdns
,

212 { "√tmask", 
o_•ecül
, (*)
£äëmask
,

213 "£à√tmask", 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, 
√tmask_°r
 },

215 { "ù˝-no-addªs£s", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
ﬁd_addrs
,

216 "DißbÀ old-°yÀ IP-Addªs£†ußge", 
OPT_A2CLR
,

217 &
ù˝_Ælow›ti⁄s
[0].
ﬁd_addrs
 },

218 { "ù˝-no-addªss", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
√g_addr
,

219 "DißbÀ IP-Addªs†ußge", 
OPT_A2CLR
,

220 &
ù˝_Ælow›ti⁄s
[0].
√g_addr
 },

221 #ifde‡
__löux__


222 { "n‹emŸeù", 
o_boﬁ
, &
n‹emŸeù
,

225 { "no£ndù", 
o_boﬁ
, &
ù˝_w™t›ti⁄s
[0].
√g_addr
,

226 "D⁄'à£nd ou∏IPáddªs†tÿ≥î", 
OPT_A2CLR
,

227 &
ù˝_w™t›ti⁄s
[0].
ﬁd_addrs
},

229 { "IPáddªs£s", 
o_wûd
, (*Ë&
£tùaddr
,

231 
OPT_NOARG
 | 
OPT_A2PRINTER
, (*Ë&
¥ötùaddr
 },

233 { 
NULL
 }

234 
	}
};

239 
ù˝_öô
 
__P
(());

240 
ù˝_›í
 
__P
(());

241 
ù˝_˛o£
 
__P
((, *));

242 
ù˝_lowîup
 
__P
(());

243 
ù˝_lowîdown
 
__P
(());

244 
ù˝_öput
 
__P
((, 
u_ch¨
 *, ));

245 
ù˝_¥Ÿªj
 
__P
(());

246 
ù˝_¥öçkt
 
__P
((
u_ch¨
 *, ,

247 (*Ë
	`__P
((*, *, ...)), *));

248 
ù_check_›ti⁄s
 
	`__P
(());

249 
ù_dem™d_c⁄f
 
	`__P
(());

250 
ù_a˘ive_pkt
 
	`__P
((
u_ch¨
 *, ));

251 
¸óã_ªsﬁv
 
	`__P
((
u_öt32_t
, u_int32_t));

253 
¥Ÿít
 
ù˝_¥Ÿít
 = {

254 
PPP_IPCP
,

255 
ù˝_öô
,

256 
ù˝_öput
,

257 
ù˝_¥Ÿªj
,

258 
ù˝_lowîup
,

259 
ù˝_lowîdown
,

260 
ù˝_›í
,

261 
ù˝_˛o£
,

262 
ù˝_¥öçkt
,

263 
NULL
,

267 
ù˝_›ti⁄_li°
,

268 
ù_check_›ti⁄s
,

269 
ù_dem™d_c⁄f
,

270 
ù_a˘ive_pkt


271 
	}
};

273 
ù˝_˛ór_addrs
 
__P
((, 
u_öt32_t
, u_int32_t));

274 
ù˝_s¸ùt
 
__P
((*, ));

275 
ù˝_s¸ùt_d⁄e
 
__P
((*));

280 
	#CILEN_VOID
 2

	)

281 
	#CILEN_COMPRESS
 4

	)

282 
	#CILEN_VJ
 6

	)

283 
	#CILEN_ADDR
 6

	)

284 
	#CILEN_ADDRS
 10

	)

287 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

288 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

294 
	es¸ùt_°©e
 {

295 
	ms_down
,

296 
	ms_up
,

297 } 
	gù˝_s¸ùt_°©e
;

298 
pid_t
 
	gù˝_s¸ùt_pid
;

304 
	$ù_¡ﬂ
(
ùaddr
)

305 
u_öt32_t
 
ùaddr
;

307 
b
[64];

309 
	`¶¥ötf
(
b
, (b), "%I", 
ùaddr
);

310  
b
;

311 
	}
}

321 
	$£tvj¶Ÿs
(
¨gv
)

322 **
¨gv
;

324 
vÆue
;

326 i‡(!
	`öt_›ti⁄
(*
¨gv
, &
vÆue
))

328 i‡(
vÆue
 < 2 || value > 16) {

329 
	`›ti⁄_îr‹
("vj-max-slots value must be between 2ánd 16");

332 
ù˝_w™t›ti⁄s
 [0].
max¶Ÿödex
 =

333 
ù˝_Ælow›ti⁄s
[0].
max¶Ÿödex
 = 
vÆue
 - 1;

334 
	`¶¥ötf
(
vj_vÆue
, (vj_vÆue), "%d", 
vÆue
);

336 
	}
}

342 
	$£tdnßddr
(
¨gv
)

343 **
¨gv
;

345 
u_öt32_t
 
dns
;

346 
ho°ít
 *
hp
;

348 
dns
 = 
	`öë_addr
(*
¨gv
);

349 i‡(
dns
 =(
u_öt32_t
) -1) {

350 i‡((
hp
 = 
	`gëho°by«me
(*
¨gv
)Ë=
NULL
) {

351 
	`›ti⁄_îr‹
("invalidáddressÖarameter '%s' for ms-dns option",

352 *
¨gv
);

355 
dns
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

361 i‡(
ù˝_Ælow›ti⁄s
[0].
dnßddr
[1] == 0)

362 
ù˝_Ælow›ti⁄s
[0].
dnßddr
[0] = 
dns
;

364 
ù˝_Ælow›ti⁄s
[0].
dnßddr
[0] = ipcp_allowoptions[0].dnsaddr[1];

367 
ù˝_Ælow›ti⁄s
[0].
dnßddr
[1] = 
dns
;

370 
	}
}

378 
	$£twößddr
(
¨gv
)

379 **
¨gv
;

381 
u_öt32_t
 
wös
;

382 
ho°ít
 *
hp
;

384 
wös
 = 
	`öë_addr
(*
¨gv
);

385 i‡(
wös
 =(
u_öt32_t
) -1) {

386 i‡((
hp
 = 
	`gëho°by«me
(*
¨gv
)Ë=
NULL
) {

387 
	`›ti⁄_îr‹
("invalidáddressÖarameter '%s' for ms-wins option",

388 *
¨gv
);

391 
wös
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

397 i‡(
ù˝_Ælow›ti⁄s
[0].
wößddr
[1] == 0)

398 
ù˝_Ælow›ti⁄s
[0].
wößddr
[0] = 
wös
;

400 
ù˝_Ælow›ti⁄s
[0].
wößddr
[0] = ipcp_allowoptions[0].winsaddr[1];

403 
ù˝_Ælow›ti⁄s
[0].
wößddr
[1] = 
wös
;

406 
	}
}

415 
	$£tùaddr
(
¨g
, 
¨gv
, 
doô
)

416 *
¨g
;

417 **
¨gv
;

418 
doô
;

420 
ho°ít
 *
hp
;

421 *
cﬁ⁄
;

422 
u_öt32_t
 
loˇl
, 
ªmŸe
;

423 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

424 
¥io_loˇl
 = 0, 
¥io_ªmŸe
 = 0;

429 i‡((
cﬁ⁄
 = 
	`°rchr
(
¨g
, ':')Ë=
NULL
)

431 i‡(!
doô
)

437 i‡(
cﬁ⁄
 !
¨g
 && 
›ti⁄_¥i‹ôy
 >
¥io_loˇl
) {

438 *
cﬁ⁄
 = '\0';

439 i‡((
loˇl
 = 
	`öë_addr
(
¨g
)Ë=(
u_öt32_t
) -1) {

440 i‡((
hp
 = 
	`gëho°by«me
(
¨g
)Ë=
NULL
) {

441 
	`›ti⁄_îr‹
("unknow¿ho°: %s", 
¨g
);

444 
loˇl
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

446 i‡(
	`bad_ù_adrs
(
loˇl
)) {

447 
	`›ti⁄_îr‹
("badÜoˇ»IPáddªs†%s", 
	`ù_¡ﬂ
(
loˇl
));

450 i‡(
loˇl
 != 0)

451 
wo
->
ouøddr
 = 
loˇl
;

452 *
cﬁ⁄
 = ':';

453 
¥io_loˇl
 = 
›ti⁄_¥i‹ôy
;

459 i‡(*++
cﬁ⁄
 !'\0' && 
›ti⁄_¥i‹ôy
 >
¥io_ªmŸe
) {

460 i‡((
ªmŸe
 = 
	`öë_addr
(
cﬁ⁄
)Ë=(
u_öt32_t
) -1) {

461 i‡((
hp
 = 
	`gëho°by«me
(
cﬁ⁄
)Ë=
NULL
) {

462 
	`›ti⁄_îr‹
("unknow¿ho°: %s", 
cﬁ⁄
);

465 
ªmŸe
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

466 i‡(
ªmŸe_«me
[0] == 0)

467 
	`°æ˝y
(
ªmŸe_«me
, 
cﬁ⁄
, (remote_name));

469 i‡(
	`bad_ù_adrs
(
ªmŸe
)) {

470 
	`›ti⁄_îr‹
("badÑemŸêIPáddªs†%s", 
	`ù_¡ﬂ
(
ªmŸe
));

473 i‡(
ªmŸe
 != 0)

474 
wo
->
hißddr
 = 
ªmŸe
;

475 
¥io_ªmŸe
 = 
›ti⁄_¥i‹ôy
;

479 
	}
}

482 
	$¥ötùaddr
(
›t
, 
¥öãr
, 
¨g
)

483 
›ti⁄_t
 *
›t
;

484 (*
¥öãr
Ë
	`__P
((*, *, ...));

485 *
¨g
;

487 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

489 i‡(
wo
->
ouøddr
 != 0)

490 
	`¥öãr
(
¨g
, "%I", 
wo
->
ouøddr
);

491 
	`¥öãr
(
¨g
, ":");

492 i‡(
wo
->
hißddr
 != 0)

493 
	`¥öãr
(
¨g
, "%I", 
wo
->
hißddr
);

494 
	}
}

500 
	$£äëmask
(
¨gv
)

501 **
¨gv
;

503 
u_öt32_t
 
mask
;

504 
n
;

505 *
p
;

511 
p
 = *
¨gv
;

512 
n
 = 
	`∑r£_dŸãd_ù
(
p
, &
mask
);

514 
mask
 = 
	`ht⁄l
(mask);

516 i‡(
n
 =0 || 
p
[n] !0 || (
√tmask
 & ~
mask
) != 0) {

517 
	`›ti⁄_îr‹
("övÆidÇëmask vÆuê'%s'", *
¨gv
);

521 
√tmask
 = 
mask
;

522 
	`¶¥ötf
(
√tmask_°r
, “ëmask_°r), "%I", 
mask
);

525 
	}
}

528 
	$∑r£_dŸãd_ù
(
p
, 
vp
)

529 *
p
;

530 
u_öt32_t
 *
vp
;

532 
n
;

533 
u_öt32_t
 
v
, 
b
;

534 *
ídp
, *
p0
 = 
p
;

536 
v
 = 0;

537 
n
 = 3;; --n) {

538 
b
 = 
	`°πoul
(
p
, &
ídp
, 0);

539 i‡(
ídp
 =
p
)

541 i‡(
b
 > 255) {

542 i‡(
n
 < 3)

545 *
vp
 = 
b
;

546  
ídp
 - 
p0
;

548 
v
 |
b
 << (
n
 * 8);

549 
p
 = 
ídp
;

550 i‡(
n
 == 0)

552 i‡(*
p
 != '.')

554 ++
p
;

556 *
vp
 = 
v
;

557  
p
 - 
p0
;

558 
	}
}

565 
	$ù˝_öô
(
unô
)

566 
unô
;

568 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

569 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

570 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

572 
f
->
unô
 = unit;

573 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

574 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

575 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

583 
f
->
max«klo›s
 = 100;

585 
	`mem£t
(
wo
, 0, (*wo));

586 
	`mem£t
(
ao
, 0, (*ao));

588 
wo
->
√g_addr
 = wo->
ﬁd_addrs
 = 1;

589 
wo
->
√g_vj
 = 1;

590 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

591 
wo
->
max¶Ÿödex
 = 
MAX_STATES
 - 1;

592 
wo
->
cÊag
 = 1;

599 
ao
->
√g_addr
 =áo->
ﬁd_addrs
 = 1;

600 
ao
->
√g_vj
 = 1;

601 
ao
->
max¶Ÿödex
 = 
MAX_STATES
 - 1;

602 
ao
->
cÊag
 = 1;

608 
ao
->
¥oxy_¨p
 = 1;

609 
ao
->
deÁu…_rouã
 = 1;

610 
	}
}

617 
	$ù˝_›í
(
unô
)

618 
unô
;

620 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

621 
ù˝_is_›í
 = 1;

622 
	}
}

629 
	$ù˝_˛o£
(
unô
, 
ªas⁄
)

630 
unô
;

631 *
ªas⁄
;

633 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

634 
	}
}

641 
	$ù˝_lowîup
(
unô
)

642 
unô
;

644 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

645 
	}
}

652 
	$ù˝_lowîdown
(
unô
)

653 
unô
;

655 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

656 
	}
}

663 
	$ù˝_öput
(
unô
, 
p
, 
Àn
)

664 
unô
;

665 
u_ch¨
 *
p
;

666 
Àn
;

668 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

669 
	}
}

678 
	$ù˝_¥Ÿªj
(
unô
)

679 
unô
;

681 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

682 
	}
}

690 
	$ù˝_ª£tci
(
f
)

691 
fsm
 *
f
;

693 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

694 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

695 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

697 
wo
->
ªq_addr
 = (wo->
√g_addr
 || wo->
ﬁd_addrs
) &&

698 (
ao
->
√g_addr
 ||áo->
ﬁd_addrs
);

699 i‡(
wo
->
ouøddr
 == 0)

700 
wo
->
ac˚±_loˇl
 = 1;

701 i‡(
wo
->
hißddr
 == 0)

702 
wo
->
ac˚±_ªmŸe
 = 1;

703 
wo
->
ªq_dns1
 = 
u£≥îdns
;

704 
wo
->
ªq_dns2
 = 
u£≥îdns
;

705 *
go
 = *
wo
;

706 i‡(!
ask_f‹_loˇl
)

707 
go
->
ouøddr
 = 0;

708 i‡(
ù_choo£_hook
) {

709 
	`ù_choo£_hook
(&
wo
->
hißddr
);

710 i‡(
wo
->
hißddr
) {

711 
wo
->
ac˚±_ªmŸe
 = 0;

714 
	`BZERO
(&
ù˝_his›ti⁄s
[
f
->
unô
], (
ù˝_›ti⁄s
));

715 
	}
}

723 
	$ù˝_cûí
(
f
)

724 
fsm
 *
f
;

726 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

727 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

728 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

730 
	#LENCIADDRS
(
√g
Ë“eg ? 
CILEN_ADDRS
 : 0)

	)

731 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

732 
	#LENCIADDR
(
√g
Ë“eg ? 
CILEN_ADDR
 : 0)

	)

733 
	#LENCIDNS
(
√g
Ë
	`LENCIADDR
“eg)

	)

734 
	#LENCIWINS
(
√g
Ë
	`LENCIADDR
“eg)

	)

740 i‡(
go
->
√g_addr
 && go->
ﬁd_addrs
 && !
ho
->neg_addr && ho->old_addrs)

741 
go
->
√g_addr
 = 0;

742 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

745 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

746 
go
->
√g_vj
 = 1;

747 
go
->
ﬁd_vj
 = 1;

748 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

752  (
	`LENCIADDRS
(!
go
->
√g_addr
 && go->
ﬁd_addrs
) +

753 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

754 
	`LENCIADDR
(
go
->
√g_addr
) +

755 
	`LENCIDNS
(
go
->
ªq_dns1
) +

756 
	`LENCIDNS
(
go
->
ªq_dns2
) +

757 
	`LENCIWINS
(
go
->
wößddr
[0]) +

758 
	`LENCIWINS
(
go
->
wößddr
[1])) ;

759 
	}
}

767 
	$ù˝_addci
(
f
, 
u˝
, 
À≈
)

768 
fsm
 *
f
;

769 
u_ch¨
 *
u˝
;

770 *
À≈
;

772 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

773 
Àn
 = *
À≈
;

775 
	#ADDCIADDRS
(
›t
, 
√g
, 
vÆ1
, 
vÆ2
) \

776 i‡(
√g
) { \

777 i‡(
Àn
 >
CILEN_ADDRS
) { \

778 
u_öt32_t
 
l
; \

779 
	`PUTCHAR
(
›t
, 
u˝
); \

780 
	`PUTCHAR
(
CILEN_ADDRS
, 
u˝
); \

781 
l
 = 
	`¡ohl
(
vÆ1
); \

782 
	`PUTLONG
(
l
, 
u˝
); \

783 
l
 = 
	`¡ohl
(
vÆ2
); \

784 
	`PUTLONG
(
l
, 
u˝
); \

785 
Àn
 -
CILEN_ADDRS
; \

787 
go
->
ﬁd_addrs
 = 0; \

788 }

	)

790 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

791 i‡(
√g
) { \

792 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

793 i‡(
Àn
 >
vjÀn
) { \

794 
	`PUTCHAR
(
›t
, 
u˝
); \

795 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

796 
	`PUTSHORT
(
vÆ
, 
u˝
); \

797 i‡(!
ﬁd
) { \

798 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

799 
	`PUTCHAR
(
cÊag
, 
u˝
); \

801 
Àn
 -
vjÀn
; \

803 
√g
 = 0; \

804 }

	)

806 
	#ADDCIADDR
(
›t
, 
√g
, 
vÆ
) \

807 i‡(
√g
) { \

808 i‡(
Àn
 >
CILEN_ADDR
) { \

809 
u_öt32_t
 
l
; \

810 
	`PUTCHAR
(
›t
, 
u˝
); \

811 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

812 
l
 = 
	`¡ohl
(
vÆ
); \

813 
	`PUTLONG
(
l
, 
u˝
); \

814 
Àn
 -
CILEN_ADDR
; \

816 
√g
 = 0; \

817 }

	)

819 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

820 i‡(
√g
) { \

821 i‡(
Àn
 >
CILEN_ADDR
) { \

822 
u_öt32_t
 
l
; \

823 
	`PUTCHAR
(
›t
, 
u˝
); \

824 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

825 
l
 = 
	`¡ohl
(
addr
); \

826 
	`PUTLONG
(
l
, 
u˝
); \

827 
Àn
 -
CILEN_ADDR
; \

829 
√g
 = 0; \

830 }

	)

832 
	#ADDCIWINS
(
›t
, 
addr
) \

833 i‡(
addr
) { \

834 i‡(
Àn
 >
CILEN_ADDR
) { \

835 
u_öt32_t
 
l
; \

836 
	`PUTCHAR
(
›t
, 
u˝
); \

837 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

838 
l
 = 
	`¡ohl
(
addr
); \

839 
	`PUTLONG
(
l
, 
u˝
); \

840 
Àn
 -
CILEN_ADDR
; \

842 
addr
 = 0; \

843 }

	)

845 
	`ADDCIADDRS
(
CI_ADDRS
, !
go
->
√g_addr
 && go->
ﬁd_addrs
, go->
ouøddr
,

846 
go
->
hißddr
);

848 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

849 
go
->
max¶Ÿödex
, go->
cÊag
);

851 
	`ADDCIADDR
(
CI_ADDR
, 
go
->
√g_addr
, go->
ouøddr
);

853 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

855 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

857 
	`ADDCIWINS
(
CI_MS_WINS1
, 
go
->
wößddr
[0]);

859 
	`ADDCIWINS
(
CI_MS_WINS2
, 
go
->
wößddr
[1]);

861 *
À≈
 -
Àn
;

862 
	}
}

874 
	$ù˝_ackci
(
f
, 
p
, 
Àn
)

875 
fsm
 *
f
;

876 
u_ch¨
 *
p
;

877 
Àn
;

879 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

880 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

881 
u_öt32_t
 
cû⁄g
;

882 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

890 
	#ACKCIADDRS
(
›t
, 
√g
, 
vÆ1
, 
vÆ2
) \

891 i‡(
√g
) { \

892 
u_öt32_t
 
l
; \

893 i‡((
Àn
 -
CILEN_ADDRS
) < 0) \

894 
bad
; \

895 
	`GETCHAR
(
côy≥
, 
p
); \

896 
	`GETCHAR
(
cûí
, 
p
); \

897 i‡(
cûí
 !
CILEN_ADDRS
 || \

898 
côy≥
 !
›t
) \

899 
bad
; \

900 
	`GETLONG
(
l
, 
p
); \

901 
cû⁄g
 = 
	`ht⁄l
(
l
); \

902 i‡(
vÆ1
 !
cû⁄g
) \

903 
bad
; \

904 
	`GETLONG
(
l
, 
p
); \

905 
cû⁄g
 = 
	`ht⁄l
(
l
); \

906 i‡(
vÆ2
 !
cû⁄g
) \

907 
bad
; \

908 }

	)

910 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

911 i‡(
√g
) { \

912 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

913 i‡((
Àn
 -
vjÀn
) < 0) \

914 
bad
; \

915 
	`GETCHAR
(
côy≥
, 
p
); \

916 
	`GETCHAR
(
cûí
, 
p
); \

917 i‡(
cûí
 !
vjÀn
 || \

918 
côy≥
 !
›t
) \

919 
bad
; \

920 
	`GETSHORT
(
cish‹t
, 
p
); \

921 i‡(
cish‹t
 !
vÆ
) \

922 
bad
; \

923 i‡(!
ﬁd
) { \

924 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

925 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) \

926 
bad
; \

927 
	`GETCHAR
(
cicÊag
, 
p
); \

928 i‡(
cicÊag
 !
cÊag
) \

929 
bad
; \

931 }

	)

933 
	#ACKCIADDR
(
›t
, 
√g
, 
vÆ
) \

934 i‡(
√g
) { \

935 
u_öt32_t
 
l
; \

936 i‡((
Àn
 -
CILEN_ADDR
) < 0) \

937 
bad
; \

938 
	`GETCHAR
(
côy≥
, 
p
); \

939 
	`GETCHAR
(
cûí
, 
p
); \

940 i‡(
cûí
 !
CILEN_ADDR
 || \

941 
côy≥
 !
›t
) \

942 
bad
; \

943 
	`GETLONG
(
l
, 
p
); \

944 
cû⁄g
 = 
	`ht⁄l
(
l
); \

945 i‡(
vÆ
 !
cû⁄g
) \

946 
bad
; \

947 }

	)

949 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

950 i‡(
√g
) { \

951 
u_öt32_t
 
l
; \

952 i‡((
Àn
 -
CILEN_ADDR
) < 0) \

953 
bad
; \

954 
	`GETCHAR
(
côy≥
, 
p
); \

955 
	`GETCHAR
(
cûí
, 
p
); \

956 i‡(
cûí
 !
CILEN_ADDR
 || 
côy≥
 !
›t
) \

957 
bad
; \

958 
	`GETLONG
(
l
, 
p
); \

959 
cû⁄g
 = 
	`ht⁄l
(
l
); \

960 i‡(
addr
 !
cû⁄g
) \

961 
bad
; \

962 }

	)

964 
	#ACKCIWINS
(
›t
, 
addr
) \

965 i‡(
addr
) { \

966 
u_öt32_t
 
l
; \

967 i‡((
Àn
 -
CILEN_ADDR
) < 0) \

968 
bad
; \

969 
	`GETCHAR
(
côy≥
, 
p
); \

970 
	`GETCHAR
(
cûí
, 
p
); \

971 i‡(
cûí
 !
CILEN_ADDR
 || 
côy≥
 !
›t
) \

972 
bad
; \

973 
	`GETLONG
(
l
, 
p
); \

974 
cû⁄g
 = 
	`ht⁄l
(
l
); \

975 i‡(
addr
 !
cû⁄g
) \

976 
bad
; \

977 }

	)

979 
	`ACKCIADDRS
(
CI_ADDRS
, !
go
->
√g_addr
 && go->
ﬁd_addrs
, go->
ouøddr
,

980 
go
->
hißddr
);

982 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

983 
go
->
max¶Ÿödex
, go->
cÊag
);

985 
	`ACKCIADDR
(
CI_ADDR
, 
go
->
√g_addr
, go->
ouøddr
);

987 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

989 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

991 
	`ACKCIWINS
(
CI_MS_WINS1
, 
go
->
wößddr
[0]);

993 
	`ACKCIWINS
(
CI_MS_WINS2
, 
go
->
wößddr
[1]);

998 i‡(
Àn
 != 0)

999 
bad
;

1002 
bad
:

1003 
	`IPCPDEBUG
(("ipcp_ackci:Ñeceived bad Ack!"));

1005 
	}
}

1018 
	$ù˝_«kci
(
f
, 
p
, 
Àn
, 
åót_as_ªje˘
)

1019 
fsm
 *
f
;

1020 
u_ch¨
 *
p
;

1021 
Àn
;

1022 
åót_as_ªje˘
;

1024 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1025 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

1026 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

1027 
u_sh‹t
 
cish‹t
;

1028 
u_öt32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

1029 
ù˝_›ti⁄s
 
no
;

1030 
ù˝_›ti⁄s
 
åy
;

1032 
	`BZERO
(&
no
, (no));

1033 
åy
 = *
go
;

1040 
	#NAKCIADDRS
(
›t
, 
√g
, 
code
) \

1041 i‡((
√g
) && \

1042 (
cûí
 = 
p
[1]Ë=
CILEN_ADDRS
 && \

1043 
Àn
 >
cûí
 && \

1044 
p
[0] =
›t
) { \

1045 
Àn
 -
cûí
; \

1046 
	`INCPTR
(2, 
p
); \

1047 
	`GETLONG
(
l
, 
p
); \

1048 
cüddr1
 = 
	`ht⁄l
(
l
); \

1049 
	`GETLONG
(
l
, 
p
); \

1050 
cüddr2
 = 
	`ht⁄l
(
l
); \

1051 
no
.
ﬁd_addrs
 = 1; \

1052 
code
 \

1053 }

	)

1055 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

1056 i‡(
go
->
√g
 && \

1057 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

1058 
Àn
 >
cûí
 && \

1059 
p
[0] =
›t
) { \

1060 
Àn
 -
cûí
; \

1061 
	`INCPTR
(2, 
p
); \

1062 
	`GETSHORT
(
cish‹t
, 
p
); \

1063 
no
.
√g
 = 1; \

1064 
code
 \

1065 }

	)

1067 
	#NAKCIADDR
(
›t
, 
√g
, 
code
) \

1068 i‡(
go
->
√g
 && \

1069 (
cûí
 = 
p
[1]Ë=
CILEN_ADDR
 && \

1070 
Àn
 >
cûí
 && \

1071 
p
[0] =
›t
) { \

1072 
Àn
 -
cûí
; \

1073 
	`INCPTR
(2, 
p
); \

1074 
	`GETLONG
(
l
, 
p
); \

1075 
cüddr1
 = 
	`ht⁄l
(
l
); \

1076 
no
.
√g
 = 1; \

1077 
code
 \

1078 }

	)

1080 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

1081 i‡(
go
->
√g
 && \

1082 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

1083 
Àn
 >
cûí
 && \

1084 
p
[0] =
›t
) { \

1085 
Àn
 -
cûí
; \

1086 
	`INCPTR
(2, 
p
); \

1087 
	`GETLONG
(
l
, 
p
); \

1088 
cidnßddr
 = 
	`ht⁄l
(
l
); \

1089 
no
.
√g
 = 1; \

1090 
code
 \

1091 }

	)

1097 
	`NAKCIADDRS
(
CI_ADDRS
, !
go
->
√g_addr
 && go->
ﬁd_addrs
,

1098 i‡(
åót_as_ªje˘
) {

1099 
åy
.
ﬁd_addrs
 = 0;

1101 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

1103 
åy
.
ouøddr
 = 
cüddr1
;

1105 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

1107 
åy
.
hißddr
 = 
cüddr2
;

1118 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

1119 i‡(
åót_as_ªje˘
) {

1120 
åy
.
√g_vj
 = 0;

1121 } i‡(
cûí
 =
CILEN_VJ
) {

1122 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

1123 
	`GETCHAR
(
cicÊag
, 
p
);

1124 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

1125 
åy
.
ﬁd_vj
 = 0;

1126 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
)

1127 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

1128 i‡(!
cicÊag
)

1129 
åy
.
cÊag
 = 0;

1131 
åy
.
√g_vj
 = 0;

1134 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

1135 
åy
.
ﬁd_vj
 = 1;

1136 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

1138 
åy
.
√g_vj
 = 0;

1143 
	`NAKCIADDR
(
CI_ADDR
, 
√g_addr
,

1144 i‡(
åót_as_ªje˘
) {

1145 
åy
.
√g_addr
 = 0;

1146 
åy
.
ﬁd_addrs
 = 0;

1147 } i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

1149 
åy
.
ouøddr
 = 
cüddr1
;

1153 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

1154 i‡(
åót_as_ªje˘
) {

1155 
åy
.
ªq_dns1
 = 0;

1157 
åy
.
dnßddr
[0] = 
cidnßddr
;

1161 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

1162 i‡(
åót_as_ªje˘
) {

1163 
åy
.
ªq_dns2
 = 0;

1165 
åy
.
dnßddr
[1] = 
cidnßddr
;

1177 
Àn
 >
CILEN_VOID
) {

1178 
	`GETCHAR
(
côy≥
, 
p
);

1179 
	`GETCHAR
(
cûí
, 
p
);

1180 i‡–
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0 )

1181 
bad
;

1182 
√xt
 = 
p
 + 
cûí
 - 2;

1184 
côy≥
) {

1185 
CI_COMPRESSTYPE
:

1186 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

1187 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
))

1188 
bad
;

1189 
no
.
√g_vj
 = 1;

1191 
CI_ADDRS
:

1192 i‡((!
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

1193 || 
cûí
 !
CILEN_ADDRS
)

1194 
bad
;

1195 
åy
.
√g_addr
 = 0;

1196 
	`GETLONG
(
l
, 
p
);

1197 
cüddr1
 = 
	`ht⁄l
(
l
);

1198 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
)

1199 
åy
.
ouøddr
 = 
cüddr1
;

1200 
	`GETLONG
(
l
, 
p
);

1201 
cüddr2
 = 
	`ht⁄l
(
l
);

1202 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
)

1203 
åy
.
hißddr
 = 
cüddr2
;

1204 
no
.
ﬁd_addrs
 = 1;

1206 
CI_ADDR
:

1207 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
)

1208 
bad
;

1209 
åy
.
ﬁd_addrs
 = 0;

1210 
	`GETLONG
(
l
, 
p
);

1211 
cüddr1
 = 
	`ht⁄l
(
l
);

1212 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
)

1213 
åy
.
ouøddr
 = 
cüddr1
;

1214 i‡(
åy
.
ouøddr
 != 0)

1215 
åy
.
√g_addr
 = 1;

1216 
no
.
√g_addr
 = 1;

1218 
CI_MS_DNS1
:

1219 i‡(
go
->
ªq_dns1
 || 
no
.ªq_dns1 || 
cûí
 !
CILEN_ADDR
)

1220 
bad
;

1221 
	`GETLONG
(
l
, 
p
);

1222 
åy
.
dnßddr
[0] = 
	`ht⁄l
(
l
);

1223 
åy
.
ªq_dns1
 = 1;

1224 
no
.
ªq_dns1
 = 1;

1226 
CI_MS_DNS2
:

1227 i‡(
go
->
ªq_dns2
 || 
no
.ªq_dns2 || 
cûí
 !
CILEN_ADDR
)

1228 
bad
;

1229 
	`GETLONG
(
l
, 
p
);

1230 
åy
.
dnßddr
[1] = 
	`ht⁄l
(
l
);

1231 
åy
.
ªq_dns2
 = 1;

1232 
no
.
ªq_dns2
 = 1;

1234 
CI_MS_WINS1
:

1235 
CI_MS_WINS2
:

1236 i‡(
cûí
 !
CILEN_ADDR
)

1237 
bad
;

1238 
	`GETLONG
(
l
, 
p
);

1239 
cüddr1
 = 
	`ht⁄l
(
l
);

1240 i‡(
cüddr1
)

1241 
åy
.
wößddr
[
côy≥
 =
CI_MS_WINS2
] = 
cüddr1
;

1244 
p
 = 
√xt
;

1251 i‡(
f
->
°©e
 !
OPENED
)

1252 *
go
 = 
åy
;

1256 
bad
:

1257 
	`IPCPDEBUG
(("ipcp_nakci:Ñeceived bad Nak!"));

1259 
	}
}

1267 
	$ù˝_ªjci
(
f
, 
p
, 
Àn
)

1268 
fsm
 *
f
;

1269 
u_ch¨
 *
p
;

1270 
Àn
;

1272 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1273 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

1274 
u_sh‹t
 
cish‹t
;

1275 
u_öt32_t
 
cû⁄g
;

1276 
ù˝_›ti⁄s
 
åy
;

1278 
åy
 = *
go
;

1284 
	#REJCIADDRS
(
›t
, 
√g
, 
vÆ1
, 
vÆ2
) \

1285 i‡((
√g
) && \

1286 (
cûí
 = 
p
[1]Ë=
CILEN_ADDRS
 && \

1287 
Àn
 >
cûí
 && \

1288 
p
[0] =
›t
) { \

1289 
u_öt32_t
 
l
; \

1290 
Àn
 -
cûí
; \

1291 
	`INCPTR
(2, 
p
); \

1292 
	`GETLONG
(
l
, 
p
); \

1293 
cû⁄g
 = 
	`ht⁄l
(
l
); \

1295 i‡(
cû⁄g
 !
vÆ1
) \

1296 
bad
; \

1297 
	`GETLONG
(
l
, 
p
); \

1298 
cû⁄g
 = 
	`ht⁄l
(
l
); \

1300 i‡(
cû⁄g
 !
vÆ2
) \

1301 
bad
; \

1302 
åy
.
ﬁd_addrs
 = 0; \

1303 }

	)

1305 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

1306 i‡(
go
->
√g
 && \

1307 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

1308 
Àn
 >
p
[1] && \

1309 
p
[0] =
›t
) { \

1310 
Àn
 -
p
[1]; \

1311 
	`INCPTR
(2, 
p
); \

1312 
	`GETSHORT
(
cish‹t
, 
p
); \

1314 i‡(
cish‹t
 !
vÆ
) \

1315 
bad
; \

1316 i‡(!
ﬁd
) { \

1317 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

1318 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) \

1319 
bad
; \

1320 
	`GETCHAR
(
ciÊag
, 
p
); \

1321 i‡(
ciÊag
 !
cÊag
) \

1322 
bad
; \

1324 
åy
.
√g
 = 0; \

1325 }

	)

1327 
	#REJCIADDR
(
›t
, 
√g
, 
vÆ
) \

1328 i‡(
go
->
√g
 && \

1329 (
cûí
 = 
p
[1]Ë=
CILEN_ADDR
 && \

1330 
Àn
 >
cûí
 && \

1331 
p
[0] =
›t
) { \

1332 
u_öt32_t
 
l
; \

1333 
Àn
 -
cûí
; \

1334 
	`INCPTR
(2, 
p
); \

1335 
	`GETLONG
(
l
, 
p
); \

1336 
cû⁄g
 = 
	`ht⁄l
(
l
); \

1338 i‡(
cû⁄g
 !
vÆ
) \

1339 
bad
; \

1340 
åy
.
√g
 = 0; \

1341 }

	)

1343 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

1344 i‡(
go
->
√g
 && \

1345 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

1346 
Àn
 >
cûí
 && \

1347 
p
[0] =
›t
) { \

1348 
u_öt32_t
 
l
; \

1349 
Àn
 -
cûí
; \

1350 
	`INCPTR
(2, 
p
); \

1351 
	`GETLONG
(
l
, 
p
); \

1352 
cû⁄g
 = 
	`ht⁄l
(
l
); \

1354 i‡(
cû⁄g
 !
dnßddr
) \

1355 
bad
; \

1356 
åy
.
√g
 = 0; \

1357 }

	)

1359 
	#REJCIWINS
(
›t
, 
addr
) \

1360 i‡(
addr
 && \

1361 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

1362 
Àn
 >
cûí
 && \

1363 
p
[0] =
›t
) { \

1364 
u_öt32_t
 
l
; \

1365 
Àn
 -
cûí
; \

1366 
	`INCPTR
(2, 
p
); \

1367 
	`GETLONG
(
l
, 
p
); \

1368 
cû⁄g
 = 
	`ht⁄l
(
l
); \

1370 i‡(
cû⁄g
 !
addr
) \

1371 
bad
; \

1372 
åy
.
wößddr
[
›t
 =
CI_MS_WINS2
] = 0; \

1373 }

	)

1375 
	`REJCIADDRS
(
CI_ADDRS
, !
go
->
√g_addr
 && go->
ﬁd_addrs
,

1376 
go
->
ouøddr
, go->
hißddr
);

1378 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

1379 
go
->
max¶Ÿödex
, go->
cÊag
);

1381 
	`REJCIADDR
(
CI_ADDR
, 
√g_addr
, 
go
->
ouøddr
);

1383 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

1385 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

1387 
	`REJCIWINS
(
CI_MS_WINS1
, 
go
->
wößddr
[0]);

1389 
	`REJCIWINS
(
CI_MS_WINS2
, 
go
->
wößddr
[1]);

1394 i‡(
Àn
 != 0)

1395 
bad
;

1399 i‡(
f
->
°©e
 !
OPENED
)

1400 *
go
 = 
åy
;

1403 
bad
:

1404 
	`IPCPDEBUG
(("ipcp_rejci:Ñeceived bad Reject!"));

1406 
	}
}

1418 
	$ù˝_ªqci
(
f
, 
öp
, 
Àn
, 
ªje˘_if_dißgªe
)

1419 
fsm
 *
f
;

1420 
u_ch¨
 *
öp
;

1421 *
Àn
;

1422 
ªje˘_if_dißgªe
;

1424 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1425 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1426 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

1427 
u_ch¨
 *
cù
, *
√xt
;

1428 
u_sh‹t
 
cûí
, 
côy≥
;

1429 
u_sh‹t
 
cish‹t
;

1430 
u_öt32_t
 
é
, 
cüddr1
, 
cüddr2
;

1431 
rc
 = 
CONFACK
;

1432 
‹c
;

1433 
u_ch¨
 *
p
;

1434 
u_ch¨
 *
u˝
 = 
öp
;

1435 
l
 = *
Àn
;

1436 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

1437 
d
;

1442 
	`BZERO
(
ho
, (*ho));

1447 
√xt
 = 
öp
;

1448 
l
) {

1449 
‹c
 = 
CONFACK
;

1450 
cù
 = 
p
 = 
√xt
;

1451 i‡(
l
 < 2 ||

1452 
p
[1] < 2 ||

1453 
p
[1] > 
l
) {

1454 
	`IPCPDEBUG
(("ipcp_reqci: bad CIÜength!"));

1455 
‹c
 = 
CONFREJ
;

1456 
cûí
 = 
l
;

1457 
l
 = 0;

1458 
ídswôch
;

1460 
	`GETCHAR
(
côy≥
, 
p
);

1461 
	`GETCHAR
(
cûí
, 
p
);

1462 
l
 -
cûí
;

1463 
√xt
 +
cûí
;

1465 
côy≥
) {

1466 
CI_ADDRS
:

1467 i‡(!
ao
->
ﬁd_addrs
 || 
ho
->
√g_addr
 ||

1468 
cûí
 !
CILEN_ADDRS
) {

1469 
‹c
 = 
CONFREJ
;

1479 
	`GETLONG
(
é
, 
p
);

1480 
cüddr1
 = 
	`ht⁄l
(
é
);

1481 i‡(
cüddr1
 !
wo
->
hißddr


1482 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1483 
‹c
 = 
CONFNAK
;

1484 i‡(!
ªje˘_if_dißgªe
) {

1485 
	`DECPTR
((
u_öt32_t
), 
p
);

1486 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1487 
	`PUTLONG
(
é
, 
p
);

1489 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1493 
‹c
 = 
CONFREJ
;

1494 
wo
->
ªq_addr
 = 0;

1502 
	`GETLONG
(
é
, 
p
);

1503 
cüddr2
 = 
	`ht⁄l
(
é
);

1504 i‡(
cüddr2
 !
wo
->
ouøddr
) {

1505 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

1506 
‹c
 = 
CONFNAK
;

1507 i‡(!
ªje˘_if_dißgªe
) {

1508 
	`DECPTR
((
u_öt32_t
), 
p
);

1509 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

1510 
	`PUTLONG
(
é
, 
p
);

1513 
wo
->
ouøddr
 = 
cüddr2
;

1517 
ho
->
ﬁd_addrs
 = 1;

1518 
ho
->
hißddr
 = 
cüddr1
;

1519 
ho
->
ouøddr
 = 
cüddr2
;

1522 
CI_ADDR
:

1523 i‡(!
ao
->
√g_addr
 || 
ho
->
ﬁd_addrs
 ||

1524 
cûí
 !
CILEN_ADDR
) {

1525 
‹c
 = 
CONFREJ
;

1535 
	`GETLONG
(
é
, 
p
);

1536 
cüddr1
 = 
	`ht⁄l
(
é
);

1537 i‡(
cüddr1
 !
wo
->
hißddr


1538 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1539 
‹c
 = 
CONFNAK
;

1540 i‡(!
ªje˘_if_dißgªe
) {

1541 
	`DECPTR
((
u_öt32_t
), 
p
);

1542 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1543 
	`PUTLONG
(
é
, 
p
);

1545 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1549 
‹c
 = 
CONFREJ
;

1550 
wo
->
ªq_addr
 = 0;

1554 
ho
->
√g_addr
 = 1;

1555 
ho
->
hißddr
 = 
cüddr1
;

1558 
CI_MS_DNS1
:

1559 
CI_MS_DNS2
:

1561 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1564 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1565 
cûí
 !
CILEN_ADDR
) {

1566 
‹c
 = 
CONFREJ
;

1569 
	`GETLONG
(
é
, 
p
);

1570 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1571 
	`DECPTR
((
u_öt32_t
), 
p
);

1572 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1573 
	`PUTLONG
(
é
, 
p
);

1574 
‹c
 = 
CONFNAK
;

1578 
CI_MS_WINS1
:

1579 
CI_MS_WINS2
:

1581 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1584 i‡(
ao
->
wößddr
[
d
] == 0 ||

1585 
cûí
 !
CILEN_ADDR
) {

1586 
‹c
 = 
CONFREJ
;

1589 
	`GETLONG
(
é
, 
p
);

1590 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1591 
	`DECPTR
((
u_öt32_t
), 
p
);

1592 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1593 
	`PUTLONG
(
é
, 
p
);

1594 
‹c
 = 
CONFNAK
;

1598 
CI_COMPRESSTYPE
:

1599 i‡(!
ao
->
√g_vj
 ||

1600 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

1601 
‹c
 = 
CONFREJ
;

1604 
	`GETSHORT
(
cish‹t
, 
p
);

1606 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1607 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1608 
‹c
 = 
CONFREJ
;

1612 
ho
->
√g_vj
 = 1;

1613 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1614 i‡(
cûí
 =
CILEN_VJ
) {

1615 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1616 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1617 
‹c
 = 
CONFNAK
;

1618 i‡(!
ªje˘_if_dißgªe
){

1619 
	`DECPTR
(1, 
p
);

1620 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1623 
	`GETCHAR
(
cÊag
, 
p
);

1624 i‡(
cÊag
 && !
ao
->cflag) {

1625 
‹c
 = 
CONFNAK
;

1626 i‡(!
ªje˘_if_dißgªe
){

1627 
	`DECPTR
(1, 
p
);

1628 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1631 
ho
->
max¶Ÿödex
 = maxslotindex;

1632 
ho
->
cÊag
 = cflag;

1634 
ho
->
ﬁd_vj
 = 1;

1635 
ho
->
max¶Ÿödex
 = 
MAX_STATES
 - 1;

1636 
ho
->
cÊag
 = 1;

1641 
‹c
 = 
CONFREJ
;

1644 
ídswôch
:

1645 i‡(
‹c
 =
CONFACK
 &&

1646 
rc
 !
CONFACK
)

1649 i‡(
‹c
 =
CONFNAK
) {

1650 i‡(
ªje˘_if_dißgªe
)

1651 
‹c
 = 
CONFREJ
;

1653 i‡(
rc
 =
CONFREJ
)

1655 i‡(
rc
 =
CONFACK
) {

1656 
rc
 = 
CONFNAK
;

1657 
u˝
 = 
öp
;

1662 i‡(
‹c
 =
CONFREJ
 &&

1663 
rc
 !
CONFREJ
) {

1664 
rc
 = 
CONFREJ
;

1665 
u˝
 = 
öp
;

1669 i‡(
u˝
 !
cù
)

1670 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1673 
	`INCPTR
(
cûí
, 
u˝
);

1683 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 && !ho->
ﬁd_addrs
 &&

1684 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
 && !
n‹emŸeù
) {

1685 i‡(
rc
 =
CONFACK
) {

1686 
rc
 = 
CONFNAK
;

1687 
u˝
 = 
öp
;

1688 
wo
->
ªq_addr
 = 0;

1690 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1691 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1692 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1693 
	`PUTLONG
(
é
, 
u˝
);

1696 *
Àn
 = 
u˝
 - 
öp
;

1697 
	`IPCPDEBUG
(("ù˝:Ñëu∫ög C⁄figuª-%s", 
	`CODENAME
(
rc
)));

1698  (
rc
);

1699 
	}
}

1707 
	$ù_check_›ti⁄s
()

1709 
ho°ít
 *
hp
;

1710 
u_öt32_t
 
loˇl
;

1711 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1717 i‡(
wo
->
ouøddr
 =0 && !
dißbÀ_deÁu…ù
) {

1723 
wo
->
ac˚±_loˇl
 = 1;

1724 i‡((
hp
 = 
	`gëho°by«me
(
ho°«me
)Ë!
NULL
) {

1725 
loˇl
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

1726 i‡(
loˇl
 !0 && !
	`bad_ù_adrs
(local))

1727 
wo
->
ouøddr
 = 
loˇl
;

1730 
ask_f‹_loˇl
 = 
wo
->
ouøddr
 !0 || !
dißbÀ_deÁu…ù
;

1731 
	}
}

1739 
	$ù_dem™d_c⁄f
(
u
)

1740 
u
;

1742 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
u
];

1744 i‡(
wo
->
hißddr
 =0 && !
n‹emŸeù
) {

1746 
wo
->
hißddr
 = 
	`ht⁄l
(0x0a707070 + 
ifunô
);

1747 
wo
->
ac˚±_ªmŸe
 = 1;

1749 i‡(
wo
->
ouøddr
 == 0) {

1751 
wo
->
ouøddr
 = 
	`ht⁄l
(0x0a404040 + 
ifunô
);

1752 
wo
->
ac˚±_loˇl
 = 1;

1753 
ask_f‹_loˇl
 = 0;

1755 i‡(!
	`siÁddr
(
u
, 
wo
->
ouøddr
, wo->
hißddr
, 
	`GëMask
(wo->ouraddr)))

1757 
	`ù˝_s¸ùt
(
_PATH_IPPREUP
, 1);

1758 i‡(!
	`sifup
(
u
))

1760 i‡(!
	`si‚pmode
(
u
, 
PPP_IP
, 
NPMODE_QUEUE
))

1762 i‡(
wo
->
deÁu…_rouã
)

1763 i‡(
	`sifdeÁu…rouã
(
u
, 
wo
->
ouøddr
, wo->
hißddr
))

1764 
deÁu…_rouã_£t
[
u
] = 1;

1765 i‡(
wo
->
¥oxy_¨p
)

1766 i‡(
	`siÂroxy¨p
(
u
, 
wo
->
hißddr
))

1767 
¥oxy_¨p_£t
[
u
] = 1;

1769 
	`nŸi˚
("loˇ» IPáddªs†%I", 
wo
->
ouøddr
);

1770 i‡(
wo
->
hißddr
)

1771 
	`nŸi˚
("ªmŸêIPáddªs†%I", 
wo
->
hißddr
);

1774 
	}
}

1783 
	$ù˝_up
(
f
)

1784 
fsm
 *
f
;

1786 
u_öt32_t
 
mask
;

1787 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1788 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1789 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1791 
	`IPCPDEBUG
(("ipcp: up"));

1796 i‡(!
ho
->
√g_addr
 && !ho->
ﬁd_addrs
)

1797 
ho
->
hißddr
 = 
wo
->hisaddr;

1799 i‡(!(
go
->
√g_addr
 || go->
ﬁd_addrs
Ë&& (
wo
->neg_addr || wo->old_addrs)

1800 && 
wo
->
ouøddr
 != 0) {

1801 
	`îr‹
("PeerÑefusedÅoágreeÅo our IPáddress");

1802 
	`ù˝_˛o£
(
f
->
unô
, "Refused our IPáddress");

1805 i‡(
go
->
ouøddr
 == 0) {

1806 
	`îr‹
("CouldÇot determineÜocal IPáddress");

1807 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1810 i‡(
ho
->
hißddr
 =0 && !
n‹emŸeù
) {

1811 
ho
->
hißddr
 = 
	`ht⁄l
(0x0a404040 + 
ifunô
);

1812 
	`w¨n
("CouldÇot determineÑemote IPáddress: defaultingÅo %I",

1813 
ho
->
hißddr
);

1815 
	`s¸ùt_£ãnv
("IPLOCAL", 
	`ù_¡ﬂ
(
go
->
ouøddr
), 0);

1816 i‡(
ho
->
hißddr
 != 0)

1817 
	`s¸ùt_£ãnv
("IPREMOTE", 
	`ù_¡ﬂ
(
ho
->
hißddr
), 1);

1819 i‡(!
go
->
ªq_dns1
)

1820 
go
->
dnßddr
[0] = 0;

1821 i‡(!
go
->
ªq_dns2
)

1822 
go
->
dnßddr
[1] = 0;

1823 i‡(
go
->
dnßddr
[0])

1824 
	`s¸ùt_£ãnv
("DNS1", 
	`ù_¡ﬂ
(
go
->
dnßddr
[0]), 0);

1825 i‡(
go
->
dnßddr
[1])

1826 
	`s¸ùt_£ãnv
("DNS2", 
	`ù_¡ﬂ
(
go
->
dnßddr
[1]), 0);

1827 i‡(
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1828 
	`s¸ùt_£ãnv
("USEPEERDNS", "1", 0);

1829 
	`¸óã_ªsﬁv
(
go
->
dnßddr
[0], go->dnsaddr[1]);

1835 i‡(
ho
->
hißddr
 !0 && !
	`auth_ù_addr
(
f
->
unô
, ho->hisaddr)) {

1836 
	`îr‹
("Pì∏i†nŸáuth‹izedÅÿu£ÑemŸêaddªs†%I", 
ho
->
hißddr
);

1837 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1842 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1849 i‡(
dem™d
) {

1850 i‡(
go
->
ouøddr
 !
wo
->ouødd∏|| 
ho
->
hißddr
 != wo->hisaddr) {

1851 
	`ù˝_˛ór_addrs
(
f
->
unô
, 
wo
->
ouøddr
, wo->
hißddr
);

1852 i‡(
go
->
ouøddr
 !
wo
->ouraddr) {

1853 
	`w¨n
("Loˇ»IPáddªs†ch™gedÅÿ%I", 
go
->
ouøddr
);

1854 
	`s¸ùt_£ãnv
("OLDIPLOCAL", 
	`ù_¡ﬂ
(
wo
->
ouøddr
), 0);

1855 
wo
->
ouøddr
 = 
go
->ouraddr;

1857 
	`s¸ùt_un£ãnv
("OLDIPLOCAL");

1858 i‡(
ho
->
hißddr
 !
wo
->hisaddr && wo->hisaddr != 0) {

1859 
	`w¨n
("RemŸêIPáddªs†ch™gedÅÿ%I", 
ho
->
hißddr
);

1860 
	`s¸ùt_£ãnv
("OLDIPREMOTE", 
	`ù_¡ﬂ
(
wo
->
hißddr
), 0);

1861 
wo
->
hißddr
 = 
ho
->hisaddr;

1863 
	`s¸ùt_un£ãnv
("OLDIPREMOTE");

1866 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1867 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
)) {

1868 i‡(
debug
)

1869 
	`w¨n
("Interface configuration failed");

1870 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1875 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
)

1876 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
))

1877 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1880 i‡(
ho
->
hißddr
 !0 && 
ù˝_w™t›ti⁄s
[
f
->
unô
].
¥oxy_¨p
)

1881 i‡(
	`siÂroxy¨p
(
f
->
unô
, 
ho
->
hißddr
))

1882 
¥oxy_¨p_£t
[
f
->
unô
] = 1;

1885 
	`dem™d_ªxmô
(
PPP_IP
);

1886 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1892 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1894 #i‡!(
	`deföed
(
SVR4
Ë&& (deföed(
SNI
Ë|| deföed(
__USLC__
)))

1895 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
)) {

1896 i‡(
debug
)

1897 
	`w¨n
("Interface configuration failed");

1898 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1904 
	`ù˝_s¸ùt
(
_PATH_IPPREUP
, 1);

1907 i‡(!
	`sifup
(
f
->
unô
)) {

1908 i‡(
debug
)

1909 
	`w¨n
("Interface failedÅo come up");

1910 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1914 #i‡(
	`deföed
(
SVR4
Ë&& (deföed(
SNI
Ë|| deföed(
__USLC__
)))

1915 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
)) {

1916 i‡(
debug
)

1917 
	`w¨n
("Interface configuration failed");

1918 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1922 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1925 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
)

1926 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
))

1927 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1930 i‡(
ho
->
hißddr
 !0 && 
ù˝_w™t›ti⁄s
[
f
->
unô
].
¥oxy_¨p
)

1931 i‡(
	`siÂroxy¨p
(
f
->
unô
, 
ho
->
hißddr
))

1932 
¥oxy_¨p_£t
[
f
->
unô
] = 1;

1934 
ù˝_w™t›ti⁄s
[0].
ouøddr
 = 
go
->ouraddr;

1936 
	`nŸi˚
("loˇ» IPáddªs†%I", 
go
->
ouøddr
);

1937 i‡(
ho
->
hißddr
 != 0)

1938 
	`nŸi˚
("ªmŸêIPáddªs†%I", 
ho
->
hißddr
);

1939 i‡(
go
->
dnßddr
[0])

1940 
	`nŸi˚
("¥im¨y DNSáddªs†%I", 
go
->
dnßddr
[0]);

1941 i‡(
go
->
dnßddr
[1])

1942 
	`nŸi˚
("£c⁄d¨y DNSáddªs†%I", 
go
->
dnßddr
[1]);

1945 
	`ª£t_lök_°©s
(
f
->
unô
);

1947 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1948 
ù˝_is_up
 = 1;

1950 
	`nŸify
(
ù_up_nŸifõr
, 0);

1951 i‡(
ù_up_hook
)

1952 
	`ù_up_hook
();

1958 i‡(
ù˝_s¸ùt_°©e
 =
s_down
 && 
ù˝_s¸ùt_pid
 == 0) {

1959 
ù˝_s¸ùt_°©e
 = 
s_up
;

1960 
	`ù˝_s¸ùt
(
_PATH_IPUP
, 0);

1962 
	}
}

1972 
	$ù˝_down
(
f
)

1973 
fsm
 *
f
;

1975 
	`IPCPDEBUG
(("ipcp: down"));

1980 
	`upd©e_lök_°©s
(
f
->
unô
);

1981 
	`nŸify
(
ù_down_nŸifõr
, 0);

1982 i‡(
ù_down_hook
)

1983 
	`ù_down_hook
();

1984 i‡(
ù˝_is_up
) {

1985 
ù˝_is_up
 = 0;

1986 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1988 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1990 
	`¥öt_lök_°©s
();

1998 i‡(
dem™d
) {

1999 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_QUEUE
);

2001 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_DROP
);

2002 
	`sifdown
(
f
->
unô
);

2003 
	`ù˝_˛ór_addrs
(
f
->
unô
, 
ù˝_gŸ›ti⁄s
[f->unô].
ouøddr
,

2004 
ù˝_his›ti⁄s
[
f
->
unô
].
hißddr
);

2008 i‡(
ù˝_s¸ùt_°©e
 =
s_up
 && 
ù˝_s¸ùt_pid
 == 0) {

2009 
ù˝_s¸ùt_°©e
 = 
s_down
;

2010 
	`ù˝_s¸ùt
(
_PATH_IPDOWN
, 0);

2012 
	}
}

2020 
	$ù˝_˛ór_addrs
(
unô
, 
ouøddr
, 
hißddr
)

2021 
unô
;

2022 
u_öt32_t
 
ouøddr
;

2023 
u_öt32_t
 
hißddr
;

2025 i‡(
¥oxy_¨p_£t
[
unô
]) {

2026 
	`ciÂroxy¨p
(
unô
, 
hißddr
);

2027 
¥oxy_¨p_£t
[
unô
] = 0;

2029 i‡(
deÁu…_rouã_£t
[
unô
]) {

2030 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

2031 
deÁu…_rouã_£t
[
unô
] = 0;

2033 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

2034 
	}
}

2041 
	$ù˝_föished
(
f
)

2042 
fsm
 *
f
;

2044 i‡(
ù˝_is_›í
) {

2045 
ù˝_is_›í
 = 0;

2046 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

2048 
	}
}

2056 
	$ù˝_s¸ùt_d⁄e
(
¨g
)

2057 *
¨g
;

2059 
ù˝_s¸ùt_pid
 = 0;

2060 
ù˝_s¸ùt_°©e
) {

2061 
s_up
:

2062 i‡(
ù˝_fsm
[0].
°©e
 !
OPENED
) {

2063 
ù˝_s¸ùt_°©e
 = 
s_down
;

2064 
	`ù˝_s¸ùt
(
_PATH_IPDOWN
, 0);

2067 
s_down
:

2068 i‡(
ù˝_fsm
[0].
°©e
 =
OPENED
) {

2069 
ù˝_s¸ùt_°©e
 = 
s_up
;

2070 
	`ù˝_s¸ùt
(
_PATH_IPUP
, 0);

2074 
	}
}

2082 
	$ù˝_s¸ùt
(
s¸ùt
, 
waô
)

2083 *
s¸ùt
;

2084 
waô
;

2086 
°r•ìd
[32], 
°æoˇl
[32], 
°ºemŸe
[32];

2087 *
¨gv
[8];

2089 
	`¶¥ötf
(
°r•ìd
, (°r•ìd), "%d", 
baud_øã
);

2090 
	`¶¥ötf
(
°æoˇl
, (°æoˇl), "%I", 
ù˝_gŸ›ti⁄s
[0].
ouøddr
);

2091 
	`¶¥ötf
(
°ºemŸe
, (°ºemŸe), "%I", 
ù˝_his›ti⁄s
[0].
hißddr
);

2093 
¨gv
[0] = 
s¸ùt
;

2094 
¨gv
[1] = 
i‚ame
;

2095 
¨gv
[2] = 
dev«m
;

2096 
¨gv
[3] = 
°r•ìd
;

2097 
¨gv
[4] = 
°æoˇl
;

2098 
¨gv
[5] = 
°ºemŸe
;

2099 
¨gv
[6] = 
ù∑øm
;

2100 
¨gv
[7] = 
NULL
;

2101 i‡(
waô
)

2102 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
NULL
, NULL, 1);

2104 
ù˝_s¸ùt_pid
 = 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
ù˝_s¸ùt_d⁄e
,

2105 
NULL
, 0);

2106 
	}
}

2112 
	$¸óã_ªsﬁv
(
≥îdns1
, 
≥îdns2
)

2113 
u_öt32_t
 
≥îdns1
, 
≥îdns2
;

2115 
FILE
 *
f
;

2117 
f
 = 
	`f›í
(
_PATH_RESOLV
, "w");

2118 i‡(
f
 =
NULL
) {

2119 
	`îr‹
("FaûedÅÿ¸óã %s: %m", 
_PATH_RESOLV
);

2123 i‡(
≥îdns1
)

2124 
	`Ârötf
(
f
, "«me£rvî %s\n", 
	`ù_¡ﬂ
(
≥îdns1
));

2126 i‡(
≥îdns2
)

2127 
	`Ârötf
(
f
, "«me£rvî %s\n", 
	`ù_¡ﬂ
(
≥îdns2
));

2129 i‡(
	`„º‹
(
f
))

2130 
	`îr‹
("WrôêÁûedÅÿ%s: %m", 
_PATH_RESOLV
);

2132 
	`f˛o£
(
f
);

2133 
	}
}

2138 *
	gù˝_codíames
[] = {

2144 
	$ù˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

2145 
u_ch¨
 *
p
;

2146 
∂í
;

2147 (*
¥öãr
Ë
	`__P
((*, *, ...));

2148 *
¨g
;

2150 
code
, 
id
, 
Àn
, 
ﬁí
;

2151 
u_ch¨
 *
p°¨t
, *
›ãnd
;

2152 
u_sh‹t
 
cish‹t
;

2153 
u_öt32_t
 
cû⁄g
;

2155 i‡(
∂í
 < 
HEADERLEN
)

2157 
p°¨t
 = 
p
;

2158 
	`GETCHAR
(
code
, 
p
);

2159 
	`GETCHAR
(
id
, 
p
);

2160 
	`GETSHORT
(
Àn
, 
p
);

2161 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

2164 i‡(
code
 >1 && codê<(
ù˝_codíames
) / (*))

2165 
	`¥öãr
(
¨g
, " %s", 
ù˝_codíames
[
code
-1]);

2167 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

2168 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

2169 
Àn
 -
HEADERLEN
;

2170 
code
) {

2171 
CONFREQ
:

2172 
CONFACK
:

2173 
CONFNAK
:

2174 
CONFREJ
:

2176 
Àn
 >= 2) {

2177 
	`GETCHAR
(
code
, 
p
);

2178 
	`GETCHAR
(
ﬁí
, 
p
);

2179 
p
 -= 2;

2180 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

2183 
	`¥öãr
(
¨g
, " <");

2184 
Àn
 -
ﬁí
;

2185 
›ãnd
 = 
p
 + 
ﬁí
;

2186 
code
) {

2187 
CI_ADDRS
:

2188 i‡(
ﬁí
 =
CILEN_ADDRS
) {

2189 
p
 += 2;

2190 
	`GETLONG
(
cû⁄g
, 
p
);

2191 
	`¥öãr
(
¨g
, "addr†%I", 
	`ht⁄l
(
cû⁄g
));

2192 
	`GETLONG
(
cû⁄g
, 
p
);

2193 
	`¥öãr
(
¨g
, " %I", 
	`ht⁄l
(
cû⁄g
));

2196 
CI_COMPRESSTYPE
:

2197 i‡(
ﬁí
 >
CILEN_COMPRESS
) {

2198 
p
 += 2;

2199 
	`GETSHORT
(
cish‹t
, 
p
);

2200 
	`¥öãr
(
¨g
, "compress ");

2201 
cish‹t
) {

2202 
IPCP_VJ_COMP
:

2203 
	`¥öãr
(
¨g
, "VJ");

2205 
IPCP_VJ_COMP_OLD
:

2206 
	`¥öãr
(
¨g
, "old-VJ");

2209 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

2213 
CI_ADDR
:

2214 i‡(
ﬁí
 =
CILEN_ADDR
) {

2215 
p
 += 2;

2216 
	`GETLONG
(
cû⁄g
, 
p
);

2217 
	`¥öãr
(
¨g
, "add∏%I", 
	`ht⁄l
(
cû⁄g
));

2220 
CI_MS_DNS1
:

2221 
CI_MS_DNS2
:

2222 
p
 += 2;

2223 
	`GETLONG
(
cû⁄g
, 
p
);

2224 
	`¥öãr
(
¨g
, "ms-dns%d %I", (
code
 =
CI_MS_DNS1
? 1: 2),

2225 
	`ht⁄l
(
cû⁄g
));

2227 
CI_MS_WINS1
:

2228 
CI_MS_WINS2
:

2229 
p
 += 2;

2230 
	`GETLONG
(
cû⁄g
, 
p
);

2231 
	`¥öãr
(
¨g
, "ms-wö†%I", 
	`ht⁄l
(
cû⁄g
));

2234 
p
 < 
›ãnd
) {

2235 
	`GETCHAR
(
code
, 
p
);

2236 
	`¥öãr
(
¨g
, " %.2x", 
code
);

2238 
	`¥öãr
(
¨g
, ">");

2242 
TERMACK
:

2243 
TERMREQ
:

2244 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

2245 
	`¥öãr
(
¨g
, " ");

2246 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

2247 
p
 +
Àn
;

2248 
Àn
 = 0;

2254 ; 
Àn
 > 0; --len) {

2255 
	`GETCHAR
(
code
, 
p
);

2256 
	`¥öãr
(
¨g
, " %.2x", 
code
);

2259  
p
 - 
p°¨t
;

2260 
	}
}

2267 
	#IP_HDRLEN
 20

	)

2268 
	#IP_OFFMASK
 0x1fff

	)

2269 #i‚de‡
IPPROTO_TCP


2270 
	#IPPROTO_TCP
 6

	)

2272 
	#TCP_HDRLEN
 20

	)

2273 
	#TH_FIN
 0x01

	)

2280 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

2281 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

2282 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

2283 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

2284 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

2285 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

2288 
	$ù_a˘ive_pkt
(
pkt
, 
Àn
)

2289 
u_ch¨
 *
pkt
;

2290 
Àn
;

2292 
u_ch¨
 *
t˝
;

2293 
hÀn
;

2295 
Àn
 -
PPP_HDRLEN
;

2296 
pkt
 +
PPP_HDRLEN
;

2297 i‡(
Àn
 < 
IP_HDRLEN
)

2299 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0)

2301 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
)

2303 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

2304 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
)

2306 
t˝
 = 
pkt
 + 
hÀn
;

2307 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4)

2310 
	}
}

	@pppd/ipcp.h

48 
	#CI_ADDRS
 1

	)

49 
	#CI_COMPRESSTYPE
 2

	)

50 
	#CI_ADDR
 3

	)

52 
	#CI_MS_DNS1
 129

	)

53 
	#CI_MS_WINS1
 130

	)

54 
	#CI_MS_DNS2
 131

	)

55 
	#CI_MS_WINS2
 132

	)

57 
	#MAX_STATES
 16

	)

59 
	#IPCP_VJMODE_OLD
 1

	)

60 
	#IPCP_VJMODE_RFC1172
 2

	)

61 
	#IPCP_VJMODE_RFC1332
 3

	)

64 
	#IPCP_VJ_COMP
 0x002d

	)

65 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

68 
	sù˝_›ti⁄s
 {

69 
boﬁ
 
	m√g_addr
;

70 
boﬁ
 
	mﬁd_addrs
;

71 
boﬁ
 
	mªq_addr
;

72 
boﬁ
 
	mdeÁu…_rouã
;

73 
boﬁ
 
	m¥oxy_¨p
;

74 
boﬁ
 
	m√g_vj
;

75 
boﬁ
 
	mﬁd_vj
;

76 
boﬁ
 
	mac˚±_loˇl
;

77 
boﬁ
 
	mac˚±_ªmŸe
;

78 
boﬁ
 
	mªq_dns1
;

79 
boﬁ
 
	mªq_dns2
;

80 
	mvj_¥Ÿocﬁ
;

81 
	mmax¶Ÿödex
;

82 
boﬁ
 
	mcÊag
;

83 
u_öt32_t
 
	mouøddr
, 
	mhißddr
;

84 
u_öt32_t
 
	mdnßddr
[2];

85 
u_öt32_t
 
	mwößddr
[2];

86 } 
	tù˝_›ti⁄s
;

88 
fsm
 
ù˝_fsm
[];

89 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

90 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

91 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

92 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

94 *
ù_¡ﬂ
 
__P
((
u_öt32_t
));

96 
¥Ÿít
 
ù˝_¥Ÿít
;

	@pppd/ipv6cp.c

141 
	#RCSID
 "$Id: ipv6˝.c,v 1.21 2005/08/25 23:59:34Öaulu†Ex∞$"

	)

153 
	~<°dio.h
>

154 
	~<°dlib.h
>

155 
	~<°rög.h
>

156 
	~<uni°d.h
>

157 
	~<√tdb.h
>

158 
	~<sys/∑øm.h
>

159 
	~<sys/ty≥s.h
>

160 
	~<sys/sockë.h
>

161 
	~<√töë/ö.h
>

162 
	~<¨∑/öë.h
>

164 
	~"µpd.h
"

165 
	~"fsm.h
"

166 
	~"ù˝.h
"

167 
	~"ùv6˝.h
"

168 
	~"magic.h
"

169 
	~"∑th«mes.h
"

173 
ùv6˝_›ti⁄s
 
	gùv6˝_w™t›ti⁄s
[
NUM_PPP
];

174 
ùv6˝_›ti⁄s
 
	gùv6˝_gŸ›ti⁄s
[
NUM_PPP
];

175 
ùv6˝_›ti⁄s
 
	gùv6˝_Ælow›ti⁄s
[
NUM_PPP
];

176 
ùv6˝_›ti⁄s
 
	gùv6˝_his›ti⁄s
[
NUM_PPP
];

177 
	gno_iÁ˚id_√g
 = 0;

180 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

181 
	gùv6˝_is_up
;

184 (*
ùv6_up_hook
Ë
	`__P
(()Ë
NULL
;

187 (*
ùv6_down_hook
Ë
	`__P
(()Ë
NULL
;

190 
nŸifõr
 *
ùv6_up_nŸifõr
 = 
NULL
;

191 
nŸifõr
 *
ùv6_down_nŸifõr
 = 
NULL
;

196 
ùv6˝_ª£tci
 
	`__P
((
fsm
 *));

197 
ùv6˝_cûí
 
	`__P
((
fsm
 *));

198 
ùv6˝_addci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, *));

199 
ùv6˝_ackci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, ));

200 
ùv6˝_«kci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, , ));

201 
ùv6˝_ªjci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, ));

202 
ùv6˝_ªqci
 
	`__P
((
fsm
 *, 
u_ch¨
 *, *, ));

203 
ùv6˝_up
 
	`__P
((
fsm
 *));

204 
ùv6˝_down
 
	`__P
((
fsm
 *));

205 
ùv6˝_föished
 
	`__P
((
fsm
 *));

207 
fsm
 
ùv6˝_fsm
[
NUM_PPP
];

209 
fsm_ˇŒbacks
 
ùv6˝_ˇŒbacks
 = {

210 
ùv6˝_ª£tci
,

211 
ùv6˝_cûí
,

212 
ùv6˝_addci
,

213 
ùv6˝_ackci
,

214 
ùv6˝_«kci
,

215 
ùv6˝_ªjci
,

216 
ùv6˝_ªqci
,

217 
ùv6˝_up
,

218 
ùv6˝_down
,

219 
NULL
,

220 
ùv6˝_föished
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

225 
	}
};

230 
£tiÁ˚id
 
__P
((**
¨g
));

231 
¥ötiÁ˚id
 
__P
((
›ti⁄_t
 *,

234 
›ti⁄_t
 
ùv6˝_›ti⁄_li°
[] = {

235 { "ùv6", 
o_•ecül
, (*)
£tiÁ˚id
,

237 
OPT_A2PRINTER
, (*)
¥ötiÁ˚id
 },

239 { "+ùv6", 
o_boﬁ
, &
ùv6˝_¥Ÿít
.
íabÀd_Êag
,

240 "E«bÀ IPv6ánd IPv6CP", 
OPT_PRIO
 | 1 },

241 { "noùv6", 
o_boﬁ
, &
ùv6˝_¥Ÿít
.
íabÀd_Êag
,

242 "DißbÀ IPv6ánd IPv6CP", 
OPT_PRIOSUB
 },

243 { "-ùv6", 
o_boﬁ
, &
ùv6˝_¥Ÿít
.
íabÀd_Êag
,

244 "DißbÀ IPv6ánd IPv6CP", 
OPT_PRIOSUB
 | 
OPT_ALIAS
 },

246 { "ùv6˝-ac˚±-loˇl", 
o_boﬁ
, &
ùv6˝_Ælow›ti⁄s
[0].
ac˚±_loˇl
,

248 { "ùv6˝-ac˚±-ªmŸe", 
o_boﬁ
, &
ùv6˝_Ælow›ti⁄s
[0].
ac˚±_ªmŸe
,

251 { "deÁu…rouã6", 
o_boﬁ
, &
ùv6˝_w™t›ti⁄s
[0].
deÁu…_rouã
,

252 "Add deÁu… IPv6Ñouã", 
OPT_ENABLE
|1, &
ùv6˝_Ælow›ti⁄s
[0].
deÁu…_rouã
 },

253 { "nodeÁu…rouã6", 
o_boﬁ
, &
ùv6˝_Ælow›ti⁄s
[0].
deÁu…_rouã
,

254 "dißbÀ deÁu…rouã6 o±i⁄", 
OPT_A2CLR
,

255 &
ùv6˝_w™t›ti⁄s
[0].
deÁu…_rouã
 },

256 { "-deÁu…rouã6", 
o_boﬁ
, &
ùv6˝_Ælow›ti⁄s
[0].
deÁu…_rouã
,

257 "dißbÀ deÁu…rouã6 o±i⁄", 
OPT_ALIAS
 | 
OPT_A2CLR
,

258 &
ùv6˝_w™t›ti⁄s
[0].
deÁu…_rouã
 },

260 { "ùv6˝-u£-ùaddr", 
o_boﬁ
, &
ùv6˝_Ælow›ti⁄s
[0].
u£_ù
,

263 { "ùv6˝-u£-≥rsi°ít", 
o_boﬁ
, &
ùv6˝_w™t›ti⁄s
[0].
u£_≥rsi°ít
,

266 { "ùv6˝-ª°¨t", 
o_öt
, &
ùv6˝_fsm
[0].
timeouâime
,

267 "SëÅimeouàf‹ IPv6CP", 
OPT_PRIO
 },

268 { "ùv6˝-max-ãrmö©e", 
o_öt
, &
ùv6˝_fsm
[0].
maxãrmå™smôs
,

269 "Së max #xmô†f‹Åîm-ªqs", 
OPT_PRIO
 },

270 { "ùv6˝-max-c⁄figuª", 
o_öt
, &
ùv6˝_fsm
[0].
maxc⁄‰eqå™smôs
,

271 "Së max #xmô†f‹ c⁄f-ªqs", 
OPT_PRIO
 },

272 { "ùv6˝-max-Áûuª", 
o_öt
, &
ùv6˝_fsm
[0].
max«klo›s
,

273 "Së max #c⁄f-«k†f‹ IPv6CP", 
OPT_PRIO
 },

275 { 
NULL
 }

276 
	}
};

282 
ùv6˝_öô
 
__P
(());

283 
ùv6˝_›í
 
__P
(());

284 
ùv6˝_˛o£
 
__P
((, *));

285 
ùv6˝_lowîup
 
__P
(());

286 
ùv6˝_lowîdown
 
__P
(());

287 
ùv6˝_öput
 
__P
((, 
u_ch¨
 *, ));

288 
ùv6˝_¥Ÿªj
 
__P
(());

289 
ùv6˝_¥öçkt
 
__P
((
u_ch¨
 *, ,

290 (*Ë
	`__P
((*, *, ...)), *));

291 
ùv6_check_›ti⁄s
 
	`__P
(());

292 
ùv6_dem™d_c⁄f
 
	`__P
(());

293 
ùv6_a˘ive_pkt
 
	`__P
((
u_ch¨
 *, ));

295 
¥Ÿít
 
ùv6˝_¥Ÿít
 = {

296 
PPP_IPV6CP
,

297 
ùv6˝_öô
,

298 
ùv6˝_öput
,

299 
ùv6˝_¥Ÿªj
,

300 
ùv6˝_lowîup
,

301 
ùv6˝_lowîdown
,

302 
ùv6˝_›í
,

303 
ùv6˝_˛o£
,

304 
ùv6˝_¥öçkt
,

305 
NULL
,

309 
ùv6˝_›ti⁄_li°
,

310 
ùv6_check_›ti⁄s
,

311 
ùv6_dem™d_c⁄f
,

312 
ùv6_a˘ive_pkt


313 
	}
};

315 
ùv6˝_˛ór_addrs
 
__P
((, 
eui64_t
,Éui64_t));

316 
ùv6˝_s¸ùt
 
__P
((*));

317 
ùv6˝_s¸ùt_d⁄e
 
__P
((*));

322 
	#CILEN_VOID
 2

	)

323 
	#CILEN_COMPRESS
 4

	)

324 
	#CILEN_IFACEID
 10

	)

326 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

327 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

333 
	es¸ùt_°©e
 {

334 
	ms_down
,

335 
	ms_up
,

336 } 
	gùv6˝_s¸ùt_°©e
;

337 
pid_t
 
	gùv6˝_s¸ùt_pid
;

343 
	$£tiÁ˚id
(
¨gv
)

344 **
¨gv
;

346 *
comma
, *
¨g
, 
c
;

347 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[0];

348 
ö6_addr
 
addr
;

349 
¥io_loˇl
, 
¥io_ªmŸe
;

351 
	#VALIDID
(
a
Ë–((◊).
s6_addr32
[0] == 0) && ((a).s6_addr32[1] == 0)) && \

352 (((
a
).
s6_addr32
[2] !0Ë|| (◊).s6_addr32[3] !0)Ë)

	)

354 
¨g
 = *
¨gv
;

355 i‡((
comma
 = 
	`°rchr
(
¨g
, ',')Ë=
NULL
)

356 
comma
 = 
¨g
 + 
	`°æí
(arg);

361 i‡(
comma
 !
¨g
) {

362 
c
 = *
comma
;

363 *
comma
 = '\0';

365 i‡(
	`öë_±⁄
(
AF_INET6
, 
¨g
, &
addr
Ë=0 || !
	`VALIDID
(addr)) {

366 
	`›ti⁄_îr‹
("IŒegÆ i¡îÁ˚ idítifõ∏÷oˇl): %s", 
¨g
);

370 i‡(
›ti⁄_¥i‹ôy
 >
¥io_loˇl
) {

371 
	`eui64_c›y
(
addr
.
s6_addr32
[2], 
wo
->
ourid
);

372 
wo
->
›t_loˇl
 = 1;

373 
¥io_loˇl
 = 
›ti⁄_¥i‹ôy
;

375 *
comma
 = 
c
;

381 i‡(*
comma
 != 0 && *++comma != '\0') {

382 i‡(
	`öë_±⁄
(
AF_INET6
, 
comma
, &
addr
Ë=0 || !
	`VALIDID
(addr)) {

383 
	`›ti⁄_îr‹
("IŒegÆ i¡îÁ˚ idítifõ∏‘emŸe): %s", 
comma
);

386 i‡(
›ti⁄_¥i‹ôy
 >
¥io_ªmŸe
) {

387 
	`eui64_c›y
(
addr
.
s6_addr32
[2], 
wo
->
hisid
);

388 
wo
->
›t_ªmŸe
 = 1;

389 
¥io_ªmŸe
 = 
›ti⁄_¥i‹ôy
;

393 i‡(
	`ovîride_vÆue
("+ùv6", 
›ti⁄_¥i‹ôy
, 
›ti⁄_sour˚
))

394 
ùv6˝_¥Ÿít
.
íabÀd_Êag
 = 1;

396 
	}
}

398 *
Œv6_¡ﬂ
(
eui64_t
 
iÁ˚id
);

401 
	$¥ötiÁ˚id
(
›t
, 
¥öãr
, 
¨g
)

402 
›ti⁄_t
 *
›t
;

403 (*
¥öãr
Ë
	`__P
((*, *, ...));

404 *
¨g
;

406 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[0];

408 i‡(
wo
->
›t_loˇl
)

409 
	`¥öãr
(
¨g
, "%s", 
	`Œv6_¡ﬂ
(
wo
->
ourid
));

410 
	`¥öãr
(
¨g
, ",");

411 i‡(
wo
->
›t_ªmŸe
)

412 
	`¥öãr
(
¨g
, "%s", 
	`Œv6_¡ﬂ
(
wo
->
hisid
));

413 
	}
}

419 
	$Œv6_¡ﬂ
(
iÁ˚id
)

420 
eui64_t
 
iÁ˚id
;

422 
b
[64];

424 
	`•rötf
(
b
, "„80::%s", 
	`eui64_¡ﬂ
(
iÁ˚id
));

425  
b
;

426 
	}
}

433 
	$ùv6˝_öô
(
unô
)

434 
unô
;

436 
fsm
 *
f
 = &
ùv6˝_fsm
[
unô
];

437 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[
unô
];

438 
ùv6˝_›ti⁄s
 *
ao
 = &
ùv6˝_Ælow›ti⁄s
[
unô
];

440 
f
->
unô
 = unit;

441 
f
->
¥Ÿocﬁ
 = 
PPP_IPV6CP
;

442 
f
->
ˇŒbacks
 = &
ùv6˝_ˇŒbacks
;

443 
	`fsm_öô
(&
ùv6˝_fsm
[
unô
]);

445 
	`mem£t
(
wo
, 0, (*wo));

446 
	`mem£t
(
ao
, 0, (*ao));

448 
wo
->
ac˚±_loˇl
 = 0;

449 
wo
->
ac˚±_ªmŸe
 = 0;

450 
wo
->
√g_iÁ˚id
 = 1;

451 
ao
->
√g_iÁ˚id
 = 1;

453 #ifde‡
IPV6CP_COMP


454 
wo
->
√g_vj
 = 1;

455 
ao
->
√g_vj
 = 1;

456 
wo
->
vj_¥Ÿocﬁ
 = 
IPV6CP_COMP
;

462 
ao
->
deÁu…_rouã
 = 1;

463 
	}
}

470 
	$ùv6˝_›í
(
unô
)

471 
unô
;

473 
	`fsm_›í
(&
ùv6˝_fsm
[
unô
]);

474 
	}
}

481 
	$ùv6˝_˛o£
(
unô
, 
ªas⁄
)

482 
unô
;

483 *
ªas⁄
;

485 
	`fsm_˛o£
(&
ùv6˝_fsm
[
unô
], 
ªas⁄
);

486 
	}
}

493 
	$ùv6˝_lowîup
(
unô
)

494 
unô
;

496 
	`fsm_lowîup
(&
ùv6˝_fsm
[
unô
]);

497 
	}
}

504 
	$ùv6˝_lowîdown
(
unô
)

505 
unô
;

507 
	`fsm_lowîdown
(&
ùv6˝_fsm
[
unô
]);

508 
	}
}

515 
	$ùv6˝_öput
(
unô
, 
p
, 
Àn
)

516 
unô
;

517 
u_ch¨
 *
p
;

518 
Àn
;

520 
	`fsm_öput
(&
ùv6˝_fsm
[
unô
], 
p
, 
Àn
);

521 
	}
}

530 
	$ùv6˝_¥Ÿªj
(
unô
)

531 
unô
;

533 
	`fsm_lowîdown
(&
ùv6˝_fsm
[
unô
]);

534 
	}
}

541 
	$ùv6˝_ª£tci
(
f
)

542 
fsm
 *
f
;

544 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[
f
->
unô
];

545 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

547 
wo
->
ªq_iÁ˚id
 = wo->
√g_iÁ˚id
 && 
ùv6˝_Ælow›ti⁄s
[
f
->
unô
].neg_ifaceid;

549 i‡(!
wo
->
›t_loˇl
) {

550 
wo
->
ac˚±_loˇl
 = 1;

551 
	`eui64_magic_nz
(
wo
->
ourid
);

553 i‡(!
wo
->
›t_ªmŸe
)

554 
wo
->
ac˚±_ªmŸe
 = 1;

556 *
go
 = *
wo
;

557 
	`eui64_zîo
(
go
->
hisid
);

558 
	}
}

565 
	$ùv6˝_cûí
(
f
)

566 
fsm
 *
f
;

568 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

570 
	#LENCIVJ
(
√g
Ë“eg ? 
CILEN_COMPRESS
 : 0)

	)

571 
	#LENCIIFACEID
(
√g
Ë“eg ? 
CILEN_IFACEID
 : 0)

	)

573  (
	`LENCIIFACEID
(
go
->
√g_iÁ˚id
) +

574 
	`LENCIVJ
(
go
->
√g_vj
));

575 
	}
}

582 
	$ùv6˝_addci
(
f
, 
u˝
, 
À≈
)

583 
fsm
 *
f
;

584 
u_ch¨
 *
u˝
;

585 *
À≈
;

587 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

588 
Àn
 = *
À≈
;

590 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
) \

591 i‡(
√g
) { \

592 
vjÀn
 = 
CILEN_COMPRESS
; \

593 i‡(
Àn
 >
vjÀn
) { \

594 
	`PUTCHAR
(
›t
, 
u˝
); \

595 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

596 
	`PUTSHORT
(
vÆ
, 
u˝
); \

597 
Àn
 -
vjÀn
; \

599 
√g
 = 0; \

600 }

	)

602 
	#ADDCIIFACEID
(
›t
, 
√g
, 
vÆ1
) \

603 i‡(
√g
) { \

604 
idÀn
 = 
CILEN_IFACEID
; \

605 i‡(
Àn
 >
idÀn
) { \

606 
	`PUTCHAR
(
›t
, 
u˝
); \

607 
	`PUTCHAR
(
idÀn
, 
u˝
); \

608 
	`eui64_put
(
vÆ1
, 
u˝
); \

609 
Àn
 -
idÀn
; \

611 
√g
 = 0; \

612 }

	)

614 
	`ADDCIIFACEID
(
CI_IFACEID
, 
go
->
√g_iÁ˚id
, go->
ourid
);

616 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
);

618 *
À≈
 -
Àn
;

619 
	}
}

630 
	$ùv6˝_ackci
(
f
, 
p
, 
Àn
)

631 
fsm
 *
f
;

632 
u_ch¨
 *
p
;

633 
Àn
;

635 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

636 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

637 
eui64_t
 
iÁ˚id
;

645 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
) \

646 i‡(
√g
) { \

647 
vjÀn
 = 
CILEN_COMPRESS
; \

648 i‡((
Àn
 -
vjÀn
) < 0) \

649 
bad
; \

650 
	`GETCHAR
(
côy≥
, 
p
); \

651 
	`GETCHAR
(
cûí
, 
p
); \

652 i‡(
cûí
 !
vjÀn
 || \

653 
côy≥
 !
›t
) \

654 
bad
; \

655 
	`GETSHORT
(
cish‹t
, 
p
); \

656 i‡(
cish‹t
 !
vÆ
) \

657 
bad
; \

658 }

	)

660 
	#ACKCIIFACEID
(
›t
, 
√g
, 
vÆ1
) \

661 i‡(
√g
) { \

662 
idÀn
 = 
CILEN_IFACEID
; \

663 i‡((
Àn
 -
idÀn
) < 0) \

664 
bad
; \

665 
	`GETCHAR
(
côy≥
, 
p
); \

666 
	`GETCHAR
(
cûí
, 
p
); \

667 i‡(
cûí
 !
idÀn
 || \

668 
côy≥
 !
›t
) \

669 
bad
; \

670 
	`eui64_gë
(
iÁ˚id
, 
p
); \

671 i‡(! 
	`eui64_equÆs
(
vÆ1
, 
iÁ˚id
)) \

672 
bad
; \

673 }

	)

675 
	`ACKCIIFACEID
(
CI_IFACEID
, 
go
->
√g_iÁ˚id
, go->
ourid
);

677 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
);

682 i‡(
Àn
 != 0)

683 
bad
;

686 
bad
:

687 
	`IPV6CPDEBUG
(("ipv6cp_ackci:Ñeceived bad Ack!"));

689 
	}
}

701 
	$ùv6˝_«kci
(
f
, 
p
, 
Àn
, 
åót_as_ªje˘
)

702 
fsm
 *
f
;

703 
u_ch¨
 *
p
;

704 
Àn
;

705 
åót_as_ªje˘
;

707 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

708 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

709 
u_sh‹t
 
cish‹t
;

710 
eui64_t
 
iÁ˚id
;

711 
ùv6˝_›ti⁄s
 
no
;

712 
ùv6˝_›ti⁄s
 
åy
;

714 
	`BZERO
(&
no
, (no));

715 
åy
 = *
go
;

722 
	#NAKCIIFACEID
(
›t
, 
√g
, 
code
) \

723 i‡(
go
->
√g
 && \

724 
Àn
 >(
cûí
 = 
CILEN_IFACEID
) && \

725 
p
[1] =
cûí
 && \

726 
p
[0] =
›t
) { \

727 
Àn
 -
cûí
; \

728 
	`INCPTR
(2, 
p
); \

729 
	`eui64_gë
(
iÁ˚id
, 
p
); \

730 
no
.
√g
 = 1; \

731 
code
 \

732 }

	)

734 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

735 i‡(
go
->
√g
 && \

736 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
) && \

737 
Àn
 >
cûí
 && \

738 
p
[0] =
›t
) { \

739 
Àn
 -
cûí
; \

740 
	`INCPTR
(2, 
p
); \

741 
	`GETSHORT
(
cish‹t
, 
p
); \

742 
no
.
√g
 = 1; \

743 
code
 \

744 }

	)

750 
	`NAKCIIFACEID
(
CI_IFACEID
, 
√g_iÁ˚id
,

751 i‡(
åót_as_ªje˘
) {

752 
åy
.
√g_iÁ˚id
 = 0;

753 } i‡(
go
->
ac˚±_loˇl
) {

754 
	`eui64_iszîo
(
iÁ˚id
) ||

755 
	`eui64_equÆs
(
iÁ˚id
, 
go
->
hisid
))

756 
	`eui64_magic
(
iÁ˚id
);

757 
åy
.
ourid
 = 
iÁ˚id
;

758 
	`IPV6CPDEBUG
(("loˇ»LLáddªs†%s", 
	`Œv6_¡ﬂ
(
iÁ˚id
)));

762 #ifde‡
IPV6CP_COMP


763 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

765 i‡(
cish‹t
 =
IPV6CP_COMP
 && !
åót_as_ªje˘
) {

766 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

768 
åy
.
√g_vj
 = 0;

773 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

775 
åy
.
√g_vj
 = 0;

786 
Àn
 >
CILEN_VOID
) {

787 
	`GETCHAR
(
côy≥
, 
p
);

788 
	`GETCHAR
(
cûí
, 
p
);

789 i‡–
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0 )

790 
bad
;

791 
√xt
 = 
p
 + 
cûí
 - 2;

793 
côy≥
) {

794 
CI_COMPRESSTYPE
:

795 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

796 (
cûí
 !
CILEN_COMPRESS
))

797 
bad
;

798 
no
.
√g_vj
 = 1;

800 
CI_IFACEID
:

801 i‡(
go
->
√g_iÁ˚id
 || 
no
.√g_iÁ˚id || 
cûí
 !
CILEN_IFACEID
)

802 
bad
;

803 
åy
.
√g_iÁ˚id
 = 1;

804 
	`eui64_gë
(
iÁ˚id
, 
p
);

805 i‡(
go
->
ac˚±_loˇl
) {

806 
	`eui64_iszîo
(
iÁ˚id
) ||

807 
	`eui64_equÆs
(
iÁ˚id
, 
go
->
hisid
))

808 
	`eui64_magic
(
iÁ˚id
);

809 
åy
.
ourid
 = 
iÁ˚id
;

811 
no
.
√g_iÁ˚id
 = 1;

814 
p
 = 
√xt
;

818 i‡(
Àn
 != 0)

819 
bad
;

824 i‡(
f
->
°©e
 !
OPENED
)

825 *
go
 = 
åy
;

829 
bad
:

830 
	`IPV6CPDEBUG
(("ipv6cp_nakci:Ñeceived bad Nak!"));

832 
	}
}

839 
	$ùv6˝_ªjci
(
f
, 
p
, 
Àn
)

840 
fsm
 *
f
;

841 
u_ch¨
 *
p
;

842 
Àn
;

844 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

845 
u_ch¨
 
cûí
;

846 
u_sh‹t
 
cish‹t
;

847 
eui64_t
 
iÁ˚id
;

848 
ùv6˝_›ti⁄s
 
åy
;

850 
åy
 = *
go
;

856 
	#REJCIIFACEID
(
›t
, 
√g
, 
vÆ1
) \

857 i‡(
go
->
√g
 && \

858 
Àn
 >(
cûí
 = 
CILEN_IFACEID
) && \

859 
p
[1] =
cûí
 && \

860 
p
[0] =
›t
) { \

861 
Àn
 -
cûí
; \

862 
	`INCPTR
(2, 
p
); \

863 
	`eui64_gë
(
iÁ˚id
, 
p
); \

865 i‡(! 
	`eui64_equÆs
(
iÁ˚id
, 
vÆ1
)) \

866 
bad
; \

867 
åy
.
√g
 = 0; \

868 }

	)

870 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
) \

871 i‡(
go
->
√g
 && \

872 
p
[1] =
CILEN_COMPRESS
 && \

873 
Àn
 >
p
[1] && \

874 
p
[0] =
›t
) { \

875 
Àn
 -
p
[1]; \

876 
	`INCPTR
(2, 
p
); \

877 
	`GETSHORT
(
cish‹t
, 
p
); \

879 i‡(
cish‹t
 !
vÆ
) \

880 
bad
; \

881 
åy
.
√g
 = 0; \

882 }

	)

884 
	`REJCIIFACEID
(
CI_IFACEID
, 
√g_iÁ˚id
, 
go
->
ourid
);

886 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
);

891 i‡(
Àn
 != 0)

892 
bad
;

896 i‡(
f
->
°©e
 !
OPENED
)

897 *
go
 = 
åy
;

900 
bad
:

901 
	`IPV6CPDEBUG
(("ipv6cp_rejci:Ñeceived bad Reject!"));

903 
	}
}

914 
	$ùv6˝_ªqci
(
f
, 
öp
, 
Àn
, 
ªje˘_if_dißgªe
)

915 
fsm
 *
f
;

916 
u_ch¨
 *
öp
;

917 *
Àn
;

918 
ªje˘_if_dißgªe
;

920 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[
f
->
unô
];

921 
ùv6˝_›ti⁄s
 *
ho
 = &
ùv6˝_his›ti⁄s
[
f
->
unô
];

922 
ùv6˝_›ti⁄s
 *
ao
 = &
ùv6˝_Ælow›ti⁄s
[
f
->
unô
];

923 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

924 
u_ch¨
 *
cù
, *
√xt
;

925 
u_sh‹t
 
cûí
, 
côy≥
;

926 
u_sh‹t
 
cish‹t
;

927 
eui64_t
 
iÁ˚id
;

928 
rc
 = 
CONFACK
;

929 
‹c
;

930 
u_ch¨
 *
p
;

931 
u_ch¨
 *
u˝
 = 
öp
;

932 
l
 = *
Àn
;

937 
	`BZERO
(
ho
, (*ho));

942 
√xt
 = 
öp
;

943 
l
) {

944 
‹c
 = 
CONFACK
;

945 
cù
 = 
p
 = 
√xt
;

946 i‡(
l
 < 2 ||

947 
p
[1] < 2 ||

948 
p
[1] > 
l
) {

949 
	`IPV6CPDEBUG
(("ipv6cp_reqci: bad CIÜength!"));

950 
‹c
 = 
CONFREJ
;

951 
cûí
 = 
l
;

952 
l
 = 0;

953 
ídswôch
;

955 
	`GETCHAR
(
côy≥
, 
p
);

956 
	`GETCHAR
(
cûí
, 
p
);

957 
l
 -
cûí
;

958 
√xt
 +
cûí
;

960 
côy≥
) {

961 
CI_IFACEID
:

962 
	`IPV6CPDEBUG
(("ipv6cp:Ñeceived interface identifier "));

964 i‡(!
ao
->
√g_iÁ˚id
 ||

965 
cûí
 !
CILEN_IFACEID
) {

966 
‹c
 = 
CONFREJ
;

976 
	`eui64_gë
(
iÁ˚id
, 
p
);

977 
	`IPV6CPDEBUG
(("(%s)", 
	`Œv6_¡ﬂ
(
iÁ˚id
)));

978 i‡(
	`eui64_iszîo
(
iÁ˚id
Ë&&Éui64_iszîo(
go
->
ourid
)) {

979 
‹c
 = 
CONFREJ
;

982 i‡(!
	`eui64_iszîo
(
wo
->
hisid
Ë&& !wo->
ac˚±_ªmŸe
 &&

983 !
	`eui64_equÆs
(
iÁ˚id
, 
wo
->
hisid
) &&

984 
	`eui64_iszîo
(
go
->
hisid
)) {

986 
‹c
 = 
CONFNAK
;

987 
iÁ˚id
 = 
wo
->
hisid
;

988 
go
->
hisid
 = 
iÁ˚id
;

989 
	`DECPTR
((
iÁ˚id
), 
p
);

990 
	`eui64_put
(
iÁ˚id
, 
p
);

992 i‡(
	`eui64_iszîo
(
iÁ˚id
Ë|| 
	`eui64_equÆs
(iÁ˚id, 
go
->
ourid
)) {

993 
‹c
 = 
CONFNAK
;

994 i‡(
	`eui64_iszîo
(
go
->
hisid
))

995 
iÁ˚id
 = 
wo
->
hisid
;

996 
	`eui64_iszîo
(
iÁ˚id
) ||

997 
	`eui64_equÆs
(
iÁ˚id
, 
go
->
ourid
))

998 
	`eui64_magic
(
iÁ˚id
);

999 
go
->
hisid
 = 
iÁ˚id
;

1000 
	`DECPTR
((
iÁ˚id
), 
p
);

1001 
	`eui64_put
(
iÁ˚id
, 
p
);

1004 
ho
->
√g_iÁ˚id
 = 1;

1005 
ho
->
hisid
 = 
iÁ˚id
;

1008 
CI_COMPRESSTYPE
:

1009 
	`IPV6CPDEBUG
(("ipv6cp:Ñeceived COMPRESSTYPE "));

1010 i‡(!
ao
->
√g_vj
 ||

1011 (
cûí
 !
CILEN_COMPRESS
)) {

1012 
‹c
 = 
CONFREJ
;

1015 
	`GETSHORT
(
cish‹t
, 
p
);

1016 
	`IPV6CPDEBUG
(("(%d)", 
cish‹t
));

1018 #ifde‡
IPV6CP_COMP


1019 i‡(!(
cish‹t
 =
IPV6CP_COMP
)) {

1020 
‹c
 = 
CONFREJ
;

1024 
ho
->
√g_vj
 = 1;

1025 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1028 
‹c
 = 
CONFREJ
;

1033 
‹c
 = 
CONFREJ
;

1037 
ídswôch
:

1038 
	`IPV6CPDEBUG
((" (%s)\n", 
	`CODENAME
(
‹c
)));

1040 i‡(
‹c
 =
CONFACK
 &&

1041 
rc
 !
CONFACK
)

1044 i‡(
‹c
 =
CONFNAK
) {

1045 i‡(
ªje˘_if_dißgªe
)

1046 
‹c
 = 
CONFREJ
;

1048 i‡(
rc
 =
CONFREJ
)

1050 i‡(
rc
 =
CONFACK
) {

1051 
rc
 = 
CONFNAK
;

1052 
u˝
 = 
öp
;

1057 i‡(
‹c
 =
CONFREJ
 &&

1058 
rc
 !
CONFREJ
) {

1059 
rc
 = 
CONFREJ
;

1060 
u˝
 = 
öp
;

1064 i‡(
u˝
 !
cù
)

1065 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1068 
	`INCPTR
(
cûí
, 
u˝
);

1078 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_iÁ˚id
 &&

1079 
wo
->
ªq_iÁ˚id
 && !
ªje˘_if_dißgªe
) {

1080 i‡(
rc
 =
CONFACK
) {

1081 
rc
 = 
CONFNAK
;

1082 
u˝
 = 
öp
;

1083 
wo
->
ªq_iÁ˚id
 = 0;

1085 
	`PUTCHAR
(
CI_IFACEID
, 
u˝
);

1086 
	`PUTCHAR
(
CILEN_IFACEID
, 
u˝
);

1087 
	`eui64_put
(
wo
->
hisid
, 
u˝
);

1090 *
Àn
 = 
u˝
 - 
öp
;

1091 
	`IPV6CPDEBUG
(("ùv6˝:Ñëu∫ög C⁄figuª-%s", 
	`CODENAME
(
rc
)));

1092  (
rc
);

1093 
	}
}

1101 
	$ùv6_check_›ti⁄s
()

1103 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[0];

1105 i‡(!
ùv6˝_¥Ÿít
.
íabÀd_Êag
)

1112 i‡((
wo
->
u£_≥rsi°ít
Ë&& (!wo->
›t_loˇl
Ë&& (!wo->
›t_ªmŸe
)) {

1123 i‡(
	`ëhî_to_eui64
(&
wo
->
ourid
)) {

1124 
wo
->
›t_loˇl
 = 1;

1128 i‡(!
wo
->
›t_loˇl
) {

1129 i‡(
wo
->
u£_ù
 && 
	`eui64_iszîo
(wo->
ourid
)) {

1130 
	`eui64_£éo32
(
wo
->
ourid
, 
	`¡ohl
(
ù˝_w™t›ti⁄s
[0].
ouøddr
));

1131 i‡(!
	`eui64_iszîo
(
wo
->
ourid
))

1132 
wo
->
›t_loˇl
 = 1;

1135 
	`eui64_iszîo
(
wo
->
ourid
))

1136 
	`eui64_magic
(
wo
->
ourid
);

1139 i‡(!
wo
->
›t_ªmŸe
) {

1140 i‡(
wo
->
u£_ù
 && 
	`eui64_iszîo
(wo->
hisid
)) {

1141 
	`eui64_£éo32
(
wo
->
hisid
, 
	`¡ohl
(
ù˝_w™t›ti⁄s
[0].
hißddr
));

1142 i‡(!
	`eui64_iszîo
(
wo
->
hisid
))

1143 
wo
->
›t_ªmŸe
 = 1;

1147 i‡(
dem™d
 && (
	`eui64_iszîo
(
wo
->
ourid
Ë||Éui64_iszîo(wo->
hisid
))) {

1148 
	`›ti⁄_îr‹
("local/remote LLáddressÑequired for demand-dialling\n");

1149 
	`exô
(
EXIT_OPTION_ERROR
);

1151 
	}
}

1159 
	$ùv6_dem™d_c⁄f
(
u
)

1160 
u
;

1162 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[
u
];

1164 i‡(!
	`sif6up
(
u
))

1166 i‡(!
	`sif6addr
(
u
, 
wo
->
ourid
, wo->
hisid
))

1168 #i‡!
	`deföed
(
__löux__
Ë&& !(deföed(
SVR4
Ë&& (deföed(
SNI
Ë|| deföed(
__USLC__
)))

1169 i‡(!
	`sifup
(
u
))

1172 i‡(!
	`si‚pmode
(
u
, 
PPP_IPV6
, 
NPMODE_QUEUE
))

1174 i‡(
wo
->
deÁu…_rouã
)

1175 i‡(
	`sif6deÁu…rouã
(
u
, 
wo
->
ourid
, wo->
hisid
))

1176 
deÁu…_rouã_£t
[
u
] = 1;

1178 
	`nŸi˚
("ipv6_demand_conf");

1179 
	`nŸi˚
("loˇ» LLáddªs†%s", 
	`Œv6_¡ﬂ
(
wo
->
ourid
));

1180 
	`nŸi˚
("ªmŸêLLáddªs†%s", 
	`Œv6_¡ﬂ
(
wo
->
hisid
));

1183 
	}
}

1192 
	$ùv6˝_up
(
f
)

1193 
fsm
 *
f
;

1195 
ùv6˝_›ti⁄s
 *
ho
 = &
ùv6˝_his›ti⁄s
[
f
->
unô
];

1196 
ùv6˝_›ti⁄s
 *
go
 = &
ùv6˝_gŸ›ti⁄s
[
f
->
unô
];

1197 
ùv6˝_›ti⁄s
 *
wo
 = &
ùv6˝_w™t›ti⁄s
[
f
->
unô
];

1199 
	`IPV6CPDEBUG
(("ipv6cp: up"));

1204 i‡(!
ho
->
√g_iÁ˚id
)

1205 
ho
->
hisid
 = 
wo
->hisid;

1207 if(!
no_iÁ˚id_√g
) {

1208 i‡(
	`eui64_iszîo
(
ho
->
hisid
)) {

1209 
	`îr‹
("CouldÇot determineÑemote LLáddress");

1210 
	`ùv6˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote LLáddress");

1213 i‡(
	`eui64_iszîo
(
go
->
ourid
)) {

1214 
	`îr‹
("CouldÇot determineÜocal LLáddress");

1215 
	`ùv6˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal LLáddress");

1218 i‡(
	`eui64_equÆs
(
go
->
ourid
, 
ho
->
hisid
)) {

1219 
	`îr‹
("localándÑemote LLáddressesáreÉqual");

1220 
	`ùv6˝_˛o£
(
f
->
unô
, "localándÑemote LLáddressesáreÉqual");

1224 
	`s¸ùt_£ãnv
("LLLOCAL", 
	`Œv6_¡ﬂ
(
go
->
ourid
), 0);

1225 
	`s¸ùt_£ãnv
("LLREMOTE", 
	`Œv6_¡ﬂ
(
ho
->
hisid
), 0);

1227 #ifde‡
IPV6CP_COMP


1229 
	`sif6comp
(
f
->
unô
, 
ho
->
√g_vj
);

1237 i‡(
dem™d
) {

1238 i‡(! 
	`eui64_equÆs
(
go
->
ourid
, 
wo
->ourid) ||

1239 ! 
	`eui64_equÆs
(
ho
->
hisid
, 
wo
->hisid)) {

1240 i‡(! 
	`eui64_equÆs
(
go
->
ourid
, 
wo
->ourid))

1241 
	`w¨n
("Local LLáddress changedÅo %s",

1242 
	`Œv6_¡ﬂ
(
go
->
ourid
));

1243 i‡(! 
	`eui64_equÆs
(
ho
->
hisid
, 
wo
->hisid))

1244 
	`w¨n
("Remote LLáddress changedÅo %s",

1245 
	`Œv6_¡ﬂ
(
ho
->
hisid
));

1246 
	`ùv6˝_˛ór_addrs
(
f
->
unô
, 
go
->
ourid
, 
ho
->
hisid
);

1249 i‡(!
	`sif6addr
(
f
->
unô
, 
go
->
ourid
, 
ho
->
hisid
)) {

1250 i‡(
debug
)

1251 
	`w¨n
("sif6addr failed");

1252 
	`ùv6˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1257 i‡(
ùv6˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
)

1258 i‡(
	`sif6deÁu…rouã
(
f
->
unô
, 
go
->
ourid
, 
ho
->
hisid
))

1259 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1261 
	`dem™d_ªxmô
(
PPP_IPV6
);

1262 
	`si‚pmode
(
f
->
unô
, 
PPP_IPV6
, 
NPMODE_PASS
);

1266 i‡(!
	`sif6up
(
f
->
unô
)) {

1267 i‡(
debug
)

1268 
	`w¨n
("sif6up failed (IPV6)");

1269 
	`ùv6˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1273 i‡(!
	`sif6addr
(
f
->
unô
, 
go
->
ourid
, 
ho
->
hisid
)) {

1274 i‡(
debug
)

1275 
	`w¨n
("sif6addr failed");

1276 
	`ùv6˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1279 
	`si‚pmode
(
f
->
unô
, 
PPP_IPV6
, 
NPMODE_PASS
);

1282 i‡(
ùv6˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
)

1283 i‡(
	`sif6deÁu…rouã
(
f
->
unô
, 
go
->
ourid
, 
ho
->
hisid
))

1284 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1286 
	`nŸi˚
("loˇ» LLáddªs†%s", 
	`Œv6_¡ﬂ
(
go
->
ourid
));

1287 
	`nŸi˚
("ªmŸêLLáddªs†%s", 
	`Œv6_¡ﬂ
(
ho
->
hisid
));

1290 
	`≈_up
(
f
->
unô
, 
PPP_IPV6
);

1291 
ùv6˝_is_up
 = 1;

1293 
	`nŸify
(
ùv6_up_nŸifõr
, 0);

1294 i‡(
ùv6_up_hook
)

1295 
	`ùv6_up_hook
();

1301 i‡(
ùv6˝_s¸ùt_°©e
 =
s_down
 && 
ùv6˝_s¸ùt_pid
 == 0) {

1302 
ùv6˝_s¸ùt_°©e
 = 
s_up
;

1303 
	`ùv6˝_s¸ùt
(
_PATH_IPV6UP
);

1305 
	}
}

1315 
	$ùv6˝_down
(
f
)

1316 
fsm
 *
f
;

1318 
	`IPV6CPDEBUG
(("ipv6cp: down"));

1319 
	`upd©e_lök_°©s
(
f
->
unô
);

1320 
	`nŸify
(
ùv6_down_nŸifõr
, 0);

1321 i‡(
ùv6_down_hook
)

1322 
	`ùv6_down_hook
();

1323 i‡(
ùv6˝_is_up
) {

1324 
ùv6˝_is_up
 = 0;

1325 
	`≈_down
(
f
->
unô
, 
PPP_IPV6
);

1327 #ifde‡
IPV6CP_COMP


1328 
	`sif6comp
(
f
->
unô
, 0);

1335 i‡(
dem™d
) {

1336 
	`si‚pmode
(
f
->
unô
, 
PPP_IPV6
, 
NPMODE_QUEUE
);

1338 
	`si‚pmode
(
f
->
unô
, 
PPP_IPV6
, 
NPMODE_DROP
);

1339 #i‡!
	`deföed
(
__löux__
Ë&& !(deföed(
SVR4
Ë&& (deföed(
SNI
Ë|| deföed(
__USLC
)))

1340 
	`sif6down
(
f
->
unô
);

1342 
	`ùv6˝_˛ór_addrs
(
f
->
unô
,

1343 
ùv6˝_gŸ›ti⁄s
[
f
->
unô
].
ourid
,

1344 
ùv6˝_his›ti⁄s
[
f
->
unô
].
hisid
);

1345 #i‡
	`deföed
(
__löux__
)

1346 
	`sif6down
(
f
->
unô
);

1347 #ñi‡
	`deföed
(
SVR4
Ë&& (deföed(
SNI
Ë|| deföed(
__USLC
))

1348 
	`sifdown
(
f
->
unô
);

1353 i‡(
ùv6˝_s¸ùt_°©e
 =
s_up
 && 
ùv6˝_s¸ùt_pid
 == 0) {

1354 
ùv6˝_s¸ùt_°©e
 = 
s_down
;

1355 
	`ùv6˝_s¸ùt
(
_PATH_IPV6DOWN
);

1357 
	}
}

1365 
	$ùv6˝_˛ór_addrs
(
unô
, 
ourid
, 
hisid
)

1366 
unô
;

1367 
eui64_t
 
ourid
;

1368 
eui64_t
 
hisid
;

1370 
	`cif6addr
(
unô
, 
ourid
, 
hisid
);

1371 
	}
}

1378 
	$ùv6˝_föished
(
f
)

1379 
fsm
 *
f
;

1381 
	`≈_föished
(
f
->
unô
, 
PPP_IPV6
);

1382 
	}
}

1390 
	$ùv6˝_s¸ùt_d⁄e
(
¨g
)

1391 *
¨g
;

1393 
ùv6˝_s¸ùt_pid
 = 0;

1394 
ùv6˝_s¸ùt_°©e
) {

1395 
s_up
:

1396 i‡(
ùv6˝_fsm
[0].
°©e
 !
OPENED
) {

1397 
ùv6˝_s¸ùt_°©e
 = 
s_down
;

1398 
	`ùv6˝_s¸ùt
(
_PATH_IPV6DOWN
);

1401 
s_down
:

1402 i‡(
ùv6˝_fsm
[0].
°©e
 =
OPENED
) {

1403 
ùv6˝_s¸ùt_°©e
 = 
s_up
;

1404 
	`ùv6˝_s¸ùt
(
_PATH_IPV6UP
);

1408 
	}
}

1416 
	$ùv6˝_s¸ùt
(
s¸ùt
)

1417 *
s¸ùt
;

1419 
°r•ìd
[32], 
°æoˇl
[32], 
°ºemŸe
[32];

1420 *
¨gv
[8];

1422 
	`•rötf
(
°r•ìd
, "%d", 
baud_øã
);

1423 
	`°r˝y
(
°æoˇl
, 
	`Œv6_¡ﬂ
(
ùv6˝_gŸ›ti⁄s
[0].
ourid
));

1424 
	`°r˝y
(
°ºemŸe
, 
	`Œv6_¡ﬂ
(
ùv6˝_his›ti⁄s
[0].
hisid
));

1426 
¨gv
[0] = 
s¸ùt
;

1427 
¨gv
[1] = 
i‚ame
;

1428 
¨gv
[2] = 
dev«m
;

1429 
¨gv
[3] = 
°r•ìd
;

1430 
¨gv
[4] = 
°æoˇl
;

1431 
¨gv
[5] = 
°ºemŸe
;

1432 
¨gv
[6] = 
ù∑øm
;

1433 
¨gv
[7] = 
NULL
;

1435 
ùv6˝_s¸ùt_pid
 = 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
ùv6˝_s¸ùt_d⁄e
,

1436 
NULL
, 0);

1437 
	}
}

1442 *
	gùv6˝_codíames
[] = {

1448 
	$ùv6˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

1449 
u_ch¨
 *
p
;

1450 
∂í
;

1451 (*
¥öãr
Ë
	`__P
((*, *, ...));

1452 *
¨g
;

1454 
code
, 
id
, 
Àn
, 
ﬁí
;

1455 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1456 
u_sh‹t
 
cish‹t
;

1457 
eui64_t
 
iÁ˚id
;

1459 i‡(
∂í
 < 
HEADERLEN
)

1461 
p°¨t
 = 
p
;

1462 
	`GETCHAR
(
code
, 
p
);

1463 
	`GETCHAR
(
id
, 
p
);

1464 
	`GETSHORT
(
Àn
, 
p
);

1465 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

1468 i‡(
code
 >1 && codê<(
ùv6˝_codíames
) / (*))

1469 
	`¥öãr
(
¨g
, " %s", 
ùv6˝_codíames
[
code
-1]);

1471 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1472 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1473 
Àn
 -
HEADERLEN
;

1474 
code
) {

1475 
CONFREQ
:

1476 
CONFACK
:

1477 
CONFNAK
:

1478 
CONFREJ
:

1480 
Àn
 >= 2) {

1481 
	`GETCHAR
(
code
, 
p
);

1482 
	`GETCHAR
(
ﬁí
, 
p
);

1483 
p
 -= 2;

1484 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1487 
	`¥öãr
(
¨g
, " <");

1488 
Àn
 -
ﬁí
;

1489 
›ãnd
 = 
p
 + 
ﬁí
;

1490 
code
) {

1491 
CI_COMPRESSTYPE
:

1492 i‡(
ﬁí
 >
CILEN_COMPRESS
) {

1493 
p
 += 2;

1494 
	`GETSHORT
(
cish‹t
, 
p
);

1495 
	`¥öãr
(
¨g
, "compress ");

1496 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1499 
CI_IFACEID
:

1500 i‡(
ﬁí
 =
CILEN_IFACEID
) {

1501 
p
 += 2;

1502 
	`eui64_gë
(
iÁ˚id
, 
p
);

1503 
	`¥öãr
(
¨g
, "add∏%s", 
	`Œv6_¡ﬂ
(
iÁ˚id
));

1507 
p
 < 
›ãnd
) {

1508 
	`GETCHAR
(
code
, 
p
);

1509 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1511 
	`¥öãr
(
¨g
, ">");

1515 
TERMACK
:

1516 
TERMREQ
:

1517 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1518 
	`¥öãr
(
¨g
, " ");

1519 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1520 
p
 +
Àn
;

1521 
Àn
 = 0;

1527 ; 
Àn
 > 0; --len) {

1528 
	`GETCHAR
(
code
, 
p
);

1529 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1532  
p
 - 
p°¨t
;

1533 
	}
}

1540 
	#IP6_HDRLEN
 40

	)

1541 
	#IP6_NHDR_FRAG
 44

	)

1542 
	#TCP_HDRLEN
 20

	)

1543 
	#TH_FIN
 0x01

	)

1550 
	#gë_ù6nh
(
x
Ë(((*)(x))[6])

	)

1551 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1552 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1555 
	$ùv6_a˘ive_pkt
(
pkt
, 
Àn
)

1556 
u_ch¨
 *
pkt
;

1557 
Àn
;

1559 
u_ch¨
 *
t˝
;

1561 
Àn
 -
PPP_HDRLEN
;

1562 
pkt
 +
PPP_HDRLEN
;

1563 i‡(
Àn
 < 
IP6_HDRLEN
)

1565 i‡(
	`gë_ù6nh
(
pkt
Ë=
IP6_NHDR_FRAG
)

1567 i‡(
	`gë_ù6nh
(
pkt
Ë!
IPPROTO_TCP
)

1569 i‡(
Àn
 < 
IP6_HDRLEN
 + 
TCP_HDRLEN
)

1571 
t˝
 = 
pkt
 + 
IP6_HDRLEN
;

1572 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
IP6_HDRLEN
 + 
	`gë_t˝off
(tcp) * 4)

1575 
	}
}

	@pppd/ipv6cp.h

144 
	#CI_IFACEID
 1

	)

145 
	#CI_COMPRESSTYPE
 2

	)

150 
	sùv6˝_›ti⁄s
 {

151 
	m√g_iÁ˚id
;

152 
	mªq_iÁ˚id
;

153 
	mdeÁu…_rouã
;

154 
	mac˚±_loˇl
;

155 
	mac˚±_ªmŸe
;

156 
	m›t_loˇl
;

157 
	m›t_ªmŸe
;

158 
	mu£_ù
;

159 
	mu£_≥rsi°ít
;

160 
	m√g_vj
;

161 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

162 
eui64_t
 
	mourid
, 
	mhisid
;

163 } 
	tùv6˝_›ti⁄s
;

165 
fsm
 
ùv6˝_fsm
[];

166 
ùv6˝_›ti⁄s
 
ùv6˝_w™t›ti⁄s
[];

167 
ùv6˝_›ti⁄s
 
ùv6˝_gŸ›ti⁄s
[];

168 
ùv6˝_›ti⁄s
 
ùv6˝_Ælow›ti⁄s
[];

169 
ùv6˝_›ti⁄s
 
ùv6˝_his›ti⁄s
[];

171 
¥Ÿít
 
ùv6˝_¥Ÿít
;

	@pppd/ipxcp.c

43 #ifde‡
IPX_CHANGE


45 
	#RCSID
 "$Id: ipx˝.c,v 1.24 2005/08/25 23:59:34Öaulu†Ex∞$"

	)

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<uni°d.h
>

54 
	~<˘y≥.h
>

55 
	~<sys/ty≥s.h
>

56 
	~<sys/sockë.h
>

57 
	~<√töë/ö.h
>

59 
	~"µpd.h
"

60 
	~"fsm.h
"

61 
	~"ùx˝.h
"

62 
	~"∑th«mes.h
"

63 
	~"magic.h
"

67 
ùx˝_›ti⁄s
 
	gùx˝_w™t›ti⁄s
[
NUM_PPP
];

68 
ùx˝_›ti⁄s
 
	gùx˝_gŸ›ti⁄s
[
NUM_PPP
];

69 
ùx˝_›ti⁄s
 
	gùx˝_Ælow›ti⁄s
[
NUM_PPP
];

70 
ùx˝_›ti⁄s
 
	gùx˝_his›ti⁄s
[
NUM_PPP
];

72 
	#wo
 (&
ùx˝_w™t›ti⁄s
[0])

	)

73 
	#ao
 (&
ùx˝_Ælow›ti⁄s
[0])

	)

74 
	#go
 (&
ùx˝_gŸ›ti⁄s
[0])

	)

75 
	#ho
 (&
ùx˝_his›ti⁄s
[0])

	)

80 
ùx˝_ª£tci
 
__P
((
fsm
 *));

81 
ùx˝_cûí
 
__P
((
fsm
 *));

82 
ùx˝_addci
 
__P
((
fsm
 *, 
u_ch¨
 *, *));

83 
ùx˝_ackci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

84 
ùx˝_«kci
 
__P
((
fsm
 *, 
u_ch¨
 *, , ));

85 
ùx˝_ªjci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

86 
ùx˝_ªqci
 
__P
((
fsm
 *, 
u_ch¨
 *, *, ));

87 
ùx˝_up
 
__P
((
fsm
 *));

88 
ùx˝_down
 
__P
((
fsm
 *));

89 
ùx˝_föished
 
__P
((
fsm
 *));

90 
ùx˝_s¸ùt
 
__P
((
fsm
 *, *));

92 
fsm
 
	gùx˝_fsm
[
NUM_PPP
];

94 
fsm_ˇŒbacks
 
	gùx˝_ˇŒbacks
 = {

95 
ùx˝_ª£tci
,

96 
ùx˝_cûí
,

97 
ùx˝_addci
,

98 
ùx˝_ackci
,

99 
ùx˝_«kci
,

100 
ùx˝_ªjci
,

101 
ùx˝_ªqci
,

102 
ùx˝_up
,

103 
ùx˝_down
,

104 
NULL
,

105 
ùx˝_föished
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

115 
£tùxnode
 
__P
((**));

116 
¥ötùxnode
 
__P
((
›ti⁄_t
 *,

118 
£tùx«me
 
	`__P
((**));

120 
›ti⁄_t
 
ùx˝_›ti⁄_li°
[] = {

121 { "ùx", 
o_boﬁ
, &
ùx˝_¥Ÿít
.
íabÀd_Êag
,

122 "E«bÀ IPXCP (™d IPX)", 
OPT_PRIO
 | 1 },

123 { "+ùx", 
o_boﬁ
, &
ùx˝_¥Ÿít
.
íabÀd_Êag
,

124 "E«bÀ IPXCP (™d IPX)", 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 1 },

125 { "noùx", 
o_boﬁ
, &
ùx˝_¥Ÿít
.
íabÀd_Êag
,

126 "DißbÀ IPXCP (™d IPX)", 
OPT_PRIOSUB
 },

127 { "-ùx", 
o_boﬁ
, &
ùx˝_¥Ÿít
.
íabÀd_Êag
,

128 "DißbÀ IPXCP (™d IPX)", 
OPT_PRIOSUB
 | 
OPT_ALIAS
 },

130 { "ùx-√tw‹k", 
o_uöt32
, &
ùx˝_w™t›ti⁄s
[0].
our_√tw‹k
,

131 "Së ou∏IPXÇëw‹kÇumbî", 
OPT_PRIO
, &
ùx˝_w™t›ti⁄s
[0].
√g_¬
 },

133 { "ùx˝-ac˚±-√tw‹k", 
o_boﬁ
, &
ùx˝_w™t›ti⁄s
[0].
ac˚±_√tw‹k
,

135 &
ùx˝_Ælow›ti⁄s
[0].
ac˚±_√tw‹k
 },

137 { "ùx-node", 
o_•ecül
, (*)
£tùxnode
,

138 "Së IPXÇodênumbî", 
OPT_A2PRINTER
, (*)
¥ötùxnode
 },

140 { "ùx˝-ac˚±-loˇl", 
o_boﬁ
, &
ùx˝_w™t›ti⁄s
[0].
ac˚±_loˇl
,

142 &
ùx˝_Ælow›ti⁄s
[0].
ac˚±_loˇl
 },

144 { "ùx˝-ac˚±-ªmŸe", 
o_boﬁ
, &
ùx˝_w™t›ti⁄s
[0].
ac˚±_ªmŸe
,

146 &
ùx˝_Ælow›ti⁄s
[0].
ac˚±_ªmŸe
 },

148 { "ùx-routög", 
o_öt
, &
ùx˝_w™t›ti⁄s
[0].
rouãr
,

149 "Së IPXÑoutögÖrŸÿnumbî", 
OPT_PRIO
,

150 &
ùx˝_w™t›ti⁄s
[0].
√g_rouãr
 },

152 { "ùx-rouãr-«me", 
o_•ecül
, 
£tùx«me
,

153 "Së IPXÑouã∏«me", 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
,

154 &
ùx˝_w™t›ti⁄s
[0].
«me
 },

156 { "ùx˝-ª°¨t", 
o_öt
, &
ùx˝_fsm
[0].
timeouâime
,

157 "SëÅimeouàf‹ IPXCP", 
OPT_PRIO
 },

158 { "ùx˝-max-ãrmö©e", 
o_öt
, &
ùx˝_fsm
[0].
maxãrmå™smôs
,

159 "Së max #xmô†f‹ IPXCPÅîm-ªqs", 
OPT_PRIO
 },

160 { "ùx˝-max-c⁄figuª", 
o_öt
, &
ùx˝_fsm
[0].
maxc⁄‰eqå™smôs
,

161 "Së max #xmô†f‹ IPXCP c⁄f-ªqs", 
OPT_PRIO
 },

162 { "ùx˝-max-Áûuª", 
o_öt
, &
ùx˝_fsm
[0].
max«klo›s
,

163 "Së max #c⁄f-«k†f‹ IPXCP", 
OPT_PRIO
 },

165 { 
NULL
 }

166 
	}
};

172 
ùx˝_öô
 
__P
(());

173 
ùx˝_›í
 
__P
(());

174 
ùx˝_˛o£
 
__P
((, *));

175 
ùx˝_lowîup
 
__P
(());

176 
ùx˝_lowîdown
 
__P
(());

177 
ùx˝_öput
 
__P
((, 
u_ch¨
 *, ));

178 
ùx˝_¥Ÿªj
 
__P
(());

179 
ùx˝_¥öçkt
 
__P
((
u_ch¨
 *, ,

180 (*Ë
	`__P
((*, *, ...)), *));

182 
¥Ÿít
 
ùx˝_¥Ÿít
 = {

183 
PPP_IPXCP
,

184 
ùx˝_öô
,

185 
ùx˝_öput
,

186 
ùx˝_¥Ÿªj
,

187 
ùx˝_lowîup
,

188 
ùx˝_lowîdown
,

189 
ùx˝_›í
,

190 
ùx˝_˛o£
,

191 
ùx˝_¥öçkt
,

192 
NULL
,

196 
ùx˝_›ti⁄_li°
,

197 
NULL
,

198 
NULL
,

199 
NULL


200 
	}
};

206 
	#CILEN_VOID
 2

	)

207 
	#CILEN_COMPLETE
 2

	)

208 
	#CILEN_NETN
 6

	)

209 
	#CILEN_NODEN
 8

	)

210 
	#CILEN_PROTOCOL
 4

	)

211 
	#CILEN_NAME
 3

	)

212 
	#CILEN_COMPRESS
 4

	)

214 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

215 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

217 
	gùx˝_is_up
;

219 *
ùx_¡ﬂ
 
__P
((
u_öt32_t
));

222 
	#NODE
(
ba£
Ëba£[0], ba£[1], ba£[2], ba£[3], ba£[4], ba£[5]

	)

225 
	#BIT
(
num
Ë(1 << (num))

	)

232 
	$to_exã∫Æ
(
öã∫Æ
)

233 
öã∫Æ
;

235 
exã∫Æ
;

237 i‡(
öã∫Æ
 & 
	`BIT
(
IPX_NONE
) )

238 
exã∫Æ
 = 
IPX_NONE
;

240 
exã∫Æ
 = 
RIP_SAP
;

242  
exã∫Æ
;

243 
	}
}

250 
	$ùx_¡ﬂ
(
ùxaddr
)

251 
u_öt32_t
 
ùxaddr
;

253 
b
[64];

254 
	`¶¥ötf
(
b
, (b), "%x", 
ùxaddr
);

255  
b
;

256 
	}
}

259 
u_ch¨
 *

260 
	$£tùxnodevÆue
(
§c
,
d°
)

261 
u_ch¨
 *
§c
, *
d°
;

263 
ödx
;

264 
ôem
;

267 i‡(!
	`isxdigô
 (*
§c
))

270 
ödx
 = 0; indx < 5; ++indx) {

271 
d°
[
ödx
] <<= 4;

272 
d°
[
ödx
] |= (dst[indx + 1] >> 4) & 0x0F;

275 
ôem
 = 
	`touµî
 (*
§c
) - '0';

276 i‡(
ôem
 > 9)

277 
ôem
 -= 7;

279 
d°
[5] = (d°[5] << 4Ë| 
ôem
;

280 ++
§c
;

282  
§c
;

283 
	}
}

285 
	gùx_¥io_our
, 
	gùx_¥io_his
;

288 
	$£tùxnode
(
¨gv
)

289 **
¨gv
;

291 
u_ch¨
 *
íd
;

292 
have_his
 = 0;

293 
u_ch¨
 
our_node
[6];

294 
u_ch¨
 
his_node
[6];

296 
	`mem£t
 (
our_node
, 0, 6);

297 
	`mem£t
 (
his_node
, 0, 6);

299 
íd
 = 
	`£tùxnodevÆue
 (*
¨gv
, 
our_node
);

300 i‡(*
íd
 == ':') {

301 
have_his
 = 1;

302 
íd
 = 
	`£tùxnodevÆue
 (++íd, 
his_node
);

305 i‡(*
íd
 == '\0') {

306 
ùx˝_w™t›ti⁄s
[0].
√g_node
 = 1;

307 i‡(
›ti⁄_¥i‹ôy
 >
ùx_¥io_our
) {

308 
	`mem˝y
(&
ùx˝_w™t›ti⁄s
[0].
our_node
[0], our_node, 6);

309 
ùx_¥io_our
 = 
›ti⁄_¥i‹ôy
;

311 i‡(
have_his
 && 
›ti⁄_¥i‹ôy
 >
ùx_¥io_his
) {

312 
	`mem˝y
(&
ùx˝_w™t›ti⁄s
[0].
his_node
[0], his_node, 6);

313 
ùx_¥io_his
 = 
›ti⁄_¥i‹ôy
;

318 
	`›ti⁄_îr‹
("övÆidÖ¨amëî '%s' f‹ ipx-nodê›ti⁄", *
¨gv
);

320 
	}
}

323 
	$¥ötùxnode
(
›t
, 
¥öãr
, 
¨g
)

324 
›ti⁄_t
 *
›t
;

325 (*
¥öãr
Ë
	`__P
((*, *, ...));

326 *
¨g
;

328 *
p
;

330 
p
 = 
ùx˝_w™t›ti⁄s
[0].
our_node
;

331 i‡(
ùx_¥io_our
)

332 
	`¥öãr
(
¨g
, "%.2x%.2x%.2x%.2x%.2x%.2x",

333 
p
[0],Ö[1],Ö[2],Ö[3],Ö[4],Ö[5]);

334 
	`¥öãr
(
¨g
, ":");

335 
p
 = 
ùx˝_w™t›ti⁄s
[0].
his_node
;

336 i‡(
ùx_¥io_his
)

337 
	`¥öãr
(
¨g
, "%.2x%.2x%.2x%.2x%.2x%.2x",

338 
p
[0],Ö[1],Ö[2],Ö[3],Ö[4],Ö[5]);

339 
	}
}

342 
	$£tùx«me
 (
¨gv
)

343 **
¨gv
;

345 
u_ch¨
 *
de°
 = 
ùx˝_w™t›ti⁄s
[0].
«me
;

346 *
§c
 = *
¨gv
;

347 
cou¡
;

348 
ch
;

350 
ùx˝_w™t›ti⁄s
[0].
√g_«me
 = 1;

351 
ùx˝_Ælow›ti⁄s
[0].
√g_«me
 = 1;

352 
	`mem£t
 (
de°
, '\0',  (
ùx˝_w™t›ti⁄s
[0].
«me
));

354 
cou¡
 = 0;

355 *
§c
) {

356 
ch
 = *
§c
++;

357 i‡(! 
	`iß um
 (
ch
) && ch != '_') {

358 
	`›ti⁄_îr‹
("IPXÑouterÇame must beálphanumeric or _");

362 i‡(
cou¡
 > (
ùx˝_w™t›ti⁄s
[0].
«me
) - 1) {

363 
	`›ti⁄_îr‹
("IPXÑouterÇame isÜimitedÅo %d characters",

364  (
ùx˝_w™t›ti⁄s
[0].
«me
) - 1);

368 
de°
[
cou¡
++] = 
	`touµî
 (
ch
);

370 
de°
[
cou¡
] = 0;

373 
	}
}

379 
	$ùx˝_öô
(
unô
)

380 
unô
;

382 
fsm
 *
f
 = &
ùx˝_fsm
[
unô
];

384 
f
->
unô
 = unit;

385 
f
->
¥Ÿocﬁ
 = 
PPP_IPXCP
;

386 
f
->
ˇŒbacks
 = &
ùx˝_ˇŒbacks
;

387 
	`fsm_öô
(&
ùx˝_fsm
[
unô
]);

389 
	`mem£t
 (
wo
->
«me
, 0,  (wo->name));

390 
	`mem£t
 (
wo
->
our_node
, 0,  (wo->our_node));

391 
	`mem£t
 (
wo
->
his_node
, 0,  (wo->his_node));

393 
wo
->
√g_¬
 = 1;

394 
wo
->
√g_com∂ëe
 = 1;

395 
wo
->
√tw‹k
 = 0;

397 
ao
->
√g_node
 = 1;

398 
ao
->
√g_¬
 = 1;

399 
ao
->
√g_«me
 = 1;

400 
ao
->
√g_com∂ëe
 = 1;

401 
ao
->
√g_rouãr
 = 1;

403 
ao
->
ac˚±_loˇl
 = 0;

404 
ao
->
ac˚±_ªmŸe
 = 0;

405 
ao
->
ac˚±_√tw‹k
 = 0;

407 
wo
->
åõd_rù
 = 0;

408 
wo
->
åõd_∆•
 = 0;

409 
	}
}

416 
	$c›y_node
 (
§c
, 
d°
)

417 
u_ch¨
 *
§c
, *
d°
;

419 
	`mem˝y
 (
d°
, 
§c
,  (
ùx˝_w™t›ti⁄s
[0].
our_node
));

420 
	}
}

427 
	$com∑ª_node
 (
§c
, 
d°
)

428 
u_ch¨
 *
§c
, *
d°
;

430  
	`memcmp
 (
d°
, 
§c
,  (
ùx˝_w™t›ti⁄s
[0].
our_node
)) == 0;

431 
	}
}

438 
	$zîo_node
 (
node
)

439 
u_ch¨
 *
node
;

441 
ödx
;

442 
ödx
 = 0; indx <  (
ùx˝_w™t›ti⁄s
[0].
our_node
); ++indx)

443 i‡(
node
 [
ödx
] != 0)

446 
	}
}

453 
	$öc_node
 (
node
)

454 
u_ch¨
 *
node
;

456 
u_ch¨
 *
ouç
;

457 
u_öt32_t
 
magic_num
;

459 
ouç
 = 
node
;

460 
magic_num
 = 
	`magic
();

461 *
ouç
++ = '\0';

462 *
ouç
++ = '\0';

463 
	`PUTLONG
 (
magic_num
, 
ouç
);

464 
	}
}

470 
	$ùx˝_›í
(
unô
)

471 
unô
;

473 
	`fsm_›í
(&
ùx˝_fsm
[
unô
]);

474 
	}
}

480 
	$ùx˝_˛o£
(
unô
, 
ªas⁄
)

481 
unô
;

482 *
ªas⁄
;

484 
	`fsm_˛o£
(&
ùx˝_fsm
[
unô
], 
ªas⁄
);

485 
	}
}

492 
	$ùx˝_lowîup
(
unô
)

493 
unô
;

495 
	`fsm_lowîup
(&
ùx˝_fsm
[
unô
]);

496 
	}
}

503 
	$ùx˝_lowîdown
(
unô
)

504 
unô
;

506 
	`fsm_lowîdown
(&
ùx˝_fsm
[
unô
]);

507 
	}
}

514 
	$ùx˝_öput
(
unô
, 
p
, 
Àn
)

515 
unô
;

516 
u_ch¨
 *
p
;

517 
Àn
;

519 
	`fsm_öput
(&
ùx˝_fsm
[
unô
], 
p
, 
Àn
);

520 
	}
}

529 
	$ùx˝_¥Ÿªj
(
unô
)

530 
unô
;

532 
	`fsm_lowîdown
(&
ùx˝_fsm
[
unô
]);

533 
	}
}

540 
	$ùx˝_ª£tci
(
f
)

541 
fsm
 *
f
;

543 
wo
->
ªq_node
 = wo->
√g_node
 && 
ao
->neg_node;

544 
wo
->
ªq_¬
 = wo->
√g_¬
 && 
ao
->neg_nn;

546 i‡(
wo
->
our_√tw‹k
 == 0) {

547 
wo
->
√g_node
 = 1;

548 
ao
->
ac˚±_√tw‹k
 = 1;

553 i‡(
	`zîo_node
 (
wo
->
our_node
)) {

554 
	`öc_node
 (
wo
->
our_node
);

555 
ao
->
ac˚±_loˇl
 = 1;

556 
wo
->
√g_node
 = 1;

561 i‡(
	`zîo_node
 (
wo
->
his_node
)) {

562 
	`öc_node
 (
wo
->
his_node
);

563 
ao
->
ac˚±_ªmŸe
 = 1;

570 i‡(
ao
->
rouãr
 == 0) {

571 
ao
->
rouãr
 |
	`BIT
(
RIP_SAP
);

572 
wo
->
rouãr
 |
	`BIT
(
RIP_SAP
);

576 
wo
->
√g_rouãr
 = 1;

580 *
go
 = *
wo
;

581 
	}
}

588 
	$ùx˝_cûí
(
f
)

589 
fsm
 *
f
;

591 
Àn
;

593 
Àn
 = 
go
->
√g_¬
 ? 
CILEN_NETN
 : 0;

594 
Àn
 +
go
->
√g_node
 ? 
CILEN_NODEN
 : 0;

595 
Àn
 +
go
->
√g_«me
 ? 
CILEN_NAME
 + 
	`°æí
 ((*)go->
«me
) - 1 : 0;

598 i‡(
go
->
√g_rouãr
 && 
	`to_exã∫Æ
(go->
rouãr
Ë!
RIP_SAP
)

599 
Àn
 +
CILEN_PROTOCOL
;

601  (
Àn
);

602 
	}
}

609 
	$ùx˝_addci
(
f
, 
u˝
, 
À≈
)

610 
fsm
 *
f
;

611 
u_ch¨
 *
u˝
;

612 *
À≈
;

617 i‡(
go
->
√g_¬
) {

618 
	`PUTCHAR
 (
IPX_NETWORK_NUMBER
, 
u˝
);

619 
	`PUTCHAR
 (
CILEN_NETN
, 
u˝
);

620 
	`PUTLONG
 (
go
->
our_√tw‹k
, 
u˝
);

623 i‡(
go
->
√g_node
) {

624 
ödx
;

625 
	`PUTCHAR
 (
IPX_NODE_NUMBER
, 
u˝
);

626 
	`PUTCHAR
 (
CILEN_NODEN
, 
u˝
);

627 
ödx
 = 0; indx <  (
go
->
our_node
); ++indx)

628 
	`PUTCHAR
 (
go
->
our_node
[
ödx
], 
u˝
);

631 i‡(
go
->
√g_«me
) {

632 
cûí
 = 
	`°æí
 ((*)
go
->
«me
);

633 
ödx
;

634 
	`PUTCHAR
 (
IPX_ROUTER_NAME
, 
u˝
);

635 
	`PUTCHAR
 (
CILEN_NAME
 + 
cûí
 - 1, 
u˝
);

636 
ödx
 = 0; indx < 
cûí
; ++indx)

637 
	`PUTCHAR
 (
go
->
«me
 [
ödx
], 
u˝
);

640 i‡(
go
->
√g_rouãr
) {

641 
exã∫Æ
 = 
	`to_exã∫Æ
 (
go
->
rouãr
);

642 i‡(
exã∫Æ
 !
RIP_SAP
) {

643 
	`PUTCHAR
 (
IPX_ROUTER_PROTOCOL
, 
u˝
);

644 
	`PUTCHAR
 (
CILEN_PROTOCOL
, 
u˝
);

645 
	`PUTSHORT
 (
exã∫Æ
, 
u˝
);

648 
	}
}

658 
	$ùx˝_ackci
(
f
, 
p
, 
Àn
)

659 
fsm
 *
f
;

660 
u_ch¨
 *
p
;

661 
Àn
;

663 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

664 
u_ch¨
 
cich¨
;

665 
u_öt32_t
 
cû⁄g
;

667 
	#ACKCIVOID
(
›t
, 
√g
) \

668 i‡(
√g
) { \

669 i‡((
Àn
 -
CILEN_VOID
) < 0) \

671 
	`GETCHAR
(
côy≥
, 
p
); \

672 
	`GETCHAR
(
cûí
, 
p
); \

673 i‡(
cûí
 !
CILEN_VOID
 || \

674 
côy≥
 !
›t
) \

676 }

	)

678 
	#ACKCICOMPLETE
(
›t
,
√g
Ë
	`ACKCIVOID
(›t,Çeg)

	)

680 
	#ACKCICHARS
(
›t
, 
√g
, 
vÆ
, 
˙t
) \

681 i‡(
√g
) { \

682 
ödx
, 
cou¡
 = 
˙t
; \

683 
Àn
 -(
cou¡
 + 2); \

684 i‡(
Àn
 < 0) \

686 
	`GETCHAR
(
côy≥
, 
p
); \

687 
	`GETCHAR
(
cûí
, 
p
); \

688 i‡(
cûí
 !(
cou¡
 + 2) || \

689 
côy≥
 !
›t
) \

691 
ödx
 = 0; indx < 
cou¡
; ++indx) {\

692 
	`GETCHAR
(
cich¨
, 
p
); \

693 i‡(
cich¨
 !((
u_ch¨
 *Ë&
vÆ
)[
ödx
]) \

696 i‡(
ödx
 !
cou¡
) \

698 }

	)

700 
	#ACKCINODE
(
›t
,
√g
,
vÆ
Ë
	`ACKCICHARS
(›t,√g,vÆ,(vÆ))

	)

701 
	#ACKCINAME
(
›t
,
√g
,
vÆ
Ë
	`ACKCICHARS
(›t,√g,vÆ,
	`°æí
((*)vÆ))

	)

703 
	#ACKCINETWORK
(
›t
, 
√g
, 
vÆ
) \

704 i‡(
√g
) { \

705 i‡((
Àn
 -
CILEN_NETN
) < 0) \

707 
	`GETCHAR
(
côy≥
, 
p
); \

708 
	`GETCHAR
(
cûí
, 
p
); \

709 i‡(
cûí
 !
CILEN_NETN
 || \

710 
côy≥
 !
›t
) \

712 
	`GETLONG
(
cû⁄g
, 
p
); \

713 i‡(
cû⁄g
 !
vÆ
) \

715 }

	)

717 
	#ACKCIPROTO
(
›t
, 
√g
, 
vÆ
) \

718 i‡(
√g
) { \

719 i‡(
Àn
 < 2) \

721 
	`GETCHAR
(
côy≥
, 
p
); \

722 
	`GETCHAR
(
cûí
, 
p
); \

723 i‡(
cûí
 !
CILEN_PROTOCOL
 || 
côy≥
 !
›t
) \

725 
Àn
 -
cûí
; \

726 i‡(
Àn
 < 0) \

728 
	`GETSHORT
(
cish‹t
, 
p
); \

729 i‡(
cish‹t
 !
	`to_exã∫Æ
 (
vÆ
Ë|| cish‹à=
RIP_SAP
) \

731 }

	)

736 
	`ACKCINETWORK
 (
IPX_NETWORK_NUMBER
, 
go
->
√g_¬
, go->
our_√tw‹k
);

737 
	`ACKCINODE
 (
IPX_NODE_NUMBER
, 
go
->
√g_node
, go->
our_node
);

738 
	`ACKCINAME
 (
IPX_ROUTER_NAME
, 
go
->
√g_«me
, go->
«me
);

739 i‡(
Àn
 > 0)

740 
	`ACKCIPROTO
 (
IPX_ROUTER_PROTOCOL
, 
go
->
√g_rouãr
, go->
rouãr
);

744 i‡(
Àn
 == 0)

750 
	`IPXCPDEBUG
(("ipxcp_ackci:Ñeceived bad Ack!"));

752 
	}
}

765 
	$ùx˝_«kci
(
f
, 
p
, 
Àn
, 
åót_as_ªje˘
)

766 
fsm
 *
f
;

767 
u_ch¨
 *
p
;

768 
Àn
;

769 
åót_as_ªje˘
;

771 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

772 
u_sh‹t
 
s
;

773 
u_öt32_t
 
l
;

774 
ùx˝_›ti⁄s
 
no
;

775 
ùx˝_›ti⁄s
 
åy
;

777 
	`BZERO
(&
no
, (no));

778 
åy
 = *
go
;

780 
Àn
 >
CILEN_VOID
) {

781 
	`GETCHAR
 (
côy≥
, 
p
);

782 
	`GETCHAR
 (
cûí
, 
p
);

783 
Àn
 -
cûí
;

784 i‡(
cûí
 < 
CILEN_VOID
 || 
Àn
 < 0)

785 
bad
;

786 
√xt
 = &
p
 [
cûí
 - 
CILEN_VOID
];

788 
côy≥
) {

789 
IPX_NETWORK_NUMBER
:

790 i‡(!
go
->
√g_¬
 || 
no
.√g_¬ || (
cûí
 !
CILEN_NETN
))

791 
bad
;

792 
no
.
√g_¬
 = 1;

794 
	`GETLONG
(
l
, 
p
);

795 i‡(
åót_as_ªje˘
)

796 
åy
.
√g_¬
 = 0;

797 i‡(
l
 && 
ao
->
ac˚±_√tw‹k
)

798 
åy
.
our_√tw‹k
 = 
l
;

801 
IPX_NODE_NUMBER
:

802 i‡(!
go
->
√g_node
 || 
no
.√g_nodê|| (
cûí
 !
CILEN_NODEN
))

803 
bad
;

804 
no
.
√g_node
 = 1;

806 i‡(
åót_as_ªje˘
)

807 
åy
.
√g_node
 = 0;

808 i‡(!
	`zîo_node
 (
p
Ë&& 
ao
->
ac˚±_loˇl
 &&

809 ! 
	`com∑ª_node
 (
p
, 
ho
->
his_node
))

810 
	`c›y_node
 (
p
, 
åy
.
our_node
);

814 
IPX_COMPRESSION_PROTOCOL
:

815 
bad
;

817 
IPX_ROUTER_PROTOCOL
:

818 i‡(!
go
->
√g_rouãr
 || (
cûí
 < 
CILEN_PROTOCOL
))

819 
bad
;

821 
	`GETSHORT
 (
s
, 
p
);

822 i‡(
s
 > 15)

825 
s
 = 
	`BIT
(s);

826 i‡(
no
.
rouãr
 & 
s
)

827 
bad
;

829 i‡(
no
.
rouãr
 == 0)

830 
åy
.
rouãr
 = 0;

832 
no
.
rouãr
 |
s
;

833 
åy
.
rouãr
 |
s
;

834 
åy
.
√g_rouãr
 = 1;

838 
IPX_ROUTER_NAME
:

839 
IPX_COMPLETE
:

840 
bad
;

846 
p
 = 
√xt
;

853 
åy
.
rouãr
 &(
ao
->rouã∏| 
	`BIT
(
IPX_NONE
));

854 i‡(
åy
.
rouãr
 =0 && 
ao
->router != 0)

855 
åy
.
rouãr
 = 
	`BIT
(
IPX_NONE
);

857 i‡(
åy
.
rouãr
 != 0)

858 
åy
.
√g_rouãr
 = 1;

864 i‡(
f
->
°©e
 !
OPENED
)

865 *
go
 = 
åy
;

869 
bad
:

870 
	`IPXCPDEBUG
(("ipxcp_nakci:Ñeceived bad Nak!"));

872 
	}
}

878 
	$ùx˝_ªjci
(
f
, 
p
, 
Àn
)

879 
fsm
 *
f
;

880 
u_ch¨
 *
p
;

881 
Àn
;

883 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

884 
u_ch¨
 
cich¨
;

885 
u_öt32_t
 
cû⁄g
;

886 
ùx˝_›ti⁄s
 
åy
;

888 
	#REJCINETWORK
(
›t
, 
√g
, 
vÆ
) \

889 i‡(
√g
 && 
p
[0] =
›t
) { \

890 i‡((
Àn
 -
CILEN_NETN
) < 0) \

892 
	`GETCHAR
(
côy≥
, 
p
); \

893 
	`GETCHAR
(
cûí
, 
p
); \

894 i‡(
cûí
 !
CILEN_NETN
 || \

895 
côy≥
 !
›t
) \

897 
	`GETLONG
(
cû⁄g
, 
p
); \

898 i‡(
cû⁄g
 !
vÆ
) \

900 
√g
 = 0; \

901 }

	)

903 
	#REJCICHARS
(
›t
, 
√g
, 
vÆ
, 
˙t
) \

904 i‡(
√g
 && 
p
[0] =
›t
) { \

905 
ödx
, 
cou¡
 = 
˙t
; \

906 
Àn
 -(
cou¡
 + 2); \

907 i‡(
Àn
 < 0) \

909 
	`GETCHAR
(
côy≥
, 
p
); \

910 
	`GETCHAR
(
cûí
, 
p
); \

911 i‡(
cûí
 !(
cou¡
 + 2) || \

912 
côy≥
 !
›t
) \

914 
ödx
 = 0; indx < 
cou¡
; ++indx) {\

915 
	`GETCHAR
(
cich¨
, 
p
); \

916 i‡(
cich¨
 !((
u_ch¨
 *Ë&
vÆ
)[
ödx
]) \

919 i‡(
ödx
 !
cou¡
) \

921 
√g
 = 0; \

922 }

	)

924 
	#REJCINODE
(
›t
,
√g
,
vÆ
Ë
	`REJCICHARS
(›t,√g,vÆ,(vÆ))

	)

925 
	#REJCINAME
(
›t
,
√g
,
vÆ
Ë
	`REJCICHARS
(›t,√g,vÆ,
	`°æí
((*)vÆ))

	)

927 
	#REJCIVOID
(
›t
, 
√g
) \

928 i‡(
√g
 && 
p
[0] =
›t
) { \

929 i‡((
Àn
 -
CILEN_VOID
) < 0) \

931 
	`GETCHAR
(
côy≥
, 
p
); \

932 
	`GETCHAR
(
cûí
, 
p
); \

933 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

935 
√g
 = 0; \

936 }

	)

940 
	#REJCIPROTO
(
›t
, 
√g
, 
vÆ
, 
bô
) \

941 i‡(
√g
 && 
p
[0] =
›t
) { \

942 i‡((
Àn
 -
CILEN_PROTOCOL
) < 0) \

944 
	`GETCHAR
(
côy≥
, 
p
); \

945 
	`GETCHAR
(
cûí
, 
p
); \

946 i‡(
cûí
 !
CILEN_PROTOCOL
) \

948 
	`GETSHORT
(
cish‹t
, 
p
); \

949 i‡(
cish‹t
 !
	`to_exã∫Æ
 (
vÆ
Ë|| cish‹à=
RIP_SAP
) \

951 
√g
 = 0; \

952 }

	)

958 
åy
 = *
go
;

961 
	`REJCINETWORK
 (
IPX_NETWORK_NUMBER
, 
åy
.
√g_¬
,Åry.
our_√tw‹k
);

962 
	`REJCINODE
 (
IPX_NODE_NUMBER
, 
åy
.
√g_node
,Åry.
our_node
);

963 
	`REJCINAME
 (
IPX_ROUTER_NAME
, 
åy
.
√g_«me
,Åry.
«me
);

964 
	`REJCIPROTO
 (
IPX_ROUTER_PROTOCOL
, 
åy
.
√g_rouãr
,Åry.
rouãr
, 0);

968 i‡(
Àn
 == 0) {

969 i‡(
f
->
°©e
 !
OPENED
)

970 *
go
 = 
åy
;

977 
	`IPXCPDEBUG
(("ipxcp_rejci:Ñeceived bad Reject!"));

979 
	}
}

989 
	$ùx˝_ªqci
(
f
, 
öp
, 
Àn
, 
ªje˘_if_dißgªe
)

990 
fsm
 *
f
;

991 
u_ch¨
 *
öp
;

992 *
Àn
;

993 
ªje˘_if_dißgªe
;

995 
u_ch¨
 *
cù
, *
√xt
;

996 
u_sh‹t
 
cûí
, 
côy≥
;

997 
u_sh‹t
 
cish‹t
;

998 
u_öt32_t
 
cöëw‹k
;

999 
rc
 = 
CONFACK
;

1000 
‹c
;

1001 
u_ch¨
 *
p
;

1002 
u_ch¨
 *
u˝
 = 
öp
;

1003 
l
 = *
Àn
;

1008 
	`BZERO
(
ho
, (*ho));

1013 
√xt
 = 
öp
;

1014 
l
) {

1015 
‹c
 = 
CONFACK
;

1016 
cù
 = 
p
 = 
√xt
;

1017 i‡(
l
 < 2 ||

1018 
p
[1] < 2 ||

1019 
p
[1] > 
l
) {

1020 
	`IPXCPDEBUG
(("ipxcp_reqci: bad CIÜength!"));

1021 
‹c
 = 
CONFREJ
;

1022 
cûí
 = 
l
;

1023 
l
 = 0;

1024 
ídswôch
;

1026 
	`GETCHAR
(
côy≥
, 
p
);

1027 
	`GETCHAR
(
cûí
, 
p
);

1028 
l
 -
cûí
;

1029 
√xt
 +
cûí
;

1031 
côy≥
) {

1035 
IPX_NETWORK_NUMBER
:

1038 i‡–!
ao
->
√g_¬
 || 
cûí
 !
CILEN_NETN
 ) {

1039 
‹c
 = 
CONFREJ
;

1042 
	`GETLONG
(
cöëw‹k
, 
p
);

1045 i‡(
cöëw‹k
 != 0) {

1046 
ho
->
his_√tw‹k
 = 
cöëw‹k
;

1047 
ho
->
√g_¬
 = 1;

1048 i‡(
wo
->
our_√tw‹k
 =
cöëw‹k
)

1054 i‡(! 
ao
->
ac˚±_√tw‹k
 || 
cöëw‹k
 < 
wo
->
our_√tw‹k
) {

1055 
	`DECPTR
 ( (
u_öt32_t
), 
p
);

1056 
	`PUTLONG
 (
wo
->
our_√tw‹k
, 
p
);

1057 
‹c
 = 
CONFNAK
;

1064 i‡(
go
->
our_√tw‹k
 != 0) {

1065 
	`DECPTR
 ( (
u_öt32_t
), 
p
);

1066 
	`PUTLONG
 (
wo
->
our_√tw‹k
, 
p
);

1067 
‹c
 = 
CONFNAK
;

1072 
‹c
 = 
CONFREJ
;

1078 
IPX_NODE_NUMBER
:

1081 i‡–
cûí
 !
CILEN_NODEN
 ) {

1082 
‹c
 = 
CONFREJ
;

1086 
	`c›y_node
 (
p
, 
ho
->
his_node
);

1087 
ho
->
√g_node
 = 1;

1092 i‡(
	`zîo_node
 (
ho
->
his_node
)) {

1093 
‹c
 = 
CONFNAK
;

1094 
	`c›y_node
 (
wo
->
his_node
, 
p
);

1095 
	`INCPTR
 ( (
wo
->
his_node
), 
p
);

1102 i‡(
	`com∑ª_node
 (
wo
->
his_node
, 
ho
->his_node)) {

1103 
‹c
 = 
CONFACK
;

1104 
ho
->
√g_node
 = 1;

1105 
	`INCPTR
 ( (
wo
->
his_node
), 
p
);

1112 i‡(
	`com∑ª_node
 (
ho
->
his_node
, 
go
->
our_node
)) {

1113 
	`öc_node
 (
ho
->
his_node
);

1114 
‹c
 = 
CONFNAK
;

1115 
	`c›y_node
 (
ho
->
his_node
, 
p
);

1116 
	`INCPTR
 ( (
wo
->
his_node
), 
p
);

1122 i‡(! 
ao
->
ac˚±_ªmŸe
) {

1123 
	`c›y_node
 (
wo
->
his_node
, 
p
);

1124 
	`INCPTR
 ( (
wo
->
his_node
), 
p
);

1125 
‹c
 = 
CONFNAK
;

1128 
‹c
 = 
CONFACK
;

1129 
ho
->
√g_node
 = 1;

1130 
	`INCPTR
 ( (
wo
->
his_node
), 
p
);

1135 
IPX_COMPRESSION_PROTOCOL
:

1136 
‹c
 = 
CONFREJ
;

1143 
IPX_ROUTER_PROTOCOL
:

1144 i‡–!
ao
->
√g_rouãr
 || 
cûí
 < 
CILEN_PROTOCOL
 ) {

1145 
‹c
 = 
CONFREJ
;

1149 
	`GETSHORT
 (
cish‹t
, 
p
);

1151 i‡(
wo
->
√g_rouãr
 == 0) {

1152 
wo
->
√g_rouãr
 = 1;

1153 
wo
->
rouãr
 = 
	`BIT
(
IPX_NONE
);

1156 i‡((
cish‹t
 =
IPX_NONE
 && 
ho
->
rouãr
 != 0) ||

1157 (
ho
->
rouãr
 & 
	`BIT
(
IPX_NONE
))) {

1158 
‹c
 = 
CONFREJ
;

1162 
cish‹t
 = 
	`BIT
(cishort);

1163 i‡(
ho
->
rouãr
 & 
cish‹t
) {

1164 
‹c
 = 
CONFREJ
;

1168 
ho
->
rouãr
 |
cish‹t
;

1169 
ho
->
√g_rouãr
 = 1;

1174 i‡((
cish‹t
 & (
ao
->
rouãr
 | 
	`BIT
(
IPX_NONE
))) == 0) {

1175 
¥Ÿocﬁ
;

1177 i‡(
cish‹t
 =
	`BIT
(
NLSP
) &&

1178 (
ao
->
rouãr
 & 
	`BIT
(
RIP_SAP
)) &&

1179 !
wo
->
åõd_rù
) {

1180 
¥Ÿocﬁ
 = 
RIP_SAP
;

1181 
wo
->
åõd_rù
 = 1;

1183 
¥Ÿocﬁ
 = 
IPX_NONE
;

1185 
	`DECPTR
 ( (
u_öt16_t
), 
p
);

1186 
	`PUTSHORT
 (
¥Ÿocﬁ
, 
p
);

1187 
‹c
 = 
CONFNAK
;

1193 
IPX_ROUTER_NAME
:

1194 i‡(
cûí
 >
CILEN_NAME
) {

1195 
«me_size
 = 
cûí
 - 
CILEN_NAME
;

1196 i‡(
«me_size
 > (
ho
->
«me
))

1197 
«me_size
 =  (
ho
->
«me
) - 1;

1198 
	`mem£t
 (
ho
->
«me
, 0,  (ho->name));

1199 
	`mem˝y
 (
ho
->
«me
, 
p
, 
«me_size
);

1200 
ho
->
«me
 [
«me_size
] = '\0';

1201 
ho
->
√g_«me
 = 1;

1202 
‹c
 = 
CONFACK
;

1205 
‹c
 = 
CONFREJ
;

1210 
IPX_COMPLETE
:

1211 i‡(
cûí
 !
CILEN_COMPLETE
)

1212 
‹c
 = 
CONFREJ
;

1214 
ho
->
√g_com∂ëe
 = 1;

1215 
‹c
 = 
CONFACK
;

1222 
‹c
 = 
CONFREJ
;

1225 
ídswôch
:

1226 i‡(
‹c
 =
CONFACK
 &&

1227 
rc
 !
CONFACK
)

1230 i‡(
‹c
 =
CONFNAK
) {

1231 i‡(
ªje˘_if_dißgªe
)

1232 
‹c
 = 
CONFREJ
;

1233 i‡(
rc
 =
CONFREJ
)

1235 i‡(
rc
 =
CONFACK
) {

1236 
rc
 = 
CONFNAK
;

1237 
u˝
 = 
öp
;

1241 i‡(
‹c
 =
CONFREJ
 &&

1242 
rc
 !
CONFREJ
) {

1243 
rc
 = 
CONFREJ
;

1244 
u˝
 = 
öp
;

1248 i‡(
u˝
 !
cù
)

1249 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1252 
	`INCPTR
(
cûí
, 
u˝
);

1263 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_node
 &&

1264 
wo
->
ªq_¬
 && !
ªje˘_if_dißgªe
) {

1265 i‡(
rc
 =
CONFACK
) {

1266 
rc
 = 
CONFNAK
;

1267 
wo
->
ªq_¬
 = 0;

1268 
u˝
 = 
öp
;

1271 i‡(
	`zîo_node
 (
wo
->
his_node
))

1272 
	`öc_node
 (
wo
->
his_node
);

1274 
	`PUTCHAR
 (
IPX_NODE_NUMBER
, 
u˝
);

1275 
	`PUTCHAR
 (
CILEN_NODEN
, 
u˝
);

1276 
	`c›y_node
 (
wo
->
his_node
, 
u˝
);

1277 
	`INCPTR
 ( (
wo
->
his_node
), 
u˝
);

1280 *
Àn
 = 
u˝
 - 
öp
;

1281 
	`IPXCPDEBUG
(("ùx˝:Ñëu∫ög C⁄figuª-%s", 
	`CODENAME
(
rc
)));

1282  (
rc
);

1283 
	}
}

1292 
	$ùx˝_up
(
f
)

1293 
fsm
 *
f
;

1295 
unô
 = 
f
->unit;

1297 
	`IPXCPDEBUG
(("ipxcp: up"));

1300 i‡(
ho
->
rouãr
 == 0)

1301 
ho
->
rouãr
 = 
	`BIT
(
RIP_SAP
);

1303 i‡(
go
->
rouãr
 == 0)

1304 
go
->
rouãr
 = 
	`BIT
(
RIP_SAP
);

1307 i‡(!
ho
->
√g_¬
)

1308 
ho
->
his_√tw‹k
 = 
wo
->his_network;

1310 i‡(!
ho
->
√g_node
)

1311 
	`c›y_node
 (
wo
->
his_node
, 
ho
->his_node);

1313 i‡(!
wo
->
√g_node
 && !
go
->neg_node)

1314 
	`c›y_node
 (
wo
->
our_node
, 
go
->our_node);

1316 i‡(
	`zîo_node
 (
go
->
our_node
)) {

1317 
îrmsg
[] = "CouldÇot determineÜocal IPXÇodeáddress";

1318 i‡(
debug
)

1319 
	`îr‹
(
îrmsg
);

1320 
	`ùx˝_˛o£
(
f
->
unô
, 
îrmsg
);

1324 
go
->
√tw‹k
 = go->
our_√tw‹k
;

1325 i‡(
ho
->
his_√tw‹k
 !0 && ho->his_√tw‹k > 
go
->
√tw‹k
)

1326 
go
->
√tw‹k
 = 
ho
->
his_√tw‹k
;

1328 i‡(
go
->
√tw‹k
 == 0) {

1329 
îrmsg
[] = "CanÇot determineÇetworkÇumber";

1330 i‡(
debug
)

1331 
	`îr‹
(
îrmsg
);

1332 
	`ùx˝_˛o£
 (
unô
, 
îrmsg
);

1337 i‡(!
	`sifup
(
unô
)) {

1338 i‡(
debug
)

1339 
	`w¨n
("sifup failed (IPX)");

1340 
	`ùx˝_˛o£
(
unô
, "Interface configuration failed");

1343 
ùx˝_is_up
 = 1;

1346 i‡(!
	`sùxÁddr
(
unô
, 
go
->
√tw‹k
, go->
our_node
)) {

1347 i‡(
debug
)

1348 
	`w¨n
("sipxfaddr failed");

1349 
	`ùx˝_˛o£
(
unô
, "Interface configuration failed");

1353 
	`≈_up
(
f
->
unô
, 
PPP_IPX
);

1360 
	`ùx˝_s¸ùt
 (
f
, 
_PATH_IPXUP
);

1361 
	}
}

1371 
	$ùx˝_down
(
f
)

1372 
fsm
 *
f
;

1374 
	`IPXCPDEBUG
(("ipxcp: down"));

1376 i‡(!
ùx˝_is_up
)

1378 
ùx˝_is_up
 = 0;

1379 
	`≈_down
(
f
->
unô
, 
PPP_IPX
);

1380 
	`cùxÁddr
(
f
->
unô
);

1381 
	`si‚pmode
(
f
->
unô
, 
PPP_IPX
, 
NPMODE_DROP
);

1382 
	`sifdown
(
f
->
unô
);

1383 
	`ùx˝_s¸ùt
 (
f
, 
_PATH_IPXDOWN
);

1384 
	}
}

1391 
	$ùx˝_föished
(
f
)

1392 
fsm
 *
f
;

1394 
	`≈_föished
(
f
->
unô
, 
PPP_IPX
);

1395 
	}
}

1403 
	$ùx˝_s¸ùt
(
f
, 
s¸ùt
)

1404 
fsm
 *
f
;

1405 *
s¸ùt
;

1407 
°r•ìd
[32], 
°æoˇl
[32], 
°ºemŸe
[32];

1408 
°∫ëw‹k
[32], 
°Ωid
[32];

1409 *
¨gv
[14], 
°ΩrŸo_l˛
[32], 
°ΩrŸo_rmt
[32];

1411 
	`¶¥ötf
(
°Ωid
, (°Ωid), "%d", 
	`gëpid
());

1412 
	`¶¥ötf
(
°r•ìd
, (°r•ìd),"%d", 
baud_øã
);

1414 
°ΩrŸo_l˛
[0] = '\0';

1415 i‡(
go
->
√g_rouãr
 && ((go->
rouãr
 & 
	`BIT
(
IPX_NONE
)) == 0)) {

1416 i‡(
go
->
rouãr
 & 
	`BIT
(
RIP_SAP
))

1417 
	`°æ˝y
 (
°ΩrŸo_l˛
, "RIP ", (strproto_lcl));

1418 i‡(
go
->
rouãr
 & 
	`BIT
(
NLSP
))

1419 
	`°æˇt
 (
°ΩrŸo_l˛
, "NLSP ", (strproto_lcl));

1422 i‡(
°ΩrŸo_l˛
[0] == '\0')

1423 
	`°æ˝y
 (
°ΩrŸo_l˛
, "NONE ", (strproto_lcl));

1425 
°ΩrŸo_l˛
[
	`°æí
 (strproto_lcl)-1] = '\0';

1427 
°ΩrŸo_rmt
[0] = '\0';

1428 i‡(
ho
->
√g_rouãr
 && ((ho->
rouãr
 & 
	`BIT
(
IPX_NONE
)) == 0)) {

1429 i‡(
ho
->
rouãr
 & 
	`BIT
(
RIP_SAP
))

1430 
	`°æ˝y
 (
°ΩrŸo_rmt
, "RIP ", (strproto_rmt));

1431 i‡(
ho
->
rouãr
 & 
	`BIT
(
NLSP
))

1432 
	`°æˇt
 (
°ΩrŸo_rmt
, "NLSP ", (strproto_rmt));

1435 i‡(
°ΩrŸo_rmt
[0] == '\0')

1436 
	`°æ˝y
 (
°ΩrŸo_rmt
, "NONE ", (strproto_rmt));

1438 
°ΩrŸo_rmt
[
	`°æí
 (strproto_rmt)-1] = '\0';

1440 
	`°æ˝y
 (
°∫ëw‹k
, 
	`ùx_¡ﬂ
 (
go
->
√tw‹k
), (strnetwork));

1442 
	`¶¥ötf
 (
°æoˇl
, (°æoˇl), "%0.6B", 
go
->
our_node
);

1444 
	`¶¥ötf
 (
°ºemŸe
, (°ºemŸe), "%0.6B", 
ho
->
his_node
);

1446 
¨gv
[0] = 
s¸ùt
;

1447 
¨gv
[1] = 
i‚ame
;

1448 
¨gv
[2] = 
dev«m
;

1449 
¨gv
[3] = 
°r•ìd
;

1450 
¨gv
[4] = 
°∫ëw‹k
;

1451 
¨gv
[5] = 
°æoˇl
;

1452 
¨gv
[6] = 
°ºemŸe
;

1453 
¨gv
[7] = 
°ΩrŸo_l˛
;

1454 
¨gv
[8] = 
°ΩrŸo_rmt
;

1455 
¨gv
[9] = (*)
go
->
«me
;

1456 
¨gv
[10] = (*)
ho
->
«me
;

1457 
¨gv
[11] = 
ù∑øm
;

1458 
¨gv
[12] = 
°Ωid
;

1459 
¨gv
[13] = 
NULL
;

1460 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
NULL
, NULL, 0);

1461 
	}
}

1466 *
	gùx˝_codíames
[] = {

1472 
	$ùx˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

1473 
u_ch¨
 *
p
;

1474 
∂í
;

1475 (*
¥öãr
Ë
	`__P
((*, *, ...));

1476 *
¨g
;

1478 
code
, 
id
, 
Àn
, 
ﬁí
;

1479 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1480 
u_sh‹t
 
cish‹t
;

1481 
u_öt32_t
 
cû⁄g
;

1483 i‡(
∂í
 < 
HEADERLEN
)

1485 
p°¨t
 = 
p
;

1486 
	`GETCHAR
(
code
, 
p
);

1487 
	`GETCHAR
(
id
, 
p
);

1488 
	`GETSHORT
(
Àn
, 
p
);

1489 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

1492 i‡(
code
 >1 && codê<(
ùx˝_codíames
) / (*))

1493 
	`¥öãr
(
¨g
, " %s", 
ùx˝_codíames
[
code
-1]);

1495 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1496 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1497 
Àn
 -
HEADERLEN
;

1498 
code
) {

1499 
CONFREQ
:

1500 
CONFACK
:

1501 
CONFNAK
:

1502 
CONFREJ
:

1504 
Àn
 >= 2) {

1505 
	`GETCHAR
(
code
, 
p
);

1506 
	`GETCHAR
(
ﬁí
, 
p
);

1507 
p
 -= 2;

1508 i‡(
ﬁí
 < 
CILEN_VOID
 || oÀ¿> 
Àn
) {

1511 
	`¥öãr
(
¨g
, " <");

1512 
Àn
 -
ﬁí
;

1513 
›ãnd
 = 
p
 + 
ﬁí
;

1514 
code
) {

1515 
IPX_NETWORK_NUMBER
:

1516 i‡(
ﬁí
 =
CILEN_NETN
) {

1517 
p
 += 2;

1518 
	`GETLONG
(
cû⁄g
, 
p
);

1519 
	`¥öãr
 (
¨g
, "√tw‹k %s", 
	`ùx_¡ﬂ
 (
cû⁄g
));

1522 
IPX_NODE_NUMBER
:

1523 i‡(
ﬁí
 =
CILEN_NODEN
) {

1524 
p
 += 2;

1525 
	`¥öãr
 (
¨g
, "node ");

1526 
p
 < 
›ãnd
) {

1527 
	`GETCHAR
(
code
, 
p
);

1528 
	`¥öãr
(
¨g
, "%.2x", (Ë(Ë(Ë
code
);

1532 
IPX_COMPRESSION_PROTOCOL
:

1533 i‡(
ﬁí
 =
CILEN_COMPRESS
) {

1534 
p
 += 2;

1535 
	`GETSHORT
 (
cish‹t
, 
p
);

1536 
	`¥öãr
 (
¨g
, "com¥essi⁄ %d", (Ë
cish‹t
);

1539 
IPX_ROUTER_PROTOCOL
:

1540 i‡(
ﬁí
 =
CILEN_PROTOCOL
) {

1541 
p
 += 2;

1542 
	`GETSHORT
 (
cish‹t
, 
p
);

1543 
	`¥öãr
 (
¨g
, "rouã∏¥Ÿÿ%d", (Ë
cish‹t
);

1546 
IPX_ROUTER_NAME
:

1547 i‡(
ﬁí
 >
CILEN_NAME
) {

1548 
p
 += 2;

1549 
	`¥öãr
 (
¨g
, "routerÇame \"");

1550 
p
 < 
›ãnd
) {

1551 
	`GETCHAR
(
code
, 
p
);

1552 i‡(
code
 >= 0x20 && code <= 0x7E)

1553 
	`¥öãr
 (
¨g
, "%c", (Ë(Ë(Ë
code
);

1555 
	`¥öãr
 (
¨g
, " \\%.2x", (Ë(Ë(Ë
code
);

1557 
	`¥öãr
 (
¨g
, "\"");

1560 
IPX_COMPLETE
:

1561 i‡(
ﬁí
 =
CILEN_COMPLETE
) {

1562 
p
 += 2;

1563 
	`¥öãr
 (
¨g
, "complete");

1570 
p
 < 
›ãnd
) {

1571 
	`GETCHAR
(
code
, 
p
);

1572 
	`¥öãr
(
¨g
, " %.2x", (Ë(Ë(Ë
code
);

1574 
	`¥öãr
(
¨g
, ">");

1578 
TERMACK
:

1579 
TERMREQ
:

1580 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1581 
	`¥öãr
(
¨g
, " ");

1582 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1583 
p
 +
Àn
;

1584 
Àn
 = 0;

1590 ; 
Àn
 > 0; --len) {

1591 
	`GETCHAR
(
code
, 
p
);

1592 
	`¥öãr
(
¨g
, " %.2x", (Ë(Ë(Ë
code
);

1595  
p
 - 
p°¨t
;

1596 
	}
}

	@pppd/ipxcp.h

48 
	#IPX_NETWORK_NUMBER
 1

	)

49 
	#IPX_NODE_NUMBER
 2

	)

50 
	#IPX_COMPRESSION_PROTOCOL
 3

	)

51 
	#IPX_ROUTER_PROTOCOL
 4

	)

52 
	#IPX_ROUTER_NAME
 5

	)

53 
	#IPX_COMPLETE
 6

	)

56 
	#IPX_NONE
 0

	)

57 
	#RIP_SAP
 2

	)

58 
	#NLSP
 4

	)

60 
	sùx˝_›ti⁄s
 {

61 
boﬁ
 
	m√g_node
;

62 
boﬁ
 
	mªq_node
;

64 
boﬁ
 
	m√g_¬
;

65 
boﬁ
 
	mªq_¬
;

67 
boﬁ
 
	m√g_«me
;

68 
boﬁ
 
	m√g_com∂ëe
;

69 
boﬁ
 
	m√g_rouãr
;

71 
boﬁ
 
	mac˚±_loˇl
;

72 
boﬁ
 
	mac˚±_ªmŸe
;

73 
boﬁ
 
	mac˚±_√tw‹k
;

75 
boﬁ
 
	måõd_∆•
;

76 
boﬁ
 
	måõd_rù
;

78 
u_öt32_t
 
	mhis_√tw‹k
;

79 
u_öt32_t
 
	mour_√tw‹k
;

80 
u_öt32_t
 
	m√tw‹k
;

82 
u_ch¨
 
	mhis_node
[6];

83 
u_ch¨
 
	mour_node
[6];

84 
u_ch¨
 
	m«me
 [48];

85 
	mrouãr
;

86 } 
	tùx˝_›ti⁄s
;

88 
fsm
 
ùx˝_fsm
[];

89 
ùx˝_›ti⁄s
 
ùx˝_w™t›ti⁄s
[];

90 
ùx˝_›ti⁄s
 
ùx˝_gŸ›ti⁄s
[];

91 
ùx˝_›ti⁄s
 
ùx˝_Ælow›ti⁄s
[];

92 
ùx˝_›ti⁄s
 
ùx˝_his›ti⁄s
[];

94 
¥Ÿít
 
ùx˝_¥Ÿít
;

	@pppd/lcp.c

43 
	#RCSID
 "$Id:Ü˝.c,v 1.76 2006/05/22 00:04:07Öaulu†Ex∞$"

	)

49 
	~<°dio.h
>

50 
	~<°rög.h
>

51 
	~<°dlib.h
>

53 
	~"µpd.h
"

54 
	~"fsm.h
"

55 
	~"l˝.h
"

56 
	~"ch≠-√w.h
"

57 
	~"magic.h
"

66 
	#DELAYED_UP
 0x100

	)

68 
l˝_dñayed_up
 
__P
((*));

73 
	gl˝_echo_öãrvÆ
 = 0;

74 
	gl˝_echo_Áûs
 = 0;

75 
boﬁ
 
	gl˝_echo_ad≠tive
 = 0;

76 
boﬁ
 
	gœx_ªcv
 = 0;

77 
boﬁ
 
	gn€ndpoöt
 = 0;

79 
no›t
 
__P
((**));

81 #ifde‡
HAVE_MULTILINK


82 
£ãndpoöt
 
__P
((**));

83 
¥öãndpoöt
 
__P
((
›ti⁄_t
 *, (*)(*, *, ...),

87 
›ti⁄_t
 
l˝_›ti⁄_li°
[] = {

89 { "-Æl", 
o_•ecül_nﬂrg
, (*)
no›t
,

92 { "nﬂccomp", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
,

94 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_accom¥essi⁄
 },

95 { "-ac", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
,

97 
OPT_ALIAS
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_accom¥essi⁄
 },

99 { "asyncm≠", 
o_uöt32
, &
l˝_w™t›ti⁄s
[0].
asyncm≠
,

101 
OPT_OR
, &
l˝_w™t›ti⁄s
[0].
√g_asyncm≠
 },

102 { "-as", 
o_uöt32
, &
l˝_w™t›ti⁄s
[0].
asyncm≠
,

104 
OPT_ALIAS
 | 
OPT_OR
, &
l˝_w™t›ti⁄s
[0].
√g_asyncm≠
 },

105 { "deÁu…-asyncm≠", 
o_uöt32
, &
l˝_w™t›ti⁄s
[0].
asyncm≠
,

107 
OPT_OR
 | 
OPT_NOARG
 | 
	`OPT_VAL
(~0UË| 
OPT_A2CLR
,

108 &
l˝_Ælow›ti⁄s
[0].
√g_asyncm≠
 },

109 { "-am", 
o_uöt32
, &
l˝_w™t›ti⁄s
[0].
asyncm≠
,

111 
OPT_ALIAS
 | 
OPT_OR
 | 
OPT_NOARG
 | 
	`OPT_VAL
(~0UË| 
OPT_A2CLR
,

112 &
l˝_Ælow›ti⁄s
[0].
√g_asyncm≠
 },

114 { "nomagic", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_magi˙umbî
,

116 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_magi˙umbî
 },

117 { "-mn", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_magi˙umbî
,

119 
OPT_ALIAS
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_magi˙umbî
 },

121 { "mru", 
o_öt
, &
l˝_w™t›ti⁄s
[0].
mru
,

123 
OPT_PRIO
, &
l˝_w™t›ti⁄s
[0].
√g_mru
 },

124 { "deÁu…-mru", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_mru
,

126 
OPT_PRIOSUB
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_mru
 },

127 { "-mru", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_mru
,

129 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_mru
 },

131 { "mtu", 
o_öt
, &
l˝_Ælow›ti⁄s
[0].
mru
,

132 "Së ou∏MTU", 
OPT_LIMITS
, 
NULL
, 
MAXMRU
, 
MINMRU
 },

134 { "n›comp", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
,

136 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_pcom¥essi⁄
 },

137 { "-pc", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
,

139 
OPT_ALIAS
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_pcom¥essi⁄
 },

141 { "∑ssive", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
∑ssive
,

143 { "-p", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
∑ssive
,

144 "SëÖassivêmode", 
OPT_ALIAS
 | 1 },

146 { "sûít", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
sûít
,

149 { "l˝-echo-Áûuª", 
o_öt
, &
l˝_echo_Áûs
,

151 
OPT_PRIO
 },

152 { "l˝-echo-öãrvÆ", 
o_öt
, &
l˝_echo_öãrvÆ
,

153 "SëÅimêö sec⁄d†bëwì¿LCPÉchÿªque°s", 
OPT_PRIO
 },

154 { "l˝-echo-ad≠tive", 
o_boﬁ
, &
l˝_echo_ad≠tive
,

156 { "l˝-ª°¨t", 
o_öt
, &
l˝_fsm
[0].
timeouâime
,

157 "SëÅimêö sec⁄d†bëwì¿LCPÑëønsmissi⁄s", 
OPT_PRIO
 },

158 { "l˝-max-ãrmö©e", 
o_öt
, &
l˝_fsm
[0].
maxãrmå™smôs
,

159 "Së maximumÇumbî o‡LCPÅîmö©e-ªque°Åønsmissi⁄s", 
OPT_PRIO
 },

160 { "l˝-max-c⁄figuª", 
o_öt
, &
l˝_fsm
[0].
maxc⁄‰eqå™smôs
,

161 "Së maximumÇumbî o‡LCP c⁄figuª-ªque°Åønsmissi⁄s", 
OPT_PRIO
 },

162 { "l˝-max-Áûuª", 
o_öt
, &
l˝_fsm
[0].
max«klo›s
,

163 "SëÜimô o¿numbî o‡LCP c⁄figuª-«ks", 
OPT_PRIO
 },

165 { "ª˚ive-Æl", 
o_boﬁ
, &
œx_ªcv
,

168 #ifde‡
HAVE_MULTILINK


169 { "mºu", 
o_öt
, &
l˝_w™t›ti⁄s
[0].
mºu
,

171 
OPT_PRIO
, &
l˝_w™t›ti⁄s
[0].
√g_mºu
 },

173 { "mpsh‹t£q", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_s¢hf
,

175 
OPT_PRIO
 | 1, &
l˝_Ælow›ti⁄s
[0].
√g_s¢hf
 },

176 { "nompsh‹t£q", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_s¢hf
,

178 
OPT_PRIOSUB
 | 
OPT_A2CLR
, &
l˝_Ælow›ti⁄s
[0].
√g_s¢hf
 },

180 { "ídpoöt", 
o_•ecül
, (*Ë
£ãndpoöt
,

182 
OPT_PRIO
 | 
OPT_A2PRINTER
, (*Ë
¥öãndpoöt
 },

185 { "n€ndpoöt", 
o_boﬁ
, &
n€ndpoöt
,

188 {
NULL
}

189 
	}
};

192 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

193 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

194 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

195 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

196 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

198 
	gl˝_echos_≥ndög
 = 0;

199 
	gl˝_echo_numbî
 = 0;

200 
	gl˝_echo_timî_ru¬ög
 = 0;

202 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

207 
l˝_ª£tci
 
__P
((
fsm
 *));

208 
l˝_cûí
 
__P
((
fsm
 *));

209 
l˝_addci
 
__P
((
fsm
 *, 
u_ch¨
 *, *));

210 
l˝_ackci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

211 
l˝_«kci
 
__P
((
fsm
 *, 
u_ch¨
 *, , ));

212 
l˝_ªjci
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

213 
l˝_ªqci
 
__P
((
fsm
 *, 
u_ch¨
 *, *, ));

214 
l˝_up
 
__P
((
fsm
 *));

215 
l˝_down
 
__P
((
fsm
 *));

216 
l˝_°¨tög
 
__P
((
fsm
 *));

217 
l˝_föished
 
__P
((
fsm
 *));

218 
l˝_extcode
 
__P
((
fsm
 *, , , 
u_ch¨
 *, ));

219 
l˝_ΩrŸªj
 
__P
((
fsm
 *, 
u_ch¨
 *, ));

225 
l˝_echo_lowîup
 
__P
(());

226 
l˝_echo_lowîdown
 
__P
(());

227 
L˝EchoTimeout
 
__P
((*));

228 
l˝_ª˚ived_echo_ª∂y
 
__P
((
fsm
 *, , 
u_ch¨
 *, ));

229 
L˝SídEchoReque°
 
__P
((
fsm
 *));

230 
L˝LökFaûuª
 
__P
((
fsm
 *));

231 
L˝EchoCheck
 
__P
((
fsm
 *));

233 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

234 
l˝_ª£tci
,

235 
l˝_cûí
,

236 
l˝_addci
,

237 
l˝_ackci
,

238 
l˝_«kci
,

239 
l˝_ªjci
,

240 
l˝_ªqci
,

241 
l˝_up
,

242 
l˝_down
,

243 
l˝_°¨tög
,

244 
l˝_föished
,

245 
NULL
,

246 
NULL
,

247 
l˝_extcode
,

256 
l˝_öô
 
__P
(());

257 
l˝_öput
 
__P
((, 
u_ch¨
 *, ));

258 
l˝_¥Ÿªj
 
__P
(());

259 
l˝_¥öçkt
 
__P
((
u_ch¨
 *, ,

260 (*Ë
	`__P
((*, *, ...)), *));

262 
¥Ÿít
 
l˝_¥Ÿít
 = {

263 
PPP_LCP
,

264 
l˝_öô
,

265 
l˝_öput
,

266 
l˝_¥Ÿªj
,

267 
l˝_lowîup
,

268 
l˝_lowîdown
,

269 
l˝_›í
,

270 
l˝_˛o£
,

271 
l˝_¥öçkt
,

272 
NULL
,

275 
NULL
,

276 
l˝_›ti⁄_li°
,

277 
NULL
,

278 
NULL
,

279 
NULL


280 
	}
};

282 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

287 
	#CILEN_VOID
 2

	)

288 
	#CILEN_CHAR
 3

	)

289 
	#CILEN_SHORT
 4

	)

290 
	#CILEN_CHAP
 5

	)

291 
	#CILEN_LONG
 6

	)

292 
	#CILEN_LQR
 8

	)

293 
	#CILEN_CBCP
 3

	)

295 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

296 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

302 
	$no›t
(
¨gv
)

303 **
¨gv
;

305 
	`BZERO
((*Ë&
l˝_w™t›ti⁄s
[0],  (
l˝_›ti⁄s
));

306 
	`BZERO
((*Ë&
l˝_Ælow›ti⁄s
[0],  (
l˝_›ti⁄s
));

309 
	}
}

311 #ifde‡
HAVE_MULTILINK


313 
	$£ãndpoöt
(
¨gv
)

314 **
¨gv
;

316 i‡(
	`°r_to_ïdisc
(&
l˝_w™t›ti⁄s
[0].
ídpoöt
, *
¨gv
)) {

317 
l˝_w™t›ti⁄s
[0].
√g_ídpoöt
 = 1;

320 
	`›ti⁄_îr‹
("C™'à∑r£ '%s'á†™Éndpoöàdis¸imö©‹", *
¨gv
);

322 
	}
}

325 
	$¥öãndpoöt
(
›t
, 
¥öãr
, 
¨g
)

326 
›ti⁄_t
 *
›t
;

327 (*
¥öãr
Ë
	`__P
((*, *, ...));

328 *
¨g
;

330 
	`¥öãr
(
¨g
, "%s", 
	`ïdisc_to_°r
(&
l˝_w™t›ti⁄s
[0].
ídpoöt
));

331 
	}
}

338 
	$l˝_öô
(
unô
)

339 
unô
;

341 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

342 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

343 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

345 
f
->
unô
 = unit;

346 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

347 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

349 
	`fsm_öô
(
f
);

351 
	`BZERO
(
wo
, (*wo));

352 
wo
->
√g_mru
 = 1;

353 
wo
->
mru
 = 
DEFMRU
;

354 
wo
->
√g_asyncm≠
 = 1;

355 
wo
->
√g_magi˙umbî
 = 1;

356 
wo
->
√g_pcom¥essi⁄
 = 1;

357 
wo
->
√g_accom¥essi⁄
 = 1;

359 
	`BZERO
(
ao
, (*ao));

360 
ao
->
√g_mru
 = 1;

361 
ao
->
mru
 = 
MAXMRU
;

362 
ao
->
√g_asyncm≠
 = 1;

363 
ao
->
√g_ch≠
 = 1;

364 
ao
->
ch≠_mdty≥
 = 
ch≠_mdty≥_Æl
;

365 
ao
->
√g_u∑p
 = 1;

366 
ao
->
√g_óp
 = 1;

367 
ao
->
√g_magi˙umbî
 = 1;

368 
ao
->
√g_pcom¥essi⁄
 = 1;

369 
ao
->
√g_accom¥essi⁄
 = 1;

370 
ao
->
√g_ídpoöt
 = 1;

371 
	}
}

378 
	$l˝_›í
(
unô
)

379 
unô
;

381 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

382 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

384 
f
->
Êags
 &~(
OPT_PASSIVE
 | 
OPT_SILENT
);

385 i‡(
wo
->
∑ssive
)

386 
f
->
Êags
 |
OPT_PASSIVE
;

387 i‡(
wo
->
sûít
)

388 
f
->
Êags
 |
OPT_SILENT
;

389 
	`fsm_›í
(
f
);

390 
	}
}

397 
	$l˝_˛o£
(
unô
, 
ªas⁄
)

398 
unô
;

399 *
ªas⁄
;

401 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

402 
ﬁd°©e
;

404 i‡(
pha£
 !
PHASE_DEAD
 &&Öha£ !
PHASE_MASTER
)

405 
	`√w_pha£
(
PHASE_TERMINATE
);

407 i‡(
f
->
Êags
 & 
DELAYED_UP
) {

408 
	`u¡imeout
(
l˝_dñayed_up
, 
f
);

409 
f
->
°©e
 = 
STOPPED
;

411 
ﬁd°©e
 = 
f
->
°©e
;

413 
	`fsm_˛o£
(
f
, 
ªas⁄
);

414 i‡(
ﬁd°©e
 =
STOPPED
 && 
f
->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
|
DELAYED_UP
)) {

422 
f
->
Êags
 &~
DELAYED_UP
;

423 
	`l˝_föished
(
f
);

425 
	}
}

432 
	$l˝_lowîup
(
unô
)

433 
unô
;

435 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

436 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

443 i‡(
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffff, 0, 0) < 0

444 || 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, (
œx_ªcv
? 0: 0xffffffff),

445 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
) < 0)

447 
≥î_mru
[
unô
] = 
PPP_MRU
;

449 i‡(
li°í_time
 != 0) {

450 
f
->
Êags
 |
DELAYED_UP
;

451 
	`timeout
(
l˝_dñayed_up
, 
f
, 0, 
li°í_time
 * 1000);

453 
	`fsm_lowîup
(
f
);

454 
	}
}

461 
	$l˝_lowîdown
(
unô
)

462 
unô
;

464 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

466 i‡(
f
->
Êags
 & 
DELAYED_UP
) {

467 
f
->
Êags
 &~
DELAYED_UP
;

468 
	`u¡imeout
(
l˝_dñayed_up
, 
f
);

470 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

471 
	}
}

478 
	$l˝_dñayed_up
(
¨g
)

479 *
¨g
;

481 
fsm
 *
f
 = 
¨g
;

483 i‡(
f
->
Êags
 & 
DELAYED_UP
) {

484 
f
->
Êags
 &~
DELAYED_UP
;

485 
	`fsm_lowîup
(
f
);

487 
	}
}

494 
	$l˝_öput
(
unô
, 
p
, 
Àn
)

495 
unô
;

496 
u_ch¨
 *
p
;

497 
Àn
;

499 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

501 i‡(
f
->
Êags
 & 
DELAYED_UP
) {

502 
f
->
Êags
 &~
DELAYED_UP
;

503 
	`u¡imeout
(
l˝_dñayed_up
, 
f
);

504 
	`fsm_lowîup
(
f
);

506 
	`fsm_öput
(
f
, 
p
, 
Àn
);

507 
	}
}

513 
	$l˝_extcode
(
f
, 
code
, 
id
, 
öp
, 
Àn
)

514 
fsm
 *
f
;

515 
code
, 
id
;

516 
u_ch¨
 *
öp
;

517 
Àn
;

519 
u_ch¨
 *
magp
;

521  
code
 ){

522 
PROTREJ
:

523 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

526 
ECHOREQ
:

527 i‡(
f
->
°©e
 !
OPENED
)

529 
magp
 = 
öp
;

530 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

531 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

534 
ECHOREP
:

535 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

538 
DISCREQ
:

539 
IDENTIF
:

540 
TIMEREM
:

547 
	}
}

556 
	$l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
)

557 
fsm
 *
f
;

558 
u_ch¨
 *
öp
;

559 
Àn
;

561 
i
;

562 
¥Ÿít
 *
¥Ÿp
;

563 
u_sh‹t
 
¥Ÿ
;

564 c⁄° *
≤ame
;

566 i‡(
Àn
 < 2) {

567 
	`LCPDEBUG
(("lcp_rprotrej: Rcvd short Protocol-RejectÖacket!"));

571 
	`GETSHORT
(
¥Ÿ
, 
öp
);

577 if–
f
->
°©e
 !
OPENED
 ){

578 
	`LCPDEBUG
(("PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d", 
f
->
°©e
));

582 
≤ame
 = 
	`¥Ÿocﬁ_«me
(
¥Ÿ
);

587 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

588 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

589 i‡(
≤ame
 =
NULL
)

590 
	`dbglog
("PrŸocﬁ-Reje˘ f‹ 0x%xÑe˚ived", 
¥Ÿ
);

592 
	`dbglog
("PrŸocﬁ-Reje˘ f‹ '%s' (0x%xËª˚ived", 
≤ame
,

593 
¥Ÿ
);

594 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

598 i‡(
≤ame
 =
NULL
)

599 
	`w¨n
("PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x", 
¥Ÿ
);

601 
	`w¨n
("PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ '%s' (0x%x)", 
≤ame
,

602 
¥Ÿ
);

603 
	}
}

611 
	$l˝_¥Ÿªj
(
unô
)

612 
unô
;

617 
	`îr‹
("Received Protocol-Reject for LCP!");

618 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

619 
	}
}

626 
	$l˝_•rŸªj
(
unô
, 
p
, 
Àn
)

627 
unô
;

628 
u_ch¨
 *
p
;

629 
Àn
;

635 
p
 += 2;

636 
Àn
 -= 2;

638 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
,

639 
p
, 
Àn
);

640 
	}
}

647 
	$l˝_ª£tci
(
f
)

648 
fsm
 *
f
;

650 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

651 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

652 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

654 
wo
->
magi˙umbî
 = 
	`magic
();

655 
wo
->
numlo›s
 = 0;

656 *
go
 = *
wo
;

657 i‡(!
mu…ûök
) {

658 
go
->
√g_mºu
 = 0;

659 
go
->
√g_s¢hf
 = 0;

660 
go
->
√g_ídpoöt
 = 0;

662 i‡(
n€ndpoöt
)

663 
ao
->
√g_ídpoöt
 = 0;

664 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

665 
	`auth_ª£t
(
f
->
unô
);

666 
	}
}

673 
	$l˝_cûí
(
f
)

674 
fsm
 *
f
;

676 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

678 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

679 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

680 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

681 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

682 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

683 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

689  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
DEFMRU
) +

690 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFF) +

691 
	`LENCISHORT
(
go
->
√g_óp
) +

692 
	`LENCICHAP
(!
go
->
√g_óp
 && go->
√g_ch≠
) +

693 
	`LENCISHORT
(!
go
->
√g_óp
 && !go->
√g_ch≠
 && go->
√g_u∑p
) +

694 
	`LENCILQR
(
go
->
√g_lqr
) +

695 
	`LENCICBCP
(
go
->
√g_cb˝
) +

696 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

697 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

698 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
) +

699 
	`LENCISHORT
(
go
->
√g_mºu
) +

700 
	`LENCIVOID
(
go
->
√g_s¢hf
) +

701 (
go
->
√g_ídpoöt
? 
CILEN_CHAR
 + go->
ídpoöt
.
Àngth
: 0));

702 
	}
}

709 
	$l˝_addci
(
f
, 
u˝
, 
À≈
)

710 
fsm
 *
f
;

711 
u_ch¨
 *
u˝
;

712 *
À≈
;

714 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

715 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

717 
	#ADDCIVOID
(
›t
, 
√g
) \

718 i‡(
√g
) { \

719 
	`PUTCHAR
(
›t
, 
u˝
); \

720 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

721 }

	)

722 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

723 i‡(
√g
) { \

724 
	`PUTCHAR
(
›t
, 
u˝
); \

725 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

726 
	`PUTSHORT
(
vÆ
, 
u˝
); \

727 }

	)

728 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
) \

729 i‡(
√g
) { \

730 
	`PUTCHAR
((
›t
), 
u˝
); \

731 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

732 
	`PUTSHORT
(
PPP_CHAP
, 
u˝
); \

733 
	`PUTCHAR
((
	`CHAP_DIGEST
(
vÆ
)), 
u˝
); \

734 }

	)

735 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

736 i‡(
√g
) { \

737 
	`PUTCHAR
(
›t
, 
u˝
); \

738 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

739 
	`PUTLONG
(
vÆ
, 
u˝
); \

740 }

	)

741 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

742 i‡(
√g
) { \

743 
	`PUTCHAR
(
›t
, 
u˝
); \

744 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

745 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

746 
	`PUTLONG
(
vÆ
, 
u˝
); \

747 }

	)

748 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

749 i‡(
√g
) { \

750 
	`PUTCHAR
(
›t
, 
u˝
); \

751 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

752 
	`PUTCHAR
(
vÆ
, 
u˝
); \

753 }

	)

754 
	#ADDCIENDP
(
›t
, 
√g
, 
˛ass
, 
vÆ
, 
Àn
) \

755 i‡(
√g
) { \

756 
i
; \

757 
	`PUTCHAR
(
›t
, 
u˝
); \

758 
	`PUTCHAR
(
CILEN_CHAR
 + 
Àn
, 
u˝
); \

759 
	`PUTCHAR
(
˛ass
, 
u˝
); \

760 
i
 = 0; i < 
Àn
; ++i) \

761 
	`PUTCHAR
(
vÆ
[
i
], 
u˝
); \

762 }

	)

764 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
DEFMRU
, go->mru);

765 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFF,

766 
go
->
asyncm≠
);

767 
	`ADDCISHORT
(
CI_AUTHTYPE
, 
go
->
√g_óp
, 
PPP_EAP
);

768 
	`ADDCICHAP
(
CI_AUTHTYPE
, !
go
->
√g_óp
 && go->
√g_ch≠
, go->
ch≠_mdty≥
);

769 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_óp
 && !go->
√g_ch≠
 && go->
√g_u∑p
,

770 
PPP_PAP
);

771 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

772 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

773 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

774 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

775 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

776 
	`ADDCISHORT
(
CI_MRRU
, 
go
->
√g_mºu
, go->
mºu
);

777 
	`ADDCIVOID
(
CI_SSNHF
, 
go
->
√g_s¢hf
);

778 
	`ADDCIENDP
(
CI_EPDISC
, 
go
->
√g_ídpoöt
, go->
ídpoöt
.
˛ass
,

779 
go
->
ídpoöt
.
vÆue
, go->ídpoöt.
Àngth
);

781 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

783 
	`îr‹
("Bug inÜcp_addci: wrongÜength");

785 
	}
}

797 
	$l˝_ackci
(
f
, 
p
, 
Àn
)

798 
fsm
 *
f
;

799 
u_ch¨
 *
p
;

800 
Àn
;

802 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

803 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

804 
u_sh‹t
 
cish‹t
;

805 
u_öt32_t
 
cû⁄g
;

812 
	#ACKCIVOID
(
›t
, 
√g
) \

813 i‡(
√g
) { \

814 i‡((
Àn
 -
CILEN_VOID
) < 0) \

815 
bad
; \

816 
	`GETCHAR
(
côy≥
, 
p
); \

817 
	`GETCHAR
(
cûí
, 
p
); \

818 i‡(
cûí
 !
CILEN_VOID
 || \

819 
côy≥
 !
›t
) \

820 
bad
; \

821 }

	)

822 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

823 i‡(
√g
) { \

824 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

825 
bad
; \

826 
	`GETCHAR
(
côy≥
, 
p
); \

827 
	`GETCHAR
(
cûí
, 
p
); \

828 i‡(
cûí
 !
CILEN_SHORT
 || \

829 
côy≥
 !
›t
) \

830 
bad
; \

831 
	`GETSHORT
(
cish‹t
, 
p
); \

832 i‡(
cish‹t
 !
vÆ
) \

833 
bad
; \

834 }

	)

835 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

836 i‡(
√g
) { \

837 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

838 
bad
; \

839 
	`GETCHAR
(
côy≥
, 
p
); \

840 
	`GETCHAR
(
cûí
, 
p
); \

841 i‡(
cûí
 !
CILEN_CHAR
 || \

842 
côy≥
 !
›t
) \

843 
bad
; \

844 
	`GETCHAR
(
cich¨
, 
p
); \

845 i‡(
cich¨
 !
vÆ
) \

846 
bad
; \

847 }

	)

848 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
) \

849 i‡(
√g
) { \

850 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

851 
bad
; \

852 
	`GETCHAR
(
côy≥
, 
p
); \

853 
	`GETCHAR
(
cûí
, 
p
); \

854 i‡(
cûí
 !
CILEN_CHAP
 || \

855 
côy≥
 !(
›t
)) \

856 
bad
; \

857 
	`GETSHORT
(
cish‹t
, 
p
); \

858 i‡(
cish‹t
 !
PPP_CHAP
) \

859 
bad
; \

860 
	`GETCHAR
(
cich¨
, 
p
); \

861 i‡(
cich¨
 !(
	`CHAP_DIGEST
(
vÆ
))) \

862 
bad
; \

863 }

	)

864 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

865 i‡(
√g
) { \

866 i‡((
Àn
 -
CILEN_LONG
) < 0) \

867 
bad
; \

868 
	`GETCHAR
(
côy≥
, 
p
); \

869 
	`GETCHAR
(
cûí
, 
p
); \

870 i‡(
cûí
 !
CILEN_LONG
 || \

871 
côy≥
 !
›t
) \

872 
bad
; \

873 
	`GETLONG
(
cû⁄g
, 
p
); \

874 i‡(
cû⁄g
 !
vÆ
) \

875 
bad
; \

876 }

	)

877 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

878 i‡(
√g
) { \

879 i‡((
Àn
 -
CILEN_LQR
) < 0) \

880 
bad
; \

881 
	`GETCHAR
(
côy≥
, 
p
); \

882 
	`GETCHAR
(
cûí
, 
p
); \

883 i‡(
cûí
 !
CILEN_LQR
 || \

884 
côy≥
 !
›t
) \

885 
bad
; \

886 
	`GETSHORT
(
cish‹t
, 
p
); \

887 i‡(
cish‹t
 !
PPP_LQR
) \

888 
bad
; \

889 
	`GETLONG
(
cû⁄g
, 
p
); \

890 i‡(
cû⁄g
 !
vÆ
) \

891 
bad
; \

892 }

	)

893 
	#ACKCIENDP
(
›t
, 
√g
, 
˛ass
, 
vÆ
, 
vÀn
) \

894 i‡(
√g
) { \

895 
i
; \

896 i‡((
Àn
 -
CILEN_CHAR
 + 
vÀn
) < 0) \

897 
bad
; \

898 
	`GETCHAR
(
côy≥
, 
p
); \

899 
	`GETCHAR
(
cûí
, 
p
); \

900 i‡(
cûí
 !
CILEN_CHAR
 + 
vÀn
 || \

901 
côy≥
 !
›t
) \

902 
bad
; \

903 
	`GETCHAR
(
cich¨
, 
p
); \

904 i‡(
cich¨
 !
˛ass
) \

905 
bad
; \

906 
i
 = 0; i < 
vÀn
; ++i) { \

907 
	`GETCHAR
(
cich¨
, 
p
); \

908 i‡(
cich¨
 !
vÆ
[
i
]) \

909 
bad
; \

911 }

	)

913 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
DEFMRU
, go->mru);

914 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFF,

915 
go
->
asyncm≠
);

916 
	`ACKCISHORT
(
CI_AUTHTYPE
, 
go
->
√g_óp
, 
PPP_EAP
);

917 
	`ACKCICHAP
(
CI_AUTHTYPE
, !
go
->
√g_óp
 && go->
√g_ch≠
, go->
ch≠_mdty≥
);

918 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_óp
 && !go->
√g_ch≠
 && go->
√g_u∑p
,

919 
PPP_PAP
);

920 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

921 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

922 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

923 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

924 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

925 
	`ACKCISHORT
(
CI_MRRU
, 
go
->
√g_mºu
, go->
mºu
);

926 
	`ACKCIVOID
(
CI_SSNHF
, 
go
->
√g_s¢hf
);

927 
	`ACKCIENDP
(
CI_EPDISC
, 
go
->
√g_ídpoöt
, go->
ídpoöt
.
˛ass
,

928 
go
->
ídpoöt
.
vÆue
, go->ídpoöt.
Àngth
);

933 i‡(
Àn
 != 0)

934 
bad
;

936 
bad
:

937 
	`LCPDEBUG
(("lcp_acki:Ñeceived bad Ack!"));

939 
	}
}

952 
	$l˝_«kci
(
f
, 
p
, 
Àn
, 
åót_as_ªje˘
)

953 
fsm
 *
f
;

954 
u_ch¨
 *
p
;

955 
Àn
;

956 
åót_as_ªje˘
;

958 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

959 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

960 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

961 
u_sh‹t
 
cish‹t
;

962 
u_öt32_t
 
cû⁄g
;

963 
l˝_›ti⁄s
 
no
;

964 
l˝_›ti⁄s
 
åy
;

965 
lo›ed_back
 = 0;

966 
cûí
;

968 
	`BZERO
(&
no
, (no));

969 
åy
 = *
go
;

976 
	#NAKCIVOID
(
›t
, 
√g
) \

977 i‡(
go
->
√g
 && \

978 
Àn
 >
CILEN_VOID
 && \

979 
p
[1] =
CILEN_VOID
 && \

980 
p
[0] =
›t
) { \

981 
Àn
 -
CILEN_VOID
; \

982 
	`INCPTR
(
CILEN_VOID
, 
p
); \

983 
no
.
√g
 = 1; \

984 
åy
.
√g
 = 0; \

985 }

	)

986 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

987 i‡(
go
->
√g
 && \

988 
Àn
 >
CILEN_CHAP
 && \

989 
p
[1] =
CILEN_CHAP
 && \

990 
p
[0] =
›t
) { \

991 
Àn
 -
CILEN_CHAP
; \

992 
	`INCPTR
(2, 
p
); \

993 
	`GETSHORT
(
cish‹t
, 
p
); \

994 
	`GETCHAR
(
cich¨
, 
p
); \

995 
no
.
√g
 = 1; \

996 
code
 \

997 }

	)

998 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

999 i‡(
go
->
√g
 && \

1000 
Àn
 >
CILEN_CHAR
 && \

1001 
p
[1] =
CILEN_CHAR
 && \

1002 
p
[0] =
›t
) { \

1003 
Àn
 -
CILEN_CHAR
; \

1004 
	`INCPTR
(2, 
p
); \

1005 
	`GETCHAR
(
cich¨
, 
p
); \

1006 
no
.
√g
 = 1; \

1007 
code
 \

1008 }

	)

1009 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

1010 i‡(
go
->
√g
 && \

1011 
Àn
 >
CILEN_SHORT
 && \

1012 
p
[1] =
CILEN_SHORT
 && \

1013 
p
[0] =
›t
) { \

1014 
Àn
 -
CILEN_SHORT
; \

1015 
	`INCPTR
(2, 
p
); \

1016 
	`GETSHORT
(
cish‹t
, 
p
); \

1017 
no
.
√g
 = 1; \

1018 
code
 \

1019 }

	)

1020 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

1021 i‡(
go
->
√g
 && \

1022 
Àn
 >
CILEN_LONG
 && \

1023 
p
[1] =
CILEN_LONG
 && \

1024 
p
[0] =
›t
) { \

1025 
Àn
 -
CILEN_LONG
; \

1026 
	`INCPTR
(2, 
p
); \

1027 
	`GETLONG
(
cû⁄g
, 
p
); \

1028 
no
.
√g
 = 1; \

1029 
code
 \

1030 }

	)

1031 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

1032 i‡(
go
->
√g
 && \

1033 
Àn
 >
CILEN_LQR
 && \

1034 
p
[1] =
CILEN_LQR
 && \

1035 
p
[0] =
›t
) { \

1036 
Àn
 -
CILEN_LQR
; \

1037 
	`INCPTR
(2, 
p
); \

1038 
	`GETSHORT
(
cish‹t
, 
p
); \

1039 
	`GETLONG
(
cû⁄g
, 
p
); \

1040 
no
.
√g
 = 1; \

1041 
code
 \

1042 }

	)

1043 
	#NAKCIENDP
(
›t
, 
√g
) \

1044 i‡(
go
->
√g
 && \

1045 
Àn
 >
CILEN_CHAR
 && \

1046 
p
[0] =
›t
 && \

1047 
p
[1] >
CILEN_CHAR
 && \

1048 
p
[1] <
Àn
) { \

1049 
Àn
 -
p
[1]; \

1050 
	`INCPTR
(
p
[1],Ö); \

1051 
no
.
√g
 = 1; \

1052 
åy
.
√g
 = 0; \

1053 }

	)

1066 i‡(
go
->
√g_mru
 && go->
mru
 !
DEFMRU
) {

1067 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

1068 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à<
DEFMRU
)

1069 
åy
.
mru
 = 
cish‹t
;

1076 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFF) {

1077 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

1078 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

1087 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
 || go->
√g_óp
)

1088 && 
Àn
 >
CILEN_SHORT


1089 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

1090 
cûí
 = 
p
[1];

1091 
Àn
 -
cûí
;

1092 
no
.
√g_ch≠
 = 
go
->neg_chap;

1093 
no
.
√g_u∑p
 = 
go
->neg_upap;

1094 
no
.
√g_óp
 = 
go
->neg_eap;

1095 
	`INCPTR
(2, 
p
);

1096 
	`GETSHORT
(
cish‹t
, 
p
);

1097 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

1099 i‡(
go
->
√g_óp
)

1100 
åy
.
√g_óp
 = 0;

1103 i‡(
go
->
√g_ch≠
)

1104 
åy
.
√g_ch≠
 = 0;

1110 
bad
;

1112 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

1113 
	`GETCHAR
(
cich¨
, 
p
);

1115 i‡(
go
->
√g_óp
) {

1116 
åy
.
√g_óp
 = 0;

1118 i‡(
	`CHAP_CANDIGEST
(
go
->
ch≠_mdty≥
, 
cich¨
))

1119 
åy
.
ch≠_mdty≥
 = 
	`CHAP_MDTYPE_D
(
cich¨
);

1120 } i‡(
go
->
√g_ch≠
) {

1125 i‡(
cich¨
 !
	`CHAP_DIGEST
(
go
->
ch≠_mdty≥
)) {

1126 i‡(
	`CHAP_CANDIGEST
(
go
->
ch≠_mdty≥
, 
cich¨
)) {

1128 
åy
.
ch≠_mdty≥
 = 
	`CHAP_MDTYPE_D
(
cich¨
);

1131 
åy
.
ch≠_mdty≥
 &~(
	`CHAP_MDTYPE
(try.chap_mdtype));

1132 i‡(
åy
.
ch≠_mdty≥
 =
MDTYPE_NONE
)

1133 
åy
.
√g_ch≠
 = 0;

1140 
bad
;

1146 
åy
.
√g_u∑p
 = 0;

1155 i‡(
cish‹t
 =
PPP_EAP
 && 
cûí
 =
CILEN_SHORT
 && 
go
->
√g_óp
)

1156 
	`dbglog
("Unexpected Conf-Nak for EAP");

1162 i‡(
go
->
√g_óp
)

1163 
åy
.
√g_óp
 = 0;

1164 i‡(
go
->
√g_ch≠
)

1165 
åy
.
√g_ch≠
 = 0;

1167 
åy
.
√g_u∑p
 = 0;

1168 
p
 +
cûí
 - 
CILEN_SHORT
;

1177 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

1178 i‡(
cish‹t
 !
PPP_LQR
)

1179 
åy
.
√g_lqr
 = 0;

1181 
åy
.
lqr_≥riod
 = 
cû⁄g
;

1187 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

1188 
åy
.
√g_cb˝
 = 0;

1194 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

1195 
åy
.
magi˙umbî
 = 
	`magic
();

1196 
lo›ed_back
 = 1;

1204 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1205 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1211 i‡(
go
->
√g_mºu
) {

1212 
	`NAKCISHORT
(
CI_MRRU
, 
√g_mºu
,

1213 i‡(
åót_as_ªje˘
)

1214 
åy
.
√g_mºu
 = 0;

1215 i‡(
cish‹t
 <
wo
->
mºu
)

1216 
åy
.
mºu
 = 
cish‹t
;

1224 
	`NAKCIVOID
(
CI_SSNHF
, 
√g_s¢hf
);

1230 
	`NAKCIENDP
(
CI_EPDISC
, 
√g_ídpoöt
);

1248 
Àn
 >
CILEN_VOID
) {

1249 
	`GETCHAR
(
côy≥
, 
p
);

1250 
	`GETCHAR
(
cûí
, 
p
);

1251 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0)

1252 
bad
;

1253 
√xt
 = 
p
 + 
cûí
 - 2;

1255 
côy≥
) {

1256 
CI_MRU
:

1257 i‡((
go
->
√g_mru
 && go->
mru
 !
DEFMRU
)

1258 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
)

1259 
bad
;

1260 
	`GETSHORT
(
cish‹t
, 
p
);

1261 i‡(
cish‹t
 < 
DEFMRU
) {

1262 
åy
.
√g_mru
 = 1;

1263 
åy
.
mru
 = 
cish‹t
;

1266 
CI_ASYNCMAP
:

1267 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFF)

1268 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
)

1269 
bad
;

1271 
CI_AUTHTYPE
:

1272 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap ||

1273 
go
->
√g_óp
 || 
no
.neg_eap)

1274 
bad
;

1276 
CI_MAGICNUMBER
:

1277 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

1278 
cûí
 !
CILEN_LONG
)

1279 
bad
;

1281 
CI_PCOMPRESSION
:

1282 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

1283 || 
cûí
 !
CILEN_VOID
)

1284 
bad
;

1286 
CI_ACCOMPRESSION
:

1287 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

1288 || 
cûí
 !
CILEN_VOID
)

1289 
bad
;

1291 
CI_QUALITY
:

1292 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
)

1293 
bad
;

1295 
CI_MRRU
:

1296 i‡(
go
->
√g_mºu
 || 
no
.√g_mºu || 
cûí
 !
CILEN_SHORT
)

1297 
bad
;

1299 
CI_SSNHF
:

1300 i‡(
go
->
√g_s¢hf
 || 
no
.√g_s¢h‡|| 
cûí
 !
CILEN_VOID
)

1301 
bad
;

1302 
åy
.
√g_s¢hf
 = 1;

1304 
CI_EPDISC
:

1305 i‡(
go
->
√g_ídpoöt
 || 
no
.√g_ídpoöà|| 
cûí
 < 
CILEN_CHAR
)

1306 
bad
;

1309 
p
 = 
√xt
;

1316 i‡(
f
->
°©e
 !
OPENED
) {

1317 i‡(
lo›ed_back
) {

1318 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1319 
	`nŸi˚
("SerialÜine isÜooped back.");

1320 
°©us
 = 
EXIT_LOOPBACK
;

1321 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1324 
åy
.
numlo›s
 = 0;

1325 *
go
 = 
åy
;

1330 
bad
:

1331 
	`LCPDEBUG
(("lcp_nakci:Ñeceived bad Nak!"));

1333 
	}
}

1346 
	$l˝_ªjci
(
f
, 
p
, 
Àn
)

1347 
fsm
 *
f
;

1348 
u_ch¨
 *
p
;

1349 
Àn
;

1351 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1352 
u_ch¨
 
cich¨
;

1353 
u_sh‹t
 
cish‹t
;

1354 
u_öt32_t
 
cû⁄g
;

1355 
l˝_›ti⁄s
 
åy
;

1357 
åy
 = *
go
;

1364 
	#REJCIVOID
(
›t
, 
√g
) \

1365 i‡(
go
->
√g
 && \

1366 
Àn
 >
CILEN_VOID
 && \

1367 
p
[1] =
CILEN_VOID
 && \

1368 
p
[0] =
›t
) { \

1369 
Àn
 -
CILEN_VOID
; \

1370 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1371 
åy
.
√g
 = 0; \

1372 }

	)

1373 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1374 i‡(
go
->
√g
 && \

1375 
Àn
 >
CILEN_SHORT
 && \

1376 
p
[1] =
CILEN_SHORT
 && \

1377 
p
[0] =
›t
) { \

1378 
Àn
 -
CILEN_SHORT
; \

1379 
	`INCPTR
(2, 
p
); \

1380 
	`GETSHORT
(
cish‹t
, 
p
); \

1382 i‡(
cish‹t
 !
vÆ
) \

1383 
bad
; \

1384 
åy
.
√g
 = 0; \

1385 }

	)

1386 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
) \

1387 i‡(
go
->
√g
 && \

1388 
Àn
 >
CILEN_CHAP
 && \

1389 
p
[1] =
CILEN_CHAP
 && \

1390 
p
[0] =
›t
) { \

1391 
Àn
 -
CILEN_CHAP
; \

1392 
	`INCPTR
(2, 
p
); \

1393 
	`GETSHORT
(
cish‹t
, 
p
); \

1394 
	`GETCHAR
(
cich¨
, 
p
); \

1396 i‡((
cish‹t
 !
PPP_CHAP
Ë|| (
cich¨
 !(
	`CHAP_DIGEST
(
vÆ
)))) \

1397 
bad
; \

1398 
åy
.
√g
 = 0; \

1399 
åy
.
√g_óp
 =Åry.
√g_u∑p
 = 0; \

1400 }

	)

1401 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1402 i‡(
go
->
√g
 && \

1403 
Àn
 >
CILEN_LONG
 && \

1404 
p
[1] =
CILEN_LONG
 && \

1405 
p
[0] =
›t
) { \

1406 
Àn
 -
CILEN_LONG
; \

1407 
	`INCPTR
(2, 
p
); \

1408 
	`GETLONG
(
cû⁄g
, 
p
); \

1410 i‡(
cû⁄g
 !
vÆ
) \

1411 
bad
; \

1412 
åy
.
√g
 = 0; \

1413 }

	)

1414 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1415 i‡(
go
->
√g
 && \

1416 
Àn
 >
CILEN_LQR
 && \

1417 
p
[1] =
CILEN_LQR
 && \

1418 
p
[0] =
›t
) { \

1419 
Àn
 -
CILEN_LQR
; \

1420 
	`INCPTR
(2, 
p
); \

1421 
	`GETSHORT
(
cish‹t
, 
p
); \

1422 
	`GETLONG
(
cû⁄g
, 
p
); \

1424 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) \

1425 
bad
; \

1426 
åy
.
√g
 = 0; \

1427 }

	)

1428 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1429 i‡(
go
->
√g
 && \

1430 
Àn
 >
CILEN_CBCP
 && \

1431 
p
[1] =
CILEN_CBCP
 && \

1432 
p
[0] =
›t
) { \

1433 
Àn
 -
CILEN_CBCP
; \

1434 
	`INCPTR
(2, 
p
); \

1435 
	`GETCHAR
(
cich¨
, 
p
); \

1437 i‡(
cich¨
 !
vÆ
) \

1438 
bad
; \

1439 
åy
.
√g
 = 0; \

1440 }

	)

1441 
	#REJCIENDP
(
›t
, 
√g
, 
˛ass
, 
vÆ
, 
vÀn
) \

1442 i‡(
go
->
√g
 && \

1443 
Àn
 >
CILEN_CHAR
 + 
vÀn
 && \

1444 
p
[0] =
›t
 && \

1445 
p
[1] =
CILEN_CHAR
 + 
vÀn
) { \

1446 
i
; \

1447 
Àn
 -
CILEN_CHAR
 + 
vÀn
; \

1448 
	`INCPTR
(2, 
p
); \

1449 
	`GETCHAR
(
cich¨
, 
p
); \

1450 i‡(
cich¨
 !
˛ass
) \

1451 
bad
; \

1452 
i
 = 0; i < 
vÀn
; ++i) { \

1453 
	`GETCHAR
(
cich¨
, 
p
); \

1454 i‡(
cich¨
 !
vÆ
[
i
]) \

1455 
bad
; \

1457 
åy
.
√g
 = 0; \

1458 }

	)

1460 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1461 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1462 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_óp
, 
PPP_EAP
);

1463 i‡(!
go
->
√g_óp
) {

1464 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
go
->
ch≠_mdty≥
);

1465 i‡(!
go
->
√g_ch≠
) {

1466 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1469 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1470 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1471 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1472 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1473 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1474 
	`REJCISHORT
(
CI_MRRU
, 
√g_mºu
, 
go
->
mºu
);

1475 
	`REJCIVOID
(
CI_SSNHF
, 
√g_s¢hf
);

1476 
	`REJCIENDP
(
CI_EPDISC
, 
√g_ídpoöt
, 
go
->
ídpoöt
.
˛ass
,

1477 
go
->
ídpoöt
.
vÆue
, go->ídpoöt.
Àngth
);

1482 i‡(
Àn
 != 0)

1483 
bad
;

1487 i‡(
f
->
°©e
 !
OPENED
)

1488 *
go
 = 
åy
;

1491 
bad
:

1492 
	`LCPDEBUG
(("lcp_rejci:Ñeceived bad Reject!"));

1494 
	}
}

1505 
	$l˝_ªqci
(
f
, 
öp
, 
À≈
, 
ªje˘_if_dißgªe
)

1506 
fsm
 *
f
;

1507 
u_ch¨
 *
öp
;

1508 *
À≈
;

1509 
ªje˘_if_dißgªe
;

1511 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1512 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1513 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1514 
u_ch¨
 *
cù
, *
√xt
;

1515 
cûí
, 
côy≥
, 
cich¨
;

1516 
u_sh‹t
 
cish‹t
;

1517 
u_öt32_t
 
cû⁄g
;

1518 
rc
 = 
CONFACK
;

1519 
‹c
;

1520 
u_ch¨
 *
p
;

1521 
u_ch¨
 *
ªjp
;

1522 
u_ch¨
 *
«kp
;

1523 
l
 = *
À≈
;

1528 
	`BZERO
(
ho
, (*ho));

1533 
√xt
 = 
öp
;

1534 
«kp
 = 
«k_buf„r
;

1535 
ªjp
 = 
öp
;

1536 
l
) {

1537 
‹c
 = 
CONFACK
;

1538 
cù
 = 
p
 = 
√xt
;

1539 i‡(
l
 < 2 ||

1540 
p
[1] < 2 ||

1541 
p
[1] > 
l
) {

1542 
	`LCPDEBUG
(("lcp_reqci: bad CIÜength!"));

1543 
‹c
 = 
CONFREJ
;

1544 
cûí
 = 
l
;

1545 
l
 = 0;

1546 
côy≥
 = 0;

1547 
ídswôch
;

1549 
	`GETCHAR
(
côy≥
, 
p
);

1550 
	`GETCHAR
(
cûí
, 
p
);

1551 
l
 -
cûí
;

1552 
√xt
 +
cûí
;

1554 
côy≥
) {

1555 
CI_MRU
:

1556 i‡(!
ao
->
√g_mru
 ||

1557 
cûí
 !
CILEN_SHORT
) {

1558 
‹c
 = 
CONFREJ
;

1561 
	`GETSHORT
(
cish‹t
, 
p
);

1568 i‡(
cish‹t
 < 
MINMRU
) {

1569 
‹c
 = 
CONFNAK
;

1570 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1571 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1572 
	`PUTSHORT
(
MINMRU
, 
«kp
);

1575 
ho
->
√g_mru
 = 1;

1576 
ho
->
mru
 = 
cish‹t
;

1579 
CI_ASYNCMAP
:

1580 i‡(!
ao
->
√g_asyncm≠
 ||

1581 
cûí
 !
CILEN_LONG
) {

1582 
‹c
 = 
CONFREJ
;

1585 
	`GETLONG
(
cû⁄g
, 
p
);

1591 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1592 
‹c
 = 
CONFNAK
;

1593 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1594 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1595 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1598 
ho
->
√g_asyncm≠
 = 1;

1599 
ho
->
asyncm≠
 = 
cû⁄g
;

1602 
CI_AUTHTYPE
:

1603 i‡(
cûí
 < 
CILEN_SHORT
 ||

1604 !(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
 ||áo->
√g_óp
)) {

1608 
	`dbglog
("Noáuth isÖossible");

1609 
‹c
 = 
CONFREJ
;

1612 
	`GETSHORT
(
cish‹t
, 
p
);

1625 i‡(
cish‹t
 =
PPP_PAP
) {

1627 i‡(
ho
->
√g_ch≠
 || ho->
√g_óp
 ||

1628 
cûí
 !
CILEN_SHORT
) {

1629 
	`LCPDEBUG
(("lcp_reqci:Ñcvd AUTHTYPE PAP,Ñejecting..."));

1630 
‹c
 = 
CONFREJ
;

1633 i‡(!
ao
->
√g_u∑p
) {

1634 
‹c
 = 
CONFNAK
;

1635 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1636 i‡(
ao
->
√g_óp
) {

1637 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1638 
	`PUTSHORT
(
PPP_EAP
, 
«kp
);

1640 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1641 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1642 
	`PUTCHAR
(
	`CHAP_DIGEST
(
ao
->
ch≠_mdty≥
), 
«kp
);

1646 
ho
->
√g_u∑p
 = 1;

1649 i‡(
cish‹t
 =
PPP_CHAP
) {

1651 i‡(
ho
->
√g_u∑p
 || ho->
√g_óp
 ||

1652 
cûí
 !
CILEN_CHAP
) {

1653 
	`LCPDEBUG
(("lcp_reqci:Ñcvd AUTHTYPE CHAP,Ñejecting..."));

1654 
‹c
 = 
CONFREJ
;

1657 i‡(!
ao
->
√g_ch≠
) {

1658 
‹c
 = 
CONFNAK
;

1659 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1660 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1661 i‡(
ao
->
√g_óp
) {

1662 
	`PUTSHORT
(
PPP_EAP
, 
«kp
);

1664 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1668 
	`GETCHAR
(
cich¨
, 
p
);

1669 i‡(!(
	`CHAP_CANDIGEST
(
ao
->
ch≠_mdty≥
, 
cich¨
))) {

1674 
‹c
 = 
CONFNAK
;

1675 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1676 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1677 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1678 
	`PUTCHAR
(
	`CHAP_DIGEST
(
ao
->
ch≠_mdty≥
), 
«kp
);

1681 
ho
->
ch≠_mdty≥
 = 
	`CHAP_MDTYPE_D
(
cich¨
);

1682 
ho
->
√g_ch≠
 = 1;

1685 i‡(
cish‹t
 =
PPP_EAP
) {

1687 i‡(
ho
->
√g_ch≠
 || ho->
√g_u∑p
 || 
cûí
 !
CILEN_SHORT
) {

1688 
	`LCPDEBUG
(("lcp_reqci:Ñcvd AUTHTYPE EAP,Ñejecting..."));

1689 
‹c
 = 
CONFREJ
;

1692 i‡(!
ao
->
√g_óp
) {

1693 
‹c
 = 
CONFNAK
;

1694 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1695 i‡(
ao
->
√g_ch≠
) {

1696 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1697 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1698 
	`PUTCHAR
(
	`CHAP_DIGEST
(
ao
->
ch≠_mdty≥
), 
«kp
);

1700 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1701 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1705 
ho
->
√g_óp
 = 1;

1715 
‹c
 = 
CONFNAK
;

1716 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1717 i‡(
ao
->
√g_óp
) {

1718 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1719 
	`PUTSHORT
(
PPP_EAP
, 
«kp
);

1720 } i‡(
ao
->
√g_ch≠
) {

1721 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1722 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1723 
	`PUTCHAR
(
	`CHAP_DIGEST
(
ao
->
ch≠_mdty≥
), 
«kp
);

1725 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1726 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1730 
CI_QUALITY
:

1731 i‡(!
ao
->
√g_lqr
 ||

1732 
cûí
 !
CILEN_LQR
) {

1733 
‹c
 = 
CONFREJ
;

1737 
	`GETSHORT
(
cish‹t
, 
p
);

1738 
	`GETLONG
(
cû⁄g
, 
p
);

1744 i‡(
cish‹t
 !
PPP_LQR
) {

1745 
‹c
 = 
CONFNAK
;

1746 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1747 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1748 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1749 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1754 
CI_MAGICNUMBER
:

1755 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1756 
cûí
 !
CILEN_LONG
) {

1757 
‹c
 = 
CONFREJ
;

1760 
	`GETLONG
(
cû⁄g
, 
p
);

1765 i‡(
go
->
√g_magi˙umbî
 &&

1766 
cû⁄g
 =
go
->
magi˙umbî
) {

1767 
cû⁄g
 = 
	`magic
();

1768 
‹c
 = 
CONFNAK
;

1769 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1770 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1771 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1774 
ho
->
√g_magi˙umbî
 = 1;

1775 
ho
->
magi˙umbî
 = 
cû⁄g
;

1779 
CI_PCOMPRESSION
:

1780 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1781 
cûí
 !
CILEN_VOID
) {

1782 
‹c
 = 
CONFREJ
;

1785 
ho
->
√g_pcom¥essi⁄
 = 1;

1788 
CI_ACCOMPRESSION
:

1789 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1790 
cûí
 !
CILEN_VOID
) {

1791 
‹c
 = 
CONFREJ
;

1794 
ho
->
√g_accom¥essi⁄
 = 1;

1797 
CI_MRRU
:

1798 i‡(!
ao
->
√g_mºu
 || !
mu…ûök
 ||

1799 
cûí
 !
CILEN_SHORT
) {

1800 
‹c
 = 
CONFREJ
;

1804 
	`GETSHORT
(
cish‹t
, 
p
);

1806 
ho
->
√g_mºu
 = 1;

1807 
ho
->
mºu
 = 
cish‹t
;

1810 
CI_SSNHF
:

1811 i‡(!
ao
->
√g_s¢hf
 || !
mu…ûök
 ||

1812 
cûí
 !
CILEN_VOID
) {

1813 
‹c
 = 
CONFREJ
;

1816 
ho
->
√g_s¢hf
 = 1;

1819 
CI_EPDISC
:

1820 i‡(!
ao
->
√g_ídpoöt
 ||

1821 
cûí
 < 
CILEN_CHAR
 ||

1822 
cûí
 > 
CILEN_CHAR
 + 
MAX_ENDP_LEN
) {

1823 
‹c
 = 
CONFREJ
;

1826 
	`GETCHAR
(
cich¨
, 
p
);

1827 
cûí
 -
CILEN_CHAR
;

1828 
ho
->
√g_ídpoöt
 = 1;

1829 
ho
->
ídpoöt
.
˛ass
 = 
cich¨
;

1830 
ho
->
ídpoöt
.
Àngth
 = 
cûí
;

1831 
	`BCOPY
(
p
, 
ho
->
ídpoöt
.
vÆue
, 
cûí
);

1832 
	`INCPTR
(
cûí
, 
p
);

1836 
	`LCPDEBUG
(("l˝_ªqci:Ñcvd unknow¿›ti⁄ %d", 
côy≥
));

1837 
‹c
 = 
CONFREJ
;

1841 
ídswôch
:

1842 i‡(
‹c
 =
CONFACK
 &&

1843 
rc
 !
CONFACK
)

1846 i‡(
‹c
 =
CONFNAK
) {

1847 i‡(
ªje˘_if_dißgªe


1848 && 
côy≥
 !
CI_MAGICNUMBER
) {

1849 
‹c
 = 
CONFREJ
;

1851 i‡(
rc
 =
CONFREJ
)

1853 
rc
 = 
CONFNAK
;

1856 i‡(
‹c
 =
CONFREJ
) {

1857 
rc
 = 
CONFREJ
;

1858 i‡(
cù
 !
ªjp
)

1859 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1860 
	`INCPTR
(
cûí
, 
ªjp
);

1871 
rc
) {

1872 
CONFACK
:

1873 *
À≈
 = 
√xt
 - 
öp
;

1875 
CONFNAK
:

1879 *
À≈
 = 
«kp
 - 
«k_buf„r
;

1880 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1882 
CONFREJ
:

1883 *
À≈
 = 
ªjp
 - 
öp
;

1887 
	`LCPDEBUG
(("l˝_ªqci:Ñëu∫ög CONF%s.", 
	`CODENAME
(
rc
)));

1888  (
rc
);

1889 
	}
}

1896 
	$l˝_up
(
f
)

1897 
fsm
 *
f
;

1899 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1900 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1901 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1902 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1903 
mtu
, 
mru
;

1905 i‡(!
go
->
√g_magi˙umbî
)

1906 
go
->
magi˙umbî
 = 0;

1907 i‡(!
ho
->
√g_magi˙umbî
)

1908 
ho
->
magi˙umbî
 = 0;

1919 
mtu
 = 
ho
->
√g_mru
? ho->
mru
: 
PPP_MRU
;

1920 
mru
 = 
go
->
√g_mru
? 
	`MAX
(
wo
->mru, go->mru): 
PPP_MRU
;

1921 #ifde‡
HAVE_MULTILINK


1922 i‡(!(
mu…ûök
 && 
go
->
√g_mºu
 && 
ho
->neg_mrru))

1924 
	`√tif_£t_mtu
(
f
->
unô
, 
	`MIN
(MIN(
mtu
, 
mru
), 
ao
->mru));

1925 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
mtu
,

1926 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffff),

1927 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1928 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
mru
,

1929 (
œx_ªcv
? 0: 
go
->
√g_asyncm≠
? go->
asyncm≠
: 0xffffffff),

1930 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1932 i‡(
ho
->
√g_mru
)

1933 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1935 
	`l˝_echo_lowîup
(
f
->
unô
);

1937 
	`lök_e°ablished
(
f
->
unô
);

1938 
	}
}

1947 
	$l˝_down
(
f
)

1948 
fsm
 *
f
;

1950 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1952 
	`l˝_echo_lowîdown
(
f
->
unô
);

1954 
	`lök_down
(
f
->
unô
);

1956 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffff, 0, 0);

1957 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1958 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0xffffffff),

1959 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1960 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1961 
	}
}

1968 
	$l˝_°¨tög
(
f
)

1969 
fsm
 *
f
;

1971 
	`lök_ªquúed
(
f
->
unô
);

1972 
	}
}

1979 
	$l˝_föished
(
f
)

1980 
fsm
 *
f
;

1982 
	`lök_ãrmö©ed
(
f
->
unô
);

1983 
	}
}

1989 *
	gl˝_codíames
[] = {

1997 
	$l˝_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

1998 
u_ch¨
 *
p
;

1999 
∂í
;

2000 (*
¥öãr
Ë
	`__P
((*, *, ...));

2001 *
¨g
;

2003 
code
, 
id
, 
Àn
, 
ﬁí
, 
i
;

2004 
u_ch¨
 *
p°¨t
, *
›ãnd
;

2005 
u_sh‹t
 
cish‹t
;

2006 
u_öt32_t
 
cû⁄g
;

2008 i‡(
∂í
 < 
HEADERLEN
)

2010 
p°¨t
 = 
p
;

2011 
	`GETCHAR
(
code
, 
p
);

2012 
	`GETCHAR
(
id
, 
p
);

2013 
	`GETSHORT
(
Àn
, 
p
);

2014 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
)

2017 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*))

2018 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

2020 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

2021 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

2022 
Àn
 -
HEADERLEN
;

2023 
code
) {

2024 
CONFREQ
:

2025 
CONFACK
:

2026 
CONFNAK
:

2027 
CONFREJ
:

2029 
Àn
 >= 2) {

2030 
	`GETCHAR
(
code
, 
p
);

2031 
	`GETCHAR
(
ﬁí
, 
p
);

2032 
p
 -= 2;

2033 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

2036 
	`¥öãr
(
¨g
, " <");

2037 
Àn
 -
ﬁí
;

2038 
›ãnd
 = 
p
 + 
ﬁí
;

2039 
code
) {

2040 
CI_MRU
:

2041 i‡(
ﬁí
 =
CILEN_SHORT
) {

2042 
p
 += 2;

2043 
	`GETSHORT
(
cish‹t
, 
p
);

2044 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

2047 
CI_ASYNCMAP
:

2048 i‡(
ﬁí
 =
CILEN_LONG
) {

2049 
p
 += 2;

2050 
	`GETLONG
(
cû⁄g
, 
p
);

2051 
	`¥öãr
(
¨g
, "asyncm≠ 0x%x", 
cû⁄g
);

2054 
CI_AUTHTYPE
:

2055 i‡(
ﬁí
 >
CILEN_SHORT
) {

2056 
p
 += 2;

2057 
	`¥öãr
(
¨g
, "auth ");

2058 
	`GETSHORT
(
cish‹t
, 
p
);

2059 
cish‹t
) {

2060 
PPP_PAP
:

2061 
	`¥öãr
(
¨g
, "pap");

2063 
PPP_CHAP
:

2064 
	`¥öãr
(
¨g
, "chap");

2065 i‡(
p
 < 
›ãnd
) {

2066 *
p
) {

2067 
CHAP_MD5
:

2068 
	`¥öãr
(
¨g
, " MD5");

2069 ++
p
;

2071 
CHAP_MICROSOFT
:

2072 
	`¥öãr
(
¨g
, " MS");

2073 ++
p
;

2076 
CHAP_MICROSOFT_V2
:

2077 
	`¥öãr
(
¨g
, " MS-v2");

2078 ++
p
;

2083 
PPP_EAP
:

2084 
	`¥öãr
(
¨g
, "eap");

2087 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

2091 
CI_QUALITY
:

2092 i‡(
ﬁí
 >
CILEN_SHORT
) {

2093 
p
 += 2;

2094 
	`¥öãr
(
¨g
, "quality ");

2095 
	`GETSHORT
(
cish‹t
, 
p
);

2096 
cish‹t
) {

2097 
PPP_LQR
:

2098 
	`¥öãr
(
¨g
, "lqr");

2101 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

2105 
CI_CALLBACK
:

2106 i‡(
ﬁí
 >
CILEN_CHAR
) {

2107 
p
 += 2;

2108 
	`¥öãr
(
¨g
, "callback ");

2109 
	`GETCHAR
(
cish‹t
, 
p
);

2110 
cish‹t
) {

2111 
CBCP_OPT
:

2112 
	`¥öãr
(
¨g
, "CBCP");

2115 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

2119 
CI_MAGICNUMBER
:

2120 i‡(
ﬁí
 =
CILEN_LONG
) {

2121 
p
 += 2;

2122 
	`GETLONG
(
cû⁄g
, 
p
);

2123 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

2126 
CI_PCOMPRESSION
:

2127 i‡(
ﬁí
 =
CILEN_VOID
) {

2128 
p
 += 2;

2129 
	`¥öãr
(
¨g
, "pcomp");

2132 
CI_ACCOMPRESSION
:

2133 i‡(
ﬁí
 =
CILEN_VOID
) {

2134 
p
 += 2;

2135 
	`¥öãr
(
¨g
, "accomp");

2138 
CI_MRRU
:

2139 i‡(
ﬁí
 =
CILEN_SHORT
) {

2140 
p
 += 2;

2141 
	`GETSHORT
(
cish‹t
, 
p
);

2142 
	`¥öãr
(
¨g
, "mºu %d", 
cish‹t
);

2145 
CI_SSNHF
:

2146 i‡(
ﬁí
 =
CILEN_VOID
) {

2147 
p
 += 2;

2148 
	`¥öãr
(
¨g
, "ssnhf");

2151 
CI_EPDISC
:

2152 #ifde‡
HAVE_MULTILINK


2153 i‡(
ﬁí
 >
CILEN_CHAR
) {

2154 
ïdisc
 
ïd
;

2155 
p
 += 2;

2156 
	`GETCHAR
(
ïd
.
˛ass
, 
p
);

2157 
ïd
.
Àngth
 = 
ﬁí
 - 
CILEN_CHAR
;

2158 i‡(
ïd
.
Àngth
 > 
MAX_ENDP_LEN
)

2159 
ïd
.
Àngth
 = 
MAX_ENDP_LEN
;

2160 i‡(
ïd
.
Àngth
 > 0) {

2161 
	`BCOPY
(
p
, 
ïd
.
vÆue
,Épd.
Àngth
);

2162 
p
 +
ïd
.
Àngth
;

2164 
	`¥öãr
(
¨g
, "ídpoöà[%s]", 
	`ïdisc_to_°r
(&
ïd
));

2167 
	`¥öãr
(
¨g
, "endpoint");

2171 
p
 < 
›ãnd
) {

2172 
	`GETCHAR
(
code
, 
p
);

2173 
	`¥öãr
(
¨g
, " %.2x", 
code
);

2175 
	`¥öãr
(
¨g
, ">");

2179 
TERMACK
:

2180 
TERMREQ
:

2181 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

2182 
	`¥öãr
(
¨g
, " ");

2183 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

2184 
p
 +
Àn
;

2185 
Àn
 = 0;

2189 
ECHOREQ
:

2190 
ECHOREP
:

2191 
DISCREQ
:

2192 i‡(
Àn
 >= 4) {

2193 
	`GETLONG
(
cû⁄g
, 
p
);

2194 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

2195 
Àn
 -= 4;

2199 
IDENTIF
:

2200 
TIMEREM
:

2201 i‡(
Àn
 >= 4) {

2202 
	`GETLONG
(
cû⁄g
, 
p
);

2203 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

2204 
Àn
 -= 4;

2206 i‡(
code
 =
TIMEREM
) {

2207 i‡(
Àn
 < 4)

2209 
	`GETLONG
(
cû⁄g
, 
p
);

2210 
	`¥öãr
(
¨g
, " sec⁄ds=%u", 
cû⁄g
);

2211 
Àn
 -= 4;

2213 i‡(
Àn
 > 0) {

2214 
	`¥öãr
(
¨g
, " ");

2215 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

2216 
p
 +
Àn
;

2217 
Àn
 = 0;

2223 
i
 = 0; i < 
Àn
 && i < 32; ++i) {

2224 
	`GETCHAR
(
code
, 
p
);

2225 
	`¥öãr
(
¨g
, " %.2x", 
code
);

2227 i‡(
i
 < 
Àn
) {

2228 
	`¥öãr
(
¨g
, " ...");

2229 
p
 +
Àn
 - 
i
;

2232  
p
 - 
p°¨t
;

2233 
	}
}

2240 
	$L˝LökFaûuª
 (
f
)

2241 
fsm
 *
f
;

2243 i‡(
f
->
°©e
 =
OPENED
) {

2244 
	`öfo
("Nÿª•⁄£Åÿ%dÉcho-ªque°s", 
l˝_echos_≥ndög
);

2245 
	`nŸi˚
("SerialÜinkáppearsÅo be disconnected.");

2246 
°©us
 = 
EXIT_PEER_DEAD
;

2247 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

2249 
	}
}

2256 
	$L˝EchoCheck
 (
f
)

2257 
fsm
 *
f
;

2259 
	`L˝SídEchoReque°
 (
f
);

2260 i‡(
f
->
°©e
 !
OPENED
)

2266 i‡(
l˝_echo_timî_ru¬ög
)

2267 
	`w¨n
("assertionÜcp_echo_timer_running==0 failed");

2268 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

2269 
l˝_echo_timî_ru¬ög
 = 1;

2270 
	}
}

2277 
	$L˝EchoTimeout
 (
¨g
)

2278 *
¨g
;

2280 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2281 
l˝_echo_timî_ru¬ög
 = 0;

2282 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

2284 
	}
}

2291 
	$l˝_ª˚ived_echo_ª∂y
 (
f
, 
id
, 
öp
, 
Àn
)

2292 
fsm
 *
f
;

2293 
id
;

2294 
u_ch¨
 *
öp
;

2295 
Àn
;

2297 
u_öt32_t
 
magic
;

2300 i‡(
Àn
 < 4) {

2301 
	`dbglog
("l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d", 
Àn
);

2304 
	`GETLONG
(
magic
, 
öp
);

2305 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî


2306 && 
magic
 =
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
) {

2307 
	`w¨n
("appearÅo haveÑeceived our ownÉcho-reply!");

2312 
l˝_echos_≥ndög
 = 0;

2313 
	}
}

2320 
	$L˝SídEchoReque°
 (
f
)

2321 
fsm
 *
f
;

2323 
u_öt32_t
 
l˝_magic
;

2324 
u_ch¨
 
pkt
[4], *
pkç
;

2329 i‡(
l˝_echo_Áûs
 != 0) {

2330 i‡(
l˝_echos_≥ndög
 >
l˝_echo_Áûs
) {

2331 
	`L˝LökFaûuª
(
f
);

2332 
l˝_echos_≥ndög
 = 0;

2340 i‡(
l˝_echo_ad≠tive
) {

2341 
œ°_pkts_ö
 = 0;

2343 
	`upd©e_lök_°©s
(
f
->
unô
);

2344 
lök_°©s_vÆid
 = 0;

2346 i‡(
lök_°©s
.
pkts_ö
 !
œ°_pkts_ö
) {

2347 
œ°_pkts_ö
 = 
lök_°©s
.
pkts_ö
;

2355 i‡(
f
->
°©e
 =
OPENED
) {

2356 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

2357 
pkç
 = 
pkt
;

2358 
	`PUTLONG
(
l˝_magic
, 
pkç
);

2359 
	`fsm_sd©a
(
f
, 
ECHOREQ
, 
l˝_echo_numbî
++ & 0xFF, 
pkt
, 
pkç
 -Ökt);

2360 ++
l˝_echos_≥ndög
;

2362 
	}
}

2369 
	$l˝_echo_lowîup
 (
unô
)

2370 
unô
;

2372 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2375 
l˝_echos_≥ndög
 = 0;

2376 
l˝_echo_numbî
 = 0;

2377 
l˝_echo_timî_ru¬ög
 = 0;

2380 i‡(
l˝_echo_öãrvÆ
 != 0)

2381 
	`L˝EchoCheck
 (
f
);

2382 
	}
}

2389 
	$l˝_echo_lowîdown
 (
unô
)

2390 
unô
;

2392 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2394 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2395 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2396 
l˝_echo_timî_ru¬ög
 = 0;

2398 
	}
}

	@pppd/lcp.h

48 
	#CI_VENDOR
 0

	)

49 
	#CI_MRU
 1

	)

50 
	#CI_ASYNCMAP
 2

	)

51 
	#CI_AUTHTYPE
 3

	)

52 
	#CI_QUALITY
 4

	)

53 
	#CI_MAGICNUMBER
 5

	)

54 
	#CI_PCOMPRESSION
 7

	)

55 
	#CI_ACCOMPRESSION
 8

	)

56 
	#CI_FCSALTERN
 9

	)

57 
	#CI_SDP
 10

	)

58 
	#CI_NUMBERED
 11

	)

59 
	#CI_CALLBACK
 13

	)

60 
	#CI_MRRU
 17

	)

61 
	#CI_SSNHF
 18

	)

62 
	#CI_EPDISC
 19

	)

63 
	#CI_MPPLUS
 22

	)

64 
	#CI_LDISC
 23

	)

65 
	#CI_LCPAUTH
 24

	)

66 
	#CI_COBS
 25

	)

67 
	#CI_PREFELIS
 26

	)

68 
	#CI_MPHDRFMT
 27

	)

69 
	#CI_I18N
 28

	)

70 
	#CI_SDL
 29

	)

75 
	#PROTREJ
 8

	)

76 
	#ECHOREQ
 9

	)

77 
	#ECHOREP
 10

	)

78 
	#DISCREQ
 11

	)

79 
	#IDENTIF
 12

	)

80 
	#TIMEREM
 13

	)

83 
	#CBCP_OPT
 6

	)

88 
	sl˝_›ti⁄s
 {

89 
boﬁ
 
	m∑ssive
;

90 
boﬁ
 
	msûít
;

91 
boﬁ
 
	mª°¨t
;

92 
boﬁ
 
	m√g_mru
;

93 
boﬁ
 
	m√g_asyncm≠
;

94 
boﬁ
 
	m√g_u∑p
;

95 
boﬁ
 
	m√g_ch≠
;

96 
boﬁ
 
	m√g_óp
;

97 
boﬁ
 
	m√g_magi˙umbî
;

98 
boﬁ
 
	m√g_pcom¥essi⁄
;

99 
boﬁ
 
	m√g_accom¥essi⁄
;

100 
boﬁ
 
	m√g_lqr
;

101 
boﬁ
 
	m√g_cb˝
;

102 
boﬁ
 
	m√g_mºu
;

103 
boﬁ
 
	m√g_s¢hf
;

104 
boﬁ
 
	m√g_ídpoöt
;

105 
	mmru
;

106 
	mmºu
;

107 
u_ch¨
 
	mch≠_mdty≥
;

108 
u_öt32_t
 
	masyncm≠
;

109 
u_öt32_t
 
	mmagi˙umbî
;

110 
	mnumlo›s
;

111 
u_öt32_t
 
	mlqr_≥riod
;

112 
ïdisc
 
	mídpoöt
;

113 } 
	tl˝_›ti⁄s
;

115 
fsm
 
l˝_fsm
[];

116 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

117 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

118 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

119 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

121 
	#DEFMRU
 1500

	)

122 
	#MINMRU
 128

	)

123 
	#MAXMRU
 16384

	)

125 
l˝_›í
 
__P
(());

126 
l˝_˛o£
 
__P
((, *));

127 
l˝_lowîup
 
__P
(());

128 
l˝_lowîdown
 
__P
(());

129 
l˝_•rŸªj
 
__P
((, 
u_ch¨
 *, ));

131 
¥Ÿít
 
l˝_¥Ÿít
;

135 
	#DEFLOOPBACKFAIL
 10

	)

	@pppd/magic.c

43 
	#RCSID
 "$Id: magic.c,v 1.11 2003/06/11 23:56:26Öaulu†Ex∞$"

	)

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<uni°d.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/time.h
>

51 
	~"µpd.h
"

52 
	~"magic.h
"

55 
mønd48
 ();

56 
§™d48
 ();

66 
	$magic_öô
()

68 
£ed
;

69 
timevÆ
 
t
;

71 
	`gëtimeofday
(&
t
, 
NULL
);

72 
£ed
 = 
	`gë_ho°_£ed
(Ë^ 
t
.
tv_£c
 ^Å.
tv_u£c
 ^ 
	`gëpid
();

73 
	`§™d48
(
£ed
);

74 
	}
}

79 
u_öt32_t


80 
	$magic
()

82  (
u_öt32_t
Ë
	`mønd48
();

83 
	}
}

89 
	$øndom_byãs
(*
buf
, 
Àn
)

91 
i
;

93 
i
 = 0; i < 
Àn
; ++i)

94 
buf
[
i
] = 
	`mønd48
() >> 24;

95 
	}
}

97 #ifde‡
NO_DRAND48


104 
	$dønd48
()

106  ()
	`øndom
() / ()0x7fffffffL;

107 
	}
}

110 
	$mønd48
()

112  
	`øndom
();

113 
	}
}

116 
	$§™d48
(
£edvÆ
)

118 
	`§™dom
(()
£edvÆ
);

119 
	}
}

	@pppd/magic.h

45 
magic_öô
 ();

46 
u_öt32_t
 
magic
 ();

49 
øndom_byãs
 (*
buf
, 
Àn
);

	@pppd/main.c

69 
	#RCSID
 "$Id: maö.c,v 1.156 2008/06/23 11:47:18Öaulu†Ex∞$"

	)

71 
	~<°dio.h
>

72 
	~<˘y≥.h
>

73 
	~<°dlib.h
>

74 
	~<°rög.h
>

75 
	~<uni°d.h
>

76 
	~<sig«l.h
>

77 
	~<î∫o.h
>

78 
	~<f˙é.h
>

79 
	~<sy¶og.h
>

80 
	~<√tdb.h
>

81 
	~<utmp.h
>

82 
	~<pwd.h
>

83 
	~<sys/∑øm.h
>

84 
	~<sys/ty≥s.h
>

85 
	~<sys/waô.h
>

86 
	~<sys/time.h
>

87 
	~<sys/ªsour˚.h
>

88 
	~<sys/°©.h
>

89 
	~<sys/sockë.h
>

90 
	~<√töë/ö.h
>

91 
	~<¨∑/öë.h
>

93 
	~"µpd.h
"

94 
	~"magic.h
"

95 
	~"fsm.h
"

96 
	~"l˝.h
"

97 
	~"ù˝.h
"

98 #ifde‡
INET6


99 
	~"ùv6˝.h
"

101 
	~"u∑p.h
"

102 
	~"ch≠-√w.h
"

103 
	~"óp.h
"

104 
	~"c˝.h
"

105 
	~"e˝.h
"

106 
	~"∑th«mes.h
"

108 #ifde‡
USE_TDB


109 
	~"tdb.h
"

112 #ifde‡
CBCP_SUPPORT


113 
	~"cb˝.h
"

116 #ifde‡
IPX_CHANGE


117 
	~"ùx˝.h
"

119 #ifde‡
AT_CHANGE


120 
	~"©˝.h
"

125 
	gi‚ame
[
MAXIFNAMELEN
];

126 
	gifunô
;

128 
ch™√l
 *
	gthe_ch™√l
;

130 *
	g¥og«me
;

131 
	gho°«me
[
MAXNAMELEN
];

132 
	gpidfûíame
[
MAXPATHLEN
];

133 
	glökpidfûe
[
MAXPATHLEN
];

134 
	gµp_dev«m
[
MAXPATHLEN
];

135 
uid_t
 
	guid
;

136 
nŸifõr
 *
	gpidch™ge
 = 
NULL
;

137 
nŸifõr
 *
	gpha£ch™ge
 = 
NULL
;

138 
nŸifõr
 *
	gexônŸify
 = 
NULL
;

139 
nŸifõr
 *
	gsigª˚ived
 = 
NULL
;

140 
nŸifõr
 *
	gf‹k_nŸifõr
 = 
NULL
;

142 
	ghungup
;

143 
	g¥ivûeged
;

144 
	g√ed_hﬁdoff
;

145 
	gdëached
;

146 vﬁ©ûê
	g°©us
;

147 
	gunsuc˚ss
;

148 
	gdo_ˇŒback
;

149 
	gdoög_ˇŒback
;

150 
	gµp_£ssi⁄_numbî
;

152 
	gchûdwaô_d⁄e
;

154 #ifde‡
USE_TDB


155 
TDB_CONTEXT
 *
	gµpdb
;

158 
	gdb_key
[32];

160 (*
hﬁdoff_hook
Ë
	`__P
(()Ë
NULL
;

161 (*
√w_pha£_hook
Ë
	`__P
(()Ë
NULL
;

162 (*
¢o›_ªcv_hook
Ë
	`__P
((*
p
, 
Àn
)Ë
NULL
;

163 (*
¢o›_£nd_hook
Ë
	`__P
((*
p
, 
Àn
)Ë
NULL
;

165 
c⁄n_ru¬ög
;

166 
fd_lo›
;

168 
fd_devnuŒ
;

169 
devfd
 = -1;

170 
fd_µp
 = -1;

171 
pha£
;

172 
kûl_lök
;

173 
asked_to_quô
;

174 
›í_c˝_Êag
;

175 
li°í_time
;

176 
gŸ_sigu§2
;

177 
gŸ_sigãrm
;

178 
gŸ_sighup
;

180 
sig£t_t
 
sig«ls_h™dÀd
;

181 
waôög
;

182 
sigpùe
[2];

184 **
s¸ùt_ív
;

185 
s_ív_«Œoc
;

187 
u_ch¨
 
ouçackë_buf
[
PPP_MRU
+
PPP_HDRLEN
];

188 
u_ch¨
 
ö∑ckë_buf
[
PPP_MRU
+
PPP_HDRLEN
];

190 
n_chûdªn
;

191 
gŸ_sigchld
;

193 
¥iv›í
;

195 *
no_µp_msg
 = "Sorry -Åhis systemÜacks PPP kernel support\n";

197 
GIDSET_TYPE
 
groups
[
NGROUPS_MAX
];

198 
ngroups
;

200 
timevÆ
 
°¨t_time
;

202 
µpd_°©s
 
ﬁd_lök_°©s
;

203 
µpd_°©s
 
lök_°©s
;

204 
lök_c⁄√˘_time
;

205 
lök_°©s_vÆid
;

207 
îr‹_cou¡
;

209 
boﬁ
 
bundÀ_eof
;

210 
boﬁ
 
bundÀ_ãrmö©ög
;

216 
	ssub¥o˚ss
 {

217 
pid_t
 
pid
;

218 *
¥og
;

219 (*
d⁄e
Ë
	`__P
((*));

220 *
¨g
;

221 
kûœbÀ
;

222 
sub¥o˚ss
 *
√xt
;

225 
sub¥o˚ss
 *
chûdªn
;

229 
£tup_sig«ls
 
	`__P
(());

230 
¸óã_pidfûe
 
	`__P
((
pid
));

231 
¸óã_lökpidfûe
 
	`__P
((
pid
));

232 
˛ónup
 
	`__P
(());

233 
gë_öput
 
	`__P
(());

234 
ˇŒtimeout
 
	`__P
(());

235 
timevÆ
 *
timñe·
 
	`__P
((timeval *));

236 
kûl_my_pg
 
	`__P
(());

237 
hup
 
	`__P
(());

238 
ãrm
 
	`__P
(());

239 
chld
 
	`__P
(());

240 
toggÀ_debug
 
	`__P
(());

241 
›í_c˝
 
	`__P
(());

242 
bad_sig«l
 
	`__P
(());

243 
hﬁdoff_íd
 
	`__P
((*));

244 
f‹gë_chûd
 
	`__P
((
pid
, 
°©us
));

245 
ª≠_kids
 
	`__P
(());

246 
chûdwaô_íd
 
	`__P
((*));

248 #ifde‡
USE_TDB


249 
upd©e_db_íåy
 
	`__P
(());

250 
add_db_key
 
	`__P
((const *));

251 
dñëe_db_key
 
	`__P
((const *));

252 
˛ónup_db
 
	`__P
(());

255 
h™dÀ_evíts
 
	`__P
(());

256 
¥öt_lök_°©s
 
	`__P
(());

258 *
gëlogö
 
	`__P
(());

259 
maö
 
	`__P
((, *[]));

261 #ifde‡
u…rix


262 #unde‡
O_NONBLOCK


263 
	#O_NONBLOCK
 
O_NDELAY


	)

266 #ifde‡
ULTRIX


267 
	#£éogmask
(
x
)

	)

275 
¥Ÿít
 *
¥Ÿocﬁs
[] = {

276 &
l˝_¥Ÿít
,

277 &
∑p_¥Ÿít
,

278 &
ch≠_¥Ÿít
,

279 #ifde‡
CBCP_SUPPORT


280 &
cb˝_¥Ÿít
,

282 &
ù˝_¥Ÿít
,

283 #ifde‡
INET6


284 &
ùv6˝_¥Ÿít
,

286 &
c˝_¥Ÿít
,

287 &
e˝_¥Ÿít
,

288 #ifde‡
IPX_CHANGE


289 &
ùx˝_¥Ÿít
,

291 #ifde‡
AT_CHANGE


292 &
©˝_¥Ÿít
,

294 &
óp_¥Ÿít
,

295 
NULL


296 
	}
};

312 
	$maö
(
¨gc
, 
¨gv
)

313 
¨gc
;

314 *
¨gv
[];

316 
i
, 
t
;

317 *
p
;

318 
∑sswd
 *
pw
;

319 
¥Ÿít
 *
¥Ÿp
;

320 
numbuf
[16];

322 
lök_°©s_vÆid
 = 0;

323 
	`√w_pha£
(
PHASE_INITIALIZE
);

325 
s¸ùt_ív
 = 
NULL
;

328 
	`ª›í_log
();

330 i‡(
	`gëho°«me
(
ho°«me
, 
MAXNAMELEN
) < 0 ) {

331 
	`›ti⁄_îr‹
("Couldn't get hostname: %m");

332 
	`exô
(1);

334 
ho°«me
[
MAXNAMELEN
-1] = 0;

337 
	`umask
(umask(0777) | 022);

339 
uid
 = 
	`gëuid
();

340 
¥ivûeged
 = 
uid
 == 0;

341 
	`¶¥ötf
(
numbuf
, “umbuf), "%d", 
uid
);

342 
	`s¸ùt_£ãnv
("ORIG_UID", 
numbuf
, 0);

344 
ngroups
 = 
	`gëgroups
(
NGROUPS_MAX
, 
groups
);

350 
	`magic_öô
();

356 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

357 (*
¥Ÿp
->
öô
)(0);

363 
	`ây_öô
();

365 
¥og«me
 = *
¨gv
;

371 i‡(!
	`›ti⁄s_‰om_fûe
(
_PATH_SYSOPTIONS
, !
¥ivûeged
, 0, 1)

372 || !
	`›ti⁄s_‰om_u£r
()

373 || !
	`∑r£_¨gs
(
¨gc
-1, 
¨gv
+1))

374 
	`exô
(
EXIT_OPTION_ERROR
);

375 
dev«m_fixed
 = 1;

381 i‡(
the_ch™√l
->
¥o˚ss_exåa_›ti⁄s
)

382 (*
the_ch™√l
->
¥o˚ss_exåa_›ti⁄s
)();

384 i‡(
debug
)

385 
	`£éogmask
(
	`LOG_UPTO
(
LOG_DEBUG
));

390 i‡(
	`gëeuid
() != 0) {

391 
	`›ti⁄_îr‹
("must beÑootÅoÑun %s, since it isÇot setuid-root",

392 
¨gv
[0]);

393 
	`exô
(
EXIT_NOT_ROOT
);

397 i‡(!
	`µp_avaûabÀ
()) {

398 
	`›ti⁄_îr‹
("%s", 
no_µp_msg
);

399 
	`exô
(
EXIT_NO_KERNEL_SUPPORT
);

405 
	`check_›ti⁄s
();

406 i‡(!
	`sys_check_›ti⁄s
())

407 
	`exô
(
EXIT_OPTION_ERROR
);

408 
	`auth_check_›ti⁄s
();

409 #ifde‡
HAVE_MULTILINK


410 
	`mp_check_›ti⁄s
();

412 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

413 i‡(
¥Ÿp
->
check_›ti⁄s
 !
NULL
)

414 (*
¥Ÿp
->
check_›ti⁄s
)();

415 i‡(
the_ch™√l
->
check_›ti⁄s
)

416 (*
the_ch™√l
->
check_›ti⁄s
)();

419 i‡(
dump_›ti⁄s
 || 
dryrun
) {

420 
	`öô_¥_log
(
NULL
, 
LOG_INFO
);

421 
	`¥öt_›ti⁄s
(
¥_log
, 
NULL
);

422 
	`íd_¥_log
();

425 i‡(
dryrun
)

426 
	`dõ
(0);

429 
fd_devnuŒ
 = 
	`›í
(
_PATH_DEVNULL
, 
O_RDWR
);

430 i‡(
fd_devnuŒ
 < 0)

431 
	`Áèl
("Couldn'à›í %s: %m", 
_PATH_DEVNULL
);

432 
fd_devnuŒ
 <= 2) {

433 
i
 = 
	`dup
(
fd_devnuŒ
);

434 i‡(
i
 < 0)

435 
	`Áèl
("Critical shortage of file descriptors: dup failed: %m");

436 
fd_devnuŒ
 = 
i
;

442 
	`sys_öô
();

444 #ifde‡
USE_TDB


445 
µpdb
 = 
	`tdb_›í
(
_PATH_PPPDB
, 0, 0, 
O_RDWR
|
O_CREAT
, 0644);

446 i‡(
µpdb
 !
NULL
) {

447 
	`¶¥ötf
(
db_key
, (db_key), "µpd%d", 
	`gëpid
());

448 
	`upd©e_db_íåy
();

450 
	`w¨n
("W¨nög: couldn'à›íÖµ d©aba£ %s", 
_PATH_PPPDB
);

451 i‡(
mu…ûök
) {

452 
	`w¨n
("Warning: disabling multilink");

453 
mu…ûök
 = 0;

462 i‡(!
nodëach
 && !
updëach
)

463 
	`dëach
();

464 
p
 = 
	`gëlogö
();

465 i‡(
p
 =
NULL
) {

466 
pw
 = 
	`gëpwuid
(
uid
);

467 i‡(
pw
 !
NULL
 &&Öw->
pw_«me
 != NULL)

468 
p
 = 
pw
->
pw_«me
;

470 
p
 = "(unknown)";

472 
	`sy¶og
(
LOG_NOTICE
, "µpd %†°¨ãd by %s, uid %d", 
VERSION
, 
p
, 
uid
);

473 
	`s¸ùt_£ãnv
("PPPLOGNAME", 
p
, 0);

475 i‡(
dev«m
[0])

476 
	`s¸ùt_£ãnv
("DEVICE", 
dev«m
, 1);

477 
	`¶¥ötf
(
numbuf
, “umbuf), "%d", 
	`gëpid
());

478 
	`s¸ùt_£ãnv
("PPPD_PID", 
numbuf
, 1);

480 
	`£tup_sig«ls
();

482 
	`¸óã_lökpidfûe
(
	`gëpid
());

484 
waôög
 = 0;

489 i‡(
dem™d
) {

494 
fd_lo›
 = 
	`›í_µp_lo›back
();

495 
	`£t_ifunô
(1);

499 
	`dem™d_c⁄f
();

502 
do_ˇŒback
 = 0;

505 
bundÀ_eof
 = 0;

506 
bundÀ_ãrmö©ög
 = 0;

507 
li°í_time
 = 0;

508 
√ed_hﬁdoff
 = 1;

509 
devfd
 = -1;

510 
°©us
 = 
EXIT_OK
;

511 ++
unsuc˚ss
;

512 
doög_ˇŒback
 = 
do_ˇŒback
;

513 
do_ˇŒback
 = 0;

515 i‡(
dem™d
 && !
doög_ˇŒback
) {

519 
	`√w_pha£
(
PHASE_DORMANT
);

520 
	`dem™d_unblock
();

521 
	`add_fd
(
fd_lo›
);

523 
	`h™dÀ_evíts
();

524 i‡(
asked_to_quô
)

526 i‡(
	`gë_lo›_ouçut
())

529 
	`ªmove_fd
(
fd_lo›
);

530 i‡(
asked_to_quô
)

536 
	`dem™d_block
();

537 
	`öfo
("StartingÜink");

540 
	`gë_time
(&
°¨t_time
);

541 
	`s¸ùt_un£ãnv
("CONNECT_TIME");

542 
	`s¸ùt_un£ãnv
("BYTES_SENT");

543 
	`s¸ùt_un£ãnv
("BYTES_RCVD");

549 
	`l˝_›í
(0);

556 
	`°¨t_lök
(0);

557 
pha£
 !
PHASE_DEAD
) {

562 
	`h™dÀ_evíts
();

573 
	`gë_öput
();

574 i‡(
kûl_lök
)

575 
	`l˝_˛o£
(0, "UserÑequest");

576 i‡(
asked_to_quô
) {

577 
bundÀ_ãrmö©ög
 = 1;

578 i‡(
pha£
 =
PHASE_MASTER
)

579 
	`mp_bundÀ_ãrmö©ed
();

581 i‡(
›í_c˝_Êag
) {

582 i‡(
pha£
 =
PHASE_NETWORK
 ||Öha£ =
PHASE_RUNNING
) {

583 
c˝_fsm
[0].
Êags
 = 
OPT_RESTART
;

584 (*
c˝_¥Ÿít
.
›í
)(0);

589 
	`l˝_˛o£
(0, "");

591 i‡(!
≥rsi°
 || 
asked_to_quô
 || (
maxÁû
 > 0 && 
unsuc˚ss
 >= maxfail))

594 i‡(
dem™d
)

595 
	`dem™d_disˇrd
();

596 
t
 = 
√ed_hﬁdoff
? 
hﬁdoff
: 0;

597 i‡(
hﬁdoff_hook
)

598 
t
 = (*
hﬁdoff_hook
)();

599 i‡(
t
 > 0) {

600 
	`√w_pha£
(
PHASE_HOLDOFF
)

601 
	`TIMEOUT
(
hﬁdoff_íd
, 
NULL
, 
t
);

603 
	`h™dÀ_evíts
();

604 i‡(
kûl_lök
)

605 
	`√w_pha£
(
PHASE_DORMANT
);

606 } 
pha£
 =
PHASE_HOLDOFF
);

607 i‡(!
≥rsi°
)

613 
	`ª≠_kids
();

614 i‡(
n_chûdªn
 > 0) {

615 i‡(
chûd_waô
 > 0)

616 
	`TIMEOUT
(
chûdwaô_íd
, 
NULL
, 
chûd_waô
);

617 i‡(
debug
) {

618 
sub¥o˚ss
 *
chp
;

619 
	`dbglog
("Waôög f‹ %d chûdÖro˚s£s...", 
n_chûdªn
);

620 
chp
 = 
chûdªn
; ch∞!
NULL
; ch∞chp->
√xt
)

621 
	`dbglog
(" s¸ùà%s,Öid %d", 
chp
->
¥og
, chp->
pid
);

623 
n_chûdªn
 > 0 && !
chûdwaô_d⁄e
) {

624 
	`h™dÀ_evíts
();

625 i‡(
kûl_lök
 && !
chûdwaô_d⁄e
)

626 
	`chûdwaô_íd
(
NULL
);

630 
	`dõ
(
°©us
);

632 
	}
}

638 
	$h™dÀ_evíts
()

640 
timevÆ
 
timo
;

641 
buf
[16];

643 
kûl_lök
 = 
›í_c˝_Êag
 = 0;

646 
waôög
 = 1;

648 ; 
	`ªad
(
sigpùe
[0], 
buf
, (buf)) > 0; );

649 
	`add_fd
(
sigpùe
[0]);

651 i‡(!(
gŸ_sighup
 || 
gŸ_sigãrm
 || 
gŸ_sigu§2
 || 
gŸ_sigchld
))

652 
	`waô_öput
(
	`timñe·
(&
timo
));

653 
waôög
 = 0;

654 
	`ªmove_fd
(
sigpùe
[0]);

656 
	`ˇŒtimeout
();

657 i‡(
gŸ_sighup
) {

658 
	`öfo
("Hangup (SIGHUP)");

659 
kûl_lök
 = 1;

660 
gŸ_sighup
 = 0;

661 i‡(
°©us
 !
EXIT_HANGUP
)

662 
°©us
 = 
EXIT_USER_REQUEST
;

664 i‡(
gŸ_sigãrm
) {

665 
	`öfo
("Tîmö©ög o¿sig«»%d", 
gŸ_sigãrm
);

666 
kûl_lök
 = 1;

667 
asked_to_quô
 = 1;

668 
≥rsi°
 = 0;

669 
°©us
 = 
EXIT_USER_REQUEST
;

670 
gŸ_sigãrm
 = 0;

672 i‡(
gŸ_sigchld
) {

673 
gŸ_sigchld
 = 0;

674 
	`ª≠_kids
();

676 i‡(
gŸ_sigu§2
) {

677 
›í_c˝_Êag
 = 1;

678 
gŸ_sigu§2
 = 0;

680 
	}
}

686 
	$£tup_sig«ls
()

688 
siga˘i⁄
 
ß
;

691 i‡(
	`pùe
(
sigpùe
) < 0)

692 
	`Áèl
("Couldn't create signalÖipe: %m");

693 
	`f˙é
(
sigpùe
[0], 
F_SETFD
, f˙é(sigpùe[0], 
F_GETFD
Ë| 
FD_CLOEXEC
);

694 
	`f˙é
(
sigpùe
[1], 
F_SETFD
, f˙é(sigpùe[1], 
F_GETFD
Ë| 
FD_CLOEXEC
);

695 
	`f˙é
(
sigpùe
[0], 
F_SETFL
, f˙é(sigpùe[0], 
F_GETFL
Ë| 
O_NONBLOCK
);

696 
	`f˙é
(
sigpùe
[1], 
F_SETFL
, f˙é(sigpùe[1], 
F_GETFL
Ë| 
O_NONBLOCK
);

703 
	`sigem±y£t
(&
sig«ls_h™dÀd
);

704 
	`sigadd£t
(&
sig«ls_h™dÀd
, 
SIGHUP
);

705 
	`sigadd£t
(&
sig«ls_h™dÀd
, 
SIGINT
);

706 
	`sigadd£t
(&
sig«ls_h™dÀd
, 
SIGTERM
);

707 
	`sigadd£t
(&
sig«ls_h™dÀd
, 
SIGCHLD
);

708 
	`sigadd£t
(&
sig«ls_h™dÀd
, 
SIGUSR2
);

710 
	#SIGNAL
(
s
, 
h™dÀr
) do { \

711 
ß
.
ß_h™dÀr
 = 
h™dÀr
; \

712 i‡(
	`siga˘i⁄
(
s
, &
ß
, 
NULL
) < 0) \

713 
	`Áèl
("Couldn'àe°ablish sig«»h™dÀ∏(%d): %m", 
s
); \

714 } 0)

	)

716 
ß
.
ß_mask
 = 
sig«ls_h™dÀd
;

717 
ß
.
ß_Êags
 = 0;

718 
	`SIGNAL
(
SIGHUP
, 
hup
);

719 
	`SIGNAL
(
SIGINT
, 
ãrm
);

720 
	`SIGNAL
(
SIGTERM
, 
ãrm
);

721 
	`SIGNAL
(
SIGCHLD
, 
chld
);

723 
	`SIGNAL
(
SIGUSR1
, 
toggÀ_debug
);

724 
	`SIGNAL
(
SIGUSR2
, 
›í_c˝
);

730 
	`SIGNAL
(
SIGABRT
, 
bad_sig«l
);

731 
	`SIGNAL
(
SIGALRM
, 
bad_sig«l
);

732 
	`SIGNAL
(
SIGFPE
, 
bad_sig«l
);

733 
	`SIGNAL
(
SIGILL
, 
bad_sig«l
);

734 
	`SIGNAL
(
SIGPIPE
, 
bad_sig«l
);

735 
	`SIGNAL
(
SIGQUIT
, 
bad_sig«l
);

736 
	`SIGNAL
(
SIGSEGV
, 
bad_sig«l
);

737 #ifde‡
SIGBUS


738 
	`SIGNAL
(
SIGBUS
, 
bad_sig«l
);

740 #ifde‡
SIGEMT


741 
	`SIGNAL
(
SIGEMT
, 
bad_sig«l
);

743 #ifde‡
SIGPOLL


744 
	`SIGNAL
(
SIGPOLL
, 
bad_sig«l
);

746 #ifde‡
SIGPROF


747 
	`SIGNAL
(
SIGPROF
, 
bad_sig«l
);

749 #ifde‡
SIGSYS


750 
	`SIGNAL
(
SIGSYS
, 
bad_sig«l
);

752 #ifde‡
SIGTRAP


753 
	`SIGNAL
(
SIGTRAP
, 
bad_sig«l
);

755 #ifde‡
SIGVTALRM


756 
	`SIGNAL
(
SIGVTALRM
, 
bad_sig«l
);

758 #ifde‡
SIGXCPU


759 
	`SIGNAL
(
SIGXCPU
, 
bad_sig«l
);

761 #ifde‡
SIGXFSZ


762 
	`SIGNAL
(
SIGXFSZ
, 
bad_sig«l
);

770 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

771 
	}
}

778 
	$£t_ifunô
(
iskey
)

779 
iskey
;

781 
ifkey
[32];

783 i‡(
ªq_i‚ame
[0] != '\0')

784 
	`¶¥ötf
(
i‚ame
, (i‚ame), "%s", 
ªq_i‚ame
);

786 
	`¶¥ötf
(
i‚ame
, (i‚ame), "%s%d", 
PPP_DRV_NAME
, 
ifunô
);

787 
	`öfo
("Usög i¡îÁ˚ %s", 
i‚ame
);

788 
	`s¸ùt_£ãnv
("IFNAME", 
i‚ame
, 
iskey
);

789 
	`¶¥ötf
(
ifkey
, (ifkey), "%d", 
ifunô
);

790 
	`s¸ùt_£ãnv
("UNIT", 
ifkey
, 
iskey
);

791 i‡(
iskey
) {

792 
	`¸óã_pidfûe
(
	`gëpid
());

793 
	`¸óã_lökpidfûe
(
	`gëpid
());

795 
	}
}

801 
	$dëach
()

803 
pid
;

804 
numbuf
[16];

805 
pùefd
[2];

807 i‡(
dëached
)

809 i‡(
	`pùe
(
pùefd
) == -1)

810 
pùefd
[0] =Öipefd[1] = -1;

811 i‡((
pid
 = 
	`f‹k
()) < 0) {

812 
	`îr‹
("Couldn't detach (fork failed: %m)");

813 
	`dõ
(1);

815 i‡(
pid
 != 0) {

817 
	`nŸify
(
pidch™ge
, 
pid
);

819 i‡(
pidfûíame
[0])

820 
	`¸óã_pidfûe
(
pid
);

821 i‡(
lökpidfûe
[0])

822 
	`¸óã_lökpidfûe
(
pid
);

823 
	`exô
(0);

825 
	`£tsid
();

826 
	`chdú
("/");

827 
	`dup2
(
fd_devnuŒ
, 0);

828 
	`dup2
(
fd_devnuŒ
, 1);

829 
	`dup2
(
fd_devnuŒ
, 2);

830 
dëached
 = 1;

831 i‡(
log_deÁu…
)

832 
log_to_fd
 = -1;

833 
	`¶¥ötf
(
numbuf
, “umbuf), "%d", 
	`gëpid
());

834 
	`s¸ùt_£ãnv
("PPPD_PID", 
numbuf
, 1);

837 
	`˛o£
(
pùefd
[1]);

838 
	`com∂ëe_ªad
(
pùefd
[0], 
numbuf
, 1);

839 
	`˛o£
(
pùefd
[0]);

840 
	}
}

846 
	$ª›í_log
()

848 
	`›ílog
("µpd", 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_PPP
);

849 
	`£éogmask
(
	`LOG_UPTO
(
LOG_INFO
));

850 
	}
}

856 
	$¸óã_pidfûe
(
pid
)

857 
pid
;

859 
FILE
 *
pidfûe
;

861 
	`¶¥ötf
(
pidfûíame
, (pidfilename), "%s%s.pid",

862 
_PATH_VARRUN
, 
i‚ame
);

863 i‡((
pidfûe
 = 
	`f›í
(
pidfûíame
, "w")Ë!
NULL
) {

864 
	`Ârötf
(
pidfûe
, "%d\n", 
pid
);

865 (Ë
	`f˛o£
(
pidfûe
);

867 
	`îr‹
("FaûedÅÿ¸óãÖid fûê%s: %m", 
pidfûíame
);

868 
pidfûíame
[0] = 0;

870 
	}
}

873 
	$¸óã_lökpidfûe
(
pid
)

874 
pid
;

876 
FILE
 *
pidfûe
;

878 i‡(
lök«me
[0] == 0)

880 
	`s¸ùt_£ãnv
("LINKNAME", 
lök«me
, 1);

881 
	`¶¥ötf
(
lökpidfûe
, (linkpidfile), "%sppp-%s.pid",

882 
_PATH_VARRUN
, 
lök«me
);

883 i‡((
pidfûe
 = 
	`f›í
(
lökpidfûe
, "w")Ë!
NULL
) {

884 
	`Ârötf
(
pidfûe
, "%d\n", 
pid
);

885 i‡(
i‚ame
[0])

886 
	`Ârötf
(
pidfûe
, "%s\n", 
i‚ame
);

887 (Ë
	`f˛o£
(
pidfûe
);

889 
	`îr‹
("FaûedÅÿ¸óãÖid fûê%s: %m", 
lökpidfûe
);

890 
lökpidfûe
[0] = 0;

892 
	}
}

897 
	$ªmove_pidfûes
()

899 i‡(
pidfûíame
[0] !0 && 
	`u∆ök
’idfûíameË< 0 && 
î∫o
 !
ENOENT
)

900 
	`w¨n
("u«bÀÅÿdñëêpid fûê%s: %m", 
pidfûíame
);

901 
pidfûíame
[0] = 0;

902 i‡(
lökpidfûe
[0] !0 && 
	`u∆ök
÷ökpidfûeË< 0 && 
î∫o
 !
ENOENT
)

903 
	`w¨n
("u«bÀÅÿdñëêpid fûê%s: %m", 
lökpidfûe
);

904 
lökpidfûe
[0] = 0;

905 
	}
}

911 
	$hﬁdoff_íd
(
¨g
)

912 *
¨g
;

914 
	`√w_pha£
(
PHASE_DORMANT
);

915 
	}
}

918 
	s¥Ÿocﬁ_li°
 {

919 
u_sh‹t
 
	m¥Ÿo
;

920 c⁄° *
	m«me
;

921 } 
	g¥Ÿocﬁ_li°
[] = {

1049 { 0, 
NULL
 },

1056 
	$¥Ÿocﬁ_«me
(
¥Ÿo
)

1057 
¥Ÿo
;

1059 
¥Ÿocﬁ_li°
 *
Õ
;

1061 
Õ
 = 
¥Ÿocﬁ_li°
;Üp->
¥Ÿo
 != 0; ++lp)

1062 i‡(
¥Ÿo
 =
Õ
->proto)

1063  
Õ
->
«me
;

1064  
NULL
;

1065 
	}
}

1071 
	$gë_öput
()

1073 
Àn
, 
i
;

1074 
u_ch¨
 *
p
;

1075 
u_sh‹t
 
¥Ÿocﬁ
;

1076 
¥Ÿít
 *
¥Ÿp
;

1078 
p
 = 
ö∑ckë_buf
;

1080 
Àn
 = 
	`ªad_∑ckë
(
ö∑ckë_buf
);

1081 i‡(
Àn
 < 0)

1084 i‡(
Àn
 == 0) {

1085 i‡(
bundÀ_eof
 && 
mu…ûök_ma°î
) {

1086 
	`nŸi˚
("Last channel has disconnected");

1087 
	`mp_bundÀ_ãrmö©ed
();

1090 
	`nŸi˚
("Modem hangup");

1091 
hungup
 = 1;

1092 
°©us
 = 
EXIT_HANGUP
;

1093 
	`l˝_lowîdown
(0);

1094 
	`lök_ãrmö©ed
(0);

1098 i‡(
Àn
 < 
PPP_HDRLEN
) {

1099 
	`dbglog
("ª˚ived sh‹à∑ckë:%.*B", 
Àn
, 
p
);

1103 
	`dump_∑ckë
("rcvd", 
p
, 
Àn
);

1104 i‡(
¢o›_ªcv_hook
Ë
	`¢o›_ªcv_hook
(
p
, 
Àn
);

1106 
p
 += 2;

1107 
	`GETSHORT
(
¥Ÿocﬁ
, 
p
);

1108 
Àn
 -
PPP_HDRLEN
;

1113 i‡(
¥Ÿocﬁ
 !
PPP_LCP
 && 
l˝_fsm
[0].
°©e
 !
OPENED
) {

1114 
	`dbglog
("DiscardedÇon-LCPÖacket when LCPÇot open");

1122 i‡(
pha£
 <
PHASE_AUTHENTICATE


1123 && !(
¥Ÿocﬁ
 =
PPP_LCP
 ||ÖrŸocﬁ =
PPP_LQR


1124 || 
¥Ÿocﬁ
 =
PPP_PAP
 ||ÖrŸocﬁ =
PPP_CHAP
 ||

1125 
¥Ÿocﬁ
 =
PPP_EAP
)) {

1126 
	`dbglog
("discardingÖroto 0x%x inÖhase %d",

1127 
¥Ÿocﬁ
, 
pha£
);

1134 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1135 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1136 (*
¥Ÿp
->
öput
)(0, 
p
, 
Àn
);

1139 i‡(
¥Ÿocﬁ
 =(
¥Ÿp
->¥Ÿocﬁ & ~0x8000Ë&&ÖrŸp->
íabÀd_Êag


1140 && 
¥Ÿp
->
d©aöput
 !
NULL
) {

1141 (*
¥Ÿp
->
d©aöput
)(0, 
p
, 
Àn
);

1146 i‡(
debug
) {

1147 c⁄° *
≤ame
 = 
	`¥Ÿocﬁ_«me
(
¥Ÿocﬁ
);

1148 i‡(
≤ame
 !
NULL
)

1149 
	`w¨n
("Unsuµ‹ãdÖrŸocﬁ '%s' (0x%xËª˚ived", 
≤ame
, 
¥Ÿocﬁ
);

1151 
	`w¨n
("Unsuµ‹ãdÖrŸocﬁ 0x%xÑe˚ived", 
¥Ÿocﬁ
);

1153 
	`l˝_•rŸªj
(0, 
p
 - 
PPP_HDRLEN
, 
Àn
 + PPP_HDRLEN);

1154 
	}
}

1163 
	$µp_£nd_c⁄fig
(
unô
, 
mtu
, 
accm
, 
pcomp
, 
accomp
)

1164 
unô
, 
mtu
;

1165 
u_öt32_t
 
accm
;

1166 
pcomp
, 
accomp
;

1168 
îrs
;

1170 i‡(
the_ch™√l
->
£nd_c⁄fig
 =
NULL
)

1172 
îrs
 = 
îr‹_cou¡
;

1173 (*
the_ch™√l
->
£nd_c⁄fig
)(
mtu
, 
accm
, 
pcomp
, 
accomp
);

1174  (
îr‹_cou¡
 !
îrs
)? -1: 0;

1175 
	}
}

1184 
	$µp_ªcv_c⁄fig
(
unô
, 
mru
, 
accm
, 
pcomp
, 
accomp
)

1185 
unô
, 
mru
;

1186 
u_öt32_t
 
accm
;

1187 
pcomp
, 
accomp
;

1189 
îrs
;

1191 i‡(
the_ch™√l
->
ªcv_c⁄fig
 =
NULL
)

1193 
îrs
 = 
îr‹_cou¡
;

1194 (*
the_ch™√l
->
ªcv_c⁄fig
)(
mru
, 
accm
, 
pcomp
, 
accomp
);

1195  (
îr‹_cou¡
 !
îrs
)? -1: 0;

1196 
	}
}

1202 
	$√w_pha£
(
p
)

1203 
p
;

1205 
pha£
 = 
p
;

1206 i‡(
√w_pha£_hook
)

1207 (*
√w_pha£_hook
)(
p
);

1208 
	`nŸify
(
pha£ch™ge
, 
p
);

1209 
	}
}

1215 
	$dõ
(
°©us
)

1216 
°©us
;

1218 i‡(!
doög_mu…ûök
 || 
mu…ûök_ma°î
)

1219 
	`¥öt_lök_°©s
();

1220 
	`˛ónup
();

1221 
	`nŸify
(
exônŸify
, 
°©us
);

1222 
	`sy¶og
(
LOG_INFO
, "Exit.");

1223 
	`exô
(
°©us
);

1224 
	}
}

1231 
	$˛ónup
()

1233 
	`sys_˛ónup
();

1235 i‡(
fd_µp
 >= 0)

1236 
the_ch™√l
->
	`di£°ablish_µp
(
devfd
);

1237 i‡(
the_ch™√l
->
˛ónup
)

1238 (*
the_ch™√l
->
˛ónup
)();

1239 
	`ªmove_pidfûes
();

1241 #ifde‡
USE_TDB


1242 i‡(
µpdb
 !
NULL
)

1243 
	`˛ónup_db
();

1246 
	}
}

1249 
	$¥öt_lök_°©s
()

1254 i‡(
lök_°©s_vÆid
) {

1255 
t
 = (
lök_c⁄√˘_time
 + 5) / 6;

1256 
	`öfo
("C⁄√˘Åimê%d.%d möuãs.", 
t
/10,Å%10);

1257 
	`öfo
("Sent %u bytes,Ñeceived %u bytes.",

1258 
lök_°©s
.
byãs_out
,Üök_°©s.
byãs_ö
);

1259 
lök_°©s_vÆid
 = 0;

1261 
	}
}

1267 
	$ª£t_lök_°©s
(
u
)

1268 
u
;

1270 i‡(!
	`gë_µp_°©s
(
u
, &
ﬁd_lök_°©s
))

1272 
	`gë_time
(&
°¨t_time
);

1273 
	}
}

1279 
	$upd©e_lök_°©s
(
u
)

1280 
u
;

1282 
timevÆ
 
now
;

1283 
numbuf
[32];

1285 i‡(!
	`gë_µp_°©s
(
u
, &
lök_°©s
)

1286 || 
	`gë_time
(&
now
) < 0)

1288 
lök_c⁄√˘_time
 = 
now
.
tv_£c
 - 
°¨t_time
.tv_sec;

1289 
lök_°©s_vÆid
 = 1;

1291 
lök_°©s
.
byãs_ö
 -
ﬁd_lök_°©s
.bytes_in;

1292 
lök_°©s
.
byãs_out
 -
ﬁd_lök_°©s
.bytes_out;

1293 
lök_°©s
.
pkts_ö
 -
ﬁd_lök_°©s
.pkts_in;

1294 
lök_°©s
.
pkts_out
 -
ﬁd_lök_°©s
.pkts_out;

1296 
	`¶¥ötf
(
numbuf
, “umbuf), "%u", 
lök_c⁄√˘_time
);

1297 
	`s¸ùt_£ãnv
("CONNECT_TIME", 
numbuf
, 0);

1298 
	`¶¥ötf
(
numbuf
, “umbuf), "%u", 
lök_°©s
.
byãs_out
);

1299 
	`s¸ùt_£ãnv
("BYTES_SENT", 
numbuf
, 0);

1300 
	`¶¥ötf
(
numbuf
, “umbuf), "%u", 
lök_°©s
.
byãs_ö
);

1301 
	`s¸ùt_£ãnv
("BYTES_RCVD", 
numbuf
, 0);

1302 
	}
}

1305 
	sˇŒout
 {

1306 
timevÆ
 
	mc_time
;

1307 *
	mc_¨g
;

1308 (*
	mc_func
Ë
__P
((*));

1309 
ˇŒout
 *
	mc_√xt
;

1312 
ˇŒout
 *
	gˇŒout
 = 
NULL
;

1313 
timevÆ
 
	gtimíow
;

1319 
	$timeout
(
func
, 
¨g
, 
£cs
, 
u£cs
)

1320 (*
func
Ë
	`__P
((*));

1321 *
¨g
;

1322 
£cs
, 
u£cs
;

1324 
ˇŒout
 *
√wp
, *
p
, **
µ
;

1329 i‡((
√wp
 = (
ˇŒout
 *Ë
	`mÆloc
((ˇŒout))Ë=
NULL
)

1330 
	`Áèl
("Out of memory inÅimeout()!");

1331 
√wp
->
c_¨g
 = 
¨g
;

1332 
√wp
->
c_func
 = 
func
;

1333 
	`gë_time
(&
timíow
);

1334 
√wp
->
c_time
.
tv_£c
 = 
timíow
.tv_£¯+ 
£cs
;

1335 
√wp
->
c_time
.
tv_u£c
 = 
timíow
.tv_u£¯+ 
u£cs
;

1336 i‡(
√wp
->
c_time
.
tv_u£c
 >= 1000000) {

1337 
√wp
->
c_time
.
tv_£c
 +√wp->c_time.
tv_u£c
 / 1000000;

1338 
√wp
->
c_time
.
tv_u£c
 %= 1000000;

1344 
µ
 = &
ˇŒout
; (
p
 = *µ);Ö∞&p->
c_√xt
)

1345 i‡(
√wp
->
c_time
.
tv_£c
 < 
p
->c_time.tv_sec

1346 || (
√wp
->
c_time
.
tv_£c
 =
p
->c_time.tv_sec

1347 && 
√wp
->
c_time
.
tv_u£c
 < 
p
->c_time.tv_usec))

1349 
√wp
->
c_√xt
 = 
p
;

1350 *
µ
 = 
√wp
;

1351 
	}
}

1358 
	$u¡imeout
(
func
, 
¨g
)

1359 (*
func
Ë
	`__P
((*));

1360 *
¨g
;

1362 
ˇŒout
 **
c›p
, *
‰ìp
;

1367 
c›p
 = &
ˇŒout
; (
‰ìp
 = *c›p); c›∞&‰ìp->
c_√xt
)

1368 i‡(
‰ìp
->
c_func
 =
func
 && fªï->
c_¨g
 =
¨g
) {

1369 *
c›p
 = 
‰ìp
->
c_√xt
;

1370 
	`‰ì
((*Ë
‰ìp
);

1373 
	}
}

1380 
	$ˇŒtimeout
()

1382 
ˇŒout
 *
p
;

1384 
ˇŒout
 !
NULL
) {

1385 
p
 = 
ˇŒout
;

1387 i‡(
	`gë_time
(&
timíow
) < 0)

1388 
	`Áèl
("FailedÅo getÅime of day: %m");

1389 i‡(!(
p
->
c_time
.
tv_£c
 < 
timíow
.tv_sec

1390 || (
p
->
c_time
.
tv_£c
 =
timíow
.tv_sec

1391 && 
p
->
c_time
.
tv_u£c
 <
timíow
.tv_usec)))

1394 
ˇŒout
 = 
p
->
c_√xt
;

1395 (*
p
->
c_func
)’->
c_¨g
);

1397 
	`‰ì
((*Ë
p
);

1399 
	}
}

1405 
timevÆ
 *

1406 
	$timñe·
(
tvp
)

1407 
timevÆ
 *
tvp
;

1409 i‡(
ˇŒout
 =
NULL
)

1410  
NULL
;

1412 
	`gë_time
(&
timíow
);

1413 
tvp
->
tv_£c
 = 
ˇŒout
->
c_time
.tv_£¯- 
timíow
.tv_sec;

1414 
tvp
->
tv_u£c
 = 
ˇŒout
->
c_time
.tv_u£¯- 
timíow
.tv_usec;

1415 i‡(
tvp
->
tv_u£c
 < 0) {

1416 
tvp
->
tv_u£c
 += 1000000;

1417 
tvp
->
tv_£c
 -= 1;

1419 i‡(
tvp
->
tv_£c
 < 0)

1420 
tvp
->
tv_£c
 =Åvp->
tv_u£c
 = 0;

1422  
tvp
;

1423 
	}
}

1431 
	$kûl_my_pg
(
sig
)

1432 
sig
;

1434 
siga˘i⁄
 
a˘
, 
ﬁda˘
;

1435 
sub¥o˚ss
 *
chp
;

1437 i‡(!
dëached
) {

1443 
chp
 = 
chûdªn
; ch∞!
NULL
; ch∞chp->
√xt
)

1444 i‡(
chp
->
kûœbÀ
)

1445 
	`kûl
(
chp
->
pid
, 
sig
);

1450 
	`sigem±y£t
(&
a˘
.
ß_mask
);

1451 
a˘
.
ß_h™dÀr
 = 
SIG_IGN
;

1452 
a˘
.
ß_Êags
 = 0;

1453 
	`kûl
(0, 
sig
);

1465 
	`siga˘i⁄
(
sig
, &
a˘
, &
ﬁda˘
);

1466 
	`siga˘i⁄
(
sig
, &
ﬁda˘
, 
NULL
);

1467 
	}
}

1478 
	$hup
(
sig
)

1479 
sig
;

1482 
gŸ_sighup
 = 1;

1483 i‡(
c⁄n_ru¬ög
)

1485 
	`kûl_my_pg
(
sig
);

1486 
	`nŸify
(
sigª˚ived
, 
sig
);

1487 i‡(
waôög
)

1488 
	`wrôe
(
sigpùe
[1], &
sig
, (sig));

1489 
	}
}

1499 
	$ãrm
(
sig
)

1500 
sig
;

1503 
gŸ_sigãrm
 = 
sig
;

1504 i‡(
c⁄n_ru¬ög
)

1506 
	`kûl_my_pg
(
sig
);

1507 
	`nŸify
(
sigª˚ived
, 
sig
);

1508 i‡(
waôög
)

1509 
	`wrôe
(
sigpùe
[1], &
sig
, (sig));

1510 
	}
}

1518 
	$chld
(
sig
)

1519 
sig
;

1521 
gŸ_sigchld
 = 1;

1522 i‡(
waôög
)

1523 
	`wrôe
(
sigpùe
[1], &
sig
, (sig));

1524 
	}
}

1534 
	$toggÀ_debug
(
sig
)

1535 
sig
;

1537 
debug
 = !debug;

1538 i‡(
debug
) {

1539 
	`£éogmask
(
	`LOG_UPTO
(
LOG_DEBUG
));

1541 
	`£éogmask
(
	`LOG_UPTO
(
LOG_WARNING
));

1543 
	}
}

1553 
	$›í_c˝
(
sig
)

1554 
sig
;

1556 
gŸ_sigu§2
 = 1;

1557 i‡(
waôög
)

1558 
	`wrôe
(
sigpùe
[1], &
sig
, (sig));

1559 
	}
}

1566 
	$bad_sig«l
(
sig
)

1567 
sig
;

1569 
¸ashed
 = 0;

1571 i‡(
¸ashed
)

1572 
	`_exô
(127);

1573 
¸ashed
 = 1;

1574 
	`îr‹
("F©Æ sig«»%d", 
sig
);

1575 i‡(
c⁄n_ru¬ög
)

1576 
	`kûl_my_pg
(
SIGTERM
);

1577 
	`nŸify
(
sigª˚ived
, 
sig
);

1578 
	`dõ
(127);

1579 
	}
}

1588 
pid_t


1589 
	$ß„_f‹k
(
öfd
, 
outfd
, 
îrfd
)

1591 
pid_t
 
pid
;

1592 
fd
, 
pùefd
[2];

1593 
buf
[1];

1596 (
fd
 = 
	`dup
(
fd_devnuŒ
)) >= 0) {

1597 i‡(
fd
 > 2) {

1598 
	`˛o£
(
fd
);

1603 i‡(
	`pùe
(
pùefd
) == -1)

1604 
pùefd
[0] =Öipefd[1] = -1;

1605 
pid
 = 
	`f‹k
();

1606 i‡(
pid
 < 0) {

1607 
	`îr‹
("fork failed: %m");

1610 i‡(
pid
 > 0) {

1612 
	`˛o£
(
pùefd
[1]);

1614 
	`com∂ëe_ªad
(
pùefd
[0], 
buf
, 1);

1615 
	`˛o£
(
pùefd
[0]);

1616  
pid
;

1620 
	`sys_˛o£
();

1621 #ifde‡
USE_TDB


1622 i‡(
µpdb
 !
NULL
)

1623 
	`tdb_˛o£
(
µpdb
);

1627 i‡(
öfd
 == 1 || infd == 2)

1628 
öfd
 = 
	`dup
(infd);

1629 i‡(
outfd
 == 0 || outfd == 2)

1630 
outfd
 = 
	`dup
(outfd);

1631 i‡(
îrfd
 == 0 ||Érrfd == 1)

1632 
îrfd
 = 
	`dup
(errfd);

1634 
	`˛o£log
();

1637 i‡(
öfd
 != 0)

1638 
	`dup2
(
öfd
, 0);

1639 i‡(
outfd
 != 1)

1640 
	`dup2
(
outfd
, 1);

1641 i‡(
îrfd
 != 2)

1642 
	`dup2
(
îrfd
, 2);

1644 i‡(
log_to_fd
 > 2)

1645 
	`˛o£
(
log_to_fd
);

1646 i‡(
the_ch™√l
->
˛o£
)

1647 (*
the_ch™√l
->
˛o£
)();

1649 
	`˛o£
(
devfd
);

1650 
	`˛o£
(
fd_µp
);

1651 
	`˛o£
(
fd_devnuŒ
);

1652 i‡(
öfd
 != 0)

1653 
	`˛o£
(
öfd
);

1654 i‡(
outfd
 != 1)

1655 
	`˛o£
(
outfd
);

1656 i‡(
îrfd
 != 2)

1657 
	`˛o£
(
îrfd
);

1659 
	`nŸify
(
f‹k_nŸifõr
, 0);

1660 
	`˛o£
(
pùefd
[0]);

1662 
	`˛o£
(
pùefd
[1]);

1665 
	}
}

1667 
boﬁ


1668 
	$add_s¸ùt_ív
(
pos
, 
√w°rög
)

1669 
pos
;

1670 *
√w°rög
;

1672 i‡(
pos
 + 1 >
s_ív_«Œoc
) {

1673 
√w_n
 = 
pos
 + 17;

1674 **
√wív
 = 
	`ªÆloc
(
s¸ùt_ív
, 
√w_n
 * (*));

1675 i‡(
√wív
 =
NULL
) {

1676 
	`‰ì
(
√w°rög
 - 1);

1679 
s¸ùt_ív
 = 
√wív
;

1680 
s_ív_«Œoc
 = 
√w_n
;

1682 
s¸ùt_ív
[
pos
] = 
√w°rög
;

1683 
s¸ùt_ív
[
pos
 + 1] = 
NULL
;

1685 
	}
}

1688 
	$ªmove_s¸ùt_ív
(
pos
)

1689 
pos
;

1691 
	`‰ì
(
s¸ùt_ív
[
pos
] - 1);

1692 (
s¸ùt_ív
[
pos
] = s¸ùt_ív[po†+ 1]Ë!
NULL
)

1693 
pos
++;

1694 
	}
}

1701 
	$upd©e_sy°em_ívú⁄mít
()

1703 
u£ªnv
 *
uï
;

1705 
uï
 = 
u£ªnv_li°
; uï !
NULL
; uï = uï->
ue_√xt
) {

1706 i‡(
uï
->
ue_is£t
)

1707 
	`£ãnv
(
uï
->
ue_«me
, uï->
ue_vÆue
, 1);

1709 
	`un£ãnv
(
uï
->
ue_«me
);

1711 
	}
}

1719 
	$devi˚_s¸ùt
(
¥ogøm
, 
ö
, 
out
, 
d⁄t_waô
)

1720 *
¥ogøm
;

1721 
ö
, 
out
;

1722 
d⁄t_waô
;

1724 
pid
;

1725 
°©us
 = -1;

1726 
îrfd
;

1728 i‡(
log_to_fd
 >= 0)

1729 
îrfd
 = 
log_to_fd
;

1731 
îrfd
 = 
	`›í
(
_PATH_CONNERRS
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0600);

1733 ++
c⁄n_ru¬ög
;

1734 
pid
 = 
	`ß„_f‹k
(
ö
, 
out
, 
îrfd
);

1736 i‡(
pid
 !0 && 
log_to_fd
 < 0)

1737 
	`˛o£
(
îrfd
);

1739 i‡(
pid
 < 0) {

1740 --
c⁄n_ru¬ög
;

1741 
	`îr‹
("FailedÅo create childÖrocess: %m");

1745 i‡(
pid
 != 0) {

1746 
	`ªc‹d_chûd
(
pid
, 
¥ogøm
, 
NULL
, NULL, 1);

1747 
°©us
 = 0;

1748 i‡(!
d⁄t_waô
) {

1749 
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

1750 i‡(
î∫o
 =
EINTR
)

1752 
	`Áèl
("error waiting for (dis)connectionÖrocess: %m");

1754 
	`f‹gë_chûd
(
pid
, 
°©us
);

1755 --
c⁄n_ru¬ög
;

1757  (
°©us
 == 0 ? 0 : -1);

1762 
	`£tgid
(
	`gëgid
());

1763 
	`£tuid
(
uid
);

1764 i‡(
	`gëuid
(Ë!
uid
) {

1765 
	`Ârötf
(
°dîr
, "pppd: setuid failed\n");

1766 
	`exô
(1);

1768 
	`upd©e_sy°em_ívú⁄mít
();

1769 
	`exe˛
("/bö/sh", "sh", "-c", 
¥ogøm
, (*)0);

1770 
	`≥º‹
("pppd: couldÇotÉxec /bin/sh");

1771 
	`_exô
(99);

1773 
	}
}

1784 
	$upd©e_s¸ùt_ívú⁄mít
()

1786 
u£ªnv
 *
uï
;

1788 
uï
 = 
u£ªnv_li°
; uï !
NULL
; uï = uï->
ue_√xt
) {

1789 
i
;

1790 *
p
, *
√w°rög
;

1791 
∆í
 = 
	`°æí
(
uï
->
ue_«me
);

1793 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]Ë!
NULL
; i++) {

1794 i‡(
	`°∫cmp
(
p
, 
uï
->
ue_«me
, 
∆í
) == 0 &&Ö[nlen] == '=')

1797 i‡(
uï
->
ue_is£t
) {

1798 
∆í
 +
	`°æí
(
uï
->
ue_vÆue
) + 2;

1799 
√w°rög
 = 
	`mÆloc
(
∆í
 + 1);

1800 i‡(
√w°rög
 =
NULL
)

1802 *
√w°rög
++ = 0;

1803 
	`¶¥ötf
(
√w°rög
, 
∆í
, "%s=%s", 
uï
->
ue_«me
, uï->
ue_vÆue
);

1804 i‡(
p
 !
NULL
)

1805 
s¸ùt_ív
[
i
] = 
√w°rög
;

1807 
	`add_s¸ùt_ív
(
i
, 
√w°rög
);

1808 } i‡(
p
 !
NULL
) {

1809 
	`ªmove_s¸ùt_ív
(
i
);

1812 
	}
}

1824 
pid_t


1825 
	$run_¥ogøm
(
¥og
, 
¨gs
, 
mu°_exi°
, 
d⁄e
, 
¨g
, 
waô
)

1826 *
¥og
;

1827 **
¨gs
;

1828 
mu°_exi°
;

1829 (*
d⁄e
Ë
	`__P
((*));

1830 *
¨g
;

1831 
waô
;

1833 
pid
, 
°©us
;

1834 
°©
 
sbuf
;

1842 
î∫o
 = 
EINVAL
;

1843 i‡(
	`°©
(
¥og
, &
sbuf
Ë< 0 || !
	`S_ISREG
(sbuf.
°_mode
)

1844 || (
sbuf
.
°_mode
 & (
S_IXUSR
|
S_IXGRP
|
S_IXOTH
)) == 0) {

1845 i‡(
mu°_exi°
 || 
î∫o
 !
ENOENT
)

1846 
	`w¨n
("C™'àexecuã %s: %m", 
¥og
);

1850 
pid
 = 
	`ß„_f‹k
(
fd_devnuŒ
, fd_devnull, fd_devnull);

1851 i‡(
pid
 == -1) {

1852 
	`îr‹
("FaûedÅÿ¸óã chûdÖro˚s†f‹ %s: %m", 
¥og
);

1855 i‡(
pid
 != 0) {

1856 i‡(
debug
)

1857 
	`dbglog
("S¸ùà%†°¨ãd (pid %d)", 
¥og
, 
pid
);

1858 
	`ªc‹d_chûd
(
pid
, 
¥og
, 
d⁄e
, 
¨g
, 0);

1859 i‡(
waô
) {

1860 
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

1861 i‡(
î∫o
 =
EINTR
)

1863 
	`Áèl
("îr‹ waôög f‹ s¸ùà%s: %m", 
¥og
);

1865 
	`f‹gë_chûd
(
pid
, 
°©us
);

1867  
pid
;

1871 (Ë
	`£tsid
();

1872 (Ë
	`umask
 (
S_IRWXG
|
S_IRWXO
);

1873 (Ë
	`chdú
 ("/");

1874 
	`£tuid
(0);

1875 
	`£tgid
(
	`gëegid
());

1877 #ifde‡
BSD


1879 i‡(
	`£çri‹ôy
 (
PRIO_PROCESS
, 0, 0) < 0)

1880 
	`w¨n
("can'tÑesetÖriorityÅo 0: %m");

1884 
	`upd©e_s¸ùt_ívú⁄mít
();

1885 
	`execve
(
¥og
, 
¨gs
, 
s¸ùt_ív
);

1886 i‡(
mu°_exi°
 || 
î∫o
 !
ENOENT
) {

1889 
	`ª›í_log
();

1890 
	`sy¶og
(
LOG_ERR
, "C™'àexecuã %s: %m", 
¥og
);

1891 
	`˛o£log
();

1893 
	`_exô
(99);

1894 
	}
}

1902 
	$ªc‹d_chûd
(
pid
, 
¥og
, 
d⁄e
, 
¨g
, 
kûœbÀ
)

1903 
pid
;

1904 *
¥og
;

1905 (*
d⁄e
Ë
	`__P
((*));

1906 *
¨g
;

1907 
kûœbÀ
;

1909 
sub¥o˚ss
 *
chp
;

1911 ++
n_chûdªn
;

1913 
chp
 = (
sub¥o˚ss
 *Ë
	`mÆloc
((subprocess));

1914 i‡(
chp
 =
NULL
) {

1915 
	`w¨n
("losögÅøck o‡%†¥o˚ss", 
¥og
);

1917 
chp
->
pid
 =Öid;

1918 
chp
->
¥og
 =Örog;

1919 
chp
->
d⁄e
 = done;

1920 
chp
->
¨g
 =árg;

1921 
chp
->
√xt
 = 
chûdªn
;

1922 
chp
->
kûœbÀ
 = killable;

1923 
chûdªn
 = 
chp
;

1925 
	}
}

1932 
	$chûdwaô_íd
(
¨g
)

1933 *
¨g
;

1935 
sub¥o˚ss
 *
chp
;

1937 
chp
 = 
chûdªn
; ch∞!
NULL
; ch∞chp->
√xt
) {

1938 i‡(
debug
)

1939 
	`dbglog
("£ndög SIGTERMÅÿ¥o˚s†%d", 
chp
->
pid
);

1940 
	`kûl
(
chp
->
pid
, 
SIGTERM
);

1942 
chûdwaô_d⁄e
 = 1;

1943 
	}
}

1949 
	$f‹gë_chûd
(
pid
, 
°©us
)

1950 
pid
, 
°©us
;

1952 
sub¥o˚ss
 *
chp
, **
¥evp
;

1954 
¥evp
 = &
chûdªn
; (
chp
 = *¥evpË!
NULL
;Öªv∞&chp->
√xt
) {

1955 i‡(
chp
->
pid
 ==Öid) {

1956 --
n_chûdªn
;

1957 *
¥evp
 = 
chp
->
√xt
;

1961 i‡(
	`WIFSIGNALED
(
°©us
)) {

1962 
	`w¨n
("ChildÖrocess %s (pid %d)Åerminated with signal %d",

1963 (
chp
? chp->
¥og
: "??"), 
pid
, 
	`WTERMSIG
(
°©us
));

1964 } i‡(
debug
)

1965 
	`dbglog
("Script %s finished (pid %d), status = 0x%x",

1966 (
chp
? chp->
¥og
: "??"), 
pid
,

1967 
	`WIFEXITED
(
°©us
Ë? 
	`WEXITSTATUS
(status) : status);

1968 i‡(
chp
 && chp->
d⁄e
)

1969 (*
chp
->
d⁄e
)(chp->
¨g
);

1970 i‡(
chp
)

1971 
	`‰ì
(
chp
);

1972 
	}
}

1979 
	$ª≠_kids
()

1981 
pid
, 
°©us
;

1983 i‡(
n_chûdªn
 == 0)

1985 (
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
)) != -1 &&Öid != 0) {

1986 
	`f‹gë_chûd
(
pid
, 
°©us
);

1988 i‡(
pid
 == -1) {

1989 i‡(
î∫o
 =
ECHILD
)

1991 i‡(
î∫o
 !
EINTR
)

1992 
	`îr‹
("Error waiting for childÖrocess: %m");

1995 
	}
}

2001 
	$add_nŸifõr
(
nŸif
, 
func
, 
¨g
)

2002 
nŸifõr
 **
nŸif
;

2003 
nŸify_func
 
func
;

2004 *
¨g
;

2006 
nŸifõr
 *
≈
;

2008 
≈
 = 
	`mÆloc
((
nŸifõr
));

2009 i‡(
≈
 == 0)

2010 
	`novm
("notifier struct");

2011 
≈
->
√xt
 = *
nŸif
;

2012 
≈
->
func
 = func;

2013 
≈
->
¨g
 =árg;

2014 *
nŸif
 = 
≈
;

2015 
	}
}

2022 
	$ªmove_nŸifõr
(
nŸif
, 
func
, 
¨g
)

2023 
nŸifõr
 **
nŸif
;

2024 
nŸify_func
 
func
;

2025 *
¨g
;

2027 
nŸifõr
 *
≈
;

2029 ; (
≈
 = *
nŸif
Ë!0;ÇŸi‡&≈->
√xt
) {

2030 i‡(
≈
->
func
 =fun¯&&Çp->
¨g
 ==árg) {

2031 *
nŸif
 = 
≈
->
√xt
;

2032 
	`‰ì
(
≈
);

2036 
	}
}

2042 
	$nŸify
(
nŸif
, 
vÆ
)

2043 
nŸifõr
 *
nŸif
;

2044 
vÆ
;

2046 
nŸifõr
 *
≈
;

2048 (
≈
 = 
nŸif
) != 0) {

2049 
nŸif
 = 
≈
->
√xt
;

2050 (*
≈
->
func
)“p->
¨g
, 
vÆ
);

2052 
	}
}

2058 
	$novm
(
msg
)

2059 *
msg
;

2061 
	`Áèl
("VútuÆ mem‹yÉxhau°edáŒoˇtög %s\n", 
msg
);

2062 
	}
}

2069 
	$s¸ùt_£ãnv
(
v¨
, 
vÆue
, 
iskey
)

2070 *
v¨
, *
vÆue
;

2071 
iskey
;

2073 
size_t
 
v¨l
 = 
	`°æí
(
v¨
);

2074 
size_t
 
vl
 = 
v¨l
 + 
	`°æí
(
vÆue
) + 2;

2075 
i
;

2076 *
p
, *
√w°rög
;

2078 
√w°rög
 = (*Ë
	`mÆloc
(
vl
+1);

2079 i‡(
√w°rög
 == 0)

2081 *
√w°rög
++ = 
iskey
;

2082 
	`¶¥ötf
(
√w°rög
, 
vl
, "%s=%s", 
v¨
, 
vÆue
);

2085 i‡(
s¸ùt_ív
 != 0) {

2086 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]) != 0; ++i) {

2087 i‡(
	`°∫cmp
(
p
, 
v¨
, 
v¨l
) == 0 &&Ö[varl] == '=') {

2088 #ifde‡
USE_TDB


2089 i‡(
p
[-1] && 
µpdb
 !
NULL
)

2090 
	`dñëe_db_key
(
p
);

2092 
	`‰ì
(
p
-1);

2093 
s¸ùt_ív
[
i
] = 
√w°rög
;

2094 #ifde‡
USE_TDB


2095 i‡(
µpdb
 !
NULL
) {

2096 i‡(
iskey
)

2097 
	`add_db_key
(
√w°rög
);

2098 
	`upd©e_db_íåy
();

2106 
i
 = 0;

2107 
s¸ùt_ív
 = 
	`mÆloc
(16 * (*));

2108 i‡(
s¸ùt_ív
 == 0) {

2109 
	`‰ì
(
√w°rög
 - 1);

2112 
s_ív_«Œoc
 = 16;

2115 i‡(!
	`add_s¸ùt_ív
(
i
, 
√w°rög
))

2118 #ifde‡
USE_TDB


2119 i‡(
µpdb
 !
NULL
) {

2120 i‡(
iskey
)

2121 
	`add_db_key
(
√w°rög
);

2122 
	`upd©e_db_íåy
();

2125 
	}
}

2132 
	$s¸ùt_un£ãnv
(
v¨
)

2133 *
v¨
;

2135 
vl
 = 
	`°æí
(
v¨
);

2136 
i
;

2137 *
p
;

2139 i‡(
s¸ùt_ív
 == 0)

2141 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]) != 0; ++i) {

2142 i‡(
	`°∫cmp
(
p
, 
v¨
, 
vl
) == 0 &&Ö[vl] == '=') {

2143 #ifde‡
USE_TDB


2144 i‡(
p
[-1] && 
µpdb
 !
NULL
)

2145 
	`dñëe_db_key
(
p
);

2147 
	`ªmove_s¸ùt_ív
(
i
);

2151 #ifde‡
USE_TDB


2152 i‡(
µpdb
 !
NULL
)

2153 
	`upd©e_db_íåy
();

2155 
	}
}

2161 
	#PPPD_LOCK_KEY
 "µpdÜock"

	)

2167 
	$lock_db
()

2169 #ifde‡
USE_TDB


2170 
TDB_DATA
 
key
;

2172 
key
.
d±r
 = 
PPPD_LOCK_KEY
;

2173 
key
.
dsize
 = 
	`°æí
(key.
d±r
);

2174 
	`tdb_chaölock
(
µpdb
, 
key
);

2176 
	}
}

2181 
	$u∆ock_db
()

2183 #ifde‡
USE_TDB


2184 
TDB_DATA
 
key
;

2186 
key
.
d±r
 = 
PPPD_LOCK_KEY
;

2187 
key
.
dsize
 = 
	`°æí
(key.
d±r
);

2188 
	`tdb_chaöu∆ock
(
µpdb
, 
key
);

2190 
	}
}

2192 #ifde‡
USE_TDB


2197 
	$upd©e_db_íåy
()

2199 
TDB_DATA
 
key
, 
dbuf
;

2200 
vÀn
, 
i
;

2201 *
p
, *
q
, *
vbuf
;

2203 i‡(
s¸ùt_ív
 =
NULL
)

2205 
vÀn
 = 0;

2206 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]) != 0; ++i)

2207 
vÀn
 +
	`°æí
(
p
) + 1;

2208 
vbuf
 = 
	`mÆloc
(
vÀn
 + 1);

2209 i‡(
vbuf
 == 0)

2210 
	`novm
("databaseÉntry");

2211 
q
 = 
vbuf
;

2212 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]) != 0; ++i)

2213 
q
 +
	`¶¥ötf
(q, 
vbuf
 + 
vÀn
 - q, "%s;", 
p
);

2215 
key
.
d±r
 = 
db_key
;

2216 
key
.
dsize
 = 
	`°æí
(
db_key
);

2217 
dbuf
.
d±r
 = 
vbuf
;

2218 
dbuf
.
dsize
 = 
vÀn
;

2219 i‡(
	`tdb_°‹e
(
µpdb
, 
key
, 
dbuf
, 
TDB_REPLACE
))

2220 
	`îr‹
("tdb_°‹êÁûed: %s", 
	`tdb_îr‹°r
(
µpdb
));

2222 i‡(
vbuf
)

2223 
	`‰ì
(
vbuf
);

2225 
	}
}

2231 
	$add_db_key
(
°r
)

2232 c⁄° *
°r
;

2234 
TDB_DATA
 
key
, 
dbuf
;

2236 
key
.
d±r
 = (*Ë
°r
;

2237 
key
.
dsize
 = 
	`°æí
(
°r
);

2238 
dbuf
.
d±r
 = 
db_key
;

2239 
dbuf
.
dsize
 = 
	`°æí
(
db_key
);

2240 i‡(
	`tdb_°‹e
(
µpdb
, 
key
, 
dbuf
, 
TDB_REPLACE
))

2241 
	`îr‹
("tdb_°‹êkey faûed: %s", 
	`tdb_îr‹°r
(
µpdb
));

2242 
	}
}

2248 
	$dñëe_db_key
(
°r
)

2249 c⁄° *
°r
;

2251 
TDB_DATA
 
key
;

2253 
key
.
d±r
 = (*Ë
°r
;

2254 
key
.
dsize
 = 
	`°æí
(
°r
);

2255 
	`tdb_dñëe
(
µpdb
, 
key
);

2256 
	}
}

2262 
	$˛ónup_db
()

2264 
TDB_DATA
 
key
;

2265 
i
;

2266 *
p
;

2268 
key
.
d±r
 = 
db_key
;

2269 
key
.
dsize
 = 
	`°æí
(
db_key
);

2270 
	`tdb_dñëe
(
µpdb
, 
key
);

2271 
i
 = 0; (
p
 = 
s¸ùt_ív
[i]) != 0; ++i)

2272 i‡(
p
[-1])

2273 
	`dñëe_db_key
(
p
);

2274 
	}
}

	@pppd/md4.c

34 
	#TRUE
 1

	)

35 
	#FALSE
 0

	)

39 
	~<°dio.h
>

40 
	~"md4.h
"

41 
	~"µpd.h
"

45 
	#I0
 0x67452301

	)

46 
	#I1
 0xefcdab89

	)

47 
	#I2
 0x98badc„

	)

48 
	#I3
 0x10325476

	)

49 
	#C2
 013240474631

	)

50 
	#C3
 015666365641

	)

56 
	#fs1
 3

	)

57 
	#fs2
 7

	)

58 
	#fs3
 11

	)

59 
	#fs4
 19

	)

60 
	#gs1
 3

	)

61 
	#gs2
 5

	)

62 
	#gs3
 9

	)

63 
	#gs4
 13

	)

64 
	#hs1
 3

	)

65 
	#hs2
 9

	)

66 
	#hs3
 11

	)

67 
	#hs4
 15

	)

74 
	#f
(
X
,
Y
,
Z
Ë((X&YË| ((~X)&Z))

	)

75 
	#g
(
X
,
Y
,
Z
Ë((X&YË| (X&ZË| (Y&Z))

	)

76 
	#h
(
X
,
Y
,
Z
Ë(X^Y^Z)

	)

77 
	#rŸ
(
X
,
S
Ë(
tmp
=X,—mp<<SË| (tmp>>(32-S)))

	)

78 
	#ff
(
A
,
B
,
C
,
D
,
i
,
s
ËA = 
	`rŸ
((A + 
	`f
(B,C,DË+ 
X
[i]),s)

	)

79 
	#gg
(
A
,
B
,
C
,
D
,
i
,
s
ËA = 
	`rŸ
((A + 
	`g
(B,C,DË+ 
X
[i] + 
C2
),s)

	)

80 
	#hh
(
A
,
B
,
C
,
D
,
i
,
s
ËA = 
	`rŸ
((A + 
	`h
(B,C,DË+ 
X
[i] + 
C3
),s)

	)

90 
	$MD4Pröt
(
MDp
)

91 
MD4_CTX
 *
MDp
;

93 
i
,
j
;

94 
i
=0;i<4;i++)

95 
j
=0;j<32;j=j+8)

96 
	`¥ötf
("%02x",(
MDp
->
buf„r
[
i
]>>
j
) & 0xFF);

97 
	}
}

104 
	$MD4Inô
(
MDp
)

105 
MD4_CTX
 *
MDp
;

107 
i
;

108 
MDp
->
buf„r
[0] = 
I0
;

109 
MDp
->
buf„r
[1] = 
I1
;

110 
MDp
->
buf„r
[2] = 
I2
;

111 
MDp
->
buf„r
[3] = 
I3
;

112 
i
=0;i<8;i++Ë
MDp
->
cou¡
[i] = 0;

113 
MDp
->
d⁄e
 = 0;

114 
	}
}

123 
	$MDblock
(
MDp
,
Xb
)

124 
MD4_CTX
 *
MDp
;

125 *
Xb
;

127 
tmp
, 
A
, 
B
, 
C
, 
D
;

128 
X
[16];

129 
i
;

131 
i
 = 0; i < 16; ++i) {

132 
X
[
i
] = 
Xb
[0] + (Xb[1] << 8) + (Xb[2] << 16) + (Xb[3] << 24);

133 
Xb
 += 4;

136 
A
 = 
MDp
->
buf„r
[0];

137 
B
 = 
MDp
->
buf„r
[1];

138 
C
 = 
MDp
->
buf„r
[2];

139 
D
 = 
MDp
->
buf„r
[3];

141 
	`ff
(
A
 , 
B
 , 
C
 , 
D
 , 0 , 
fs1
);

142 
	`ff
(
D
 , 
A
 , 
B
 , 
C
 , 1 , 
fs2
);

143 
	`ff
(
C
 , 
D
 , 
A
 , 
B
 , 2 , 
fs3
);

144 
	`ff
(
B
 , 
C
 , 
D
 , 
A
 , 3 , 
fs4
);

145 
	`ff
(
A
 , 
B
 , 
C
 , 
D
 , 4 , 
fs1
);

146 
	`ff
(
D
 , 
A
 , 
B
 , 
C
 , 5 , 
fs2
);

147 
	`ff
(
C
 , 
D
 , 
A
 , 
B
 , 6 , 
fs3
);

148 
	`ff
(
B
 , 
C
 , 
D
 , 
A
 , 7 , 
fs4
);

149 
	`ff
(
A
 , 
B
 , 
C
 , 
D
 , 8 , 
fs1
);

150 
	`ff
(
D
 , 
A
 , 
B
 , 
C
 , 9 , 
fs2
);

151 
	`ff
(
C
 , 
D
 , 
A
 , 
B
 , 10 , 
fs3
);

152 
	`ff
(
B
 , 
C
 , 
D
 , 
A
 , 11 , 
fs4
);

153 
	`ff
(
A
 , 
B
 , 
C
 , 
D
 , 12 , 
fs1
);

154 
	`ff
(
D
 , 
A
 , 
B
 , 
C
 , 13 , 
fs2
);

155 
	`ff
(
C
 , 
D
 , 
A
 , 
B
 , 14 , 
fs3
);

156 
	`ff
(
B
 , 
C
 , 
D
 , 
A
 , 15 , 
fs4
);

157 
	`gg
(
A
 , 
B
 , 
C
 , 
D
 , 0 , 
gs1
);

158 
	`gg
(
D
 , 
A
 , 
B
 , 
C
 , 4 , 
gs2
);

159 
	`gg
(
C
 , 
D
 , 
A
 , 
B
 , 8 , 
gs3
);

160 
	`gg
(
B
 , 
C
 , 
D
 , 
A
 , 12 , 
gs4
);

161 
	`gg
(
A
 , 
B
 , 
C
 , 
D
 , 1 , 
gs1
);

162 
	`gg
(
D
 , 
A
 , 
B
 , 
C
 , 5 , 
gs2
);

163 
	`gg
(
C
 , 
D
 , 
A
 , 
B
 , 9 , 
gs3
);

164 
	`gg
(
B
 , 
C
 , 
D
 , 
A
 , 13 , 
gs4
);

165 
	`gg
(
A
 , 
B
 , 
C
 , 
D
 , 2 , 
gs1
);

166 
	`gg
(
D
 , 
A
 , 
B
 , 
C
 , 6 , 
gs2
);

167 
	`gg
(
C
 , 
D
 , 
A
 , 
B
 , 10 , 
gs3
);

168 
	`gg
(
B
 , 
C
 , 
D
 , 
A
 , 14 , 
gs4
);

169 
	`gg
(
A
 , 
B
 , 
C
 , 
D
 , 3 , 
gs1
);

170 
	`gg
(
D
 , 
A
 , 
B
 , 
C
 , 7 , 
gs2
);

171 
	`gg
(
C
 , 
D
 , 
A
 , 
B
 , 11 , 
gs3
);

172 
	`gg
(
B
 , 
C
 , 
D
 , 
A
 , 15 , 
gs4
);

173 
	`hh
(
A
 , 
B
 , 
C
 , 
D
 , 0 , 
hs1
);

174 
	`hh
(
D
 , 
A
 , 
B
 , 
C
 , 8 , 
hs2
);

175 
	`hh
(
C
 , 
D
 , 
A
 , 
B
 , 4 , 
hs3
);

176 
	`hh
(
B
 , 
C
 , 
D
 , 
A
 , 12 , 
hs4
);

177 
	`hh
(
A
 , 
B
 , 
C
 , 
D
 , 2 , 
hs1
);

178 
	`hh
(
D
 , 
A
 , 
B
 , 
C
 , 10 , 
hs2
);

179 
	`hh
(
C
 , 
D
 , 
A
 , 
B
 , 6 , 
hs3
);

180 
	`hh
(
B
 , 
C
 , 
D
 , 
A
 , 14 , 
hs4
);

181 
	`hh
(
A
 , 
B
 , 
C
 , 
D
 , 1 , 
hs1
);

182 
	`hh
(
D
 , 
A
 , 
B
 , 
C
 , 9 , 
hs2
);

183 
	`hh
(
C
 , 
D
 , 
A
 , 
B
 , 5 , 
hs3
);

184 
	`hh
(
B
 , 
C
 , 
D
 , 
A
 , 13 , 
hs4
);

185 
	`hh
(
A
 , 
B
 , 
C
 , 
D
 , 3 , 
hs1
);

186 
	`hh
(
D
 , 
A
 , 
B
 , 
C
 , 11 , 
hs2
);

187 
	`hh
(
C
 , 
D
 , 
A
 , 
B
 , 7 , 
hs3
);

188 
	`hh
(
B
 , 
C
 , 
D
 , 
A
 , 15 , 
hs4
);

189 
MDp
->
buf„r
[0] +
A
;

190 
MDp
->
buf„r
[1] +
B
;

191 
MDp
->
buf„r
[2] +
C
;

192 
MDp
->
buf„r
[3] +
D
;

193 
	}
}

209 
	$MD4Upd©e
(
MDp
,
X
,
cou¡
)

210 
MD4_CTX
 *
MDp
;

211 *
X
;

212 
cou¡
;

214 
i
, 
tmp
, 
bô
, 
byã
, 
mask
;

215 
XX
[64];

216 *
p
;

221 i‡(
cou¡
 =0 && 
MDp
->
d⁄e
) ;

223 i‡(
MDp
->
d⁄e
)

224 { 
	`¥ötf
("\nError: MD4Update MDálready done."); ; }

227 
tmp
 = 
cou¡
;

228 
p
 = 
MDp
->
cou¡
;

229 
tmp
)

230 { 
tmp
 +*
p
;

231 *
p
++ = 
tmp
;

232 
tmp
 =Åmp >> 8;

236 i‡(
cou¡
 == 512)

238 
	`MDblock
(
MDp
,
X
);

240 i‡(
cou¡
 > 512)

242 
	`¥ötf
("\nError: MD4Update called with illegal count value %d.",

243 
cou¡
);

249 
byã
 = 
cou¡
 >> 3;

250 
bô
 = 
cou¡
 & 7;

252 i‡(
cou¡
)

253 
i
=0;i<=
byã
;i++Ë
XX
[i] = 
X
[i];

254 
i
=
byã
+1;i<64;i++Ë
XX
[i] = 0;

256 
mask
 = 1 << (7 - 
bô
);

257 
XX
[
byã
] = (XX[byã] | 
mask
) & ~( mask - 1);

259 i‡(
byã
 <= 55)

261 
i
=0;i<8;i++Ë
XX
[56+i] = 
MDp
->
cou¡
[i];

262 
	`MDblock
(
MDp
,
XX
);

266 
	`MDblock
(
MDp
,
XX
);

267 
i
=0;i<56;i++Ë
XX
[i] = 0;

268 
i
=0;i<8;i++Ë
XX
[56+i] = 
MDp
->
cou¡
[i];

269 
	`MDblock
(
MDp
,
XX
);

272 
MDp
->
d⁄e
 = 1;

274 
	}
}

280 
	$MD4FöÆ
(
buf
, 
MD
)

281 *
buf
;

282 
MD4_CTX
 *
MD
;

284 
i
, 
j
;

285 
w
;

287 
	`MD4Upd©e
(
MD
, 
NULL
, 0);

288 
i
 = 0; i < 4; ++i) {

289 
w
 = 
MD
->
buf„r
[
i
];

290 
j
 = 0; j < 4; ++j) {

291 *
buf
++ = 
w
;

292 
w
 >>= 8;

295 
	}
}

	@pppd/md4.h

11 #i‚de‡
__P


12 #i‡
deföed
(
__STDC__
Ë|| deföed(
__GNUC__
)

13 
	#__P
(
x
Ë
	)
x

15 
	#__P
(
x
Ë()

	)

23 
	mbuf„r
[4];

24 
	mcou¡
[8];

25 
	md⁄e
;

26 } 
	tMD4_CTX
;

32 
MD4Inô
 
__P
((
MD4_CTX
 *
MD
));

46 
MD4Upd©e
 
__P
((
MD4_CTX
 *
MD
, *
X
, 
cou¡
));

54 
MD4Pröt
 
__P
((
MD4_CTX
 *));

60 
MD4FöÆ
 
__P
((*, 
MD4_CTX
 *));

	@pppd/md5.c

36 
	~<°rög.h
>

37 
	~"md5.h
"

51 
Tønsf‹m
 (
UINT4
 *
buf
, UINT4 *
ö
);

53 
	gPADDING
[64] = {

65 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

66 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

67 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

68 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

71 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

75 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

76 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

77 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

78 (
a
Ë+(
b
); \

79 }

	)

80 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

81 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

82 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

83 (
a
Ë+(
b
); \

84 }

	)

85 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

86 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

87 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

88 (
a
Ë+(
b
); \

89 }

	)

90 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

91 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

92 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

93 (
a
Ë+(
b
); \

94 }

	)

96 #ifde‡
__STDC__


97 
	#UL
(
x
Ëx##
U


	)

99 
	#UL
(
x
Ë
	)
x

105 
	$MD5_Inô
 (
mdC⁄ãxt
)

106 
MD5_CTX
 *
mdC⁄ãxt
;

108 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
UINT4
)0;

112 
mdC⁄ãxt
->
buf
[0] = (
UINT4
)0x67452301;

113 
mdC⁄ãxt
->
buf
[1] = (
UINT4
)0xefcdab89;

114 
mdC⁄ãxt
->
buf
[2] = (
UINT4
)0x98badcfe;

115 
mdC⁄ãxt
->
buf
[3] = (
UINT4
)0x10325476;

116 
	}
}

122 
	$MD5_Upd©e
 (
mdC⁄ãxt
, 
öBuf
, 
öLí
)

123 
MD5_CTX
 *
mdC⁄ãxt
;

124 *
öBuf
;

125 
öLí
;

127 
UINT4
 
ö
[16];

128 
mdi
;

129 
i
, 
ii
;

132 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

135 i‡((
mdC⁄ãxt
->
i
[0] + ((
UINT4
)
öLí
 << 3)) < mdContext->i[0])

136 
mdC⁄ãxt
->
i
[1]++;

137 
mdC⁄ãxt
->
i
[0] +((
UINT4
)
öLí
 << 3);

138 
mdC⁄ãxt
->
i
[1] +((
UINT4
)
öLí
 >> 29);

140 
öLí
--) {

142 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

145 i‡(
mdi
 == 0x40) {

146 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4)

147 
ö
[
i
] = (((
UINT4
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

148 (((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

149 (((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

150 ((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
]);

151 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

152 
mdi
 = 0;

155 
	}
}

160 
	$MD5_FöÆ
 (
hash
, 
mdC⁄ãxt
)

161 
hash
[];

162 
MD5_CTX
 *
mdC⁄ãxt
;

164 
UINT4
 
ö
[16];

165 
mdi
;

166 
i
, 
ii
;

167 
∑dLí
;

170 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

171 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

174 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

177 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

178 
	`MD5_Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

181 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4)

182 
ö
[
i
] = (((
UINT4
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

183 (((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

184 (((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

185 ((
UINT4
)
mdC⁄ãxt
->
ö
[
ii
]);

186 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

189 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

190 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

191 
mdC⁄ãxt
->
dige°
[
ii
+1] =

192 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

193 
mdC⁄ãxt
->
dige°
[
ii
+2] =

194 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

195 
mdC⁄ãxt
->
dige°
[
ii
+3] =

196 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

198 
	`mem˝y
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

199 
	}
}

203 
	$Tønsf‹m
 (
buf
, 
ö
)

204 
UINT4
 *
buf
;

205 
UINT4
 *
ö
;

207 
UINT4
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

210 
	#S11
 7

	)

211 
	#S12
 12

	)

212 
	#S13
 17

	)

213 
	#S14
 22

	)

214 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

215 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

216 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

217 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

218 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

219 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

220 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

221 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

222 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

223 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

224 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

225 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

226 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

227 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

228 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

229 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

232 
	#S21
 5

	)

233 
	#S22
 9

	)

234 
	#S23
 14

	)

235 
	#S24
 20

	)

236 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

237 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

238 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

239 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

240 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

241 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

242 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

243 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

244 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

245 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

246 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

247 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

248 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

249 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

250 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

251 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

254 
	#S31
 4

	)

255 
	#S32
 11

	)

256 
	#S33
 16

	)

257 
	#S34
 23

	)

258 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

259 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

260 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

261 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

262 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

263 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

264 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

265 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

266 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

267 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

268 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

269 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

270 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

271 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

272 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

273 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

276 
	#S41
 6

	)

277 
	#S42
 10

	)

278 
	#S43
 15

	)

279 
	#S44
 21

	)

280 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

281 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

282 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

283 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

284 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

285 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

286 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

287 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

288 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

289 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

290 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

291 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

292 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

293 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

294 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

295 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

297 
buf
[0] +
a
;

298 
buf
[1] +
b
;

299 
buf
[2] +
c
;

300 
buf
[3] +
d
;

301 
	}
}

	@pppd/md5.h

40 #i‚de‡
__MD5_INCLUDE__


43 #ifde‡
_LP64


44 
	tUINT4
;

45 
	tINT4
;

47 
	tUINT4
;

48 
	tINT4
;

50 
	#_UINT4_T


	)

54 
UINT4
 
	mi
[2];

55 
UINT4
 
	mbuf
[4];

56 
	mö
[64];

57 
	mdige°
[16];

58 } 
	tMD5_CTX
;

60 
MD5_Inô
 (
MD5_CTX
 *
mdC⁄ãxt
);

61 
MD5_Upd©e
 (
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

62 
MD5_FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

64 
	#__MD5_INCLUDE__


	)

	@pppd/mppe.h

36 
	#MPPE_PAD
 4

	)

37 
	#MPPE_MAX_KEY_LEN
 16

	)

40 
	#MPPE_OPT_40
 0x01

	)

41 
	#MPPE_OPT_128
 0x02

	)

42 
	#MPPE_OPT_STATEFUL
 0x04

	)

44 
	#MPPE_OPT_56
 0x08

	)

45 
	#MPPE_OPT_MPPC
 0x10

	)

46 
	#MPPE_OPT_D
 0x20

	)

47 
	#MPPE_OPT_UNSUPPORTED
 (
MPPE_OPT_56
|
MPPE_OPT_MPPC
|
MPPE_OPT_D
)

	)

48 
	#MPPE_OPT_UNKNOWN
 0x40

	)

57 
	#MPPE_C_BIT
 0x01

	)

58 
	#MPPE_D_BIT
 0x10

	)

59 
	#MPPE_L_BIT
 0x20

	)

60 
	#MPPE_S_BIT
 0x40

	)

61 
	#MPPE_M_BIT
 0x80

	)

62 
	#MPPE_H_BIT
 0x01

	)

65 
	#MPPE_ALL_BITS
 (
MPPE_D_BIT
|
MPPE_L_BIT
|
MPPE_S_BIT
|
MPPE_M_BIT
|
MPPE_H_BIT
)

	)

68 
	#MPPE_OPTS_TO_CI
(
›ts
, 
ci
) \

70 
u_ch¨
 *
±r
 = 
ci
; \

73 i‡(
›ts
 & 
MPPE_OPT_STATEFUL
) \

74 *
±r
++ = 0x0; \

76 *
±r
++ = 
MPPE_H_BIT
; \

77 *
±r
++ = 0; \

78 *
±r
++ = 0; \

81 *
±r
 = 0; \

82 i‡(
›ts
 & 
MPPE_OPT_128
) \

83 *
±r
 |
MPPE_S_BIT
; \

84 i‡(
›ts
 & 
MPPE_OPT_40
) \

85 *
±r
 |
MPPE_L_BIT
; \

87 }  0)

	)

90 
	#MPPE_CI_TO_OPTS
(
ci
, 
›ts
) \

92 
u_ch¨
 *
±r
 = 
ci
; \

94 
›ts
 = 0; \

97 i‡(!(
±r
[0] & 
MPPE_H_BIT
)) \

98 
›ts
 |
MPPE_OPT_STATEFUL
; \

101 i‡(
±r
[3] & 
MPPE_S_BIT
) \

102 
›ts
 |
MPPE_OPT_128
; \

103 i‡(
±r
[3] & 
MPPE_L_BIT
) \

104 
›ts
 |
MPPE_OPT_40
; \

107 i‡(
±r
[3] & 
MPPE_M_BIT
) \

108 
›ts
 |
MPPE_OPT_56
; \

109 i‡(
±r
[3] & 
MPPE_D_BIT
) \

110 
›ts
 |
MPPE_OPT_D
; \

111 i‡(
±r
[3] & 
MPPE_C_BIT
) \

112 
›ts
 |
MPPE_OPT_MPPC
; \

115 i‡(
±r
[0] & ~
MPPE_H_BIT
) \

116 
›ts
 |
MPPE_OPT_UNKNOWN
; \

117 i‡(
±r
[1] ||Ötr[2]) \

118 
›ts
 |
MPPE_OPT_UNKNOWN
; \

119 i‡(
±r
[3] & ~
MPPE_ALL_BITS
) \

120 
›ts
 |
MPPE_OPT_UNKNOWN
; \

121 }  0)

	)

	@pppd/multilink.c

30 
	~<°rög.h
>

31 
	~<˘y≥.h
>

32 
	~<°dlib.h
>

33 
	~<√tdb.h
>

34 
	~<î∫o.h
>

35 
	~<sig«l.h
>

36 
	~<√töë/ö.h
>

37 
	~<uni°d.h
>

39 
	~"µpd.h
"

40 
	~"fsm.h
"

41 
	~"l˝.h
"

42 
	~"tdb.h
"

44 
boﬁ
 
	gídpoöt_•ecifõd
;

45 *
	gbundÀ_id
;

46 *
	gblöks_id
;

47 
boﬁ
 
	gdoög_mu…ûök
;

48 
boﬁ
 
	gmu…ûök_ma°î
;

50 
TDB_CONTEXT
 *
µpdb
;

51 
db_key
[];

53 
make_bundÀ_löks
 
__P
((
≠≥nd
));

54 
ªmove_bundÀ_lök
 
__P
(());

55 
ôî©e_bundÀ_löks
 
__P
(((*
func
Ë
	`__P
((*))));

57 
gë_deÁu…_ïdisc
 
	`__P
((
ïdisc
 *));

58 
∑r£_num
 
	`__P
((*
°r
, c⁄° *
key
, *
vÆp
));

59 
owns_unô
 
	`__P
((
TDB_DATA
 
pid
, 
unô
));

61 
	#£t_ù_ïdisc
(
ï
, 
addr
) do { \

62 
ï
->
Àngth
 = 4; \

63 
ï
->
vÆue
[0] = 
addr
 >> 24; \

64 
ï
->
vÆue
[1] = 
addr
 >> 16; \

65 
ï
->
vÆue
[2] = 
addr
 >> 8; \

66 
ï
->
vÆue
[3] = 
addr
; \

67 
	}
} 0)

	)

69 
	#LOCAL_IP_ADDR
(
addr
) \

70 (((
addr
) & 0xff000000) == 0x0a000000 \

71 || ((
addr
) & 0xfff00000) == 0xac100000 \

72 || ((
addr
Ë& 0xffff0000Ë=0xc0a80000Ë

	)

74 
	#¥o˚ss_exi°s
(
n
Ë(
	`kûl
(“), 0Ë=0 || 
î∫o
 !
ESRCH
)

	)

77 
	$mp_check_›ti⁄s
()

79 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

80 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

82 
doög_mu…ûök
 = 0;

83 i‡(!
mu…ûök
)

86 i‡(!
wo
->
√g_mºu
) {

88 
wo
->
mºu
 = wo->
mru
;

89 
wo
->
√g_mºu
 = 1;

91 
ao
->
mºu
 =áo->
mru
;

92 
ao
->
√g_mºu
 = 1;

94 i‡(!
wo
->
√g_ídpoöt
 && !
n€ndpoöt
) {

96 
wo
->
√g_ídpoöt
 = 
	`gë_deÁu…_ïdisc
(&wo->
ídpoöt
);

98 
	}
}

105 
	$mp_joö_bundÀ
()

107 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[0];

108 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[0];

109 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

110 
unô
, 
µpd_pid
;

111 
l
, 
mtu
;

112 *
p
;

113 
TDB_DATA
 
key
, 
pid
, 
ªc
;

115 i‡(
doög_mu…ûök
) {

117 i‡(!
go
->
√g_mºu
 || !
ho
->neg_mrru) {

118 
	`nŸi˚
("oops, didn't get multilink onÑenegotiation");

119 
	`l˝_˛o£
(0, "multilinkÑequired");

127 i‡(!
go
->
√g_mºu
 || !
ho
->neg_mrru) {

129 i‡(
go
->
√g_mºu
)

130 
	`nŸi˚
("oops, multilinkÇegotiated only forÑeceive");

131 
mtu
 = 
ho
->
√g_mru
? ho->
mru
: 
PPP_MRU
;

132 i‡(
mtu
 > 
ao
->
mru
)

133 
mtu
 = 
ao
->
mru
;

134 i‡(
dem™d
) {

136 
	`cfg_bundÀ
(0, 0, 0, 0);

137 
	`√tif_£t_mtu
(0, 
mtu
);

140 
	`make_√w_bundÀ
(0, 0, 0, 0);

141 
	`£t_ifunô
(1);

142 
	`√tif_£t_mtu
(0, 
mtu
);

146 
doög_mu…ûök
 = 1;

154 
l
 = 4 * 
	`°æí
(
≥î_auth«me
) + 10;

155 i‡(
ho
->
√g_ídpoöt
)

156 
l
 +3 * 
ho
->
ídpoöt
.
Àngth
 + 8;

157 i‡(
bundÀ_«me
)

158 
l
 +3 * 
	`°æí
(
bundÀ_«me
) + 2;

159 
bundÀ_id
 = 
	`mÆloc
(
l
);

160 i‡(
bundÀ_id
 == 0)

161 
	`novm
("bundle identifier");

163 
p
 = 
bundÀ_id
;

164 
p
 +
	`¶¥ötf
’, 
l
-1, "BUNDLE=\"%q\"", 
≥î_auth«me
);

165 i‡(
ho
->
√g_ídpoöt
 || 
bundÀ_«me
)

166 *
p
++ = '/';

167 i‡(
ho
->
√g_ídpoöt
)

168 
p
 +
	`¶¥ötf
’, 
bundÀ_id
+
l
-p, "%s",

169 
	`ïdisc_to_°r
(&
ho
->
ídpoöt
));

170 i‡(
bundÀ_«me
)

171 
p
 +
	`¶¥ötf
’, 
bundÀ_id
+
l
-p, "/%v", 
bundÀ_«me
);

174 
l
 = 
p
 - 
bundÀ_id
;

175 
blöks_id
 = 
	`mÆloc
(
l
 + 7);

176 i‡(
blöks_id
 =
NULL
)

177 
	`novm
("bundleÜinks key");

178 
	`¶¥ötf
(
blöks_id
, 
l
 + 7, "BUNDLE_LINKS=%s", 
bundÀ_id
 + 7);

184 
mtu
 = 
	`MIN
(
ho
->
mºu
, 
ao
->
mru
);

185 i‡(
dem™d
) {

186 
	`cfg_bundÀ
(
go
->
mºu
, 
ho
->mºu, go->
√g_s¢hf
, ho->neg_ssnhf);

187 
	`√tif_£t_mtu
(0, 
mtu
);

188 
	`s¸ùt_£ãnv
("BUNDLE", 
bundÀ_id
 + 7, 1);

195 
unô
 = -1;

196 
	`lock_db
();

197 
key
.
d±r
 = 
bundÀ_id
;

198 
key
.
dsize
 = 
p
 - 
bundÀ_id
;

199 
pid
 = 
	`tdb_„tch
(
µpdb
, 
key
);

200 i‡(
pid
.
d±r
 !
NULL
) {

202 
ªc
 = 
	`tdb_„tch
(
µpdb
, 
pid
);

203 i‡(
ªc
.
d±r
 !
NULL
 &&Ñec.
dsize
 > 0) {

205 
ªc
.
d±r
[ªc.
dsize
-1] = 0;

207 
	`∑r£_num
(
ªc
.
d±r
, "UNIT=", &
unô
);

209 i‡(!
	`∑r£_num
(
ªc
.
d±r
, "PPPD_PID=", &
µpd_pid
)

210 || !
	`¥o˚ss_exi°s
(
µpd_pid
)

211 || !
	`owns_unô
(
pid
, 
unô
))

212 
unô
 = -1;

213 
	`‰ì
(
ªc
.
d±r
);

215 
	`‰ì
(
pid
.
d±r
);

218 i‡(
unô
 >= 0) {

220 i‡(
	`bundÀ_©èch
(
unô
)) {

221 
	`£t_ifunô
(0);

222 
	`s¸ùt_£ãnv
("BUNDLE", 
bundÀ_id
 + 7, 0);

223 
	`make_bundÀ_löks
(1);

224 
	`u∆ock_db
();

225 
	`öfo
("LökáâachedÅÿ%s", 
i‚ame
);

232 
	`make_√w_bundÀ
(
go
->
mºu
, 
ho
->mºu, go->
√g_s¢hf
, ho->neg_ssnhf);

233 
	`£t_ifunô
(1);

234 
	`√tif_£t_mtu
(0, 
mtu
);

235 
	`s¸ùt_£ãnv
("BUNDLE", 
bundÀ_id
 + 7, 1);

236 
	`make_bundÀ_löks
(0);

237 
	`u∆ock_db
();

238 
	`öfo
("New bundÀ %†¸óãd", 
i‚ame
);

239 
mu…ûök_ma°î
 = 1;

241 
	}
}

243 
	$mp_exô_bundÀ
()

245 
	`lock_db
();

246 
	`ªmove_bundÀ_lök
();

247 
	`u∆ock_db
();

248 
	}
}

250 
	$£ndhup
(*
°r
)

252 
pid
;

254 i‡(
	`∑r£_num
(
°r
, "PPPD_PID=", &
pid
Ë&&Öid !
	`gëpid
()) {

255 i‡(
debug
)

256 
	`dbglog
("£ndög SIGHUPÅÿ¥o˚s†%d", 
pid
);

257 
	`kûl
(
pid
, 
SIGHUP
);

259 
	}
}

261 
	$mp_bundÀ_ãrmö©ed
()

263 
TDB_DATA
 
key
;

265 
bundÀ_ãrmö©ög
 = 1;

266 
	`uµî_œyîs_down
(0);

267 
	`nŸi˚
("ConnectionÅerminated.");

268 
	`¥öt_lök_°©s
();

269 i‡(!
dem™d
) {

270 
	`ªmove_pidfûes
();

271 
	`s¸ùt_un£ãnv
("IFNAME");

274 
	`lock_db
();

275 
	`de°roy_bundÀ
();

276 
	`ôî©e_bundÀ_löks
(
£ndhup
);

277 
key
.
d±r
 = 
blöks_id
;

278 
key
.
dsize
 = 
	`°æí
(
blöks_id
);

279 
	`tdb_dñëe
(
µpdb
, 
key
);

280 
	`u∆ock_db
();

282 
	`√w_pha£
(
PHASE_DEAD
);

284 
doög_mu…ûök
 = 0;

285 
mu…ûök_ma°î
 = 0;

286 
	}
}

288 
	$make_bundÀ_löks
(
≠≥nd
)

290 
TDB_DATA
 
key
, 
ªc
;

291 *
p
;

292 
íåy
[32];

293 
l
;

295 
key
.
d±r
 = 
blöks_id
;

296 
key
.
dsize
 = 
	`°æí
(
blöks_id
);

297 
	`¶¥ötf
(
íåy
, ”¡ry), "%s;", 
db_key
);

298 
p
 = 
íåy
;

299 i‡(
≠≥nd
) {

300 
ªc
 = 
	`tdb_„tch
(
µpdb
, 
key
);

301 i‡(
ªc
.
d±r
 !
NULL
 &&Ñec.
dsize
 > 0) {

302 
ªc
.
d±r
[ªc.
dsize
-1] = 0;

303 i‡(
	`°r°r
(
ªc
.
d±r
, 
db_key
Ë!
NULL
) {

305 
	`w¨n
("linkÉntryálreadyÉxists inÅdb");

308 
l
 = 
ªc
.
dsize
 + 
	`°æí
(
íåy
);

309 
p
 = 
	`mÆloc
(
l
);

310 i‡(
p
 =
NULL
)

311 
	`novm
("bundleÜinkÜist");

312 
	`¶¥ötf
(
p
, 
l
, "%s%s", 
ªc
.
d±r
, 
íåy
);

314 
	`w¨n
("bundleÜinkÜistÇot found");

316 i‡(
ªc
.
d±r
 !
NULL
)

317 
	`‰ì
(
ªc
.
d±r
);

319 
ªc
.
d±r
 = 
p
;

320 
ªc
.
dsize
 = 
	`°æí
(
p
) + 1;

321 i‡(
	`tdb_°‹e
(
µpdb
, 
key
, 
ªc
, 
TDB_REPLACE
))

322 
	`îr‹
("couldn't %s bundleÜinkÜist",

323 
≠≥nd
? "update": "create");

324 i‡(
p
 !
íåy
)

325 
	`‰ì
(
p
);

326 
	}
}

328 
	$ªmove_bundÀ_lök
()

330 
TDB_DATA
 
key
, 
ªc
;

331 
íåy
[32];

332 *
p
, *
q
;

333 
l
;

335 
key
.
d±r
 = 
blöks_id
;

336 
key
.
dsize
 = 
	`°æí
(
blöks_id
);

337 
	`¶¥ötf
(
íåy
, ”¡ry), "%s;", 
db_key
);

339 
ªc
 = 
	`tdb_„tch
(
µpdb
, 
key
);

340 i‡(
ªc
.
d±r
 =
NULL
 ||Ñec.
dsize
 <= 0) {

341 i‡(
ªc
.
d±r
 !
NULL
)

342 
	`‰ì
(
ªc
.
d±r
);

345 
ªc
.
d±r
[ªc.
dsize
-1] = 0;

346 
p
 = 
	`°r°r
(
ªc
.
d±r
, 
íåy
);

347 i‡(
p
 !
NULL
) {

348 
q
 = 
p
 + 
	`°æí
(
íåy
);

349 
l
 = 
	`°æí
(
q
) + 1;

350 
	`memmove
(
p
, 
q
, 
l
);

351 
ªc
.
dsize
 = 
p
 -Ñec.
d±r
 + 
l
;

352 i‡(
	`tdb_°‹e
(
µpdb
, 
key
, 
ªc
, 
TDB_REPLACE
))

353 
	`îr‹
("couldn't update bundleÜinkÜist (removal)");

355 
	`‰ì
(
ªc
.
d±r
);

356 
	}
}

358 
	$ôî©e_bundÀ_löks
((*
func
)(*))

360 
TDB_DATA
 
key
, 
ªc
, 
µ
;

361 *
p
, *
q
;

363 
key
.
d±r
 = 
blöks_id
;

364 
key
.
dsize
 = 
	`°æí
(
blöks_id
);

365 
ªc
 = 
	`tdb_„tch
(
µpdb
, 
key
);

366 i‡(
ªc
.
d±r
 =
NULL
 ||Ñec.
dsize
 <= 0) {

367 
	`îr‹
("bundleÜinkÜistÇot found (iteratingÜist)");

368 i‡(
ªc
.
d±r
 !
NULL
)

369 
	`‰ì
(
ªc
.
d±r
);

372 
p
 = 
ªc
.
d±r
;

373 
p
[
ªc
.
dsize
-1] = 0;

374 (
q
 = 
	`°rchr
(
p
, ';')Ë!
NULL
) {

375 *
q
 = 0;

376 
key
.
d±r
 = 
p
;

377 
key
.
dsize
 = 
q
 - 
p
;

378 
µ
 = 
	`tdb_„tch
(
µpdb
, 
key
);

379 i‡(
µ
.
d±r
 !
NULL
 &&Öp.
dsize
 > 0) {

380 
µ
.
d±r
[µ.
dsize
-1] = 0;

381 
	`func
(
µ
.
d±r
);

383 i‡(
µ
.
d±r
 !
NULL
)

384 
	`‰ì
(
µ
.
d±r
);

385 
p
 = 
q
 + 1;

387 
	`‰ì
(
ªc
.
d±r
);

388 
	}
}

391 
	$∑r£_num
(
°r
, 
key
, 
vÆp
)

392 *
°r
;

393 c⁄° *
key
;

394 *
vÆp
;

396 *
p
, *
ídp
;

397 
i
;

399 
p
 = 
	`°r°r
(
°r
, 
key
);

400 i‡(
p
 != 0) {

401 
p
 +
	`°æí
(
key
);

402 
i
 = 
	`°πﬁ
(
p
, &
ídp
, 10);

403 i‡(
ídp
 !
p
 && (*endp == 0 || *endp == ';')) {

404 *
vÆp
 = 
i
;

409 
	}
}

415 
	$owns_unô
(
key
, 
unô
)

416 
TDB_DATA
 
key
;

417 
unô
;

419 
ifkey
[32];

420 
TDB_DATA
 
kd
, 
vd
;

421 
ªt
 = 0;

423 
	`¶¥ötf
(
ifkey
, (ifkey), "UNIT=%d", 
unô
);

424 
kd
.
d±r
 = 
ifkey
;

425 
kd
.
dsize
 = 
	`°æí
(
ifkey
);

426 
vd
 = 
	`tdb_„tch
(
µpdb
, 
kd
);

427 i‡(
vd
.
d±r
 !
NULL
) {

428 
ªt
 = 
vd
.
dsize
 =
key
.dsize

429 && 
	`memcmp
(
vd
.
d±r
, 
key
.d±r, vd.
dsize
) == 0;

430 
	`‰ì
(
vd
.
d±r
);

432  
ªt
;

433 
	}
}

436 
	$gë_deÁu…_ïdisc
(
ï
)

437 
ïdisc
 *
ï
;

439 *
p
;

440 
ho°ít
 *
hp
;

441 
u_öt32_t
 
addr
;

444 
p
 = 
	`gë_fú°_ëhî√t
();

445 i‡(
p
 !0 && 
	`gë_if_hwaddr
(
ï
->
vÆue
,Ö) >= 0) {

446 
ï
->
˛ass
 = 
EPD_MAC
;

447 
ï
->
Àngth
 = 6;

452 
hp
 = 
	`gëho°by«me
(
ho°«me
);

453 i‡(
hp
 !
NULL
) {

454 
addr
 = *(
u_öt32_t
 *)
hp
->
h_addr
;

455 i‡(!
	`bad_ù_adrs
(
addr
)) {

456 
addr
 = 
	`¡ohl
(addr);

457 i‡(!
	`LOCAL_IP_ADDR
(
addr
)) {

458 
ï
->
˛ass
 = 
EPD_IP
;

459 
	`£t_ù_ïdisc
(
ï
, 
addr
);

466 
	}
}

472 *
	gídp_˛ass_«mes
[] = {

477 
	$ïdisc_to_°r
(
ï
)

478 
ïdisc
 *
ï
;

480 
°r
[
MAX_ENDP_LEN
*3+8];

481 
u_ch¨
 *
p
 = 
ï
->
vÆue
;

482 
i
, 
mask
 = 0;

483 *
q
, 
c
, 
c2
;

485 i‡(
ï
->
˛ass
 =
EPD_NULL
 &&Ép->
Àngth
 == 0)

487 i‡(
ï
->
˛ass
 =
EPD_IP
 &&Ép->
Àngth
 == 4) {

488 
u_öt32_t
 
addr
;

490 
	`GETLONG
(
addr
, 
p
);

491 
	`¶¥ötf
(
°r
, (°r), "IP:%I", 
	`ht⁄l
(
addr
));

492  
°r
;

495 
c
 = ':';

496 
c2
 = '.';

497 i‡(
ï
->
˛ass
 =
EPD_MAC
 &&Ép->
Àngth
 == 6)

498 
c2
 = ':';

499 i‡(
ï
->
˛ass
 =
EPD_MAGIC
 && (ï->
Àngth
 % 4) == 0)

500 
mask
 = 3;

501 
q
 = 
°r
;

502 i‡(
ï
->
˛ass
 <
EPD_PHONENUM
)

503 
q
 +
	`¶¥ötf
(q, (
°r
)-1, "%s",

504 
ídp_˛ass_«mes
[
ï
->
˛ass
]);

506 
q
 +
	`¶¥ötf
(q, (
°r
)-1, "%d", 
ï
->
˛ass
);

507 
c
 = ':';

508 
i
 = 0; i < 
ï
->
Àngth
 && i < 
MAX_ENDP_LEN
; ++i) {

509 i‡((
i
 & 
mask
) == 0) {

510 *
q
++ = 
c
;

511 
c
 = 
c2
;

513 
q
 +
	`¶¥ötf
(q, 
°r
 + (°rË- q, "%.2x", 
ï
->
vÆue
[
i
]);

515  
°r
;

516 
	}
}

518 
	$hexc_vÆ
(
c
)

520 i‡(
c
 >= 'a')

521  
c
 - 'a' + 10;

522 i‡(
c
 >= 'A')

523  
c
 - 'A' + 10;

524  
c
 - '0';

525 
	}
}

528 
	$°r_to_ïdisc
(
ï
, 
°r
)

529 
ïdisc
 *
ï
;

530 *
°r
;

532 
i
, 
l
;

533 *
p
, *
ídp
;

535 
i
 = 
EPD_NULL
; i <
EPD_PHONENUM
; ++i) {

536 
¶
 = 
	`°æí
(
ídp_˛ass_«mes
[
i
]);

537 i‡(
	`°∫ˇ£cmp
(
°r
, 
ídp_˛ass_«mes
[
i
], 
¶
) == 0) {

538 
°r
 +
¶
;

542 i‡(
i
 > 
EPD_PHONENUM
) {

544 
i
 = 
	`°πﬁ
(
°r
, &
ídp
, 10);

545 i‡(
ídp
 =
°r
)

547 
°r
 = 
ídp
;

549 
ï
->
˛ass
 = 
i
;

550 i‡(*
°r
 == 0) {

551 
ï
->
Àngth
 = 0;

554 i‡(*
°r
 != ':' && *str != '.')

556 ++
°r
;

558 i‡(
i
 =
EPD_IP
) {

559 
u_öt32_t
 
addr
;

560 
i
 = 
	`∑r£_dŸãd_ù
(
°r
, &
addr
);

561 i‡(
i
 =0 || 
°r
[i] != 0)

563 
	`£t_ù_ïdisc
(
ï
, 
addr
);

566 i‡(
i
 =
EPD_MAC
 && 
	`gë_if_hwaddr
(
ï
->
vÆue
, 
°r
) >= 0) {

567 
ï
->
Àngth
 = 6;

571 
p
 = 
°r
;

572 
l
 = 0;Ü < 
MAX_ENDP_LEN
; ++l) {

573 i‡(*
°r
 == 0)

575 i‡(
p
 <
°r
)

576 
p
 = 
°r
; 
	`isxdigô
(*p); ++p)

578 
i
 = 
p
 - 
°r
;

579 i‡(
i
 == 0)

581 
ï
->
vÆue
[
l
] = 
	`hexc_vÆ
(*
°r
++);

582 i‡((
i
 & 1) == 0)

583 
ï
->
vÆue
[
l
] = (ï->vÆue[l] << 4Ë+ 
	`hexc_vÆ
(*
°r
++);

584 i‡(*
°r
 == ':' || *str == '.')

585 ++
°r
;

587 i‡(*
°r
 !0 || (
ï
->
˛ass
 =
EPD_MAC
 && 
l
 != 6))

589 
ï
->
Àngth
 = 
l
;

591 
	}
}

	@pppd/options.c

43 
	#RCSID
 "$Id: o±i⁄s.c,v 1.102 2008/06/15 06:53:06Öaulu†Ex∞$"

	)

45 
	~<˘y≥.h
>

46 
	~<°dio.h
>

47 
	~<î∫o.h
>

48 
	~<uni°d.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<sy¶og.h
>

52 
	~<°rög.h
>

53 
	~<pwd.h
>

54 #ifde‡
PLUGIN


55 
	~<dlf˙.h
>

58 #ifde‡
PPP_FILTER


59 
	~<pˇp.h
>

66 #i‚de‡
DLT_PPP_PPPD


67 #ifde‡
DLT_PPP_WITHDIRECTION


68 
	#DLT_PPP_PPPD
 
DLT_PPP_WITHDIRECTION


	)

70 
	#DLT_PPP_PPPD
 
DLT_PPP


	)

75 
	~"µpd.h
"

76 
	~"∑th«mes.h
"

78 #i‡
deföed
(
u…rix
Ë|| deföed(
NeXT
)

79 *
°rdup
 
__P
((*));

83 
	s›ti⁄_vÆue
 {

84 
›ti⁄_vÆue
 *
	m√xt
;

85 c⁄° *
	msour˚
;

86 
	mvÆue
[1];

92 
	gdebug
 = 0;

93 
	gkdebugÊag
 = 0;

94 
	gdeÁu…_devi˚
 = 1;

95 
	gdev«m
[
MAXPATHLEN
];

96 
boﬁ
 
	gnodëach
 = 0;

97 
boﬁ
 
	gupdëach
 = 0;

98 
boﬁ
 
	gma°î_dëach
;

99 #ifde‡
SYSTEMD


100 
boﬁ
 
	gup_sdnŸify
 = 0;

102 
	gmaxc⁄√˘
 = 0;

103 
	gu£r
[
MAXNAMELEN
];

104 
	g∑sswd
[
MAXSECRETLEN
];

105 
boﬁ
 
	g≥rsi°
 = 0;

106 
	gour_«me
[
MAXNAMELEN
];

107 
boﬁ
 
	gdem™d
 = 0;

108 *
	gù∑øm
 = 
NULL
;

109 
	gidÀ_time_limô
 = 0;

110 
	ghﬁdoff
 = 30;

111 
boﬁ
 
	ghﬁdoff_•ecifõd
;

112 
	glog_to_fd
 = 1;

113 
boﬁ
 
	glog_deÁu…
 = 1;

114 
	gmaxÁû
 = 10;

115 
	glök«me
[
MAXPATHLEN
];

116 
boﬁ
 
	gtu√_kî√l
;

117 
	gc⁄√˘_dñay
 = 1000;

118 
	gªq_unô
 = -1;

119 
	gªq_i‚ame
[
MAXIFNAMELEN
];

120 
boﬁ
 
	gmu…ûök
 = 0;

121 *
	gbundÀ_«me
 = 
NULL
;

122 
boﬁ
 
	gdump_›ti⁄s
;

123 
boﬁ
 
	gdryrun
;

124 *
	gdomaö
;

125 
	gchûd_waô
 = 5;

126 
u£ªnv
 *
	gu£ªnv_li°
;

127 
	gdÊ_rouã_mëric
 = -1;

129 #ifde‡
MAXOCTETS


130 
	gmaxo˘ës
 = 0;

131 
	gmaxo˘ës_dú
 = 0;

132 
	gmaxo˘ës_timeout
 = 1;

136 
›ti⁄_t
 
auth_›ti⁄s
[];

137 
°©
 
dev°©
;

139 #ifde‡
PPP_FILTER


140 
bpf_¥ogøm
 
	g∑ss_fûãr
;

141 
bpf_¥ogøm
 
	ga˘ive_fûãr
;

144 
›ti⁄_t
 *
	gcur›t
;

145 *
	gcuºít_›ti⁄
;

146 
	g¥ivûeged_›ti⁄
;

147 *
	g›ti⁄_sour˚
;

148 
	g›ti⁄_¥i‹ôy
 = 
OPRIO_CFGFILE
;

149 
boﬁ
 
	gdev«m_fixed
;

151 
	glogfûe_fd
 = -1;

152 
	glogfûe_«me
[
MAXPATHLEN
];

157 
£tdomaö
 
__P
((**));

158 
ªadfûe
 
__P
((**));

159 
ˇŒfûe
 
__P
((**));

160 
showvîsi⁄
 
__P
((**));

161 
showhñp
 
__P
((**));

162 
ußge
 
__P
(());

163 
£éogfûe
 
__P
((**));

164 #ifde‡
PLUGIN


165 
lﬂd∂ugö
 
__P
((**));

168 #ifde‡
PPP_FILTER


169 
£çassfûãr
 
__P
((**));

170 
£è˘ivefûãr
 
__P
((**));

173 #ifde‡
MAXOCTETS


174 
£tmodú
 
__P
((**));

177 
u£r_£ãnv
 
__P
((**));

178 
u£r_£çröt
 
__P
((
›ti⁄_t
 *, 
¥öãr_func
, *));

179 
u£r_un£ãnv
 
__P
((**));

180 
u£r_un£çröt
 
__P
((
›ti⁄_t
 *, 
¥öãr_func
, *));

182 
›ti⁄_t
 *
föd_›ti⁄
 
__P
((c⁄° *
«me
));

183 
¥o˚ss_›ti⁄
 
__P
((
›ti⁄_t
 *, *, **));

184 
n_¨gumíts
 
__P
((
›ti⁄_t
 *));

185 
numbî_›ti⁄
 
__P
((*, 
u_öt32_t
 *, ));

190 
	s›ti⁄_li°
 {

191 
›ti⁄_t
 *
	m›ti⁄s
;

192 
›ti⁄_li°
 *
	m√xt
;

195 
›ti⁄_li°
 *
	gexåa_›ti⁄s
 = 
NULL
;

200 
›ti⁄_t
 
	ggíîÆ_›ti⁄s
[] = {

201 { "debug", 
o_öt
, &
debug
,

202 "In¸ó£ debuggögÜevñ", 
OPT_INC
 | 
OPT_NOARG
 | 1 },

203 { "-d", 
o_öt
, &
debug
,

205 
OPT_ALIAS
 | 
OPT_INC
 | 
OPT_NOARG
 | 1 },

207 { "kdebug", 
o_öt
, &
kdebugÊag
,

208 "Së kî√»drivî debugÜevñ", 
OPT_PRIO
 },

210 { "nodëach", 
o_boﬁ
, &
nodëach
,

211 "D⁄'àdëach from c⁄åﬁlögÅty", 
OPT_PRIO
 | 1 },

212 { "-dëach", 
o_boﬁ
, &
nodëach
,

213 "D⁄'àdëach from c⁄åﬁlögÅty", 
OPT_ALIAS
 | 
OPT_PRIOSUB
 | 1 },

214 #ifde‡
SYSTEMD


215 { "up_sdnŸify", 
o_boﬁ
, &
up_sdnŸify
,

217 
OPT_PRIOSUB
 | 
OPT_A2COPY
 | 1, &
nodëach
 },

219 { "updëach", 
o_boﬁ
, &
updëach
,

221 
OPT_PRIOSUB
 | 
OPT_A2CLR
 | 1, &
nodëach
 },

223 { "ma°î_dëach", 
o_boﬁ
, &
ma°î_dëach
,

226 { "hﬁdoff", 
o_öt
, &
hﬁdoff
,

228 
OPT_PRIO
, &
hﬁdoff_•ecifõd
 },

230 { "idÀ", 
o_öt
, &
idÀ_time_limô
,

231 "SëÅimêö sec⁄d†bef‹êdisc⁄√˘ög idÀÜök", 
OPT_PRIO
 },

233 { "maxc⁄√˘", 
o_öt
, &
maxc⁄√˘
,

235 
OPT_PRIO
 | 
OPT_LLIMIT
 | 
OPT_NOINCR
 | 
OPT_ZEROINF
 },

237 { "domaö", 
o_•ecül
, (*)
£tdomaö
,

239 
OPT_PRIO
 | 
OPT_PRIV
 | 
OPT_A2STRVAL
, &
domaö
 },

241 { "fûe", 
o_•ecül
, (*)
ªadfûe
,

242 "Takê›ti⁄†‰omá fûe", 
OPT_NOPRINT
 },

243 { "ˇŒ", 
o_•ecül
, (*)
ˇŒfûe
,

244 "Takê›ti⁄†‰omáÖrivûeged fûe", 
OPT_NOPRINT
 },

246 { "≥rsi°", 
o_boﬁ
, &
≥rsi°
,

247 "Kì∞⁄Ñe›íög c⁄√˘i⁄á·î clo£", 
OPT_PRIO
 | 1 },

248 { "n›îsi°", 
o_boﬁ
, &
≥rsi°
,

249 "Tu∫ of‡≥rsi° o±i⁄", 
OPT_PRIOSUB
 },

251 { "dem™d", 
o_boﬁ
, &
dem™d
,

252 "Dü»⁄ dem™d", 
OPT_INITONLY
 | 1, &
≥rsi°
 },

254 { "--vîsi⁄", 
o_•ecül_nﬂrg
, (*)
showvîsi⁄
,

256 { "--hñp", 
o_•ecül_nﬂrg
, (*)
showhñp
,

258 { "-h", 
o_•ecül_nﬂrg
, (*)
showhñp
,

259 "Show brõ‡li°ög o‡›ti⁄s", 
OPT_ALIAS
 },

261 { "logfûe", 
o_•ecül
, (*)
£éogfûe
,

263 
OPT_PRIO
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, &
logfûe_«me
 },

264 { "logfd", 
o_öt
, &
log_to_fd
,

266 
OPT_PRIOSUB
 | 
OPT_A2CLR
, &
log_deÁu…
 },

267 { "nﬁog", 
o_öt
, &
log_to_fd
,

269 
OPT_PRIOSUB
 | 
OPT_NOARG
 | 
OPT_VAL
(-1) },

270 { "nﬁogfd", 
o_öt
, &
log_to_fd
,

272 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 
OPT_NOARG
 | 
OPT_VAL
(-1) },

274 { "lök«me", 
o_°rög
, 
lök«me
,

276 
OPT_PRIO
 | 
OPT_PRIV
 | 
OPT_STATIC
, 
NULL
, 
MAXPATHLEN
 },

278 { "maxÁû", 
o_öt
, &
maxÁû
,

280 
OPT_PRIO
 },

282 { "ktu√", 
o_boﬁ
, &
tu√_kî√l
,

283 "A…î kî√»£âög†a†√˚sßry", 
OPT_PRIO
 | 1 },

284 { "noktu√", 
o_boﬁ
, &
tu√_kî√l
,

285 "D⁄'àÆã∏kî√»£âögs", 
OPT_PRIOSUB
 },

287 { "c⁄√˘-dñay", 
o_öt
, &
c⁄√˘_dñay
,

289 
OPT_PRIO
 },

291 { "unô", 
o_öt
, &
ªq_unô
,

293 
OPT_PRIO
 | 
OPT_LLIMIT
, 0, 0 },

295 { "i‚ame", 
o_°rög
, 
ªq_i‚ame
,

297 
OPT_PRIO
 | 
OPT_PRIV
 | 
OPT_STATIC
, 
NULL
, 
MAXIFNAMELEN
 },

299 { "dump", 
o_boﬁ
, &
dump_›ti⁄s
,

301 { "dryrun", 
o_boﬁ
, &
dryrun
,

304 { "chûd-timeout", 
o_öt
, &
chûd_waô
,

306 
OPT_PRIO
 },

308 { "£t", 
o_•ecül
, (*)
u£r_£ãnv
,

310 
OPT_A2PRINTER
 | 
OPT_NOPRINT
, (*)
u£r_£çröt
 },

311 { "un£t", 
o_•ecül
, (*)
u£r_un£ãnv
,

313 
OPT_A2PRINTER
 | 
OPT_NOPRINT
, (*)
u£r_un£çröt
 },

315 { "deÁu…rouã-mëric", 
o_öt
, &
dÊ_rouã_mëric
,

317 
OPT_PRIV
|
OPT_LLIMIT
|
OPT_INITONLY
, 
NULL
, 0, -1 },

319 #ifde‡
HAVE_MULTILINK


320 { "mu…ûök", 
o_boﬁ
, &
mu…ûök
,

321 "E«bÀ mu…ûök o≥øti⁄", 
OPT_PRIO
 | 1 },

322 { "mp", 
o_boﬁ
, &
mu…ûök
,

323 "E«bÀ mu…ûök o≥øti⁄", 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 1 },

324 { "nomu…ûök", 
o_boﬁ
, &
mu…ûök
,

325 "DißbÀ mu…ûök o≥øti⁄", 
OPT_PRIOSUB
 | 0 },

326 { "nomp", 
o_boﬁ
, &
mu…ûök
,

327 "DißbÀ mu…ûök o≥øti⁄", 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 0 },

329 { "bundÀ", 
o_°rög
, &
bundÀ_«me
,

330 "BundÀÇamêf‹ mu…ûök", 
OPT_PRIO
 },

333 #ifde‡
PLUGIN


334 { "∂ugö", 
o_•ecül
, (*)
lﬂd∂ugö
,

335 "LﬂdáÖlug-ö moduÀ i¡ÿµpd", 
OPT_PRIV
 | 
OPT_A2LIST
 },

338 #ifde‡
PPP_FILTER


339 { "∑ss-fûãr", 
o_•ecül
, 
£çassfûãr
,

340 "£àfûã∏f‹Öackë†tÿ∑ss", 
OPT_PRIO
 },

342 { "a˘ive-fûãr", 
o_•ecül
, 
£è˘ivefûãr
,

343 "£àfûã∏f‹á˘ivêpkts", 
OPT_PRIO
 },

346 #ifde‡
MAXOCTETS


347 { "maxo˘ës", 
o_öt
, &
maxo˘ës
,

349 
OPT_PRIO
 | 
OPT_LLIMIT
 | 
OPT_NOINCR
 | 
OPT_ZEROINF
 },

350 { "mo", 
o_öt
, &
maxo˘ës
,

352 
OPT_ALIAS
 | 
OPT_PRIO
 | 
OPT_LLIMIT
 | 
OPT_NOINCR
 | 
OPT_ZEROINF
 },

353 { "mo-dúe˘i⁄", 
o_•ecül
, 
£tmodú
,

355 { "mo-timeout", 
o_öt
, &
maxo˘ës_timeout
,

356 "Check f‹Åøffi¯limôÉvîy N sec⁄ds", 
OPT_PRIO
 | 
OPT_LLIMIT
 | 1 },

359 { 
NULL
 }

362 #i‚de‡
IMPLEMENTATION


363 
	#IMPLEMENTATION
 ""

	)

366 *
	gußge_°rög
 = "\
 version %s\n\
: %s [ options ], where optionsáre:\n\
<device> Communicate overÅheÇamed device\n\
<speed> SetÅhe baudÑateÅo <speed>\n\
<loc>:<rem> SetÅheÜocalánd/orÑemote interface IP\n\
. Either one may be omitted.\n\
 <n> SetÅhe desiredásync mapÅo hex <n>\n\
 Requireáuthentication fromÖeer\n\
 <p> Invoke shell command <p>Åo set upÅhe serialÜine\n\
 Use hardware RTS/CTS flow control\n\
 Add defaultÑouteÅhrough interface\n\
 <f> Take options from file <f>\n\
 Use modem controlÜines\n\
 <n> Set MRU valueÅo <n> forÇegotiation\n\
Öppd(8) for more options.\n\
";

388 
	$∑r£_¨gs
(
¨gc
, 
¨gv
)

389 
¨gc
;

390 **
¨gv
;

392 *
¨g
;

393 
›ti⁄_t
 *
›t
;

394 
n
;

396 
¥ivûeged_›ti⁄
 = 
¥ivûeged
;

397 
›ti⁄_sour˚
 = "commandÜine";

398 
›ti⁄_¥i‹ôy
 = 
OPRIO_CMDLINE
;

399 
¨gc
 > 0) {

400 
¨g
 = *
¨gv
++;

401 --
¨gc
;

402 
›t
 = 
	`föd_›ti⁄
(
¨g
);

403 i‡(
›t
 =
NULL
) {

404 
	`›ti⁄_îr‹
("uƒecognized o±i⁄ '%s'", 
¨g
);

405 
	`ußge
();

408 
n
 = 
	`n_¨gumíts
(
›t
);

409 i‡(
¨gc
 < 
n
) {

410 
	`›ti⁄_îr‹
("toÿ„wÖ¨amëî†f‹ o±i⁄ %s", 
¨g
);

413 i‡(!
	`¥o˚ss_›ti⁄
(
›t
, 
¨g
, 
¨gv
))

415 
¨gc
 -
n
;

416 
¨gv
 +
n
;

419 
	}
}

426 
	$›ti⁄s_‰om_fûe
(
fûíame
, 
mu°_exi°
, 
check_¥Ÿ
, 
¥iv
)

427 *
fûíame
;

428 
mu°_exi°
;

429 
check_¥Ÿ
;

430 
¥iv
;

432 
FILE
 *
f
;

433 
i
, 
√wlöe
, 
ªt
, 
îr
;

434 
›ti⁄_t
 *
›t
;

435 
ﬁd¥iv
, 
n
;

436 *
ﬁdsour˚
;

437 
uid_t
 
euid
;

438 *
¨gv
[
MAXARGS
];

439 
¨gs
[
MAXARGS
][
MAXWORDLEN
];

440 
cmd
[
MAXWORDLEN
];

442 
euid
 = 
	`gëeuid
();

443 i‡(
check_¥Ÿ
 && 
	`£ãuid
(
	`gëuid
()) == -1) {

444 
	`›ti⁄_îr‹
("u«bÀÅÿdr›Örivûege†tÿ›í %s: %m", 
fûíame
);

447 
f
 = 
	`f›í
(
fûíame
, "r");

448 
îr
 = 
î∫o
;

449 i‡(
check_¥Ÿ
 && 
	`£ãuid
(
euid
) == -1)

450 
	`Áèl
("unableÅoÑegainÖrivileges");

451 i‡(
f
 =
NULL
) {

452 
î∫o
 = 
îr
;

453 i‡(!
mu°_exi°
) {

454 i‡(
îr
 !
ENOENT
 &&Éº !
ENOTDIR
)

455 
	`w¨n
("W¨nög: c™'à›í o±i⁄†fûê%s: %m", 
fûíame
);

458 
	`›ti⁄_îr‹
("C™'à›í o±i⁄†fûê%s: %m", 
fûíame
);

462 
ﬁd¥iv
 = 
¥ivûeged_›ti⁄
;

463 
¥ivûeged_›ti⁄
 = 
¥iv
;

464 
ﬁdsour˚
 = 
›ti⁄_sour˚
;

465 
›ti⁄_sour˚
 = 
	`°rdup
(
fûíame
);

466 i‡(
›ti⁄_sour˚
 =
NULL
)

467 
›ti⁄_sour˚
 = "file";

468 
ªt
 = 0;

469 
	`gëw‹d
(
f
, 
cmd
, &
√wlöe
, 
fûíame
)) {

470 
›t
 = 
	`föd_›ti⁄
(
cmd
);

471 i‡(
›t
 =
NULL
) {

472 
	`›ti⁄_îr‹
("In file %s: unrecognized option '%s'",

473 
fûíame
, 
cmd
);

474 
îr
;

476 
n
 = 
	`n_¨gumíts
(
›t
);

477 
i
 = 0; i < 
n
; ++i) {

478 i‡(!
	`gëw‹d
(
f
, 
¨gs
[
i
], &
√wlöe
, 
fûíame
)) {

479 
	`›ti⁄_îr‹
(

481 
fûíame
, 
cmd
);

482 
îr
;

484 
¨gv
[
i
] = 
¨gs
[i];

486 i‡(!
	`¥o˚ss_›ti⁄
(
›t
, 
cmd
, 
¨gv
))

487 
îr
;

489 
ªt
 = 1;

491 
îr
:

492 
	`f˛o£
(
f
);

493 
¥ivûeged_›ti⁄
 = 
ﬁd¥iv
;

494 
›ti⁄_sour˚
 = 
ﬁdsour˚
;

495  
ªt
;

496 
	}
}

503 
	$›ti⁄s_‰om_u£r
()

505 *
u£r
, *
∑th
, *
fûe
;

506 
ªt
;

507 
∑sswd
 *
pw
;

508 
size_t
 
∂
;

510 
pw
 = 
	`gëpwuid
(
	`gëuid
());

511 i‡(
pw
 =
NULL
 || (
u£r
 =Öw->
pw_dú
) == NULL || user[0] == 0)

513 
fûe
 = 
_PATH_USEROPT
;

514 
∂
 = 
	`°æí
(
u£r
Ë+ såÀn(
fûe
) + 2;

515 
∑th
 = 
	`mÆloc
(
∂
);

516 i‡(
∑th
 =
NULL
)

517 
	`novm
("init fileÇame");

518 
	`¶¥ötf
(
∑th
, 
∂
, "%s/%s", 
u£r
, 
fûe
);

519 
›ti⁄_¥i‹ôy
 = 
OPRIO_CFGFILE
;

520 
ªt
 = 
	`›ti⁄s_‰om_fûe
(
∑th
, 0, 1, 
¥ivûeged
);

521 
	`‰ì
(
∑th
);

522  
ªt
;

523 
	}
}

534 
	$›ti⁄s_f‹_ây
()

536 *
dev
, *
∑th
, *
p
;

537 
ªt
;

538 
size_t
 
∂
;

540 
dev
 = 
dev«m
;

541 i‡((
p
 = 
	`°r°r
(
dev
, "/dev/")Ë!
NULL
)

542 
dev
 = 
p
 + 5;

543 i‡(
dev
[0] =0 || 
	`°rcmp
(dev, "tty") == 0)

545 
∂
 = 
	`°æí
(
_PATH_TTYOPT
Ë+ såÀn(
dev
) + 1;

546 
∑th
 = 
	`mÆloc
(
∂
);

547 i‡(
∑th
 =
NULL
)

548 
	`novm
("tty init fileÇame");

549 
	`¶¥ötf
(
∑th
, 
∂
, "%s%s", 
_PATH_TTYOPT
, 
dev
);

551 
p
 = 
∑th
 + 
	`°æí
(
_PATH_TTYOPT
); *p != 0; ++p)

552 i‡(*
p
 == '/')

553 *
p
 = '.';

554 
›ti⁄_¥i‹ôy
 = 
OPRIO_CFGFILE
;

555 
ªt
 = 
	`›ti⁄s_‰om_fûe
(
∑th
, 0, 0, 1);

556 
	`‰ì
(
∑th
);

557  
ªt
;

558 
	}
}

564 
	$›ti⁄s_‰om_li°
(
w
, 
¥iv
)

565 
w‹dli°
 *
w
;

566 
¥iv
;

568 *
¨gv
[
MAXARGS
];

569 
›ti⁄_t
 *
›t
;

570 
i
, 
n
, 
ªt
 = 0;

571 
w‹dli°
 *
w0
;

573 
¥ivûeged_›ti⁄
 = 
¥iv
;

574 
›ti⁄_sour˚
 = "secrets file";

575 
›ti⁄_¥i‹ôy
 = 
OPRIO_SECFILE
;

577 
w
 !
NULL
) {

578 
›t
 = 
	`föd_›ti⁄
(
w
->
w‹d
);

579 i‡(
›t
 =
NULL
) {

580 
	`›ti⁄_îr‹
("In secrets file: unrecognized option '%s'",

581 
w
->
w‹d
);

582 
îr
;

584 
n
 = 
	`n_¨gumíts
(
›t
);

585 
w0
 = 
w
;

586 
i
 = 0; i < 
n
; ++i) {

587 
w
 = w->
√xt
;

588 i‡(
w
 =
NULL
) {

589 
	`›ti⁄_îr‹
(

591 
w0
->
w‹d
);

592 
îr
;

594 
¨gv
[
i
] = 
w
->
w‹d
;

596 i‡(!
	`¥o˚ss_›ti⁄
(
›t
, 
w0
->
w‹d
, 
¨gv
))

597 
îr
;

598 
w
 = w->
√xt
;

600 
ªt
 = 1;

602 
îr
:

603  
ªt
;

604 
	}
}

610 
	$m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
)

611 *
«me
;

612 
›ti⁄_t
 *
›t
;

613 
dowûd
;

615 (*
m©ch
Ë
	`__P
((*, **, ));

617 i‡(
dowûd
 !(
›t
->
ty≥
 =
o_wûd
))

619 i‡(!
dowûd
)

620  
	`°rcmp
(
«me
, 
›t
->name) == 0;

621 
m©ch
 = ((*Ë
	`__P
((*, **, ))Ë
›t
->
addr
;

622  (*
m©ch
)(
«me
, 
NULL
, 0);

623 
	}
}

630 
›ti⁄_t
 *

631 
	$föd_›ti⁄
(
«me
)

632 c⁄° *
«me
;

634 
›ti⁄_t
 *
›t
;

635 
›ti⁄_li°
 *
li°
;

636 
i
, 
dowûd
;

638 
dowûd
 = 0; dowild <= 1; ++dowild) {

639 
›t
 = 
gíîÆ_›ti⁄s
; o±->
«me
 !
NULL
; ++opt)

640 i‡(
	`m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
))

641  
›t
;

642 
›t
 = 
auth_›ti⁄s
; o±->
«me
 !
NULL
; ++opt)

643 i‡(
	`m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
))

644  
›t
;

645 
li°
 = 
exåa_›ti⁄s
;Üi° !
NULL
;Üi° =Üi°->
√xt
)

646 
›t
 = 
li°
->
›ti⁄s
; o±->
«me
 !
NULL
; ++opt)

647 i‡(
	`m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
))

648  
›t
;

649 
›t
 = 
the_ch™√l
->
›ti⁄s
; o±->
«me
 !
NULL
; ++opt)

650 i‡(
	`m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
))

651  
›t
;

652 
i
 = 0; 
¥Ÿocﬁs
[i] !
NULL
; ++i)

653 i‡((
›t
 = 
¥Ÿocﬁs
[
i
]->
›ti⁄s
Ë!
NULL
)

654 ; 
›t
->
«me
 !
NULL
; ++opt)

655 i‡(
	`m©ch_›ti⁄
(
«me
, 
›t
, 
dowûd
))

656  
›t
;

658  
NULL
;

659 
	}
}

665 
	$¥o˚ss_›ti⁄
(
›t
, 
cmd
, 
¨gv
)

666 
›ti⁄_t
 *
›t
;

667 *
cmd
;

668 **
¨gv
;

670 
u_öt32_t
 
v
;

671 
iv
, 
a
;

672 *
sv
;

673 (*
∑r£r
Ë
	`__P
((**));

674 (*
wûdp
Ë
	`__P
((*, **, ));

675 *
›t›t
 = (
›t
->
ty≥
 =
o_wûd
)? "": " option";

676 
¥io
 = 
›ti⁄_¥i‹ôy
;

677 
›ti⁄_t
 *
maö›t
 = 
›t
;

679 
cuºít_›ti⁄
 = 
›t
->
«me
;

680 i‡((
›t
->
Êags
 & 
OPT_PRIVFIX
Ë&& 
¥ivûeged_›ti⁄
)

681 
¥io
 +
OPRIO_ROOT
;

682 
maö›t
->
Êags
 & 
OPT_PRIOSUB
)

683 --
maö›t
;

684 i‡(
maö›t
->
Êags
 & 
OPT_PRIO
) {

685 i‡(
¥io
 < 
maö›t
->
¥i‹ôy
) {

687 i‡(
¥io
 =
OPRIO_CMDLINE
 && 
maö›t
->
¥i‹ôy
 > 
OPRIO_ROOT
) {

688 
	`›ti⁄_îr‹
("%s%s set in %s cannot be overridden\n",

689 
›t
->
«me
, 
›t›t
, 
maö›t
->
sour˚
);

694 i‡(
¥io
 > 
OPRIO_ROOT
 && 
maö›t
->
¥i‹ôy
 =
OPRIO_CMDLINE
)

695 
	`w¨n
("%s%s from %s overrides commandÜine",

696 
›t
->
«me
, 
›t›t
, 
›ti⁄_sour˚
);

699 i‡((
›t
->
Êags
 & 
OPT_INITONLY
Ë&& 
pha£
 !
PHASE_INITIALIZE
) {

700 
	`›ti⁄_îr‹
("%s%s cannot be changedáfter initialization",

701 
›t
->
«me
, 
›t›t
);

704 i‡((
›t
->
Êags
 & 
OPT_PRIV
Ë&& !
¥ivûeged_›ti⁄
) {

705 
	`›ti⁄_îr‹
("usingÅhe %s%sÑequiresÑootÖrivilege",

706 
›t
->
«me
, 
›t›t
);

709 i‡((
›t
->
Êags
 & 
OPT_ENABLE
Ë&& *(
boﬁ
 *)(›t->
addr2
) == 0) {

710 
	`›ti⁄_îr‹
("%s%†i†dißbÀd", 
›t
->
«me
, 
›t›t
);

713 i‡((
›t
->
Êags
 & 
OPT_DEVEQUIV
Ë&& 
dev«m_fixed
) {

714 
	`›ti⁄_îr‹
("the %s%s mayÇot be changed in %s",

715 
›t
->
«me
, 
›t›t
, 
›ti⁄_sour˚
);

719 
›t
->
ty≥
) {

720 
o_boﬁ
:

721 
v
 = 
›t
->
Êags
 & 
OPT_VALUE
;

722 *(
boﬁ
 *)(
›t
->
addr
Ë
v
;

723 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2COPY
))

724 *(
boﬁ
 *)(
›t
->
addr2
Ë
v
;

725 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2CLR
))

726 *(
boﬁ
 *)(
›t
->
addr2
) = 0;

727 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2CLRB
))

728 *(
u_ch¨
 *)(
›t
->
addr2
Ë&~
v
;

729 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2OR
))

730 *(
u_ch¨
 *)(
›t
->
addr2
Ë|
v
;

733 
o_öt
:

734 
iv
 = 0;

735 i‡((
›t
->
Êags
 & 
OPT_NOARG
) == 0) {

736 i‡(!
	`öt_›ti⁄
(*
¨gv
, &
iv
))

738 i‡((((
›t
->
Êags
 & 
OPT_LLIMIT
Ë&& 
iv
 < o±->
lowî_limô
)

739 || ((
›t
->
Êags
 & 
OPT_ULIMIT
Ë&& 
iv
 > o±->
uµî_limô
))

740 && !((
›t
->
Êags
 & 
OPT_ZEROOK
 && 
iv
 == 0))) {

741 *
zok
 = (
›t
->
Êags
 & 
OPT_ZEROOK
)? " zero or": "";

742 
›t
->
Êags
 & 
OPT_LIMITS
) {

743 
OPT_LLIMIT
:

744 
	`›ti⁄_îr‹
("%s value must be%s >= %d",

745 
›t
->
«me
, 
zok
, o±->
lowî_limô
);

747 
OPT_ULIMIT
:

748 
	`›ti⁄_îr‹
("%s value must be%s <= %d",

749 
›t
->
«me
, 
zok
, o±->
uµî_limô
);

751 
OPT_LIMITS
:

752 
	`›ti⁄_îr‹
("%s value must be%s between %dánd %d",

753 
›t
->
«me
, 
zok
, o±->
lowî_limô
, o±->
uµî_limô
);

759 
a
 = 
›t
->
Êags
 & 
OPT_VALUE
;

760 i‡(
a
 >= 128)

761 
a
 -= 256;

762 
iv
 +
a
;

763 i‡(
›t
->
Êags
 & 
OPT_INC
)

764 
iv
 +*(*)(
›t
->
addr
);

765 i‡((
›t
->
Êags
 & 
OPT_NOINCR
Ë&& !
¥ivûeged_›ti⁄
) {

766 
ﬁdv
 = *(*)(
›t
->
addr
);

767 i‡((
›t
->
Êags
 & 
OPT_ZEROINF
) ?

768 (
ﬁdv
 !0 && (
iv
 == 0 || iv > oldv)) : (iv > oldv)) {

769 
	`›ti⁄_îr‹
("%†vÆuêˇ¬Ÿ bêö¸ó£d", 
›t
->
«me
);

773 *(*)(
›t
->
addr
Ë
iv
;

774 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2COPY
))

775 *(*)(
›t
->
addr2
Ë
iv
;

778 
o_uöt32
:

779 i‡(
›t
->
Êags
 & 
OPT_NOARG
) {

780 
v
 = 
›t
->
Êags
 & 
OPT_VALUE
;

781 i‡(
v
 & 0x80)

782 
v
 |= 0xffffff00U;

783 } i‡(!
	`numbî_›ti⁄
(*
¨gv
, &
v
, 16))

785 i‡(
›t
->
Êags
 & 
OPT_OR
)

786 
v
 |*(
u_öt32_t
 *)(
›t
->
addr
);

787 *(
u_öt32_t
 *)(
›t
->
addr
Ë
v
;

788 i‡(
›t
->
addr2
 && (›t->
Êags
 & 
OPT_A2COPY
))

789 *(
u_öt32_t
 *)(
›t
->
addr2
Ë
v
;

792 
o_°rög
:

793 i‡(
›t
->
Êags
 & 
OPT_STATIC
) {

794 
	`°æ˝y
((*)(
›t
->
addr
), *
¨gv
, o±->
uµî_limô
);

796 **
›çå
 = (**)(
›t
->
addr
);

797 
sv
 = 
	`°rdup
(*
¨gv
);

798 i‡(
sv
 =
NULL
)

799 
	`novm
("optionárgument");

800 i‡(*
›çå
)

801 
	`‰ì
(*
›çå
);

802 *
›çå
 = 
sv
;

805 i‡(
›t
->
Êags
 & 
OPT_HIDE
) {

806 
	`mem£t
(*
¨gv
, '?', 
	`°æí
(*argv));

807 *
¨gv
 = "********";

811 
o_•ecül_nﬂrg
:

812 
o_•ecül
:

813 
∑r£r
 = ((*Ë
	`__P
((**))Ë
›t
->
addr
;

814 
cur›t
 = 
›t
;

815 i‡(!(*
∑r£r
)(
¨gv
))

817 i‡(
›t
->
Êags
 & 
OPT_A2LIST
) {

818 
›ti⁄_vÆue
 *
ovp
, *
µ
;

820 
ovp
 = 
	`mÆloc
((*ovpË+ 
	`°æí
(*
¨gv
));

821 i‡(
ovp
 != 0) {

822 
	`°r˝y
(
ovp
->
vÆue
, *
¨gv
);

823 
ovp
->
sour˚
 = 
›ti⁄_sour˚
;

824 
ovp
->
√xt
 = 
NULL
;

825 i‡(
›t
->
addr2
 =
NULL
) {

826 
›t
->
addr2
 = 
ovp
;

828 
µ
 = 
›t
->
addr2
;Öp->
√xt
 !
NULL
;Öp =Öp->next)

830 
µ
->
√xt
 = 
ovp
;

836 
o_wûd
:

837 
wûdp
 = ((*Ë
	`__P
((*, **, ))Ë
›t
->
addr
;

838 i‡(!(*
wûdp
)(
cmd
, 
¨gv
, 1))

847 i‡(
›t
->
addr2
 && (›t->
Êags
 & (
OPT_A2COPY
|
OPT_ENABLE


848 |
OPT_A2PRINTER
|
OPT_A2STRVAL
|
OPT_A2LIST
|
OPT_A2OR
)) == 0)

849 *(
boﬁ
 *)(
›t
->
addr2
Ë!(›t->
Êags
 & 
OPT_A2CLR
);

851 
maö›t
->
sour˚
 = 
›ti⁄_sour˚
;

852 
maö›t
->
¥i‹ôy
 = 
¥io
;

853 
maö›t
->
wö√r
 = 
›t
 - mainopt;

856 
	}
}

864 
	$ovîride_vÆue
(
›ti⁄
, 
¥i‹ôy
, 
sour˚
)

865 c⁄° *
›ti⁄
;

866 
¥i‹ôy
;

867 c⁄° *
sour˚
;

869 
›ti⁄_t
 *
›t
;

871 
›t
 = 
	`föd_›ti⁄
(
›ti⁄
);

872 i‡(
›t
 =
NULL
)

874 
›t
->
Êags
 & 
OPT_PRIOSUB
)

875 --
›t
;

876 i‡((
›t
->
Êags
 & 
OPT_PRIO
Ë&& 
¥i‹ôy
 < opt->priority)

878 
›t
->
¥i‹ôy
 =Öriority;

879 
›t
->
sour˚
 = source;

880 
›t
->
wö√r
 = -1;

882 
	}
}

888 
	$n_¨gumíts
(
›t
)

889 
›ti⁄_t
 *
›t
;

891  (
›t
->
ty≥
 =
o_boﬁ
 || o±->ty≥ =
o_•ecül_nﬂrg


892 || (
›t
->
Êags
 & 
OPT_NOARG
))? 0: 1;

893 
	}
}

899 
	$add_›ti⁄s
(
›t
)

900 
›ti⁄_t
 *
›t
;

902 
›ti⁄_li°
 *
li°
;

904 
li°
 = 
	`mÆloc
((*list));

905 i‡(
li°
 == 0)

906 
	`novm
("optionÜistÉntry");

907 
li°
->
›ti⁄s
 = 
›t
;

908 
li°
->
√xt
 = 
exåa_›ti⁄s
;

909 
exåa_›ti⁄s
 = 
li°
;

910 
	}
}

916 
	$check_›ti⁄s
()

918 i‡(
logfûe_fd
 >0 &&Üogfûe_fd !
log_to_fd
)

919 
	`˛o£
(
logfûe_fd
);

920 
	}
}

926 
	$¥öt_›ti⁄
(
›t
, 
maö›t
, 
¥öãr
, 
¨g
)

927 
›ti⁄_t
 *
›t
, *
maö›t
;

928 
¥öãr_func
 
¥öãr
;

929 *
¨g
;

931 
i
, 
v
;

932 *
p
;

934 i‡(
›t
->
Êags
 & 
OPT_NOPRINT
)

936 
›t
->
ty≥
) {

937 
o_boﬁ
:

938 
v
 = 
›t
->
Êags
 & 
OPT_VALUE
;

939 i‡(*(
boﬁ
 *)
›t
->
addr
 !
v
)

943 
	`¥öãr
(
¨g
, "%s", 
›t
->
«me
);

945 
o_öt
:

946 
v
 = 
›t
->
Êags
 & 
OPT_VALUE
;

947 i‡(
v
 >= 128)

948 
v
 -= 256;

949 
i
 = *(*)
›t
->
addr
;

950 i‡(
›t
->
Êags
 & 
OPT_NOARG
) {

951 
	`¥öãr
(
¨g
, "%s", 
›t
->
«me
);

952 i‡(
i
 !
v
) {

953 i‡(
›t
->
Êags
 & 
OPT_INC
) {

954 ; 
i
 > 
v
; i -= v)

955 
	`¥öãr
(
¨g
, " %s", 
›t
->
«me
);

957 
	`¥öãr
(
¨g
, " # oops: %dÇot %d\n",

958 
i
, 
v
);

961 
	`¥öãr
(
¨g
, "%†%d", 
›t
->
«me
, 
i
);

964 
o_uöt32
:

965 
	`¥öãr
(
¨g
, "%s", 
›t
->
«me
);

966 i‡((
›t
->
Êags
 & 
OPT_NOARG
) == 0)

967 
	`¥öãr
(
¨g
, " %x", *(
u_öt32_t
 *)
›t
->
addr
);

970 
o_°rög
:

971 i‡(
›t
->
Êags
 & 
OPT_HIDE
) {

972 
p
 = "??????";

974 
p
 = (*Ë
›t
->
addr
;

975 i‡((
›t
->
Êags
 & 
OPT_STATIC
) == 0)

976 
p
 = *(**)p;

978 
	`¥öãr
(
¨g
, "%†%q", 
›t
->
«me
, 
p
);

981 
o_•ecül
:

982 
o_•ecül_nﬂrg
:

983 
o_wûd
:

984 i‡(
›t
->
ty≥
 !
o_wûd
) {

985 
	`¥öãr
(
¨g
, "%s", 
›t
->
«me
);

986 i‡(
	`n_¨gumíts
(
›t
) == 0)

988 
	`¥öãr
(
¨g
, " ");

990 i‡(
›t
->
Êags
 & 
OPT_A2PRINTER
) {

991 (*
›π
Ë
	`__P
((
›ti⁄_t
 *, 
¥öãr_func
, *));

992 
›π
 = ((*Ë
	`__P
((
›ti⁄_t
 *, 
¥öãr_func
,

993 *)))
›t
->
addr2
;

994 (*
›π
)(
›t
, 
¥öãr
, 
¨g
);

995 } i‡(
›t
->
Êags
 & 
OPT_A2STRVAL
) {

996 
p
 = (*Ë
›t
->
addr2
;

997 i‡((
›t
->
Êags
 & 
OPT_STATIC
) == 0)

998 
p
 = *(**)p;

999 
	`¥öãr
(
¨g
, "%q", 
p
);

1000 } i‡(
›t
->
Êags
 & 
OPT_A2LIST
) {

1001 
›ti⁄_vÆue
 *
ovp
;

1003 
ovp
 = (
›ti⁄_vÆue
 *Ë
›t
->
addr2
;

1005 
	`¥öãr
(
¨g
, "%q", 
ovp
->
vÆue
);

1006 i‡((
ovp
 = ovp->
√xt
Ë=
NULL
)

1008 
	`¥öãr
(
¨g
, "\t\t# (from %s)\n%s ",

1009 
ovp
->
sour˚
, 
›t
->
«me
);

1012 
	`¥öãr
(
¨g
, "xxx # [don't know howÅoÖrint value]");

1017 
	`¥öãr
(
¨g
, "# %†vÆuê—y≥ %d\?\?)", 
›t
->
«me
, o±->
ty≥
);

1020 
	`¥öãr
(
¨g
, "\t\t# (‰om %s)\n", 
maö›t
->
sour˚
);

1021 
	}
}

1028 
	$¥öt_›ti⁄_li°
(
›t
, 
¥öãr
, 
¨g
)

1029 
›ti⁄_t
 *
›t
;

1030 
¥öãr_func
 
¥öãr
;

1031 *
¨g
;

1033 
›t
->
«me
 !
NULL
) {

1034 i‡(
›t
->
¥i‹ôy
 !
OPRIO_DEFAULT


1035 && 
›t
->
wö√r
 != () -1)

1036 
	`¥öt_›ti⁄
(
›t
 + o±->
wö√r
, o±, 
¥öãr
, 
¨g
);

1038 ++
›t
;

1039 } 
›t
->
Êags
 & 
OPT_PRIOSUB
);

1041 
	}
}

1047 
	$¥öt_›ti⁄s
(
¥öãr
, 
¨g
)

1048 
¥öãr_func
 
¥öãr
;

1049 *
¨g
;

1051 
›ti⁄_li°
 *
li°
;

1052 
i
;

1054 
	`¥öãr
(
¨g
, "pppd options inÉffect:\n");

1055 
	`¥öt_›ti⁄_li°
(
gíîÆ_›ti⁄s
, 
¥öãr
, 
¨g
);

1056 
	`¥öt_›ti⁄_li°
(
auth_›ti⁄s
, 
¥öãr
, 
¨g
);

1057 
li°
 = 
exåa_›ti⁄s
;Üi° !
NULL
;Üi° =Üi°->
√xt
)

1058 
	`¥öt_›ti⁄_li°
(
li°
->
›ti⁄s
, 
¥öãr
, 
¨g
);

1059 
	`¥öt_›ti⁄_li°
(
the_ch™√l
->
›ti⁄s
, 
¥öãr
, 
¨g
);

1060 
i
 = 0; 
¥Ÿocﬁs
[i] !
NULL
; ++i)

1061 
	`¥öt_›ti⁄_li°
(
¥Ÿocﬁs
[
i
]->
›ti⁄s
, 
¥öãr
, 
¨g
);

1062 
	}
}

1068 
	$ußge
()

1070 i‡(
pha£
 =
PHASE_INITIALIZE
)

1071 
	`Ârötf
(
°dîr
, 
ußge_°rög
, 
VERSION
, 
¥og«me
);

1072 
	}
}

1078 
	$showhñp
(
¨gv
)

1079 **
¨gv
;

1081 i‡(
pha£
 =
PHASE_INITIALIZE
) {

1082 
	`ußge
();

1083 
	`exô
(0);

1086 
	}
}

1092 
	$showvîsi⁄
(
¨gv
)

1093 **
¨gv
;

1095 i‡(
pha£
 =
PHASE_INITIALIZE
) {

1096 
	`Ârötf
(
°dout
, "µpd vîsi⁄ %s\n", 
VERSION
);

1097 
	`exô
(0);

1100 
	}
}

1108 
›ti⁄_îr‹
 
__V
((*
fmt
, ...))

1110 
va_li°
 
	g¨gs
;

1111 
	gbuf
[1024];

1113 #i‡
deföed
(
__STDC__
)

1114 
va_°¨t
(
¨gs
, 
fmt
);

1116 *
	gfmt
;

1117 
va_°¨t
(
¨gs
);

1118 
	gfmt
 = 
va_¨g
(
¨gs
, *);

1120 
v¶¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

1121 
va_íd
(
¨gs
);

1122 i‡(
	gpha£
 =
PHASE_INITIALIZE
)

1123 
Ârötf
(
°dîr
, "%s: %s\n", 
¥og«me
, 
buf
);

1124 
sy¶og
(
LOG_ERR
, "%s", 
buf
);

1132 
	$ªadabÀ
(
fd
)

1133 
fd
;

1135 
uid_t
 
uid
;

1136 
i
;

1137 
°©
 
sbuf
;

1139 
uid
 = 
	`gëuid
();

1140 i‡(
uid
 == 0)

1142 i‡(
	`f°©
(
fd
, &
sbuf
) != 0)

1144 i‡(
sbuf
.
°_uid
 =
uid
)

1145  
sbuf
.
°_mode
 & 
S_IRUSR
;

1146 i‡(
sbuf
.
°_gid
 =
	`gëgid
())

1147  
sbuf
.
°_mode
 & 
S_IRGRP
;

1148 
i
 = 0; i < 
ngroups
; ++i)

1149 i‡(
sbuf
.
°_gid
 =
groups
[
i
])

1150  
sbuf
.
°_mode
 & 
S_IRGRP
;

1151  
sbuf
.
°_mode
 & 
S_IROTH
;

1152 
	}
}

1162 
	$gëw‹d
(
f
, 
w‹d
, 
√wlöï
, 
fûíame
)

1163 
FILE
 *
f
;

1164 *
w‹d
;

1165 *
√wlöï
;

1166 *
fûíame
;

1168 
c
, 
Àn
, 
esˇ≥
;

1169 
quŸed
, 
commít
;

1170 
vÆue
, 
digô
, 
gŸ
, 
n
;

1172 
	#iso˘Æ
(
c
Ë((cË>'0' && (cË< '8')

	)

1174 *
√wlöï
 = 0;

1175 
Àn
 = 0;

1176 
esˇ≥
 = 0;

1177 
commít
 = 0;

1178 
quŸed
 = 0;

1184 
c
 = 
	`gëc
(
f
);

1185 i‡(
c
 =
EOF
)

1192 i‡(
c
 == '\n') {

1193 i‡(!
esˇ≥
) {

1194 *
√wlöï
 = 1;

1195 
commít
 = 0;

1197 
esˇ≥
 = 0;

1204 i‡(
commít
)

1210 i‡(
esˇ≥
)

1216 i‡(
c
 == '\\') {

1217 
esˇ≥
 = 1;

1224 i‡(
c
 == '#') {

1225 
commít
 = 1;

1232 i‡(!
	`is•a˚
(
c
))

1239 
c
 !
EOF
) {

1240 i‡(
esˇ≥
) {

1246 
esˇ≥
 = 0;

1247 i‡(
c
 == '\n') {

1248 
c
 = 
	`gëc
(
f
);

1252 
gŸ
 = 0;

1253 
c
) {

1255 
vÆue
 = '\a';

1258 
vÆue
 = '\b';

1261 
vÆue
 = '\f';

1264 
vÆue
 = '\n';

1267 
vÆue
 = '\r';

1270 
vÆue
 = ' ';

1273 
vÆue
 = '\t';

1277 i‡(
	`iso˘Æ
(
c
)) {

1281 
vÆue
 = 0;

1282 
n
 = 0;Ç < 3 && 
	`iso˘Æ
(
c
); ++n) {

1283 
vÆue
 = (vÆuê<< 3Ë+ (
c
 & 07);

1284 
c
 = 
	`gëc
(
f
);

1286 
gŸ
 = 1;

1290 i‡(
c
 == 'x') {

1294 
vÆue
 = 0;

1295 
c
 = 
	`gëc
(
f
);

1296 
n
 = 0;Ç < 2 && 
	`isxdigô
(
c
); ++n) {

1297 
digô
 = 
	`touµî
(
c
) - '0';

1298 i‡(
digô
 > 10)

1299 
digô
 += '0' + 10 - 'A';

1300 
vÆue
 = (vÆuê<< 4Ë+ 
digô
;

1301 
c
 = 
	`gëc
 (
f
);

1303 
gŸ
 = 1;

1310 
vÆue
 = 
c
;

1317 i‡(
Àn
 < 
MAXWORDLEN
) {

1318 
w‹d
[
Àn
] = 
vÆue
;

1319 ++
Àn
;

1322 i‡(!
gŸ
)

1323 
c
 = 
	`gëc
(
f
);

1330 i‡(
c
 == '\\') {

1331 
esˇ≥
 = 1;

1332 
c
 = 
	`gëc
(
f
);

1340 i‡(
quŸed
) {

1341 i‡(
c
 =
quŸed
) {

1342 
quŸed
 = 0;

1343 
c
 = 
	`gëc
(
f
);

1346 } i‡(
c
 == '"' || c == '\'') {

1347 
quŸed
 = 
c
;

1348 
c
 = 
	`gëc
(
f
);

1350 } i‡(
	`is•a˚
(
c
) || c == '#') {

1351 
	`ungëc
 (
c
, 
f
);

1358 i‡(
Àn
 < 
MAXWORDLEN
) {

1359 
w‹d
[
Àn
] = 
c
;

1360 ++
Àn
;

1363 
c
 = 
	`gëc
(
f
);

1365 
w‹d
[
MAXWORDLEN
-1] = 0;

1370 i‡(
c
 =
EOF
) {

1371 i‡(
	`„º‹
(
f
)) {

1372 i‡(
î∫o
 == 0)

1373 
î∫o
 = 
EIO
;

1374 
	`›ti⁄_îr‹
("Eº‹Ñódög %s: %m", 
fûíame
);

1375 
	`dõ
(1);

1381 i‡(
Àn
 == 0)

1383 i‡(
quŸed
)

1384 
	`›ti⁄_îr‹
("warning: quoted wordÑunsÅoÉnd of file (%.20s...)",

1385 
fûíame
, 
w‹d
);

1391 i‡(
Àn
 >
MAXWORDLEN
) {

1392 
	`›ti⁄_îr‹
("warning: word in file %sÅooÜong (%.20s...)",

1393 
fûíame
, 
w‹d
);

1394 
Àn
 = 
MAXWORDLEN
 - 1;

1396 
w‹d
[
Àn
] = 0;

1400 #unde‡
iso˘Æ


1402 
	}
}

1408 
	$numbî_›ti⁄
(
°r
, 
vÆp
, 
ba£
)

1409 *
°r
;

1410 
u_öt32_t
 *
vÆp
;

1411 
ba£
;

1413 *
±r
;

1415 *
vÆp
 = 
	`°πoul
(
°r
, &
±r
, 
ba£
);

1416 i‡(
±r
 =
°r
) {

1417 
	`›ti⁄_îr‹
("invalidÇumericÖarameter '%s' for %s option",

1418 
°r
, 
cuºít_›ti⁄
);

1422 
	}
}

1431 
	$öt_›ti⁄
(
°r
, 
vÆp
)

1432 *
°r
;

1433 *
vÆp
;

1435 
u_öt32_t
 
v
;

1437 i‡(!
	`numbî_›ti⁄
(
°r
, &
v
, 0))

1439 *
vÆp
 = (Ë
v
;

1441 
	}
}

1452 
	$ªadfûe
(
¨gv
)

1453 **
¨gv
;

1455  
	`›ti⁄s_‰om_fûe
(*
¨gv
, 1, 1, 
¥ivûeged_›ti⁄
);

1456 
	}
}

1463 
	$ˇŒfûe
(
¨gv
)

1464 **
¨gv
;

1466 *
‚ame
, *
¨g
, *
p
;

1467 
l
, 
ok
;

1469 
¨g
 = *
¨gv
;

1470 
ok
 = 1;

1471 i‡(
¨g
[0] == '/' ||árg[0] == 0)

1472 
ok
 = 0;

1474 
p
 = 
¨g
; *p != 0; ) {

1475 i‡(
p
[0] == '.' &&Ö[1] == '.' && (p[2] == '/' ||Ö[2] == 0)) {

1476 
ok
 = 0;

1479 *
p
 != '/' && *p != 0)

1480 ++
p
;

1481 i‡(*
p
 == '/')

1482 ++
p
;

1485 i‡(!
ok
) {

1486 
	`›ti⁄_îr‹
("call option value mayÇot contain .. or start with /");

1490 
l
 = 
	`°æí
(
¨g
Ë+ såÀn(
_PATH_PEERFILES
) + 1;

1491 i‡((
‚ame
 = (*Ë
	`mÆloc
(
l
)Ë=
NULL
)

1492 
	`novm
("call fileÇame");

1493 
	`¶¥ötf
(
‚ame
, 
l
, "%s%s", 
_PATH_PEERFILES
, 
¨g
);

1495 
ok
 = 
	`›ti⁄s_‰om_fûe
(
‚ame
, 1, 1, 1);

1497 
	`‰ì
(
‚ame
);

1498  
ok
;

1499 
	}
}

1501 #ifde‡
PPP_FILTER


1506 
	$£çassfûãr
(
¨gv
)

1507 **
¨gv
;

1509 
pˇp_t
 *
pc
;

1510 
ªt
 = 1;

1512 
pc
 = 
	`pˇp_›í_dód
(
DLT_PPP_PPPD
, 65535);

1513 i‡(
	`pˇp_compûe
(
pc
, &
∑ss_fûãr
, *
¨gv
, 1, 
√tmask
) == -1) {

1514 
	`›ti⁄_îr‹
("error inÖass-filterÉxpression: %s\n",

1515 
	`pˇp_gëîr
(
pc
));

1516 
ªt
 = 0;

1518 
	`pˇp_˛o£
(
pc
);

1520  
ªt
;

1521 
	}
}

1527 
	$£è˘ivefûãr
(
¨gv
)

1528 **
¨gv
;

1530 
pˇp_t
 *
pc
;

1531 
ªt
 = 1;

1533 
pc
 = 
	`pˇp_›í_dód
(
DLT_PPP_PPPD
, 65535);

1534 i‡(
	`pˇp_compûe
(
pc
, &
a˘ive_fûãr
, *
¨gv
, 1, 
√tmask
) == -1) {

1535 
	`›ti⁄_îr‹
("error ináctive-filterÉxpression: %s\n",

1536 
	`pˇp_gëîr
(
pc
));

1537 
ªt
 = 0;

1539 
	`pˇp_˛o£
(
pc
);

1541  
ªt
;

1542 
	}
}

1549 
	$£tdomaö
(
¨gv
)

1550 **
¨gv
;

1552 
	`gëho°«me
(
ho°«me
, 
MAXNAMELEN
);

1553 i‡(**
¨gv
 != 0) {

1554 i‡(**
¨gv
 != '.')

1555 
	`°∫ˇt
(
ho°«me
, ".", 
MAXNAMELEN
 - 
	`°æí
(hostname));

1556 
domaö
 = 
ho°«me
 + 
	`°æí
(hostname);

1557 
	`°∫ˇt
(
ho°«me
, *
¨gv
, 
MAXNAMELEN
 - 
	`°æí
(hostname));

1559 
ho°«me
[
MAXNAMELEN
-1] = 0;

1561 
	}
}

1564 
	$£éogfûe
(
¨gv
)

1565 **
¨gv
;

1567 
fd
, 
îr
;

1568 
uid_t
 
euid
;

1570 
euid
 = 
	`gëeuid
();

1571 i‡(!
¥ivûeged_›ti⁄
 && 
	`£ãuid
(
	`gëuid
()) == -1) {

1572 
	`›ti⁄_îr‹
("u«bÀÅÿdr›Öîmissi⁄†tÿ›í %s: %m", *
¨gv
);

1575 
fd
 = 
	`›í
(*
¨gv
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
 | 
O_EXCL
, 0644);

1576 i‡(
fd
 < 0 && 
î∫o
 =
EEXIST
)

1577 
fd
 = 
	`›í
(*
¨gv
, 
O_WRONLY
 | 
O_APPEND
);

1578 
îr
 = 
î∫o
;

1579 i‡(!
¥ivûeged_›ti⁄
 && 
	`£ãuid
(
euid
) == -1)

1580 
	`Áèl
("unableÅoÑegainÖrivileges: %m");

1581 i‡(
fd
 < 0) {

1582 
î∫o
 = 
îr
;

1583 
	`›ti⁄_îr‹
("C™'à›íÜog fûê%s: %m", *
¨gv
);

1586 
	`°æ˝y
(
logfûe_«me
, *
¨gv
, (logfile_name));

1587 i‡(
logfûe_fd
 >= 0)

1588 
	`˛o£
(
logfûe_fd
);

1589 
logfûe_fd
 = 
fd
;

1590 
log_to_fd
 = 
fd
;

1591 
log_deÁu…
 = 0;

1593 
	}
}

1595 #ifde‡
MAXOCTETS


1597 
	$£tmodú
(
¨gv
)

1598 **
¨gv
;

1600 if(*
¨gv
 =
NULL
)

1602 if(!
	`°rcmp
(*
¨gv
,"in")) {

1603 
maxo˘ës_dú
 = 
PPP_OCTETS_DIRECTION_IN
;

1604 } i‡(!
	`°rcmp
(*
¨gv
,"out")) {

1605 
maxo˘ës_dú
 = 
PPP_OCTETS_DIRECTION_OUT
;

1606 } i‡(!
	`°rcmp
(*
¨gv
,"max")) {

1607 
maxo˘ës_dú
 = 
PPP_OCTETS_DIRECTION_MAXOVERAL
;

1609 
maxo˘ës_dú
 = 
PPP_OCTETS_DIRECTION_SUM
;

1612 
	}
}

1615 #ifde‡
PLUGIN


1617 
	$lﬂd∂ugö
(
¨gv
)

1618 **
¨gv
;

1620 *
¨g
 = *
¨gv
;

1621 *
h™dÀ
;

1622 c⁄° *
îr
;

1623 (*
öô
Ë
	`__P
(());

1624 *
∑th
 = 
¨g
;

1625 c⁄° *
vîs
;

1627 i‡(
	`°rchr
(
¨g
, '/') == 0) {

1628 c⁄° *
ba£
 = 
_PATH_PLUGIN
;

1629 
l
 = 
	`°æí
(
ba£
Ë+ såÀn(
¨g
) + 2;

1630 
∑th
 = 
	`mÆloc
(
l
);

1631 i‡(
∑th
 == 0)

1632 
	`novm
("plugin fileÖath");

1633 
	`°æ˝y
(
∑th
, 
ba£
, 
l
);

1634 
	`°æˇt
(
∑th
, "/", 
l
);

1635 
	`°æˇt
(
∑th
, 
¨g
, 
l
);

1637 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_GLOBAL
 | 
RTLD_NOW
);

1638 i‡(
h™dÀ
 == 0) {

1639 
îr
 = 
	`dÀº‹
();

1640 i‡(
îr
 != 0)

1641 
	`›ti⁄_îr‹
("%s", 
îr
);

1642 
	`›ti⁄_îr‹
("Couldn'àlﬂdÖlugö %s", 
¨g
);

1643 
îr
;

1645 
öô
 = ((*)())
	`dlsym
(
h™dÀ
, "plugin_init");

1646 i‡(
öô
 == 0) {

1647 
	`›ti⁄_îr‹
("%†ha†nÿöôüliz©i⁄É¡ryÖoöt", 
¨g
);

1648 
îr˛o£
;

1650 
vîs
 = (c⁄° *Ë
	`dlsym
(
h™dÀ
, "pppd_version");

1651 i‡(
vîs
 == 0) {

1652 
	`w¨n
("W¨nög:Ölugö %†ha†nÿvîsi⁄ inf‹m©i⁄", 
¨g
);

1653 } i‡(
	`°rcmp
(
vîs
, 
VERSION
) != 0) {

1654 
	`›ti⁄_îr‹
("Plugin %s is forÖppd version %s,Åhis is %s",

1655 
¨g
, 
vîs
, 
VERSION
);

1656 
îr˛o£
;

1658 
	`öfo
("Plugö %†lﬂded.", 
¨g
);

1659 (*
öô
)();

1662 
îr˛o£
:

1663 
	`dl˛o£
(
h™dÀ
);

1664 
îr
:

1665 i‡(
∑th
 !
¨g
)

1666 
	`‰ì
(
∑th
);

1668 
	}
}

1675 
	$u£r_£ãnv
(
¨gv
)

1676 **
¨gv
;

1678 *
¨g
 = 
¨gv
[0];

1679 *
eqp
;

1680 
u£ªnv
 *
uï
, **
ö•
;

1682 i‡((
eqp
 = 
	`°rchr
(
¨g
, '=')Ë=
NULL
) {

1683 
	`›ti⁄_îr‹
("missög = i¿«me=vÆue: %s", 
¨g
);

1686 i‡(
eqp
 =
¨g
) {

1687 
	`›ti⁄_îr‹
("missög v¨übÀÇame: %s", 
¨g
);

1690 
uï
 = 
u£ªnv_li°
; uï !
NULL
; uï = uï->
ue_√xt
) {

1691 
∆í
 = 
	`°æí
(
uï
->
ue_«me
);

1692 i‡(
∆í
 =(
eqp
 - 
¨g
) &&

1693 
	`°∫cmp
(
¨g
, 
uï
->
ue_«me
, 
∆í
) == 0)

1697 i‡(
uï
 !
NULL
 && !
¥ivûeged_›ti⁄
 && uï->
ue_¥iv
)

1700 i‡(
uï
 =
NULL
) {

1701 
uï
 = 
	`mÆloc
( (*uïË+ (
eqp
-
¨g
));

1702 
	`°∫˝y
(
uï
->
ue_«me
, 
¨g
, 
eqp
-arg);

1703 
uï
->
ue_«me
[
eqp
-
¨g
] = '\0';

1704 
uï
->
ue_√xt
 = 
NULL
;

1705 
ö•
 = &
u£ªnv_li°
;

1706 *
ö•
 !
NULL
)

1707 
ö•
 = &(*ö•)->
ue_√xt
;

1708 *
ö•
 = 
uï
;

1710 
u£ªnv
 *
uï2
;

1711 
uï2
 = 
u£ªnv_li°
; uï2 !
NULL
; uï2 = uï2->
ue_√xt
) {

1712 i‡(
uï2
 !
uï
 && !uï2->
ue_is£t
)

1715 i‡(
uï2
 =
NULL
 && !
uï
->
ue_is£t
)

1716 
	`föd_›ti⁄
("un£t")->
Êags
 |
OPT_NOPRINT
;

1717 
	`‰ì
(
uï
->
ue_vÆue
);

1719 
uï
->
ue_is£t
 = 1;

1720 
uï
->
ue_¥iv
 = 
¥ivûeged_›ti⁄
;

1721 
uï
->
ue_sour˚
 = 
›ti⁄_sour˚
;

1722 
uï
->
ue_vÆue
 = 
	`°rdup
(
eqp
 + 1);

1723 
cur›t
->
Êags
 &~
OPT_NOPRINT
;

1725 
	}
}

1728 
	$u£r_£çröt
(
›t
, 
¥öãr
, 
¨g
)

1729 
›ti⁄_t
 *
›t
;

1730 
¥öãr_func
 
¥öãr
;

1731 *
¨g
;

1733 
u£ªnv
 *
uï
, *
uï√xt
;

1735 
uï√xt
 = 
u£ªnv_li°
;

1736 
uï√xt
 !
NULL
 && !uï√xt->
ue_is£t
)

1737 
uï√xt
 = uï√xt->
ue_√xt
;

1738 (
uï
 = 
uï√xt
Ë!
NULL
) {

1739 
uï√xt
 = 
uï
->
ue_√xt
;

1740 
uï√xt
 !
NULL
 && !uï√xt->
ue_is£t
)

1741 
uï√xt
 = uï√xt->
ue_√xt
;

1742 (*
¥öãr
)(
¨g
, "%s=%s", 
uï
->
ue_«me
, uï->
ue_vÆue
);

1743 i‡(
uï√xt
 !
NULL
)

1744 (*
¥öãr
)(
¨g
, "\t\t# (‰om %s)\n%†", 
uï
->
ue_sour˚
, 
›t
->
«me
);

1746 
›t
->
sour˚
 = 
uï
->
ue_sour˚
;

1748 
	}
}

1751 
	$u£r_un£ãnv
(
¨gv
)

1752 **
¨gv
;

1754 
u£ªnv
 *
uï
, **
ö•
;

1755 *
¨g
 = 
¨gv
[0];

1757 i‡(
	`°rchr
(
¨g
, '='Ë!
NULL
) {

1758 
	`›ti⁄_îr‹
("u√x≥˘ed = i¿«me: %s", 
¨g
);

1761 i‡(*
¨g
 == '\0') {

1762 
	`›ti⁄_îr‹
("missing variableÇame for unset");

1765 
uï
 = 
u£ªnv_li°
; uï !
NULL
; uï = uï->
ue_√xt
) {

1766 i‡(
	`°rcmp
(
¨g
, 
uï
->
ue_«me
) == 0)

1770 i‡(
uï
 !
NULL
 && !
¥ivûeged_›ti⁄
 && uï->
ue_¥iv
)

1773 i‡(
uï
 =
NULL
) {

1774 
uï
 = 
	`mÆloc
( (*uïË+ 
	`°æí
(
¨g
));

1775 
	`°r˝y
(
uï
->
ue_«me
, 
¨g
);

1776 
uï
->
ue_√xt
 = 
NULL
;

1777 
ö•
 = &
u£ªnv_li°
;

1778 *
ö•
 !
NULL
)

1779 
ö•
 = &(*ö•)->
ue_√xt
;

1780 *
ö•
 = 
uï
;

1782 
u£ªnv
 *
uï2
;

1783 
uï2
 = 
u£ªnv_li°
; uï2 !
NULL
; uï2 = uï2->
ue_√xt
) {

1784 i‡(
uï2
 !
uï
 && uï2->
ue_is£t
)

1787 i‡(
uï2
 =
NULL
 && 
uï
->
ue_is£t
)

1788 
	`föd_›ti⁄
("£t")->
Êags
 |
OPT_NOPRINT
;

1789 
	`‰ì
(
uï
->
ue_vÆue
);

1791 
uï
->
ue_is£t
 = 0;

1792 
uï
->
ue_¥iv
 = 
¥ivûeged_›ti⁄
;

1793 
uï
->
ue_sour˚
 = 
›ti⁄_sour˚
;

1794 
uï
->
ue_vÆue
 = 
NULL
;

1795 
cur›t
->
Êags
 &~
OPT_NOPRINT
;

1797 
	}
}

1800 
	$u£r_un£çröt
(
›t
, 
¥öãr
, 
¨g
)

1801 
›ti⁄_t
 *
›t
;

1802 
¥öãr_func
 
¥öãr
;

1803 *
¨g
;

1805 
u£ªnv
 *
uï
, *
uï√xt
;

1807 
uï√xt
 = 
u£ªnv_li°
;

1808 
uï√xt
 !
NULL
 && uï√xt->
ue_is£t
)

1809 
uï√xt
 = uï√xt->
ue_√xt
;

1810 (
uï
 = 
uï√xt
Ë!
NULL
) {

1811 
uï√xt
 = 
uï
->
ue_√xt
;

1812 
uï√xt
 !
NULL
 && uï√xt->
ue_is£t
)

1813 
uï√xt
 = uï√xt->
ue_√xt
;

1814 (*
¥öãr
)(
¨g
, "%s", 
uï
->
ue_«me
);

1815 i‡(
uï√xt
 !
NULL
)

1816 (*
¥öãr
)(
¨g
, "\t\t# (‰om %s)\n%†", 
uï
->
ue_sour˚
, 
›t
->
«me
);

1818 
›t
->
sour˚
 = 
uï
->
ue_sour˚
;

1820 
	}
}

	@pppd/patchlevel.h

1 
	#VERSION
 "2.4.8"

	)

2 
	#DATE
 "31 De˚mbî 2019"

	)

	@pppd/pathnames.h

7 #ifde‡
HAVE_PATHS_H


8 
	~<∑ths.h
>

11 #i‚de‡
_PATH_VARRUN


12 
	#_PATH_VARRUN
 "/ëc/µp/"

	)

14 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

17 #i‚de‡
_ROOT_PATH


18 
	#_ROOT_PATH


	)

21 
	#_PATH_UPAPFILE
 
_ROOT_PATH
 "/ëc/µp/∑p-£¸ës"

	)

22 
	#_PATH_CHAPFILE
 
_ROOT_PATH
 "/ëc/µp/ch≠-£¸ës"

	)

23 
	#_PATH_SRPFILE
 
_ROOT_PATH
 "/ëc/µp/§p-£¸ës"

	)

25 #ifde‡
USE_EAPTLS


26 
	#_PATH_EAPTLSCLIFILE
 
_ROOT_PATH
 "/ëc/µp/ó±ls-˛õ¡"

	)

27 
	#_PATH_EAPTLSSERVFILE
 
_ROOT_PATH
 "/ëc/µp/ó±ls-£rvî"

	)

28 
	#_PATH_OPENSSLCONFFILE
 
_ROOT_PATH
 "/ëc/µp/›ís¶.˙f"

	)

31 
	#_PATH_SYSOPTIONS
 
_ROOT_PATH
 "/ëc/µp/›ti⁄s"

	)

32 
	#_PATH_IPUP
 
_ROOT_PATH
 "/ëc/µp/ù-up"

	)

33 
	#_PATH_IPDOWN
 
_ROOT_PATH
 "/ëc/µp/ù-down"

	)

34 
	#_PATH_IPPREUP
 
_ROOT_PATH
 "/ëc/µp/ù-¥e-up"

	)

35 
	#_PATH_AUTHUP
 
_ROOT_PATH
 "/ëc/µp/auth-up"

	)

36 
	#_PATH_AUTHDOWN
 
_ROOT_PATH
 "/ëc/µp/auth-down"

	)

37 
	#_PATH_TTYOPT
 
_ROOT_PATH
 "/ëc/µp/›ti⁄s."

	)

38 
	#_PATH_CONNERRS
 
_ROOT_PATH
 "/ëc/µp/c⁄√˘-îr‹s"

	)

39 
	#_PATH_PEERFILES
 
_ROOT_PATH
 "/ëc/µp/≥îs/"

	)

40 
	#_PATH_RESOLV
 
_ROOT_PATH
 "/ëc/µp/ªsﬁv.c⁄f"

	)

42 
	#_PATH_USEROPT
 ".µ¥c"

	)

43 
	#_PATH_PSEUDONYM
 ".µp_p£ud⁄ym"

	)

45 #ifde‡
INET6


46 
	#_PATH_IPV6UP
 
_ROOT_PATH
 "/ëc/µp/ùv6-up"

	)

47 
	#_PATH_IPV6DOWN
 
_ROOT_PATH
 "/ëc/µp/ùv6-down"

	)

50 #ifde‡
IPX_CHANGE


51 
	#_PATH_IPXUP
 
_ROOT_PATH
 "/ëc/µp/ùx-up"

	)

52 
	#_PATH_IPXDOWN
 
_ROOT_PATH
 "/ëc/µp/ùx-down"

	)

55 #ifde‡
__STDC__


56 
	#_PATH_PPPDB
 
_ROOT_PATH
 
_PATH_VARRUN
 "µpd2.tdb"

	)

58 #ifde‡
HAVE_PATHS_H


59 
	#_PATH_PPPDB
 "/v¨/run/µpd2.tdb"

	)

61 
	#_PATH_PPPDB
 "/ëc/µp/µpd2.tdb"

	)

65 #ifde‡
PLUGIN


66 #ifde‡
__STDC__


67 
	#_PATH_PLUGIN
 
DESTDIR
 "/lib/µpd/" 
VERSION


	)

69 
	#_PATH_PLUGIN
 "/u§/lib/µpd"

	)

	@pppd/plugins/minconn.c

35 
	~<°ddef.h
>

36 
	~<time.h
>

37 
	~"µpd.h
"

39 
	gµpd_vîsi⁄
[] = 
VERSION
;

41 
	gmöc⁄√˘
 = 0;

43 
›ti⁄_t
 
	gmy_›ti⁄s
[] = {

44 { "möc⁄√˘", 
o_öt
, &
möc⁄√˘
,

46 { 
NULL
 }

49 
	$my_gë_idÀ
(
µp_idÀ
 *
idÀ
)

51 
time_t
 
t
;

53 i‡(
idÀ
 =
NULL
)

54  
möc⁄√˘
? möc⁄√˘: 
idÀ_time_limô
;

55 
t
 = 
idÀ
->
xmô_idÀ
;

56 i‡(
idÀ
->
ªcv_idÀ
 < 
t
)

57 
t
 = 
idÀ
->
ªcv_idÀ
;

58  
idÀ_time_limô
 - 
t
;

59 
	}
}

61 
	$∂ugö_öô
()

63 
	`öfo
("plugin_init");

64 
	`add_›ti⁄s
(
my_›ti⁄s
);

65 
idÀ_time_hook
 = 
my_gë_idÀ
;

66 
	}
}

	@pppd/plugins/passprompt.c

11 
	~<î∫o.h
>

12 
	~<uni°d.h
>

13 
	~<sys/waô.h
>

14 
	~<sy¶og.h
>

15 
	~"µpd.h
"

17 
	gµpd_vîsi⁄
[] = 
VERSION
;

19 
	g¥om±¥og
[
PATH_MAX
+1];

20 
	g¥om±¥og_ªfu£d
 = 0;

22 
›ti⁄_t
 
	g›ti⁄s
[] = {

23 { "¥om±¥og", 
o_°rög
, 
¥om±¥og
,

25 
OPT_STATIC
, 
NULL
, 
PATH_MAX
 },

26 { 
NULL
 }

29 
	$¥om±∑ss
(*
u£r
, *
∑sswd
)

31 
p
[2];

32 
pid_t
 
kid
;

33 
ªadgood
, 
w°©
;

34 
ssize_t
 
ªd
;

36 i‡(
¥om±¥og_ªfu£d
 || 
¥om±¥og
[0] =0 || 
	`ac˚ss
’rom±¥og, 
X_OK
) < 0)

39 i‡(!
∑sswd
)

42 i‡(
	`pùe
(
p
)) {

43 
	`w¨n
("C™'àmakê®pùêf‹ %s", 
¥om±¥og
);

46 i‡((
kid
 = 
	`f‹k
()Ë=(
pid_t
) -1) {

47 
	`w¨n
("C™'àf‹kÅÿru¿%s", 
¥om±¥og
);

48 
	`˛o£
(
p
[0]);

49 
	`˛o£
(
p
[1]);

52 i‡(!
kid
) {

54 *
¨gv
[5], 
fd°r
[32];

55 
	`sys_˛o£
();

56 
	`˛o£log
();

57 
	`˛o£
(
p
[0]);

58 
	`£ãuid
(
	`gëuid
());

59 
	`£ãgid
(
	`gëgid
());

60 
¨gv
[0] = 
¥om±¥og
;

61 
¨gv
[1] = 
u£r
;

62 
¨gv
[2] = 
ªmŸe_«me
;

63 
	`•rötf
(
fd°r
, "%d", 
p
[1]);

64 
¨gv
[3] = 
fd°r
;

65 
¨gv
[4] = 0;

66 
	`execv
(*
¨gv
,árgv);

67 
	`_exô
(127);

71 
	`˛o£
(
p
[1]);

72 
ªadgood
 = 0;

74 
ªd
 = 
	`ªad
(
p
[0], 
∑sswd
 + 
ªadgood
, 
MAXSECRETLEN
-1 -Ñeadgood);

75 i‡(
ªd
 == 0)

77 i‡(
ªd
 < 0) {

78 i‡(
î∫o
 =
EINTR
 && !
gŸ_sigãrm
)

80 
	`îr‹
("C™'àªad se¸ë from %s: %m", 
¥om±¥og
);

81 
ªadgood
 = -1;

84 
ªadgood
 +
ªd
;

85 } 
ªadgood
 < 
MAXSECRETLEN
 - 1);

86 
	`˛o£
(
p
[0]);

89 
	`waôpid
(
kid
, &
w°©
, 0) < 0) {

90 i‡(
î∫o
 !
EINTR
 || 
gŸ_sigãrm
) {

91 
	`w¨n
("îr‹ waôög f‹ %s: %m", 
¥om±¥og
);

96 i‡(
ªadgood
 < 0)

98 
∑sswd
[
ªadgood
] = 0;

99 i‡(!
	`WIFEXITED
(
w°©
))

100 
	`w¨n
("%†ãrmö©edábn‹mÆly", 
¥om±¥og
);

101 i‡(
	`WEXITSTATUS
(
w°©
)) {

102 
	`w¨n
("%†exôed wôh codê%d", 
¥om±¥og
, 
	`WEXITSTATUS
(
w°©
));

104 i‡(
	`WEXITSTATUS
(
w°©
) == 128) {

105 
¥om±¥og_ªfu£d
 = 1;

110 
	}
}

112 
	$∂ugö_öô
()

114 
	`add_›ti⁄s
(
›ti⁄s
);

115 
∑p_∑sswd_hook
 = 
¥om±∑ss
;

116 #ifde‡
USE_EAPTLS


117 
ó±ls_∑sswd_hook
 = 
¥om±∑ss
;

119 
	}
}

	@pppd/plugins/passwordfd.c

10 
	~<°dio.h
>

11 
	~<î∫o.h
>

12 
	~<°rög.h
>

13 
	~<uni°d.h
>

15 
	~"µpd.h
"

17 
	gµpd_vîsi⁄
[] = 
VERSION
;

19 
	g∑sswdfd
 = -1;

20 
	gßve_∑sswd
[
MAXSECRETLEN
];

22 
›ti⁄_t
 
	g›ti⁄s
[] = {

23 { "∑ssw‹dfd", 
o_öt
, &
∑sswdfd
,

25 { 
NULL
 }

28 
	$pwfd_check
 ()

31 
	}
}

33 
	$pwfd_∑sswd
 (*
u£r
, *
∑sswd
)

35 
ªadgood
, 
ªd
;

37 i‡(
∑sswdfd
 == -1)

40 i‡(
∑sswd
 =
NULL
)

43 i‡(
∑sswdfd
 == -2) {

44 
	`°r˝y
 (
∑sswd
, 
ßve_∑sswd
);

48 
ªadgood
 = 0;

50 
ªd
 = 
	`ªad
 (
∑sswdfd
, 
∑sswd
 + 
ªadgood
, 
MAXSECRETLEN
 - 1 -Ñeadgood);

51 i‡(
ªd
 == 0)

53 i‡(
ªd
 < 0) {

54 
	`îr‹
 ("Can'tÑead secret from fd\n");

55 
ªadgood
 = -1;

58 
ªadgood
 +
ªd
;

59 } 
ªadgood
 < 
MAXSECRETLEN
 - 1);

61 
	`˛o£
 (
∑sswdfd
);

63 i‡(
ªadgood
 < 0)

66 
∑sswd
[
ªadgood
] = 0;

67 
	`°r˝y
 (
ßve_∑sswd
, 
∑sswd
);

68 
∑sswdfd
 = -2;

71 
	}
}

73 
	$∂ugö_öô
 ()

75 
	`add_›ti⁄s
 (
›ti⁄s
);

77 
∑p_check_hook
 = 
pwfd_check
;

78 
∑p_∑sswd_hook
 = 
pwfd_∑sswd
;

80 
ch≠_check_hook
 = 
pwfd_check
;

81 
ch≠_∑sswd_hook
 = 
pwfd_∑sswd
;

83 #ifde‡
USE_EAPTLS


84 
ó±ls_∑sswd_hook
 = 
pwfd_∑sswd
;

86 
	}
}

	@pppd/plugins/pppoatm/ans.c

14 #i‡
HAVE_CONFIG_H


15 
	~<c⁄fig.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/«me£r.h
>

24 
	~<√tdb.h
>

25 
	~<ªsﬁv.h
>

27 
	~"©m.h
"

28 
	~"©mªs.h
"

31 
	#MAX_ANSWER
 2048

	)

32 
	#MAX_NAME
 1024

	)

34 
	#MAX_LINE
 2048

	)

35 
	#E164_CC_DEFAULT_LEN
 2

	)

36 
	#E164_CC_FILE
 "/ëc/e164_cc"

	)

38 
	#GET16
(
pos
Ë((’os)[0] << 8Ë| (pos)[1])

	)

41 
	$™s
(c⁄° *
ãxt
,
w™ãd
,*
ªsu…
,
ªs_Àn
)

43 
™swî
[
MAX_ANSWER
];

44 
«me
[
MAX_NAME
];

45 *
pos
,*
d©a
,*
found
;

46 
™swî_Àn
,
«me_Àn
,
d©a_Àn
,
found_Àn
;

47 
que°i⁄s
,
™swîs
;

49 
found_Àn
 = 0;

50 i‡((
™swî_Àn
 = 
	`ªs_£¨ch
(
ãxt
,
C_IN
,
w™ãd
,
™swî
,
MAX_ANSWER
)) < 0)

51  
TRY_OTHER
;

56 
pos
 = 
™swî
+12;

57 i‡(
™swî
[3] & 15Ë 
TRY_OTHER
;

58 
que°i⁄s
 = 
	`GET16
(
™swî
+4);

59 i‡(
que°i⁄s
 !1Ë 
TRY_OTHER
;

60 
™swîs
 = 
	`GET16
(
™swî
+6);

61 i‡(
™swîs
 < 1Ë 
TRY_OTHER
;

65 i‡((
«me_Àn
 = 
	`dn_ex∑nd
(
™swî
,™swî+
™swî_Àn
,
pos
,
«me
,
MAX_NAME
)) < 0)

66  
TRY_OTHER
;

67 
pos
 +
«me_Àn
;

68 i‡(
	`GET16
(
pos
Ë!
w™ãd
 || GET16’os+2Ë!
C_IN
Ë 
TRY_OTHER
;

69 
pos
 += 4;

74 
found
 = 
NULL
;

75 
™swîs
--) {

80 i‡((
«me_Àn
 = 
	`dn_ex∑nd
(
™swî
,™swî+
™swî_Àn
,
pos
,
«me
,
MAX_NAME
))

81 < 0Ë 
TRY_OTHER
;

82 
pos
 +
«me_Àn
;

83 
d©a_Àn
 = 
	`GET16
(
pos
+8);

84 
d©a
 = 
pos
+10;

85 
pos
 = 
d©a
+
d©a_Àn
;

86 i‡(
	`GET16
(
d©a
-10Ë!
w™ãd
 || GET16(d©a-8Ë!
C_IN
 || !--
d©a_Àn
)

88 
w™ãd
) {

89 
T_NSAP
:

90 
d©a_Àn
++;

91 i‡(
d©a_Àn
 !
ATM_ESA_LEN
) ;

92 
	`mem˝y
(((
sockaddr_©msvc
 *Ë
ªsu…
)->

93 
ßs_addr
.
¥v
,
d©a
,
ATM_ESA_LEN
);

95 
T_ATMA
:

96 *
d©a
++) {

97 
ATMA_AESA
:

98 i‡(
d©a_Àn
 !
ATM_ESA_LEN
) ;

99 
	`mem˝y
(((
sockaddr_©msvc
 *Ë
ªsu…
)->

100 
ßs_addr
.
¥v
,
d©a
,
ATM_ESA_LEN
);

102 
ATMA_E164
:

103 i‡(
d©a_Àn
 > 
ATM_E164_LEN
) ;

104 i‡(!
found
) {

105 
found
 = 
d©a
;

106 
found_Àn
 = 
d©a_Àn
;

112 
T_PTR
:

113 i‡(
	`dn_ex∑nd
(
™swî
,™swî+
™swî_Àn
,
d©a
,
ªsu…
,

114 
ªs_Àn
Ë< 0Ë 
FATAL
;

120 i‡(!
found
Ë 
TRY_OTHER
;

121 
	`mem˝y
(((
sockaddr_©msvc
 *Ë
ªsu…
)->
ßs_addr
.
pub
,
found
,

122 
found_Àn
);

123 ((
sockaddr_©msvc
 *Ë
ªsu…
)->
ßs_addr
.
pub
[
found_Àn
] = 0;

125 
	}
}

128 
	$™s_by«me
(c⁄° *
ãxt
,
sockaddr_©msvc
 *
addr
,
Àngth
,

129 
Êags
)

131 i‡(!(
Êags
 & 
T2A_SVC
Ë|| 
Àngth
 !(*
addr
)Ë 
TRY_OTHER
;

132 
	`mem£t
(
addr
,0,(*addr));

133 
addr
->
ßs_Ámûy
 = 
AF_ATMSVC
;

134 i‡(!
	`™s
(
ãxt
,
T_ATMA
,
addr
,
Àngth
))  0;

135  
	`™s
(
ãxt
,
T_NSAP
,
addr
,
Àngth
);

136 
	}
}

139 
	$ícode_nßp
(*
buf
,c⁄° *
addr
)

141 
fmt_dcc
[] = { 2,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,

143 
fmt_e164
[] = { 2,12,1,1,1,1,1,1,1,1,16,2,0 };

144 *
fmt
;

145 
pos
,
i
,
j
;

147 *
addr
) {

148 
ATM_AFI_DCC
:

149 
ATM_AFI_ICD
:

150 
ATM_AFI_LOCAL
:

151 
ATM_AFI_DCC_GROUP
:

152 
ATM_AFI_ICD_GROUP
:

153 
ATM_AFI_LOCAL_GROUP
:

154 
fmt
 = 
fmt_dcc
;

156 
ATM_AFI_E164
:

157 
ATM_AFI_E164_GROUP
:

158 
fmt
 = 
fmt_e164
;

161  
TRY_OTHER
;

163 
pos
 = 2*
ATM_ESA_LEN
;

164 
i
 = 0; 
fmt
[i]; i++) {

165 
pos
 -
fmt
[
i
];

166 
j
 = 0; j < 
fmt
[
i
]; j++)

167 
	`•rötf
(
buf
++,"%x",

168 (
addr
[(
pos
+
j
) >> 1] >> 4*(1-((pos+j) & 1))) & 0xf);

169 *
buf
++ = '.';

171 
	`°r˝y
(
buf
,"AESA.ATMA.INT.");

173 
	}
}

176 
	$ícode_nßp_√w
(*
buf
,c⁄° *
addr
)

178 
i
;

179 
digô
;

181 
i
 = 20; i; ) {

182 
i
--;

183 
digô
 = 
addr
[
i
] & 0x0F;

184 *(
buf
++Ë
digô
 + (digit >= 10 ? '7' : '0');

185 *(
buf
++) = '.';

186 
digô
 = ((Ë(
addr
[
i
])) >> 4;

187 *(
buf
++Ë
digô
 + (digit >= 10 ? '7' : '0');

188 *(
buf
++) = '.';

190 
	`°r˝y
 (
buf
, "NSAP.INT.");

192 
	}
}

195 
	$cc_Àn
(
p0
,
p1
)

197 *
cc_èbÀ
 = 
NULL
;

198 
FILE
 *
fûe
;

199 
buf„r
[
MAX_LINE
];

200 *
hîe
;

201 
cc
;

203 i‡(!
cc_èbÀ
) {

204 i‡(!(
cc_èbÀ
 = 
	`mÆloc
(100))) {

205 
	`≥º‹
("malloc");

206  
E164_CC_DEFAULT_LEN
;

208 
	`mem£t
(
cc_èbÀ
,
E164_CC_DEFAULT_LEN
,100);

209 i‡(!(
fûe
 = 
	`f›í
(
E164_CC_FILE
,"r")))

210 
	`≥º‹
(
E164_CC_FILE
);

212 
	`fgës
(
buf„r
,
MAX_LINE
,
fûe
)) {

213 
hîe
 = 
	`°rchr
(
buf„r
,'#');

214 i‡(
hîe
) *here = 0;

215 i‡(
	`ssˇnf
(
buf„r
,"%d",&
cc
) == 1) {

216 i‡(
cc
 < 10Ë
cc_èbÀ
[cc] = 1;

217 i‡(
cc
 < 100Ë
cc_èbÀ
[cc] = 2;

218 
cc_èbÀ
[
cc
/10] = 3;

221 
	`f˛o£
(
fûe
);

224 i‡(
cc_èbÀ
[
p0
] == 1)  1;

225  
cc_èbÀ
[
p0
*10+
p1
];

226 
	}
}

229 
	$ícode_e164
(*
buf
,c⁄° *
addr
)

231 c⁄° *
¥efix
,*
hîe
;

233 
¥efix
 = 
addr
+
	`cc_Àn
(addr[0]-48,addr[1]-48);

234 
hîe
 = 
	`°rchr
(
addr
,0);

235 
hîe
 > 
¥efix
) {

236 *
buf
++ = *--
hîe
;

237 *
buf
++ = '.';

239 
hîe
 > 
addr
Ë*
buf
++ = *addr++;

240 
	`°r˝y
(
buf
,".E164.ATMA.INT.");

242 
	}
}

245 
	$™s_byaddr
(*
buf„r
,
Àngth
,c⁄° 
sockaddr_©msvc
 *
addr
,

246 
Êags
)

248 
tmp
[
MAX_NAME
];

249 
ªs
;

251 i‡(
addr
->
ßs_addr
.
¥v
) {

252 
ªs
 = 
	`ícode_nßp
(
tmp
,
addr
->
ßs_addr
.
¥v
);

253 i‡(!
ªs
 && !
	`™s
(
tmp
,
T_PTR
,
buf„r
,
Àngth
))  0;

254 
ªs
 = 
	`ícode_nßp_√w
(
tmp
,
addr
->
ßs_addr
.
¥v
);

255 i‡(
ªs
 < 0) Ñes;

256  
	`™s
(
tmp
,
T_PTR
,
buf„r
,
Àngth
);

258 
ªs
 = 
	`ícode_e164
(
tmp
,
addr
->
ßs_addr
.
pub
);

259 i‡(
ªs
 < 0) Ñes;

260  
	`™s
(
tmp
,
T_PTR
,
buf„r
,
Àngth
);

262 
	}
}

	@pppd/plugins/pppoatm/atm.h

6 #i‚de‡
_ATM_H


7 
	#_ATM_H


	)

9 
	~<°döt.h
>

10 
	~<sys/sockë.h
>

11 
	~<löux/©m.h
>

18 #i‚de‡
AF_ATMPVC


19 
	#AF_ATMPVC
 8

	)

22 #i‚de‡
AF_ATMSVC


23 
	#AF_ATMSVC
 20

	)

26 #i‚de‡
PF_ATMPVC


27 
	#PF_ATMPVC
 
AF_ATMPVC


	)

30 #i‚de‡
PF_ATMSVC


31 
	#PF_ATMSVC
 
AF_ATMSVC


	)

34 #i‚de‡
SOL_ATM


35 
	#SOL_ATM
 264

	)

38 #i‚de‡
SOL_AAL


39 
	#SOL_AAL
 265

	)

43 
	#HOSTS_ATM
 "/ëc/ho°s.©m"

	)

46 
	#T2A_PVC
 1

	)

47 
	#T2A_SVC
 2

	)

48 
	#T2A_UNSPEC
 4

	)

49 
	#T2A_WILDCARD
 8

	)

50 
	#T2A_NNI
 16

	)

51 
	#T2A_NAME
 32

	)

52 
	#T2A_REMOTE
 64

	)

53 
	#T2A_LOCAL
 128

	)

56 
	#A2T_PRETTY
 1

	)

57 
	#A2T_NAME
 2

	)

58 
	#A2T_REMOTE
 4

	)

59 
	#A2T_LOCAL
 8

	)

62 
	#AXE_WILDCARD
 1

	)

63 
	#AXE_PRVOPT
 2

	)

66 
	#T2Q_DEFAULTS
 1

	)

69 
	#T2S_NAME
 1

	)

70 
	#T2S_LOCAL
 2

	)

73 
	#S2T_NAME
 1

	)

74 
	#S2T_LOCAL
 2

	)

77 
	#SXE_COMPATIBLE
 1

	)

78 
	#SXE_NEGOTIATION
 2

	)

81 
	#SXE_RESULT
 4

	)

83 
	#MAX_ATM_ADDR_LEN
 (2*
ATM_ESA_LEN
+
ATM_E164_LEN
+5)

	)

85 
	#MAX_ATM_NAME_LEN
 256

	)

86 
	#MAX_ATM_QOS_LEN
 116

	)

87 
	#MAX_ATM_SAP_LEN
 255

	)

90 
ãxt2©m
(c⁄° *
ãxt
,
sockaddr
 *
addr
,
Àngth
,
Êags
);

91 
©m2ãxt
(*
buf„r
,
Àngth
,c⁄° 
sockaddr
 *
addr
,
Êags
);

92 
©m_equÆ
(c⁄° 
sockaddr
 *
a
,c⁄° sockadd∏*
b
,
Àn
,

93 
Êags
);

95 
sdu2˚Œ
(
s
,
sizes
,c⁄° *
sdu_size
,*
num_sdu
);

97 
ãxt2qos
(c⁄° *
ãxt
,
©m_qos
 *
qos
,
Êags
);

98 
qos2ãxt
(*
buf„r
,
Àngth
,c⁄° 
©m_qos
 *
qos
,
Êags
);

99 
qos_equÆ
(c⁄° 
©m_qos
 *
a
,c⁄° ©m_qo†*
b
);

101 
ãxt2ßp
(c⁄° *
ãxt
,
©m_ßp
 *
ßp
,
Êags
);

102 
ßp2ãxt
(*
buf„r
,
Àngth
,c⁄° 
©m_ßp
 *
ßp
,
Êags
);

103 
ßp_equÆ
(c⁄° 
©m_ßp
 *
a
,c⁄° ©m_ß∞*
b
,
Êags
,...);

105 
__t2q_gë_øã
(c⁄° **
ãxt
,
up
);

106 
__©mlib_„tch
(c⁄° **
pos
,...);

	@pppd/plugins/pppoatm/atmres.h

6 #i‚de‡
_ATMRES_H


7 
	#_ATMRES_H


	)

9 
	~<¨∑/«me£r.h
>

10 
	~<löux/©m.h
>

15 #i‚de‡
T_ATMA


16 
	#T_ATMA
 34

	)

18 #i‚de‡
ATMA_AESA


19 
	#ATMA_AESA
 0

	)

21 #i‚de‡
ATMA_E164


22 
	#ATMA_E164
 1

	)

27 
	#TRY_OTHER
 -2

	)

28 
	#FATAL
 -1

	)

31 
™s_by«me
(c⁄° *
ãxt
,
sockaddr_©msvc
 *
addr
,
Àngth
,

32 
Êags
);

33 
™s_byaddr
(*
buf„r
,
Àngth
,c⁄° 
sockaddr_©msvc
 *
addr
,

34 
Êags
);

	@pppd/plugins/pppoatm/atmsap.h

6 #i‚de‡
_ATMSAP_H


7 
	#_ATMSAP_H


	)

9 
	~<°döt.h
>

10 
	~<löux/©mßp.h
>

17 
	#NLPID_IEEE802_1_SNAP
 0x80

	)

23 
	#ATM_FORUM_OUI
 "\x00\xA0\x3E"

	)

24 
	#EPFL_OUI
 "\x00\x60\xD7"

	)

32 
	#ANS_HLT_VS_ID
 
ATM_FORUM_OUI
 "\x00\x00\x00\x01"

	)

34 
	#VOD_HLT_VS_ID
 
ATM_FORUM_OUI
 "\x00\x00\x00\x02"

	)

36 
	#AREQUIPA_HLT_VS_ID
 
EPFL_OUI
 "\x01\x00\x00\x01"

	)

37 
	#TTCP_HLT_VS_ID
 
EPFL_OUI
 "\x01\x00\x00\x03"

	)

43 
©m_t˝ù_p‹t_m≠pög
(*
vs_id
,
uöt8_t
 
¥Ÿocﬁ
,
uöt16_t
 
p‹t
);

	@pppd/plugins/pppoatm/misc.c

5 #i‡
HAVE_CONFIG_H


6 
	~<c⁄fig.h
>

9 
	~<°döt.h
>

10 
	~<°d¨g.h
>

11 
	~<°rög.h
>

12 
	~<sys/sockë.h
>

13 
	~<sys/io˘l.h
>

14 
	~<√töë/ö.h
>

16 
	~<©m.h
>

17 
	~<©mßp.h
>

20 
	$__©mlib_„tch
(c⁄° **
pos
,...)

22 c⁄° *
vÆue
;

23 
ªf_Àn
,
be°_Àn
,
Àn
;

24 
i
,
be°
;

25 
va_li°
 
≠
;

27 
	`va_°¨t
(
≠
,
pos
);

28 
ªf_Àn
 = 
	`°æí
(*
pos
);

29 
be°_Àn
 = 0;

30 
be°
 = -1;

31 
i
 = 0; (
vÆue
 = 
	`va_¨g
(
≠
,const *)); i++) {

32 
Àn
 = 
	`°æí
(
vÆue
);

33 i‡(*
vÆue
 !'!' && 
Àn
 <
ªf_Àn
 &&Üí > 
be°_Àn
 &&

34 !
	`°∫ˇ£cmp
(*
pos
,
vÆue
,
Àn
)) {

35 
be°
 = 
i
;

36 
be°_Àn
 = 
Àn
;

39 
	`va_íd
(
≠
);

40 i‡(
be°
 > -1Ë(*
pos
Ë+
be°_Àn
;

41  
be°
;

42 
	}
}

45 
	$©m_t˝ù_p‹t_m≠pög
(*
vs_id
,
uöt8_t
 
¥Ÿocﬁ
,
uöt16_t
 
p‹t
)

47 
	`mem˝y
(
vs_id
,
ATM_FORUM_OUI
 "\x01",4);

48 
vs_id
[4] = 
¥Ÿocﬁ
;

49 
vs_id
[5] = (
	`ht⁄s
(
p‹t
) >> 8) & 255;

50 
vs_id
[6] = 
	`ht⁄s
(
p‹t
) & 255;

51 
	}
}

	@pppd/plugins/pppoatm/pppoatm.c

16 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<°dlib.h
>

19 
	~"µpd.h
"

20 
	~"∑th«mes.h
"

21 
	~"fsm.h
"

22 
	~"l˝.h
"

23 
	~<©m.h
>

24 
	~<löux/©mdev.h
>

25 
	~<löux/©mµp.h
>

26 
	~<sys/°©.h
>

27 
	~<√t/if.h
>

28 
	~<sys/io˘l.h
>

30 c⁄° 
	gµpd_vîsi⁄
[] = 
VERSION
;

32 
sockaddr_©mpvc
 
	gpvˇddr
;

33 *
	gqos°r
 = 
NULL
;

34 
boﬁ
 
	gŒc_íˇps
 = 0;

35 
boﬁ
 
	gvc_íˇps
 = 0;

36 
	gdevi˚_gŸ_£t
 = 0;

37 
	gµpﬂtm_max_mtu
, 
	gµpﬂtm_max_mru
;

38 
£tdev«me_µpﬂtm
(c⁄° *
˝
, c⁄° **
¨gv
, 
doô
);

39 
ch™√l
 
	gµpﬂ_ch™√l
;

40 
	gµpﬂ_fd
 = -1;

42 
›ti⁄_t
 
	gµpﬂ_›ti⁄s
[] = {

43 { "devi˚Çame", 
o_wûd
, (*Ë&
£tdev«me_µpﬂtm
,

45 
OPT_DEVNAM
 | 
OPT_PRIVFIX
 | 
OPT_NOARG
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
,

46 
dev«m
},

47 { "Œc-íˇps", 
o_boﬁ
, &
Œc_íˇps
,

49 { "vc-íˇps", 
o_boﬁ
, &
vc_íˇps
,

51 { "qos", 
o_°rög
, &
qos°r
,

53 { 
NULL
 }

68 (*
ﬁd_£tdev«me_hook
)(c⁄° * 
˝
Ë
NULL
;

69 
	$£tdev«me_µpﬂtm
(c⁄° *
˝
, c⁄° **
¨gv
, 
doô
)

71 
sockaddr_©mpvc
 
addr
;

72 
°©
 
dev°©
;

73 i‡(
devi˚_gŸ_£t
)

76 
	`mem£t
(&
addr
, 0, áddr);

77 i‡(
	`ãxt2©m
(
˝
, (
sockaddr
 *Ë&
addr
, (addr),

78 
T2A_PVC
 | 
T2A_NAME
) < 0) {

79 if(
doô
)

80 
	`öfo
("©m d€†nŸÑecognize: %s", 
˝
);

83 i‡(!
doô
)  1;

85 
	`mem˝y
(&
pvˇddr
, &
addr
, Övcaddr);

86 
	`°æ˝y
(
dev«m
, 
˝
,  devnam);

87 
dev°©
.
°_mode
 = 
S_IFSOCK
;

88 i‡(
the_ch™√l
 !&
µpﬂ_ch™√l
) {

89 
the_ch™√l
 = &
µpﬂ_ch™√l
;

90 
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
 = 0;

91 
l˝_Ælow›ti⁄s
[0].
√g_accom¥essi⁄
 = 0;

92 
l˝_w™t›ti⁄s
[0].
√g_asyncm≠
 = 0;

93 
l˝_Ælow›ti⁄s
[0].
√g_asyncm≠
 = 0;

94 
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
 = 0;

96 
	`öfo
("PPPoATM sëdev«me_µpﬂtm - SUCCESS:%s", 
˝
);

97 
devi˚_gŸ_£t
 = 1;

99 
	}
}

101 
	#µpﬂtm_ovîhód
(Ë(
Œc_íˇps
 ? 6 : 2)

	)

103 
	$no_devi˚_giví_µpﬂtm
()

105 
	`Áèl
("No vpi.vci specified");

106 
	}
}

108 
	$£t_löe_discùlöe_µpﬂtm
(
fd
)

110 
©m_backíd_µp
 
be
;

111 
be
.
backíd_num
 = 
ATM_BACKEND_PPP
;

112 i‡(!
Œc_íˇps
)

113 
be
.
íˇps
 = 
PPPOATM_ENCAPS_VC
;

114 i‡(!
vc_íˇps
)

115 
be
.
íˇps
 = 
PPPOATM_ENCAPS_LLC
;

117 
be
.
íˇps
 = 
PPPOATM_ENCAPS_AUTODETECT
;

118 i‡(
	`io˘l
(
fd
, 
ATM_SETBACKEND
, &
be
) < 0)

119 
	`Áèl
("ioctl(ATM_SETBACKEND): %m");

120 
	}
}

123 
	$ª£t_löe_discùlöe_µpﬂtm
(
fd
)

125 
©m_backíd_t
 
be
 = 
ATM_BACKEND_RAW
;

127 (Ë
	`io˘l
(
fd
, 
ATM_SETBACKEND
, &
be
);

128 
	}
}

131 
	$c⁄√˘_µpﬂtm
()

133 
fd
;

134 
©m_qos
 
qos
;

136 i‡(!
devi˚_gŸ_£t
)

137 
	`no_devi˚_giví_µpﬂtm
();

138 
fd
 = 
	`sockë
(
AF_ATMPVC
, 
SOCK_DGRAM
, 0);

139 i‡(
fd
 < 0)

140 
	`Áèl
("failedÅo create socket: %m");

141 
	`mem£t
(&
qos
, 0,  qos);

142 
qos
.
txç
.
åaffic_˛ass
 = qos.
rxç
.åaffic_˛as†
ATM_UBR
;

144 i‡(
qos°r
 !
NULL
)

145 i‡(
	`ãxt2qos
(
qos°r
, &
qos
, 0))

146 
	`Áèl
("Can'tÖarse QoS: \"%s\"");

147 
qos
.
txç
.
max_sdu
 = 
l˝_Ælow›ti⁄s
[0].
mru
 + 
	`µpﬂtm_ovîhód
();

148 
qos
.
rxç
.
max_sdu
 = 
l˝_w™t›ti⁄s
[0].
mru
 + 
	`µpﬂtm_ovîhód
();

149 
qos
.
Øl
 = 
ATM_AAL5
;

150 i‡(
	`£tsock›t
(
fd
, 
SOL_ATM
, 
SO_ATMQOS
, &
qos
, (qos)) < 0)

151 
	`Áèl
("setsockopt(SO_ATMQOS): %m");

153 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
pvˇddr
,

154 (
sockaddr_©mpvc
)))

155 
	`Áèl
("c⁄√˘(%s): %m", 
dev«m
);

156 
µpﬂtm_max_mtu
 = 
l˝_Ælow›ti⁄s
[0].
mru
;

157 
µpﬂtm_max_mru
 = 
l˝_w™t›ti⁄s
[0].
mru
;

158 
	`£t_löe_discùlöe_µpﬂtm
(
fd
);

159 
	`°æ˝y
(
µp_dev«m
, 
dev«m
, (ppp_devnam));

160 
µpﬂ_fd
 = 
fd
;

161  
fd
;

162 
	}
}

164 
	$disc⁄√˘_µpﬂtm
()

166 
	`˛o£
(
µpﬂ_fd
);

167 
	}
}

169 
	$∂ugö_öô
()

171 #i‡
	`deföed
(
__löux__
)

172 
√w_°yÀ_drivî
;

173 i‡(!
	`µp_avaûabÀ
(Ë&& !
√w_°yÀ_drivî
)

174 
	`Áèl
("Kernel doesn't supportÖpp_generic - "

177 
	`Áèl
("No PPPoATM support onÅhis OS");

179 
	`öfo
("PPPoATMÖlugin_init");

180 
	`add_›ti⁄s
(
µpﬂ_›ti⁄s
);

181 
	}
}

182 
ch™√l
 
	gµpﬂ_ch™√l
 = {

183 
›ti⁄s
: 
µpﬂ_›ti⁄s
,

184 
¥o˚ss_exåa_›ti⁄s
: 
NULL
,

185 
check_›ti⁄s
: 
NULL
,

186 
c⁄√˘
: &
c⁄√˘_µpﬂtm
,

187 
disc⁄√˘
: &
disc⁄√˘_µpﬂtm
,

188 
e°ablish_µp
: &
gíîic_e°ablish_µp
,

189 
di£°ablish_µp
: &
gíîic_di£°ablish_µp
,

190 
£nd_c⁄fig
: 
NULL
,

191 
ªcv_c⁄fig
: 
NULL
,

192 
˛o£
: 
NULL
,

193 
˛ónup
: 
NULL


	@pppd/plugins/pppoatm/text2atm.c

6 #i‡
HAVE_CONFIG_H


7 
	~<c⁄fig.h
>

10 
	~<°dio.h
>

11 
	~<˘y≥.h
>

12 
	~<°rög.h
>

13 
	~<limôs.h
>

15 
	~"©m.h
"

16 
	~"©mßp.h
"

17 
	~"©mªs.h
"

20 
	$åy_pvc
(c⁄° *
ãxt
,
sockaddr_©mpvc
 *
addr
,
Êags
)

22 
∑π
[3];

23 
i
;

25 
∑π
[0] =Öart[1] =Öart[2] = 0;

26 
i
 = 0;

28 i‡(!*
ãxt
Ë 
FATAL
;

29 i‡(
i
 =3Ë 
TRY_OTHER
;

30 i‡(
	`isdigô
(*
ãxt
)) {

31 i‡(*
ãxt
 ='0' && 
	`isdigô
—ext[1])Ë 
TRY_OTHER
;

34 i‡(
∑π
[
i
] > 
INT_MAX
/10Ë 
TRY_OTHER
;

35 
∑π
[
i
] =Ö¨t[i]*10+*
ãxt
++-'0';

37 
	`isdigô
(*
ãxt
));

38 
i
++;

39 i‡(!*
ãxt
) ;

40 i‡(*
ãxt
++ !'.'Ë 
TRY_OTHER
;

43 i‡(*
ãxt
 == '*') {

44 i‡(!(
Êags
 & 
T2A_WILDCARD
)Ë 
FATAL
;

45 
∑π
[
i
++] = 
ATM_ITF_ANY
;

48 i‡(*
ãxt
 !'?'Ë 
TRY_OTHER
;

49 i‡(!(
Êags
 & 
T2A_UNSPEC
)Ë 
FATAL
;

50 
∑π
[
i
++] = 
ATM_VPI_UNSPEC
;

53 i‡(!*++
ãxt
) ;

54 i‡(*
ãxt
++ !'.'Ë 
FATAL
;

56 i‡(
i
 < 2Ë 
TRY_OTHER
;

57 i‡(
i
 == 2) {

58 
∑π
[2] =Öart[1];

59 
∑π
[1] =Öart[0];

60 
∑π
[0] = 0;

62 i‡(
∑π
[0] > 
SHRT_MAX
 ||Ö¨t[2] > 
ATM_MAX_VCI
)

63  
TRY_OTHER
;

64 i‡(
∑π
[1] > (
Êags
 & 
T2A_NNI
 ? 
ATM_MAX_VPI_NNI
 : 
ATM_MAX_VPI
))

65  
TRY_OTHER
;

66 i‡(
∑π
[0] =
ATM_VPI_UNSPEC
Ë 
FATAL
;

67 
addr
->
ßp_Ámûy
 = 
AF_ATMPVC
;

68 
addr
->
ßp_addr
.
ôf
 = 
∑π
[0];

69 
addr
->
ßp_addr
.
vpi
 = 
∑π
[1];

70 
addr
->
ßp_addr
.
vci
 = 
∑π
[2];

72 
	}
}

75 
	$do_åy_nßp
(c⁄° *
ãxt
,
sockaddr_©msvc
 *
addr
,
Êags
)

77 c⁄° *
wÆk
;

78 
cou¡
,
pos
,
dŸ
;

79 
off£t
,
Àn
;

80 
vÆue
;

82 
cou¡
 = 
dŸ
 = 0;

83 
wÆk
 = 
ãxt
; *walk; walk++)

84 i‡(
	`isdigô
(*
wÆk
)) {

85 i‡(
cou¡
++ == 15) ;

86 
dŸ
 = 1;

88 i‡(*
ãxt
 != '.') ;

89 i‡(!
dŸ
Ë 
FATAL
;

90 
dŸ
 = 0;

91 i‡(*
wÆk
 != ':') {

92 
pos
 = 0;

93 
off£t
 = 0;

96 i‡(!
dŸ
 || *
ãxt
 ='0'Ë 
FATAL
;

97 
addr
->
ßs_addr
.
¥v
[0] = 
ATM_AFI_E164
;

98 
addr
->
ßs_addr
.
¥v
[1] = 0;

99 
	`mem£t
(
addr
->
ßs_addr
.
¥v
+1,0,8);

100 
pos
 = 18-
cou¡
-1; *
ãxt
;Åext++) {

101 i‡(*
ãxt
 == '.') ;

102 i‡(*
ãxt
 == ':') ;

104 i‡(
pos
 & 1Ë
addr
->
ßs_addr
.
¥v
[po†>> 1] |*
ãxt
-'0';

105 
addr
->
ßs_addr
.
¥v
[
pos
 >> 1] = (*
ãxt
-'0') << 4;

106 
pos
++;

109 
addr
->
ßs_addr
.
¥v
[8] |= 0xf;

110 
ãxt
++;

111 
pos
++;

112 
off£t
 = 72;

114 
dŸ
 = 0; *
ãxt
;Åext++)

115 i‡(
	`isxdigô
(*
ãxt
)) {

116 i‡(
pos
 =
ATM_ESA_LEN
*2Ë 
TRY_OTHER
;

117 
vÆue
 = 
	`isdigô
(*
ãxt
Ë? *ãxt-'0' : (
	`i¶owî
(*text) ?

118 
	`touµî
(*
ãxt
) : *text)-'A'+10;

119 i‡(
pos
 & 1Ë
addr
->
ßs_addr
.
¥v
[po†>> 1] |
vÆue
;

120 
addr
->
ßs_addr
.
¥v
[
pos
 >> 1] = 
vÆue
 << 4;

121 
pos
++;

122 
dŸ
 = 1;

125 i‡(*
ãxt
 ='/' && (
Êags
 & 
T2A_WILDCARD
)) ;

126 i‡(*
ãxt
 !'.'Ë 
TRY_OTHER
;

128 i‡(!
dŸ
Ë 
FATAL
;

129 
dŸ
 = 0;

131 i‡(!
dŸ
Ë 
FATAL
;

132 i‡(
pos
 > 1 && !*
addr
->
ßs_addr
.
¥v
)

133  
TRY_OTHER
;

134 i‡(!*
ãxt
)

135  
pos
 !
ATM_ESA_LEN
*2 ? 
TRY_OTHER
 : ATM_ESA_LEN*2;

137 
Àn
 = 0;

138 *++
ãxt
) {

139 i‡(!
	`isdigô
(*
ãxt
))  -1;

140 i‡(
Àn
 >
pos
*4)  -1;

141 
Àn
 =Üí*10+*
ãxt
-'0';

143 i‡(
Àn
 > 7 && 
addr
->
ßs_addr
.
¥v
[0] !
ATM_AFI_E164
Ë
off£t
 = 72;

144 i‡(
Àn
 < 
off£t
Ë 
FATAL
;

145  
Àn
 > 
pos
*4 ? 
TRY_OTHER
 :Üen;

146 
	}
}

149 
	$åy_nßp
(c⁄° *
ãxt
,
sockaddr_©msvc
 *
addr
,
Êags
)

151 
ªsu…
;

153 
ªsu…
 = 
	`do_åy_nßp
(
ãxt
,
addr
,
Êags
);

154 i‡(
ªsu…
 < 0) Ñesult;

155 
addr
->
ßs_Ámûy
 = 
AF_ATMSVC
;

156 *
addr
->
ßs_addr
.
pub
 = 0;

157  
ªsu…
;

158 
	}
}

161 
	$åy_e164
(c⁄° *
ãxt
,
sockaddr_©msvc
 *
addr
,
Êags
)

163 
i
,
dŸ
,
ªsu…
;

165 i‡(*
ãxt
 == ':' || *text == '+')Åext++;

166 
i
 = 
dŸ
 = 0; *
ãxt
;Åext++)

167 i‡(
	`isdigô
(*
ãxt
)) {

168 i‡(
i
 =
ATM_E164_LEN
Ë 
TRY_OTHER
;

169 
addr
->
ßs_addr
.
pub
[
i
++] = *
ãxt
;

170 
dŸ
 = 1;

172 i‡(*
ãxt
 != '.') ;

174 i‡(!
dŸ
Ë 
TRY_OTHER
;

175 
dŸ
 = 0;

177 i‡(!
dŸ
Ë 
TRY_OTHER
;

178 
addr
->
ßs_addr
.
pub
[
i
] = 0;

179 *
addr
->
ßs_addr
.
¥v
 = 0;

180 
ªsu…
 = 0;

181 i‡(*
ãxt
) {

182 i‡(*
ãxt
++ !'+'Ë 
TRY_OTHER
;

184 
ªsu…
 = 
	`do_åy_nßp
(
ãxt
,
addr
,
Êags
);

185 i‡(
ªsu…
 < 0Ë 
FATAL
;

188 
addr
->
ßs_Ámûy
 = 
AF_ATMSVC
;

189  
ªsu…
;

190 
	}
}

193 
	$£¨ch
(
FILE
 *
fûe
,c⁄° *
ãxt
,
sockaddr
 *
addr
,
Àngth
,

194 
Êags
)

196 
löe
[
MAX_ATM_NAME_LEN
+1];

197 c⁄° *
hîe
;

198 
ªsu…
;

200 
	`fgës
(
löe
,
MAX_ATM_NAME_LEN
,
fûe
)) {

201 i‡(!
	`°πok
(
löe
,"\t\n ")) ;

202 (
hîe
 = 
	`°πok
(
NULL
,"\t\n ")))

203 i‡(!
	`°rˇ£cmp
(
hîe
,
ãxt
)) {

204 
hîe
 = 
	`°πok
(
löe
,"\t\n ");

205 
ªsu…
 = 
	`ãxt2©m
(
hîe
,
addr
,
Àngth
,
Êags
);

206 i‡(
ªsu…
 >= 0) Ñesult;

209  
TRY_OTHER
;

210 
	}
}

213 
	$åy_«me
(c⁄° *
ãxt
,
sockaddr
 *
addr
,
Àngth
,

214 
Êags
)

216 
FILE
 *
fûe
;

217 
ªsu…
;

219 i‡(!(
fûe
 = 
	`f›í
(
HOSTS_ATM
,"r"))Ë 
TRY_OTHER
;

220 
ªsu…
 = 
	`£¨ch
(
fûe
,
ãxt
,
addr
,
Àngth
,
Êags
);

221 (Ë
	`f˛o£
(
fûe
);

222  
ªsu…
;

223 
	}
}

226 
	$ãxt2©m
(c⁄° *
ãxt
,
sockaddr
 *
addr
,
Àngth
,
Êags
)

228 
ªsu…
;

230 i‡(!*
ãxt
)  -1;

231 i‡(!(
Êags
 & (
T2A_PVC
 | 
T2A_SVC
))) flags |= T2A_PVC | T2A_SVC;

232 i‡(
Àngth
 < (
sockaddr_©mpvc
))  -1;

233 i‡(
Êags
 & 
T2A_PVC
) {

234 
ªsu…
 = 
	`åy_pvc
(
ãxt
,(
sockaddr_©mpvc
 *Ë
addr
,
Êags
);

235 i‡(
ªsu…
 !
TRY_OTHER
) Ñesult;

237 i‡((
Êags
 & 
T2A_SVC
Ë&& 
Àngth
 >(
sockaddr_©msvc
)) {

238 
ªsu…
 = 
	`åy_nßp
(
ãxt
,(
sockaddr_©msvc
 *Ë
addr
,
Êags
);

239 i‡(
ªsu…
 !
TRY_OTHER
) Ñesult;

240 
ªsu…
 = 
	`åy_e164
(
ãxt
,(
sockaddr_©msvc
 *Ë
addr
,
Êags
);

241 i‡(
ªsu…
 !
TRY_OTHER
) Ñesult;

243 i‡(!(
Êags
 & 
T2A_NAME
))  -1;

244 
ªsu…
 = 
	`åy_«me
(
ãxt
,
addr
,
Àngth
,
Êags
 & ~
T2A_NAME
);

245 i‡(
ªsu…
 =
TRY_OTHER
 && !(
Êags
 & 
T2A_LOCAL
))

246 
ªsu…
 = 
	`™s_by«me
(
ãxt
,(
sockaddr_©msvc
 *Ë
addr
,
Àngth
,
Êags
);

247 i‡(
ªsu…
 !
TRY_OTHER
) Ñesult;

249 
	}
}

	@pppd/plugins/pppoatm/text2qos.c

6 #i‡
HAVE_CONFIG_H


7 
	~<c⁄fig.h
>

10 
	~<°dlib.h
>

11 
	~<°d¨g.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<limôs.h
>

16 
	~"©m.h
"

19 
	#„tch
 
__©mlib_„tch


	)

22 
	#RATE_ERROR
 -2

	)

25 
	$__t2q_gë_øã
(c⁄° **
ãxt
,
up
)

27 c⁄° 
mu…
[] = "kKmMgGg";

28 c⁄° *
mu…ùlõr
;

29 *
íd
;

30 
øã
,
‰a˘
;

31 
powî
;

33 i‡(!
	`°∫cmp
(*
ãxt
,"max",3)) {

34 *
ãxt
 += 3;

35  
ATM_MAX_PCR
;

37 
øã
 = 
	`°πoul
(*
ãxt
,&
íd
,10);

38 
powî
 = 
‰a˘
 = 0;

39 i‡(*
íd
 == '.')

40 
íd
++; *íd && 
	`isdigô
(*end);Énd++) {

41 
‰a˘
 = fø˘*10+*
íd
-48;

42 i‡(--
powî
 == -9) ;

44 
mu…ùlõr
 = 
NULL
;

45 i‡(*
íd
 && (
mu…ùlõr
 = 
	`°rchr
(
mu…
,*end))) {

46 
mu…ùlõr
 >
mu…
) {

47 i‡(
øã
 > 
UINT_MAX
/1000Ë 
RATE_ERROR
;

48 
øã
 *= 1000;

49 
powî
 += 3;

50 
mu…ùlõr
 -= 2;

52 
íd
++;

54 
powî
 && 
‰a˘
)

55 i‡(
powî
 < 0) {

56 
‰a˘
 /= 10;

57 
powî
++;

60 
‰a˘
 *= 10;

61 
powî
--;

63 
øã
 +
‰a˘
;

64 i‡(
	`°æí
(
íd
) < 3) {

65 i‡(
mu…ùlõr
Ë 
RATE_ERROR
;

67 i‡(!
	`°∫cmp
(
íd
,"cps",3))Énd += 3;

68 i‡(!
	`°∫cmp
(
íd
,"bps",3)) {

69 
øã
 = (øã+(
up
 ? 8*
ATM_CELL_PAYLOAD
-1 : 0))/8/

70 
ATM_CELL_PAYLOAD
;

71 
íd
 += 3;

73 i‡(
mu…ùlõr
Ë 
RATE_ERROR
;

74 i‡(
øã
 > 
INT_MAX
Ë 
RATE_ERROR
;

75 *
ãxt
 = 
íd
;

76  
øã
;

77 
	}
}

80 
	$∑øms
(c⁄° **
ãxt
,
©m_åaÂrm
 *
a
,

81 
©m_åaÂrm
 *
b
)

83 
vÆue
;

84 *
íd
;

86 i‡(*(*
ãxt
)++ != ':')  -1;

88 i‡(!**
ãxt
)  -1;

89 
	`„tch
(
ãxt
,"max_pcr=","pcr=","min_pcr=","max_sdu=","sdu=",

90 
NULL
)) {

92 i‡((
vÆue
 = 
	`__t2q_gë_øã
(
ãxt
,0)Ë=
RATE_ERROR
)  -1;

93 i‡(
a
Ëa->
max_p¸
 = 
vÆue
;

94 i‡(
b
Ëb->
max_p¸
 = 
vÆue
;

97 i‡((
vÆue
 = 
	`__t2q_gë_øã
(
ãxt
,0)Ë=
RATE_ERROR
)  -1;

98 i‡(
a
Ëa->
p¸
 = 
vÆue
;

99 i‡(
b
Ëb->
p¸
 = 
vÆue
;

102 i‡((
vÆue
 = 
	`__t2q_gë_øã
(
ãxt
,1)Ë=
RATE_ERROR
)  -1;

103 i‡(
vÆue
 =
ATM_MAX_PCR
)  -1;

104 i‡(
a
Ëa->
mö_p¸
 = 
vÆue
;

105 i‡(
b
Ëb->
mö_p¸
 = 
vÆue
;

109 
vÆue
 = 
	`°πﬁ
(*
ãxt
,&
íd
,10);

110 i‡(
vÆue
 < 0)  -1;

111 *
ãxt
 = 
íd
;

112 i‡(
a
Ëa->
max_sdu
 = 
vÆue
;

113 i‡(
b
Ëb->
max_sdu
 = 
vÆue
;

118 i‡(!**
ãxt
) ;

119 i‡(*(*
ãxt
)++ != ',')  -1;

122 
	}
}

125 
	$ãxt2qos
(c⁄° *
ãxt
,
©m_qos
 *
qos
,
Êags
)

127 
åaffic_˛ass
,
Øl
;

129 
åaffic_˛ass
 = 
ATM_NONE
;

130 
Øl
 = 
ATM_NO_AAL
;

132 c⁄° 
Øl_numbî
[] = { 
ATM_AAL0
, 
ATM_AAL5
 };

133 
ôem
;

135 
ôem
 = 
	`„tch
(&
ãxt
,"!n⁄e","ubr","cbr","vbr","abr","Øl0","Øl5",
NULL
);

136 
ôem
) {

141 
åaffic_˛ass
 = 
ôem
;

145 
Øl
 = 
Øl_numbî
[
ôem
-5];

151 *
ãxt
 == ',' ?Åext++ : 0);

152 i‡(!
åaffic_˛ass
)  -1;

153 i‡(
qos
 && !(
Êags
 & 
T2Q_DEFAULTS
)Ë
	`mem£t
(qos,0,(*qos));

154 i‡(
qos
Ëqos->
txç
.
åaffic_˛ass
 = qos->
rxç
.traffic_class =Åraffic_class;

155 i‡(
qos
 && 
Øl
) qos->aal =áal;

156 i‡(!*
ãxt
)  0;

157 i‡(
	`∑øms
(&
ãxt
,
qos
 ? &qos->
txç
 : 
NULL
,qo†? &qos->
rxç
 : NULL))

159 i‡(!*
ãxt
)  0;

160 
	`„tch
(&
ãxt
,"tx","rx",
NULL
)) {

162 i‡(!
	`„tch
(&
ãxt
,":n⁄e",
NULL
)) {

163 i‡(
qos
Ëqos->
txç
.
åaffic_˛ass
 = 
ATM_NONE
;

164 i‡(*
ãxt
 == ',')Åext++;

167 i‡(
	`∑øms
(&
ãxt
,
qos
 ? &qos->
txç
 : 
NULL
,NULL))  -1;

170 
ãxt
 -= 2;

175 i‡(!*
ãxt
)  0;

176 i‡(
	`„tch
(&
ãxt
,"rx",
NULL
))  -1;

177 i‡(!
	`„tch
(&
ãxt
,":n⁄e",
NULL
Ë&& 
qos
Ëqos->
rxç
.
åaffic_˛ass
 = 
ATM_NONE
;

178 i‡(
	`∑øms
(&
ãxt
,
qos
 ? &qos->
rxç
 : 
NULL
,NULL))  -1;

179  *
ãxt
 ? -1 : 0;

180 
	}
}

	@pppd/plugins/pppol2tp/l2tp_event.h

33 #i‚de‡
L2TP_EVENT_H


34 
	#L2TP_EVENT_H


	)

36 
	~<°döt.h
>

42 
	#OPENL2TP_EVENT_SOCKET_NAME
 "/tmp/›íl2ç-evít.sock"

	)

44 
	#OPENL2TP_MSG_TYPE_NULL
 0

	)

45 
	#OPENL2TP_MSG_TYPE_PPP_UPDOWN_IND
 1

	)

46 
	#OPENL2TP_MSG_TYPE_PPP_ACCM_IND
 2

	)

47 
	#OPENL2TP_MSG_TYPE_MAX
 3

	)

50 
	mOPENL2TP_TLV_TYPE_TUNNEL_ID
,

51 
	mOPENL2TP_TLV_TYPE_SESSION_ID
,

52 
	mOPENL2TP_TLV_TYPE_PPP_ACCM
,

53 
	mOPENL2TP_TLV_TYPE_PPP_UNIT
,

54 
	mOPENL2TP_TLV_TYPE_PPP_IFNAME
,

55 
	mOPENL2TP_TLV_TYPE_PPP_USER_NAME
,

56 
	mOPENL2TP_TLV_TYPE_PPP_STATE


58 
	#OPENL2TP_TLV_TYPE_MAX
 (
OPENL2TP_TLV_TYPE_PPP_STATE
 + 1)

	)

60 
	#OPENL2TP_MSG_MAX_LEN
 512

	)

61 
	#OPENL2TP_MSG_SIGNATURE
 0x6b6c7831

	)

63 
	#ALIGN32
(
n
Ë((“Ë+ 3Ë& ~3)

	)

68 
	s›íl2ç_evít_év
 {

69 
uöt16_t
 
	mév_ty≥
;

70 
uöt16_t
 
	mév_Àn
;

71 
uöt8_t
 
	mév_vÆue
[0];

77 
	s›íl2ç_evít_msg
 {

78 
uöt32_t
 
	mmsg_sig«tuª
;

79 
uöt16_t
 
	mmsg_ty≥
;

80 
uöt16_t
 
	mmsg_Àn
;

81 
uöt8_t
 
	mmsg_d©a
[0];

86 
	s›íl2ç_év_tu¬ñ_id
 {

87 
uöt16_t
 
	mtu¬ñ_id
;

90 
	s›íl2ç_év_£ssi⁄_id
 {

91 
uöt16_t
 
	m£ssi⁄_id
;

94 
	s›íl2ç_év_µp_accm
 {

95 
uöt32_t
 
	m£nd_accm
;

96 
uöt32_t
 
	mªcv_accm
;

99 
	s›íl2ç_év_µp_unô
 {

100 
uöt32_t
 
	munô
;

103 
	s›íl2ç_év_µp_°©e
 {

104 
uöt8_t
 
	mup
;

107 
	s›íl2ç_év_µp_i‚ame
 {

108 
	mi‚ame
[0];

111 
	s›íl2ç_év_µp_u£r_«me
 {

112 
	mu£r_«me
[0];

	@pppd/plugins/pppol2tp/openl2tp.c

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~"µpd.h
"

27 
	~"∑th«mes.h
"

28 
	~"fsm.h
"

29 
	~"l˝.h
"

30 
	~"c˝.h
"

31 
	~"ù˝.h
"

32 
	~<sys/°©.h
>

33 
	~<√t/if.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sys/sockë.h
>

36 
	~<sys/un.h
>

37 
	~<√töë/ö.h
>

38 
	~<sig«l.h
>

39 
	~<löux/vîsi⁄.h
>

40 
	~<löux/sockios.h
>

42 #i‚de‡
Æig√d_u64


44 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

46 
	~<löux/ty≥s.h
>

47 
	~<löux/if_ëhî.h
>

48 
	~<löux/µp_defs.h
>

49 
	~<löux/if_µp.h
>

50 
	~<löux/if_µpox.h
>

51 
	~<löux/if_µpﬁ2ç.h
>

53 
	~"l2ç_evít.h
"

55 
µpﬁ2ç_tu¬ñ_id
;

56 
µpﬁ2ç_£ssi⁄_id
;

58 (*
µpﬁ2ç_£nd_accm_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
,

59 
uöt32_t
 
£nd_accm
, uöt32_à
ªcv_accm
);

60 (*
µpﬁ2ç_ù_updown_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
, 
up
);

62 c⁄° 
µpd_vîsi⁄
[] = 
VERSION
;

64 
›íl2ç_fd
 = -1;

66 (*
ﬁd_µpﬁ2ç_£nd_accm_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
,

67 
uöt32_t
 
£nd_accm
,

68 
uöt32_t
 
ªcv_accm
Ë
NULL
;

69 (*
ﬁd_µpﬁ2ç_ù_updown_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
,

70 
up
Ë
NULL
;

71 (*
ﬁd_mu…ûök_joö_hook
)(Ë
NULL
;

80 
	$›íl2ç_˛õ¡_¸óã
()

82 
sockaddr_un
 
addr
;

83 
ªsu…
;

85 i‡(
›íl2ç_fd
 < 0) {

86 
›íl2ç_fd
 = 
	`sockë
(
PF_UNIX
, 
SOCK_DGRAM
, 0);

87 i‡(
›íl2ç_fd
 < 0) {

88 
	`îr‹
("openl2tp connection create: %m");

89  -
ENOTCONN
;

92 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

93 
	`°r˝y
(&
addr
.
sun_∑th
[0], 
OPENL2TP_EVENT_SOCKET_NAME
);

95 
ªsu…
 = 
	`c⁄√˘
(
›íl2ç_fd
, (
sockaddr
 *Ë&
addr
,

96 (
addr
));

97 i‡(
ªsu…
 < 0) {

98 
	`îr‹
("openl2tp connection connect: %m");

99  -
ENOTCONN
;

104 
	}
}

106 
	$›íl2ç_£nd_accm_öd
(
tu¬ñ_id
, 
£ssi⁄_id
,

107 
uöt32_t
 
£nd_accm
, uöt32_à
ªcv_accm
)

109 
ªsu…
;

110 
uöt8_t
 
buf
[
OPENL2TP_MSG_MAX_LEN
];

111 
›íl2ç_evít_msg
 *
msg
 = (*Ë&
buf
[0];

112 
›íl2ç_evít_év
 *
év
;

113 
uöt16_t
 
tid
 = 
tu¬ñ_id
;

114 
uöt16_t
 
sid
 = 
£ssi⁄_id
;

115 
›íl2ç_év_µp_accm
 
accm
;

117 i‡(
›íl2ç_fd
 < 0) {

118 
ªsu…
 = 
	`›íl2ç_˛õ¡_¸óã
();

119 i‡(
ªsu…
 < 0) {

120 
out
;

124 
accm
.
£nd_accm
 = send_accm;

125 
accm
.
ªcv_accm
 =Ñecv_accm;

127 
msg
->
msg_sig«tuª
 = 
OPENL2TP_MSG_SIGNATURE
;

128 
msg
->
msg_ty≥
 = 
OPENL2TP_MSG_TYPE_PPP_ACCM_IND
;

129 
msg
->
msg_Àn
 = 0;

131 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

132 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_TUNNEL_ID
;

133 
év
->
év_Àn
 = (
tid
);

134 
	`mem˝y
(&
év
->
év_vÆue
[0], &
tid
,Ålv->
év_Àn
);

135 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

137 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

138 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_SESSION_ID
;

139 
év
->
év_Àn
 = (
sid
);

140 
	`mem˝y
(&
év
->
év_vÆue
[0], &
sid
,Ålv->
év_Àn
);

141 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

143 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

144 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_PPP_ACCM
;

145 
év
->
év_Àn
 = (
accm
);

146 
	`mem˝y
(&
év
->
év_vÆue
[0], &
accm
,Ålv->
év_Àn
);

147 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

149 
ªsu…
 = 
	`£nd
(
›íl2ç_fd
, 
msg
, (*msgË+ msg->
msg_Àn
,

150 
MSG_NOSIGNAL
);

151 i‡(
ªsu…
 < 0) {

152 
	`îr‹
("openl2tp send: %m");

154 i‡(
ªsu…
 !((*
msg
Ë+ msg->
msg_Àn
)) {

155 
	`w¨n
("openl2tp send: unexpected byte count %d,Éxpected %d",

156 
ªsu…
, (
msg
Ë+ msg->
msg_Àn
);

158 
	`dbglog
("›íl2ç síd: síàPPP_ACCM_IND, %d byãs", 
ªsu…
);

160 
out
:

161 i‡(
ﬁd_µpﬁ2ç_£nd_accm_hook
 !
NULL
) {

162 (*
ﬁd_µpﬁ2ç_£nd_accm_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
,

163 
£nd_accm
, 
ªcv_accm
);

166 
	}
}

168 
	$›íl2ç_µp_updown_öd
(
tu¬ñ_id
, 
£ssi⁄_id
, 
up
)

170 
ªsu…
;

171 
uöt8_t
 
buf
[
OPENL2TP_MSG_MAX_LEN
];

172 
›íl2ç_evít_msg
 *
msg
 = (*Ë&
buf
[0];

173 
›íl2ç_evít_év
 *
év
;

174 
uöt16_t
 
tid
 = 
tu¬ñ_id
;

175 
uöt16_t
 
sid
 = 
£ssi⁄_id
;

176 
uöt8_t
 
°©e
 = 
up
;

177 
unô
 = 
ifunô
;

178 *
u£r_«me
 = 
NULL
;

180 i‡(
›íl2ç_fd
 < 0) {

181 
ªsu…
 = 
	`›íl2ç_˛õ¡_¸óã
();

182 i‡(
ªsu…
 < 0) {

183 
out
;

187 i‡(
≥î_auth«me
[0] != '\0') {

188 
u£r_«me
 = 
	`°rdup
(
≥î_auth«me
);

191 
msg
->
msg_sig«tuª
 = 
OPENL2TP_MSG_SIGNATURE
;

192 
msg
->
msg_ty≥
 = 
OPENL2TP_MSG_TYPE_PPP_UPDOWN_IND
;

193 
msg
->
msg_Àn
 = 0;

195 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

196 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_TUNNEL_ID
;

197 
év
->
év_Àn
 = (
tid
);

198 
	`mem˝y
(&
év
->
év_vÆue
[0], &
tid
,Ålv->
év_Àn
);

199 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

201 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

202 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_SESSION_ID
;

203 
év
->
év_Àn
 = (
sid
);

204 
	`mem˝y
(&
év
->
év_vÆue
[0], &
sid
,Ålv->
év_Àn
);

205 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

207 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

208 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_PPP_STATE
;

209 
év
->
év_Àn
 = (
°©e
);

210 
	`mem˝y
(&
év
->
év_vÆue
[0], &
°©e
,Ålv->
év_Àn
);

211 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

213 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

214 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_PPP_UNIT
;

215 
év
->
év_Àn
 = (
unô
);

216 
	`mem˝y
(&
év
->
év_vÆue
[0], &
unô
,Ålv->
év_Àn
);

217 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

219 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

220 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_PPP_IFNAME
;

221 
év
->
év_Àn
 = 
	`°æí
(
i‚ame
) + 1;

222 
	`mem˝y
(&
év
->
év_vÆue
[0], 
i‚ame
,Ålv->
év_Àn
);

223 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

225 i‡(
u£r_«me
 !
NULL
) {

226 
év
 = (*Ë&
msg
->
msg_d©a
[msg->
msg_Àn
];

227 
év
->
év_ty≥
 = 
OPENL2TP_TLV_TYPE_PPP_USER_NAME
;

228 
év
->
év_Àn
 = 
	`°æí
(
u£r_«me
) + 1;

229 
	`mem˝y
(&
év
->
év_vÆue
[0], 
u£r_«me
,Ålv->
év_Àn
);

230 
msg
->
msg_Àn
 +(*
év
Ë+ 
	`ALIGN32
—lv->
év_Àn
);

233 
ªsu…
 = 
	`£nd
(
›íl2ç_fd
, 
msg
, (*msgË+ msg->
msg_Àn
,

234 
MSG_NOSIGNAL
);

235 i‡(
ªsu…
 < 0) {

236 
	`îr‹
("openl2tp send: %m");

238 i‡(
ªsu…
 !((*
msg
Ë+ msg->
msg_Àn
)) {

239 
	`w¨n
("openl2tp send: unexpected byte count %d,Éxpected %d",

240 
ªsu…
, (
msg
Ë+ msg->
msg_Àn
);

242 
	`dbglog
("›íl2ç síd: síàPPP_UPDOWN_IND, %d byãs", 
ªsu…
);

244 
out
:

245 i‡(
ﬁd_µpﬁ2ç_ù_updown_hook
 !
NULL
) {

246 (*
ﬁd_µpﬁ2ç_ù_updown_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
, 
up
);

249 i‡(
u£r_«me
 !
NULL
)

250 
	`‰ì
(
u£r_«me
);

253 
	}
}

273 
	$›íl2ç_mu…ûök_joö_öd
()

275 i‡(
doög_mu…ûök
 && !
mu…ûök_ma°î
) {

277 
	`›íl2ç_µp_updown_öd
(
µpﬁ2ç_tu¬ñ_id
,

278 
µpﬁ2ç_£ssi⁄_id
, 1);

280 
	}
}

286 
	$∂ugö_öô
()

288 
ﬁd_µpﬁ2ç_£nd_accm_hook
 = 
µpﬁ2ç_£nd_accm_hook
;

289 
µpﬁ2ç_£nd_accm_hook
 = 
›íl2ç_£nd_accm_öd
;

291 
ﬁd_µpﬁ2ç_ù_updown_hook
 = 
µpﬁ2ç_ù_updown_hook
;

292 
µpﬁ2ç_ù_updown_hook
 = 
›íl2ç_µp_updown_öd
;

294 
ﬁd_mu…ûök_joö_hook
 = 
mu…ûök_joö_hook
;

295 
mu…ûök_joö_hook
 = 
›íl2ç_mu…ûök_joö_öd
;

296 
	}
}

	@pppd/plugins/pppol2tp/pppol2tp.c

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<î∫o.h
>

27 
	~"µpd.h
"

28 
	~"∑th«mes.h
"

29 
	~"fsm.h
"

30 
	~"l˝.h
"

31 
	~"c˝.h
"

32 
	~"ù˝.h
"

33 
	~<sys/°©.h
>

34 
	~<√t/if.h
>

35 
	~<sys/io˘l.h
>

36 
	~<sys/sockë.h
>

37 
	~<√töë/ö.h
>

38 
	~<sig«l.h
>

39 
	~<löux/vîsi⁄.h
>

40 
	~<löux/sockios.h
>

41 #i‚de‡
Æig√d_u64


43 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	~<löux/ty≥s.h
>

46 
	~<löux/if_ëhî.h
>

47 
	~<löux/µp_defs.h
>

48 
	~<löux/if_µp.h
>

49 
	~<löux/if_µpox.h
>

50 
	~<löux/if_µpﬁ2ç.h
>

53 #i‚de‡
SOL_PPPOL2TP


54 
	#SOL_PPPOL2TP
 273

	)

57 c⁄° 
	gµpd_vîsi⁄
[] = 
VERSION
;

59 
£tdev«me_µpﬁ2ç
(**
¨gv
);

61 
	gµpﬁ2ç_fd
 = -1;

62 *
	gµpﬁ2ç_fd_°r
;

63 
boﬁ
 
	gµpﬁ2ç_ s_mode
 = 0;

64 
boﬁ
 
	gµpﬁ2ç_ªcv_£q
 = 0;

65 
boﬁ
 
	gµpﬁ2ç_£nd_£q
 = 0;

66 
	gµpﬁ2ç_debug_mask
 = 0;

67 
	gµpﬁ2ç_ª‹dî_timeout
 = 0;

68 
	gµpﬁ2ç_i‚ame
[32] = { 0, };

69 
	gµpﬁ2ç_tu¬ñ_id
 = 0;

70 
	gµpﬁ2ç_£ssi⁄_id
 = 0;

72 
	gdevi˚_gŸ_£t
 = 0;

73 
ch™√l
 
	gµpﬁ2ç_ch™√l
;

75 (*
ﬁd_¢o›_ªcv_hook
)(*
p
, 
Àn
Ë
NULL
;

76 (*
ﬁd_¢o›_£nd_hook
)(*
p
, 
Àn
Ë
NULL
;

79 (*
µpﬁ2ç_£nd_accm_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
,

80 
uöt32_t
 
£nd_accm
, uöt32_à
ªcv_accm
Ë
NULL
;

83 (*
µpﬁ2ç_ù_updown_hook
)(
tu¬ñ_id
, 
£ssi⁄_id
, 
up
Ë
NULL
;

85 
›ti⁄_t
 
µpﬁ2ç_›ti⁄s
[] = {

86 { "µpﬁ2ç", 
o_•ecül
, &
£tdev«me_µpﬁ2ç
,

87 "FD f‹ PPPoL2TP sockë", 
OPT_DEVNAM
 | 
OPT_A2STRVAL
,

88 &
µpﬁ2ç_fd_°r
 },

89 { "µpﬁ2ç_ s_mode", 
o_boﬁ
, &
µpﬁ2ç_ s_mode
,

91 
OPT_PRIO
 | 
OPRIO_CFGFILE
 },

92 { "µpﬁ2ç_£nd_£q", 
o_boﬁ
, &
µpﬁ2ç_£nd_£q
,

95 
OPT_PRIO
 | 
OPRIO_CFGFILE
 },

96 { "µpﬁ2ç_ªcv_£q", 
o_boﬁ
, &
µpﬁ2ç_ªcv_£q
,

99 
OPT_PRIO
 | 
OPRIO_CFGFILE
 },

100 { "µpﬁ2ç_ª‹dîto", 
o_öt
, &
µpﬁ2ç_ª‹dî_timeout
,

102 
OPT_PRIO
 },

103 { "µpﬁ2ç_debug_mask", 
o_öt
, &
µpﬁ2ç_debug_mask
,

105 
OPT_PRIO
 },

106 { "µpﬁ2ç_i‚ame", 
o_°rög
, &
µpﬁ2ç_i‚ame
,

108 
OPT_PRIO
 | 
OPT_PRIV
 | 
OPT_STATIC
, 
NULL
, 16 },

109 { "µpﬁ2ç_tu¬ñ_id", 
o_öt
, &
µpﬁ2ç_tu¬ñ_id
,

111 
OPT_PRIO
 },

112 { "µpﬁ2ç_£ssi⁄_id", 
o_öt
, &
µpﬁ2ç_£ssi⁄_id
,

114 
OPT_PRIO
 },

115 { 
NULL
 }

116 
	}
};

118 
	$£tdev«me_µpﬁ2ç
(**
¨gv
)

121 
buf„r
[128];

122 
sockaddr
 
µpﬁ2ç
;

123 } 
s
;

124 
Àn
 = (
s
);

125 **
a
;

126 
tmp
;

127 
tmp_Àn
 = (
tmp
);

129 i‡(
devi˚_gŸ_£t
)

132 i‡(!
	`öt_›ti⁄
(*
¨gv
, &
µpﬁ2ç_fd
))

135 if(
	`gësock«me
(
µpﬁ2ç_fd
, (
sockaddr
 *)&
s
, &
Àn
) < 0) {

136 
	`Áèl
("Given FD for PPPoL2TP socket invalid (%s)",

137 
	`°ªº‹
(
î∫o
));

139 if(
s
.
µpﬁ2ç
.
ß_Ámûy
 !
AF_PPPOX
) {

140 
	`Áèl
("Socket ofÇotá PPPoX socket");

146 i‡(
	`gësock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_DEBUG
,

147 &
tmp
, &
tmp_Àn
) < 0) {

148 
	`Áèl
("PPPoL2TP kernel driverÇot installed");

151 
µpﬁ2ç_fd_°r
 = 
	`°rdup
(*
¨gv
);

152 i‡(
µpﬁ2ç_fd_°r
 =
NULL
)

153 
	`novm
("PPPoL2TP FD");

157 
modem
 = 0;

159 
l˝_Ælow›ti⁄s
[0].
√g_accom¥essi⁄
 = 1;

160 
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
 = 0;

162 
l˝_Ælow›ti⁄s
[0].
√g_pcom¥essi⁄
 = 1;

163 
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
 = 0;

165 
c˝_Ælow›ti⁄s
[0].
deÊ©e
 = 0;

166 
c˝_w™t›ti⁄s
[0].
deÊ©e
 = 0;

168 
ù˝_Ælow›ti⁄s
[0].
√g_vj
 = 0;

169 
ù˝_w™t›ti⁄s
[0].
√g_vj
 = 0;

171 
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 = 0;

172 
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
 = 0;

174 
the_ch™√l
 = &
µpﬁ2ç_ch™√l
;

175 
devi˚_gŸ_£t
 = 1;

178 
	}
}

180 
	$c⁄√˘_µpﬁ2ç
()

182 if(
µpﬁ2ç_fd
 == -1) {

183 
	`Áèl
("No PPPoL2TP FD specified");

186  
µpﬁ2ç_fd
;

187 
	}
}

189 
	$disc⁄√˘_µpﬁ2ç
()

191 i‡(
µpﬁ2ç_fd
 >= 0) {

192 
	`˛o£
(
µpﬁ2ç_fd
);

193 
µpﬁ2ç_fd
 = -1;

195 
	}
}

197 
	$£nd_c⁄fig_µpﬁ2ç
(
mtu
,

198 
u_öt32_t
 
asyncm≠
,

199 
pcomp
,

200 
accomp
)

202 
i‰eq
 
i‰
;

203 
⁄
 = 1;

204 
fd
;

205 
ª‹dîto
[16];

206 
tid
[8];

207 
sid
[8];

209 i‡(
µpﬁ2ç_i‚ame
[0]) {

210 
i‰eq
 
i‰
;

211 
fd
;

213 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

214 i‡(
fd
 >= 0) {

215 
	`mem£t
 (&
i‰
, '\0',  (ifr));

216 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

217 
	`°æ˝y
(
i‰
.
i‰_√w«me
, 
µpﬁ2ç_i‚ame
,

218 (
i‰
.
i‰_«me
));

219 
	`io˘l
(
fd
, 
SIOCSIFNAME
, (
ˇddr_t
Ë&
i‰
);

220 
	`°æ˝y
(
i‚ame
, 
µpﬁ2ç_i‚ame
, 32);

221 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_CONTROL
) {

222 
	`dbglog
("ppp%d: interfaceÇame %s",

223 
ifunô
, 
i‚ame
);

226 
	`˛o£
(
fd
);

229 i‡((
l˝_Ælow›ti⁄s
[0].
mru
 > 0Ë&& (
mtu
 >Ücp_allowoptions[0].mru)) {

230 
	`w¨n
("Ovîridög mtu %dÅÿ%d", 
mtu
, 
l˝_Ælow›ti⁄s
[0].
mru
);

231 
mtu
 = 
l˝_Ælow›ti⁄s
[0].
mru
;

233 
	`√tif_£t_mtu
(
ifunô
, 
mtu
);

235 
ª‹dîto
[0] = '\0';

236 i‡(
µpﬁ2ç_ª‹dî_timeout
 > 0)

237 
	`•rötf
(&
ª‹dîto
[0], "%d ", 
µpﬁ2ç_ª‹dî_timeout
);

238 
tid
[0] = '\0';

239 i‡(
µpﬁ2ç_tu¬ñ_id
 > 0)

240 
	`•rötf
(&
tid
[0], "%hu ", 
µpﬁ2ç_tu¬ñ_id
);

241 
sid
[0] = '\0';

242 i‡(
µpﬁ2ç_£ssi⁄_id
 > 0)

243 
	`•rötf
(&
sid
[0], "%hu ", 
µpﬁ2ç_£ssi⁄_id
);

245 
	`dbglog
("PPPoL2TP options: %s%s%s%s%s%s%s%s%sdebugmask %d",

246 
µpﬁ2ç_ªcv_£q
 ? "recvseq " : "",

247 
µpﬁ2ç_£nd_£q
 ? "sendseq " : "",

248 
µpﬁ2ç_ s_mode
 ? "lnsmode " : "",

249 
µpﬁ2ç_ª‹dî_timeout
 ? "ª‹dîtÿ" : "", 
ª‹dîto
,

250 
µpﬁ2ç_tu¬ñ_id
 ? "tid " : "", 
tid
,

251 
µpﬁ2ç_£ssi⁄_id
 ? "sid " : "", 
sid
,

252 
µpﬁ2ç_debug_mask
);

254 i‡(
µpﬁ2ç_ªcv_£q
)

255 i‡(
	`£tsock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_RECVSEQ
,

256 &
⁄
, (on)) < 0)

257 
	`Áèl
("setsockopt(PPPOL2TP_RECVSEQ): %m");

258 i‡(
µpﬁ2ç_£nd_£q
)

259 i‡(
	`£tsock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_SENDSEQ
,

260 &
⁄
, (on)) < 0)

261 
	`Áèl
("setsockopt(PPPOL2TP_SENDSEQ): %m");

262 i‡(
µpﬁ2ç_ s_mode
)

263 i‡(
	`£tsock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_LNSMODE
,

264 &
⁄
, (on)) < 0)

265 
	`Áèl
("setsockopt(PPPOL2TP_LNSMODE): %m");

266 i‡(
µpﬁ2ç_ª‹dî_timeout
)

267 i‡(
	`£tsock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_REORDERTO
,

268 &
µpﬁ2ç_ª‹dî_timeout
,

269 (
µpﬁ2ç_ª‹dî_timeout
)) < 0)

270 
	`Áèl
("setsockopt(PPPOL2TP_REORDERTO): %m");

271 i‡(
µpﬁ2ç_debug_mask
)

272 i‡(
	`£tsock›t
(
µpﬁ2ç_fd
, 
SOL_PPPOL2TP
, 
PPPOL2TP_SO_DEBUG
,

273 &
µpﬁ2ç_debug_mask
, (pppol2tp_debug_mask)) < 0)

274 
	`Áèl
("setsockopt(PPPOL2TP_DEBUG): %m");

275 
	}
}

277 
	$ªcv_c⁄fig_µpﬁ2ç
(
mru
,

278 
u_öt32_t
 
asyncm≠
,

279 
pcomp
,

280 
accomp
)

282 i‡((
l˝_Ælow›ti⁄s
[0].
mru
 > 0) && (mru >Ücp_allowoptions[0].mru)) {

283 
	`w¨n
("Ovîridög mru %dÅÿmtu vÆuê%d", 
mru
,

284 
l˝_Ælow›ti⁄s
[0].
mru
);

285 
mru
 = 
l˝_Ælow›ti⁄s
[0].mru;

287 i‡((
ifunô
 >0Ë&& 
	`io˘l
(
µpﬁ2ç_fd
, 
PPPIOCSMRU
, (
ˇddr_t
Ë&
mru
) < 0)

288 
	`îr‹
("Couldn't set PPP MRU: %m");

289 
	}
}

298 
	$µpﬁ2ç_l˝_¢o›
(*
buf
, 
Àn
, 
öcomög
)

300 
boﬁ
 
gŸ_£nd_accm
 = 0;

301 
boﬁ
 
gŸ_ªcv_accm
 = 0;

302 
uöt32_t
 
ªcv_accm
 = 0xffffffff;

303 
uöt32_t
 
£nd_accm
 = 0xffffffff;

304 
boﬁ
 
¢o›ög
 = 1;

306 
uöt16_t
 
¥Ÿocﬁ
;

307 
uöt16_t
 
l˝_pkt_Àn
;

308 
›t
, 
›t_Àn
;

309 
ªje˘
;

310 c⁄° *
›t_d©a
;

311 
uöt32_t
 
accm
;

314 
buf
 += 2;

315 
Àn
 -= 2;

318 i‡(
Àn
 <= 0) ;

321 i‡(
buf
[0] & 0x01) {

323 
¥Ÿocﬁ
 = 
buf
[0];

325 
¥Ÿocﬁ
 = ((Ë
buf
[0]) * 256 + buf[1];

329 i‡(
¥Ÿocﬁ
 <= 0x3fff) {

330 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_DEBUG
) {

331 
	`dbglog
("Turning off snooping: "

333 
¥Ÿocﬁ
);

335 
¢o›ög
 = 0;

340 i‡(
¥Ÿocﬁ
 != 0xc021) {

345 
buf
 += 2;

346 
Àn
 -= 2;

349 i‡(
Àn
 <= 0) ;

352 i‡(
buf
[0] !
CONFACK
 && buf[0] !
CONFREJ
) ;

354 
ªje˘
 = (
buf
[0] =
CONFREJ
);

356 
l˝_pkt_Àn
 = ((Ë
buf
[2]) * 256 + buf[3];

359 i‡(
l˝_pkt_Àn
 > 
Àn
) ;

362 
Àn
 = 
l˝_pkt_Àn
 - 4;

363 
buf
 += 4;

365 
Àn
 > 0) {

367 
›t
 = 
buf
[0];

368 
›t_Àn
 = 
buf
[1];

369 
›t_d©a
 = &
buf
[2];

370 i‡(
›t_Àn
 > 
Àn
 || opt_len < 2) ;

371 
Àn
 -
›t_Àn
;

372 
buf
 +
›t_Àn
;

373 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_DEBUG
) {

374 
	`dbglog
("Found o±i⁄Åy≥ %02x;Üí %d", 
›t
, 
›t_Àn
);

378 i‡(
›t
 =
CI_ASYNCMAP
 && 
›t_Àn
 == 0x06) {

379 i‡(
ªje˘
) {

381 
accm
 = 0xffffffff;

382 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_DATA
) {

383 
	`dbglog
("Rejected ACCMÇegotiation; "

385 
öcomög
 ? "incoming" : "outgoing");

387 
ªcv_accm
 = 
accm
;

388 
£nd_accm
 = 
accm
;

389 
gŸ_ªcv_accm
 = 1;

390 
gŸ_£nd_accm
 = 1;

392 
	`mem˝y
(&
accm
, 
›t_d©a
, (accm));

393 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_DATA
) {

394 
	`dbglog
("Found ACCM o‡%08x (%s)", 
accm
,

395 
öcomög
 ? "incoming" : "outgoing");

397 i‡(
öcomög
) {

398 
ªcv_accm
 = 
accm
;

399 
gŸ_ªcv_accm
 = 1;

401 
£nd_accm
 = 
accm
;

402 
gŸ_£nd_accm
 = 1;

406 i‡(
gŸ_ªcv_accm
 && 
gŸ_£nd_accm
) {

407 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_CONTROL
) {

408 
	`dbglog
("Telling L2TP: Send ACCM = %08x; "

409 "Re˚ivêACCM = %08x", 
£nd_accm
, 
ªcv_accm
);

411 i‡(
µpﬁ2ç_£nd_accm_hook
 !
NULL
) {

412 (*
µpﬁ2ç_£nd_accm_hook
)(
µpﬁ2ç_tu¬ñ_id
,

413 
µpﬁ2ç_£ssi⁄_id
,

414 
£nd_accm
, 
ªcv_accm
);

416 
gŸ_ªcv_accm
 = 0;

417 
gŸ_£nd_accm
 = 0;

421 
	}
}

423 
	$µpﬁ2ç_l˝_¢o›_ªcv
(*
p
, 
Àn
)

425 i‡(
ﬁd_¢o›_ªcv_hook
 !
NULL
)

426 (*
ﬁd_¢o›_ªcv_hook
)(
p
, 
Àn
);

427 
	`µpﬁ2ç_l˝_¢o›
(
p
, 
Àn
, 1);

428 
	}
}

430 
	$µpﬁ2ç_l˝_¢o›_£nd
(*
p
, 
Àn
)

432 i‡(
ﬁd_¢o›_£nd_hook
 !
NULL
)

433 (*
ﬁd_¢o›_£nd_hook
)(
p
, 
Àn
);

434 
	`µpﬁ2ç_l˝_¢o›
(
p
, 
Àn
, 0);

435 
	}
}

441 
	$µpﬁ2ç_ù_up
(*
›aque
, 
¨g
)

444 i‡(
µpﬁ2ç_ù_updown_hook
 !
NULL
) {

445 (*
µpﬁ2ç_ù_updown_hook
)(
µpﬁ2ç_tu¬ñ_id
,

446 
µpﬁ2ç_£ssi⁄_id
, 1);

448 
	}
}

450 
	$µpﬁ2ç_ù_down
(*
›aque
, 
¨g
)

453 i‡(
µpﬁ2ç_ù_updown_hook
 !
NULL
) {

454 (*
µpﬁ2ç_ù_updown_hook
)(
µpﬁ2ç_tu¬ñ_id
,

455 
µpﬁ2ç_£ssi⁄_id
, 0);

457 
	}
}

463 
	$µpﬁ2ç_check_›ti⁄s
()

466 i‡(
µpﬁ2ç_ s_mode
) {

467 i‡((
µpﬁ2ç_tu¬ñ_id
 =0Ë|| (
µpﬁ2ç_£ssi⁄_id
 == 0)) {

468 
	`Áèl
("tunnel_id/session_id valuesÇot specified");

470 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_CONTROL
) {

471 
	`dbglog
("Enabling LCP snooping");

473 
ﬁd_¢o›_ªcv_hook
 = 
¢o›_ªcv_hook
;

474 
ﬁd_¢o›_£nd_hook
 = 
¢o›_£nd_hook
;

476 
¢o›_ªcv_hook
 = 
µpﬁ2ç_l˝_¢o›_ªcv
;

477 
¢o›_£nd_hook
 = 
µpﬁ2ç_l˝_¢o›_£nd
;

479 
	}
}

483 
	$µpﬁ2ç_˛ónup
()

485 i‡(
µpﬁ2ç_debug_mask
 & 
PPPOL2TP_MSG_DEBUG
) {

486 
	`dbglog
("pppol2tp:Éxiting.");

488 
	`disc⁄√˘_µpﬁ2ç
();

489 
	}
}

491 
	$∂ugö_öô
()

493 #i‡
	`deföed
(
__löux__
)

494 
√w_°yÀ_drivî
;

495 i‡(!
	`µp_avaûabÀ
(Ë&& !
√w_°yÀ_drivî
)

496 
	`Áèl
("Kernel doesn't supportÖpp_generic - "

499 
	`Áèl
("No PPPoL2TP support onÅhis OS");

501 
	`add_›ti⁄s
(
µpﬁ2ç_›ti⁄s
);

506 
	`add_nŸifõr
(&
ù_up_nŸifõr
, 
µpﬁ2ç_ù_up
, 
NULL
);

507 
	`add_nŸifõr
(&
ù_down_nŸifõr
, 
µpﬁ2ç_ù_down
, 
NULL
);

508 
	`add_nŸifõr
(&
ùv6_up_nŸifõr
, 
µpﬁ2ç_ù_up
, 
NULL
);

509 
	`add_nŸifõr
(&
ùv6_down_nŸifõr
, 
µpﬁ2ç_ù_down
, 
NULL
);

510 
	}
}

512 
ch™√l
 
	gµpﬁ2ç_ch™√l
 = {

513 
›ti⁄s
: 
µpﬁ2ç_›ti⁄s
,

514 
¥o˚ss_exåa_›ti⁄s
: 
NULL
,

515 
check_›ti⁄s
: &
µpﬁ2ç_check_›ti⁄s
,

516 
c⁄√˘
: &
c⁄√˘_µpﬁ2ç
,

517 
disc⁄√˘
: &
disc⁄√˘_µpﬁ2ç
,

518 
e°ablish_µp
: &
gíîic_e°ablish_µp
,

519 
di£°ablish_µp
: &
gíîic_di£°ablish_µp
,

520 
£nd_c⁄fig
: &
£nd_c⁄fig_µpﬁ2ç
,

521 
ªcv_c⁄fig
: &
ªcv_c⁄fig_µpﬁ2ç
,

522 
˛o£
: 
NULL
,

523 
˛ónup
: 
NULL


	@pppd/plugins/radius/avpair.c

17 
	~<ö˛udes.h
>

18 
	~<ødius˛õ¡.h
>

20 
rc_exåa˘_víd‹_•ecific_©åibuãs
(
©åÀn
,

21 *
±r
,

22 
VALUE_PAIR
 **
vp
);

34 
VALUE_PAIR
 *
	$rc_av∑ú_add
 (
VALUE_PAIR
 **
li°
, 
©åid
, *
pvÆ
, 
Àn
,

35 
víd‹code
)

37 
VALUE_PAIR
 *
vp
;

39 
vp
 = 
	`rc_av∑ú_√w
 (
©åid
, 
pvÆ
, 
Àn
, 
víd‹code
);

41 i‡(
vp
 !(
VALUE_PAIR
 *Ë
NULL
)

43 
	`rc_av∑ú_ö£π
 (
li°
, (
VALUE_PAIR
 *Ë
NULL
, 
vp
);

46  
vp
;

48 
	}
}

60 
	$rc_av∑ú_assign
 (
VALUE_PAIR
 *
vp
, *
pvÆ
, 
Àn
)

62 
ªsu…
 = -1;

64 
vp
->
ty≥
)

66 
PW_TYPE_STRING
:

68 i‡(((
Àn
 =0Ë&& (
	`°æí
 ((*Ë
pvÆ
)Ë> 
AUTH_STRING_LEN
)

69 || (
Àn
 > 
AUTH_STRING_LEN
)) {

70 
	`îr‹
("rc_avpair_assign: badáttributeÜength");

71  
ªsu…
;

74 i‡(
Àn
 > 0) {

75 
	`mem˝y
(
vp
->
°rvÆue
, (*)
pvÆ
, 
Àn
);

76 
vp
->
°rvÆue
[
Àn
] = '\0';

77 
vp
->
lvÆue
 = 
Àn
;

79 
	`°∫˝y
 (
vp
->
°rvÆue
, (*Ë
pvÆ
, 
AUTH_STRING_LEN
);

80 
vp
->
lvÆue
 = 
	`°æí
((*Ë
pvÆ
);

83 
ªsu…
 = 0;

86 
PW_TYPE_DATE
:

87 
PW_TYPE_INTEGER
:

88 
PW_TYPE_IPADDR
:

90 
vp
->
lvÆue
 = * (
UINT4
 *Ë
pvÆ
;

92 
ªsu…
 = 0;

96 
	`îr‹
("rc_av∑ú_assign: unknow¿©åibuã %d", 
vp
->
ty≥
);

98  
ªsu…
;

99 
	}
}

110 
VALUE_PAIR
 *
	$rc_av∑ú_√w
 (
©åid
, *
pvÆ
, 
Àn
, 
víd‹code
)

112 
VALUE_PAIR
 *
vp
 = (VALUE_PAIR *Ë
NULL
;

113 
DICT_ATTR
 *
pda
;

115 i‡((
pda
 = 
	`rc_di˘_gë©å
 (
©åid
, 
víd‹code
)Ë=(
DICT_ATTR
 *Ë
NULL
)

117 
	`îr‹
("rc_av∑ú_√w: unknow¿©åibuã %d", 
©åid
);

121 i‡((
vp
 = (
VALUE_PAIR
 *Ë
	`mÆloc
 ( (VALUE_PAIR)))

122 !(
VALUE_PAIR
 *Ë
NULL
)

124 
	`°æ˝y
 (
vp
->
«me
, 
pda
->«me, 
NAME_LENGTH
);

125 
vp
->
©åibuã
 = 
©åid
;

126 
vp
->
víd‹code
 = vendorcode;

127 
vp
->
√xt
 = (
VALUE_PAIR
 *Ë
NULL
;

128 
vp
->
ty≥
 = 
pda
->type;

129 i‡(
	`rc_av∑ú_assign
 (
vp
, 
pvÆ
, 
Àn
) == 0)

131  
vp
;

133 
	`‰ì
 (
vp
);

134 
vp
 = (
VALUE_PAIR
 *Ë
NULL
;

137 
	`novm
("rc_avpair_new");

139  
vp
;

140 
	}
}

152 
VALUE_PAIR
 *
	$rc_av∑ú_gí
 (
AUTH_HDR
 *
auth
)

154 
Àngth
;

155 
x_Àn
;

156 
©åibuã
;

157 
©åÀn
;

158 
UINT4
 
lvÆue
;

159 *
x_±r
;

160 *
±r
;

161 
DICT_ATTR
 *
©å
;

162 
VALUE_PAIR
 *
vp
;

163 
VALUE_PAIR
 *
∑ú
;

164 
hex
[3];

165 
buf„r
[512];

170 
±r
 = 
auth
->
d©a
;

171 
Àngth
 = 
	`¡ohs
 ((Ë
auth
->ÀngthË- 
AUTH_HDR_LEN
;

172 
vp
 = (
VALUE_PAIR
 *Ë
NULL
;

174 
Àngth
 > 0)

176 
©åibuã
 = *
±r
++;

177 
©åÀn
 = *
±r
++;

178 
©åÀn
 -= 2;

179 i‡(
©åÀn
 < 0)

181 
	`îr‹
("rc_avpair_gen:Ñeceivedáttribute with invalidÜength");

186 i‡(
©åibuã
 =
PW_VENDOR_SPECIFIC
) {

187 
	`rc_exåa˘_víd‹_•ecific_©åibuãs
(
©åÀn
, 
±r
, &
vp
);

188 
±r
 +
©åÀn
;

189 
Àngth
 -(
©åÀn
 + 2);

192 i‡((
©å
 = 
	`rc_di˘_gë©å
 (
©åibuã
, 
VENDOR_NONE
)Ë=(
DICT_ATTR
 *Ë
NULL
)

194 *
buf„r
= '\0';

195 
x_±r
 = 
±r
, 
x_Àn
 = 
©åÀn
 ;

196 
x_Àn
 > 0 ;

197 
x_Àn
--, 
x_±r
++)

199 
	`•rötf
 (
hex
, "%2.2X", *
x_±r
);

200 
	`°rˇt
 (
buf„r
, 
hex
);

202 
	`w¨n
("rc_avpair_gen:Ñeceived unknownáttribute %d ofÜength %d: 0x%s",

203 
©åibuã
, 
©åÀn
, 
buf„r
);

207 i‡((
∑ú
 =

208 (
VALUE_PAIR
 *Ë
	`mÆloc
 ( (VALUE_PAIR))) ==

209 (
VALUE_PAIR
 *Ë
NULL
)

211 
	`novm
("rc_avpair_gen");

212 
	`rc_av∑ú_‰ì
(
vp
);

213  
NULL
;

215 
	`°r˝y
 (
∑ú
->
«me
, 
©å
->name);

216 
∑ú
->
©åibuã
 = 
©å
->
vÆue
;

217 
∑ú
->
víd‹code
 = 
VENDOR_NONE
;

218 
∑ú
->
ty≥
 = 
©å
->type;

219 
∑ú
->
√xt
 = (
VALUE_PAIR
 *Ë
NULL
;

221 
©å
->
ty≥
)

224 
PW_TYPE_STRING
:

225 
	`mem˝y
 (
∑ú
->
°rvÆue
, (*Ë
±r
, (
size_t
Ë
©åÀn
);

226 
∑ú
->
°rvÆue
[
©åÀn
] = '\0';

227 
∑ú
->
lvÆue
 = 
©åÀn
;

228 
	`rc_av∑ú_ö£π
 (&
vp
, (
VALUE_PAIR
 *Ë
NULL
, 
∑ú
);

231 
PW_TYPE_INTEGER
:

232 
PW_TYPE_IPADDR
:

233 
	`mem˝y
 ((*Ë&
lvÆue
, (*Ë
±r
,

234  (
UINT4
));

235 
∑ú
->
lvÆue
 = 
	`¡ohl
 (lvalue);

236 
	`rc_av∑ú_ö£π
 (&
vp
, (
VALUE_PAIR
 *Ë
NULL
, 
∑ú
);

240 
	`w¨n
("rc_av∑ú_gí: %†ha†unknow¿ty≥", 
©å
->
«me
);

241 
	`‰ì
 (
∑ú
);

246 
±r
 +
©åÀn
;

247 
Àngth
 -
©åÀn
 + 2;

249  (
vp
);

250 
	}
}

261 
	$rc_exåa˘_víd‹_•ecific_©åibuãs
(
©åÀn
,

262 *
±r
,

263 
VALUE_PAIR
 **
vp
)

265 
víd‹_id
;

266 
vty≥
;

267 
vÀn
;

268 
UINT4
 
lvÆue
;

269 
DICT_ATTR
 *
©å
;

270 
VALUE_PAIR
 *
∑ú
;

273 i‡(
©åÀn
 < 8) {

279 i‡(*
±r
) {

284 
víd‹_id
 = () (

285 ((Ë
±r
[1]) * 256 * 256 +

286 ((Ë
±r
[2]) * 256 +

287 ((Ë
±r
[3]));

289 
±r
 += 4;

292 
©åÀn
 -= 4;

293 ; 
©åÀn
;áâæí -
vÀn
+2, 
±r
 += vlen) {

294 
vty≥
 = *
±r
++;

295 
vÀn
 = *
±r
++;

296 
vÀn
 -= 2;

297 i‡(
vÀn
 < 0 || vÀ¿> 
©åÀn
 - 2) {

303 i‡((
©å
 = 
	`rc_di˘_gë©å
(
vty≥
, 
víd‹_id
)Ë=
NULL
) {

308 
∑ú
 = (
VALUE_PAIR
 *Ë
	`mÆloc
((VALUE_PAIR));

309 i‡(!
∑ú
) {

310 
	`novm
("rc_avpair_gen");

313 
	`°r˝y
(
∑ú
->
«me
, 
©å
->name);

314 
∑ú
->
©åibuã
 = 
©å
->
vÆue
;

315 
∑ú
->
víd‹code
 = 
víd‹_id
;

316 
∑ú
->
ty≥
 = 
©å
->type;

317 
∑ú
->
√xt
 = 
NULL
;

318 
©å
->
ty≥
) {

319 
PW_TYPE_STRING
:

320 
	`mem˝y
 (
∑ú
->
°rvÆue
, (*Ë
±r
, (
size_t
Ë
vÀn
);

321 
∑ú
->
°rvÆue
[
vÀn
] = '\0';

322 
∑ú
->
lvÆue
 = 
vÀn
;

323 
	`rc_av∑ú_ö£π
 (
vp
, (
VALUE_PAIR
 *Ë
NULL
, 
∑ú
);

326 
PW_TYPE_INTEGER
:

327 
PW_TYPE_IPADDR
:

328 
	`mem˝y
 ((*Ë&
lvÆue
, (*Ë
±r
,

329  (
UINT4
));

330 
∑ú
->
lvÆue
 = 
	`¡ohl
 (lvalue);

331 
	`rc_av∑ú_ö£π
 (
vp
, (
VALUE_PAIR
 *Ë
NULL
, 
∑ú
);

335 
	`w¨n
("rc_av∑ú_gí: %†ha†unknow¿ty≥", 
©å
->
«me
);

336 
	`‰ì
 (
∑ú
);

340 
	}
}

352 
VALUE_PAIR
 *
	$rc_av∑ú_gë
 (
VALUE_PAIR
 *
vp
, 
UINT4
 
©å
)

354 ; 
vp
 !(
VALUE_PAIR
 *Ë
NULL
 && vp->
©åibuã
 !
©å
; v∞vp->
√xt
)

358  (
vp
);

359 
	}
}

367 
VALUE_PAIR
 *
	$rc_av∑ú_c›y
(
VALUE_PAIR
 *
p
)

369 
VALUE_PAIR
 *
vp
, *
Â
 = 
NULL
, *
Õ
 = NULL;

371 
p
) {

372 
vp
 = 
	`mÆloc
((
VALUE_PAIR
));

373 i‡(!
vp
) {

374 
	`novm
("rc_avpair_copy");

375  
NULL
;

377 *
vp
 = *
p
;

378 i‡(!
Â
)

379 
Â
 = 
vp
;

380 i‡(
Õ
)

381 
Õ
->
√xt
 = 
vp
;

382 
Õ
 = 
vp
;

383 
p
 =Ö->
√xt
;

386  
Â
;

387 
	}
}

399 
	$rc_av∑ú_ö£π
 (
VALUE_PAIR
 **
a
, VALUE_PAIR *
p
, VALUE_PAIR *
b
)

401 
VALUE_PAIR
 *
this_node
 = 
NULL
;

402 
VALUE_PAIR
 *
vp
;

404 i‡(*
a
 =(
VALUE_PAIR
 *Ë
NULL
)

406 *
a
 = 
b
;

410 i‡(!
b
)

413 
vp
 = *
a
;

415 i‡–
p
 =(
VALUE_PAIR
 *Ë
NULL
)

417 
vp
 !(
VALUE_PAIR
 *Ë
NULL
)

419 
this_node
 = 
vp
;

420 
vp
 = vp->
√xt
;

425 
this_node
 = *
a
;

426 
this_node
 !(
VALUE_PAIR
 *Ë
NULL
)

428 i‡(
this_node
 =
p
)

432 
this_node
 =Åhis_node->
√xt
;

437 
vp
 = 
this_node
->
√xt
;

438 
this_node
->
√xt
 = 
b
;

441 
b
->
√xt
)

442 
b
 = b->
√xt
;

443 
b
->
√xt
 = 
vp
;

446 
	}
}

455 
	$rc_av∑ú_‰ì
 (
VALUE_PAIR
 *
∑ú
)

457 
VALUE_PAIR
 *
√xt
;

459 
∑ú
 !(
VALUE_PAIR
 *Ë
NULL
)

461 
√xt
 = 
∑ú
->next;

462 
	`‰ì
 (
∑ú
);

463 
∑ú
 = 
√xt
;

465 
	}
}

475 
	$rc_fõld˝y
 (*
°rög
, **
u±r
)

477 *
±r
;

479 
±r
 = *
u±r
;

480 i‡(*
±r
 == '"')

482 
±r
++;

483 *
±r
 != '"' && *ptr != '\0' && *ptr != '\n')

485 *
°rög
++ = *
±r
++;

487 *
°rög
 = '\0';

488 i‡(*
±r
 == '"')

490 
±r
++;

492 *
u±r
 = 
±r
;

496 *
±r
 != ' ' && *ptr != '\t' && *ptr != '\0' && *ptr != '\n' &&

497 *
±r
 != '=' && *ptr != ',')

499 *
°rög
++ = *
±r
++;

501 *
°rög
 = '\0';

502 *
u±r
 = 
±r
;

504 
	}
}

517 
	#PARSE_MODE_NAME
 0

	)

518 
	#PARSE_MODE_EQUAL
 1

	)

519 
	#PARSE_MODE_VALUE
 2

	)

520 
	#PARSE_MODE_INVALID
 3

	)

522 
	$rc_av∑ú_∑r£
 (*
buf„r
, 
VALUE_PAIR
 **
fú°_∑ú
)

524 
mode
;

525 
©å°r
[
AUTH_ID_LEN
];

526 
vÆ°r
[
AUTH_ID_LEN
];

527 
DICT_ATTR
 *
©å
 = 
NULL
;

528 
DICT_VALUE
 *
dvÆ
;

529 
VALUE_PAIR
 *
∑ú
;

530 
VALUE_PAIR
 *
lök
;

531 
tm
 *tm;

532 
time_t
 
timevÆ
;

534 
mode
 = 
PARSE_MODE_NAME
;

535 *
buf„r
 != '\n' && *buffer != '\0')

537 i‡(*
buf„r
 == ' ' || *buffer == '\t')

539 
buf„r
++;

543 
mode
)

545 
PARSE_MODE_NAME
:

546 
	`rc_fõld˝y
 (
©å°r
, &
buf„r
);

547 i‡((
©å
 =

548 
	`rc_di˘_föd©å
 (
©å°r
)Ë=(
DICT_ATTR
 *Ë
NULL
)

550 
	`îr‹
("rc_avpair_parse: unknownáttribute");

551 i‡(*
fú°_∑ú
) {

552 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

553 *
fú°_∑ú
 = (
VALUE_PAIR
 *Ë
NULL
;

557 
mode
 = 
PARSE_MODE_EQUAL
;

560 
PARSE_MODE_EQUAL
:

561 i‡(*
buf„r
 == '=')

563 
mode
 = 
PARSE_MODE_VALUE
;

564 
buf„r
++;

568 
	`îr‹
("rc_avpair_parse: missing or misplacedÉqual sign");

569 i‡(*
fú°_∑ú
) {

570 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

571 *
fú°_∑ú
 = (
VALUE_PAIR
 *Ë
NULL
;

577 
PARSE_MODE_VALUE
:

578 
	`rc_fõld˝y
 (
vÆ°r
, &
buf„r
);

580 i‡((
∑ú
 =

581 (
VALUE_PAIR
 *Ë
	`mÆloc
 ( (VALUE_PAIR)))

582 =(
VALUE_PAIR
 *Ë
NULL
)

584 
	`novm
("rc_avpair_parse");

585 i‡(*
fú°_∑ú
) {

586 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

587 *
fú°_∑ú
 = (
VALUE_PAIR
 *Ë
NULL
;

591 
	`°r˝y
 (
∑ú
->
«me
, 
©å
->name);

592 
∑ú
->
©åibuã
 = 
©å
->
vÆue
;

593 
∑ú
->
ty≥
 = 
©å
->type;

594 
∑ú
->
víd‹code
 = 
©å
->vendorcode;

596 
∑ú
->
ty≥
)

599 
PW_TYPE_STRING
:

600 
	`°r˝y
 (
∑ú
->
°rvÆue
, 
vÆ°r
);

601 
∑ú
->
lvÆue
 = 
	`°æí
(
vÆ°r
);

604 
PW_TYPE_INTEGER
:

605 i‡(
	`isdigô
 (*
vÆ°r
))

607 
∑ú
->
lvÆue
 = 
	`©oi
 (
vÆ°r
);

611 i‡((
dvÆ
 = 
	`rc_di˘_födvÆ
 (
vÆ°r
))

612 =(
DICT_VALUE
 *Ë
NULL
)

614 
	`îr‹
("rc_av∑ú_∑r£: unknow¿©åibuã vÆue: %s", 
vÆ°r
);

615 i‡(*
fú°_∑ú
) {

616 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

617 *
fú°_∑ú
 = (
VALUE_PAIR
 *Ë
NULL
;

619 
	`‰ì
 (
∑ú
);

624 
∑ú
->
lvÆue
 = 
dvÆ
->
vÆue
;

629 
PW_TYPE_IPADDR
:

630 
∑ú
->
lvÆue
 = 
	`rc_gë_ùaddr
(
vÆ°r
);

633 
PW_TYPE_DATE
:

634 
timevÆ
 = 
	`time
 (0);

635 
tm
 = 
	`loˇ…ime
 (&
timevÆ
);

636 
tm
->
tm_hour
 = 0;

637 
tm
->
tm_mö
 = 0;

638 
tm
->
tm_£c
 = 0;

639 
	`rc_°r2tm
 (
vÆ°r
, 
tm
);

640 #ifde‡
TIMELOCAL


641 
∑ú
->
lvÆue
 = (
UINT4
Ë
	`timñoˇl
 (
tm
);

643 
∑ú
->
lvÆue
 = (
UINT4
Ë
	`mktime
 (
tm
);

648 
	`îr‹
("rc_av∑ú_∑r£: unknow¿©åibuãÅy≥ %d", 
∑ú
->
ty≥
);

649 i‡(*
fú°_∑ú
) {

650 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

651 *
fú°_∑ú
 = (
VALUE_PAIR
 *Ë
NULL
;

653 
	`‰ì
 (
∑ú
);

656 
∑ú
->
√xt
 = (
VALUE_PAIR
 *Ë
NULL
;

658 i‡(*
fú°_∑ú
 =(
VALUE_PAIR
 *Ë
NULL
)

660 *
fú°_∑ú
 = 
∑ú
;

664 
lök
 = *
fú°_∑ú
;

665 
lök
->
√xt
 !(
VALUE_PAIR
 *Ë
NULL
)

667 
lök
 =Üök->
√xt
;

669 
lök
->
√xt
 = 
∑ú
;

672 
mode
 = 
PARSE_MODE_NAME
;

676 
mode
 = 
PARSE_MODE_NAME
;

681 
	}
}

692 
	$rc_av∑ú_to°r
 (
VALUE_PAIR
 *
∑ú
, *
«me
, 
 
, *
vÆue
, 
lv
)

694 
DICT_VALUE
 *
dvÆ
;

695 
buf„r
[32];

696 
ö_addr
 
öad
;

697 *
±r
;

699 *
«me
 = *
vÆue
 = '\0';

701 i‡(!
∑ú
 ||Öaú->
«me
[0] == '\0') {

702 
	`îr‹
("rc_avpair_tostr:Öair is NULL orÉmpty");

706 
	`°∫˝y
(
«me
, 
∑ú
->«me, (
size_t
Ë
 
);

708 
∑ú
->
ty≥
)

710 
PW_TYPE_STRING
:

711 
lv
--;

712 
±r
 = (*Ë
∑ú
->
°rvÆue
;

713 *
±r
 != '\0')

715 i‡(!(
	`i•röt
 (*
±r
)))

717 
	`•rötf
 (
buf„r
, "\\%03o", *
±r
);

718 
	`°∫ˇt
(
vÆue
, 
buf„r
, (
size_t
Ë
lv
);

719 
lv
 -= 4;

720 i‡(
lv
 < 0) ;

724 
	`°∫ˇt
(
vÆue
, 
±r
, 1);

725 
lv
--;

726 i‡(
lv
 < 0) ;

728 
±r
++;

732 
PW_TYPE_INTEGER
:

733 
dvÆ
 = 
	`rc_di˘_gëvÆ
 (
∑ú
->
lvÆue
,Öaú->
«me
);

734 i‡(
dvÆ
 !(
DICT_VALUE
 *Ë
NULL
)

736 
	`°∫˝y
(
vÆue
, 
dvÆ
->
«me
, (
size_t
Ë
lv
-1);

740 
	`•rötf
 (
buf„r
, "%d", 
∑ú
->
lvÆue
);

741 
	`°∫˝y
(
vÆue
, 
buf„r
, (
size_t
Ë
lv
);

745 
PW_TYPE_IPADDR
:

746 
öad
.
s_addr
 = 
	`ht⁄l
(
∑ú
->
lvÆue
);

747 
	`°∫˝y
 (
vÆue
, 
	`öë_¡ﬂ
 (
öad
), (
size_t
Ë
lv
-1);

750 
PW_TYPE_DATE
:

751 
	`°r·ime
 (
buf„r
,  (buffer), "%m/%d/%y %H:%M:%S",

752 
	`gmtime
 ((
time_t
 *Ë& 
∑ú
->
lvÆue
));

753 
	`°∫˝y
(
vÆue
, 
buf„r
, 
lv
-1);

757 
	`îr‹
("rc_av∑ú_to°r: unknow¿©åibuãÅy≥ %d", 
∑ú
->
ty≥
);

763 
	}
}

773 
VALUE_PAIR
 *
	$rc_av∑ú_ªadö
(
FILE
 *
öput
)

775 
VALUE_PAIR
 *
vp
 = 
NULL
;

776 
buf„r
[1024], *
q
;

778 
	`fgës
(
buf„r
, (buf„r), 
öput
Ë!
NULL
)

780 
q
 = 
buf„r
;

782 *
q
 && 
	`is•a˚
(*q)) q++;

784 i‡((*
q
 == '\n') || (*q == '#') || (*q == '\0'))

787 i‡(
	`rc_av∑ú_∑r£
(
q
, &
vp
) < 0) {

788 
	`îr‹
("rc_av∑ú_ªadö: mÆf‹medáâribuã: %s", 
buf„r
);

789 
	`rc_av∑ú_‰ì
(
vp
);

790  
NULL
;

794  
vp
;

795 
	}
}

	@pppd/plugins/radius/buildreq.c

12 
	~<ö˛udes.h
>

13 
	~<ødius˛õ¡.h
>

15 
rc_gë_£qnbr
();

24 
	$rc_gë_«s_id
(
VALUE_PAIR
 **
£nd∑ús
)

26 
UINT4
 
˛õ¡_id
;

27 *
«sid
;

29 
«sid
 = 
	`rc_c⁄f_°r
("nas_identifier");

30 i‡(
	`°æí
(
«sid
)) {

34 i‡(
	`rc_av∑ú_add
(
£nd∑ús
, 
PW_NAS_IDENTIFIER
, 
«sid
, 0,

35 
VENDOR_NONE
Ë=
NULL
)

36  (
ERROR_RC
);

38  (
OK_RC
);

44 i‡((
˛õ¡_id
 = 
	`rc_own_ùaddªss
()) == 0)

45  (
ERROR_RC
);

47 i‡(
	`rc_av∑ú_add
(
£nd∑ús
, 
PW_NAS_IP_ADDRESS
, &
˛õ¡_id
,

48 0, 
VENDOR_NONE
Ë=
NULL
)

49  (
ERROR_RC
);

52  (
OK_RC
);

53 
	}
}

63 
	$rc_buûdªq
(
SEND_DATA
 *
d©a
, 
code
, *
£rvî
, 
p‹t
,

64 
timeout
, 
ªåõs
)

66 
d©a
->
£rvî
 = server;

67 
d©a
->
svc_p‹t
 = 
p‹t
;

68 
d©a
->
£q_nbr
 = 
	`rc_gë_£qnbr
();

69 
d©a
->
timeout
 =Åimeout;

70 
d©a
->
ªåõs
 =Ñetries;

71 
d©a
->
code
 = code;

72 
	}
}

81 
	$rc_guess_£qnbr
()

83  ()(
	`magic
(Ë& 
UCHAR_MAX
);

84 
	}
}

93 
	$rc_gë_£qnbr
()

95 
FILE
 *
sf
;

96 
åõs
 = 1;

97 
£q_nbr
, 
pos
;

98 *
£qfûe
 = 
	`rc_c⁄f_°r
("seqfile");

100 i‡((
sf
 = 
	`f›í
(
£qfûe
, "a+")Ë=
NULL
)

102 
	`îr‹
("rc_gë_£qnbr: couldn'à›í sequí˚ fûê%s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

104  
	`rc_guess_£qnbr
();

107 
	`do_lock_ex˛usive
(
	`fûío
(
sf
))!= 0)

109 i‡(
î∫o
 !
EWOULDBLOCK
) {

110 
	`îr‹
("rc_gë_£qnbr: flock faûuª: %s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

111 
	`f˛o£
(
sf
);

112  
	`rc_guess_£qnbr
();

114 
åõs
++;

115 i‡(
åõs
 <= 10)

116 
	`rc_mdñay
(500);

121 i‡(
åõs
 > 10) {

122 
	`îr‹
("rc_gë_£qnbr: couldn'àgëÜocká·î %dÅrõs: %s", 
åõs
-1, 
£qfûe
);

123 
	`f˛o£
(
sf
);

124  
	`rc_guess_£qnbr
();

127 
pos
 = 
	`·ñl
(
sf
);

128 
	`ªwöd
(
sf
);

129 i‡(
	`fsˇnf
(
sf
, "%d", &
£q_nbr
) != 1) {

130 i‡(
pos
 !
	`·ñl
(
sf
)) {

132 
	`îr‹
("rc_gë_£qnbr: fsˇn‡Áûuª: %s", 
£qfûe
);

134 
£q_nbr
 = 
	`rc_guess_£qnbr
();

137 
	`ªwöd
(
sf
);

138 
	`·runˇã
(
	`fûío
(
sf
),0);

139 
	`Ârötf
(
sf
,"%d\n", (
£q_nbr
+1Ë& 
UCHAR_MAX
);

141 
	`fÊush
(
sf
);

143 i‡(
	`do_u∆ock
(
	`fûío
(
sf
)) != 0)

144 
	`îr‹
("rc_gë_£qnbr: couldn'àªÀa£Üock o¿%s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

146 
	`f˛o£
(
sf
);

148  ()
£q_nbr
;

149 
	}
}

162 
	$rc_auth
(
UINT4
 
˛õ¡_p‹t
, 
VALUE_PAIR
 *
£nd
, VALUE_PAIR **
ª˚ived
,

163 *
msg
, 
REQUEST_INFO
 *
öfo
)

165 
SERVER
 *
auth£rvî
 = 
	`rc_c⁄f_§v
("authserver");

167 i‡(!
auth£rvî
) {

168  (
ERROR_RC
);

170  
	`rc_auth_usög_£rvî
(
auth£rvî
, 
˛õ¡_p‹t
, 
£nd
, 
ª˚ived
,

171 
msg
, 
öfo
);

172 
	}
}

186 
	$rc_auth_usög_£rvî
(
SERVER
 *
auth£rvî
,

187 
UINT4
 
˛õ¡_p‹t
,

188 
VALUE_PAIR
 *
£nd
,

189 
VALUE_PAIR
 **
ª˚ived
,

190 *
msg
, 
REQUEST_INFO
 *
öfo
)

192 
SEND_DATA
 
d©a
;

193 
ªsu…
;

194 
i
;

195 
timeout
 = 
	`rc_c⁄f_öt
("radius_timeout");

196 
ªåõs
 = 
	`rc_c⁄f_öt
("radius_retries");

198 
d©a
.
£nd_∑ús
 = 
£nd
;

199 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

205 i‡(
	`rc_gë_«s_id
(&(
d©a
.
£nd_∑ús
)Ë=
ERROR_RC
)

206  (
ERROR_RC
);

212 i‡(
	`rc_av∑ú_add
(&(
d©a
.
£nd_∑ús
), 
PW_NAS_PORT
, &
˛õ¡_p‹t
, 0, 
VENDOR_NONE
Ë=
NULL
)

213  (
ERROR_RC
);

215 
ªsu…
 = 
ERROR_RC
;

216 
i
=0; (i<
auth£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

217 ; 
i
++)

219 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

220 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

221 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

223 
	`rc_buûdªq
(&
d©a
, 
PW_ACCESS_REQUEST
, 
auth£rvî
->
«me
[
i
],

224 
auth£rvî
->
p‹t
[
i
], 
timeout
, 
ªåõs
);

226 
ªsu…
 = 
	`rc_£nd_£rvî
 (&
d©a
, 
msg
, 
öfo
);

229 *
ª˚ived
 = 
d©a
.
ª˚ive_∑ús
;

231  
ªsu…
;

232 
	}
}

247 
	$rc_auth_¥oxy
(
VALUE_PAIR
 *
£nd
, VALUE_PAIR **
ª˚ived
, *
msg
)

249 
SEND_DATA
 
d©a
;

250 
ªsu…
;

251 
i
;

252 
SERVER
 *
auth£rvî
 = 
	`rc_c⁄f_§v
("authserver");

253 
timeout
 = 
	`rc_c⁄f_öt
("radius_timeout");

254 
ªåõs
 = 
	`rc_c⁄f_öt
("radius_retries");

256 
d©a
.
£nd_∑ús
 = 
£nd
;

257 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

259 
ªsu…
 = 
ERROR_RC
;

260 
i
=0; (i<
auth£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

261 ; 
i
++)

263 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

264 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

265 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

267 
	`rc_buûdªq
(&
d©a
, 
PW_ACCESS_REQUEST
, 
auth£rvî
->
«me
[
i
],

268 
auth£rvî
->
p‹t
[
i
], 
timeout
, 
ªåõs
);

270 
ªsu…
 = 
	`rc_£nd_£rvî
 (&
d©a
, 
msg
, 
NULL
);

273 *
ª˚ived
 = 
d©a
.
ª˚ive_∑ús
;

275  
ªsu…
;

276 
	}
}

289 
	$rc_ac˘_usög_£rvî
(
SERVER
 *
ac˘£rvî
,

290 
UINT4
 
˛õ¡_p‹t
,

291 
VALUE_PAIR
 *
£nd
)

293 
SEND_DATA
 
d©a
;

294 
VALUE_PAIR
 *
adt_vp
;

295 
ªsu…
;

296 
timevÆ
 
°¨t_time
, 
dtime
;

297 
msg
[4096];

298 
i
;

299 
timeout
 = 
	`rc_c⁄f_öt
("radius_timeout");

300 
ªåõs
 = 
	`rc_c⁄f_öt
("radius_retries");

302 
d©a
.
£nd_∑ús
 = 
£nd
;

303 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

309 i‡(
	`rc_gë_«s_id
(&(
d©a
.
£nd_∑ús
)Ë=
ERROR_RC
)

310  (
ERROR_RC
);

316 i‡(
	`rc_av∑ú_add
(&(
d©a
.
£nd_∑ús
), 
PW_NAS_PORT
, &
˛õ¡_p‹t
, 0, 
VENDOR_NONE
Ë=
NULL
)

317  (
ERROR_RC
);

323 
dtime
.
tv_£c
 = 0;

324 i‡((
adt_vp
 = 
	`rc_av∑ú_add
(&(
d©a
.
£nd_∑ús
), 
PW_ACCT_DELAY_TIME
, &
dtime
.
tv_£c
, 0, 
VENDOR_NONE
)Ë=
NULL
)

325  (
ERROR_RC
);

327 
	`gë_time
(&
°¨t_time
);

328 
ªsu…
 = 
ERROR_RC
;

329 
i
=0; (i<
ac˘£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

330 ; 
i
++)

332 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

333 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

334 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

336 
	`rc_buûdªq
(&
d©a
, 
PW_ACCOUNTING_REQUEST
, 
ac˘£rvî
->
«me
[
i
],

337 
ac˘£rvî
->
p‹t
[
i
], 
timeout
, 
ªåõs
);

339 
	`gë_time
(&
dtime
);

340 
dtime
.
tv_£c
 -
°¨t_time
.tv_sec;

341 
	`rc_av∑ú_assign
(
adt_vp
, &
dtime
.
tv_£c
, 0);

343 
ªsu…
 = 
	`rc_£nd_£rvî
 (&
d©a
, 
msg
, 
NULL
);

346 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

348  
ªsu…
;

349 
	}
}

361 
	$rc_ac˘
(
UINT4
 
˛õ¡_p‹t
, 
VALUE_PAIR
 *
£nd
)

363 
SERVER
 *
ac˘£rvî
 = 
	`rc_c⁄f_§v
("acctserver");

364 i‡(!
ac˘£rvî
Ë (
ERROR_RC
);

366  
	`rc_ac˘_usög_£rvî
(
ac˘£rvî
, 
˛õ¡_p‹t
, 
£nd
);

367 
	}
}

376 
	$rc_ac˘_¥oxy
(
VALUE_PAIR
 *
£nd
)

378 
SEND_DATA
 
d©a
;

379 
ªsu…
;

380 
msg
[4096];

381 
i
;

382 
SERVER
 *
ac˘£rvî
 = 
	`rc_c⁄f_§v
("authserver");

383 
timeout
 = 
	`rc_c⁄f_öt
("radius_timeout");

384 
ªåõs
 = 
	`rc_c⁄f_öt
("radius_retries");

386 
d©a
.
£nd_∑ús
 = 
£nd
;

387 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

389 
ªsu…
 = 
ERROR_RC
;

390 
i
=0; (i<
ac˘£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

391 ; 
i
++)

393 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

394 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

395 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

397 
	`rc_buûdªq
(&
d©a
, 
PW_ACCOUNTING_REQUEST
, 
ac˘£rvî
->
«me
[
i
],

398 
ac˘£rvî
->
p‹t
[
i
], 
timeout
, 
ªåõs
);

400 
ªsu…
 = 
	`rc_£nd_£rvî
 (&
d©a
, 
msg
, 
NULL
);

403 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

405  
ªsu…
;

406 
	}
}

416 
	$rc_check
(*
ho°
, 
p‹t
, *
msg
)

418 
SEND_DATA
 
d©a
;

419 
ªsu…
;

420 
UINT4
 
£rvi˚_ty≥
;

421 
timeout
 = 
	`rc_c⁄f_öt
("radius_timeout");

422 
ªåõs
 = 
	`rc_c⁄f_öt
("radius_retries");

424 
d©a
.
£nd_∑ús
 = d©a.
ª˚ive_∑ús
 = 
NULL
;

431 i‡(
	`rc_gë_«s_id
(&(
d©a
.
£nd_∑ús
)Ë=
ERROR_RC
)

432  (
ERROR_RC
);

438 
£rvi˚_ty≥
 = 
PW_ADMINISTRATIVE
;

439 
	`rc_av∑ú_add
(&(
d©a
.
£nd_∑ús
), 
PW_SERVICE_TYPE
, &
£rvi˚_ty≥
, 0, 
VENDOR_NONE
);

441 
	`rc_buûdªq
(&
d©a
, 
PW_STATUS_SERVER
, 
ho°
, 
p‹t
, 
timeout
, 
ªåõs
);

442 
ªsu…
 = 
	`rc_£nd_£rvî
 (&
d©a
, 
msg
, 
NULL
);

444 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

446  
ªsu…
;

447 
	}
}

	@pppd/plugins/radius/clientid.c

12 
	~<ö˛udes.h
>

13 
	~<ødius˛õ¡.h
>

15 
	sm≠2id_s
 {

16 *
	m«me
;

17 
UINT4
 
	mid
;

19 
m≠2id_s
 *
	m√xt
;

22 
m≠2id_s
 *
	gm≠2id_li°
 = 
NULL
;

34 
	$rc_ªad_m≠fûe
(*
fûíame
)

36 
buf„r
[1024];

37 
FILE
 *
m≠fd
;

38 *
c
, *
«me
, *
id
, *
q
;

39 
m≠2id_s
 *
p
;

40 
 r
 = 0;

42 i‡((
m≠fd
 = 
	`f›í
(
fûíame
,"r")Ë=
NULL
)

44 
	`îr‹
("rc_ªad_m≠fûe: c™'àªad %s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

48 
	#SKIP
(
p
Ë*∞&& 
	`is•a˚
(*p)Ëp++;

	)

50 
	`fgës
(
buf„r
, (buf„r), 
m≠fd
Ë!
NULL
)

52 
 r
++;

54 
q
 = 
buf„r
;

56 
	`SKIP
(
q
);

58 i‡((*
q
 == '\n') || (*q == '#') || (*q == '\0'))

61 i‡(–
c
 = 
	`°rchr
(
q
, ' ')) || (c = strchr(q,'\t'))) {

63 *
c
 = '\0'; c++;

64 
	`SKIP
(
c
);

66 
«me
 = 
q
;

67 
id
 = 
c
;

69 i‡((
p
 = (
m≠2id_s
 *)
	`mÆloc
((*p))Ë=
NULL
) {

70 
	`novm
("rc_read_mapfile");

74 
p
->
«me
 = 
	`°rdup
(name);

75 
p
->
id
 = 
	`©oi
(id);

76 
p
->
√xt
 = 
m≠2id_li°
;

77 
m≠2id_li°
 = 
p
;

81 
	`îr‹
("rc_ªad_m≠fûe: mÆf‹medÜöêö %s,Üöê%d", 
fûíame
, 
 r
);

87 #unde‡
SKIP


89 
	`f˛o£
(
m≠fd
);

92 
	}
}

104 
UINT4
 
	$rc_m≠2id
(*
«me
)

106 
m≠2id_s
 *
p
;

107 
ây«me
[
PATH_MAX
];

109 *
ây«me
 = '\0';

110 i‡(*
«me
 != '/')

111 
	`°r˝y
(
ây«me
, "/dev/");

113 
	`°∫ˇt
(
ây«me
, 
«me
, —ty«meË- 
	`°æí
(ttyname) -1);

115 
p
 = 
m≠2id_li°
;Ö;Ö =Ö->
√xt
)

116 i‡(!
	`°rcmp
(
ây«me
, 
p
->
«me
)ËÖ->
id
;

118 
	`w¨n
("rc_m≠2id: c™'àfödÅty %†ö m≠ d©aba£", 
ây«me
);

121 
	}
}

	@pppd/plugins/radius/config.c

17 
	~<ö˛udes.h
>

18 
	~<ødius˛õ¡.h
>

19 
	~<›ti⁄s.h
>

21 
ã°_c⁄fig
(*);

31 
OPTION
 *
	$föd_›ti⁄
(*
›äame
, 
ty≥
)

33 
i
;

36 
i
 = 0; i < 
num_›ti⁄s
; i++) {

37 i‡(!
	`°rcmp
(
c⁄fig_›ti⁄s
[
i
].
«me
, 
›äame
) &&

38 (
c⁄fig_›ti⁄s
[
i
].
ty≥
 &Åype))

39  &
c⁄fig_›ti⁄s
[
i
];

42  
NULL
;

43 
	}
}

53 
	$£t_›ti⁄_°r
(*
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, *
p
)

55 i‡(
p
)

56 
›ti⁄
->
vÆ
 = (*Ë
	`°rdup
(
p
);

58 
›ti⁄
->
vÆ
 = 
NULL
;

61 
	}
}

63 
	$£t_›ti⁄_öt
(*
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, *
p
)

65 *
ùå
;

67 i‡(
p
 =
NULL
) {

68 
	`îr‹
("%s:Üöê%d: bogu†›ti⁄ vÆue", 
fûíame
, 
löe
);

72 i‡((
ùå
 = (*Ë
	`mÆloc
((ùå))Ë=
NULL
) {

73 
	`novm
("read_config");

77 *
ùå
 = 
	`©oi
(
p
);

78 
›ti⁄
->
vÆ
 = (*Ë
ùå
;

81 
	}
}

83 
	$£t_›ti⁄_§v
(*
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, *
p
)

85 
SERVER
 *
£rv
;

86 *
q
;

87 
£rvít
 *
svp
;

88 
i
;

90 i‡(
p
 =
NULL
) {

91 
	`îr‹
("%s:Üöê%d: bogu†›ti⁄ vÆue", 
fûíame
, 
löe
);

95 
£rv
 = (
SERVER
 *Ë
›ti⁄
->
vÆ
;

97 
i
 = 0; i < 
£rv
->
max
; i++) {

98 
	`‰ì
(
£rv
->
«me
[
i
]);

100 
£rv
->
max
 = 0;

102 (
p
 = 
	`°πok
’, ", \t")Ë!
NULL
) {

104 i‡((
q
 = 
	`°rchr
(
p
,':')Ë!
NULL
) {

105 *
q
 = '\0';

106 
q
++;

107 
£rv
->
p‹t
[£rv->
max
] = 
	`©oi
(
q
);

109 i‡(!
	`°rcmp
(
›ti⁄
->
«me
,"authserver"))

110 i‡((
svp
 = 
	`gë£rvby«me
 ("ødius", "udp")Ë=
NULL
)

111 
£rv
->
p‹t
[£rv->
max
] = 
PW_AUTH_UDP_PORT
;

113 
£rv
->
p‹t
[£rv->
max
] = 
	`¡ohs
 ((Ë
svp
->
s_p‹t
);

114 i‡(!
	`°rcmp
(
›ti⁄
->
«me
, "acctserver"))

115 i‡((
svp
 = 
	`gë£rvby«me
 ("ødac˘", "udp")Ë=
NULL
)

116 
£rv
->
p‹t
[£rv->
max
] = 
PW_ACCT_UDP_PORT
;

118 
£rv
->
p‹t
[£rv->
max
] = 
	`¡ohs
 ((Ë
svp
->
s_p‹t
);

120 
	`îr‹
("%s:Üöê%d:ÇÿdeÁu…Ö‹àf‹ %s", 
fûíame
, 
löe
, 
›ti⁄
->
«me
);

125 
£rv
->
«me
[£rv->
max
++] = 
	`°rdup
(
p
);

127 
p
 = 
NULL
;

131 
	}
}

133 
	$£t_›ti⁄_auo
(*
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, *
p
)

135 *
ùå
;

137 i‡(
p
 =
NULL
) {

138 
	`w¨n
("%s:Üöê%d: bogu†›ti⁄ vÆue", 
fûíame
, 
löe
);

142 i‡((
ùå
 = (*Ë
	`mÆloc
((ùå))Ë=
NULL
) {

143 
	`novm
("read_config");

147 *
ùå
 = 0;

148 
p
 = 
	`°πok
(p, ", \t");

150 i‡(!
	`°∫cmp
(
p
, "local", 5))

151 *
ùå
 = 
AUTH_LOCAL_FST
;

152 i‡(!
	`°∫cmp
(
p
, "radius", 6))

153 *
ùå
 = 
AUTH_RADIUS_FST
;

155 
	`îr‹
("%s:áuth_‹dî: unknow¿keyw‹d: %s", 
fûíame
, 
p
);

156 
	`‰ì
(
ùå
);

160 
p
 = 
	`°πok
(
NULL
, ", \t");

162 i‡(
p
 && (*p != '\0')) {

163 i‡((*
ùå
 & 
AUTH_RADIUS_FST
Ë&& !
	`°rcmp
(
p
, "local"))

164 *
ùå
 = (*ùåË| 
AUTH_LOCAL_SND
;

165 i‡((*
ùå
 & 
AUTH_LOCAL_FST
Ë&& !
	`°rcmp
(
p
, "radius"))

166 *
ùå
 = (*ùåË| 
AUTH_RADIUS_SND
;

168 
	`îr‹
("%s:áuth_‹dî: unknow¿‹ u√x≥˘ed keyw‹d: %s", 
fûíame
, 
p
);

169 
	`‰ì
(
ùå
);

174 
›ti⁄
->
vÆ
 = (*Ë
ùå
;

177 
	}
}

188 
	$rc_ªad_c⁄fig
(*
fûíame
)

190 
FILE
 *
c⁄figfd
;

191 
buf„r
[512], *
p
;

192 
OPTION
 *
›ti⁄
;

193 
löe
, 
pos
;

195 i‡((
c⁄figfd
 = 
	`f›í
(
fûíame
,"r")Ë=
NULL
)

197 
	`îr‹
("rc_ªad_c⁄fig: c™'à›í %s: %m", 
fûíame
);

201 
löe
 = 0;

202 (
	`fgës
(
buf„r
, (buf„r), 
c⁄figfd
Ë!
NULL
))

204 
löe
++;

205 
p
 = 
buf„r
;

207 i‡((*
p
 == '\n') || (*p == '#') || (*p == '\0'))

210 
p
[
	`°æí
(p)-1] = '\0';

213 i‡((
pos
 = 
	`°rc•n
(
p
, "\t ")) == 0) {

214 
	`îr‹
("%s:Üöê%d: bogu†f‹m©: %s", 
fûíame
, 
löe
, 
p
);

218 
p
[
pos
] = '\0';

220 i‡((
›ti⁄
 = 
	`föd_›ti⁄
(
p
, 
OT_ANY
)Ë=
NULL
) {

221 
	`w¨n
("%s:Üöê%d: uƒecognized keyw‹d: %s", 
fûíame
, 
löe
, 
p
);

225 i‡(
›ti⁄
->
°©us
 !
ST_UNDEF
) {

226 
	`îr‹
("%s:Üöê%d: du∂iˇã o±i⁄Üöe: %s", 
fûíame
, 
löe
, 
p
);

230 
p
 +
pos
+1;

231 
	`is•a˚
(*
p
))

232 
p
++;

234 
›ti⁄
->
ty≥
) {

235 
OT_STR
:

236 i‡(
	`£t_›ti⁄_°r
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0)

239 
OT_INT
:

240 i‡(
	`£t_›ti⁄_öt
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0)

243 
OT_SRV
:

244 i‡(
	`£t_›ti⁄_§v
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0)

247 
OT_AUO
:

248 i‡(
	`£t_›ti⁄_auo
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0)

252 
	`Áèl
("rc_read_config: impossible case branch!");

253 
	`ab‹t
();

256 
	`f˛o£
(
c⁄figfd
);

258  
	`ã°_c⁄fig
(
fûíame
);

259 
	}
}

269 *
	$rc_c⁄f_°r
(*
›äame
)

271 
OPTION
 *
›ti⁄
;

273 
›ti⁄
 = 
	`föd_›ti⁄
(
›äame
, 
OT_STR
);

275 i‡(
›ti⁄
 =
NULL
)

276 
	`Áèl
("rc_c⁄f_°r: unknow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

277  (*)
›ti⁄
->
vÆ
;

278 
	}
}

280 
	$rc_c⁄f_öt
(*
›äame
)

282 
OPTION
 *
›ti⁄
;

284 
›ti⁄
 = 
	`föd_›ti⁄
(
›äame
, 
OT_INT
|
OT_AUO
);

286 i‡(
›ti⁄
 =
NULL
)

287 
	`Áèl
("rc_c⁄f_öt: unknow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

288  *((*)
›ti⁄
->
vÆ
);

289 
	}
}

291 
SERVER
 *
	$rc_c⁄f_§v
(*
›äame
)

293 
OPTION
 *
›ti⁄
;

295 
›ti⁄
 = 
	`föd_›ti⁄
(
›äame
, 
OT_SRV
);

297 i‡(
›ti⁄
 =
NULL
)

298 
	`Áèl
("rc_c⁄f_§v: unknow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

299  (
SERVER
 *)
›ti⁄
->
vÆ
;

300 
	}
}

310 
	$ã°_c⁄fig
(*
fûíame
)

313 
°©
 
°
;

314 *
fûe
;

317 i‡(!(
	`rc_c⁄f_§v
("auth£rvî")->
max
))

319 
	`îr‹
("%s:Çÿauth£rvî s≥cifõd", 
fûíame
);

322 i‡(!(
	`rc_c⁄f_§v
("ac˘£rvî")->
max
))

324 
	`îr‹
("%s:Çÿac˘£rvî s≥cifõd", 
fûíame
);

327 i‡(!
	`rc_c⁄f_°r
("servers"))

329 
	`îr‹
("%s:Çÿ£rvî†fûê•ecifõd", 
fûíame
);

332 i‡(!
	`rc_c⁄f_°r
("dictionary"))

334 
	`îr‹
("%s:Çÿdi˘i⁄¨y s≥cifõd", 
fûíame
);

338 i‡(
	`rc_c⁄f_öt
("radius_timeout") <= 0)

340 
	`îr‹
("%s:Ñadius_timeouà<0 i†ûÀgÆ", 
fûíame
);

343 i‡(
	`rc_c⁄f_öt
("radius_retries") <= 0)

345 
	`îr‹
("%s:Ñadius_ªåõ†<0 i†ûÀgÆ", 
fûíame
);

350 
fûe
 = 
	`rc_c⁄f_°r
("login_local");

351 i‡(
	`°©
(
fûe
, &
°
) == 0)

353 i‡(!
	`S_ISREG
(
°
.
°_mode
)) {

354 
	`îr‹
("%s:ÇŸáÑeguœ∏fûe: %s", 
fûíame
, 
fûe
);

358 
	`îr‹
("%s: fûênŸ found: %s", 
fûíame
, 
fûe
);

361 
fûe
 = 
	`rc_c⁄f_°r
("login_radius");

362 i‡(
	`°©
(
fûe
, &
°
) == 0)

364 i‡(!
	`S_ISREG
(
°
.
°_mode
)) {

365 
	`îr‹
("%s:ÇŸáÑeguœ∏fûe: %s", 
fûíame
, 
fûe
);

369 
	`îr‹
("%s: fûênŸ found: %s", 
fûíame
, 
fûe
);

374 i‡(
	`rc_c⁄f_öt
("login_tries") <= 0)

376 
	`îr‹
("%s:Üogö_åõ†<0 i†ûÀgÆ", 
fûíame
);

379 i‡(
	`rc_c⁄f_°r
("£qfûe"Ë=
NULL
)

381 
	`îr‹
("%s: seqfûênŸ s≥cifõd", 
fûíame
);

384 i‡(
	`rc_c⁄f_öt
("login_timeout") <= 0)

386 
	`îr‹
("%s:Üogö_timeouà<0 i†ûÀgÆ", 
fûíame
);

389 i‡(
	`rc_c⁄f_°r
("m≠fûe"Ë=
NULL
)

391 
	`îr‹
("%s: m≠fûênŸ s≥cifõd", 
fûíame
);

394 i‡(
	`rc_c⁄f_°r
("nﬁogö"Ë=
NULL
)

396 
	`îr‹
("%s:ÇﬁogöÇŸ s≥cifõd", 
fûíame
);

401 
	}
}

412 
	$föd_m©ch
 (
UINT4
 *
ù_addr
, *
ho°«me
)

414 
UINT4
 
addr
;

415 **
∑ddr
;

416 
ho°ít
 *
hp
;

418 i‡(
	`rc_good_ùaddr
 (
ho°«me
) == 0)

420 i‡(*
ù_addr
 =
	`¡ohl
(
	`öë_addr
 (
ho°«me
)))

427 i‡((
hp
 = 
	`gëho°by«me
 (
ho°«me
)Ë=(
ho°ít
 *Ë
NULL
)

431 
∑ddr
 = 
hp
->
h_addr_li°
; *paddr;Öaddr++)

433 
addr
 = ** (
UINT4
 **Ë
∑ddr
;

434 i‡(
	`¡ohl
(
addr
Ë=*
ù_addr
)

441 
	}
}

452 
	$rc_föd_£rvî
 (*
£rvî_«me
, 
UINT4
 *
ù_addr
, *
£¸ë
)

454 
UINT4
 
myùaddr
 = 0;

455 
Àn
;

456 
ªsu…
;

457 
FILE
 *
˛õ¡fd
;

458 *
h
;

459 *
s
;

460 *
ho°2
;

461 
buf„r
[128];

462 
ho°nm
[
AUTH_ID_LEN
 + 1];

465 i‡((*
ù_addr
 = 
	`rc_gë_ùaddr
 (
£rvî_«me
)Ë=(
UINT4
) 0)

468 i‡((
˛õ¡fd
 = 
	`f›í
 (
	`rc_c⁄f_°r
("£rvîs"), "r")Ë=(
FILE
 *Ë
NULL
)

470 
	`îr‹
("rc_föd_£rvî: couldn'à›í fûe: %m: %s", 
	`rc_c⁄f_°r
("servers"));

474 
myùaddr
 = 
	`rc_own_ùaddªss
();

476 
ªsu…
 = 0;

477 
	`fgës
 (
buf„r
,  (buf„r), 
˛õ¡fd
Ë!(*Ë
NULL
)

479 i‡(*
buf„r
 == '#')

482 i‡((
h
 = 
	`°πok
 (
buf„r
, " \t\n")Ë=
NULL
)

485 
	`mem£t
 (
ho°nm
, '\0', 
AUTH_ID_LEN
 + 1);

486 
	`°æ˝y
 (
ho°nm
, 
h
, 
AUTH_ID_LEN
 + 1);

488 i‡((
s
 = 
	`°πok
 (
NULL
, " \t\n")) == NULL)

491 
	`mem£t
 (
£¸ë
, '\0', 
MAX_SECRET_LENGTH
 + 1);

492 
	`°æ˝y
 (
£¸ë
, 
s
, 
MAX_SECRET_LENGTH
 + 1);

494 i‡(!
	`°rchr
 (
ho°nm
, '/'))

496 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°nm
) == 0)

498 
ªsu…
++;

504 
	`°πok
 (
ho°nm
, "/");

505 i‡(
	`föd_m©ch
 (&
myùaddr
, 
ho°nm
) == 0)

507 
ho°2
 = 
	`°πok
 (
NULL
, " ");

508 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°2
) == 0)

510 
ªsu…
++;

516 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°nm
) == 0)

518 
ªsu…
++;

524 
	`f˛o£
 (
˛õ¡fd
);

525 i‡(
ªsu…
 == 0)

527 
	`mem£t
 (
buf„r
, '\0',  (buffer));

528 
	`mem£t
 (
£¸ë
, '\0',  (secret));

529 
	`îr‹
("rc_find_server: couldn't find RADIUS server %s in %s",

530 
£rvî_«me
, 
	`rc_c⁄f_°r
("servers"));

534 
	}
}

	@pppd/plugins/radius/dict.c

19 
	~<ö˛udes.h
>

20 
	~<ødius˛õ¡.h
>

22 
DICT_ATTR
 *
	gdi˘i⁄¨y_©åibuãs
 = 
NULL
;

23 
DICT_VALUE
 *
	gdi˘i⁄¨y_vÆues
 = 
NULL
;

24 
VENDOR_DICT
 *
	gvíd‹_di˘i⁄¨õs
 = 
NULL
;

36 
	$rc_ªad_di˘i⁄¨y
 (*
fûíame
)

38 
FILE
 *
di˘fd
;

39 
dummy°r
[
AUTH_ID_LEN
];

40 
«me°r
[
AUTH_ID_LEN
];

41 
vÆ°r
[
AUTH_ID_LEN
];

42 
©å°r
[
AUTH_ID_LEN
];

43 
ty≥°r
[
AUTH_ID_LEN
];

44 
víd‹°r
[
AUTH_ID_LEN
];

45 
löe_no
;

46 
DICT_ATTR
 *
©å
;

47 
DICT_VALUE
 *
dvÆ
;

48 
VENDOR_DICT
 *
vdi˘
;

49 
buf„r
[256];

50 
vÆue
;

51 
ty≥
;

52 
n
;

53 
ªtcode
;

54 i‡((
di˘fd
 = 
	`f›í
 (
fûíame
, "r")Ë=(
FILE
 *Ë
NULL
)

56 
	`îr‹
( "rc_read_dictionary: couldn't open dictionary %s: %s",

57 
fûíame
, 
	`°ªº‹
(
î∫o
));

61 
löe_no
 = 0;

62 
ªtcode
 = 0;

63 
	`fgës
 (
buf„r
,  (buf„r), 
di˘fd
Ë!(*Ë
NULL
)

65 
löe_no
++;

68 i‡(*
buf„r
 == '#' || *buffer == '\0' || *buffer == '\n')

73 i‡(
	`°∫cmp
 (
buf„r
, "VENDOR", 6) == 0) {

75 i‡(
	`ssˇnf
(
buf„r
, "%s%s%d", 
dummy°r
, 
«me°r
, &
vÆue
) != 3) {

76 
	`îr‹
("rc_read_dictionary: invalid vendor onÜine %d of dictionary %s",

77 
löe_no
, 
fûíame
);

78 
ªtcode
 = -1;

82 i‡(
	`°æí
 (
«me°r
Ë> 
NAME_LENGTH
) {

83 
	`îr‹
("rc_read_dictionary: invalidÇameÜength onÜine %d of dictionary %s",

84 
löe_no
, 
fûíame
);

85 
ªtcode
 = -1;

89 
vdi˘
 = (
VENDOR_DICT
 *Ë
	`mÆloc
 ( (VENDOR_DICT));

90 i‡(!
vdi˘
) {

91 
	`novm
("rc_read_dictionary");

92 
ªtcode
 = -1;

95 
	`°r˝y
(
vdi˘
->
víd‹«me
, 
«me°r
);

96 
vdi˘
->
víd‹code
 = 
vÆue
;

97 
vdi˘
->
©åibuãs
 = 
NULL
;

98 
vdi˘
->
√xt
 = 
víd‹_di˘i⁄¨õs
;

99 
víd‹_di˘i⁄¨õs
 = 
vdi˘
;

101 i‡(
	`°∫cmp
 (
buf„r
, "ATTRIBUTE", 9) == 0)

107 
víd‹°r
[0] = 0;

108 
n
 = 
	`ssˇnf
(
buf„r
, "%s%s%s%s%s", 
dummy°r
, 
«me°r
, 
vÆ°r
, 
ty≥°r
, 
víd‹°r
);

109 i‡(
n
 != 4 &&Ç != 5)

111 
	`îr‹
("rc_read_dictionary: invalidáttribute onÜine %d of dictionary %s",

112 
löe_no
, 
fûíame
);

113 
ªtcode
 = -1;

120 i‡(
	`°æí
 (
«me°r
Ë> 
NAME_LENGTH
)

122 
	`îr‹
("rc_read_dictionary: invalidÇameÜength onÜine %d of dictionary %s",

123 
löe_no
, 
fûíame
);

124 
ªtcode
 = -1;

128 i‡(
	`°æí
 (
víd‹°r
Ë> 
NAME_LENGTH
)

130 
	`îr‹
("rc_read_dictionary: invalidÇameÜength onÜine %d of dictionary %s",

131 
löe_no
, 
fûíame
);

132 
ªtcode
 = -1;

136 i‡(!
	`isdigô
 (*
vÆ°r
))

138 
	`îr‹
("rc_read_dictionary: invalid value onÜine %d of dictionary %s",

139 
löe_no
, 
fûíame
);

140 
ªtcode
 = -1;

143 
vÆue
 = 
	`©oi
 (
vÆ°r
);

145 i‡(
	`°rcmp
 (
ty≥°r
, "string") == 0)

147 
ty≥
 = 
PW_TYPE_STRING
;

149 i‡(
	`°rcmp
 (
ty≥°r
, "integer") == 0)

151 
ty≥
 = 
PW_TYPE_INTEGER
;

153 i‡(
	`°rcmp
 (
ty≥°r
, "ipaddr") == 0)

155 
ty≥
 = 
PW_TYPE_IPADDR
;

157 i‡(
	`°rcmp
 (
ty≥°r
, "date") == 0)

159 
ty≥
 = 
PW_TYPE_DATE
;

163 
	`îr‹
("rc_read_dictionary: invalidÅype onÜine %d of dictionary %s",

164 
löe_no
, 
fûíame
);

165 
ªtcode
 = -1;

170 i‡(*
víd‹°r
) {

171 
vdi˘
 = 
	`rc_di˘_födvíd‹
(
víd‹°r
);

172 i‡(!
vdi˘
) {

173 
	`îr‹
("rc_read_dictionary: unknown vendor onÜine %d of dictionary %s",

174 
löe_no
, 
fûíame
);

175 
ªtcode
 = -1;

179 
vdi˘
 = 
NULL
;

182 i‡((
©å
 =

183 (
DICT_ATTR
 *Ë
	`mÆloc
 ( (DICT_ATTR)))

184 =(
DICT_ATTR
 *Ë
NULL
)

186 
	`novm
("rc_read_dictionary");

187 
ªtcode
 = -1;

190 
	`°r˝y
 (
©å
->
«me
, 
«me°r
);

191 i‡(
vdi˘
) {

192 
©å
->
víd‹code
 = 
vdi˘
->vendorcode;

194 
©å
->
víd‹code
 = 
VENDOR_NONE
;

196 
©å
->
vÆue
 = value;

197 
©å
->
ty≥
 =Åype;

200 i‡(
vdi˘
) {

201 
©å
->
√xt
 = 
vdi˘
->
©åibuãs
;

202 
vdi˘
->
©åibuãs
 = 
©å
;

204 
©å
->
√xt
 = 
di˘i⁄¨y_©åibuãs
;

205 
di˘i⁄¨y_©åibuãs
 = 
©å
;

208 i‡(
	`°∫cmp
 (
buf„r
, "VALUE", 5) == 0)

211 i‡(
	`ssˇnf
 (
buf„r
, "%s%s%s%s", 
dummy°r
, 
©å°r
,

212 
«me°r
, 
vÆ°r
) != 4)

214 
	`îr‹
("rc_read_dictionary: invalid valueÉntry onÜine %d of dictionary %s",

215 
löe_no
, 
fûíame
);

216 
ªtcode
 = -1;

223 i‡(
	`°æí
 (
©å°r
Ë> 
NAME_LENGTH
)

225 
	`îr‹
("rc_read_dictionary: invalidáttributeÜength onÜine %d of dictionary %s",

226 
löe_no
, 
fûíame
);

227 
ªtcode
 = -1;

231 i‡(
	`°æí
 (
«me°r
Ë> 
NAME_LENGTH
)

233 
	`îr‹
("rc_read_dictionary: invalidÇameÜength onÜine %d of dictionary %s",

234 
löe_no
, 
fûíame
);

235 
ªtcode
 = -1;

239 i‡(!
	`isdigô
 (*
vÆ°r
))

241 
	`îr‹
("rc_read_dictionary: invalid value onÜine %d of dictionary %s",

242 
löe_no
, 
fûíame
);

243 
ªtcode
 = -1;

246 
vÆue
 = 
	`©oi
 (
vÆ°r
);

249 i‡((
dvÆ
 =

250 (
DICT_VALUE
 *Ë
	`mÆloc
 ( (DICT_VALUE)))

251 =(
DICT_VALUE
 *Ë
NULL
)

253 
	`novm
("rc_read_dictionary");

254 
ªtcode
 = -1;

257 
	`°r˝y
 (
dvÆ
->
©å«me
, 
©å°r
);

258 
	`°r˝y
 (
dvÆ
->
«me
, 
«me°r
);

259 
dvÆ
->
vÆue
 = value;

262 
dvÆ
->
√xt
 = 
di˘i⁄¨y_vÆues
;

263 
di˘i⁄¨y_vÆues
 = 
dvÆ
;

265 i‡(
	`°∫cmp
 (
buf„r
, "INCLUDE", 7) == 0)

268 i‡(
	`ssˇnf
 (
buf„r
, "%s%s", 
dummy°r
, 
«me°r
) != 2)

270 
	`îr‹
("rc_read_dictionary: invalid includeÉntry onÜine %d of dictionary %s",

271 
löe_no
, 
fûíame
);

272 
ªtcode
 = -1;

275 i‡(
	`rc_ªad_di˘i⁄¨y
(
«me°r
) == -1)

277 
ªtcode
 = -1;

282 
	`f˛o£
 (
di˘fd
);

283  
ªtcode
;

284 
	}
}

295 
DICT_ATTR
 *
	$rc_di˘_gë©å
 (
©åibuã
, 
víd‹
)

297 
DICT_ATTR
 *
©å
;

298 
VENDOR_DICT
 *
di˘
;

300 i‡(
víd‹
 =
VENDOR_NONE
) {

301 
©å
 = 
di˘i⁄¨y_©åibuãs
;

302 
©å
 !(
DICT_ATTR
 *Ë
NULL
) {

303 i‡(
©å
->
vÆue
 =
©åibuã
) {

304  (
©å
);

306 
©å
 =áâr->
√xt
;

309 
di˘
 = 
	`rc_di˘_gëvíd‹
(
víd‹
);

310 i‡(!
di˘
) {

311  
NULL
;

313 
©å
 = 
di˘
->
©åibuãs
;

314 
©å
) {

315 i‡(
©å
->
vÆue
 =
©åibuã
) {

316  
©å
;

318 
©å
 =áâr->
√xt
;

321  
NULL
;

322 
	}
}

332 
DICT_ATTR
 *
	$rc_di˘_föd©å
 (*
©å«me
)

334 
DICT_ATTR
 *
©å
;

335 
VENDOR_DICT
 *
di˘
;

337 
©å
 = 
di˘i⁄¨y_©åibuãs
;

338 
©å
 !(
DICT_ATTR
 *Ë
NULL
)

340 i‡(
	`°rˇ£cmp
 (
©å
->
«me
, 
©å«me
) == 0)

342  (
©å
);

344 
©å
 =áâr->
√xt
;

348 
di˘
 = 
víd‹_di˘i⁄¨õs
;

349 
di˘
) {

350 
©å
 = 
di˘
->
©åibuãs
;

351 
©å
) {

352 i‡(
	`°rˇ£cmp
 (
©å
->
«me
, 
©å«me
) == 0) {

353  (
©å
);

355 
©å
 =áâr->
√xt
;

357 
di˘
 = di˘->
√xt
;

359  ((
DICT_ATTR
 *Ë
NULL
);

360 
	}
}

371 
DICT_VALUE
 *
	$rc_di˘_födvÆ
 (*
vÆ«me
)

373 
DICT_VALUE
 *
vÆ
;

375 
vÆ
 = 
di˘i⁄¨y_vÆues
;

376 
vÆ
 !(
DICT_VALUE
 *Ë
NULL
)

378 i‡(
	`°rˇ£cmp
 (
vÆ
->
«me
, 
vÆ«me
) == 0)

380  (
vÆ
);

382 
vÆ
 = vÆ->
√xt
;

384  ((
DICT_VALUE
 *Ë
NULL
);

385 
	}
}

395 
DICT_VALUE
 * 
	$rc_di˘_gëvÆ
 (
UINT4
 
vÆue
, *
©å«me
)

397 
DICT_VALUE
 *
vÆ
;

399 
vÆ
 = 
di˘i⁄¨y_vÆues
;

400 
vÆ
 !(
DICT_VALUE
 *Ë
NULL
)

402 i‡(
	`°rcmp
 (
vÆ
->
©å«me
,áttrname) == 0 &&

403 
vÆ
->
vÆue
 == value)

405  (
vÆ
);

407 
vÆ
 = vÆ->
√xt
;

409  ((
DICT_VALUE
 *Ë
NULL
);

410 
	}
}

418 
VENDOR_DICT
 * 
	$rc_di˘_födvíd‹
 (*
víd‹«me
)

420 
VENDOR_DICT
 *
di˘
;

422 
di˘
 = 
víd‹_di˘i⁄¨õs
;

423 
di˘
) {

424 i‡(!
	`°rcmp
(
víd‹«me
, 
di˘
->vendorname)) {

425  
di˘
;

427 
di˘
 = di˘->
√xt
;

429  
NULL
;

430 
	}
}

438 
VENDOR_DICT
 * 
	$rc_di˘_gëvíd‹
 (
id
)

440 
VENDOR_DICT
 *
di˘
;

442 
di˘
 = 
víd‹_di˘i⁄¨õs
;

443 
di˘
) {

444 i‡(
id
 =
di˘
->
víd‹code
) {

445  
di˘
;

447 
di˘
 = di˘->
√xt
;

449  
NULL
;

450 
	}
}

	@pppd/plugins/radius/includes.h

17 
	~<sys/ty≥s.h
>

19 
	~<˘y≥.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<√tdb.h
>

23 
	~<sy¶og.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<°d¨g.h
>

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

31 
	~<sys/°©.h
>

33 
	~<limôs.h
>

35 #i‚de‡
PATH_MAX


36 
	#PATH_MAX
 1024

	)

39 #i‚de‡
UCHAR_MAX


40 
	#UCHAR_MAX
 255

	)

43 
	~<pwd.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<¨∑/öë.h
>

48 
	~<time.h
>

50 
	~"magic.h
"

53 
do_lock_ex˛usive
();

54 
do_u∆ock
();

	@pppd/plugins/radius/ip_util.c

17 
	~<ö˛udes.h
>

18 
	~<ødius˛õ¡.h
>

29 
UINT4
 
	$rc_gë_ùaddr
 (*
ho°
)

31 
ho°ít
 *
hp
;

33 i‡(
	`rc_good_ùaddr
 (
ho°
) == 0)

35  
	`¡ohl
(
	`öë_addr
 (
ho°
));

37 i‡((
hp
 = 
	`gëho°by«me
 (
ho°
)Ë=(
ho°ít
 *Ë
NULL
)

39 
	`îr‹
("rc_gë_ùaddr: couldn'àªsﬁvêho°«me: %s", 
ho°
);

40  ((
UINT4
) 0);

42  
	`¡ohl
((*(
UINT4
 *Ë
hp
->
h_addr
));

43 
	}
}

54 
	$rc_good_ùaddr
 (*
addr
)

56 
dŸ_cou¡
;

57 
digô_cou¡
;

59 i‡(
addr
 =
NULL
)

62 
dŸ_cou¡
 = 0;

63 
digô_cou¡
 = 0;

64 *
addr
 != '\0' && *addr != ' ')

66 i‡(*
addr
 == '.')

68 
dŸ_cou¡
++;

69 
digô_cou¡
 = 0;

71 i‡(!
	`isdigô
 (*
addr
))

73 
dŸ_cou¡
 = 5;

77 
digô_cou¡
++;

78 i‡(
digô_cou¡
 > 3)

80 
dŸ_cou¡
 = 5;

83 
addr
++;

85 i‡(
dŸ_cou¡
 != 3)

93 
	}
}

103 c⁄° *
	$rc_ù_ho°«me
 (
UINT4
 
h_ùaddr
)

105 
ho°ít
 *
hp
;

106 
UINT4
 
n_ùaddr
 = 
	`ht⁄l
 (
h_ùaddr
);

108 i‡((
hp
 = 
	`gëho°byaddr
 ((*Ë&
n_ùaddr
,  (
ö_addr
),

109 
AF_INET
)Ë=
NULL
) {

110 
	`îr‹
("rc_ù_ho°«me: couldn'àlook u∞ho° byáddr: %08lX", 
h_ùaddr
);

113  ((
hp
==
NULL
)?"unknown":hp->
h_«me
);

114 
	}
}

125 
UINT4
 
	$rc_own_ùaddªss
()

127 
UINT4
 
this_ho°_ùaddr
 = 0;

129 i‡(!
this_ho°_ùaddr
) {

130 i‡((
this_ho°_ùaddr
 = 
	`rc_gë_ùaddr
 (
ho°«me
)) == 0) {

131 
	`îr‹
("rc_own_ipaddress: couldn't get own IPáddress");

136  
this_ho°_ùaddr
;

137 
	}
}

149 
UINT4
 
	$rc_own_böd_ùaddªss
()

151 *
bödaddr
;

152 
UINT4
 
rvÆ
 = 0;

154 i‡((
bödaddr
 = 
	`rc_c⁄f_°r
("bödaddr")Ë=
NULL
 ||

155 
	`°rcmp
(
	`rc_c⁄f_°r
("bindaddr"), "*") == 0) {

156 
rvÆ
 = 
INADDR_ANY
;

158 i‡((
rvÆ
 = 
	`rc_gë_ùaddr
(
bödaddr
)) == 0) {

159 
	`îr‹
("rc_own_bind_ipaddress: couldn't get IPáddress from bindaddr");

160 
rvÆ
 = 
INADDR_ANY
;

164  
rvÆ
;

165 
	}
}

	@pppd/plugins/radius/lock.c

12 
	~"ö˛udes.h
"

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

16 
	$do_lock_ex˛usive
(
fd
)

18 
Êock
 
Ê
;

19 
ªs
;

21 
	`mem£t
((*)&
Ê
, 0, (fl));

23 
Ê
.
l_ty≥
 = 
F_WRLCK
;

24 
Ê
.
l_whí˚
 = fl.
l_°¨t
 = 0;

25 
Ê
.
l_Àn
 = 0;

27 
ªs
 = 
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
);

29 i‡((
ªs
 =-1Ë&& (
î∫o
 =
EAGAIN
))

30 
î∫o
 = 
EWOULDBLOCK
;

32  
ªs
;

33 
	}
}

35 
	$do_u∆ock
(
fd
)

37 
Êock
 
Ê
;

39 
	`mem£t
((*)&
Ê
, 0, (fl));

41 
Ê
.
l_ty≥
 = 
F_UNLCK
;

42 
Ê
.
l_whí˚
 = fl.
l_°¨t
 = 0;

43 
Ê
.
l_Àn
 = 0;

45  
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
);

46 
	}
}

	@pppd/plugins/radius/md5.c

4 
	~"md5.h
"

6 
	$rc_md5_ˇlc
 (*
ouçut
, *
öput
, 
öÀn
)

8 
MD5_CTX
 
c⁄ãxt
;

10 
	`MD5_Inô
 (&
c⁄ãxt
);

11 
	`MD5_Upd©e
 (&
c⁄ãxt
, 
öput
, 
öÀn
);

12 
	`MD5_FöÆ
 (
ouçut
, &
c⁄ãxt
);

13 
	}
}

	@pppd/plugins/radius/options.h

12 
	#OPTION_LEN
 64

	)

15 
	#OT_STR
 (1<<0Ë

	)

16 
	#OT_INT
 (1<<1Ë

	)

17 
	#OT_SRV
 (1<<2Ë

	)

18 
	#OT_AUO
 (1<<3Ë

	)

20 
	#OT_ANY
 (()~0Ë

	)

23 
	#ST_UNDEF
 (1<<0Ë

	)

25 
	s_›ti⁄
 {

26 
	m«me
[
OPTION_LEN
];

27 
	mty≥
, 
	m°©us
;

28 *
	mvÆ
;

29 } 
	tOPTION
;

31 
SERVER
 
	gac˘£rvî
 = {0};

32 
SERVER
 
	gauth£rvî
 = {0};

34 
	gdeÁu…_åõs
 = 4;

35 
	gdeÁu…_timeout
 = 60;

37 
OPTION
 
	gc⁄fig_›ti⁄s
[] = {

39 {"c⁄fig_fûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

41 {"auth_‹dî", 
OT_AUO
, 
ST_UNDEF
, 
NULL
},

42 {"logö_åõs", 
OT_INT
, 
ST_UNDEF
, &
deÁu…_åõs
},

43 {"logö_timeout", 
OT_INT
, 
ST_UNDEF
, &
deÁu…_timeout
},

44 {"nﬁogö", 
OT_STR
, 
ST_UNDEF
, "/etc/nologin"},

45 {"issue", 
OT_STR
, 
ST_UNDEF
, "/etc/radiusclient/issue"},

47 {"auth£rvî", 
OT_SRV
, 
ST_UNDEF
, &
auth£rvî
},

48 {"ac˘£rvî", 
OT_SRV
, 
ST_UNDEF
, &
ac˘£rvî
},

49 {"£rvîs", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

50 {"di˘i⁄¨y", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

51 {"logö_ødius", 
OT_STR
, 
ST_UNDEF
, "/usr/sbin/login.radius"},

52 {"£qfûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

53 {"m≠fûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

54 {"deÁu…_ªÆm", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

55 {"ødius_timeout", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

56 {"ødius_ªåõs", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

57 {"«s_idítifõr", 
OT_STR
, 
ST_UNDEF
, ""},

58 {"bödaddr", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

60 {"logö_loˇl", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

63 
	gnum_›ti⁄s
 = (((
c⁄fig_›ti⁄s
))/((config_options[0])));

	@pppd/plugins/radius/pathnames.h

17 #i‚de‡
PATHNAMES_H


18 
	#PATHNAMES_H


	)

20 
	#_PATH_DEV_URANDOM
 "/dev/uøndom"

	)

21 
	#_PATH_ETC_ISSUE
 "/ëc/issue"

	)

24 #i‚de‡
_PATH_ETC_RADIUSCLIENT_CONF


25 
	#_PATH_ETC_RADIUSCLIENT_CONF
 "/ëc/ødius˛õ¡.c⁄f"

	)

	@pppd/plugins/radius/radattr.c

17 c⁄° 
	gRCSID
[] =

20 
	~"µpd.h
"

21 
	~"ødius˛õ¡.h
"

22 
	~<°dio.h
>

24 (*
ødius_©åibuãs_hook
)(
VALUE_PAIR
 *);

25 
	`¥öt_©åibuãs
(
VALUE_PAIR
 *);

26 
	`˛ónup
(*
›aque
, 
¨g
);

28 
µpd_vîsi⁄
[] = 
VERSION
;

40 
	$∂ugö_öô
()

42 
ødius_©åibuãs_hook
 = 
¥öt_©åibuãs
;

48 
	`add_nŸifõr
(&
lök_down_nŸifõr
, 
˛ónup
, 
NULL
);

52 
	`add_nŸifõr
(&
exônŸify
, 
˛ónup
, 
NULL
);

53 
	`öfo
("RADATTRÖlugin initialized.");

54 
	}
}

67 
	$¥öt_©åibuãs
(
VALUE_PAIR
 *
vp
)

69 
FILE
 *
Â
;

70 
‚ame
[512];

71 
«me
[2048];

72 
vÆue
[2048];

73 
˙t
 = 0;

75 
	`¶¥ötf
(
‚ame
, (‚ame), "/v¨/run/ød©å.%s", 
i‚ame
);

76 
Â
 = 
	`f›í
(
‚ame
, "w");

77 i‡(!
Â
) {

78 
	`w¨n
("ød©åÖlugö: CouldÇŸ o≥¿%†f‹ wrôög: %m", 
‚ame
);

82 ; 
vp
; vp=vp->
√xt
) {

83 i‡(
	`rc_av∑ú_to°r
(
vp
, 
«me
, “ame), 
vÆue
, (value)) < 0) {

86 
	`Ârötf
(
Â
, "%†%s\n", 
«me
, 
vÆue
);

87 
˙t
++;

89 
	`f˛o£
(
Â
);

90 
	`dbglog
("RADATTRÖlugö wrŸê%dÜöe(sËtÿfûê%s.", 
˙t
, 
‚ame
);

91 
	}
}

104 
	$˛ónup
(*
›aque
, 
¨g
)

106 
‚ame
[512];

108 
	`¶¥ötf
(
‚ame
, (‚ame), "/v¨/run/ød©å.%s", 
i‚ame
);

109 (Ë
	`ªmove
(
‚ame
);

110 
	`dbglog
("RADATTRÖlugöÑemoved fûê%s.", 
‚ame
);

111 
	}
}

	@pppd/plugins/radius/radius.c

26 c⁄° 
	gRCSID
[] =

29 
	~"µpd.h
"

30 
	~"ch≠-√w.h
"

31 #ifde‡
CHAPMS


32 
	~"ch≠_ms.h
"

33 #ifde‡
MPPE


34 
	~"md5.h
"

37 
	~"ødius˛õ¡.h
"

38 
	~"fsm.h
"

39 
	~"ù˝.h
"

40 
	~<sy¶og.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/time.h
>

43 
	~<°rög.h
>

44 
	~<√töë/ö.h
>

45 
	~<°dlib.h
>

47 
	#BUF_LEN
 1024

	)

49 
	#MD5_HASH_SIZE
 16

	)

51 
	#MSDNS
 1

	)

53 *
	gc⁄fig_fûe
 = 
NULL
;

54 
add_avp
(**);

55 
	savp›t
 {

56 *
	mvp°r
;

57 
avp›t
 *
	m√xt
;

58 } *
	gavp›t
 = 
NULL
;

59 
boﬁ
 
	gp‹äumm≠
 = 0;

61 
›ti⁄_t
 
	gO±i⁄s
[] = {

62 { "ødius-c⁄fig-fûe", 
o_°rög
, &
c⁄fig_fûe
 },

63 { "av∑ú", 
o_•ecül
, 
add_avp
 },

64 { "m≠-to-ây«me", 
o_boﬁ
, &
p‹äumm≠
,

65 "Së Radiu†NAS-P‹à©åibuã vÆuêvüÜibødius˛õ¡Üibøry", 
OPT_PRIO
 | 1 },

66 { "m≠-to-i‚ame", 
o_boﬁ
, &
p‹äumm≠
,

67 "Së Radiu†NAS-P‹à©åibuãÅÿnumbîá†ö i¡îÁ˚Çamê(DeÁu…)", 
OPT_PRIOSUB
 | 0 },

68 { 
NULL
 }

71 
ødius_£¸ë_check
();

72 
ødius_∑p_auth
(*
u£r
,

73 *
∑sswd
,

74 **
msgp
,

75 
w‹dli°
 **
∑ddrs
,

76 
w‹dli°
 **
p›ts
);

77 
ødius_ch≠_vîify
(*
u£r
, *
ou∫ame
, 
id
,

78 
ch≠_dige°_ty≥
 *
dige°
,

79 *
chÆÀnge
,

80 *
ª•⁄£
,

81 *
mesßge
, 
mesßge_•a˚
);

83 
ødius_ù_up
(*
›aque
, 
¨g
);

84 
ødius_ù_down
(*
›aque
, 
¨g
);

85 
make_u£∫ame_ªÆm
(*
u£r
);

86 
ødius_£ç¨ams
(
VALUE_PAIR
 *
vp
, *
msg
, 
REQUEST_INFO
 *
ªq_öfo
,

87 
ch≠_dige°_ty≥
 *
dige°
,

88 *
chÆÀnge
,

89 *
mesßge
, 
mesßge_•a˚
);

90 
ødius_choo£_ù
(
u_öt32_t
 *
addΩ
);

91 
ødius_öô
(*
msg
);

92 
gë_˛õ¡_p‹t
(*
i‚ame
);

93 
ødius_Ælowed_addªss
(
u_öt32_t
 
addr
);

94 
ødius_ac˘_öãrim
(*);

95 #ifde‡
MPPE


96 
ødius_£tmµekeys
(
VALUE_PAIR
 *
vp
, 
REQUEST_INFO
 *
ªq_öfo
,

98 
ødius_£tmµekeys2
(
VALUE_PAIR
 *
vp
, 
REQUEST_INFO
 *
ªq_öfo
);

101 #i‚de‡
MAXSESSIONID


102 
	#MAXSESSIONID
 32

	)

105 #i‚de‡
MAXCLASSLEN


106 
	#MAXCLASSLEN
 500

	)

109 
	sødius_°©e
 {

110 
	maccou¡ög_°¨ãd
;

111 
	möôülized
;

112 
	m˛õ¡_p‹t
;

113 
	mchoo£_ù
;

114 
	m™y_ù_addr_ok
;

115 
	md⁄e_ch≠_⁄˚
;

116 
u_öt32_t
 
	mù_addr
;

117 
	mu£r
[
MAXNAMELEN
];

118 
	mc⁄fig_fûe
[
MAXPATHLEN
];

119 
	m£ssi⁄_id
[
MAXSESSIONID
 + 1];

120 
time_t
 
	m°¨t_time
;

121 
	mac˘_öãrim_öãrvÆ
;

122 
SERVER
 *
	mauth£rvî
;

123 
SERVER
 *
	mac˘£rvî
;

124 
	m˛ass_Àn
;

125 
	m˛ass
[
MAXCLASSLEN
];

126 
VALUE_PAIR
 *
	mavp
;

129 (*
ødius_©åibuãs_hook
)(
VALUE_PAIR
 *Ë
NULL
;

133 (*
ødius_¥e_auth_hook
)(c⁄° *
u£r
,

134 
SERVER
 **
auth£rvî
,

135 
SERVER
 **
ac˘£rvî
Ë
NULL
;

137 
ødius_°©e
 
r°©e
;

139 
µpd_vîsi⁄
[] = 
VERSION
;

151 
	$∂ugö_öô
()

153 
∑p_check_hook
 = 
ødius_£¸ë_check
;

154 
∑p_auth_hook
 = 
ødius_∑p_auth
;

156 
ch≠_check_hook
 = 
ødius_£¸ë_check
;

157 
ch≠_vîify_hook
 = 
ødius_ch≠_vîify
;

159 
ù_choo£_hook
 = 
ødius_choo£_ù
;

160 
Ælowed_addªss_hook
 = 
ødius_Ælowed_addªss
;

162 
	`add_nŸifõr
(&
ù_up_nŸifõr
, 
ødius_ù_up
, 
NULL
);

163 
	`add_nŸifõr
(&
ù_down_nŸifõr
, 
ødius_ù_down
, 
NULL
);

165 
	`mem£t
(&
r°©e
, 0, (rstate));

167 
	`°æ˝y
(
r°©e
.
c⁄fig_fûe
, "/etc/radiusclient/radiusclient.conf",

168 (
r°©e
.
c⁄fig_fûe
));

170 
	`add_›ti⁄s
(
O±i⁄s
);

172 
	`öfo
("RADIUSÖlugin initialized.");

173 
	}
}

185 
	$add_avp
(**
¨gv
)

187 
avp›t
 *
p
 = 
	`mÆloc
((avpopt));

190 
p
->
vp°r
 = 
	`°rdup
(*
¨gv
);

191 
p
->
√xt
 = 
avp›t
;

192 
avp›t
 = 
p
;

195 
	}
}

208 
	$ødius_£¸ë_check
()

211 
	}
}

223 
	$ødius_choo£_ù
(
u_öt32_t
 *
addΩ
)

225 i‡(
r°©e
.
choo£_ù
) {

226 *
addΩ
 = 
r°©e
.
ù_addr
;

228 
	}
}

244 
	$ødius_∑p_auth
(*
u£r
,

245 *
∑sswd
,

246 **
msgp
,

247 
w‹dli°
 **
∑ddrs
,

248 
w‹dli°
 **
p›ts
)

250 
VALUE_PAIR
 *
£nd
, *
ª˚ived
;

251 
UINT4
 
av_ty≥
;

252 
ªsu…
;

253 
ødius_msg
[
BUF_LEN
];

255 
ødius_msg
[0] = 0;

256 *
msgp
 = 
ødius_msg
;

258 i‡(
	`ødius_öô
(
ødius_msg
) < 0) {

263 
	`make_u£∫ame_ªÆm
(
u£r
);

265 i‡(
ødius_¥e_auth_hook
) {

266 
	`ødius_¥e_auth_hook
(
r°©e
.
u£r
,

267 &
r°©e
.
auth£rvî
,

268 &
r°©e
.
ac˘£rvî
);

271 
£nd
 = 
NULL
;

272 
ª˚ived
 = 
NULL
;

276 
r°©e
.
˛õ¡_p‹t
 = 
	`gë_˛õ¡_p‹t
(
p‹äumm≠
 ? 
dev«m
 : 
i‚ame
);

278 
av_ty≥
 = 
PW_FRAMED
;

279 
	`rc_av∑ú_add
(&
£nd
, 
PW_SERVICE_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

281 
av_ty≥
 = 
PW_PPP
;

282 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_PROTOCOL
, &
av_ty≥
, 0, 
VENDOR_NONE
);

284 
	`rc_av∑ú_add
(&
£nd
, 
PW_USER_NAME
, 
r°©e
.
u£r
 , 0, 
VENDOR_NONE
);

285 
	`rc_av∑ú_add
(&
£nd
, 
PW_USER_PASSWORD
, 
∑sswd
, 0, 
VENDOR_NONE
);

286 i‡(*
ªmŸe_numbî
) {

287 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ªmŸe_numbî
, 0,

288 
VENDOR_NONE
);

289 } i‡(
ù∑øm
)

290 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ù∑øm
, 0, 
VENDOR_NONE
);

293 i‡(
r°©e
.
avp
)

294 
	`rc_av∑ú_ö£π
(&
£nd
, 
NULL
, 
	`rc_av∑ú_c›y
(
r°©e
.
avp
));

296 i‡(
r°©e
.
auth£rvî
) {

297 
ªsu…
 = 
	`rc_auth_usög_£rvî
(
r°©e
.
auth£rvî
,

298 
r°©e
.
˛õ¡_p‹t
, 
£nd
,

299 &
ª˚ived
, 
ødius_msg
, 
NULL
);

301 
ªsu…
 = 
	`rc_auth
(
r°©e
.
˛õ¡_p‹t
, 
£nd
, &
ª˚ived
, 
ødius_msg
, 
NULL
);

304 i‡(
ªsu…
 =
OK_RC
) {

305 i‡(
	`ødius_£ç¨ams
(
ª˚ived
, 
ødius_msg
, 
NULL
, NULL, NULL, NULL, 0) < 0) {

306 
ªsu…
 = 
ERROR_RC
;

311 
	`rc_av∑ú_‰ì
(
ª˚ived
);

312 
	`rc_av∑ú_‰ì
(
£nd
);

314  (
ªsu…
 =
OK_RC
) ? 1 : 0;

315 
	}
}

334 
	$ødius_ch≠_vîify
(*
u£r
, *
ou∫ame
, 
id
,

335 
ch≠_dige°_ty≥
 *
dige°
,

336 *
chÆÀnge
, *
ª•⁄£
,

337 *
mesßge
, 
mesßge_•a˚
)

339 
VALUE_PAIR
 *
£nd
, *
ª˚ived
;

340 
UINT4
 
av_ty≥
;

341 
ødius_msg
[
BUF_LEN
];

342 
ªsu…
;

343 
chÆÀnge_Àn
, 
ª•⁄£_Àn
;

344 
u_ch¨
 
˝assw‹d
[
MAX_RESPONSE_LEN
 + 1];

345 #ifde‡
MPPE


347 
REQUEST_INFO
 
ªque°_öfo
, *
ªq_öfo
 = &request_info;

349 
REQUEST_INFO
 *
ªq_öfo
 = 
NULL
;

352 
chÆÀnge_Àn
 = *
chÆÀnge
++;

353 
ª•⁄£_Àn
 = *
ª•⁄£
++;

355 
ødius_msg
[0] = 0;

357 i‡(
	`ødius_öô
(
ødius_msg
) < 0) {

358 
	`îr‹
("%s", 
ødius_msg
);

363 i‡((
dige°
->
code
 !
CHAP_MD5
)

364 #ifde‡
CHAPMS


365 && (
dige°
->
code
 !
CHAP_MICROSOFT
)

366 && (
dige°
->
code
 !
CHAP_MICROSOFT_V2
)

369 
	`îr‹
("RADIUS: ChÆÀngêty≥ %u unsuµ‹ãd", 
dige°
->
code
);

374 i‡(!
r°©e
.
d⁄e_ch≠_⁄˚
) {

375 
	`make_u£∫ame_ªÆm
(
u£r
);

376 
r°©e
.
˛õ¡_p‹t
 = 
	`gë_˛õ¡_p‹t
 (
p‹äumm≠
 ? 
dev«m
 : 
i‚ame
);

377 i‡(
ødius_¥e_auth_hook
) {

378 
	`ødius_¥e_auth_hook
(
r°©e
.
u£r
,

379 &
r°©e
.
auth£rvî
,

380 &
r°©e
.
ac˘£rvî
);

384 
£nd
 = 
ª˚ived
 = 
NULL
;

386 
av_ty≥
 = 
PW_FRAMED
;

387 
	`rc_av∑ú_add
 (&
£nd
, 
PW_SERVICE_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

389 
av_ty≥
 = 
PW_PPP
;

390 
	`rc_av∑ú_add
 (&
£nd
, 
PW_FRAMED_PROTOCOL
, &
av_ty≥
, 0, 
VENDOR_NONE
);

392 
	`rc_av∑ú_add
 (&
£nd
, 
PW_USER_NAME
, 
r°©e
.
u£r
 , 0, 
VENDOR_NONE
);

397 
dige°
->
code
) {

398 
CHAP_MD5
:

400 i‡(
ª•⁄£_Àn
 !
MD5_HASH_SIZE
)

402 
˝assw‹d
[0] = 
id
;

403 
	`mem˝y
(&
˝assw‹d
[1], 
ª•⁄£
, 
MD5_HASH_SIZE
);

405 
	`rc_av∑ú_add
(&
£nd
, 
PW_CHAP_CHALLENGE
,

406 
chÆÀnge
, 
chÆÀnge_Àn
, 
VENDOR_NONE
);

407 
	`rc_av∑ú_add
(&
£nd
, 
PW_CHAP_PASSWORD
,

408 
˝assw‹d
, 
MD5_HASH_SIZE
 + 1, 
VENDOR_NONE
);

411 #ifde‡
CHAPMS


412 
CHAP_MICROSOFT
:

415 
u_ch¨
 *
p
 = 
˝assw‹d
;

417 i‡(
ª•⁄£_Àn
 !
MS_CHAP_RESPONSE_LEN
)

419 *
p
++ = 
id
;

421 *
p
++ = 
ª•⁄£
[
MS_CHAP_USENT
];

422 
	`mem˝y
(
p
, 
ª•⁄£
, 
MS_CHAP_LANMANRESP_LEN
 + 
MS_CHAP_NTRESP_LEN
);

424 
	`rc_av∑ú_add
(&
£nd
, 
PW_MS_CHAP_CHALLENGE
,

425 
chÆÀnge
, 
chÆÀnge_Àn
, 
VENDOR_MICROSOFT
);

426 
	`rc_av∑ú_add
(&
£nd
, 
PW_MS_CHAP_RESPONSE
,

427 
˝assw‹d
, 
MS_CHAP_RESPONSE_LEN
 + 1, 
VENDOR_MICROSOFT
);

431 
CHAP_MICROSOFT_V2
:

434 
u_ch¨
 *
p
 = 
˝assw‹d
;

436 i‡(
ª•⁄£_Àn
 !
MS_CHAP2_RESPONSE_LEN
)

438 *
p
++ = 
id
;

440 *
p
++ = 
ª•⁄£
[
MS_CHAP2_FLAGS
];

441 
	`mem˝y
(
p
, 
ª•⁄£
, (
MS_CHAP2_PEER_CHAL_LEN
 + 
MS_CHAP2_RESERVED_LEN


442 + 
MS_CHAP2_NTRESP_LEN
));

444 
	`rc_av∑ú_add
(&
£nd
, 
PW_MS_CHAP_CHALLENGE
,

445 
chÆÀnge
, 
chÆÀnge_Àn
, 
VENDOR_MICROSOFT
);

446 
	`rc_av∑ú_add
(&
£nd
, 
PW_MS_CHAP2_RESPONSE
,

447 
˝assw‹d
, 
MS_CHAP2_RESPONSE_LEN
 + 1, 
VENDOR_MICROSOFT
);

453 i‡(*
ªmŸe_numbî
) {

454 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ªmŸe_numbî
, 0,

455 
VENDOR_NONE
);

456 } i‡(
ù∑øm
)

457 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ù∑øm
, 0, 
VENDOR_NONE
);

460 i‡(
r°©e
.
avp
)

461 
	`rc_av∑ú_ö£π
(&
£nd
, 
NULL
, 
	`rc_av∑ú_c›y
(
r°©e
.
avp
));

467 i‡(
r°©e
.
auth£rvî
) {

468 
ªsu…
 = 
	`rc_auth_usög_£rvî
(
r°©e
.
auth£rvî
,

469 
r°©e
.
˛õ¡_p‹t
, 
£nd
,

470 &
ª˚ived
, 
ødius_msg
, 
ªq_öfo
);

472 
ªsu…
 = 
	`rc_auth
(
r°©e
.
˛õ¡_p‹t
, 
£nd
, &
ª˚ived
, 
ødius_msg
,

473 
ªq_öfo
);

476 
	`°æ˝y
(
mesßge
, 
ødius_msg
, 
mesßge_•a˚
);

478 i‡(
ªsu…
 =
OK_RC
) {

479 i‡(!
r°©e
.
d⁄e_ch≠_⁄˚
) {

480 i‡(
	`ødius_£ç¨ams
(
ª˚ived
, 
ødius_msg
, 
ªq_öfo
, 
dige°
,

481 
chÆÀnge
, 
mesßge
, 
mesßge_•a˚
) < 0) {

482 
	`îr‹
("%s", 
ødius_msg
);

483 
ªsu…
 = 
ERROR_RC
;

485 
r°©e
.
d⁄e_ch≠_⁄˚
 = 1;

490 
	`rc_av∑ú_‰ì
(
ª˚ived
);

491 
	`rc_av∑ú_‰ì
 (
£nd
);

492  (
ªsu…
 =
OK_RC
);

493 
	}
}

506 
	$make_u£∫ame_ªÆm
(*
u£r
)

508 *
deÁu…_ªÆm
;

510 i‡–
u£r
 !
NULL
 ) {

511 
	`°æ˝y
(
r°©e
.
u£r
, user, (rstate.user));

513 
r°©e
.
u£r
[0] = 0;

516 
deÁu…_ªÆm
 = 
	`rc_c⁄f_°r
("default_realm");

518 i‡(!
	`°rchr
(
r°©e
.
u£r
, '@') &&

519 
deÁu…_ªÆm
 &&

520 (*
deÁu…_ªÆm
 != '\0')) {

521 
	`°æˇt
(
r°©e
.
u£r
, "@", (rstate.user));

522 
	`°æˇt
(
r°©e
.
u£r
, 
deÁu…_ªÆm
, (rstate.user));

524 
	}
}

537 
	$ødius_£ç¨ams
(
VALUE_PAIR
 *
vp
, *
msg
, 
REQUEST_INFO
 *
ªq_öfo
,

538 
ch≠_dige°_ty≥
 *
dige°
, *
chÆÀnge
,

539 *
mesßge
, 
mesßge_•a˚
)

541 
u_öt32_t
 
ªmŸe
;

542 
ms_ch≠2_suc˚ss
 = 0;

543 #ifde‡
MPPE


544 
mµe_íc_keys
 = 0;

545 
mµe_íc_pﬁicy
 = 0;

546 
mµe_íc_ty≥s
 = 0;

548 #ifde‡
MSDNS


549 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

550 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[0];

551 
gŸ_msdns_1
 = 0;

552 
gŸ_msdns_2
 = 0;

553 
gŸ_wös_1
 = 0;

554 
gŸ_wös_2
 = 0;

558 i‡(
ødius_©åibuãs_hook
) {

559 (*
ødius_©åibuãs_hook
)(
vp
);

567 
vp
) {

568 i‡(
vp
->
víd‹code
 =
VENDOR_NONE
) {

569 
vp
->
©åibuã
) {

570 
PW_SERVICE_TYPE
:

573 i‡(
vp
->
lvÆue
 !
PW_FRAMED
) {

574 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: wrong serviceÅype %ld for %s",

575 
vp
->
lvÆue
, 
r°©e
.
u£r
);

580 
PW_FRAMED_PROTOCOL
:

583 i‡(
vp
->
lvÆue
 !
PW_PPP
) {

584 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: wrong framedÖrotocol %ld for %s",

585 
vp
->
lvÆue
, 
r°©e
.
u£r
);

590 
PW_SESSION_TIMEOUT
:

592 
maxc⁄√˘
 = 
vp
->
lvÆue
;

594 
PW_FILTER_ID
:

596 
	`s¸ùt_£ãnv
("RADIUS_FILTER_ID", 
vp
->
°rvÆue
, 1);

598 
PW_FRAMED_ROUTE
:

600 
	`s¸ùt_£ãnv
("RADIUS_FRAMED_ROUTE", 
vp
->
°rvÆue
, 1);

602 
PW_IDLE_TIMEOUT
:

604 
idÀ_time_limô
 = 
vp
->
lvÆue
;

606 #ifde‡
MAXOCTETS


607 
PW_SESSION_OCTETS_LIMIT
:

609 
maxo˘ës
 = 
vp
->
lvÆue
;

611 
PW_OCTETS_DIRECTION
:

613 
maxo˘ës_dú
 = ( 
vp
->
lvÆue
 > 4 ) ? 0 : vp->lvalue ;

616 
PW_ACCT_INTERIM_INTERVAL
:

618 
r°©e
.
ac˘_öãrim_öãrvÆ
 = 
vp
->
lvÆue
;

621 i‡(
r°©e
.
ac˘_öãrim_öãrvÆ
 &&

622 
r°©e
.
ac˘_öãrim_öãrvÆ
 < 60) {

623 
r°©e
.
ac˘_öãrim_öãrvÆ
 = 60;

626 
PW_FRAMED_IP_ADDRESS
:

628 
ªmŸe
 = 
vp
->
lvÆue
;

629 i‡(
ªmŸe
 == 0xffffffff) {

631 
r°©e
.
™y_ù_addr_ok
 = 1;

632 } i‡(
ªmŸe
 != 0xfffffffe) {

634 
ªmŸe
 = 
	`ht⁄l
(
vp
->
lvÆue
);

635 i‡(
	`bad_ù_adrs
 (
ªmŸe
)) {

636 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: badÑemote IPáddress %I for %s",

637 
ªmŸe
, 
r°©e
.
u£r
);

640 
r°©e
.
choo£_ù
 = 1;

641 
r°©e
.
ù_addr
 = 
ªmŸe
;

644 
PW_NAS_IP_ADDRESS
:

645 
wo
->
ouøddr
 = 
	`ht⁄l
(
vp
->
lvÆue
);

647 
PW_CLASS
:

649 i‡(
vp
->
lvÆue
 <
MAXCLASSLEN
) {

650 
r°©e
.
˛ass_Àn
=
vp
->
lvÆue
;

651 
	`mem˝y
(
r°©e
.
˛ass
, 
vp
->
°rvÆue
,Ñ°©e.
˛ass_Àn
);

657 } i‡(
vp
->
víd‹code
 =
VENDOR_MICROSOFT
) {

658 #ifde‡
CHAPMS


659 
vp
->
©åibuã
) {

660 
PW_MS_CHAP2_SUCCESS
:

661 i‡((
vp
->
lvÆue
 !43Ë|| 
	`°∫cmp
(vp->
°rvÆue
 + 1, "S=", 2)) {

662 
	`¶¥ötf
(
msg
,
BUF_LEN
,"RADIUS: bad MS-CHAP2-SuccessÖacket");

665 i‡(
mesßge
 !
NULL
)

666 
	`°æ˝y
(
mesßge
, 
vp
->
°rvÆue
 + 1, 
mesßge_•a˚
);

667 
ms_ch≠2_suc˚ss
 = 1;

670 #ifde‡
MPPE


671 
PW_MS_CHAP_MPPE_KEYS
:

672 i‡(
	`ødius_£tmµekeys
(
vp
, 
ªq_öfo
, 
chÆÀnge
) < 0) {

673 
	`¶¥ötf
(
msg
, 
BUF_LEN
,

677 
mµe_íc_keys
 = 1;

680 
PW_MS_MPPE_SEND_KEY
:

681 
PW_MS_MPPE_RECV_KEY
:

682 i‡(
	`ødius_£tmµekeys2
(
vp
, 
ªq_öfo
) < 0) {

683 
	`¶¥ötf
(
msg
, 
BUF_LEN
,

685 (
vp
->
©åibuã
 =
PW_MS_MPPE_SEND_KEY
)?

689 
mµe_íc_keys
 = 1;

692 
PW_MS_MPPE_ENCRYPTION_POLICY
:

693 
mµe_íc_pﬁicy
 = 
vp
->
lvÆue
;

696 
PW_MS_MPPE_ENCRYPTION_TYPES
:

697 
mµe_íc_ty≥s
 = 
vp
->
lvÆue
;

701 #ifde‡
MSDNS


702 
PW_MS_PRIMARY_DNS_SERVER
:

703 
ao
->
dnßddr
[0] = 
	`ht⁄l
(
vp
->
lvÆue
);

704 
gŸ_msdns_1
 = 1;

705 i‡(!
gŸ_msdns_2
)

706 
ao
->
dnßddr
[1] =áo->dnsaddr[0];

708 
PW_MS_SECONDARY_DNS_SERVER
:

709 
ao
->
dnßddr
[1] = 
	`ht⁄l
(
vp
->
lvÆue
);

710 
gŸ_msdns_2
 = 1;

711 i‡(!
gŸ_msdns_1
)

712 
ao
->
dnßddr
[0] =áo->dnsaddr[1];

714 
PW_MS_PRIMARY_NBNS_SERVER
:

715 
ao
->
wößddr
[0] = 
	`ht⁄l
(
vp
->
lvÆue
);

716 
gŸ_wös_1
 = 1;

717 i‡(!
gŸ_wös_2
)

718 
ao
->
wößddr
[1] =áo->winsaddr[0];

720 
PW_MS_SECONDARY_NBNS_SERVER
:

721 
ao
->
wößddr
[1] = 
	`ht⁄l
(
vp
->
lvÆue
);

722 
gŸ_wös_2
 = 1;

723 i‡(!
gŸ_wös_1
)

724 
ao
->
wößddr
[0] =áo->winsaddr[1];

730 
vp
 = vp->
√xt
;

734 i‡(
dige°
 && (dige°->
code
 =
CHAP_MICROSOFT_V2
Ë&& !
ms_ch≠2_suc˚ss
)

737 #ifde‡
MPPE


742 i‡(
mµe_íc_pﬁicy
 && 
mµe_íc_keys
) {

743 
mµe_keys_£t
 = 1;

745 i‡(
mµe_íc_ty≥s
)

746 
	`£t_mµe_íc_ty≥s
(
mµe_íc_pﬁicy
, 
mµe_íc_ty≥s
);

751 
	}
}

753 #ifde‡
MPPE


766 
	$ødius_£tmµekeys
(
VALUE_PAIR
 *
vp
, 
REQUEST_INFO
 *
ªq_öfo
,

767 *
chÆÀnge
)

769 
i
;

770 
MD5_CTX
 
C⁄ãxt
;

771 
u_ch¨
 
∂aö
[32];

772 
u_ch¨
 
buf
[16];

774 i‡(
vp
->
lvÆue
 != 32) {

775 
	`îr‹
("RADIUS: IncorrectáttributeÜength (%d) for MS-CHAP-MPPE-Keys",

776 
vp
->
lvÆue
);

780 
	`mem˝y
(
∂aö
, 
vp
->
°rvÆue
, (plain));

782 
	`MD5_Inô
(&
C⁄ãxt
);

783 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
£¸ë
, 
	`°æí
(req_info->secret));

784 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
ªque°_ve˘‹
, 
AUTH_VECTOR_LEN
);

785 
	`MD5_FöÆ
(
buf
, &
C⁄ãxt
);

787 
i
 = 0; i < 16; i++)

788 
∂aö
[
i
] ^
buf
[i];

790 
	`MD5_Inô
(&
C⁄ãxt
);

791 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
£¸ë
, 
	`°æí
(req_info->secret));

792 
	`MD5_Upd©e
(&
C⁄ãxt
, 
vp
->
°rvÆue
, 16);

793 
	`MD5_FöÆ
(
buf
, &
C⁄ãxt
);

795 
i
 = 0; i < 16; i++)

796 
∂aö
[
i
 + 16] ^
buf
[i];

803 
	`mµe_£t_keys
(
chÆÀnge
, &
∂aö
[8]);

806 
	}
}

820 
	$ødius_£tmµekeys2
(
VALUE_PAIR
 *
vp
, 
REQUEST_INFO
 *
ªq_öfo
)

822 
i
;

823 
MD5_CTX
 
C⁄ãxt
;

824 
u_ch¨
 *
ß…
 = 
vp
->
°rvÆue
;

825 
u_ch¨
 *
¸y±
 = 
vp
->
°rvÆue
 + 2;

826 
u_ch¨
 
∂aö
[32];

827 
u_ch¨
 
buf
[
MD5_HASH_SIZE
];

828 *
ty≥
 = "Send";

830 i‡(
vp
->
©åibuã
 =
PW_MS_MPPE_RECV_KEY
)

831 
ty≥
 = "Recv";

833 i‡(
vp
->
lvÆue
 != 34) {

834 
	`îr‹
("RADIUS: IncorrectáttributeÜength (%d) for MS-MPPE-%s-Key",

835 
vp
->
lvÆue
, 
ty≥
);

839 i‡((
ß…
[0] & 0x80) == 0) {

840 
	`îr‹
("RADIUS: IŒegÆ sÆàvÆuêf‹ MS-MPPE-%s-Keyáâribuã", 
ty≥
);

844 
	`mem˝y
(
∂aö
, 
¸y±
, 32);

846 
	`MD5_Inô
(&
C⁄ãxt
);

847 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
£¸ë
, 
	`°æí
(req_info->secret));

848 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
ªque°_ve˘‹
, 
AUTH_VECTOR_LEN
);

849 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ß…
, 2);

850 
	`MD5_FöÆ
(
buf
, &
C⁄ãxt
);

852 
i
 = 0; i < 16; i++)

853 
∂aö
[
i
] ^
buf
[i];

855 i‡(
∂aö
[0] !(
mµe_£nd_key
) ) {

856 
	`îr‹
("RADIUS: Incorrect keyÜength (%d) for MS-MPPE-%s-Keyáttribute",

857 (Ë
∂aö
[0], 
ty≥
);

861 
	`MD5_Inô
(&
C⁄ãxt
);

862 
	`MD5_Upd©e
(&
C⁄ãxt
, 
ªq_öfo
->
£¸ë
, 
	`°æí
(req_info->secret));

863 
	`MD5_Upd©e
(&
C⁄ãxt
, 
¸y±
, 16);

864 
	`MD5_FöÆ
(
buf
, &
C⁄ãxt
);

866 
∂aö
[16] ^
buf
[0];

868 i‡(
vp
->
©åibuã
 =
PW_MS_MPPE_SEND_KEY
)

869 
	`mem˝y
(
mµe_£nd_key
, 
∂aö
 + 1, 16);

871 
	`mem˝y
(
mµe_ªcv_key
, 
∂aö
 + 1, 16);

874 
	}
}

887 
	$ødius_ac˘_°¨t
()

889 
UINT4
 
av_ty≥
;

890 
ªsu…
;

891 
VALUE_PAIR
 *
£nd
 = 
NULL
;

892 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[0];

893 
u_öt32_t
 
hißddr
;

895 i‡(!
r°©e
.
öôülized
) {

899 
r°©e
.
°¨t_time
 = 
	`time
(
NULL
);

901 
	`°æ˝y
(
r°©e
.
£ssi⁄_id
, 
	`rc_mksid
(), 
MAXSESSIONID
);

903 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_SESSION_ID
,

904 
r°©e
.
£ssi⁄_id
, 0, 
VENDOR_NONE
);

905 
	`rc_av∑ú_add
(&
£nd
, 
PW_USER_NAME
,

906 
r°©e
.
u£r
, 0, 
VENDOR_NONE
);

908 i‡(
r°©e
.
˛ass_Àn
 > 0)

909 
	`rc_av∑ú_add
(&
£nd
, 
PW_CLASS
,

910 
r°©e
.
˛ass
,Ñ°©e.
˛ass_Àn
, 
VENDOR_NONE
);

912 
av_ty≥
 = 
PW_STATUS_START
;

913 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_STATUS_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

915 
av_ty≥
 = 
PW_FRAMED
;

916 
	`rc_av∑ú_add
(&
£nd
, 
PW_SERVICE_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

918 
av_ty≥
 = 
PW_PPP
;

919 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_PROTOCOL
, &
av_ty≥
, 0, 
VENDOR_NONE
);

921 i‡(*
ªmŸe_numbî
) {

922 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
,

923 
ªmŸe_numbî
, 0, 
VENDOR_NONE
);

924 } i‡(
ù∑øm
)

925 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ù∑øm
, 0, 
VENDOR_NONE
);

927 
av_ty≥
 = 
PW_RADIUS
;

928 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_AUTHENTIC
, &
av_ty≥
, 0, 
VENDOR_NONE
);

931 
av_ty≥
 = ( 
usög_±y
 ? 
PW_VIRTUAL
 : ( 
sync_£rül
 ? 
PW_SYNC
 : 
PW_ASYNC
 ) );

932 
	`rc_av∑ú_add
(&
£nd
, 
PW_NAS_PORT_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

934 
hißddr
 = 
ho
->hisaddr;

935 
av_ty≥
 = 
	`ht⁄l
(
hißddr
);

936 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_IP_ADDRESS
 , &
av_ty≥
 , 0, 
VENDOR_NONE
);

939 i‡(
r°©e
.
avp
)

940 
	`rc_av∑ú_ö£π
(&
£nd
, 
NULL
, 
	`rc_av∑ú_c›y
(
r°©e
.
avp
));

942 i‡(
r°©e
.
ac˘£rvî
) {

943 
ªsu…
 = 
	`rc_ac˘_usög_£rvî
(
r°©e
.
ac˘£rvî
,

944 
r°©e
.
˛õ¡_p‹t
, 
£nd
);

946 
ªsu…
 = 
	`rc_ac˘
(
r°©e
.
˛õ¡_p‹t
, 
£nd
);

949 
	`rc_av∑ú_‰ì
(
£nd
);

951 i‡(
ªsu…
 !
OK_RC
) {

953 
	`sy¶og
(
LOG_WARNING
,

954 "Accou¡ög START faûed f‹ %s", 
r°©e
.
u£r
);

956 
r°©e
.
accou¡ög_°¨ãd
 = 1;

958 i‡(
r°©e
.
ac˘_öãrim_öãrvÆ
) {

959 
	`TIMEOUT
(
ødius_ac˘_öãrim
, 
NULL
, 
r°©e
.
ac˘_öãrim_öãrvÆ
);

962 
	}
}

974 
	$ødius_ac˘_°›
()

976 
UINT4
 
av_ty≥
;

977 
VALUE_PAIR
 *
£nd
 = 
NULL
;

978 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[0];

979 
u_öt32_t
 
hißddr
;

980 
ªsu…
;

982 i‡(!
r°©e
.
öôülized
) {

986 i‡(!
r°©e
.
accou¡ög_°¨ãd
) {

990 i‡(
r°©e
.
ac˘_öãrim_öãrvÆ
)

991 
	`UNTIMEOUT
(
ødius_ac˘_öãrim
, 
NULL
);

993 
r°©e
.
accou¡ög_°¨ãd
 = 0;

994 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_SESSION_ID
, 
r°©e
.
£ssi⁄_id
,

995 0, 
VENDOR_NONE
);

997 
	`rc_av∑ú_add
(&
£nd
, 
PW_USER_NAME
, 
r°©e
.
u£r
, 0, 
VENDOR_NONE
);

999 i‡(
r°©e
.
˛ass_Àn
 > 0)

1000 
	`rc_av∑ú_add
(&
£nd
, 
PW_CLASS
,

1001 
r°©e
.
˛ass
,Ñ°©e.
˛ass_Àn
, 
VENDOR_NONE
);

1003 
av_ty≥
 = 
PW_STATUS_STOP
;

1004 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_STATUS_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1006 
av_ty≥
 = 
PW_FRAMED
;

1007 
	`rc_av∑ú_add
(&
£nd
, 
PW_SERVICE_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1009 
av_ty≥
 = 
PW_PPP
;

1010 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_PROTOCOL
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1012 
av_ty≥
 = 
PW_RADIUS
;

1013 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_AUTHENTIC
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1016 i‡(
lök_°©s_vÆid
) {

1017 
av_ty≥
 = 
lök_c⁄√˘_time
;

1018 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_SESSION_TIME
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1020 
av_ty≥
 = 
lök_°©s
.
byãs_out
;

1021 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_OUTPUT_OCTETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1023 
av_ty≥
 = 
lök_°©s
.
byãs_ö
;

1024 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_INPUT_OCTETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1026 
av_ty≥
 = 
lök_°©s
.
pkts_out
;

1027 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_OUTPUT_PACKETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1029 
av_ty≥
 = 
lök_°©s
.
pkts_ö
;

1030 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_INPUT_PACKETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1033 i‡(*
ªmŸe_numbî
) {

1034 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
,

1035 
ªmŸe_numbî
, 0, 
VENDOR_NONE
);

1036 } i‡(
ù∑øm
)

1037 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ù∑øm
, 0, 
VENDOR_NONE
);

1039 
av_ty≥
 = ( 
usög_±y
 ? 
PW_VIRTUAL
 : ( 
sync_£rül
 ? 
PW_SYNC
 : 
PW_ASYNC
 ) );

1040 
	`rc_av∑ú_add
(&
£nd
, 
PW_NAS_PORT_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1042 
av_ty≥
 = 
PW_NAS_ERROR
;

1043  
°©us
 ) {

1044 
EXIT_OK
:

1045 
EXIT_USER_REQUEST
:

1046 
av_ty≥
 = 
PW_USER_REQUEST
;

1049 
EXIT_HANGUP
:

1050 
EXIT_PEER_DEAD
:

1051 
EXIT_CONNECT_FAILED
:

1052 
av_ty≥
 = 
PW_LOST_CARRIER
;

1055 
EXIT_INIT_FAILED
:

1056 
EXIT_OPEN_FAILED
:

1057 
EXIT_LOCK_FAILED
:

1058 
EXIT_PTYCMD_FAILED
:

1059 
av_ty≥
 = 
PW_PORT_ERROR
;

1062 
EXIT_PEER_AUTH_FAILED
:

1063 
EXIT_AUTH_TOPEER_FAILED
:

1064 
EXIT_NEGOTIATION_FAILED
:

1065 
EXIT_CNID_AUTH_FAILED
:

1066 
av_ty≥
 = 
PW_SERVICE_UNAVAILABLE
;

1069 
EXIT_IDLE_TIMEOUT
:

1070 
av_ty≥
 = 
PW_ACCT_IDLE_TIMEOUT
;

1073 
EXIT_CALLBACK
:

1074 
av_ty≥
 = 
PW_CALLBACK
;

1077 
EXIT_CONNECT_TIME
:

1078 
av_ty≥
 = 
PW_ACCT_SESSION_TIMEOUT
;

1081 #ifde‡
MAXOCTETS


1082 
EXIT_TRAFFIC_LIMIT
:

1083 
av_ty≥
 = 
PW_NAS_REQUEST
;

1088 
av_ty≥
 = 
PW_NAS_ERROR
;

1091 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_TERMINATE_CAUSE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1093 
hißddr
 = 
ho
->hisaddr;

1094 
av_ty≥
 = 
	`ht⁄l
(
hißddr
);

1095 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_IP_ADDRESS
 , &
av_ty≥
 , 0, 
VENDOR_NONE
);

1098 i‡(
r°©e
.
avp
)

1099 
	`rc_av∑ú_ö£π
(&
£nd
, 
NULL
, 
	`rc_av∑ú_c›y
(
r°©e
.
avp
));

1101 i‡(
r°©e
.
ac˘£rvî
) {

1102 
ªsu…
 = 
	`rc_ac˘_usög_£rvî
(
r°©e
.
ac˘£rvî
,

1103 
r°©e
.
˛õ¡_p‹t
, 
£nd
);

1105 
ªsu…
 = 
	`rc_ac˘
(
r°©e
.
˛õ¡_p‹t
, 
£nd
);

1108 i‡(
ªsu…
 !
OK_RC
) {

1110 
	`sy¶og
(
LOG_WARNING
,

1111 "Accou¡ög STOP faûed f‹ %s", 
r°©e
.
u£r
);

1113 
	`rc_av∑ú_‰ì
(
£nd
);

1114 
	}
}

1126 
	$ødius_ac˘_öãrim
(*
ign‹ed
)

1128 
UINT4
 
av_ty≥
;

1129 
VALUE_PAIR
 *
£nd
 = 
NULL
;

1130 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[0];

1131 
u_öt32_t
 
hißddr
;

1132 
ªsu…
;

1134 i‡(!
r°©e
.
öôülized
) {

1138 i‡(!
r°©e
.
accou¡ög_°¨ãd
) {

1142 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_SESSION_ID
, 
r°©e
.
£ssi⁄_id
,

1143 0, 
VENDOR_NONE
);

1145 
	`rc_av∑ú_add
(&
£nd
, 
PW_USER_NAME
, 
r°©e
.
u£r
, 0, 
VENDOR_NONE
);

1147 i‡(
r°©e
.
˛ass_Àn
 > 0)

1148 
	`rc_av∑ú_add
(&
£nd
, 
PW_CLASS
,

1149 
r°©e
.
˛ass
,Ñ°©e.
˛ass_Àn
, 
VENDOR_NONE
);

1151 
av_ty≥
 = 
PW_STATUS_ALIVE
;

1152 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_STATUS_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1154 
av_ty≥
 = 
PW_FRAMED
;

1155 
	`rc_av∑ú_add
(&
£nd
, 
PW_SERVICE_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1157 
av_ty≥
 = 
PW_PPP
;

1158 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_PROTOCOL
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1160 
av_ty≥
 = 
PW_RADIUS
;

1161 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_AUTHENTIC
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1164 
	`upd©e_lök_°©s
(0);

1166 i‡(
lök_°©s_vÆid
) {

1167 
lök_°©s_vÆid
 = 0;

1169 
av_ty≥
 = 
lök_c⁄√˘_time
;

1170 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_SESSION_TIME
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1172 
av_ty≥
 = 
lök_°©s
.
byãs_out
;

1173 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_OUTPUT_OCTETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1175 
av_ty≥
 = 
lök_°©s
.
byãs_ö
;

1176 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_INPUT_OCTETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1178 
av_ty≥
 = 
lök_°©s
.
pkts_out
;

1179 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_OUTPUT_PACKETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1181 
av_ty≥
 = 
lök_°©s
.
pkts_ö
;

1182 
	`rc_av∑ú_add
(&
£nd
, 
PW_ACCT_INPUT_PACKETS
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1185 i‡(*
ªmŸe_numbî
) {

1186 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
,

1187 
ªmŸe_numbî
, 0, 
VENDOR_NONE
);

1188 } i‡(
ù∑øm
)

1189 
	`rc_av∑ú_add
(&
£nd
, 
PW_CALLING_STATION_ID
, 
ù∑øm
, 0, 
VENDOR_NONE
);

1191 
av_ty≥
 = ( 
usög_±y
 ? 
PW_VIRTUAL
 : ( 
sync_£rül
 ? 
PW_SYNC
 : 
PW_ASYNC
 ) );

1192 
	`rc_av∑ú_add
(&
£nd
, 
PW_NAS_PORT_TYPE
, &
av_ty≥
, 0, 
VENDOR_NONE
);

1194 
hißddr
 = 
ho
->hisaddr;

1195 
av_ty≥
 = 
	`ht⁄l
(
hißddr
);

1196 
	`rc_av∑ú_add
(&
£nd
, 
PW_FRAMED_IP_ADDRESS
 , &
av_ty≥
 , 0, 
VENDOR_NONE
);

1199 i‡(
r°©e
.
avp
)

1200 
	`rc_av∑ú_ö£π
(&
£nd
, 
NULL
, 
	`rc_av∑ú_c›y
(
r°©e
.
avp
));

1202 i‡(
r°©e
.
ac˘£rvî
) {

1203 
ªsu…
 = 
	`rc_ac˘_usög_£rvî
(
r°©e
.
ac˘£rvî
,

1204 
r°©e
.
˛õ¡_p‹t
, 
£nd
);

1206 
ªsu…
 = 
	`rc_ac˘
(
r°©e
.
˛õ¡_p‹t
, 
£nd
);

1209 i‡(
ªsu…
 !
OK_RC
) {

1211 
	`sy¶og
(
LOG_WARNING
,

1212 "I¡îimáccou¡ög faûed f‹ %s", 
r°©e
.
u£r
);

1214 
	`rc_av∑ú_‰ì
(
£nd
);

1217 
	`TIMEOUT
(
ødius_ac˘_öãrim
, 
NULL
, 
r°©e
.
ac˘_öãrim_öãrvÆ
);

1218 
	}
}

1231 
	$ødius_ù_up
(*
›aque
, 
¨g
)

1233 
	`ødius_ac˘_°¨t
();

1234 
	}
}

1247 
	$ødius_ù_down
(*
›aque
, 
¨g
)

1249 
	`ødius_ac˘_°›
();

1250 
	}
}

1262 
	$ødius_öô
(*
msg
)

1264 i‡(
r°©e
.
öôülized
) {

1268 i‡(
c⁄fig_fûe
 && *config_file) {

1269 
	`°æ˝y
(
r°©e
.
c⁄fig_fûe
, c⁄fig_fûe, 
MAXPATHLEN
-1);

1272 
r°©e
.
öôülized
 = 1;

1274 i‡(
	`rc_ªad_c⁄fig
(
r°©e
.
c⁄fig_fûe
) != 0) {

1275 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: Can'tÑead config file %s",

1276 
r°©e
.
c⁄fig_fûe
);

1280 i‡(
	`rc_ªad_di˘i⁄¨y
(
	`rc_c⁄f_°r
("dictionary")) != 0) {

1281 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: Can'tÑead dictionary file %s",

1282 
	`rc_c⁄f_°r
("dictionary"));

1286 i‡(
	`rc_ªad_m≠fûe
(
	`rc_c⁄f_°r
("mapfile")) != 0) {

1287 
	`¶¥ötf
(
msg
, 
BUF_LEN
, "RADIUS: Can'tÑead map file %s",

1288 
	`rc_c⁄f_°r
("mapfile"));

1293 
avp›t
) {

1294 
avp›t
 *
n
 =ávp›t->
√xt
;

1296 
	`rc_av∑ú_∑r£
(
avp›t
->
vp°r
, &
r°©e
.
avp
);

1297 
	`‰ì
(
avp›t
->
vp°r
);

1298 
	`‰ì
(
avp›t
);

1299 
avp›t
 = 
n
;

1302 
	}
}

1314 
	$gë_˛õ¡_p‹t
(*
i‚ame
)

1316 
p‹t
;

1317 i‡(
	`ssˇnf
(
i‚ame
, "µp%d", &
p‹t
) == 1) {

1318  
p‹t
;

1320  
	`rc_m≠2id
(
i‚ame
);

1321 
	}
}

1332 
	$ødius_Ælowed_addªss
(
u_öt32_t
 
addr
)

1334 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1336 i‡(!
r°©e
.
choo£_ù
) {

1338 i‡(
r°©e
.
™y_ù_addr_ok
) {

1344 i‡(
wo
->
hißddr
 !0 && wo->hißdd∏=
addr
) {

1350 i‡(
addr
 =
r°©e
.
ù_addr
)  1;

1352 
	}
}

1355 *
	$ødius_logged_ö_u£r
()

1357  
r°©e
.
u£r
;

1358 
	}
}

	@pppd/plugins/radius/radiusclient.h

17 #i‚de‡
RADIUSCLIENT_H


18 
	#RADIUSCLIENT_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°dio.h
>

22 
	~<time.h
>

23 
	~"µpd.h
"

25 #i‚de‡
_UINT4_T


27 
	tUINT4
;

28 
	tINT4
;

31 
	#AUTH_VECTOR_LEN
 16

	)

32 
	#AUTH_PASS_LEN
 (3 * 16Ë

	)

33 
	#AUTH_ID_LEN
 64

	)

34 
	#AUTH_STRING_LEN
 128

	)

36 
	#BUFFER_LEN
 8192

	)

38 
	#NAME_LENGTH
 32

	)

39 
	#GETSTR_LENGTH
 128

	)

42 
	#AUTH
 0

	)

43 
	#ACCT
 1

	)

47 
	#SERVER_MAX
 8

	)

49 
	#AUTH_LOCAL_FST
 (1<<0)

	)

50 
	#AUTH_RADIUS_FST
 (1<<1)

	)

51 
	#AUTH_LOCAL_SND
 (1<<2)

	)

52 
	#AUTH_RADIUS_SND
 (1<<3)

	)

54 
	s£rvî
 {

55 
	mmax
;

56 *
	m«me
[
SERVER_MAX
];

57 
	mp‹t
[
SERVER_MAX
];

58 } 
	tSERVER
;

60 
	spw_auth_hdr


62 
u_ch¨
 
	mcode
;

63 
u_ch¨
 
	mid
;

64 
u_sh‹t
 
	mÀngth
;

65 
u_ch¨
 
	mve˘‹
[
AUTH_VECTOR_LEN
];

66 
u_ch¨
 
	md©a
[2];

67 } 
	tAUTH_HDR
;

69 
	#AUTH_HDR_LEN
 20

	)

70 
	#MAX_SECRET_LENGTH
 (3 * 16Ë

	)

71 
	#CHAP_VALUE_LENGTH
 16

	)

73 
	#PW_AUTH_UDP_PORT
 1812

	)

74 
	#PW_ACCT_UDP_PORT
 1813

	)

76 
	#PW_TYPE_STRING
 0

	)

77 
	#PW_TYPE_INTEGER
 1

	)

78 
	#PW_TYPE_IPADDR
 2

	)

79 
	#PW_TYPE_DATE
 3

	)

83 
	#PW_ACCESS_REQUEST
 1

	)

84 
	#PW_ACCESS_ACCEPT
 2

	)

85 
	#PW_ACCESS_REJECT
 3

	)

86 
	#PW_ACCOUNTING_REQUEST
 4

	)

87 
	#PW_ACCOUNTING_RESPONSE
 5

	)

88 
	#PW_ACCOUNTING_STATUS
 6

	)

89 
	#PW_PASSWORD_REQUEST
 7

	)

90 
	#PW_PASSWORD_ACK
 8

	)

91 
	#PW_PASSWORD_REJECT
 9

	)

92 
	#PW_ACCOUNTING_MESSAGE
 10

	)

93 
	#PW_ACCESS_CHALLENGE
 11

	)

94 
	#PW_STATUS_SERVER
 12

	)

95 
	#PW_STATUS_CLIENT
 13

	)

100 
	#PW_USER_NAME
 1

	)

101 
	#PW_USER_PASSWORD
 2

	)

102 
	#PW_CHAP_PASSWORD
 3

	)

103 
	#PW_NAS_IP_ADDRESS
 4

	)

104 
	#PW_NAS_PORT
 5

	)

105 
	#PW_SERVICE_TYPE
 6

	)

106 
	#PW_FRAMED_PROTOCOL
 7

	)

107 
	#PW_FRAMED_IP_ADDRESS
 8

	)

108 
	#PW_FRAMED_IP_NETMASK
 9

	)

109 
	#PW_FRAMED_ROUTING
 10

	)

110 
	#PW_FILTER_ID
 11

	)

111 
	#PW_FRAMED_MTU
 12

	)

112 
	#PW_FRAMED_COMPRESSION
 13

	)

113 
	#PW_LOGIN_IP_HOST
 14

	)

114 
	#PW_LOGIN_SERVICE
 15

	)

115 
	#PW_LOGIN_PORT
 16

	)

116 
	#PW_OLD_PASSWORD
 17

	)

117 
	#PW_REPLY_MESSAGE
 18

	)

118 
	#PW_LOGIN_CALLBACK_NUMBER
 19

	)

119 
	#PW_FRAMED_CALLBACK_ID
 20

	)

120 
	#PW_EXPIRATION
 21

	)

121 
	#PW_FRAMED_ROUTE
 22

	)

122 
	#PW_FRAMED_IPX_NETWORK
 23

	)

123 
	#PW_STATE
 24

	)

124 
	#PW_CLASS
 25

	)

125 
	#PW_VENDOR_SPECIFIC
 26

	)

126 
	#PW_SESSION_TIMEOUT
 27

	)

127 
	#PW_IDLE_TIMEOUT
 28

	)

128 
	#PW_TERMINATION_ACTION
 29

	)

129 
	#PW_CALLED_STATION_ID
 30

	)

130 
	#PW_CALLING_STATION_ID
 31

	)

131 
	#PW_NAS_IDENTIFIER
 32

	)

132 
	#PW_PROXY_STATE
 33

	)

133 
	#PW_LOGIN_LAT_SERVICE
 34

	)

134 
	#PW_LOGIN_LAT_NODE
 35

	)

135 
	#PW_LOGIN_LAT_GROUP
 36

	)

136 
	#PW_FRAMED_APPLETALK_LINK
 37

	)

137 
	#PW_FRAMED_APPLETALK_NETWORK
 38

	)

138 
	#PW_FRAMED_APPLETALK_ZONE
 39

	)

139 
	#PW_CHAP_CHALLENGE
 60

	)

140 
	#PW_NAS_PORT_TYPE
 61

	)

141 
	#PW_PORT_LIMIT
 62

	)

142 
	#PW_LOGIN_LAT_PORT
 63

	)

145 
	#PW_MS_CHAP_CHALLENGE
 11

	)

146 
	#PW_MS_CHAP_RESPONSE
 1

	)

147 
	#PW_MS_CHAP2_RESPONSE
 25

	)

148 
	#PW_MS_CHAP2_SUCCESS
 26

	)

149 
	#PW_MS_MPPE_ENCRYPTION_POLICY
 7

	)

150 
	#PW_MS_MPPE_ENCRYPTION_TYPE
 8

	)

151 
	#PW_MS_MPPE_ENCRYPTION_TYPES
 
PW_MS_MPPE_ENCRYPTION_TYPE


	)

152 
	#PW_MS_CHAP_MPPE_KEYS
 12

	)

153 
	#PW_MS_MPPE_SEND_KEY
 16

	)

154 
	#PW_MS_MPPE_RECV_KEY
 17

	)

155 
	#PW_MS_PRIMARY_DNS_SERVER
 28

	)

156 
	#PW_MS_SECONDARY_DNS_SERVER
 29

	)

157 
	#PW_MS_PRIMARY_NBNS_SERVER
 30

	)

158 
	#PW_MS_SECONDARY_NBNS_SERVER
 31

	)

162 
	#PW_ACCT_STATUS_TYPE
 40

	)

163 
	#PW_ACCT_DELAY_TIME
 41

	)

164 
	#PW_ACCT_INPUT_OCTETS
 42

	)

165 
	#PW_ACCT_OUTPUT_OCTETS
 43

	)

166 
	#PW_ACCT_SESSION_ID
 44

	)

167 
	#PW_ACCT_AUTHENTIC
 45

	)

168 
	#PW_ACCT_SESSION_TIME
 46

	)

169 
	#PW_ACCT_INPUT_PACKETS
 47

	)

170 
	#PW_ACCT_OUTPUT_PACKETS
 48

	)

171 
	#PW_ACCT_TERMINATE_CAUSE
 49

	)

172 
	#PW_ACCT_MULTI_SESSION_ID
 50

	)

173 
	#PW_ACCT_LINK_COUNT
 51

	)

176 
	#PW_ACCT_INTERIM_INTERVAL
 85

	)

180 
	#PW_USER_ID
 222

	)

181 
	#PW_USER_REALM
 223

	)

185 
	#PW_SESSION_OCTETS_LIMIT
 227

	)

186 
	#PW_OCTETS_DIRECTION
 228

	)

192 
	#PW_LOGIN
 1

	)

193 
	#PW_FRAMED
 2

	)

194 
	#PW_CALLBACK_LOGIN
 3

	)

195 
	#PW_CALLBACK_FRAMED
 4

	)

196 
	#PW_OUTBOUND
 5

	)

197 
	#PW_ADMINISTRATIVE
 6

	)

198 
	#PW_NAS_PROMPT
 7

	)

199 
	#PW_AUTHENTICATE_ONLY
 8

	)

200 
	#PW_CALLBACK_NAS_PROMPT
 9

	)

204 
	#PW_PPP
 1

	)

205 
	#PW_SLIP
 2

	)

206 
	#PW_ARA
 3

	)

207 
	#PW_GANDALF
 4

	)

208 
	#PW_XYLOGICS
 5

	)

212 
	#PW_NONE
 0

	)

213 
	#PW_BROADCAST
 1

	)

214 
	#PW_LISTEN
 2

	)

215 
	#PW_BROADCAST_LISTEN
 3

	)

219 
	#PW_VAN_JACOBSON_TCP_IP
 1

	)

220 
	#PW_IPX_HEADER_COMPRESSION
 2

	)

224 
	#PW_TELNET
 0

	)

225 
	#PW_RLOGIN
 1

	)

226 
	#PW_TCP_CLEAR
 2

	)

227 
	#PW_PORTMASTER
 3

	)

228 
	#PW_LAT
 4

	)

229 
	#PW_X25_PAD
 5

	)

230 
	#PW_X25_T3POS
 6

	)

234 
	#PW_DEFAULT
 0

	)

235 
	#PW_RADIUS_REQUEST
 1

	)

239 
	#PW_DUMB
 0

	)

240 
	#PW_AUTH_ONLY
 3

	)

241 
	#PW_ALL
 255

	)

245 
	#PW_STATUS_START
 1

	)

246 
	#PW_STATUS_STOP
 2

	)

247 
	#PW_STATUS_ALIVE
 3

	)

248 
	#PW_STATUS_MODEM_START
 4

	)

249 
	#PW_STATUS_MODEM_STOP
 5

	)

250 
	#PW_STATUS_CANCEL
 6

	)

251 
	#PW_ACCOUNTING_ON
 7

	)

252 
	#PW_ACCOUNTING_OFF
 8

	)

256 
	#PW_USER_REQUEST
 1

	)

257 
	#PW_LOST_CARRIER
 2

	)

258 
	#PW_LOST_SERVICE
 3

	)

259 
	#PW_ACCT_IDLE_TIMEOUT
 4

	)

260 
	#PW_ACCT_SESSION_TIMEOUT
 5

	)

261 
	#PW_ADMIN_RESET
 6

	)

262 
	#PW_ADMIN_REBOOT
 7

	)

263 
	#PW_PORT_ERROR
 8

	)

264 
	#PW_NAS_ERROR
 9

	)

265 
	#PW_NAS_REQUEST
 10

	)

266 
	#PW_NAS_REBOOT
 11

	)

267 
	#PW_PORT_UNNEEDED
 12

	)

268 
	#PW_PORT_PREEMPTED
 13

	)

269 
	#PW_PORT_SUSPENDED
 14

	)

270 
	#PW_SERVICE_UNAVAILABLE
 15

	)

271 
	#PW_CALLBACK
 16

	)

272 
	#PW_USER_ERROR
 17

	)

273 
	#PW_HOST_REQUEST
 18

	)

277 
	#PW_ASYNC
 0

	)

278 
	#PW_SYNC
 1

	)

279 
	#PW_ISDN_SYNC
 2

	)

280 
	#PW_ISDN_SYNC_V120
 3

	)

281 
	#PW_ISDN_SYNC_V110
 4

	)

282 
	#PW_VIRTUAL
 5

	)

285 
	#PW_RADIUS
 1

	)

286 
	#PW_LOCAL
 2

	)

287 
	#PW_REMOTE
 3

	)

290 
	#PW_OCTETS_DIRECTION_SUM
 0

	)

291 
	#PW_OCTETS_DIRECTION_IN
 1

	)

292 
	#PW_OCTETS_DIRECTION_OUT
 2

	)

293 
	#PW_OCTETS_DIRECTION_MAX
 3

	)

297 
	#VENDOR_NONE
 (-1)

	)

298 
	#VENDOR_MICROSOFT
 311

	)

302 
	sdi˘_©å


304 
	m«me
[
NAME_LENGTH
 + 1];

305 
	mvÆue
;

306 
	mty≥
;

307 
	mvíd‹code
;

308 
di˘_©å
 *
	m√xt
;

309 } 
	tDICT_ATTR
;

311 
	sdi˘_vÆue


313 
	m©å«me
[
NAME_LENGTH
 +1];

314 
	m«me
[
NAME_LENGTH
 + 1];

315 
	mvÆue
;

316 
di˘_vÆue
 *
	m√xt
;

317 } 
	tDICT_VALUE
;

319 
	svíd‹_di˘


321 
	mvíd‹«me
[
NAME_LENGTH
 + 1];

322 
	mvíd‹code
;

323 
DICT_ATTR
 *
	m©åibuãs
;

324 
víd‹_di˘
 *
	m√xt
;

325 } 
	tVENDOR_DICT
;

327 
	svÆue_∑ú


329 
	m«me
[
NAME_LENGTH
 + 1];

330 
	m©åibuã
;

331 
	mvíd‹code
;

332 
	mty≥
;

333 
UINT4
 
	mlvÆue
;

334 
u_ch¨
 
	m°rvÆue
[
AUTH_STRING_LEN
 + 1];

335 
vÆue_∑ú
 *
	m√xt
;

336 } 
	tVALUE_PAIR
;

339 
	#MGMT_POLL_SECRET
 "H¨dlya£¸ë"

	)

343 
	#BADRESP_RC
 -2

	)

344 
	#ERROR_RC
 -1

	)

345 
	#OK_RC
 0

	)

346 
	#TIMEOUT_RC
 1

	)

348 
	s£nd_d©a


350 
u_ch¨
 
	mcode
;

351 
u_ch¨
 
	m£q_nbr
;

352 *
	m£rvî
;

353 
	msvc_p‹t
;

354 
	mtimeout
;

355 
	mªåõs
;

356 
VALUE_PAIR
 *
	m£nd_∑ús
;

357 
VALUE_PAIR
 *
	mª˚ive_∑ús
;

358 } 
	tSEND_DATA
;

360 
	sªque°_öfo


362 
	m£¸ë
[
MAX_SECRET_LENGTH
 + 1];

363 
u_ch¨
 
	mªque°_ve˘‹
[
AUTH_VECTOR_LEN
];

364 } 
	tREQUEST_INFO
;

366 #i‚de‡
MIN


367 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

369 #i‚de‡
MAX


370 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

373 #i‚de‡
PATH_MAX


374 
	#PATH_MAX
 1024

	)

377 
	sív


379 
	mmaxsize
, 
	msize
;

380 **
	mív
;

381 } 
	tENV
;

383 
	#ENV_SIZE
 128

	)

389 
VALUE_PAIR
 *
rc_av∑ú_add
 
__P
((VALUE_PAIR **, , *, , ));

390 
rc_av∑ú_assign
 
__P
((
VALUE_PAIR
 *, *, ));

391 
VALUE_PAIR
 *
rc_av∑ú_√w
 
__P
((, *, , ));

392 
VALUE_PAIR
 *
rc_av∑ú_gí
 
__P
((
AUTH_HDR
 *));

393 
VALUE_PAIR
 *
rc_av∑ú_gë
 
__P
((VALUE_PAIR *, 
UINT4
));

394 
VALUE_PAIR
 *
rc_av∑ú_c›y
 
__P
((VALUE_PAIR *));

395 
rc_av∑ú_ö£π
 
__P
((
VALUE_PAIR
 **, VALUE_PAIR *, VALUE_PAIR *));

396 
rc_av∑ú_‰ì
 
__P
((
VALUE_PAIR
 *));

397 
rc_av∑ú_∑r£
 
__P
((*, 
VALUE_PAIR
 **));

398 
rc_av∑ú_to°r
 
__P
((
VALUE_PAIR
 *, *, , *, ));

399 
VALUE_PAIR
 *
rc_av∑ú_ªadö
 
__P
((
FILE
 *));

403 
rc_buûdªq
 
__P
((
SEND_DATA
 *, , *, , , ));

404 
rc_gë_£qnbr
 
__P
(());

405 
rc_auth
 
__P
((
UINT4
, 
VALUE_PAIR
 *, VALUE_PAIR **, *, 
REQUEST_INFO
 *));

406 
rc_auth_usög_£rvî
 
__P
((
SERVER
 *, 
UINT4
, 
VALUE_PAIR
 *, VALUE_PAIR **,

407 *, 
REQUEST_INFO
 *));

408 
rc_auth_¥oxy
 
__P
((
VALUE_PAIR
 *, VALUE_PAIR **, *));

409 
rc_ac˘
 
__P
((
UINT4
, 
VALUE_PAIR
 *));

410 
rc_ac˘_usög_£rvî
 
__P
((
SERVER
 *, 
UINT4
, 
VALUE_PAIR
 *));

411 
rc_ac˘_¥oxy
 
__P
((
VALUE_PAIR
 *));

412 
rc_check
 
__P
((*, , *));

416 
rc_ªad_m≠fûe
 
__P
((*));

417 
UINT4
 
rc_m≠2id
 
__P
((*));

421 
rc_ªad_c⁄fig
 
__P
((*));

422 *
rc_c⁄f_°r
 
__P
((*));

423 
rc_c⁄f_öt
 
__P
((*));

424 
SERVER
 *
rc_c⁄f_§v
 
__P
((*));

425 
rc_föd_£rvî
 
__P
((*, 
UINT4
 *, *));

429 
rc_ªad_di˘i⁄¨y
 
__P
((*));

430 
DICT_ATTR
 *
rc_di˘_gë©å
 
__P
((, ));

431 
DICT_ATTR
 *
rc_di˘_föd©å
 
__P
((*));

432 
DICT_VALUE
 *
rc_di˘_födvÆ
 
__P
((*));

433 
DICT_VALUE
 * 
rc_di˘_gëvÆ
 
__P
((
UINT4
, *));

434 
VENDOR_DICT
 * 
rc_di˘_födvíd‹
 
__P
((*));

435 
VENDOR_DICT
 * 
rc_di˘_gëvíd‹
 
__P
(());

439 
UINT4
 
rc_gë_ùaddr
 
__P
((*));

440 
rc_good_ùaddr
 
__P
((*));

441 c⁄° *
rc_ù_ho°«me
 
__P
((
UINT4
));

442 
UINT4
 
rc_own_ùaddªss
 
__P
(());

443 
UINT4
 
rc_own_böd_ùaddªss
 
__P
(());

448 
rc_£nd_£rvî
 
__P
((
SEND_DATA
 *, *, 
REQUEST_INFO
 *));

452 
rc_°r2tm
 
__P
((*, 
tm
 *));

453 *
rc_mksid
 
__P
(());

454 
rc_mdñay
 
__P
(());

458 
rc_md5_ˇlc
 
__P
((*, *, ));

	@pppd/plugins/radius/radrealms.c

17 c⁄° 
	gRCSID
[] =

20 
	~"µpd.h
"

21 
	~"ødius˛õ¡.h
"

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

26 
	gµpd_vîsi⁄
[] = 
VERSION
;

28 
	gødªÆms_c⁄fig
[
MAXPATHLEN
] = "/etc/radiusclient/realms";

30 
›ti⁄_t
 
	gO±i⁄s
[] = {

31 { "ªÆms-c⁄fig-fûe", 
o_°rög
, &
ødªÆms_c⁄fig
,

32 "C⁄figuøti⁄ fûêf‹ RADIUSÑólms", 
OPT_STATIC
, 
NULL
, 
MAXPATHLEN
 },

33 { 
NULL
 }

36 (*
ødius_¥e_auth_hook
)(c⁄° *
u£r
,

37 
SERVER
 **
auth£rvî
,

38 
SERVER
 **
ac˘£rvî
);

41 
	$lookup_ªÆm
(c⁄° *
u£r
,

42 
SERVER
 **
auth£rvî
,

43 
SERVER
 **
ac˘£rvî
)

45 *
ªÆm
;

46 
FILE
 *
fd
;

47 
SERVER
 *
ac˘s
, *
auths
, *
s
;

48 
buf„r
[512], *
p
;

49 
löe
 = 0;

51 
auths
 = (
SERVER
 *Ë
	`mÆloc
((SERVER));

52 
auths
->
max
 = 0;

53 
ac˘s
 = (
SERVER
 *Ë
	`mÆloc
((SERVER));

54 
ac˘s
->
max
 = 0;

56 
ªÆm
 = 
	`°ºchr
(
u£r
, '@');

58 i‡(
ªÆm
) {

59 
	`öfo
("Lookög u∞£rvî†f‹Ñólm '%s'", 
ªÆm
);

61 
	`öfo
("Looking up servers for DEFAULTÑealm");

63 i‡(
ªÆm
) {

64 i‡(*(++
ªÆm
) == '\0') {

65 
ªÆm
 = 
NULL
;

69 i‡((
fd
 = 
	`f›í
(
ødªÆms_c⁄fig
, "r")Ë=
NULL
) {

70 
	`›ti⁄_îr‹
("ˇ¬Ÿ o≥¿%s", 
ødªÆms_c⁄fig
);

71 
	`‰ì
(
auths
);

72 
	`‰ì
(
ac˘s
);

75 
	`öfo
("Ródög %s", 
ødªÆms_c⁄fig
);

77 (
	`fgës
(
buf„r
, (buf„r), 
fd
Ë!
NULL
)) {

78 
löe
++;

80 i‡((*
buf„r
 == '\n') || (*buffer == '#') || (*buffer == '\0'))

83 
buf„r
[
	`°æí
(buffer)-1] = '\0';

85 
p
 = 
	`°πok
(
buf„r
, "\t ");

87 i‡(
p
 =
NULL
 || (
	`°rcmp
(p, "authserver") !=0

88 && 
	`°rcmp
(
p
, "acctserver"))) {

89 
	`f˛o£
(
fd
);

90 
	`›ti⁄_îr‹
("%s: invÆidÜöê%d: %s", 
ødªÆms_c⁄fig
,

91 
löe
, 
buf„r
);

92 
	`‰ì
(
auths
);

93 
	`‰ì
(
ac˘s
);

96 
	`öfo
("P¨sög '%s'É¡ry:", 
p
);

97 
s
 = 
auths
;

98 i‡(
p
[1] == 'c') {

99 
s
 = 
ac˘s
;

101 i‡(
s
->
max
 >
SERVER_MAX
)

104 i‡((
p
 = 
	`°πok
(
NULL
, "\t ")) == NULL) {

105 
	`f˛o£
(
fd
);

106 
	`›ti⁄_îr‹
("%s:ÑealmÇame missing onÜine %d: %s",

107 
ødªÆms_c⁄fig
, 
löe
, 
buf„r
);

108 
	`‰ì
(
auths
);

109 
	`‰ì
(
ac˘s
);

113 i‡((
ªÆm
 !
NULL
 && 
	`°rcmp
(
p
,Ñealm) == 0) ||

114 (
ªÆm
 =
NULL
 && 
	`°rcmp
(
p
, "DEFAULT") == 0) ) {

115 
	`öfo
(" - M©chedÑólm %s", 
p
);

116 i‡((
p
 = 
	`°πok
(
NULL
, ":")) == NULL) {

117 
	`f˛o£
(
fd
);

118 
	`›ti⁄_îr‹
("%s: serveráddress missing onÜine %d: %s",

119 
ødªÆms_c⁄fig
, 
löe
, 
buf„r
);

120 
	`‰ì
(
auths
);

121 
	`‰ì
(
ac˘s
);

124 
s
->
«me
[s->
max
] = 
	`°rdup
(
p
);

125 
	`öfo
(" - Addªs†i†'%s'",
p
);

126 i‡((
p
 = 
	`°πok
(
NULL
, "\t ")) == NULL) {

127 
	`f˛o£
(
fd
);

128 
	`›ti⁄_îr‹
("%s: serverÖort missing onÜine %d: %s",

129 
ødªÆms_c⁄fig
, 
löe
, 
buf„r
);

130 
	`‰ì
(
auths
);

131 
	`‰ì
(
ac˘s
);

134 
s
->
p‹t
[s->
max
] = 
	`©oi
(
p
);

135 
	`öfo
(" - P‹ài†'%d'", 
s
->
p‹t
[s->
max
]);

136 
s
->
max
++;

138 
	`öfo
(" - SkùpögÑólm '%s'", 
p
);

140 
	`f˛o£
(
fd
);

142 i‡(
ac˘s
->
max
)

143 *
ac˘£rvî
 = 
ac˘s
;

145 i‡(
auths
->
max
)

146 *
auth£rvî
 = 
auths
;

149 
	}
}

152 
	$∂ugö_öô
()

154 
ødius_¥e_auth_hook
 = 
lookup_ªÆm
;

156 
	`add_›ti⁄s
(
O±i⁄s
);

157 
	`öfo
("RADIUS RealmsÖlugin initialized.");

158 
	}
}

	@pppd/plugins/radius/sendserver.c

17 
	~<ö˛udes.h
>

18 
	~<ødius˛õ¡.h
>

19 
	~<∑th«mes.h
>

21 
rc_øndom_ve˘‹
 (*);

22 
rc_check_ª∂y
 (
AUTH_HDR
 *, , *, *, );

33 
	$rc_∑ck_li°
 (
VALUE_PAIR
 *
vp
, *
£¸ë
, 
AUTH_HDR
 *
auth
)

35 
Àngth
, 
i
, 
pc
, 
£¸ëÀn
, 
∑dded_Àngth
;

36 
tŸÆ_Àngth
 = 0;

37 
UINT4
 
lvÆue
;

38 
∑ssbuf
[
	`MAX
(
AUTH_PASS_LEN
, 
CHAP_VALUE_LENGTH
)];

39 
md5buf
[256];

40 *
buf
, *
ve˘‹
, *
À≈å
;

42 
buf
 = 
auth
->
d©a
;

44 
vp
 !(
VALUE_PAIR
 *Ë
NULL
)

47 i‡(
vp
->
víd‹code
 !
VENDOR_NONE
) {

48 *
buf
++ = 
PW_VENDOR_SPECIFIC
;

51 
À≈å
 = 
buf
++;

54 *
buf
++ = 0;

55 *
buf
++ = (((Ë
vp
->
víd‹code
) >> 16) & 255;

56 *
buf
++ = (((Ë
vp
->
víd‹code
) >> 8) & 255;

57 *
buf
++ = ((Ë
vp
->
víd‹code
) & 255;

60 *
buf
++ = 
vp
->
©åibuã
;

63 
vp
->
ty≥
) {

64 
PW_TYPE_STRING
:

65 
Àngth
 = 
vp
->
lvÆue
;

66 *
À≈å
 = 
Àngth
 + 8;

67 *
buf
++ = 
Àngth
+2;

68 
	`mem˝y
(
buf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

69 
buf
 +
Àngth
;

70 
tŸÆ_Àngth
 +
Àngth
+8;

72 
PW_TYPE_INTEGER
:

73 
PW_TYPE_IPADDR
:

74 
Àngth
 = (
UINT4
);

75 *
À≈å
 = 
Àngth
 + 8;

76 *
buf
++ = 
Àngth
+2;

77 
lvÆue
 = 
	`ht⁄l
(
vp
->lvalue);

78 
	`mem˝y
(
buf
, (*Ë&
lvÆue
, (
UINT4
));

79 
buf
 +
Àngth
;

80 
tŸÆ_Àngth
 +
Àngth
+8;

86 *
buf
++ = 
vp
->
©åibuã
;

87 
vp
->
©åibuã
) {

88 
PW_USER_PASSWORD
:

93 
Àngth
 = 
vp
->
lvÆue
;

94 i‡(
Àngth
 > 
AUTH_PASS_LEN
)Üength = AUTH_PASS_LEN;

97 
∑dded_Àngth
 = (
Àngth
+(
AUTH_VECTOR_LEN
-1)) & ~(AUTH_VECTOR_LEN-1);

100 *
buf
++ = 
∑dded_Àngth
 + 2;

103 
	`mem£t
 ((*Ë
∑ssbuf
, '\0', 
AUTH_PASS_LEN
);

104 
	`mem˝y
 ((*Ë
∑ssbuf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

106 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

107 
ve˘‹
 = (*)
auth
->vector;

108 
i
 = 0; i < 
∑dded_Àngth
; i +
AUTH_VECTOR_LEN
) {

110 
	`°r˝y
 ((*Ë
md5buf
, 
£¸ë
);

111 
	`mem˝y
 ((*Ë
md5buf
 + 
£¸ëÀn
, 
ve˘‹
,

112 
AUTH_VECTOR_LEN
);

113 
	`rc_md5_ˇlc
 (
buf
, 
md5buf
, 
£¸ëÀn
 + 
AUTH_VECTOR_LEN
);

116 
ve˘‹
 = 
buf
;

119 
pc
 = 
i
;Ö¯< (ò+ 
AUTH_VECTOR_LEN
);Öc++) {

120 *
buf
++ ^
∑ssbuf
[
pc
];

124 
tŸÆ_Àngth
 +
∑dded_Àngth
 + 2;

128 
PW_CHAP_PASSWORD
:

130 *
buf
++ = 
CHAP_VALUE_LENGTH
 + 2;

133 
Àngth
 = 
vp
->
lvÆue
;

134 i‡(
Àngth
 > 
CHAP_VALUE_LENGTH
) {

135 
Àngth
 = 
CHAP_VALUE_LENGTH
;

137 
	`mem£t
 ((*Ë
∑ssbuf
, '\0', 
CHAP_VALUE_LENGTH
);

138 
	`mem˝y
 ((*Ë
∑ssbuf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

141 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

142 
	`°r˝y
 ((*Ë
md5buf
, 
£¸ë
);

143 
	`mem˝y
 ((*Ë
md5buf
 + 
£¸ëÀn
, (*Ë
auth
->
ve˘‹
,

144 
AUTH_VECTOR_LEN
);

145 
	`rc_md5_ˇlc
 (
buf
, 
md5buf
, 
£¸ëÀn
 + 
AUTH_VECTOR_LEN
);

148 
i
 = 0; i < 
CHAP_VALUE_LENGTH
; i++) {

149 *
buf
++ ^
∑ssbuf
[
i
];

151 
tŸÆ_Àngth
 +
CHAP_VALUE_LENGTH
 + 2;

156 
vp
->
ty≥
) {

157 
PW_TYPE_STRING
:

158 
Àngth
 = 
vp
->
lvÆue
;

159 *
buf
++ = 
Àngth
 + 2;

160 
	`mem˝y
 (
buf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

161 
buf
 +
Àngth
;

162 
tŸÆ_Àngth
 +
Àngth
 + 2;

165 
PW_TYPE_INTEGER
:

166 
PW_TYPE_IPADDR
:

167 *
buf
++ =  (
UINT4
) + 2;

168 
lvÆue
 = 
	`ht⁄l
 (
vp
->lvalue);

169 
	`mem˝y
 (
buf
, (*Ë&
lvÆue
,  (
UINT4
));

170 
buf
 + (
UINT4
);

171 
tŸÆ_Àngth
 + (
UINT4
) + 2;

180 
vp
 = vp->
√xt
;

182  
tŸÆ_Àngth
;

183 
	}
}

192 
	$rc_£nd_£rvî
 (
SEND_DATA
 *
d©a
, *
msg
, 
REQUEST_INFO
 *
öfo
)

194 
sockfd
;

195 
sockaddr
 
ßloˇl
;

196 
sockaddr
 
ßªmŸe
;

197 
sockaddr_ö
 *
sö
;

198 
timevÆ
 
authtime
;

199 
fd_£t
 
ªadfds
;

200 
AUTH_HDR
 *
auth
, *
ªcv_auth
;

201 
UINT4
 
auth_ùaddr
;

202 *
£rvî_«me
;

203 
ßÀn
;

204 
ªsu…
;

205 
tŸÆ_Àngth
;

206 
Àngth
;

207 
ªåy_max
;

208 
£¸ëÀn
;

209 
£¸ë
[
MAX_SECRET_LENGTH
 + 1];

210 
ve˘‹
[
AUTH_VECTOR_LEN
];

211 
ªcv_buf„r
[
BUFFER_LEN
];

212 
£nd_buf„r
[
BUFFER_LEN
];

213 
ªåõs
;

214 
VALUE_PAIR
 *
vp
;

216 
£rvî_«me
 = 
d©a
->
£rvî
;

217 i‡(
£rvî_«me
 =(*Ë
NULL
 || server_name[0] == '\0')

218  (
ERROR_RC
);

220 i‡((
vp
 = 
	`rc_av∑ú_gë
(
d©a
->
£nd_∑ús
, 
PW_SERVICE_TYPE
)) && \

221 (
vp
->
lvÆue
 =
PW_ADMINISTRATIVE
))

223 
	`°r˝y
(
£¸ë
, 
MGMT_POLL_SECRET
);

224 i‡((
auth_ùaddr
 = 
	`rc_gë_ùaddr
(
£rvî_«me
)) == 0)

225  (
ERROR_RC
);

229 i‡(
	`rc_föd_£rvî
 (
£rvî_«me
, &
auth_ùaddr
, 
£¸ë
) != 0)

231  (
ERROR_RC
);

235 
sockfd
 = 
	`sockë
 (
AF_INET
, 
SOCK_DGRAM
, 0);

236 i‡(
sockfd
 < 0)

238 
	`mem£t
 (
£¸ë
, '\0',  (secret));

239 
	`îr‹
("rc_£nd_£rvî: sockë: %s", 
	`°ªº‹
(
î∫o
));

240  (
ERROR_RC
);

243 
Àngth
 =  (
ßloˇl
);

244 
sö
 = (
sockaddr_ö
 *Ë& 
ßloˇl
;

245 
	`mem£t
 ((*Ë
sö
, '\0', (
size_t
Ë
Àngth
);

246 
sö
->
sö_Ámûy
 = 
AF_INET
;

247 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
	`rc_own_böd_ùaddªss
());

248 
sö
->
sö_p‹t
 = 
	`ht⁄s
 (() 0);

249 i‡(
	`böd
 (
sockfd
, (
sockaddr
 *Ë
sö
, 
Àngth
) < 0 ||

250 
	`gësock«me
 (
sockfd
, (
sockaddr
 *Ë
sö
, &
Àngth
) < 0)

252 
	`˛o£
 (
sockfd
);

253 
	`mem£t
 (
£¸ë
, '\0',  (secret));

254 
	`îr‹
("rc_£nd_£rvî: böd: %s: %m", 
£rvî_«me
);

255  (
ERROR_RC
);

258 
ªåy_max
 = 
d©a
->
ªåõs
;

259 
ªåõs
 = 0;

262 
auth
 = (
AUTH_HDR
 *Ë
£nd_buf„r
;

263 
auth
->
code
 = 
d©a
->code;

264 
auth
->
id
 = 
d©a
->
£q_nbr
;

266 i‡(
d©a
->
code
 =
PW_ACCOUNTING_REQUEST
)

268 
tŸÆ_Àngth
 = 
	`rc_∑ck_li°
(
d©a
->
£nd_∑ús
, 
£¸ë
, 
auth
Ë+ 
AUTH_HDR_LEN
;

270 
auth
->
Àngth
 = 
	`ht⁄s
 ((Ë
tŸÆ_Àngth
);

272 
	`mem£t
((*Ë
auth
->
ve˘‹
, 0, 
AUTH_VECTOR_LEN
);

273 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

274 
	`mem˝y
 ((*Ë
auth
 + 
tŸÆ_Àngth
, 
£¸ë
, 
£¸ëÀn
);

275 
	`rc_md5_ˇlc
 (
ve˘‹
, (*Ë
auth
, 
tŸÆ_Àngth
 + 
£¸ëÀn
);

276 
	`mem˝y
 ((*Ë
auth
->
ve˘‹
, (*Ëve˘‹, 
AUTH_VECTOR_LEN
);

280 
	`rc_øndom_ve˘‹
 (
ve˘‹
);

281 
	`mem˝y
 (
auth
->
ve˘‹
, ve˘‹, 
AUTH_VECTOR_LEN
);

283 
tŸÆ_Àngth
 = 
	`rc_∑ck_li°
(
d©a
->
£nd_∑ús
, 
£¸ë
, 
auth
Ë+ 
AUTH_HDR_LEN
;

285 
auth
->
Àngth
 = 
	`ht⁄s
 ((Ë
tŸÆ_Àngth
);

288 
sö
 = (
sockaddr_ö
 *Ë& 
ßªmŸe
;

289 
	`mem£t
 ((*Ë
sö
, '\0',  (
ßªmŸe
));

290 
sö
->
sö_Ámûy
 = 
AF_INET
;

291 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
auth_ùaddr
);

292 
sö
->
sö_p‹t
 = 
	`ht⁄s
 ((Ë
d©a
->
svc_p‹t
);

296 
	`£ndto
 (
sockfd
, (*Ë
auth
, (Ë
tŸÆ_Àngth
, () 0,

297 (
sockaddr
 *Ë
sö
,  (
sockaddr_ö
));

299 
authtime
.
tv_u£c
 = 0L;

300 
authtime
.
tv_£c
 = (Ë
d©a
->
timeout
;

301 
	`FD_ZERO
 (&
ªadfds
);

302 
	`FD_SET
 (
sockfd
, &
ªadfds
);

303 i‡(
	`£À˘
 (
sockfd
 + 1, &
ªadfds
, 
NULL
, NULL, &
authtime
) < 0)

305 i‡(
î∫o
 =
EINTR
 && !
gŸ_sigãrm
)

307 
	`îr‹
("rc_send_server: select: %m");

308 
	`mem£t
 (
£¸ë
, '\0',  (secret));

309 
	`˛o£
 (
sockfd
);

310  (
ERROR_RC
);

312 i‡(
	`FD_ISSET
 (
sockfd
, &
ªadfds
))

319 i‡(++
ªåõs
 >
ªåy_max
)

321 
	`îr‹
("rc_send_server:ÇoÑeply from RADIUS server %s:%u",

322 
	`rc_ù_ho°«me
 (
auth_ùaddr
), 
d©a
->
svc_p‹t
);

323 
	`˛o£
 (
sockfd
);

324 
	`mem£t
 (
£¸ë
, '\0',  (secret));

325  (
TIMEOUT_RC
);

328 
ßÀn
 =  (
ßªmŸe
);

329 
Àngth
 = 
	`ªcv‰om
 (
sockfd
, (*Ë
ªcv_buf„r
,

330 (Ë (
ªcv_buf„r
),

331 (Ë0, &
ßªmŸe
, &
ßÀn
);

333 i‡(
Àngth
 <= 0)

335 
	`îr‹
("rc_£nd_£rvî:Ñecv‰om: %s:%d: %m", 
£rvî_«me
,\

336 
d©a
->
svc_p‹t
);

337 
	`˛o£
 (
sockfd
);

338 
	`mem£t
 (
£¸ë
, '\0',  (secret));

339  (
ERROR_RC
);

342 
ªcv_auth
 = (
AUTH_HDR
 *)
ªcv_buf„r
;

344 
ªsu…
 = 
	`rc_check_ª∂y
 (
ªcv_auth
, 
BUFFER_LEN
, 
£¸ë
, 
ve˘‹
, 
d©a
->
£q_nbr
);

346 
d©a
->
ª˚ive_∑ús
 = 
	`rc_av∑ú_gí
(
ªcv_auth
);

348 
	`˛o£
 (
sockfd
);

349 i‡(
öfo
)

351 
	`mem˝y
(
öfo
->
£¸ë
, secret, (info->secret));

352 
	`mem˝y
(
öfo
->
ªque°_ve˘‹
, 
ve˘‹
,

353 (
öfo
->
ªque°_ve˘‹
));

355 
	`mem£t
 (
£¸ë
, '\0',  (secret));

357 i‡(
ªsu…
 !
OK_RC
)  (result);

359 *
msg
 = '\0';

360 
vp
 = 
d©a
->
ª˚ive_∑ús
;

361 
vp
)

363 i‡((
vp
 = 
	`rc_av∑ú_gë
(vp, 
PW_REPLY_MESSAGE
)))

365 
	`°rˇt
(
msg
, 
vp
->
°rvÆue
);

366 
	`°rˇt
(
msg
, "\n");

367 
vp
 = vp->
√xt
;

371 i‡((
ªcv_auth
->
code
 =
PW_ACCESS_ACCEPT
) ||

372 (
ªcv_auth
->
code
 =
PW_PASSWORD_ACK
) ||

373 (
ªcv_auth
->
code
 =
PW_ACCOUNTING_RESPONSE
))

375 
ªsu…
 = 
OK_RC
;

379 
ªsu…
 = 
BADRESP_RC
;

382  (
ªsu…
);

383 
	}
}

395 
	$rc_check_ª∂y
 (
AUTH_HDR
 *
auth
, 
buf„æí
, *
£¸ë
,

396 *
ve˘‹
, 
£q_nbr
)

398 
£¸ëÀn
;

399 
tŸÆÀn
;

400 
ˇlc_dige°
[
AUTH_VECTOR_LEN
];

401 
ª∂y_dige°
[
AUTH_VECTOR_LEN
];

403 
tŸÆÀn
 = 
	`¡ohs
 (
auth
->
Àngth
);

405 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

408 i‡((
tŸÆÀn
 < 20) || (totallen > 4096))

410 
	`îr‹
("rc_check_reply:Ñeceived RADIUS serverÑesponse with invalidÜength");

411  (
BADRESP_RC
);

415 i‡((
tŸÆÀn
 + 
£¸ëÀn
Ë> 
buf„æí
)

417 
	`îr‹
("rc_check_reply:ÇotÉnough buffer spaceÅo verify RADIUS serverÑesponse");

418  (
BADRESP_RC
);

421 i‡(
auth
->
id
 !
£q_nbr
)

423 
	`îr‹
("rc_check_reply:ÑeceivedÇon-matching id in RADIUS serverÑesponse");

424  (
BADRESP_RC
);

428 
	`mem˝y
 ((*Ë
ª∂y_dige°
, (*Ë
auth
->
ve˘‹
, 
AUTH_VECTOR_LEN
);

429 
	`mem˝y
 ((*Ë
auth
->
ve˘‹
, (*Ëve˘‹, 
AUTH_VECTOR_LEN
);

430 
	`mem˝y
 ((*Ë
auth
 + 
tŸÆÀn
, 
£¸ë
, 
£¸ëÀn
);

431 
	`rc_md5_ˇlc
 (
ˇlc_dige°
, (*Ë
auth
, 
tŸÆÀn
 + 
£¸ëÀn
);

433 #ifde‡
DIGEST_DEBUG


435 
i
;

437 
	`Âuts
("ª∂y_dige°: ", 
°dîr
);

438 
i
 = 0; i < 
AUTH_VECTOR_LEN
; i++)

440 
	`Ârötf
(
°dîr
,"%.2x ", (Ë
ª∂y_dige°
[
i
]);

442 
	`Âuts
("\nˇlc_dige°: ", 
°dîr
);

443 
i
 = 0; i < 
AUTH_VECTOR_LEN
; i++)

445 
	`Ârötf
(
°dîr
,"%.2x ", (Ë
ˇlc_dige°
[
i
]);

447 
	`Âuts
("\n", 
°dîr
);

451 i‡(
	`memcmp
 ((*Ë
ª∂y_dige°
, (*Ë
ˇlc_dige°
,

452 
AUTH_VECTOR_LEN
) != 0)

454 #ifde‡
RADIUS_116


463 i‡(
auth
->
code
 =
PW_ACCOUNTING_RESPONSE
)

464  (
OK_RC
);

466 
	`îr‹
("rc_check_reply:Ñeceived invalidÑeply digest from RADIUS server");

467  (
BADRESP_RC
);

470  (
OK_RC
);

472 
	}
}

483 
	$rc_øndom_ve˘‹
 (*
ve˘‹
)

485 
øndno
;

486 
i
;

487 
fd
;

493 i‡((
fd
 = 
	`›í
(
_PATH_DEV_URANDOM
, 
O_RDONLY
)) >= 0)

495 *
pos
;

496 
ªadcou¡
;

498 
i
 = 
AUTH_VECTOR_LEN
;

499 
pos
 = 
ve˘‹
;

500 
i
 > 0)

502 
ªadcou¡
 = 
	`ªad
(
fd
, (*)
pos
, 
i
);

503 
pos
 +
ªadcou¡
;

504 
i
 -
ªadcou¡
;

507 
	`˛o£
(
fd
);

511 
i
 = 0; i < 
AUTH_VECTOR_LEN
;)

513 
øndno
 = 
	`magic
();

514 
	`mem˝y
 ((*Ë
ve˘‹
, (*Ë&
øndno
,  ());

515 
ve˘‹
 +=  ();

516 
i
 +=  ();

520 
	}
}

	@pppd/plugins/radius/util.c

17 
	~<ö˛udes.h
>

18 
	~<ødius˛õ¡.h
>

27 c⁄° * 
	gm⁄ths
[] =

33 
	$rc_°r2tm
 (*
vÆ°r
, 
tm
 *tm)

35 
i
;

38 
i
 = 0; i < 12; i++)

40 i‡(
	`°∫cmp
 (
m⁄ths
[
i
], 
vÆ°r
, 3) == 0)

42 
tm
->
tm_m⁄
 = 
i
;

43 
i
 = 13;

48 
tm
->
tm_mday
 = 
	`©oi
 (&
vÆ°r
[4]);

51 
tm
->
tm_yór
 = 
	`©oi
 (&
vÆ°r
[7]) - 1900;

52 
	}
}

54 
	$rc_mdñay
(
m£cs
)

56 
timevÆ
 
tv
;

58 
tv
.
tv_£c
 = (Ë
m£cs
 / 1000;

59 
tv
.
tv_u£c
 = (
m£cs
 % 1000) * 1000;

61 
	`£À˘
(0,(
fd_£t
 *)
NULL
,(fd_£à*)NULL,(fd_£à*)NULL, &
tv
);

62 
	}
}

74 
	$rc_mksid
 ()

76 
buf
[32];

77 
˙t
 = 0;

78 
	`¶¥ötf
(
buf
, (buf), "%08lX%04X%02hX",

79 (Ë
	`time
 (
NULL
),

80 (Ë
	`gëpid
 (),

81 
˙t
 & 0xFF);

82 
˙t
++;

83  
buf
;

84 
	}
}

	@pppd/plugins/rp-pppoe/common.c

16 c⁄° 
	gRCSID
[] =

19 
	#_GNU_SOURCE
 1

	)

20 
	~"µp€.h
"

21 
	~"µpd/µpd.h
"

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<°dlib.h
>

26 
	~<sy¶og.h
>

28 #ifde‡
HAVE_UNISTD_H


29 
	~<uni°d.h
>

45 
	$∑r£Packë
(
PPPoEPackë
 *
∑ckë
, 
P¨£Func
 *
func
, *
exåa
)

47 
UINT16_t
 
Àn
 = 
	`¡ohs
(
∑ckë
->
Àngth
);

48 *
curTag
;

49 
UINT16_t
 
ègTy≥
, 
ègLí
;

51 i‡(
	`PPPOE_VER
(
∑ckë
->
vîty≥
) != 1) {

52 
	`îr‹
("InvÆid PPPoE vîsi⁄ (%d)", 
	`PPPOE_VER
(
∑ckë
->
vîty≥
));

55 i‡(
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
) != 1) {

56 
	`îr‹
("InvÆid PPPoEÅy≥ (%d)", 
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
));

61 i‡(
Àn
 > 
ETH_JUMBO_LEN
 - 
PPPOE_OVERHEAD
) {

62 
	`îr‹
("InvÆid PPPoEÖackëÜígth (%u)", 
Àn
);

67 
curTag
 = 
∑ckë
->
∑ylﬂd
;

68 
curTag
 - 
∑ckë
->
∑ylﬂd
 + 
TAG_HDR_SIZE
 <
Àn
) {

70 
ègTy≥
 = (
curTag
[0] << 8) + curTag[1];

71 
ègLí
 = (
curTag
[2] << 8) + curTag[3];

72 i‡(
ègTy≥
 =
TAG_END_OF_LIST
) {

75 i‡((
curTag
 - 
∑ckë
->
∑ylﬂd
Ë+ 
ègLí
 + 
TAG_HDR_SIZE
 > 
Àn
) {

76 
	`îr‹
("InvÆid PPPoEÅagÜígth (%u)", 
ègLí
);

79 
	`func
(
ègTy≥
, 
ègLí
, 
curTag
+
TAG_HDR_SIZE
, 
exåa
);

80 
curTag
 = curTag + 
TAG_HDR_SIZE
 + 
ègLí
;

83 
	}
}

96 
	$£ndPADT
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, c⁄° *
msg
)

98 
PPPoEPackë
 
∑ckë
;

99 *
curs‹
 = 
∑ckë
.
∑ylﬂd
;

101 
UINT16_t
 
∂í
 = 0;

104 i‡(!
c⁄n
->
£ssi⁄
) ;

107 i‡(
c⁄n
->
discovîySockë
 < 0) ;

109 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_de°
, 
c⁄n
->
≥îEth
, 
ETH_ALEN
);

110 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
myEth
, 
ETH_ALEN
);

112 
∑ckë
.
ëhHdr
.
h_¥Ÿo
 = 
	`ht⁄s
(
Eth_PPPOE_Discovîy
);

113 
∑ckë
.
vîty≥
 = 
	`PPPOE_VER_TYPE
(1, 1);

114 
∑ckë
.
code
 = 
CODE_PADT
;

115 
∑ckë
.
£ssi⁄
 = 
c⁄n
->session;

119 
c⁄n
->
£ssi⁄
 = 0;

122 i‡(
c⁄n
->
ho°Uniq
.
Àngth
) {

123 
Àn
 = 
	`¡ohs
(
c⁄n
->
ho°Uniq
.
Àngth
);

124 
	`mem˝y
(
curs‹
, &
c⁄n
->
ho°Uniq
, 
Àn
 + 
TAG_HDR_SIZE
);

125 
curs‹
 +
Àn
 + 
TAG_HDR_SIZE
;

126 
∂í
 +
Àn
 + 
TAG_HDR_SIZE
;

130 i‡(
msg
) {

131 
PPPoETag
 
îr
;

132 
size_t
 
ñí
 = 
	`°æí
(
msg
);

133 
îr
.
ty≥
 = 
	`ht⁄s
(
TAG_GENERIC_ERROR
);

134 
îr
.
Àngth
 = 
	`ht⁄s
(
ñí
);

135 
	`°r˝y
(
îr
.
∑ylﬂd
, 
msg
);

136 
	`mem˝y
(
curs‹
, &
îr
, 
ñí
 + 
TAG_HDR_SIZE
);

137 
curs‹
 +
ñí
 + 
TAG_HDR_SIZE
;

138 
∂í
 +
ñí
 + 
TAG_HDR_SIZE
;

142 i‡(
c⁄n
->
cookõ
.
ty≥
) {

143 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
,

144 
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
);

145 
	`mem˝y
(
curs‹
, &
c⁄n
->
cookõ
, 
	`¡ohs
(c⁄n->cookõ.
Àngth
Ë+ 
TAG_HDR_SIZE
);

146 
curs‹
 +
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

147 
∂í
 +
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

150 i‡(
c⁄n
->
ªœyId
.
ty≥
) {

151 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
,

152 
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
);

153 
	`mem˝y
(
curs‹
, &
c⁄n
->
ªœyId
, 
	`¡ohs
(c⁄n->ªœyId.
Àngth
Ë+ 
TAG_HDR_SIZE
);

154 
curs‹
 +
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

155 
∂í
 +
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

158 
∑ckë
.
Àngth
 = 
	`ht⁄s
(
∂í
);

159 
	`£ndPackë
(
c⁄n
, c⁄n->
discovîySockë
, &
∑ckë
, (Ë(
∂í
 + 
HDR_SIZE
));

160 
	`öfo
("Sent PADT");

161 
	}
}

163 
	#EH
(
x
Ë(x)[0], (x)[1], (x)[2], (x)[3], (x)[4], (x)[5]

	)

166 
	$µp€_¥öçkt
(
PPPoEPackë
 *
∑ckë
,

167 (*
¥öãr
)(*, *, ...), *
¨g
)

169 
Àn
 = 
	`¡ohs
(
∑ckë
->
Àngth
);

170 
i
, 
èg
, 
éí
, 
ãxt
;

172 
	`¡ohs
(
∑ckë
->
ëhHdr
.
h_¥Ÿo
)) {

173 
ETH_PPPOE_DISCOVERY
:

174 
	`¥öãr
(
¨g
, "PPPOE Discovîy V%dT%d ", 
	`PPPOE_VER
(
∑ckë
->
vîty≥
),

175 
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
));

176 
∑ckë
->
code
) {

177 
CODE_PADI
:

178 
	`¥öãr
(
¨g
, "PADI");

180 
CODE_PADO
:

181 
	`¥öãr
(
¨g
, "PADO");

183 
CODE_PADR
:

184 
	`¥öãr
(
¨g
, "PADR");

186 
CODE_PADS
:

187 
	`¥öãr
(
¨g
, "PADS");

189 
CODE_PADT
:

190 
	`¥öãr
(
¨g
, "PADT");

193 
	`¥öãr
(
¨g
, "unknow¿codê%x", 
∑ckë
->
code
);

195 
	`¥öãr
(
¨g
, " sessi⁄ 0x%xÜígth %d\n", 
	`¡ohs
(
∑ckë
->
£ssi⁄
), 
Àn
);

197 
ETH_PPPOE_SESSION
:

198 
	`¥öãr
(
¨g
, "PPPOE Sessi⁄ V%dT%d", 
	`PPPOE_VER
(
∑ckë
->
vîty≥
),

199 
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
));

200 
	`¥öãr
(
¨g
, " codê0x%x sessi⁄ 0x%xÜígth %d\n", 
∑ckë
->
code
,

201 
	`¡ohs
(
∑ckë
->
£ssi⁄
), 
Àn
);

204 
	`¥öãr
(
¨g
, "UnknownÉthernet frame withÖroto = 0x%x\n",

205 
	`¡ohs
(
∑ckë
->
ëhHdr
.
h_¥Ÿo
));

208 
	`¥öãr
(
¨g
, " d° %02x:%02x:%02x:%02x:%02x:%02x ", 
	`EH
(
∑ckë
->
ëhHdr
.
h_de°
));

209 
	`¥öãr
(
¨g
, " sr¯%02x:%02x:%02x:%02x:%02x:%02x\n", 
	`EH
(
∑ckë
->
ëhHdr
.
h_sour˚
));

210 i‡(
	`¡ohs
(
∑ckë
->
ëhHdr
.
h_¥Ÿo
Ë!
ETH_PPPOE_DISCOVERY
)

213 
i
 = 0; i + 
TAG_HDR_SIZE
 <
Àn
; i +
éí
) {

214 
èg
 = (
∑ckë
->
∑ylﬂd
[
i
] << 8) +Öacket->payload[i+1];

215 
éí
 = (
∑ckë
->
∑ylﬂd
[
i
+2] << 8) +Öacket->payload[i+3];

216 i‡(
i
 + 
éí
 + 
TAG_HDR_SIZE
 > 
Àn
)

218 
ãxt
 = 0;

219 
i
 +
TAG_HDR_SIZE
;

220 
	`¥öãr
(
¨g
, " [");

221 
èg
) {

222 
TAG_END_OF_LIST
:

223 
	`¥öãr
(
¨g
, "end-of-list");

225 
TAG_SERVICE_NAME
:

226 
	`¥öãr
(
¨g
, "service-name");

227 
ãxt
 = 1;

229 
TAG_AC_NAME
:

230 
	`¥öãr
(
¨g
, "AC-name");

231 
ãxt
 = 1;

233 
TAG_HOST_UNIQ
:

234 
	`¥öãr
(
¨g
, "host-uniq");

236 
TAG_AC_COOKIE
:

237 
	`¥öãr
(
¨g
, "AC-cookie");

239 
TAG_VENDOR_SPECIFIC
:

240 
	`¥öãr
(
¨g
, "vendor-specific");

242 
TAG_RELAY_SESSION_ID
:

243 
	`¥öãr
(
¨g
, "relay-session-id");

245 
TAG_PPP_MAX_PAYLOAD
:

246 
	`¥öãr
(
¨g
, "PPP-max-payload");

248 
TAG_SERVICE_NAME_ERROR
:

249 
	`¥öãr
(
¨g
, "service-name-error");

250 
ãxt
 = 1;

252 
TAG_AC_SYSTEM_ERROR
:

253 
	`¥öãr
(
¨g
, "AC-system-error");

254 
ãxt
 = 1;

256 
TAG_GENERIC_ERROR
:

257 
	`¥öãr
(
¨g
, "generic-error");

258 
ãxt
 = 1;

261 
	`¥öãr
(
¨g
, "unknow¿èg 0x%x", 
èg
);

263 i‡(
éí
) {

264 i‡(
ãxt
)

265 
	`¥öãr
(
¨g
, " %.*v", 
éí
, &
∑ckë
->
∑ylﬂd
[
i
]);

266 i‡(
éí
 <= 32)

267 
	`¥öãr
(
¨g
, " %.*B", 
éí
, &
∑ckë
->
∑ylﬂd
[
i
]);

269 
	`¥öãr
(
¨g
, " %.32B... (length %d)",

270 &
∑ckë
->
∑ylﬂd
[
i
], 
éí
);

272 
	`¥öãr
(
¨g
, "]");

274 
	`¥öãr
(
¨g
, "\n");

275 
	}
}

277 
	$µp€_log_∑ckë
(c⁄° *
¥efix
, 
PPPoEPackë
 *
∑ckë
)

279 
	`öô_¥_log
(
¥efix
, 
LOG_DEBUG
);

280 
	`µp€_¥öçkt
(
∑ckë
, 
¥_log
, 
NULL
);

281 
	`íd_¥_log
();

282 
	}
}

	@pppd/plugins/rp-pppoe/config.h

8 
	#HAVE_SYS_WAIT_H
 1

	)

14 
	#RETSIGTYPE
 

	)

22 
	#STDC_HEADERS
 1

	)

25 
	#TIME_WITH_SYS_TIME
 1

	)

30 
	#HAVE_STRUCT_SOCKADDR_LL
 1

	)

33 
	#SIZEOF_UNSIGNED_INT
 4

	)

36 
	#SIZEOF_UNSIGNED_LONG
 4

	)

39 
	#SIZEOF_UNSIGNED_SHORT
 2

	)

42 
	#HAVE_SELECT
 1

	)

45 
	#HAVE_SOCKET
 1

	)

48 
	#HAVE_STRERROR
 1

	)

51 
	#HAVE_STRTOL
 1

	)

54 
	#HAVE_ASM_TYPES_H
 1

	)

57 
	#HAVE_FCNTL_H
 1

	)

60 
	#HAVE_GETOPT_H
 1

	)

63 
	#HAVE_LINUX_IF_ETHER_H
 1

	)

66 
	#HAVE_LINUX_KERNEL_PPPOE
 1

	)

69 
	#HAVE_LINUX_IF_PACKET_H
 1

	)

72 
	#HAVE_LINUX_IF_PPPOX_H
 1

	)

75 
	#HAVE_NET_BPF_H
 1

	)

78 
	#HAVE_NET_IF_ARP_H
 1

	)

81 
	#HAVE_NET_ETHERNET_H
 1

	)

84 
	#HAVE_NET_IF_H
 1

	)

87 
	#HAVE_LINUX_IF_H
 1

	)

99 
	#HAVE_NETINET_IF_ETHER_H
 1

	)

102 
	#HAVE_NETPACKET_PACKET_H
 1

	)

108 
	#HAVE_SYS_IOCTL_H
 1

	)

111 
	#HAVE_SYS_PARAM_H
 1

	)

114 
	#HAVE_SYS_SOCKET_H
 1

	)

117 
	#HAVE_SYS_TIME_H
 1

	)

120 
	#HAVE_SYS_UIO_H
 1

	)

123 
	#HAVE_SYSLOG_H
 1

	)

126 
	#HAVE_UNISTD_H
 1

	)

129 
	#HAVE_N_HDLC
 1

	)

	@pppd/plugins/rp-pppoe/debug.c

16 c⁄° 
	gRCSID
[] =

19 
	~"µp€.h
"

20 
	~<sys/time.h
>

21 
	~<time.h
>

22 
	~<uni°d.h
>

23 
	~<˘y≥.h
>

37 
	$dumpHex
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
)

39 
i
;

40 
ba£
;

42 i‡(!
Â
) ;

45 i‡(
Àn
 >2 && 
buf
[0] == 0xC0 && buf[1] == 0x23) {

46 
	`Ârötf
(
Â
, "(PAP Authentication Frame -- ContentsÇot dumped)\n");

50 
ba£
=0; ba£<
Àn
; base += 16) {

51 
i
=
ba£
; i<base+16; i++) {

52 i‡(
i
 < 
Àn
) {

53 
	`Ârötf
(
Â
, "%02x ", (Ë
buf
[
i
]);

55 
	`Ârötf
(
Â
, " ");

58 
	`Ârötf
(
Â
, " ");

59 
i
=
ba£
; i<base+16; i++) {

60 i‡(
i
 < 
Àn
) {

61 i‡(
	`i•röt
(
buf
[
i
])) {

62 
	`Ârötf
(
Â
, "%c", 
buf
[
i
]);

64 
	`Ârötf
(
Â
, ".");

70 
	`Ârötf
(
Â
, "\n");

72 
	}
}

86 
	$dumpPackë
(
FILE
 *
Â
, 
PPPoEPackë
 *
∑ckë
, c⁄° *
dú
)

88 
Àn
 = 
	`¡ohs
(
∑ckë
->
Àngth
);

91 
timevÆ
 
tv
;

92 
time_t
 
now
;

93 
mûli£c
;

94 
tm
 *
…
;

95 
timebuf
[256];

97 
UINT16_t
 
ty≥
 = 
	`ëhîTy≥
(
∑ckë
);

98 i‡(!
Â
) ;

99 
	`gëtimeofday
(&
tv
, 
NULL
);

100 
now
 = (
time_t
Ë
tv
.
tv_£c
;

101 
mûli£c
 = 
tv
.
tv_u£c
 / 1000;

102 
…
 = 
	`loˇ…ime
(&
now
);

103 
	`°r·ime
(
timebuf
, 256, "%H:%M:%S", 
…
);

104 
	`Ârötf
(
Â
, "%s.%03d %†PPPoE ", 
timebuf
, 
mûli£c
, 
dú
);

105 i‡(
ty≥
 =
Eth_PPPOE_Discovîy
) {

106 
	`Ârötf
(
Â
, "Discovîy (%xË", (Ë
ty≥
);

107 } i‡(
ty≥
 =
Eth_PPPOE_Sessi⁄
) {

108 
	`Ârötf
(
Â
, "Sessi⁄ (%xË", (Ë
ty≥
);

110 
	`Ârötf
(
Â
, "Unknow¿(%xË", (Ë
ty≥
);

113 
∑ckë
->
code
) {

114 
CODE_PADI
: 
	`Ârötf
(
Â
, "PADI "); ;

115 
CODE_PADO
: 
	`Ârötf
(
Â
, "PADO "); ;

116 
CODE_PADR
: 
	`Ârötf
(
Â
, "PADR "); ;

117 
CODE_PADS
: 
	`Ârötf
(
Â
, "PADS "); ;

118 
CODE_PADT
: 
	`Ârötf
(
Â
, "PADT "); ;

119 
CODE_PADM
: 
	`Ârötf
(
Â
, "PADM "); ;

120 
CODE_PADN
: 
	`Ârötf
(
Â
, "PADN "); ;

121 
CODE_SESS
: 
	`Ârötf
(
Â
, "SESS "); ;

124 
	`Ârötf
(
Â
, "sess-id %dÜength %d\n",

125 (Ë
	`¡ohs
(
∑ckë
->
£ssi⁄
),

126 
Àn
);

129 
	`Ârötf
(
Â
,

132 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[0],

133 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[1],

134 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[2],

135 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[3],

136 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[4],

137 (Ë
∑ckë
->
ëhHdr
.
h_sour˚
[5],

138 (Ë
∑ckë
->
ëhHdr
.
h_de°
[0],

139 (Ë
∑ckë
->
ëhHdr
.
h_de°
[1],

140 (Ë
∑ckë
->
ëhHdr
.
h_de°
[2],

141 (Ë
∑ckë
->
ëhHdr
.
h_de°
[3],

142 (Ë
∑ckë
->
ëhHdr
.
h_de°
[4],

143 (Ë
∑ckë
->
ëhHdr
.
h_de°
[5]);

144 
	`dumpHex
(
Â
, 
∑ckë
->
∑ylﬂd
, 
	`¡ohs
’ackë->
Àngth
));

145 
	}
}

	@pppd/plugins/rp-pppoe/discovery.c

11 c⁄° 
	gRCSID
[] =

14 
	#_GNU_SOURCE
 1

	)

15 
	~"µp€.h
"

16 
	~"µpd/µpd.h
"

17 
	~"µpd/fsm.h
"

18 
	~"µpd/l˝.h
"

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

22 
	~<î∫o.h
>

24 #ifde‡
HAVE_SYS_TIME_H


25 
	~<sys/time.h
>

28 #ifde‡
HAVE_SYS_UIO_H


29 
	~<sys/uio.h
>

32 #ifde‡
HAVE_UNISTD_H


33 
	~<uni°d.h
>

36 #ifde‡
USE_LINUX_PACKET


37 
	~<sys/io˘l.h
>

38 
	~<f˙é.h
>

41 
	~<sig«l.h
>

44 
	$time_À·
(
timevÆ
 *
diff
, timevÆ *
exp
)

46 
timevÆ
 
now
;

48 i‡(
	`gë_time
(&
now
) < 0) {

49 
	`îr‹
("get_time: %m");

53 i‡(
now
.
tv_£c
 > 
exp
->tv_sec

54 || (
now
.
tv_£c
 =
exp
->tv_£¯&&Çow.
tv_u£c
 >=Éxp->tv_usec))

57 
diff
->
tv_£c
 = 
exp
->tv_£¯- 
now
.tv_sec;

58 
diff
->
tv_u£c
 = 
exp
->tv_u£¯- 
now
.tv_usec;

59 i‡(
diff
->
tv_u£c
 < 0) {

60 
diff
->
tv_u£c
 += 1000000;

61 --
diff
->
tv_£c
;

65 
	}
}

80 
	$∑r£F‹Ho°Uniq
(
UINT16_t
 
ty≥
, UINT16_à
Àn
, *
d©a
,

81 *
exåa
)

83 
PPPoETag
 *
èg
 = 
exåa
;

85 i‡(
ty≥
 =
TAG_HOST_UNIQ
 && 
Àn
 =
	`¡ohs
(
èg
->
Àngth
))

86 
èg
->
Àngth
 = 
	`memcmp
(
d©a
,Åag->
∑ylﬂd
, 
Àn
);

87 
	}
}

101 
	$∑ckëIsF‹Me
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
PPPoEPackë
 *
∑ckë
)

103 
PPPoETag
 
ho°Uniq
 = 
c⁄n
->hostUniq;

106 i‡(
	`memcmp
(
∑ckë
->
ëhHdr
.
h_de°
, 
c⁄n
->
myEth
, 
ETH_ALEN
))  0;

109 i‡(!
c⁄n
->
ho°Uniq
.
Àngth
)  1;

111 
	`∑r£Packë
(
∑ckë
, 
∑r£F‹Ho°Uniq
, &
ho°Uniq
);

112  !
ho°Uniq
.
Àngth
;

113 
	}
}

130 
	$∑r£PADOTags
(
UINT16_t
 
ty≥
, UINT16_à
Àn
, *
d©a
,

131 *
exåa
)

133 
PackëCrôîü
 *
pc
 = (PackëCrôîü *Ë
exåa
;

134 
PPPoEC⁄√˘i⁄
 *
c⁄n
 = 
pc
->conn;

135 
UINT16_t
 
mru
;

136 
i
;

138 
ty≥
) {

139 
TAG_AC_NAME
:

140 
pc
->
£íACName
 = 1;

141 i‡(
c⁄n
->
¥ötACNames
) {

142 
	`öfo
("Ac˚ss-C⁄˚¡øt‹: %.*s", (Ë
Àn
, 
d©a
);

144 i‡(
c⁄n
->
acName
 && 
Àn
 =
	`°æí
(conn->acName) &&

145 !
	`°∫cmp
((*Ë
d©a
, 
c⁄n
->
acName
, 
Àn
)) {

146 
pc
->
acNameOK
 = 1;

149 
TAG_SERVICE_NAME
:

150 
pc
->
£íSîvi˚Name
 = 1;

151 i‡(
c⁄n
->
£rvi˚Name
 && 
Àn
 =
	`°æí
(conn->serviceName) &&

152 !
	`°∫cmp
((*Ë
d©a
, 
c⁄n
->
£rvi˚Name
, 
Àn
)) {

153 
pc
->
£rvi˚NameOK
 = 1;

156 
TAG_AC_COOKIE
:

157 
c⁄n
->
cookõ
.
ty≥
 = 
	`ht⁄s
(type);

158 
c⁄n
->
cookõ
.
Àngth
 = 
	`ht⁄s
(
Àn
);

159 
	`mem˝y
(
c⁄n
->
cookõ
.
∑ylﬂd
, 
d©a
, 
Àn
);

161 
TAG_RELAY_SESSION_ID
:

162 
c⁄n
->
ªœyId
.
ty≥
 = 
	`ht⁄s
(type);

163 
c⁄n
->
ªœyId
.
Àngth
 = 
	`ht⁄s
(
Àn
);

164 
	`mem˝y
(
c⁄n
->
ªœyId
.
∑ylﬂd
, 
d©a
, 
Àn
);

166 
TAG_PPP_MAX_PAYLOAD
:

167 i‡(
Àn
 =(
mru
)) {

168 
	`mem˝y
(&
mru
, 
d©a
, (mru));

169 
mru
 = 
	`¡ohs
(mru);

170 i‡(
mru
 >
ETH_PPPOE_MTU
) {

171 i‡(
l˝_Ælow›ti⁄s
[0].
mru
 > mru)

172 
l˝_Ælow›ti⁄s
[0].
mru
 = mru;

173 i‡(
l˝_w™t›ti⁄s
[0].
mru
 > mru)

174 
l˝_w™t›ti⁄s
[0].
mru
 = mru;

175 
c⁄n
->
£íMaxPaylﬂd
 = 1;

179 
TAG_SERVICE_NAME_ERROR
:

180 
	`îr‹
("PADO: Sîvi˚-Name-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

181 
c⁄n
->
îr‹
 = 1;

183 
TAG_AC_SYSTEM_ERROR
:

184 
	`îr‹
("PADO: Sy°em-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

185 
c⁄n
->
îr‹
 = 1;

187 
TAG_GENERIC_ERROR
:

188 
	`îr‹
("PADO: Gíîic-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

189 
c⁄n
->
îr‹
 = 1;

192 
	}
}

207 
	$∑r£PADSTags
(
UINT16_t
 
ty≥
, UINT16_à
Àn
, *
d©a
,

208 *
exåa
)

210 
PPPoEC⁄√˘i⁄
 *
c⁄n
 = (PPPoEC⁄√˘i⁄ *Ë
exåa
;

211 
UINT16_t
 
mru
;

212 
ty≥
) {

213 
TAG_SERVICE_NAME
:

214 
	`dbglog
("PADS: Sîvi˚-Name: '%.*s'", (Ë
Àn
, 
d©a
);

216 
TAG_PPP_MAX_PAYLOAD
:

217 i‡(
Àn
 =(
mru
)) {

218 
	`mem˝y
(&
mru
, 
d©a
, (mru));

219 
mru
 = 
	`¡ohs
(mru);

220 i‡(
mru
 >
ETH_PPPOE_MTU
) {

221 i‡(
l˝_Ælow›ti⁄s
[0].
mru
 > mru)

222 
l˝_Ælow›ti⁄s
[0].
mru
 = mru;

223 i‡(
l˝_w™t›ti⁄s
[0].
mru
 > mru)

224 
l˝_w™t›ti⁄s
[0].
mru
 = mru;

225 
c⁄n
->
£íMaxPaylﬂd
 = 1;

229 
TAG_SERVICE_NAME_ERROR
:

230 
	`îr‹
("PADS: Sîvi˚-Name-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

231 
c⁄n
->
îr‹
 = 1;

233 
TAG_AC_SYSTEM_ERROR
:

234 
	`îr‹
("PADS: Sy°em-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

235 
c⁄n
->
îr‹
 = 1;

237 
TAG_GENERIC_ERROR
:

238 
	`îr‹
("PADS: Gíîic-Eº‹: %.*s", (Ë
Àn
, 
d©a
);

239 
c⁄n
->
îr‹
 = 1;

241 
TAG_RELAY_SESSION_ID
:

242 
c⁄n
->
ªœyId
.
ty≥
 = 
	`ht⁄s
(type);

243 
c⁄n
->
ªœyId
.
Àngth
 = 
	`ht⁄s
(
Àn
);

244 
	`mem˝y
(
c⁄n
->
ªœyId
.
∑ylﬂd
, 
d©a
, 
Àn
);

247 
	}
}

259 
	$£ndPADI
(
PPPoEC⁄√˘i⁄
 *
c⁄n
)

261 
PPPoEPackë
 
∑ckë
;

262 *
curs‹
 = 
∑ckë
.
∑ylﬂd
;

263 
PPPoETag
 *
svc
 = (PPPoETag *Ë(&
∑ckë
.
∑ylﬂd
);

264 
UINT16_t
 
«mñí
 = 0;

265 
UINT16_t
 
∂í
;

266 
omô_£rvi˚_«me
 = 0;

268 i‡(
c⁄n
->
£rvi˚Name
) {

269 
«mñí
 = (
UINT16_t
Ë
	`°æí
(
c⁄n
->
£rvi˚Name
);

270 i‡(!
	`°rcmp
(
c⁄n
->
£rvi˚Name
, "NO-SERVICE-NAME-NON-RFC-COMPLIANT")) {

271 
omô_£rvi˚_«me
 = 1;

276 
	`mem£t
(
∑ckë
.
ëhHdr
.
h_de°
, 0xFF, 
ETH_ALEN
);

277 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
myEth
, 
ETH_ALEN
);

279 
∑ckë
.
ëhHdr
.
h_¥Ÿo
 = 
	`ht⁄s
(
Eth_PPPOE_Discovîy
);

280 
∑ckë
.
vîty≥
 = 
	`PPPOE_VER_TYPE
(1, 1);

281 
∑ckë
.
code
 = 
CODE_PADI
;

282 
∑ckë
.
£ssi⁄
 = 0;

284 i‡(!
omô_£rvi˚_«me
) {

285 
∂í
 = 
TAG_HDR_SIZE
 + 
«mñí
;

286 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
∂í
);

288 
svc
->
ty≥
 = 
TAG_SERVICE_NAME
;

289 
svc
->
Àngth
 = 
	`ht⁄s
(
«mñí
);

291 i‡(
c⁄n
->
£rvi˚Name
) {

292 
	`mem˝y
(
svc
->
∑ylﬂd
, 
c⁄n
->
£rvi˚Name
, 
	`°æí
(conn->serviceName));

294 
curs‹
 +
«mñí
 + 
TAG_HDR_SIZE
;

296 
∂í
 = 0;

300 i‡(
c⁄n
->
ho°Uniq
.
Àngth
) {

301 
Àn
 = 
	`¡ohs
(
c⁄n
->
ho°Uniq
.
Àngth
);

302 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
Àn
 + 
TAG_HDR_SIZE
);

303 
	`mem˝y
(
curs‹
, &
c⁄n
->
ho°Uniq
, 
Àn
 + 
TAG_HDR_SIZE
);

304 
curs‹
 +
Àn
 + 
TAG_HDR_SIZE
;

305 
∂í
 +
Àn
 + 
TAG_HDR_SIZE
;

309 i‡(
	`MIN
(
l˝_Ælow›ti⁄s
[0].
mru
, 
l˝_w™t›ti⁄s
[0].mruË> 
ETH_PPPOE_MTU
) {

310 
PPPoETag
 
maxPaylﬂd
;

311 
UINT16_t
 
mru
 = 
	`ht⁄s
(
	`MIN
(
l˝_Ælow›ti⁄s
[0].mru, 
l˝_w™t›ti⁄s
[0].mru));

312 
maxPaylﬂd
.
ty≥
 = 
	`ht⁄s
(
TAG_PPP_MAX_PAYLOAD
);

313 
maxPaylﬂd
.
Àngth
 = 
	`ht⁄s
((
mru
));

314 
	`mem˝y
(
maxPaylﬂd
.
∑ylﬂd
, &
mru
, (mru));

315 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, (
mru
Ë+ 
TAG_HDR_SIZE
);

316 
	`mem˝y
(
curs‹
, &
maxPaylﬂd
, (
mru
Ë+ 
TAG_HDR_SIZE
);

317 
curs‹
 +(
mru
Ë+ 
TAG_HDR_SIZE
;

318 
∂í
 +(
mru
Ë+ 
TAG_HDR_SIZE
;

321 
∑ckë
.
Àngth
 = 
	`ht⁄s
(
∂í
);

323 
	`£ndPackë
(
c⁄n
, c⁄n->
discovîySockë
, &
∑ckë
, (Ë(
∂í
 + 
HDR_SIZE
));

324 
	}
}

337 
	$waôF‹PADO
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
timeout
)

339 
fd_£t
 
ªadabÀ
;

340 
r
;

341 
timevÆ
 
tv
;

342 
timevÆ
 
expúe_©
;

344 
PPPoEPackë
 
∑ckë
;

345 
Àn
;

347 
PackëCrôîü
 
pc
;

348 
pc
.
c⁄n
 = conn;

349 
pc
.
acNameOK
 = (
c⁄n
->
acName
) ? 0 : 1;

350 
pc
.
£rvi˚NameOK
 = (
c⁄n
->
£rvi˚Name
) ? 0 : 1;

351 
pc
.
£íACName
 = 0;

352 
pc
.
£íSîvi˚Name
 = 0;

353 
c⁄n
->
£íMaxPaylﬂd
 = 0;

354 
c⁄n
->
îr‹
 = 0;

356 i‡(
	`gë_time
(&
expúe_©
) < 0) {

357 
	`îr‹
("get_time (waitForPADO): %m");

360 
expúe_©
.
tv_£c
 +
timeout
;

363 i‡(
BPF_BUFFER_IS_EMPTY
) {

364 i‡(!
	`time_À·
(&
tv
, &
expúe_©
))

367 
	`FD_ZERO
(&
ªadabÀ
);

368 
	`FD_SET
(
c⁄n
->
discovîySockë
, &
ªadabÀ
);

371 
r
 = 
	`£À˘
(
c⁄n
->
discovîySockë
+1, &
ªadabÀ
, 
NULL
, NULL, &
tv
);

372 i‡(
r
 >0 || 
î∫o
 !
EINTR
 || 
gŸ_sigãrm
) ;

374 i‡(
r
 < 0) {

375 
	`îr‹
("select (waitForPADO): %m");

378 i‡(
r
 == 0)

383 
	`ª˚ivePackë
(
c⁄n
->
discovîySockë
, &
∑ckë
, &
Àn
);

386 i‡(
	`¡ohs
(
∑ckë
.
Àngth
Ë+ 
HDR_SIZE
 > 
Àn
) {

387 
	`îr‹
("Bogus PPPoEÜength field (%u)",

388 (Ë
	`¡ohs
(
∑ckë
.
Àngth
));

392 #ifde‡
USE_BPF


394 i‡(
	`ëhîTy≥
(&
∑ckë
Ë!
Eth_PPPOE_Discovîy
) ;

398 i‡(!
	`∑ckëIsF‹Me
(
c⁄n
, &
∑ckë
)) ;

400 i‡(
∑ckë
.
code
 =
CODE_PADO
) {

401 i‡(
	`NOT_UNICAST
(
∑ckë
.
ëhHdr
.
h_sour˚
)) {

402 
	`îr‹
("Ignoring PADOÖacket fromÇon-unicast MACáddress");

405 i‡(
c⁄n
->
ªq_≥î


406 && 
	`memcmp
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
ªq_≥î_mac
, 
ETH_ALEN
) != 0) {

407 
	`w¨n
("Ignoring PADOÖacket from wrong MACáddress");

410 i‡(
	`∑r£Packë
(&
∑ckë
, 
∑r£PADOTags
, &
pc
) < 0)

412 i‡(
c⁄n
->
îr‹
)

414 i‡(!
pc
.
£íACName
) {

415 
	`îr‹
("Ignoring PADOÖacket withÇo AC-NameÅag");

418 i‡(!
pc
.
£íSîvi˚Name
) {

419 
	`îr‹
("Ignoring PADOÖacket withÇo Service-NameÅag");

422 
c⁄n
->
numPADOs
++;

423 i‡(
pc
.
acNameOK
 &&Öc.
£rvi˚NameOK
) {

424 
	`mem˝y
(
c⁄n
->
≥îEth
, 
∑ckë
.
ëhHdr
.
h_sour˚
, 
ETH_ALEN
);

425 
c⁄n
->
discovîySèã
 = 
STATE_RECEIVED_PADO
;

429 } 
c⁄n
->
discovîySèã
 !
STATE_RECEIVED_PADO
);

430 
	}
}

442 
	$£ndPADR
(
PPPoEC⁄√˘i⁄
 *
c⁄n
)

444 
PPPoEPackë
 
∑ckë
;

445 
PPPoETag
 *
svc
 = (PPPoETag *Ë
∑ckë
.
∑ylﬂd
;

446 *
curs‹
 = 
∑ckë
.
∑ylﬂd
;

448 
UINT16_t
 
«mñí
 = 0;

449 
UINT16_t
 
∂í
;

451 i‡(
c⁄n
->
£rvi˚Name
) {

452 
«mñí
 = (
UINT16_t
Ë
	`°æí
(
c⁄n
->
£rvi˚Name
);

454 
∂í
 = 
TAG_HDR_SIZE
 + 
«mñí
;

455 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
∂í
);

457 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_de°
, 
c⁄n
->
≥îEth
, 
ETH_ALEN
);

458 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
myEth
, 
ETH_ALEN
);

460 
∑ckë
.
ëhHdr
.
h_¥Ÿo
 = 
	`ht⁄s
(
Eth_PPPOE_Discovîy
);

461 
∑ckë
.
vîty≥
 = 
	`PPPOE_VER_TYPE
(1, 1);

462 
∑ckë
.
code
 = 
CODE_PADR
;

463 
∑ckë
.
£ssi⁄
 = 0;

465 
svc
->
ty≥
 = 
TAG_SERVICE_NAME
;

466 
svc
->
Àngth
 = 
	`ht⁄s
(
«mñí
);

467 i‡(
c⁄n
->
£rvi˚Name
) {

468 
	`mem˝y
(
svc
->
∑ylﬂd
, 
c⁄n
->
£rvi˚Name
, 
«mñí
);

470 
curs‹
 +
«mñí
 + 
TAG_HDR_SIZE
;

473 i‡(
c⁄n
->
ho°Uniq
.
Àngth
) {

474 
Àn
 = 
	`¡ohs
(
c⁄n
->
ho°Uniq
.
Àngth
);

475 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
Àn
+
TAG_HDR_SIZE
);

476 
	`mem˝y
(
curs‹
, &
c⁄n
->
ho°Uniq
, 
Àn
 + 
TAG_HDR_SIZE
);

477 
curs‹
 +
Àn
 + 
TAG_HDR_SIZE
;

478 
∂í
 +
Àn
 + 
TAG_HDR_SIZE
;

482 i‡(
	`MIN
(
l˝_Ælow›ti⁄s
[0].
mru
, 
l˝_w™t›ti⁄s
[0].mruË> 
ETH_PPPOE_MTU
) {

483 
PPPoETag
 
maxPaylﬂd
;

484 
UINT16_t
 
mru
 = 
	`ht⁄s
(
	`MIN
(
l˝_Ælow›ti⁄s
[0].mru, 
l˝_w™t›ti⁄s
[0].mru));

485 
maxPaylﬂd
.
ty≥
 = 
	`ht⁄s
(
TAG_PPP_MAX_PAYLOAD
);

486 
maxPaylﬂd
.
Àngth
 = 
	`ht⁄s
((
mru
));

487 
	`mem˝y
(
maxPaylﬂd
.
∑ylﬂd
, &
mru
, (mru));

488 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, (
mru
Ë+ 
TAG_HDR_SIZE
);

489 
	`mem˝y
(
curs‹
, &
maxPaylﬂd
, (
mru
Ë+ 
TAG_HDR_SIZE
);

490 
curs‹
 +(
mru
Ë+ 
TAG_HDR_SIZE
;

491 
∂í
 +(
mru
Ë+ 
TAG_HDR_SIZE
;

495 i‡(
c⁄n
->
cookõ
.
ty≥
) {

496 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
,

497 
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
);

498 
	`mem˝y
(
curs‹
, &
c⁄n
->
cookõ
, 
	`¡ohs
(c⁄n->cookõ.
Àngth
Ë+ 
TAG_HDR_SIZE
);

499 
curs‹
 +
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

500 
∂í
 +
	`¡ohs
(
c⁄n
->
cookõ
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

503 i‡(
c⁄n
->
ªœyId
.
ty≥
) {

504 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
,

505 
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
);

506 
	`mem˝y
(
curs‹
, &
c⁄n
->
ªœyId
, 
	`¡ohs
(c⁄n->ªœyId.
Àngth
Ë+ 
TAG_HDR_SIZE
);

507 
curs‹
 +
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

508 
∂í
 +
	`¡ohs
(
c⁄n
->
ªœyId
.
Àngth
Ë+ 
TAG_HDR_SIZE
;

511 
∑ckë
.
Àngth
 = 
	`ht⁄s
(
∂í
);

512 
	`£ndPackë
(
c⁄n
, c⁄n->
discovîySockë
, &
∑ckë
, (Ë(
∂í
 + 
HDR_SIZE
));

513 
	}
}

526 
	$waôF‹PADS
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
timeout
)

528 
fd_£t
 
ªadabÀ
;

529 
r
;

530 
timevÆ
 
tv
;

531 
timevÆ
 
expúe_©
;

533 
PPPoEPackë
 
∑ckë
;

534 
Àn
;

536 i‡(
	`gë_time
(&
expúe_©
) < 0) {

537 
	`îr‹
("get_time (waitForPADS): %m");

540 
expúe_©
.
tv_£c
 +
timeout
;

542 
c⁄n
->
îr‹
 = 0;

544 i‡(
BPF_BUFFER_IS_EMPTY
) {

545 i‡(!
	`time_À·
(&
tv
, &
expúe_©
))

548 
	`FD_ZERO
(&
ªadabÀ
);

549 
	`FD_SET
(
c⁄n
->
discovîySockë
, &
ªadabÀ
);

552 
r
 = 
	`£À˘
(
c⁄n
->
discovîySockë
+1, &
ªadabÀ
, 
NULL
, NULL, &
tv
);

553 i‡(
r
 >0 || 
î∫o
 !
EINTR
 || 
gŸ_sigãrm
) ;

555 i‡(
r
 < 0) {

556 
	`îr‹
("select (waitForPADS): %m");

559 i‡(
r
 == 0)

564 
	`ª˚ivePackë
(
c⁄n
->
discovîySockë
, &
∑ckë
, &
Àn
);

567 i‡(
	`¡ohs
(
∑ckë
.
Àngth
Ë+ 
HDR_SIZE
 > 
Àn
) {

568 
	`îr‹
("Bogus PPPoEÜength field (%u)",

569 (Ë
	`¡ohs
(
∑ckë
.
Àngth
));

573 #ifde‡
USE_BPF


575 i‡(
	`ëhîTy≥
(&
∑ckë
Ë!
Eth_PPPOE_Discovîy
) ;

579 i‡(
	`memcmp
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
≥îEth
, 
ETH_ALEN
)) ;

582 i‡(!
	`∑ckëIsF‹Me
(
c⁄n
, &
∑ckë
)) ;

585 i‡(
∑ckë
.
code
 =
CODE_PADS
) {

587 i‡(
	`∑r£Packë
(&
∑ckë
, 
∑r£PADSTags
, 
c⁄n
) < 0)

589 i‡(
c⁄n
->
îr‹
)

591 
c⁄n
->
discovîySèã
 = 
STATE_SESSION
;

594 } 
c⁄n
->
discovîySèã
 !
STATE_SESSION
);

597 
c⁄n
->
£ssi⁄
 = 
∑ckë
.session;

599 
	`öfo
("PPP sessi⁄ i†%d", (Ë
	`¡ohs
(
c⁄n
->
£ssi⁄
));

602 i‡(
	`¡ohs
(
c⁄n
->
£ssi⁄
) == 0 ||Çtohs(conn->session) == 0xFFFF) {

603 
	`îr‹
("Ac˚s†c⁄˚¡øt‹ u£dá sessi⁄ vÆuêo‡%x --ÅhêAC i†viﬁ©ög RFC 2516", (Ë
	`¡ohs
(
c⁄n
->
£ssi⁄
));

605 
	}
}

617 
	$discovîy
(
PPPoEC⁄√˘i⁄
 *
c⁄n
)

619 
∑diAâem±s
 = 0;

620 
∑drAâem±s
 = 0;

621 
timeout
 = 
c⁄n
->
discovîyTimeout
;

624 
∑diAâem±s
++;

625 i‡(
gŸ_sigãrm
 || 
∑diAâem±s
 > 
c⁄n
->
discovîyAâem±s
) {

626 
	`w¨n
("Timeout waiting for PADOÖackets");

627 
	`˛o£
(
c⁄n
->
discovîySockë
);

628 
c⁄n
->
discovîySockë
 = -1;

631 
	`£ndPADI
(
c⁄n
);

632 
c⁄n
->
discovîySèã
 = 
STATE_SENT_PADI
;

633 
	`waôF‹PADO
(
c⁄n
, 
timeout
);

635 
timeout
 *= 2;

636 } 
c⁄n
->
discovîySèã
 =
STATE_SENT_PADI
);

638 
timeout
 = 
c⁄n
->
discovîyTimeout
;

640 
∑drAâem±s
++;

641 i‡(
gŸ_sigãrm
 || 
∑drAâem±s
 > 
c⁄n
->
discovîyAâem±s
) {

642 
	`w¨n
("Timeout waiting for PADSÖackets");

643 
	`˛o£
(
c⁄n
->
discovîySockë
);

644 
c⁄n
->
discovîySockë
 = -1;

647 
	`£ndPADR
(
c⁄n
);

648 
c⁄n
->
discovîySèã
 = 
STATE_SENT_PADR
;

649 
	`waôF‹PADS
(
c⁄n
, 
timeout
);

650 
timeout
 *= 2;

651 } 
c⁄n
->
discovîySèã
 =
STATE_SENT_PADR
);

653 i‡(!
c⁄n
->
£íMaxPaylﬂd
) {

655 i‡(
l˝_Ælow›ti⁄s
[0].
mru
 > 
ETH_PPPOE_MTU
)

656 
l˝_Ælow›ti⁄s
[0].
mru
 = 
ETH_PPPOE_MTU
;

657 i‡(
l˝_w™t›ti⁄s
[0].
mru
 > 
ETH_PPPOE_MTU
)

658 
l˝_w™t›ti⁄s
[0].
mru
 = 
ETH_PPPOE_MTU
;

662 
c⁄n
->
discovîySèã
 = 
STATE_SESSION
;

664 
	}
}

	@pppd/plugins/rp-pppoe/if.c

16 c⁄° 
	gRCSID
[] =

19 
	#_GNU_SOURCE
 1

	)

20 
	~"µp€.h
"

21 
	~"µpd/µpd.h
"

23 #ifde‡
HAVE_UNISTD_H


24 
	~<uni°d.h
>

27 #ifde‡
HAVE_NETPACKET_PACKET_H


28 
	~<√çackë/∑ckë.h
>

29 #ñi‡
deföed
(
HAVE_LINUX_IF_PACKET_H
)

30 
	~<löux/if_∑ckë.h
>

33 #ifde‡
HAVE_NET_ETHERNET_H


34 
	~<√t/ëhî√t.h
>

37 #ifde‡
HAVE_ASM_TYPES_H


38 
	~<asm/ty≥s.h
>

41 #ifde‡
HAVE_SYS_IOCTL_H


42 
	~<sys/io˘l.h
>

45 
	~<î∫o.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

49 #ifde‡
HAVE_NET_IF_ARP_H


50 
	~<√t/if_¨p.h
>

56 
UINT16_t
 
	gEth_PPPOE_Discovîy
 = 
ETH_PPPOE_DISCOVERY
;

57 
UINT16_t
 
	gEth_PPPOE_Sessi⁄
 = 
ETH_PPPOE_SESSION
;

74 
UINT16_t


75 
	$ëhîTy≥
(
PPPoEPackë
 *
∑ckë
)

77 
UINT16_t
 
ty≥
 = (UINT16_tË
	`¡ohs
(
∑ckë
->
ëhHdr
.
h_¥Ÿo
);

78 i‡(
ty≥
 !
Eth_PPPOE_Discovîy
 &&Åy≥ !
Eth_PPPOE_Sessi⁄
) {

79 
	`îr‹
("InvÆidÉthîÅy≥ 0x%x", 
ty≥
);

81  
ty≥
;

82 
	}
}

96 
	$›íI¡îÁ˚
(c⁄° *
i‚ame
, 
UINT16_t
 
ty≥
, *
hwaddr
)

98 
›tvÆ
=1;

99 
fd
;

100 
i‰eq
 
i‰
;

101 
domaö
, 
°y≥
;

103 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


104 
sockaddr_Œ
 
ß
;

106 
sockaddr
 
ß
;

109 
	`mem£t
(&
ß
, 0, (sa));

111 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


112 
domaö
 = 
PF_PACKET
;

113 
°y≥
 = 
SOCK_RAW
;

115 
domaö
 = 
PF_INET
;

116 
°y≥
 = 
SOCK_PACKET
;

119 i‡((
fd
 = 
	`sockë
(
domaö
, 
°y≥
, 
	`ht⁄s
(
ty≥
))) < 0) {

121 i‡(
î∫o
 =
EPERM
) {

122 
	`Áèl
("Cannot createÑaw socket --Öppoe must beÑunásÑoot.");

124 
	`îr‹
("Can't open socket forÖppoe: %m");

128 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
›tvÆ
, (optval)) < 0) {

129 
	`îr‹
("Can't set socket options forÖppoe: %m");

130 
	`˛o£
(
fd
);

135 i‡(
hwaddr
) {

136 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

137 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

138 
	`îr‹
("C™'àgë h¨dw¨êaddªs†f‹ %s: %m", 
i‚ame
);

139 
	`˛o£
(
fd
);

142 
	`mem˝y
(
hwaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
ETH_ALEN
);

143 #ifde‡
ARPHRD_ETHER


144 i‡(
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !
ARPHRD_ETHER
) {

145 
	`w¨n
("I¡îÁ˚ %.16†i†nŸ Ethî√t", 
i‚ame
);

148 i‡(
	`NOT_UNICAST
(
hwaddr
)) {

149 
	`Áèl
("Can't use interface %.16s: it has broadcast/multicast MACáddress",

150 
i‚ame
);

155 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

156 i‡(
	`io˘l
(
fd
, 
SIOCGIFMTU
, &
i‰
) < 0) {

157 
	`îr‹
("C™'àgë MTU f‹ %s: %m", 
i‚ame
);

158 } i‡(
i‰
.
i‰_mtu
 < 
ETH_DATA_LEN
) {

159 
	`îr‹
("Interface %.16s has MTU of %d -- should beátÜeast %d.",

160 
i‚ame
, 
i‰
.
i‰_mtu
, 
ETH_DATA_LEN
);

161 
	`îr‹
("This may cause serious connectionÖroblems.");

164 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


166 
ß
.
¶l_Ámûy
 = 
AF_PACKET
;

167 
ß
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ty≥
);

169 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

170 i‡(
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

171 
	`îr‹
("CouldÇŸ gë i¡îÁ˚ index f‹ %s: %m", 
i‚ame
);

172 
	`˛o£
(
fd
);

175 
ß
.
¶l_ifödex
 = 
i‰
.
i‰_ifödex
;

178 
	`°r˝y
(
ß
.
ß_d©a
, 
i‚ame
);

182 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë&
ß
, (sa)) < 0) {

183 
	`îr‹
("FaûedÅÿbödÅÿöãrÁ˚ %s: %m", 
i‚ame
);

184 
	`˛o£
(
fd
);

188  
fd
;

189 
	}
}

204 
	$£ndPackë
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
sock
, 
PPPoEPackë
 *
pkt
, 
size
)

206 
îr
;

208 i‡(
debug
)

209 
	`µp€_log_∑ckë
("Síd ", 
pkt
);

210 #i‡
	`deföed
(
HAVE_STRUCT_SOCKADDR_LL
)

211 
îr
 = 
	`£nd
(
sock
, 
pkt
, 
size
, 0);

213 
sockaddr
 
ß
;

215 
	`°r˝y
(
ß
.
ß_d©a
, 
c⁄n
->
ifName
);

216 
îr
 = 
	`£ndto
(
sock
, 
pkt
, 
size
, 0, &
ß
, (sa));

218 i‡(
îr
 < 0) {

219 
	`îr‹
("error sendingÖppoeÖacket: %m");

223 
	}
}

237 
	$ª˚ivePackë
(
sock
, 
PPPoEPackë
 *
pkt
, *
size
)

239 i‡((*
size
 = 
	`ªcv
(
sock
, 
pkt
, (
PPPoEPackë
), 0)) < 0) {

240 
	`îr‹
("errorÑeceivingÖppoeÖacket: %m");

243 i‡(
debug
)

244 
	`µp€_log_∑ckë
("Recv ", 
pkt
);

246 
	}
}

	@pppd/plugins/rp-pppoe/plugin.c

25 c⁄° 
	gRCSID
[] =

28 
	#_GNU_SOURCE
 1

	)

29 
	~"µp€.h
"

31 
	~"µpd/µpd.h
"

32 
	~"µpd/fsm.h
"

33 
	~"µpd/l˝.h
"

34 
	~"µpd/ù˝.h
"

35 
	~"µpd/c˝.h
"

38 
	~<löux/ty≥s.h
>

39 
	~<sys/io˘l.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/sockë.h
>

42 
	~<sys/°©.h
>

43 
	~<°rög.h
>

44 
	~<°dlib.h
>

45 
	~<î∫o.h
>

46 
	~<uni°d.h
>

47 
	~<f˙é.h
>

48 
	~<sig«l.h
>

49 
	~<√t/ëhî√t.h
>

50 
	~<√t/if_¨p.h
>

51 
	~<löux/µp_defs.h
>

52 
	~<löux/if_µpox.h
>

54 #i‚de‡
_ROOT_PATH


55 
	#_ROOT_PATH
 ""

	)

58 
	#_PATH_ETHOPT
 
_ROOT_PATH
 "/ëc/µp/›ti⁄s."

	)

60 
	gµpd_vîsi⁄
[] = 
VERSION
;

63 
√w_°yÀ_drivî
;

65 *
	gµpd_µp€_£rvi˚
 = 
NULL
;

66 *
	gacName
 = 
NULL
;

67 *
	gexi°ögSessi⁄
 = 
NULL
;

68 
	g¥ötACNames
 = 0;

69 *
	gµp€_ªqd_mac
 = 
NULL
;

70 
	gµp€_ªqd_mac_addr
[6];

71 *
	gho°_uniq
;

72 
	gµp€_∑di_timeout
 = 
PADI_TIMEOUT
;

73 
	gµp€_∑di_©ãm±s
 = 
MAX_PADI_ATTEMPTS
;

75 
PPPoEDev«meHook
(*
cmd
, **
¨gv
, 
doô
);

76 
›ti⁄_t
 
	gO±i⁄s
[] = {

77 { "devi˚Çame", 
o_wûd
, (*Ë&
PPPoEDev«meHook
,

79 
OPT_DEVNAM
 | 
OPT_PRIVFIX
 | 
OPT_NOARG
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
,

80 
dev«m
},

81 { "Ω_µp€_£rvi˚", 
o_°rög
, &
µpd_µp€_£rvi˚
,

83 { "Ω_µp€_ac", 
o_°rög
, &
acName
,

85 { "Ω_µp€_£ss", 
o_°rög
, &
exi°ögSessi⁄
,

87 { "Ω_µp€_vîbo£", 
o_öt
, &
¥ötACNames
,

89 { "µp€-mac", 
o_°rög
, &
µp€_ªqd_mac
,

91 { "ho°-uniq", 
o_°rög
, &
ho°_uniq
,

93 { "µp€-∑di-timeout", 
o_öt
, &
µp€_∑di_timeout
,

95 { "µp€-∑di-©ãm±s", 
o_öt
, &
µp€_∑di_©ãm±s
,

97 { 
NULL
 }

99 (*
OldDev«meHook
)(*
cmd
, **
¨gv
, 
doô
Ë
NULL
;

100 
PPPoEC⁄√˘i⁄
 *
c⁄n
 = 
NULL
;

112 
	$PPPOEInôDevi˚
()

114 
c⁄n
 = 
	`mÆloc
((
PPPoEC⁄√˘i⁄
));

115 i‡(!
c⁄n
) {

116 
	`novm
("PPPoE session data");

118 
	`mem£t
(
c⁄n
, 0, (
PPPoEC⁄√˘i⁄
));

119 
c⁄n
->
ifName
 = 
dev«m
;

120 
c⁄n
->
discovîySockë
 = -1;

121 
c⁄n
->
£ssi⁄Sockë
 = -1;

122 
c⁄n
->
¥ötACNames
 =ÖrintACNames;

123 
c⁄n
->
discovîyTimeout
 = 
µp€_∑di_timeout
;

124 
c⁄n
->
discovîyAâem±s
 = 
µp€_∑di_©ãm±s
;

126 
	}
}

138 
	$PPPOEC⁄√˘Devi˚
()

140 
sockaddr_µpox
 
•
;

141 
i‰eq
 
i‰
;

142 
s
;

149 
c⁄n
->
£ssi⁄Sockë
 = 
	`sockë
(
AF_PPPOX
, 
SOCK_STREAM
, 
PX_PROTO_OE
);

150 i‡(
c⁄n
->
£ssi⁄Sockë
 < 0) {

151 
	`îr‹
("FailedÅo create PPPoE socket: %m");

156 
l˝_Ælow›ti⁄s
[0].
mru
 = 
c⁄n
->
mtu
;

157 
l˝_w™t›ti⁄s
[0].
mru
 = 
c⁄n
->mru;

160 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

161 i‡(
s
 < 0) {

162 
	`îr‹
("C™'àgë MTU f‹ %s: %m", 
c⁄n
->
ifName
);

163 
îrout
;

165 
	`°æ˝y
(
i‰
.
i‰_«me
, 
c⁄n
->
ifName
, (ifr.ifr_name));

166 i‡(
	`io˘l
(
s
, 
SIOCGIFMTU
, &
i‰
) < 0) {

167 
	`îr‹
("C™'àgë MTU f‹ %s: %m", 
c⁄n
->
ifName
);

168 
	`˛o£
(
s
);

169 
îrout
;

171 
	`˛o£
(
s
);

173 i‡(
l˝_Ælow›ti⁄s
[0].
mru
 > 
i‰
.
i‰_mtu
 - 
TOTAL_OVERHEAD
)

174 
l˝_Ælow›ti⁄s
[0].
mru
 = 
i‰
.
i‰_mtu
 - 
TOTAL_OVERHEAD
;

175 i‡(
l˝_w™t›ti⁄s
[0].
mru
 > 
i‰
.
i‰_mtu
 - 
TOTAL_OVERHEAD
)

176 
l˝_w™t›ti⁄s
[0].
mru
 = 
i‰
.
i‰_mtu
 - 
TOTAL_OVERHEAD
;

178 i‡(
ho°_uniq
) {

179 i‡(!
	`∑r£Ho°Uniq
(
ho°_uniq
, &
c⁄n
->
ho°Uniq
))

180 
	`Áèl
("Illegal value for host-uniq option");

183 
pid_t
 
pid
 = 
	`gëpid
();

184 
c⁄n
->
ho°Uniq
.
ty≥
 = 
	`ht⁄s
(
TAG_HOST_UNIQ
);

185 
c⁄n
->
ho°Uniq
.
Àngth
 = 
	`ht⁄s
((
pid
));

186 
	`mem˝y
(
c⁄n
->
ho°Uniq
.
∑ylﬂd
, &
pid
, (pid));

189 
c⁄n
->
acName
 =ácName;

190 
c⁄n
->
£rvi˚Name
 = 
µpd_µp€_£rvi˚
;

191 
	`°æ˝y
(
µp_dev«m
, 
dev«m
, (ppp_devnam));

192 i‡(
exi°ögSessi⁄
) {

193 
mac
[
ETH_ALEN
];

194 
i
, 
£s
;

195 i‡(
	`ssˇnf
(
exi°ögSessi⁄
, "%d:%x:%x:%x:%x:%x:%x",

196 &
£s
, &
mac
[0], &mac[1], &mac[2],

197 &
mac
[3], &mac[4], &mac[5]) != 7) {

198 
	`Áèl
("Illegal value forÑp_pppoe_sess option");

200 
c⁄n
->
£ssi⁄
 = 
	`ht⁄s
(
£s
);

201 
i
=0; i<
ETH_ALEN
; i++) {

202 
c⁄n
->
≥îEth
[
i
] = (Ë
mac
[i];

205 
c⁄n
->
discovîySockë
 =

206 
	`›íI¡îÁ˚
(
c⁄n
->
ifName
, 
Eth_PPPOE_Discovîy
, c⁄n->
myEth
);

207 
	`discovîy
(
c⁄n
);

208 i‡(
c⁄n
->
discovîySèã
 !
STATE_SESSION
) {

209 
	`îr‹
("UnableÅo complete PPPoE Discovery");

210 
îrout
;

215 
µp_£ssi⁄_numbî
 = 
	`¡ohs
(
c⁄n
->
£ssi⁄
);

217 
•
.
ß_Ámûy
 = 
AF_PPPOX
;

218 
•
.
ß_¥Ÿocﬁ
 = 
PX_PROTO_OE
;

219 
•
.
ß_addr
.
µp€
.
sid
 = 
c⁄n
->
£ssi⁄
;

220 
	`mem˝y
(
•
.
ß_addr
.
µp€
.
dev
, 
c⁄n
->
ifName
, 
IFNAMSIZ
);

221 
	`mem˝y
(
•
.
ß_addr
.
µp€
.
ªmŸe
, 
c⁄n
->
≥îEth
, 
ETH_ALEN
);

224 
	`•rötf
(
ªmŸe_numbî
, "%02X:%02X:%02X:%02X:%02X:%02X",

225 (Ë
c⁄n
->
≥îEth
[0],

226 (Ë
c⁄n
->
≥îEth
[1],

227 (Ë
c⁄n
->
≥îEth
[2],

228 (Ë
c⁄n
->
≥îEth
[3],

229 (Ë
c⁄n
->
≥îEth
[4],

230 (Ë
c⁄n
->
≥îEth
[5]);

232 
	`w¨n
("ConnectedÅo %02X:%02X:%02X:%02X:%02X:%02X via interface %s",

233 (Ë
c⁄n
->
≥îEth
[0],

234 (Ë
c⁄n
->
≥îEth
[1],

235 (Ë
c⁄n
->
≥îEth
[2],

236 (Ë
c⁄n
->
≥îEth
[3],

237 (Ë
c⁄n
->
≥îEth
[4],

238 (Ë
c⁄n
->
≥îEth
[5],

239 
c⁄n
->
ifName
);

241 
	`s¸ùt_£ãnv
("MACREMOTE", 
ªmŸe_numbî
, 0);

243 i‡(
	`c⁄√˘
(
c⁄n
->
£ssi⁄Sockë
, (
sockaddr
 *Ë&
•
,

244 (
sockaddr_µpox
)) < 0) {

245 
	`îr‹
("FaûedÅÿc⁄√˘ PPPoE sockë: %d %m", 
î∫o
);

246 
îrout
;

249  
c⁄n
->
£ssi⁄Sockë
;

251 
îrout
:

252 i‡(
c⁄n
->
discovîySockë
 >= 0) {

253 
	`£ndPADT
(
c⁄n
, 
NULL
);

254 
	`˛o£
(
c⁄n
->
discovîySockë
);

255 
c⁄n
->
discovîySockë
 = -1;

257 
	`˛o£
(
c⁄n
->
£ssi⁄Sockë
);

259 
	}
}

262 
	$PPPOERecvC⁄fig
(
mru
,

263 
u_öt32_t
 
asyncm≠
,

264 
pcomp
,

265 
accomp
)

268 i‡(
mru
 > 
MAX_PPPOE_MTU
)

269 
	`w¨n
("Couldn'àö¸ó£ MRUÅÿ%d", 
mru
);

271 
	}
}

283 
	$PPPOEDisc⁄√˘Devi˚
()

285 
sockaddr_µpox
 
•
;

287 
•
.
ß_Ámûy
 = 
AF_PPPOX
;

288 
•
.
ß_¥Ÿocﬁ
 = 
PX_PROTO_OE
;

289 
•
.
ß_addr
.
µp€
.
sid
 = 0;

290 
	`mem˝y
(
•
.
ß_addr
.
µp€
.
dev
, 
c⁄n
->
ifName
, 
IFNAMSIZ
);

291 
	`mem˝y
(
•
.
ß_addr
.
µp€
.
ªmŸe
, 
c⁄n
->
≥îEth
, 
ETH_ALEN
);

292 i‡(
	`c⁄√˘
(
c⁄n
->
£ssi⁄Sockë
, (
sockaddr
 *Ë&
•
,

293 (
sockaddr_µpox
)Ë< 0 && 
î∫o
 !
EALREADY
)

294 
	`îr‹
("FaûedÅÿdisc⁄√˘ PPPoE sockë: %d %m", 
î∫o
);

295 
	`˛o£
(
c⁄n
->
£ssi⁄Sockë
);

296 i‡(
c⁄n
->
discovîySockë
 >= 0) {

297 
	`£ndPADT
(
c⁄n
, 
NULL
);

298 
	`˛o£
(
c⁄n
->
discovîySockë
);

300 
	}
}

303 
	$PPPOEDevi˚O±i⁄s
()

305 
buf
[
MAXPATHLEN
];

307 
	`°æ˝y
(
buf
, 
_PATH_ETHOPT
, 
MAXPATHLEN
);

308 
	`°æˇt
(
buf
, 
dev«m
, 
MAXPATHLEN
);

309 i‡(!
	`›ti⁄s_‰om_fûe
(
buf
, 0, 0, 1))

310 
	`exô
(
EXIT_OPTION_ERROR
);

312 
	}
}

314 
ch™√l
 
	gµp€_ch™√l
;

329 
	$PPPoEDev«meHook
(*
cmd
, **
¨gv
, 
doô
)

331 
r
 = 1;

332 
fd
;

333 
i‰eq
 
i‰
;

340 i‡(
	`°æí
(
cmd
Ë> 4 && !
	`°∫cmp
(cmd, "nic-", 4)) {

342 
cmd
 += 4;

346 i‡((
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 0)) < 0) {

347 
r
 = 0;

351 i‡(
r
) {

352 
	`°æ˝y
(
i‰
.
i‰_«me
, 
cmd
, (ifr.ifr_name));

353 i‡(
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

354 
r
 = 0;

356 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

357 
r
 = 0;

359 i‡(
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !
ARPHRD_ETHER
) {

360 i‡(
doô
)

361 
	`îr‹
("I¡îÁ˚ %†nŸ Ethî√t", 
cmd
);

362 
r
 = 0;

369 
	`˛o£
(
fd
);

370 i‡(
r
 && 
doô
) {

371 
	`°æ˝y
(
dev«m
, 
cmd
, (devnam));

372 i‡(
the_ch™√l
 !&
µp€_ch™√l
) {

374 
the_ch™√l
 = &
µp€_ch™√l
;

375 
modem
 = 0;

377 
	`PPPOEInôDevi˚
();

382  
r
;

383 
	}
}

395 
	$∂ugö_öô
()

397 i‡(!
	`µp_avaûabÀ
(Ë&& !
√w_°yÀ_drivî
) {

398 
	`Áèl
("Linux kernel doesÇot support PPPoE --áre youÑunning 2.4.x?");

401 
	`add_›ti⁄s
(
O±i⁄s
);

403 
	`öfo
("RP-PPPoEÖlugin version %s compiledágainstÖppd %s",

404 
RP_VERSION
, 
VERSION
);

405 
	}
}

407 
	$µp€_check_›ti⁄s
()

409 
mac
[6];

410 
i
;

412 i‡(
µp€_ªqd_mac
 !
NULL
) {

413 i‡(
	`ssˇnf
(
µp€_ªqd_mac
, "%x:%x:%x:%x:%x:%x",

414 &
mac
[0], &mac[1], &mac[2], &mac[3],

415 &
mac
[4], &mac[5]) != 6) {

416 
	`›ti⁄_îr‹
("cannotÖarseÖppoe-mac option value");

417 
	`exô
(
EXIT_OPTION_ERROR
);

419 
i
 = 0; i < 6; ++i)

420 
c⁄n
->
ªq_≥î_mac
[
i
] = 
mac
[i];

421 
c⁄n
->
ªq_≥î
 = 1;

424 
l˝_Ælow›ti⁄s
[0].
√g_accom¥essi⁄
 = 0;

425 
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
 = 0;

427 
l˝_Ælow›ti⁄s
[0].
√g_asyncm≠
 = 0;

428 
l˝_w™t›ti⁄s
[0].
√g_asyncm≠
 = 0;

430 
l˝_Ælow›ti⁄s
[0].
√g_pcom¥essi⁄
 = 0;

431 
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
 = 0;

433 i‡(
l˝_Ælow›ti⁄s
[0].
mru
 > 
MAX_PPPOE_MTU
)

434 
l˝_Ælow›ti⁄s
[0].
mru
 = 
MAX_PPPOE_MTU
;

435 i‡(
l˝_w™t›ti⁄s
[0].
mru
 > 
MAX_PPPOE_MTU
)

436 
l˝_w™t›ti⁄s
[0].
mru
 = 
MAX_PPPOE_MTU
;

439 
c⁄n
->
mtu
 = 
l˝_Ælow›ti⁄s
[0].
mru
;

440 
c⁄n
->
mru
 = 
l˝_w™t›ti⁄s
[0].mru;

442 
c˝_Ælow›ti⁄s
[0].
deÊ©e
 = 0;

443 
c˝_w™t›ti⁄s
[0].
deÊ©e
 = 0;

445 
ù˝_Ælow›ti⁄s
[0].
√g_vj
 = 0;

446 
ù˝_w™t›ti⁄s
[0].
√g_vj
 = 0;

448 
c˝_Ælow›ti⁄s
[0].
bsd_com¥ess
 = 0;

449 
c˝_w™t›ti⁄s
[0].
bsd_com¥ess
 = 0;

450 
	}
}

452 
ch™√l
 
	gµp€_ch™√l
 = {

453 .
›ti⁄s
 = 
O±i⁄s
,

454 .
	g¥o˚ss_exåa_›ti⁄s
 = &
PPPOEDevi˚O±i⁄s
,

455 .
	gcheck_›ti⁄s
 = 
µp€_check_›ti⁄s
,

456 .
	gc⁄√˘
 = &
PPPOEC⁄√˘Devi˚
,

457 .
	gdisc⁄√˘
 = &
PPPOEDisc⁄√˘Devi˚
,

458 .
	ge°ablish_µp
 = &
gíîic_e°ablish_µp
,

459 .
	gdi£°ablish_µp
 = &
gíîic_di£°ablish_µp
,

460 .
	g£nd_c⁄fig
 = 
NULL
,

461 .
	gªcv_c⁄fig
 = &
PPPOERecvC⁄fig
,

462 .
	g˛o£
 = 
NULL
,

463 .
	g˛ónup
 = 
NULL


	@pppd/plugins/rp-pppoe/pppoe-discovery.c

12 
	~<°d¨g.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<time.h
>

20 
	~"µp€.h
"

22 #ifde‡
HAVE_UNISTD_H


23 
	~<uni°d.h
>

26 #ifde‡
HAVE_NETPACKET_PACKET_H


27 
	~<√çackë/∑ckë.h
>

28 #ñi‡
deföed
(
HAVE_LINUX_IF_PACKET_H
)

29 
	~<löux/if_∑ckë.h
>

32 #ifde‡
HAVE_NET_ETHERNET_H


33 
	~<√t/ëhî√t.h
>

36 #ifde‡
HAVE_ASM_TYPES_H


37 
	~<asm/ty≥s.h
>

40 #ifde‡
HAVE_SYS_IOCTL_H


41 
	~<sys/io˘l.h
>

44 
	~<î∫o.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

48 #ifde‡
HAVE_NET_IF_ARP_H


49 
	~<√t/if_¨p.h
>

52 *
x°rdup
(c⁄° *
s
);

53 
ußge
();

55 
	$dõ
(
°©us
)

57 
	`exô
(
°©us
);

58 
	}
}

60 
	$îr‹
(*
fmt
, ...)

62 
va_li°
 
pv¨
;

63 
	`va_°¨t
(
pv¨
, 
fmt
);

64 
	`vÂrötf
(
°dîr
, 
fmt
, 
pv¨
);

65 
	`va_íd
(
pv¨
);

66 
	}
}

71 
UINT16_t
 
	gEth_PPPOE_Discovîy
 = 
ETH_PPPOE_DISCOVERY
;

72 
UINT16_t
 
	gEth_PPPOE_Sessi⁄
 = 
ETH_PPPOE_SESSION
;

89 
UINT16_t


90 
	$ëhîTy≥
(
PPPoEPackë
 *
∑ckë
)

92 
UINT16_t
 
ty≥
 = (UINT16_tË
	`¡ohs
(
∑ckë
->
ëhHdr
.
h_¥Ÿo
);

93 i‡(
ty≥
 !
Eth_PPPOE_Discovîy
 &&Åy≥ !
Eth_PPPOE_Sessi⁄
) {

94 
	`Ârötf
(
°dîr
, "InvÆidÉthîÅy≥ 0x%x\n", 
ty≥
);

96  
ty≥
;

97 
	}
}

111 
	$›íI¡îÁ˚
(c⁄° *
i‚ame
, 
UINT16_t
 
ty≥
, *
hwaddr
)

113 
›tvÆ
=1;

114 
fd
;

115 
i‰eq
 
i‰
;

116 
domaö
, 
°y≥
;

118 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


119 
sockaddr_Œ
 
ß
;

121 
sockaddr
 
ß
;

124 
	`mem£t
(&
ß
, 0, (sa));

126 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


127 
domaö
 = 
PF_PACKET
;

128 
°y≥
 = 
SOCK_RAW
;

130 
domaö
 = 
PF_INET
;

131 
°y≥
 = 
SOCK_PACKET
;

134 i‡((
fd
 = 
	`sockë
(
domaö
, 
°y≥
, 
	`ht⁄s
(
ty≥
))) < 0) {

136 i‡(
î∫o
 =
EPERM
) {

137 
	`Ω_Áèl
("Cannot createÑaw socket --Öppoe must beÑunásÑoot.");

139 
	`ÁèlSys
("socket");

142 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
›tvÆ
, (optval)) < 0) {

143 
	`ÁèlSys
("setsockopt");

147 i‡(
hwaddr
) {

148 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

149 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

150 
	`ÁèlSys
("ioctl(SIOCGIFHWADDR)");

152 
	`mem˝y
(
hwaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
ETH_ALEN
);

153 #ifde‡
ARPHRD_ETHER


154 i‡(
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !
ARPHRD_ETHER
) {

155 
buf„r
[256];

156 
	`•rötf
(
buf„r
, "I¡îÁ˚ %.16†i†nŸ Ethî√t", 
i‚ame
);

157 
	`Ω_Áèl
(
buf„r
);

160 i‡(
	`NOT_UNICAST
(
hwaddr
)) {

161 
buf„r
[256];

162 
	`•rötf
(
buf„r
,

164 
i‚ame
);

165 
	`Ω_Áèl
(
buf„r
);

170 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

171 i‡(
	`io˘l
(
fd
, 
SIOCGIFMTU
, &
i‰
) < 0) {

172 
	`ÁèlSys
("ioctl(SIOCGIFMTU)");

174 i‡(
i‰
.
i‰_mtu
 < 
ETH_DATA_LEN
) {

175 
	`Ârötf
(
°dîr
, "Interface %.16s has MTU of %d -- should be %d.\n",

176 
i‚ame
, 
i‰
.
i‰_mtu
, 
ETH_DATA_LEN
);

177 
	`Ârötf
(
°dîr
, "You may have serious connectionÖroblems.\n");

180 #ifde‡
HAVE_STRUCT_SOCKADDR_LL


182 
ß
.
¶l_Ámûy
 = 
AF_PACKET
;

183 
ß
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ty≥
);

185 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

186 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = 0;

187 i‡(
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

188 
	`ÁèlSys
("ioctl(SIOCFIGINDEX): CouldÇot get interface index");

190 
ß
.
¶l_ifödex
 = 
i‰
.
i‰_ifödex
;

193 
	`°r˝y
(
ß
.
ß_d©a
, 
i‚ame
);

197 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë&
ß
, (sa)) < 0) {

198 
	`ÁèlSys
("bind");

201  
fd
;

202 
	}
}

217 
	$£ndPackë
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
sock
, 
PPPoEPackë
 *
pkt
, 
size
)

219 #i‡
	`deföed
(
HAVE_STRUCT_SOCKADDR_LL
)

220 i‡(
	`£nd
(
sock
, 
pkt
, 
size
, 0) < 0) {

221 
	`sysEº
("send (sendPacket)");

225 
sockaddr
 
ß
;

227 i‡(!
c⁄n
) {

228 
	`Ω_Áèl
("relayánd serverÇot supported on Linux 2.0 kernels");

230 
	`°r˝y
(
ß
.
ß_d©a
, 
c⁄n
->
ifName
);

231 i‡(
	`£ndto
(
sock
, 
pkt
, 
size
, 0, &
ß
, (sa)) < 0) {

232 
	`sysEº
("sendto (sendPacket)");

237 
	}
}

251 
	$ª˚ivePackë
(
sock
, 
PPPoEPackë
 *
pkt
, *
size
)

253 i‡((*
size
 = 
	`ªcv
(
sock
, 
pkt
, (
PPPoEPackë
), 0)) < 0) {

254 
	`sysEº
("recv (receivePacket)");

258 
	}
}

273 
	$∑r£Packë
(
PPPoEPackë
 *
∑ckë
, 
P¨£Func
 *
func
, *
exåa
)

275 
UINT16_t
 
Àn
 = 
	`¡ohs
(
∑ckë
->
Àngth
);

276 *
curTag
;

277 
UINT16_t
 
ègTy≥
, 
ègLí
;

279 i‡(
	`PPPOE_VER
(
∑ckë
->
vîty≥
) != 1) {

280 
	`Ârötf
(
°dîr
, "Invalid PPPoE version (%d)\n",

281 
	`PPPOE_VER
(
∑ckë
->
vîty≥
));

284 i‡(
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
) != 1) {

285 
	`Ârötf
(
°dîr
, "Invalid PPPoEÅype (%d)\n",

286 
	`PPPOE_TYPE
(
∑ckë
->
vîty≥
));

291 i‡(
Àn
 > 
ETH_JUMBO_LEN
 - 
PPPOE_OVERHEAD
) {

292 
	`Ârötf
(
°dîr
, "InvÆid PPPoEÖackëÜígth (%u)\n", 
Àn
);

297 
curTag
 = 
∑ckë
->
∑ylﬂd
;

298 
curTag
 - 
∑ckë
->
∑ylﬂd
 < 
Àn
) {

300 
ègTy≥
 = (
curTag
[0] << 8) + curTag[1];

301 
ègLí
 = (
curTag
[2] << 8) + curTag[3];

302 i‡(
ègTy≥
 =
TAG_END_OF_LIST
) {

305 i‡((
curTag
 - 
∑ckë
->
∑ylﬂd
Ë+ 
ègLí
 + 
TAG_HDR_SIZE
 > 
Àn
) {

306 
	`Ârötf
(
°dîr
, "InvÆid PPPoEÅagÜígth (%u)\n", 
ègLí
);

309 
	`func
(
ègTy≥
, 
ègLí
, 
curTag
+
TAG_HDR_SIZE
, 
exåa
);

310 
curTag
 = curTag + 
TAG_HDR_SIZE
 + 
ègLí
;

313 
	}
}

328 
	$∑r£F‹Ho°Uniq
(
UINT16_t
 
ty≥
, UINT16_à
Àn
, *
d©a
,

329 *
exåa
)

331 
PPPoETag
 *
èg
 = 
exåa
;

333 i‡(
ty≥
 =
TAG_HOST_UNIQ
 && 
Àn
 =
	`¡ohs
(
èg
->
Àngth
))

334 
èg
->
Àngth
 = 
	`memcmp
(
d©a
,Åag->
∑ylﬂd
, 
Àn
);

335 
	}
}

349 
	$∑ckëIsF‹Me
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
PPPoEPackë
 *
∑ckë
)

351 
PPPoETag
 
ho°Uniq
 = 
c⁄n
->hostUniq;

354 i‡(
	`memcmp
(
∑ckë
->
ëhHdr
.
h_de°
, 
c⁄n
->
myEth
, 
ETH_ALEN
))  0;

357 i‡(!
c⁄n
->
ho°Uniq
.
Àngth
)  1;

359 
	`∑r£Packë
(
∑ckë
, 
∑r£F‹Ho°Uniq
, &
ho°Uniq
);

360  !
ho°Uniq
.
Àngth
;

361 
	}
}

378 
	$∑r£PADOTags
(
UINT16_t
 
ty≥
, UINT16_à
Àn
, *
d©a
,

379 *
exåa
)

381 
PackëCrôîü
 *
pc
 = (PackëCrôîü *Ë
exåa
;

382 
PPPoEC⁄√˘i⁄
 *
c⁄n
 = 
pc
->conn;

383 
i
;

385 
ty≥
) {

386 
TAG_AC_NAME
:

387 
pc
->
£íACName
 = 1;

388 i‡(
c⁄n
->
¥ötACNames
) {

389 
	`¥ötf
("Ac˚ss-C⁄˚¡øt‹: %.*s\n", (Ë
Àn
, 
d©a
);

391 i‡(
c⁄n
->
acName
 && 
Àn
 =
	`°æí
(conn->acName) &&

392 !
	`°∫cmp
((*Ë
d©a
, 
c⁄n
->
acName
, 
Àn
)) {

393 
pc
->
acNameOK
 = 1;

396 
TAG_SERVICE_NAME
:

397 
pc
->
£íSîvi˚Name
 = 1;

398 i‡(
c⁄n
->
¥ötACNames
 && 
Àn
 > 0) {

399 
	`¥ötf
(" Sîvi˚-Name: %.*s\n", (Ë
Àn
, 
d©a
);

401 i‡(
c⁄n
->
£rvi˚Name
 && 
Àn
 =
	`°æí
(conn->serviceName) &&

402 !
	`°∫cmp
((*Ë
d©a
, 
c⁄n
->
£rvi˚Name
, 
Àn
)) {

403 
pc
->
£rvi˚NameOK
 = 1;

406 
TAG_AC_COOKIE
:

407 i‡(
c⁄n
->
¥ötACNames
) {

408 
	`¥ötf
("Gotá cookie:");

410 
i
=0; i<
Àn
 && i < 20; i++) {

411 
	`¥ötf
(" %02x", (Ë
d©a
[
i
]);

413 i‡(
i
 < 
Àn
Ë
	`¥ötf
("...");

414 
	`¥ötf
("\n");

416 
c⁄n
->
cookõ
.
ty≥
 = 
	`ht⁄s
(type);

417 
c⁄n
->
cookõ
.
Àngth
 = 
	`ht⁄s
(
Àn
);

418 
	`mem˝y
(
c⁄n
->
cookõ
.
∑ylﬂd
, 
d©a
, 
Àn
);

420 
TAG_RELAY_SESSION_ID
:

421 i‡(
c⁄n
->
¥ötACNames
) {

422 
	`¥ötf
("Gotá Relay-ID:");

424 
i
=0; i<
Àn
 && i < 20; i++) {

425 
	`¥ötf
(" %02x", (Ë
d©a
[
i
]);

427 i‡(
i
 < 
Àn
Ë
	`¥ötf
("...");

428 
	`¥ötf
("\n");

430 
c⁄n
->
ªœyId
.
ty≥
 = 
	`ht⁄s
(type);

431 
c⁄n
->
ªœyId
.
Àngth
 = 
	`ht⁄s
(
Àn
);

432 
	`mem˝y
(
c⁄n
->
ªœyId
.
∑ylﬂd
, 
d©a
, 
Àn
);

434 
TAG_SERVICE_NAME_ERROR
:

435 i‡(
c⁄n
->
¥ötACNames
) {

436 
	`¥ötf
("GŸá Sîvi˚-Name-Eº‹Åag: %.*s\n", (Ë
Àn
, 
d©a
);

439 
TAG_AC_SYSTEM_ERROR
:

440 i‡(
c⁄n
->
¥ötACNames
) {

441 
	`¥ötf
("GŸá Sy°em-Eº‹Åag: %.*s\n", (Ë
Àn
, 
d©a
);

444 
TAG_GENERIC_ERROR
:

445 i‡(
c⁄n
->
¥ötACNames
) {

446 
	`¥ötf
("GŸá Gíîic-Eº‹Åag: %.*s\n", (Ë
Àn
, 
d©a
);

450 
	}
}

462 
	$£ndPADI
(
PPPoEC⁄√˘i⁄
 *
c⁄n
)

464 
PPPoEPackë
 
∑ckë
;

465 *
curs‹
 = 
∑ckë
.
∑ylﬂd
;

466 
PPPoETag
 *
svc
 = (PPPoETag *Ë(&
∑ckë
.
∑ylﬂd
);

467 
UINT16_t
 
«mñí
 = 0;

468 
UINT16_t
 
∂í
;

470 i‡(
c⁄n
->
£rvi˚Name
) {

471 
«mñí
 = (
UINT16_t
Ë
	`°æí
(
c⁄n
->
£rvi˚Name
);

473 
∂í
 = 
TAG_HDR_SIZE
 + 
«mñí
;

474 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
∂í
);

477 
	`mem£t
(
∑ckë
.
ëhHdr
.
h_de°
, 0xFF, 
ETH_ALEN
);

478 
	`mem˝y
(
∑ckë
.
ëhHdr
.
h_sour˚
, 
c⁄n
->
myEth
, 
ETH_ALEN
);

480 
∑ckë
.
ëhHdr
.
h_¥Ÿo
 = 
	`ht⁄s
(
Eth_PPPOE_Discovîy
);

481 
∑ckë
.
vîty≥
 = 
	`PPPOE_VER_TYPE
(1, 1);

482 
∑ckë
.
code
 = 
CODE_PADI
;

483 
∑ckë
.
£ssi⁄
 = 0;

485 
svc
->
ty≥
 = 
TAG_SERVICE_NAME
;

486 
svc
->
Àngth
 = 
	`ht⁄s
(
«mñí
);

487 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
«mñí
+
TAG_HDR_SIZE
);

489 i‡(
c⁄n
->
£rvi˚Name
) {

490 
	`mem˝y
(
svc
->
∑ylﬂd
, 
c⁄n
->
£rvi˚Name
, 
	`°æí
(conn->serviceName));

492 
curs‹
 +
«mñí
 + 
TAG_HDR_SIZE
;

495 i‡(
c⁄n
->
ho°Uniq
.
Àngth
) {

496 
Àn
 = 
	`¡ohs
(
c⁄n
->
ho°Uniq
.
Àngth
);

497 
	`CHECK_ROOM
(
curs‹
, 
∑ckë
.
∑ylﬂd
, 
Àn
 + 
TAG_HDR_SIZE
);

498 
	`mem˝y
(
curs‹
, &
c⁄n
->
ho°Uniq
, 
Àn
 + 
TAG_HDR_SIZE
);

499 
curs‹
 +
Àn
 + 
TAG_HDR_SIZE
;

500 
∂í
 +
Àn
 + 
TAG_HDR_SIZE
;

503 
∑ckë
.
Àngth
 = 
	`ht⁄s
(
∂í
);

505 
	`£ndPackë
(
c⁄n
, c⁄n->
discovîySockë
, &
∑ckë
, (Ë(
∂í
 + 
HDR_SIZE
));

506 i‡(
c⁄n
->
debugFûe
) {

507 
	`dumpPackë
(
c⁄n
->
debugFûe
, &
∑ckë
, "SENT");

508 
	`Ârötf
(
c⁄n
->
debugFûe
, "\n");

509 
	`fÊush
(
c⁄n
->
debugFûe
);

511 
	}
}

524 
	$waôF‹PADO
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
timeout
)

526 
fd_£t
 
ªadabÀ
;

527 
r
;

528 
timevÆ
 
tv
;

529 
PPPoEPackë
 
∑ckë
;

530 
Àn
;

532 
PackëCrôîü
 
pc
;

533 
pc
.
c⁄n
 = conn;

534 
pc
.
acNameOK
 = (
c⁄n
->
acName
) ? 0 : 1;

535 
pc
.
£rvi˚NameOK
 = (
c⁄n
->
£rvi˚Name
) ? 0 : 1;

536 
pc
.
£íACName
 = 0;

537 
pc
.
£íSîvi˚Name
 = 0;

538 
c⁄n
->
îr‹
 = 0;

541 i‡(
BPF_BUFFER_IS_EMPTY
) {

542 
tv
.
tv_£c
 = 
timeout
;

543 
tv
.
tv_u£c
 = 0;

545 
	`FD_ZERO
(&
ªadabÀ
);

546 
	`FD_SET
(
c⁄n
->
discovîySockë
, &
ªadabÀ
);

549 
r
 = 
	`£À˘
(
c⁄n
->
discovîySockë
+1, &
ªadabÀ
, 
NULL
, NULL, &
tv
);

550 i‡(
r
 >0 || 
î∫o
 !
EINTR
) ;

552 i‡(
r
 < 0) {

553 
	`≥º‹
("select (waitForPADO)");

556 i‡(
r
 == 0) ;

560 
	`ª˚ivePackë
(
c⁄n
->
discovîySockë
, &
∑ckë
, &
Àn
);

563 i‡(
	`¡ohs
(
∑ckë
.
Àngth
Ë+ 
HDR_SIZE
 > 
Àn
) {

564 
	`Ârötf
(
°dîr
, "Bogus PPPoEÜength field (%u)\n",

565 (Ë
	`¡ohs
(
∑ckë
.
Àngth
));

569 #ifde‡
USE_BPF


571 i‡(
	`ëhîTy≥
(&
∑ckë
Ë!
Eth_PPPOE_Discovîy
) ;

574 i‡(
c⁄n
->
debugFûe
) {

575 
	`dumpPackë
(
c⁄n
->
debugFûe
, &
∑ckë
, "RCVD");

576 
	`Ârötf
(
c⁄n
->
debugFûe
, "\n");

577 
	`fÊush
(
c⁄n
->
debugFûe
);

580 i‡(!
	`∑ckëIsF‹Me
(
c⁄n
, &
∑ckë
)) ;

582 i‡(
∑ckë
.
code
 =
CODE_PADO
) {

583 i‡(
	`BROADCAST
(
∑ckë
.
ëhHdr
.
h_sour˚
)) {

584 
	`Ârötf
(
°dîr
, "Ignoring PADOÖacket from broadcast MACáddress\n");

587 
	`∑r£Packë
(&
∑ckë
, 
∑r£PADOTags
, &
pc
);

588 i‡(
c⁄n
->
îr‹
)

590 i‡(!
pc
.
£íACName
) {

591 
	`Ârötf
(
°dîr
, "Ignoring PADOÖacket withÇo AC-NameÅag\n");

594 i‡(!
pc
.
£íSîvi˚Name
) {

595 
	`Ârötf
(
°dîr
, "Ignoring PADOÖacket withÇo Service-NameÅag\n");

598 
c⁄n
->
numPADOs
++;

599 i‡(
pc
.
acNameOK
 &&Öc.
£rvi˚NameOK
) {

600 
	`mem˝y
(
c⁄n
->
≥îEth
, 
∑ckë
.
ëhHdr
.
h_sour˚
, 
ETH_ALEN
);

601 i‡(
c⁄n
->
¥ötACNames
) {

602 
	`¥ötf
("AC-Ethernet-Address: %02x:%02x:%02x:%02x:%02x:%02x\n",

603 (Ë
c⁄n
->
≥îEth
[0],

604 (Ë
c⁄n
->
≥îEth
[1],

605 (Ë
c⁄n
->
≥îEth
[2],

606 (Ë
c⁄n
->
≥îEth
[3],

607 (Ë
c⁄n
->
≥îEth
[4],

608 (Ë
c⁄n
->
≥îEth
[5]);

609 
	`¥ötf
("--------------------------------------------------\n");

612 
c⁄n
->
discovîySèã
 = 
STATE_RECEIVED_PADO
;

616 } 
c⁄n
->
discovîySèã
 !
STATE_RECEIVED_PADO
);

617 
	}
}

629 
	$discovîy
(
PPPoEC⁄√˘i⁄
 *
c⁄n
)

631 
∑diAâem±s
 = 0;

632 
timeout
 = 
c⁄n
->
discovîyTimeout
;

634 
c⁄n
->
discovîySockë
 =

635 
	`›íI¡îÁ˚
(
c⁄n
->
ifName
, 
Eth_PPPOE_Discovîy
, c⁄n->
myEth
);

638 
∑diAâem±s
++;

639 i‡(
∑diAâem±s
 > 
c⁄n
->
discovîyAâem±s
) {

640 
	`Ârötf
(
°dîr
, "Timeout waiting for PADOÖackets\n");

641 
	`˛o£
(
c⁄n
->
discovîySockë
);

642 
c⁄n
->
discovîySockë
 = -1;

645 
	`£ndPADI
(
c⁄n
);

646 
c⁄n
->
discovîySèã
 = 
STATE_SENT_PADI
;

647 
	`waôF‹PADO
(
c⁄n
, 
timeout
);

648 } !
c⁄n
->
numPADOs
);

649 
	}
}

651 
	$maö
(
¨gc
, *
¨gv
[])

653 
›t
;

654 
PPPoEC⁄√˘i⁄
 *
c⁄n
;

656 
c⁄n
 = 
	`mÆloc
((
PPPoEC⁄√˘i⁄
));

657 i‡(!
c⁄n
)

658 
	`ÁèlSys
("malloc");

660 
	`mem£t
(
c⁄n
, 0, (
PPPoEC⁄√˘i⁄
));

662 
c⁄n
->
¥ötACNames
 = 1;

663 
c⁄n
->
discovîyTimeout
 = 
PADI_TIMEOUT
;

664 
c⁄n
->
discovîyAâem±s
 = 
MAX_PADI_ATTEMPTS
;

666 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "I:D:VUQS:C:W:t:a:h")) > 0) {

667 
›t
) {

669 
c⁄n
->
£rvi˚Name
 = 
	`x°rdup
(
›èrg
);

672 
c⁄n
->
acName
 = 
	`x°rdup
(
›èrg
);

675 i‡(
	`ssˇnf
(
›èrg
, "%d", &
c⁄n
->
discovîyTimeout
) != 1) {

676 
	`Ârötf
(
°dîr
, "IllegalárgumentÅo -t: Should be -tÅimeout\n");

677 
	`exô
(
EXIT_FAILURE
);

679 i‡(
c⁄n
->
discovîyTimeout
 < 1) {

680 
c⁄n
->
discovîyTimeout
 = 1;

684 i‡(
	`ssˇnf
(
›èrg
, "%d", &
c⁄n
->
discovîyAâem±s
) != 1) {

685 
	`Ârötf
(
°dîr
, "IllegalárgumentÅo -a: Should be -aáttempts\n");

686 
	`exô
(
EXIT_FAILURE
);

688 i‡(
c⁄n
->
discovîyAâem±s
 < 1) {

689 
c⁄n
->
discovîyAâem±s
 = 1;

693 if(
c⁄n
->
ho°Uniq
.
Àngth
) {

694 
	`Ârötf
(
°dîr
, "-Uánd -Wáre mutuallyÉxclusive\n");

695 
	`exô
(
EXIT_FAILURE
);

697 
pid_t
 
pid
 = 
	`gëpid
();

698 
c⁄n
->
ho°Uniq
.
ty≥
 = 
	`ht⁄s
(
TAG_HOST_UNIQ
);

699 
c⁄n
->
ho°Uniq
.
Àngth
 = 
	`ht⁄s
((
pid
));

700 
	`mem˝y
(
c⁄n
->
ho°Uniq
.
∑ylﬂd
, &
pid
, (pid));

704 if(
c⁄n
->
ho°Uniq
.
Àngth
) {

705 
	`Ârötf
(
°dîr
, "-Uánd -Wáre mutuallyÉxclusive\n");

706 
	`exô
(
EXIT_FAILURE
);

708 i‡(!
	`∑r£Ho°Uniq
(
›èrg
, &
c⁄n
->
ho°Uniq
)) {

709 
	`Ârötf
(
°dîr
, "InvÆid ho°-uniqárgumít: %s\n", 
›èrg
);

710 
	`exô
(
EXIT_FAILURE
);

714 
c⁄n
->
debugFûe
 = 
	`f›í
(
›èrg
, "w");

715 i‡(!
c⁄n
->
debugFûe
) {

716 
	`Ârötf
(
°dîr
, "CouldÇot open %s: %s\n",

717 
›èrg
, 
	`°ªº‹
(
î∫o
));

718 
	`exô
(1);

720 
	`Ârötf
(
c⁄n
->
debugFûe
, "µp€-discovîy %s\n", 
RP_VERSION
);

723 
c⁄n
->
ifName
 = 
	`x°rdup
(
›èrg
);

726 
c⁄n
->
¥ötACNames
 = 0;

730 
	`ußge
();

731 
	`exô
(0);

733 
	`ußge
();

734 
	`exô
(1);

739 i‡(!
c⁄n
->
ifName
)

740 
c⁄n
->
ifName
 = 
	`°rdup
("eth0");

742 
c⁄n
->
discovîySockë
 = -1;

743 
c⁄n
->
£ssi⁄Sockë
 = -1;

745 
	`discovîy
(
c⁄n
);

747 i‡(!
c⁄n
->
numPADOs
)

748 
	`exô
(1);

750 
	`exô
(0);

751 
	}
}

753 
	$Ω_Áèl
(c⁄° *
°r
)

755 
	`Ârötf
(
°dîr
, "%s\n", 
°r
);

756 
	`exô
(1);

757 
	}
}

759 
	$ÁèlSys
(c⁄° *
°r
)

761 
	`≥º‹
(
°r
);

762 
	`exô
(1);

763 
	}
}

765 
	$sysEº
(c⁄° *
°r
)

767 
	`Ω_Áèl
(
°r
);

768 
	}
}

770 *
	$x°rdup
(c⁄° *
s
)

772 *
ªt
 = 
	`°rdup
(
s
);

773 i‡(!
ªt
)

774 
	`sysEº
("strdup");

775  
ªt
;

776 
	}
}

778 
	$ußge
()

780 
	`Ârötf
(
°dîr
, "Usage:Öppoe-discovery [options]\n");

781 
	`Ârötf
(
°dîr
, "Options:\n");

782 
	`Ârötf
(
°dîr
, " -I if_name -- Specify interface (defaultÉth0)\n");

783 
	`Ârötf
(
°dîr
, " -D filename -- Log debugging information in filename.\n");

784 
	`Ârötf
(
°dîr
,

794 
	`Ârötf
(
°dîr
, "\nVîsi⁄ " 
RP_VERSION
 "\n");

795 
	}
}

	@pppd/plugins/rp-pppoe/pppoe.h

16 
	~"c⁄fig.h
"

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<˘y≥.h
>

21 
	~<°rög.h
>

23 
	~"µpd/µpd.h
"

26 #unde‡
USE_LINUX_PACKET


27 #unde‡
USE_BPF


29 #i‡
deföed
(
HAVE_NETPACKET_PACKET_H
Ë|| deföed(
HAVE_LINUX_IF_PACKET_H
)

30 
	#USE_LINUX_PACKET
 1

	)

31 #ñi‡
deföed
(
HAVE_SYS_DLPI_H
)

32 
	#USE_DLPI


	)

33 #ñi‡
deföed
(
HAVE_NET_BPF_H
)

34 
	#USE_BPF
 1

	)

38 #i‡!
deföed
(
USE_BPF
Ë&& !deföed(
USE_LINUX_PACKET
Ë&& !deföed(
USE_DLPI
)

39 #îr‹ 
Unknown
 
mëhod
 
ac˚ssög
 
øw
 
Ethî√t
 
‰ames


42 #ifde‡
HAVE_SYS_SOCKET_H


43 
	~<sys/sockë.h
>

48 
	~<√töë/ö.h
>

51 #i‡
deföed
(
HAVE_LINUX_IF_H
)

52 
	~<löux/if.h
>

53 #ñi‡
deföed
(
HAVE_NET_IF_H
)

54 
	~<√t/if.h
>

57 #ifde‡
HAVE_NET_IF_TYPES_H


58 
	~<√t/if_ty≥s.h
>

61 
	#BPF_BUFFER_IS_EMPTY
 1

	)

62 
	#BPF_BUFFER_HAS_DATA
 0

	)

65 #i‡
SIZEOF_UNSIGNED_SHORT
 == 2

66 
	tUINT16_t
;

67 #ñi‡
SIZEOF_UNSIGNED_INT
 == 2

68 
	tUINT16_t
;

70 #îr‹ 
Could
 
nŸ
 
föd
 
a
 16-
bô
 
öãgî
 
ty≥


73 #i‡
SIZEOF_UNSIGNED_SHORT
 == 4

74 
	tUINT32_t
;

75 #ñi‡
SIZEOF_UNSIGNED_INT
 == 4

76 
	tUINT32_t
;

77 #ñi‡
SIZEOF_UNSIGNED_LONG
 == 4

78 
	tUINT32_t
;

80 #îr‹ 
Could
 
nŸ
 
föd
 
a
 32-
bô
 
öãgî
 
ty≥


83 #ifde‡
HAVE_LINUX_IF_ETHER_H


84 
	~<löux/if_ëhî.h
>

87 #ifde‡
HAVE_NETINET_IF_ETHER_H


88 
	~<sys/ty≥s.h
>

90 #ifde‡
HAVE_SYS_SOCKET_H


91 
	~<sys/sockë.h
>

93 #i‚de‡
HAVE_SYS_DLPI_H


94 
	~<√töë/if_ëhî.h
>

100 
	#ETH_PPPOE_DISCOVERY
 0x8863

	)

101 
	#ETH_PPPOE_SESSION
 0x8864

	)

104 
UINT16_t
 
Eth_PPPOE_Discovîy
;

105 
UINT16_t
 
Eth_PPPOE_Sessi⁄
;

108 
	#CODE_PADI
 0x09

	)

109 
	#CODE_PADO
 0x07

	)

110 
	#CODE_PADR
 0x19

	)

111 
	#CODE_PADS
 0x65

	)

112 
	#CODE_PADT
 0xA7

	)

116 
	#CODE_PADM
 0xD3

	)

117 
	#CODE_PADN
 0xD4

	)

119 
	#CODE_SESS
 0x00

	)

122 
	#TAG_END_OF_LIST
 0x0000

	)

123 
	#TAG_SERVICE_NAME
 0x0101

	)

124 
	#TAG_AC_NAME
 0x0102

	)

125 
	#TAG_HOST_UNIQ
 0x0103

	)

126 
	#TAG_AC_COOKIE
 0x0104

	)

127 
	#TAG_VENDOR_SPECIFIC
 0x0105

	)

128 
	#TAG_RELAY_SESSION_ID
 0x0110

	)

129 
	#TAG_PPP_MAX_PAYLOAD
 0x0120

	)

130 
	#TAG_SERVICE_NAME_ERROR
 0x0201

	)

131 
	#TAG_AC_SYSTEM_ERROR
 0x0202

	)

132 
	#TAG_GENERIC_ERROR
 0x0203

	)

136 
	#TAG_HURL
 0x111

	)

137 
	#TAG_MOTM
 0x112

	)

138 
	#TAG_IP_ROUTE_ADD
 0x121

	)

141 
	#STATE_SENT_PADI
 0

	)

142 
	#STATE_RECEIVED_PADO
 1

	)

143 
	#STATE_SENT_PADR
 2

	)

144 
	#STATE_SESSION
 3

	)

145 
	#STATE_TERMINATED
 4

	)

148 
	#MAX_PADI_ATTEMPTS
 3

	)

151 
	#PADI_TIMEOUT
 5

	)

154 
	#STATE_WAITFOR_FRAME_ADDR
 0

	)

155 
	#STATE_DROP_PROTO
 1

	)

156 
	#STATE_BUILDING_PACKET
 2

	)

159 
	#FRAME_ESC
 0x7D

	)

160 
	#FRAME_FLAG
 0x7E

	)

161 
	#FRAME_ADDR
 0xFF

	)

162 
	#FRAME_CTRL
 0x03

	)

163 
	#FRAME_ENC
 0x20

	)

165 
	#IPV4ALEN
 4

	)

166 
	#SMALLBUF
 256

	)

173 
	#ETH_JUMBO_LEN
 1508

	)

176 
	sPPPoEPackëSåu˘
 {

177 
ëhhdr
 
	mëhHdr
;

178 
	mvîty≥
:8;

179 
	mcode
:8;

180 
	m£ssi⁄
:16;

181 
	mÀngth
:16;

182 
	m∑ylﬂd
[
ETH_JUMBO_LEN
];

183 } 
	tPPPoEPackë
;

185 
	#PPPOE_VER
(
vt
Ë((vtË>> 4)

	)

186 
	#PPPOE_TYPE
(
vt
Ë((vtË& 0xf)

	)

187 
	#PPPOE_VER_TYPE
(
v
, 
t
Ë(((vË<< 4Ë| (t))

	)

190 
	#PPPOE_OVERHEAD
 6

	)

191 
	#HDR_SIZE
 ((
ëhhdr
Ë+ 
PPPOE_OVERHEAD
)

	)

192 
	#MAX_PPPOE_PAYLOAD
 (
ETH_JUMBO_LEN
 - 
PPPOE_OVERHEAD
)

	)

193 
	#PPP_OVERHEAD
 2

	)

194 
	#MAX_PPPOE_MTU
 (
MAX_PPPOE_PAYLOAD
 - 
PPP_OVERHEAD
)

	)

195 
	#TOTAL_OVERHEAD
 (
PPPOE_OVERHEAD
 + 
PPP_OVERHEAD
)

	)

196 
	#ETH_PPPOE_MTU
 (
ETH_DATA_LEN
 - 
TOTAL_OVERHEAD
)

	)

200 
	sPPPoETagSåu˘
 {

201 
	mty≥
:16;

202 
	mÀngth
:16;

203 
	m∑ylﬂd
[
ETH_JUMBO_LEN
];

204 } 
	tPPPoETag
;

206 
	#TAG_HDR_SIZE
 4

	)

209 
	#READ_CHUNK
 4096

	)

212 
	tP¨£Func
(
	tUINT16_t
 
	tty≥
,

213 
	tUINT16_t
 
	tÀn
,

214 *
	td©a
,

215 *
	texåa
);

217 
	#PPPINITFCS16
 0xfff‡

	)

222 
	sPPPoEC⁄√˘i⁄Såu˘
 {

223 
	mdiscovîySèã
;

224 
	mdiscovîySockë
;

225 
	m£ssi⁄Sockë
;

226 
	mmyEth
[
ETH_ALEN
];

227 
	m≥îEth
[
ETH_ALEN
];

228 
	mªq_≥î_mac
[
ETH_ALEN
];

229 
	mªq_≥î
;

230 
UINT16_t
 
	m£ssi⁄
;

231 *
	mifName
;

232 *
	m£rvi˚Name
;

233 *
	macName
;

234 
	msynchr⁄ous
;

235 
PPPoETag
 
	mho°Uniq
;

236 
	m¥ötACNames
;

237 
FILE
 *
	mdebugFûe
;

238 
	mnumPADOs
;

239 
PPPoETag
 
	mcookõ
;

240 
PPPoETag
 
	mªœyId
;

241 
	mîr‹
;

242 
	mdebug
;

243 
	mdiscovîyTimeout
;

244 
	mdiscovîyAâem±s
;

245 
	m£íMaxPaylﬂd
;

246 
	mmtu
;

247 
	mmru
;

248 } 
	tPPPoEC⁄√˘i⁄
;

251 
	sPackëCrôîü
 {

252 
PPPoEC⁄√˘i⁄
 *
	mc⁄n
;

253 
	macNameOK
;

254 
	m£rvi˚NameOK
;

255 
	m£íACName
;

256 
	m£íSîvi˚Name
;

260 
UINT16_t
 
ëhîTy≥
(
PPPoEPackë
 *
∑ckë
);

261 
›íI¡îÁ˚
(c⁄° *
i‚ame
, 
UINT16_t
 
ty≥
, *
hwaddr
);

262 
£ndPackë
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
sock
, 
PPPoEPackë
 *
pkt
, 
size
);

263 
ª˚ivePackë
(
sock
, 
PPPoEPackë
 *
pkt
, *
size
);

264 
ÁèlSys
(c⁄° *
°r
);

265 
Ω_Áèl
(c⁄° *
°r
);

266 
¥ötEº
(c⁄° *
°r
);

267 
sysEº
(c⁄° *
°r
);

268 
dumpPackë
(
FILE
 *
Â
, 
PPPoEPackë
 *
∑ckë
, c⁄° *
dú
);

269 
dumpHex
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
);

270 
∑r£Packë
(
PPPoEPackë
 *
∑ckë
, 
P¨£Func
 *
func
, *
exåa
);

271 
∑r£LogEºs
(
UINT16_t
 
typ
, UINT16_à
Àn
, *
d©a
, *
xåa
);

272 
syncRódFromPPP
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
PPPoEPackë
 *
∑ckë
);

273 
asyncRódFromPPP
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
PPPoEPackë
 *
∑ckë
);

274 
asyncRódFromEth
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
sock
, 
˛ampMss
);

275 
syncRódFromEth
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, 
sock
, 
˛ampMss
);

276 *
°rDup
(c⁄° *
°r
);

277 
£ndPADT
(
PPPoEC⁄√˘i⁄
 *
c⁄n
, c⁄° *
msg
);

278 
£ndSessi⁄Packë
(
PPPoEC⁄√˘i⁄
 *
c⁄n
,

279 
PPPoEPackë
 *
∑ckë
, 
Àn
);

280 
öôPPP
();

281 
˛ampMSS
(
PPPoEPackë
 *
∑ckë
, c⁄° *
dú
, 
˛ampMss
);

282 
UINT16_t
 
compuãTCPChecksum
(*
ùHdr
, *
t˝Hdr
);

283 
UINT16_t
 
µpFCS16
(UINT16_à
fcs
, *
˝
, 
Àn
);

284 
discovîy
(
PPPoEC⁄√˘i⁄
 *
c⁄n
);

285 *
födTag
(
PPPoEPackë
 *
∑ckë
, 
UINT16_t
 
ègTy≥
,

286 
PPPoETag
 *
èg
);

288 
µp€_¥öçkt
(
PPPoEPackë
 *
∑ckë
,

289 (*
¥öãr
)(*, *, ...), *
¨g
);

290 
	`µp€_log_∑ckë
(c⁄° *
¥efix
, 
PPPoEPackë
 *
∑ckë
);

292 
ölöe
 
	$∑r£Ho°Uniq
(c⁄° *
uniq
, 
PPPoETag
 *
èg
)

294 
i
, 
Àn
 = 
	`°æí
(
uniq
);

296 
	#hex
(
x
) \

297 (((
x
) <= '9') ? ((x) - '0') : \

298 (((
x
) <= 'F') ? ((x) - 'A' + 10) : \

299 ((
x
Ë- 'a' + 10)))

	)

301 i‡(!
Àn
 ||Üí % 2 ||Üí / 2 > (
èg
->
∑ylﬂd
))

304 
i
 = 0; i < 
Àn
; i += 2) {

305 i‡(!
	`isxdigô
(
uniq
[
i
]) || !isxdigit(uniq[i+1]))

308 
èg
->
∑ylﬂd
[
i
 / 2] = ()(
	`hex
(
uniq
[i]) << 4 | hex(uniq[i+1]));

311 #unde‡
hex


313 
èg
->
ty≥
 = 
	`ht⁄s
(
TAG_HOST_UNIQ
);

314 
èg
->
Àngth
 = 
	`ht⁄s
(
Àn
 / 2);

316 
	}
}

318 
	#SET_STRING
(
v¨
, 
vÆ
Ëdÿ{ i‡(v¨Ë
	`‰ì
(v¨); v¨ = 
	`°rDup
(vÆ); } 0);

	)

320 
	#CHECK_ROOM
(
curs‹
, 
°¨t
, 
Àn
) \

322 i‡(((
curs‹
)-(
°¨t
))+(
Àn
Ë> 
MAX_PPPOE_PAYLOAD
) { \

323 
	`îr‹
("Would createÅoo-longÖacket"); \

326 } 0)

	)

329 
	#NOT_UNICAST
(
e
Ë(”[0] & 0x01Ë!0)

	)

330 
	#BROADCAST
(
e
Ë(”[0] &É[1] &É[2] &É[3] &É[4] &É[5]Ë=0xFF)

	)

331 
	#NOT_BROADCAST
(
e
Ë(”[0] &É[1] &É[2] &É[3] &É[4] &É[5]Ë!0xFF)

	)

	@pppd/plugins/winbind.c

37 
	~"µpd.h
"

38 
	~"ch≠-√w.h
"

39 
	~"ch≠_ms.h
"

40 #ifde‡
MPPE


41 
	~"md5.h
"

43 
	~"fsm.h
"

44 
	~"ù˝.h
"

45 
	~<sy¶og.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/°©.h
>

48 
	~<f˙é.h
>

49 
	~<sys/time.h
>

50 
	~<sys/waô.h
>

51 
	~<°rög.h
>

52 
	~<uni°d.h
>

53 
	~<°dlib.h
>

54 
	~<î∫o.h
>

55 
	~<˘y≥.h
>

57 
	#BUF_LEN
 1024

	)

59 
	#NOT_AUTHENTICATED
 0

	)

60 
	#AUTHENTICATED
 1

	)

62 *
	g¡lm_auth
 = 
NULL
;

64 
	$£t_¡lm_auth
(**
¨gv
)

66 *
p
;

68 
p
 = 
¨gv
[0];

69 i‡(
p
[0] != '/') {

70 
	`›ti⁄_îr‹
("ntlm_auth-helperárgument must be fullÖath");

73 
p
 = 
	`°rdup
(p);

74 i‡(
p
 =
NULL
) {

75 
	`novm
("ntlm_auth-helperárgument");

78 i‡(
¡lm_auth
 !
NULL
)

79 
	`‰ì
(
¡lm_auth
);

80 
¡lm_auth
 = 
p
;

82 
	}
}

84 
›ti⁄_t
 
	gO±i⁄s
[] = {

85 { "¡lm_auth-hñ≥r", 
o_•ecül
, (*Ë&
£t_¡lm_auth
,

86 "P©hÅÿ¡lm_authÉxecuèbÀ", 
OPT_PRIV
 },

87 { 
NULL
 }

91 
wöböd_£¸ë_check
();

93 
wöböd_∑p_auth
(*
u£r
,

94 *
∑sswd
,

95 **
msgp
,

96 
w‹dli°
 **
∑ddrs
,

97 
w‹dli°
 **
p›ts
);

98 
wöböd_ch≠_vîify
(*
u£r
, *
ou∫ame
, 
id
,

99 
ch≠_dige°_ty≥
 *
dige°
,

100 *
chÆÀnge
,

101 *
ª•⁄£
,

102 *
mesßge
, 
mesßge_•a˚
);

103 
wöböd_Ælowed_addªss
(
u_öt32_t
 
addr
);

105 
	gµpd_vîsi⁄
[] = 
VERSION
;

117 
	$∂ugö_öô
()

119 
∑p_check_hook
 = 
wöböd_£¸ë_check
;

120 
∑p_auth_hook
 = 
wöböd_∑p_auth
;

122 
ch≠_check_hook
 = 
wöböd_£¸ë_check
;

123 
ch≠_vîify_hook
 = 
wöböd_ch≠_vîify
;

125 
Ælowed_addªss_hook
 = 
wöböd_Ælowed_addªss
;

128 
ch≠_mdty≥_Æl
 &(
MDTYPE_MICROSOFT_V2
 | 
MDTYPE_MICROSOFT
);

130 
	`add_›ti⁄s
(
O±i⁄s
);

132 
	`öfo
("WINBINDÖlugin initialized.");

133 
	}
}

168 
size_t
 
	$°rhex_to_°r
(*
p
, 
size_t
 
Àn
, c⁄° *
°rhex
)

170 
size_t
 
i
;

171 
size_t
 
num_ch¨s
 = 0;

172 
l⁄ybbÀ
, 
höybbÀ
;

173 c⁄° *
hexch¨s
 = "0123456789ABCDEF";

174 *
p1
 = 
NULL
, *
p2
 = NULL;

176 
i
 = 0; i < 
Àn
 && 
°rhex
[i] != 0; i++) {

177 i‡(
	`°∫cmp
(
hexch¨s
, "0x", 2) == 0) {

178 
i
++;

182 i‡(!(
p1
 = 
	`°rchr
(
hexch¨s
, 
	`touµî
(
°rhex
[
i
]))))

185 
i
++;

187 i‡(!(
p2
 = 
	`°rchr
(
hexch¨s
, 
	`touµî
(
°rhex
[
i
]))))

191 
höybbÀ
 = (
p1
 - 
hexch¨s
);

192 
l⁄ybbÀ
 = (
p2
 - 
hexch¨s
);

194 
p
[
num_ch¨s
] = (
höybbÀ
 << 4Ë| 
l⁄ybbÀ
;

195 
num_ch¨s
++;

197 
p1
 = 
NULL
;

198 
p2
 = 
NULL
;

200  
num_ch¨s
;

201 
	}
}

203 c⁄° *
	gb64
 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

210 * 
	$ba£64_ícode
(c⁄° *
d©a
)

212 
size_t
 
out_˙t
 = 0;

213 
size_t
 
Àn
 = 
	`°æí
(
d©a
);

214 
size_t
 
ouçut_Àn
 = 4 * ((
Àn
 + 2) / 3) + 2;

215 c⁄° *
±r
 = (c⁄° *Ë
d©a
;

216 *
ªsu…
 = 
	`mÆloc
(
ouçut_Àn
);

217 
bôs
;

219 ; 
Àn
 >= 3;Üen -= 3) {

220 
bôs
 = (
±r
[0] << 16) + (ptr[1] << 8) +Ötr[2];

221 
±r
 += 3;

222 
ªsu…
[
out_˙t
++] = 
b64
[
bôs
 >> 18];

223 
ªsu…
[
out_˙t
++] = 
b64
[(
bôs
 >> 12) & 0x3f];

224 
ªsu…
[
out_˙t
++] = 
b64
[(
bôs
 >> 6) & 0x3f];

225 
ªsu…
[
out_˙t
++] = 
b64
[
bôs
 & 0x3f];

227 i‡(
Àn
 != 0) {

228 
bôs
 = 
±r
[0] << 16;

229 i‡(
Àn
 > 1)

230 
bôs
 |
±r
[1] << 8;

231 
ªsu…
[
out_˙t
++] = 
b64
[
bôs
 >> 18];

232 
ªsu…
[
out_˙t
++] = 
b64
[(
bôs
 >> 12) & 0x3f];

233 
ªsu…
[
out_˙t
++] = (
Àn
 > 1)? 
b64
[(
bôs
 >> 6) & 0x3f]: '=';

234 
ªsu…
[
out_˙t
++] = '=';

237 
ªsu…
[
out_˙t
] = '\0';

238  
ªsu…
;

239 
	}
}

241 
	$run_¡lm_auth
(c⁄° *
u£∫ame
,

242 c⁄° *
domaö
,

243 c⁄° *
fuŒ_u£∫ame
,

244 c⁄° *
∂aöãxt_∑ssw‹d
,

245 c⁄° 
u_ch¨
 *
chÆÀnge
,

246 
size_t
 
chÆÀnge_Àngth
,

247 c⁄° 
u_ch¨
 *
lm_ª•⁄£
,

248 
size_t
 
lm_ª•⁄£_Àngth
,

249 c⁄° 
u_ch¨
 *
¡_ª•⁄£
,

250 
size_t
 
¡_ª•⁄£_Àngth
,

251 
u_ch¨
 
¡_key
[16],

252 **
îr‹_°rög
)

255 
pid_t
 
f‹kªt
;

256 
chûd_ö
[2];

257 
chûd_out
[2];

258 
°©us
;

260 
authítiˇãd
 = 
NOT_AUTHENTICATED
;

261 
gŸ_u£r_£ssi⁄_key
 = 0;

263 
buf„r
[1024];

265 
FILE
 *
pùe_ö
;

266 
FILE
 *
pùe_out
;

268 
i
;

269 *
chÆÀnge_hex
;

270 *
lm_hex_hash
;

271 *
¡_hex_hash
;

274 i‡(
¡lm_auth
 =
NULL
)

275  
NOT_AUTHENTICATED
;

278 i‡(
	`pùe
(
chûd_out
) == -1) {

279 
	`îr‹
("pipe creation failed for child OUT!");

280  
NOT_AUTHENTICATED
;

283 i‡(
	`pùe
(
chûd_ö
) == -1) {

284 
	`îr‹
("pipe creation failed for child IN!");

285  
NOT_AUTHENTICATED
;

288 
f‹kªt
 = 
	`ß„_f‹k
(
chûd_ö
[0], 
chûd_out
[1], 2);

289 i‡(
f‹kªt
 == -1) {

290 i‡(
îr‹_°rög
) {

291 *
îr‹_°rög
 = 
	`°rdup
("fork failed!");

294  
NOT_AUTHENTICATED
;

297 i‡(
f‹kªt
 == 0) {

299 
uid_t
 
uid
;

301 
	`˛o£
(
chûd_out
[0]);

302 
	`˛o£
(
chûd_ö
[1]);

305 
	`£tgid
(
	`gëgid
());

306 
uid
 = 
	`gëuid
();

307 i‡(
	`£tuid
(
uid
Ë=-1 || 
	`gëuid
() != uid)

308 
	`Áèl
("µpd/wöböd: couldÇŸ sëuidÅÿ%d: %m", 
uid
);

309 
	`exe˛
("/bö/sh", "sh", "-c", 
¡lm_auth
, 
NULL
);

310 
	`Áèl
("pppd/winbind: couldÇotÉxec /bin/sh: %m");

314 
	`˛o£
(
chûd_out
[1]);

315 
	`˛o£
(
chûd_ö
[0]);

319 
pùe_ö
 = 
	`fd›í
(
chûd_ö
[1], "w");

321 
pùe_out
 = 
	`fd›í
(
chûd_out
[0], "r");

325 i‡(
u£∫ame
) {

326 *
b64_u£∫ame
 = 
	`ba£64_ícode
(
u£∫ame
);

327 
	`Ârötf
(
pùe_ö
, "U£∫ame:: %s\n", 
b64_u£∫ame
);

328 
	`‰ì
(
b64_u£∫ame
);

331 i‡(
domaö
) {

332 *
b64_domaö
 = 
	`ba£64_ícode
(
domaö
);

333 
	`Ârötf
(
pùe_ö
, "NT-Domaö:: %s\n", 
b64_domaö
);

334 
	`‰ì
(
b64_domaö
);

337 i‡(
fuŒ_u£∫ame
) {

338 *
b64_fuŒ_u£∫ame
 = 
	`ba£64_ícode
(
fuŒ_u£∫ame
);

339 
	`Ârötf
(
pùe_ö
, "FuŒ-U£∫ame:: %s\n", 
b64_fuŒ_u£∫ame
);

340 
	`‰ì
(
b64_fuŒ_u£∫ame
);

343 i‡(
∂aöãxt_∑ssw‹d
) {

344 *
b64_∂aöãxt_∑ssw‹d
 = 
	`ba£64_ícode
(
∂aöãxt_∑ssw‹d
);

345 
	`Ârötf
(
pùe_ö
, "Passw‹d:: %s\n", 
b64_∂aöãxt_∑ssw‹d
);

346 
	`‰ì
(
b64_∂aöãxt_∑ssw‹d
);

349 i‡(
chÆÀnge_Àngth
) {

350 
	`Ârötf
(
pùe_ö
, "Request-User-Session-Key: yes\n");

352 
chÆÀnge_hex
 = 
	`mÆloc
(
chÆÀnge_Àngth
*2+1);

354 
i
 = 0; i < 
chÆÀnge_Àngth
; i++)

355 
	`•rötf
(
chÆÀnge_hex
 + 
i
 * 2, "%02X", 
chÆÀnge
[i]);

357 
	`Ârötf
(
pùe_ö
, "LANMAN-ChÆÀnge: %s\n", 
chÆÀnge_hex
);

358 
	`‰ì
(
chÆÀnge_hex
);

361 i‡(
lm_ª•⁄£_Àngth
) {

362 
lm_hex_hash
 = 
	`mÆloc
(
lm_ª•⁄£_Àngth
*2+1);

364 
i
 = 0; i < 
lm_ª•⁄£_Àngth
; i++)

365 
	`•rötf
(
lm_hex_hash
 + 
i
 * 2, "%02X", 
lm_ª•⁄£
[i]);

367 
	`Ârötf
(
pùe_ö
, "LANMAN-ª•⁄£: %s\n", 
lm_hex_hash
);

368 
	`‰ì
(
lm_hex_hash
);

371 i‡(
¡_ª•⁄£_Àngth
) {

372 
¡_hex_hash
 = 
	`mÆloc
(
¡_ª•⁄£_Àngth
*2+1);

374 
i
 = 0; i < 
¡_ª•⁄£_Àngth
; i++)

375 
	`•rötf
(
¡_hex_hash
 + 
i
 * 2, "%02X", 
¡_ª•⁄£
[i]);

377 
	`Ârötf
(
pùe_ö
, "NT-ª•⁄£: %s\n", 
¡_hex_hash
);

378 
	`‰ì
(
¡_hex_hash
);

381 
	`Ârötf
(
pùe_ö
, ".\n");

382 
	`fÊush
(
pùe_ö
);

384 
	`fgës
(
buf„r
, (buf„r)-1, 
pùe_out
Ë!
NULL
) {

385 *
mesßge
, *
∑ømëî
;

386 i‡(
buf„r
[
	`°æí
(buffer)-1] != '\n') {

389 
buf„r
[
	`°æí
(buffer)-1] = '\0';

390 
mesßge
 = 
buf„r
;

392 i‡(!(
∑ømëî
 = 
	`°r°r
(
buf„r
, ": "))) {

396 
∑ømëî
[0] = '\0';

397 
∑ømëî
++;

398 
∑ømëî
[0] = '\0';

399 
∑ømëî
++;

401 i‡(
	`°rcmp
(
mesßge
, ".") == 0) {

404 } i‡(
	`°rˇ£cmp
(
mesßge
, "Authenticated") == 0) {

405 i‡(
	`°rˇ£cmp
(
∑ømëî
, "Yes") == 0) {

406 
authítiˇãd
 = 
AUTHENTICATED
;

408 
	`nŸi˚
("Winbind has declinedáuthentication for user!");

409 
authítiˇãd
 = 
NOT_AUTHENTICATED
;

411 } i‡(
	`°rˇ£cmp
(
mesßge
, "User-session-key") == 0) {

413 i‡(
¡_key
) {

414 i‡(
	`°rhex_to_°r
(
¡_key
, 32, 
∑ømëî
) == 16) {

415 
gŸ_u£r_£ssi⁄_key
 = 1;

417 
	`nŸi˚
("NT session key for user wasÇot 16 bytes!");

420 } i‡(
	`°rˇ£cmp
(
mesßge
, "Error") == 0) {

421 
authítiˇãd
 = 
NOT_AUTHENTICATED
;

422 i‡(
îr‹_°rög
)

423 *
îr‹_°rög
 = 
	`°rdup
(
∑ømëî
);

424 } i‡(
	`°rˇ£cmp
(
mesßge
, "Authentication-Error") == 0) {

425 
authítiˇãd
 = 
NOT_AUTHENTICATED
;

426 i‡(
îr‹_°rög
)

427 *
îr‹_°rög
 = 
	`°rdup
(
∑ømëî
);

429 
	`nŸi˚
("uƒecogni£d i≈uà‰omÇém_auth hñ≥∏- %s: %s", 
mesßge
, 
∑ømëî
);

434 i‡(
	`˛o£
(
chûd_out
[0]) == -1) {

435 
	`˛o£
(
chûd_ö
[1]);

436 
	`nŸi˚
("error closingÖipe?!? for child OUT[0]");

437  
NOT_AUTHENTICATED
;

441 i‡(
	`˛o£
(
chûd_ö
[1]) == -1) {

442 
	`nŸi˚
("error closingÖipe?!? for child IN[1]");

443  
NOT_AUTHENTICATED
;

446 (
	`waô
(&
°©us
Ë=-1Ë&& 
î∫o
 =
EINTR
 && !
gŸ_sigãrm
)

449 i‡((
authítiˇãd
 =
AUTHENTICATED
Ë&& 
¡_key
 && !
gŸ_u£r_£ssi⁄_key
) {

450 
	`nŸi˚
("DidÇot get user session key, despite beingáuthenticated!");

451  
NOT_AUTHENTICATED
;

453  
authítiˇãd
;

454 
	}
}

467 
	$wöböd_£¸ë_check
()

469  
¡lm_auth
 !
NULL
;

470 
	}
}

486 
	$wöböd_∑p_auth
(*
u£r
,

487 *
∑ssw‹d
,

488 **
msgp
,

489 
w‹dli°
 **
∑ddrs
,

490 
w‹dli°
 **
p›ts
)

492 i‡(
	`run_¡lm_auth
(
NULL
, NULL, 
u£r
, 
∑ssw‹d
, NULL, 0, NULL, 0, NULL, 0, NULL, 
msgp
Ë=
AUTHENTICATED
) {

496 
	}
}

512 
	$wöböd_ch≠_vîify
(*
u£r
, *
ou∫ame
, 
id
,

513 
ch≠_dige°_ty≥
 *
dige°
,

514 *
chÆÀnge
,

515 *
ª•⁄£
,

516 *
mesßge
, 
mesßge_•a˚
)

518 
chÆÀnge_Àn
, 
ª•⁄£_Àn
;

519 
domaö«me
[256];

520 *
domaö
;

521 *
u£∫ame
;

522 *
p
;

523 
ßª•⁄£
[
MS_AUTH_RESPONSE_LENGTH
+1];

526 
chÆÀnge_Àn
 = *
chÆÀnge
++;

527 
ª•⁄£_Àn
 = *
ª•⁄£
++;

530 i‡((
u£∫ame
 = 
	`°ºchr
(
u£r
, '\\')Ë!
NULL
)

531 ++
u£∫ame
;

533 
u£∫ame
 = 
u£r
;

535 
	`°æ˝y
(
domaö«me
, 
u£r
, (domainname));

538 i‡((
p
 = 
	`°ºchr
(
domaö«me
, '\\')Ë!
NULL
) {

539 *
p
 = '\0';

540 
domaö
 = 
domaö«me
;

542 
domaö
 = 
NULL
;

546 
dige°
->
code
) {

548 
CHAP_MICROSOFT
:

550 *
îr‹_°rög
 = 
NULL
;

551 
u_ch¨
 *
¡_ª•⁄£
 = 
NULL
;

552 
u_ch¨
 *
lm_ª•⁄£
 = 
NULL
;

553 
¡_ª•⁄£_size
 = 0;

554 
lm_ª•⁄£_size
 = 0;

555 
u_ch¨
 
£ssi⁄_key
[16];

557 i‡(
ª•⁄£_Àn
 !
MS_CHAP_RESPONSE_LEN
)

561 i‡(
ª•⁄£
[
MS_CHAP_USENT
]) {

562 
¡_ª•⁄£
 = &
ª•⁄£
[
MS_CHAP_NTRESP
];

563 
¡_ª•⁄£_size
 = 
MS_CHAP_NTRESP_LEN
;

565 #ifde‡
MSLANMAN


566 
lm_ª•⁄£
 = &
ª•⁄£
[
MS_CHAP_LANMANRESP
];

567 
lm_ª•⁄£_size
 = 
MS_CHAP_LANMANRESP_LEN
;

570 
	`nŸi˚
("PeerÑequest for LANMANáuthÇot supported");

571  
NOT_AUTHENTICATED
;

577 i‡(
	`run_¡lm_auth
(
u£∫ame
,

578 
domaö
,

579 
NULL
,

580 
NULL
,

581 
chÆÀnge
, 
chÆÀnge_Àn
,

582 
lm_ª•⁄£
, 
lm_ª•⁄£_size
,

583 
¡_ª•⁄£
, 
¡_ª•⁄£_size
,

584 
£ssi⁄_key
,

585 &
îr‹_°rög
Ë=
AUTHENTICATED
) {

586 
	`mµe_£t_keys
(
chÆÀnge
, 
£ssi⁄_key
);

587 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "Access granted");

588  
AUTHENTICATED
;

591 i‡(
îr‹_°rög
) {

592 
	`nŸi˚
(
îr‹_°rög
);

593 
	`‰ì
(
îr‹_°rög
);

595 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "E=691 R=1 C=%0.*B V=0",

596 
chÆÀnge_Àn
, 
chÆÀnge
);

597  
NOT_AUTHENTICATED
;

602 
CHAP_MICROSOFT_V2
:

604 
u_ch¨
 
ChÆÀnge
[8];

605 
u_ch¨
 
£ssi⁄_key
[
MD4_SIGNATURE_SIZE
];

606 *
îr‹_°rög
 = 
NULL
;

608 i‡(
ª•⁄£_Àn
 !
MS_CHAP2_RESPONSE_LEN
)

611 
	`ChÆÀngeHash
(&
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
], 
chÆÀnge
,

612 
u£r
, 
ChÆÀnge
);

616 i‡(
	`run_¡lm_auth
(
u£∫ame
,

617 
domaö
,

618 
NULL
,

619 
NULL
,

620 
ChÆÀnge
, 8,

621 
NULL
, 0,

622 &
ª•⁄£
[
MS_CHAP2_NTRESP
],

623 
MS_CHAP2_NTRESP_LEN
,

624 
£ssi⁄_key
,

625 &
îr‹_°rög
Ë=
AUTHENTICATED
) {

627 
	`Gíî©eAuthítiˇt‹Re•⁄£
(
£ssi⁄_key
,

628 &
ª•⁄£
[
MS_CHAP2_NTRESP
],

629 &
ª•⁄£
[
MS_CHAP2_PEER_CHALLENGE
],

630 
chÆÀnge
, 
u£r
, 
ßª•⁄£
);

631 
	`mµe_£t_keys2
(
£ssi⁄_key
, &
ª•⁄£
[
MS_CHAP2_NTRESP
],

632 
MS_CHAP2_AUTHENTICATOR
);

633 i‡(
ª•⁄£
[
MS_CHAP2_FLAGS
]) {

634 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "S=%s", 
ßª•⁄£
);

636 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "S=%s M=%s",

637 
ßª•⁄£
, "Access granted");

639  
AUTHENTICATED
;

642 i‡(
îr‹_°rög
) {

643 
	`nŸi˚
(
îr‹_°rög
);

644 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "E=691 R=1 C=%0.*B V=0 M=%s",

645 
chÆÀnge_Àn
, 
chÆÀnge
, 
îr‹_°rög
);

646 
	`‰ì
(
îr‹_°rög
);

648 
	`¶¥ötf
(
mesßge
, 
mesßge_•a˚
, "E=691 R=1 C=%0.*B V=0 M=%s",

649 
chÆÀnge_Àn
, 
chÆÀnge
, "Access denied");

651  
NOT_AUTHENTICATED
;

657 
	`îr‹
("WINBIND: ChÆÀngêty≥ %u unsuµ‹ãd", 
dige°
->
code
);

659  
NOT_AUTHENTICATED
;

660 
	}
}

663 
	$wöböd_Ælowed_addªss
(
u_öt32_t
 
addr
)

665 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

666 i‡(
wo
->
hißddr
 !=0 && wo->hißdd∏=
addr
) {

670 
	}
}

	@pppd/pppcrypt.c

33 
	~<î∫o.h
>

34 
	~"µpd.h
"

35 
	~"µp¸y±.h
"

37 
u_ch¨


38 
	$Gë7Bôs
(
öput
, 
°¨tBô
)

39 
u_ch¨
 *
öput
;

40 
°¨tBô
;

42 
w‹d
;

44 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

45 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

47 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

49  
w‹d
 & 0xFE;

50 
	}
}

53 
	$MakeKey
(
key
, 
des_key
)

54 
u_ch¨
 *
key
;

55 
u_ch¨
 *
des_key
;

57 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

58 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

59 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

60 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

61 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

62 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

63 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

64 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

66 #i‚de‡
USE_CRYPT


67 
	`DES_£t_odd_∑rôy
((
DES_cblock
 *)
des_key
);

69 
	}
}

71 #ifde‡
USE_CRYPT


78 
	$Ex∑nd
(
ö
, 
out
)

79 
u_ch¨
 *
ö
;

80 
u_ch¨
 *
out
;

82 
j
, 
c
;

83 
i
;

85 
i
 = 0; i < 64; 
ö
++){

86 
c
 = *
ö
;

87 
j
 = 7; j >= 0; j--)

88 *
out
++ = (
c
 >> 
j
) & 01;

89 
i
 += 8;

91 
	}
}

96 
	$Cﬁœp£
(
ö
, 
out
)

97 
u_ch¨
 *
ö
;

98 
u_ch¨
 *
out
;

100 
j
;

101 
i
;

102 
c
;

104 
i
 = 0; i < 64; i +8, 
out
++) {

105 
c
 = 0;

106 
j
 = 7; j >0; j--, 
ö
++)

107 
c
 |*
ö
 << 
j
;

108 *
out
 = 
c
 & 0xff;

110 
	}
}

112 
boﬁ


113 
	$DesSëkey
(
key
)

114 
u_ch¨
 *
key
;

116 
u_ch¨
 
des_key
[8];

117 
u_ch¨
 
¸y±_key
[66];

119 
	`MakeKey
(
key
, 
des_key
);

120 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

121 
î∫o
 = 0;

122 
	`£tkey
((c⁄° *)
¸y±_key
);

123 i‡(
î∫o
 != 0)

126 
	}
}

128 
boﬁ


129 
	$DesEn¸y±
(
˛ór
, 
cùhî
)

130 
u_ch¨
 *
˛ór
;

131 
u_ch¨
 *
cùhî
;

133 
u_ch¨
 
des_öput
[66];

135 
	`Ex∑nd
(
˛ór
, 
des_öput
);

136 
î∫o
 = 0;

137 
	`í¸y±
((*)
des_öput
, 0);

138 i‡(
î∫o
 != 0)

140 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

142 
	}
}

144 
boﬁ


145 
	$DesDe¸y±
(
cùhî
, 
˛ór
)

146 
u_ch¨
 *
cùhî
;

147 
u_ch¨
 *
˛ór
;

149 
u_ch¨
 
des_öput
[66];

151 
	`Ex∑nd
(
cùhî
, 
des_öput
);

152 
î∫o
 = 0;

153 
	`í¸y±
((*)
des_öput
, 1);

154 i‡(
î∫o
 != 0)

156 
	`Cﬁœp£
(
des_öput
, 
˛ór
);

158 
	}
}

161 
DES_key_scheduÀ
 
	gkey_scheduÀ
;

163 
boﬁ


164 
	$DesSëkey
(
key
)

165 
u_ch¨
 *
key
;

167 
DES_cblock
 
des_key
;

168 
	`MakeKey
(
key
, 
des_key
);

169 
	`DES_£t_key
(&
des_key
, &
key_scheduÀ
);

171 
	}
}

173 
boﬁ


174 
	$DesEn¸y±
(
˛ór
, 
cùhî
)

175 
u_ch¨
 *
˛ór
;

176 
u_ch¨
 *
cùhî
;

178 
	`DES_ecb_í¸y±
((
DES_cblock
 *)
˛ór
, (DES_cblock *)
cùhî
,

179 &
key_scheduÀ
, 1);

181 
	}
}

183 
boﬁ


184 
	$DesDe¸y±
(
cùhî
, 
˛ór
)

185 
u_ch¨
 *
cùhî
;

186 
u_ch¨
 *
˛ór
;

188 
	`DES_ecb_í¸y±
((
DES_cblock
 *)
cùhî
, (DES_cblock *)
˛ór
,

189 &
key_scheduÀ
, 0);

191 
	}
}

	@pppd/pppcrypt.h

33 #i‚de‡
PPPCRYPT_H


34 
	#PPPCRYPT_H


	)

36 #ifde‡
HAVE_CRYPT_H


37 
	~<¸y±.h
>

40 #i‚de‡
USE_CRYPT


41 
	~<des.h
>

44 
boﬁ
 
DesSëkey
 
__P
((
u_ch¨
 *));

45 
boﬁ
 
DesEn¸y±
 
__P
((
u_ch¨
 *, u_char *));

46 
boﬁ
 
DesDe¸y±
 
__P
((
u_ch¨
 *, u_char *));

	@pppd/pppd.h

49 #i‚de‡
__PPPD_H__


50 
	#__PPPD_H__


	)

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<uni°d.h
>

55 
	~<limôs.h
>

56 
	~<sys/∑øm.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<sys/time.h
>

59 
	~<√t/µp_defs.h
>

60 
	~"∑tchÀvñ.h
"

62 #i‡
deföed
(
__STDC__
)

63 
	~<°d¨g.h
>

64 
	#__V
(
x
Ë
	)
x

66 
	~<v¨¨gs.h
>

67 
	#__V
(
x
Ë(
va_Æi°
Ë
va_d˛


	)

68 c⁄°

	)

69 vﬁ©ûe

	)

72 #ifde‡
INET6


73 
	~"eui64.h
"

80 
	#NUM_PPP
 1

	)

81 
	#MAXWORDLEN
 1024

	)

82 
	#MAXARGS
 1

	)

83 
	#MAXNAMELEN
 256

	)

84 
	#MAXSECRETLEN
 256

	)

85 
	#MAXIFNAMELEN
 32

	)

92 #i‡!
deföed
(
PPP_DRV_NAME
)

93 
	#PPP_DRV_NAME
 "µp"

	)

100 
	tboﬁ
;

102 
	e›t_ty≥
 {

103 
	mo_•ecül_nﬂrg
 = 0,

104 
	mo_•ecül
 = 1,

105 
	mo_boﬁ
,

106 
	mo_öt
,

107 
	mo_uöt32
,

108 
	mo_°rög
,

109 
	mo_wûd


113 *
	m«me
;

114 
›t_ty≥
 
	mty≥
;

115 *
	maddr
;

116 *
	mdes¸ùti⁄
;

117 
	mÊags
;

118 *
	maddr2
;

119 
	muµî_limô
;

120 
	mlowî_limô
;

121 c⁄° *
	msour˚
;

122 
	m¥i‹ôy
;

123 
	mwö√r
;

124 } 
	t›ti⁄_t
;

127 
	#OPT_VALUE
 0xf‡

	)

128 
	#OPT_HEX
 0x100

	)

129 
	#OPT_NOARG
 0x200

	)

130 
	#OPT_OR
 0x400

	)

131 
	#OPT_INC
 0x400

	)

132 
	#OPT_A2OR
 0x800

	)

133 
	#OPT_PRIV
 0x1000

	)

134 
	#OPT_STATIC
 0x2000

	)

135 
	#OPT_NOINCR
 0x2000

	)

136 
	#OPT_LLIMIT
 0x4000

	)

137 
	#OPT_ULIMIT
 0x8000

	)

138 
	#OPT_LIMITS
 (
OPT_LLIMIT
|
OPT_ULIMIT
)

	)

139 
	#OPT_ZEROOK
 0x10000

	)

140 
	#OPT_HIDE
 0x10000

	)

141 
	#OPT_A2LIST
 0x20000

	)

142 
	#OPT_A2CLRB
 0x20000

	)

143 
	#OPT_ZEROINF
 0x40000

	)

144 
	#OPT_PRIO
 0x80000

	)

145 
	#OPT_PRIOSUB
 0x100000

	)

146 
	#OPT_ALIAS
 0x200000

	)

147 
	#OPT_A2COPY
 0x400000

	)

148 
	#OPT_ENABLE
 0x800000

	)

149 
	#OPT_A2CLR
 0x1000000

	)

150 
	#OPT_PRIVFIX
 0x2000000

	)

151 
	#OPT_INITONLY
 0x4000000

	)

152 
	#OPT_DEVEQUIV
 0x8000000

	)

153 
	#OPT_DEVNAM
 (
OPT_INITONLY
 | 
OPT_DEVEQUIV
)

	)

154 
	#OPT_A2PRINTER
 0x10000000

	)

155 
	#OPT_A2STRVAL
 0x20000000

	)

156 
	#OPT_NOPRINT
 0x40000000

	)

158 
	#OPT_VAL
(
x
Ë((xË& 
OPT_VALUE
)

	)

161 
	#OPRIO_DEFAULT
 0

	)

162 
	#OPRIO_CFGFILE
 1

	)

163 
	#OPRIO_CMDLINE
 2

	)

164 
	#OPRIO_SECFILE
 3

	)

165 
	#OPRIO_ROOT
 100

	)

167 #i‚de‡
GIDSET_TYPE


168 
	#GIDSET_TYPE
 
gid_t


	)

172 
	s≥rmôãd_ù
 {

173 
	m≥rmô
;

174 
u_öt32_t
 
	mba£
;

175 
u_öt32_t
 
	mmask
;

184 
	sµpd_°©s
 {

185 
	mbyãs_ö
;

186 
	mbyãs_out
;

187 
	mpkts_ö
;

188 
	mpkts_out
;

192 
	sw‹dli°
 {

193 
w‹dli°
 *
	m√xt
;

194 *
	mw‹d
;

198 
	#MAX_ENDP_LEN
 20

	)

199 
	sïdisc
 {

200 
	m˛ass
;

201 
	mÀngth
;

202 
	mvÆue
[
MAX_ENDP_LEN
];

206 
	#EPD_NULL
 0

	)

207 
	#EPD_LOCAL
 1

	)

208 
	#EPD_IP
 2

	)

209 
	#EPD_MAC
 3

	)

210 
	#EPD_MAGIC
 4

	)

211 
	#EPD_PHONENUM
 5

	)

213 (*
	tnŸify_func
Ë
	t__P
((*, ));

214 (*
	t¥öãr_func
Ë
	t__P
((*, *, ...));

216 
	snŸifõr
 {

217 
nŸifõr
 *
√xt
;

218 
nŸify_func
 
func
;

219 *
¨g
;

226 
gŸ_sigãrm
;

227 
hungup
;

228 
ifunô
;

229 
i‚ame
[];

230 
ho°«me
[];

231 
u_ch¨
 
ouçackë_buf
[];

232 
devfd
;

233 
fd_µp
;

234 
pha£
;

235 
baud_øã
;

236 *
¥og«me
;

237 
ªdúe˘_°dîr
;

238 
≥î_auth«me
[];

239 
auth_d⁄e
[
NUM_PPP
];

240 
¥ivûeged
;

241 
√ed_hﬁdoff
;

242 **
s¸ùt_ív
;

243 
dëached
;

244 
GIDSET_TYPE
 
groups
[
NGROUPS_MAX
];

245 
ngroups
;

246 
µpd_°©s
 
lök_°©s
;

247 
lök_°©s_vÆid
;

248 
lök_c⁄√˘_time
;

249 
usög_±y
;

250 
log_to_fd
;

251 
boﬁ
 
log_deÁu…
;

252 *
no_µp_msg
;

253 vﬁ©ûê
°©us
;

254 
boﬁ
 
dev«m_fixed
;

255 
unsuc˚ss
;

256 
do_ˇŒback
;

257 
doög_ˇŒback
;

258 
îr‹_cou¡
;

259 
µp_dev«m
[
MAXPATHLEN
];

260 
ªmŸe_numbî
[
MAXNAMELEN
];

261 
µp_£ssi⁄_numbî
;

262 
fd_devnuŒ
;

264 
li°í_time
;

265 
boﬁ
 
doög_mu…ûök
;

266 
boﬁ
 
mu…ûök_ma°î
;

267 
boﬁ
 
bundÀ_eof
;

268 
boﬁ
 
bundÀ_ãrmö©ög
;

270 
nŸifõr
 *
pidch™ge
;

271 
nŸifõr
 *
pha£ch™ge
;

272 
nŸifõr
 *
exônŸify
;

273 
nŸifõr
 *
sigª˚ived
;

274 
nŸifõr
 *
ù_up_nŸifõr
;

275 
nŸifõr
 *
ù_down_nŸifõr
;

276 
nŸifõr
 *
ùv6_up_nŸifõr
;

277 
nŸifõr
 *
ùv6_down_nŸifõr
;

278 
nŸifõr
 *
auth_up_nŸifõr
;

279 
nŸifõr
 *
lök_down_nŸifõr
;

280 
nŸifõr
 *
f‹k_nŸifõr
;

283 
	#CALLBACK_DIALIN
 1

	)

284 
	#CALLBACK_DIALOUT
 2

	)

290 
debug
;

291 
kdebugÊag
;

292 
deÁu…_devi˚
;

293 
dev«m
[
MAXPATHLEN
];

294 
¸ts˘s
;

295 
°›_bôs
;

296 
boﬁ
 
modem
;

297 
ö•ìd
;

298 
u_öt32_t
 
√tmask
;

299 
boﬁ
 
lockÊag
;

300 
boﬁ
 
nodëach
;

301 #ifde‡
SYSTEMD


302 
boﬁ
 
up_sdnŸify
;

304 
boﬁ
 
updëach
;

305 
boﬁ
 
ma°î_dëach
;

306 *
öôülizî
;

307 *
c⁄√˘_s¸ùt
;

308 *
disc⁄√˘_s¸ùt
;

309 *
wñcomî
;

310 *
±ycomm™d
;

311 
maxc⁄√˘
;

312 
u£r
[
MAXNAMELEN
];

313 
∑sswd
[
MAXSECRETLEN
];

314 
boﬁ
 
auth_ªquúed
;

315 
boﬁ
 
≥rsi°
;

316 
boﬁ
 
u£logö
;

317 
boﬁ
 
£ssi⁄_mgmt
;

318 
our_«me
[
MAXNAMELEN
];

319 
ªmŸe_«me
[
MAXNAMELEN
];

320 
boﬁ
 
ex∂icô_ªmŸe
;

321 
boﬁ
 
dem™d
;

322 *
ù∑øm
;

323 
boﬁ
 
¸y±∑p
;

324 
idÀ_time_limô
;

325 
hﬁdoff
;

326 
boﬁ
 
hﬁdoff_•ecifõd
;

327 
boﬁ
 
nŸty
;

328 *
±y_sockë
;

329 *
ªc‹d_fûe
;

330 
boﬁ
 
sync_£rül
;

331 
maxÁû
;

332 
lök«me
[
MAXPATHLEN
];

333 
boﬁ
 
tu√_kî√l
;

334 
c⁄√˘_dñay
;

335 
max_d©a_øã
;

336 
ªq_unô
;

337 
ªq_i‚ame
[
MAXIFNAMELEN
];

338 
boﬁ
 
mu…ûök
;

339 
boﬁ
 
n€ndpoöt
;

340 *
bundÀ_«me
;

341 
boﬁ
 
dump_›ti⁄s
;

342 
boﬁ
 
dryrun
;

343 
chûd_waô
;

345 #ifde‡
USE_EAPTLS


346 *
¸l_dú
;

347 *
¸l_fûe
;

348 *
max_és_vîsi⁄
;

351 #ifde‡
MAXOCTETS


352 
maxo˘ës
;

353 
maxo˘ës_dú
;

358 
maxo˘ës_timeout
;

359 
	#PPP_OCTETS_DIRECTION_SUM
 0

	)

360 
	#PPP_OCTETS_DIRECTION_IN
 1

	)

361 
	#PPP_OCTETS_DIRECTION_OUT
 2

	)

362 
	#PPP_OCTETS_DIRECTION_MAXOVERAL
 3

	)

364 
	#PPP_OCTETS_DIRECTION_MAXSESSION
 4

	)

367 #ifde‡
PPP_FILTER


368 
bpf_¥ogøm
 
∑ss_fûãr
;

369 
bpf_¥ogøm
 
a˘ive_fûãr
;

372 #ifde‡
MSLANMAN


373 
boﬁ
 
ms_œnm™
;

378 
	#PAP_WITHPEER
 0x1

	)

379 
	#PAP_PEER
 0x2

	)

380 
	#CHAP_WITHPEER
 0x4

	)

381 
	#CHAP_PEER
 0x8

	)

382 
	#EAP_WITHPEER
 0x10

	)

383 
	#EAP_PEER
 0x20

	)

386 
	#CHAP_MD5_WITHPEER
 0x40

	)

387 
	#CHAP_MD5_PEER
 0x80

	)

388 
	#CHAP_MS_SHIFT
 8

	)

389 
	#CHAP_MS_WITHPEER
 0x100

	)

390 
	#CHAP_MS_PEER
 0x200

	)

391 
	#CHAP_MS2_WITHPEER
 0x400

	)

392 
	#CHAP_MS2_PEER
 0x800

	)

394 *
cuºít_›ti⁄
;

395 
¥ivûeged_›ti⁄
;

396 *
›ti⁄_sour˚
;

397 
›ti⁄_¥i‹ôy
;

402 
	#PHASE_DEAD
 0

	)

403 
	#PHASE_INITIALIZE
 1

	)

404 
	#PHASE_SERIALCONN
 2

	)

405 
	#PHASE_DORMANT
 3

	)

406 
	#PHASE_ESTABLISH
 4

	)

407 
	#PHASE_AUTHENTICATE
 5

	)

408 
	#PHASE_CALLBACK
 6

	)

409 
	#PHASE_NETWORK
 7

	)

410 
	#PHASE_RUNNING
 8

	)

411 
	#PHASE_TERMINATE
 9

	)

412 
	#PHASE_DISCONNECT
 10

	)

413 
	#PHASE_HOLDOFF
 11

	)

414 
	#PHASE_MASTER
 12

	)

420 
	s¥Ÿít
 {

421 
u_sh‹t
 
¥Ÿocﬁ
;

423 (*
öô
Ë
	`__P
((
unô
));

425 (*
öput
Ë
	`__P
((
unô
, 
u_ch¨
 *
pkt
, 
Àn
));

427 (*
¥Ÿªj
Ë
	`__P
((
unô
));

429 (*
lowîup
Ë
	`__P
((
unô
));

431 (*
lowîdown
Ë
	`__P
((
unô
));

433 (*
›í
Ë
	`__P
((
unô
));

435 (*
˛o£
Ë
	`__P
((
unô
, *
ªas⁄
));

437 (*
¥öçkt
Ë
	`__P
((
u_ch¨
 *
pkt
, 
Àn
, 
¥öãr_func
 
¥öãr
,

438 *
¨g
));

440 (*
d©aöput
Ë
	`__P
((
unô
, 
u_ch¨
 *
pkt
, 
Àn
));

441 
boﬁ
 
íabÀd_Êag
;

442 *
«me
;

443 *
d©a_«me
;

444 
›ti⁄_t
 *
›ti⁄s
;

446 (*
check_›ti⁄s
Ë
	`__P
(());

448 (*
dem™d_c⁄f
Ë
	`__P
((
unô
));

450 (*
a˘ive_pkt
Ë
	`__P
((
u_ch¨
 *
pkt
, 
Àn
));

454 
¥Ÿít
 *
¥Ÿocﬁs
[];

463 
	sch™√l
 {

465 
›ti⁄_t
 *
›ti⁄s
;

467 (*
¥o˚ss_exåa_›ti⁄s
Ë
	`__P
(());

469 (*
check_›ti⁄s
Ë
	`__P
(());

471 (*
c⁄√˘
Ë
	`__P
(());

473 (*
disc⁄√˘
Ë
	`__P
(());

475 (*
e°ablish_µp
Ë
	`__P
(());

477 (*
di£°ablish_µp
Ë
	`__P
(());

479 (*
£nd_c⁄fig
Ë
	`__P
((, 
u_öt32_t
, , ));

481 (*
ªcv_c⁄fig
Ë
	`__P
((, 
u_öt32_t
, , ));

483 (*
˛ónup
Ë
	`__P
(());

485 (*
˛o£
Ë
	`__P
(());

488 
ch™√l
 *
the_ch™√l
;

494 
	su£ªnv
 {

495 
u£ªnv
 *
ue_√xt
;

496 *
ue_vÆue
;

497 
boﬁ
 
ue_is£t
;

498 
boﬁ
 
ue_¥iv
;

499 c⁄° *
ue_sour˚
;

500 
ue_«me
[1];

503 
u£ªnv
 *
u£ªnv_li°
;

510 
£t_ifunô
 
	`__P
(());

511 
dëach
 
	`__P
(());

512 
dõ
 
	`__P
(());

513 
quô
 
	`__P
(());

514 
novm
 
	`__P
((*));

515 
timeout
 
	`__P
(((*
func
)(*), *
¨g
, 
s
, 
us
));

517 
u¡imeout
 
	`__P
(((*
func
)(*), *
¨g
));

519 
ªc‹d_chûd
 
	`__P
((, *, (*) (*), *, ));

520 
pid_t
 
ß„_f‹k
 
	`__P
((, , ));

521 
devi˚_s¸ùt
 
	`__P
((*
cmd
, 
ö
, 
out
, 
d⁄t_waô
));

523 
pid_t
 
run_¥ogøm
 
	`__P
((*
¥og
, **
¨gs
, 
mu°_exi°
,

524 (*
d⁄e
)(*), *
¨g
, 
waô
));

526 
ª›í_log
 
	`__P
(());

527 
¥öt_lök_°©s
 
	`__P
(());

528 
ª£t_lök_°©s
 
	`__P
(());

529 
upd©e_lök_°©s
 
	`__P
(());

530 
s¸ùt_£ãnv
 
	`__P
((*, *, ));

531 
s¸ùt_un£ãnv
 
	`__P
((*));

532 
√w_pha£
 
	`__P
(());

533 
add_nŸifõr
 
	`__P
((
nŸifõr
 **, 
nŸify_func
, *));

534 
ªmove_nŸifõr
 
	`__P
((
nŸifõr
 **, 
nŸify_func
, *));

535 
nŸify
 
	`__P
((
nŸifõr
 *, ));

536 
µp_£nd_c⁄fig
 
	`__P
((, , 
u_öt32_t
, , ));

537 
µp_ªcv_c⁄fig
 
	`__P
((, , 
u_öt32_t
, , ));

538 c⁄° *
¥Ÿocﬁ_«me
 
	`__P
(());

539 
ªmove_pidfûes
 
	`__P
(());

540 
lock_db
 
	`__P
(());

541 
u∆ock_db
 
	`__P
(());

544 
ây_öô
 
	`__P
(());

547 
log_∑ckë
 
	`__P
((
u_ch¨
 *, , *, ));

549 
¥öt_°rög
 
	`__P
((*, , 
¥öãr_func
, *));

551 
¶¥ötf
 
	`__P
((*, , *, ...));

552 
v¶¥ötf
 
	`__P
((*, , *, 
va_li°
));

553 
size_t
 
°æ˝y
 
	`__P
((*, const *, size_t));

554 
size_t
 
°æˇt
 
	`__P
((*, const *, size_t));

555 
dbglog
 
	`__P
((*, ...));

556 
öfo
 
	`__P
((*, ...));

557 
nŸi˚
 
	`__P
((*, ...));

558 
w¨n
 
	`__P
((*, ...));

559 
îr‹
 
	`__P
((*, ...));

560 
Áèl
 
	`__P
((*, ...));

561 
öô_¥_log
 
	`__P
((const *, ));

562 
¥_log
 
	`__P
((*, *, ...));

563 
íd_¥_log
 
	`__P
(());

564 
dump_∑ckë
 
	`__P
((c⁄° *, 
u_ch¨
 *, ));

566 
ssize_t
 
com∂ëe_ªad
 
	`__P
((, *, 
size_t
));

570 
lök_ªquúed
 
	`__P
(());

571 
°¨t_lök
 
	`__P
(());

572 
lök_ãrmö©ed
 
	`__P
(());

573 
lök_down
 
	`__P
(());

574 
uµî_œyîs_down
 
	`__P
(());

575 
lök_e°ablished
 
	`__P
(());

576 
°¨t_√tw‹ks
 
	`__P
(());

577 
c⁄töue_√tw‹ks
 
	`__P
(());

578 
≈_up
 
	`__P
((, ));

579 
≈_down
 
	`__P
((, ));

580 
≈_föished
 
	`__P
((, ));

581 
auth_≥î_Áû
 
	`__P
((, ));

583 
auth_≥î_suc˚ss
 
	`__P
((, , , *, ));

585 
auth_wôh≥î_Áû
 
	`__P
((, ));

587 
auth_wôh≥î_suc˚ss
 
	`__P
((, , ));

589 
auth_check_›ti⁄s
 
	`__P
(());

591 
auth_ª£t
 
	`__P
(());

592 
check_∑sswd
 
	`__P
((, *, , *, , **));

594 
gë_£¸ë
 
	`__P
((, *, *, *, *, ));

596 
gë_§p_£¸ë
 
	`__P
((
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
,

597 
am_£rvî
));

598 
auth_ù_addr
 
	`__P
((, 
u_öt32_t
));

600 
auth_numbî
 
	`__P
(());

601 
bad_ù_adrs
 
	`__P
((
u_öt32_t
));

605 
dem™d_c⁄f
 
	`__P
(());

606 
dem™d_block
 
	`__P
(());

607 
dem™d_unblock
 
	`__P
(());

608 
dem™d_disˇrd
 
	`__P
(());

609 
dem™d_ªxmô
 
	`__P
(());

610 
lo›_ch¨s
 
	`__P
((*, ));

611 
lo›_‰ame
 
	`__P
((*, ));

614 #ifde‡
HAVE_MULTILINK


615 
mp_check_›ti⁄s
 
	`__P
(());

616 
mp_joö_bundÀ
 
	`__P
(());

617 
mp_exô_bundÀ
 
	`__P
(());

618 
mp_bundÀ_ãrmö©ed
 
	`__P
(());

619 *
ïdisc_to_°r
 
	`__P
((
ïdisc
 *));

620 
°r_to_ïdisc
 
	`__P
((
ïdisc
 *, *));

622 
	#mp_bundÀ_ãrmö©ed
(Ë

	)

623 
	#mp_exô_bundÀ
(Ë

	)

624 
	#doög_mu…ûök
 0

	)

625 
	#mu…ûök_ma°î
 0

	)

629 
sys_öô
 
	`__P
(());

630 
sys_˛ónup
 
	`__P
(());

631 
sys_check_›ti⁄s
 
	`__P
(());

632 
sys_˛o£
 
	`__P
(());

633 
µp_avaûabÀ
 
	`__P
(());

634 
gë_±y
 
	`__P
((*, *, *, ));

635 
›í_µp_lo›back
 
	`__P
(());

636 
ây_e°ablish_µp
 
	`__P
(());

637 
ây_di£°ablish_µp
 
	`__P
(());

638 
gíîic_di£°ablish_µp
 
	`__P
((
dev_fd
));

639 
gíîic_e°ablish_µp
 
	`__P
((
dev_fd
));

640 
make_√w_bundÀ
 
	`__P
((, , , ));

641 
bundÀ_©èch
 
	`__P
(());

642 
cfg_bundÀ
 
	`__P
((, , , ));

643 
de°roy_bundÀ
 
	`__P
(());

644 
˛ón_check
 
	`__P
(());

645 
£t_up_ây
 
	`__P
((, ));

646 
ª°‹e_ây
 
	`__P
(());

647 
£tdå
 
	`__P
((, ));

648 
ouçut
 
	`__P
((, 
u_ch¨
 *, ));

649 
waô_öput
 
	`__P
((
timevÆ
 *));

651 
add_fd
 
	`__P
(());

652 
ªmove_fd
 
	`__P
(());

653 
ªad_∑ckë
 
	`__P
((
u_ch¨
 *));

654 
gë_lo›_ouçut
 
	`__P
(());

655 
ây_£nd_c⁄fig
 
	`__P
((, 
u_öt32_t
, , ));

657 
ây_£t_xaccm
 
	`__P
((
ext_accm
));

659 
ây_ªcv_c⁄fig
 
	`__P
((, 
u_öt32_t
, , ));

661 
c˝_ã°
 
	`__P
((, 
u_ch¨
 *, , ));

663 
c˝_Êags_£t
 
	`__P
((, , ));

665 
c˝_Áèl_îr‹
 
	`__P
(());

666 
gë_idÀ_time
 
	`__P
((, 
µp_idÀ
 *));

668 
gë_µp_°©s
 
	`__P
((, 
µpd_°©s
 *));

670 
√tif_£t_mtu
 
	`__P
((, ));

671 
√tif_gë_mtu
 
	`__P
(());

672 
sifvjcomp
 
	`__P
((, , , ));

674 
sifup
 
	`__P
(());

675 
si‚pmode
 
	`__P
((
u
, 
¥Ÿo
, 
NPmode
 
mode
));

677 
sifdown
 
	`__P
(());

678 
siÁddr
 
	`__P
((, 
u_öt32_t
, u_int32_t, u_int32_t));

680 
ciÁddr
 
	`__P
((, 
u_öt32_t
, u_int32_t));

682 #ifde‡
INET6


683 
	`ëhî_to_eui64
(
eui64_t
 *
p_eui64
);

684 
sif6up
 
	`__P
(());

685 
sif6down
 
	`__P
(());

686 
sif6addr
 
	`__P
((, 
eui64_t
,Éui64_t));

688 
cif6addr
 
	`__P
((, 
eui64_t
,Éui64_t));

691 
sifdeÁu…rouã
 
	`__P
((, 
u_öt32_t
, u_int32_t));

693 
cifdeÁu…rouã
 
	`__P
((, 
u_öt32_t
, u_int32_t));

695 #ifde‡
INET6


696 
sif6deÁu…rouã
 
	`__P
((, 
eui64_t
,Éui64_t));

698 
cif6deÁu…rouã
 
	`__P
((, 
eui64_t
,Éui64_t));

701 
siÂroxy¨p
 
	`__P
((, 
u_öt32_t
));

703 
ciÂroxy¨p
 
	`__P
((, 
u_öt32_t
));

705 
u_öt32_t
 
GëMask
 
	`__P
((u_int32_t));

706 
lock
 
	`__P
((*));

707 
ªlock
 
	`__P
(());

708 
u∆ock
 
	`__P
(());

709 
logwtmp
 
	`__P
((const *, const *, const *));

711 
gë_ho°_£ed
 
	`__P
(());

712 
have_rouã_to
 
	`__P
((
u_öt32_t
));

713 #ifde‡
PPP_FILTER


714 
£t_fûãrs
 
	`__P
((
bpf_¥ogøm
 *
∑ss
, bpf_¥ogøm *
a˘ive
));

717 #ifde‡
IPX_CHANGE


718 
sùxÁddr
 
	`__P
((, , *));

719 
cùxÁddr
 
	`__P
(());

721 
gë_if_hwaddr
 
	`__P
((
u_ch¨
 *
addr
, *
«me
));

722 *
gë_fú°_ëhî√t
 
	`__P
(());

723 
gë_time
 
	`__P
((
timevÆ
 *));

727 
£tùaddr
 
	`__P
((*, **, ));

728 
∑r£_¨gs
 
	`__P
((
¨gc
, **
¨gv
));

730 
›ti⁄s_‰om_fûe
 
	`__P
((*
fûíame
, 
mu°_exi°
, 
check_¥Ÿ
,

731 
¥ivûeged
));

733 
›ti⁄s_‰om_u£r
 
	`__P
(());

734 
›ti⁄s_f‹_ây
 
	`__P
(());

735 
›ti⁄s_‰om_li°
 
	`__P
((
w‹dli°
 *, 
¥ivûeged
));

737 
gëw‹d
 
	`__P
((
FILE
 *
f
, *
w‹d
, *
√wlöï
, *
fûíame
));

739 
›ti⁄_îr‹
 
	`__P
((*
fmt
, ...));

741 
öt_›ti⁄
 
	`__P
((*, *));

743 
add_›ti⁄s
 
	`__P
((
›ti⁄_t
 *));

744 
check_›ti⁄s
 
	`__P
(());

745 
ovîride_vÆue
 
	`__P
((const *, , const *));

747 
¥öt_›ti⁄s
 
	`__P
((
¥öãr_func
, *));

750 
∑r£_dŸãd_ù
 
	`__P
((*, 
u_öt32_t
 *));

755 (*
√w_pha£_hook
Ë
	`__P
(());

756 (*
idÀ_time_hook
Ë
	`__P
((
µp_idÀ
 *));

757 (*
hﬁdoff_hook
Ë
	`__P
(());

758 (*
∑p_check_hook
Ë
	`__P
(());

759 (*
∑p_auth_hook
Ë
	`__P
((*
u£r
, *
∑sswd
, **
msgp
,

760 
w‹dli°
 **
∑ddrs
,

761 
w‹dli°
 **
p›ts
));

762 (*
∑p_logout_hook
Ë
	`__P
(());

763 (*
∑p_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
));

764 (*
Ælowed_addªss_hook
Ë
	`__P
((
u_öt32_t
 
addr
));

765 (*
ù_up_hook
Ë
	`__P
(());

766 (*
ù_down_hook
Ë
	`__P
(());

767 (*
ù_choo£_hook
Ë
	`__P
((
u_öt32_t
 *));

768 (*
ùv6_up_hook
Ë
	`__P
(());

769 (*
ùv6_down_hook
Ë
	`__P
(());

771 (*
ch≠_check_hook
Ë
	`__P
(());

772 (*
ch≠_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
));

773 (*
mu…ûök_joö_hook
Ë
	`__P
(());

775 #ifde‡
USE_EAPTLS


776 (*
ó±ls_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
));

780 (*
¢o›_ªcv_hook
Ë
	`__P
((*
p
, 
Àn
));

781 (*
¢o›_£nd_hook
Ë
	`__P
((*
p
, 
Àn
));

789 
	#GETCHAR
(
c
, 
˝
) { \

790 (
c
Ë*(
˝
)++; \

791 
	}

	)
}

792 
	#PUTCHAR
(
c
, 
˝
) { \

793 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

794 }

	)

797 
	#GETSHORT
(
s
, 
˝
) { \

798 (
s
Ë*(
˝
)++ << 8; \

799 (
s
Ë|*(
˝
)++; \

800 }

	)

801 
	#PUTSHORT
(
s
, 
˝
) { \

802 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

803 *(
˝
)++ = (
u_ch¨
Ë(
s
); \

804 }

	)

806 
	#GETLONG
(
l
, 
˝
) { \

807 (
l
Ë*(
˝
)++ << 8; \

808 (
l
Ë|*(
˝
)++; (l) <<= 8; \

809 (
l
Ë|*(
˝
)++; (l) <<= 8; \

810 (
l
Ë|*(
˝
)++; \

811 }

	)

812 
	#PUTLONG
(
l
, 
˝
) { \

813 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

814 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

815 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

816 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

817 }

	)

819 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

820 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

826 
	#TIMEOUT
(
r
, 
f
, 
t
Ë
	`timeout
(‘), (f), (t), 0)

	)

827 
	#UNTIMEOUT
(
r
, 
f
Ë
	`u¡imeout
(‘), (f))

	)

829 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`mem˝y
(d, s,Ü)

	)

830 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

831 
	#BCMP
(
s1
, 
s2
, 
l
Ë
	`memcmp
(s1, s2,Ü)

	)

833 
	#PRINTMSG
(
m
, 
l
Ë{ 
	`öfo
("RemŸêmesßge: %0.*v",Ü, m); }

	)

838 
	#MAKEHEADER
(
p
, 
t
) { \

839 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

840 
	`PUTCHAR
(
PPP_UI
, 
p
); \

841 
	`PUTSHORT
(
t
, 
p
); }

	)

846 
	#EXIT_OK
 0

	)

847 
	#EXIT_FATAL_ERROR
 1

	)

848 
	#EXIT_OPTION_ERROR
 2

	)

849 
	#EXIT_NOT_ROOT
 3

	)

850 
	#EXIT_NO_KERNEL_SUPPORT
 4

	)

851 
	#EXIT_USER_REQUEST
 5

	)

852 
	#EXIT_LOCK_FAILED
 6

	)

853 
	#EXIT_OPEN_FAILED
 7

	)

854 
	#EXIT_CONNECT_FAILED
 8

	)

855 
	#EXIT_PTYCMD_FAILED
 9

	)

856 
	#EXIT_NEGOTIATION_FAILED
 10

	)

857 
	#EXIT_PEER_AUTH_FAILED
 11

	)

858 
	#EXIT_IDLE_TIMEOUT
 12

	)

859 
	#EXIT_CONNECT_TIME
 13

	)

860 
	#EXIT_CALLBACK
 14

	)

861 
	#EXIT_PEER_DEAD
 15

	)

862 
	#EXIT_HANGUP
 16

	)

863 
	#EXIT_LOOPBACK
 17

	)

864 
	#EXIT_INIT_FAILED
 18

	)

865 
	#EXIT_AUTH_TOPEER_FAILED
 19

	)

866 #ifde‡
MAXOCTETS


867 
	#EXIT_TRAFFIC_LIMIT
 20

	)

869 
	#EXIT_CNID_AUTH_FAILED
 21

	)

875 #ifde‡
DEBUGALL


876 
	#DEBUGMAIN
 1

	)

877 
	#DEBUGFSM
 1

	)

878 
	#DEBUGLCP
 1

	)

879 
	#DEBUGIPCP
 1

	)

880 
	#DEBUGIPV6CP
 1

	)

881 
	#DEBUGUPAP
 1

	)

882 
	#DEBUGCHAP
 1

	)

885 #i‚de‡
LOG_PPP


886 #i‡
deföed
(
DEBUGMAIN
Ë|| deföed(
DEBUGFSM
Ë|| deföed(
DEBUGSYS
) \

887 || 
deföed
(
DEBUGLCP
Ë|| deföed(
DEBUGIPCP
Ë|| deföed(
DEBUGUPAP
) \

888 || 
deföed
(
DEBUGCHAP
Ë|| deföed(
DEBUG
Ë|| 
	$deföed
(
DEBUGIPV6CP
)

889 
	#LOG_PPP
 
LOG_LOCAL2


	)

891 
	#LOG_PPP
 
LOG_DAEMON


	)

895 #ifde‡
DEBUGMAIN


896 
	#MAINDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

898 
	#MAINDEBUG
(
x
)

	)

901 #ifde‡
DEBUGSYS


902 
	#SYSDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

904 
	#SYSDEBUG
(
x
)

	)

907 #ifde‡
DEBUGFSM


908 
	#FSMDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

910 
	#FSMDEBUG
(
x
)

	)

913 #ifde‡
DEBUGLCP


914 
	#LCPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

916 
	#LCPDEBUG
(
x
)

	)

919 #ifde‡
DEBUGIPCP


920 
	#IPCPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

922 
	#IPCPDEBUG
(
x
)

	)

925 #ifde‡
DEBUGIPV6CP


926 
	#IPV6CPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

928 
	#IPV6CPDEBUG
(
x
)

	)

931 #ifde‡
DEBUGUPAP


932 
	#UPAPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

934 
	#UPAPDEBUG
(
x
)

	)

937 #ifde‡
DEBUGCHAP


938 
	#CHAPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

940 
	#CHAPDEBUG
(
x
)

	)

943 #ifde‡
DEBUGIPXCP


944 
	#IPXCPDEBUG
(
x
Ëi‡(
debug
Ë
dbglog
 
	)
x

946 
	#IPXCPDEBUG
(
x
)

	)

949 #i‚de‡
SIGTYPE


950 #i‡
	`deföed
(
sun
Ë|| deföed(
SYSV
Ë|| deföed(
POSIX_SOURCE
)

951 
	#SIGTYPE
 

	)

953 
	#SIGTYPE
 

	)

957 #i‚de‡
MIN


958 
	#MIN
(
a
, 
b
Ë(◊Ë< (b)? (a): (b))

	)

960 #i‚de‡
MAX


961 
	#MAX
(
a
, 
b
Ë(◊Ë> (b)? (a): (b))

	)

964 #i‚de‡
off£tof


965 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë&(—y≥ *)0)->membî)

	)

	@pppd/session.c

71 
	~<°dio.h
>

72 
	~<°dlib.h
>

73 
	~<°rög.h
>

74 
	~<pwd.h
>

75 
	~<¸y±.h
>

76 #ifde‡
HAS_SHADOW


77 
	~<shadow.h
>

79 
	~<time.h
>

80 
	~<utmp.h
>

81 
	~<f˙é.h
>

82 
	~<uni°d.h
>

83 
	~"µpd.h
"

84 
	~"£ssi⁄.h
"

86 #ifde‡
USE_PAM


87 
	~<£curôy/∑m_≠∂.h
>

90 
	#SET_MSG
(
v¨
, 
msg
Ëi‡(v¨ !
NULL
Ë{ v¨[0] = msg; }

	)

91 
	#COPY_STRING
(
s
Ë((sË? 
	`°rdup
(sË: 
NULL
)

	)

93 
	#SUCCESS_MSG
 "Sessi⁄ sèπed suc˚ssfuŒy"

	)

94 
	#ABORT_MSG
 "Sessi⁄ c™'àbê°¨ãd wôhouà®u£∫ame"

	)

95 
	#SERVICE_NAME
 "µp"

	)

97 
	#SESSION_FAILED
 0

	)

98 
	#SESSION_OK
 1

	)

101 
boﬁ
 
	glogged_ö
 = 0;

103 #ifde‡
USE_PAM


108 c⁄° *
	gPAM_u£∫ame
;

109 c⁄° *
	gPAM_∑ssw‹d
;

110 
	gPAM_£ssi⁄
 = 0;

111 
∑m_h™dÀ_t
 *
	g∑mh
 = 
NULL
;

118 
c⁄vîßti⁄
 (
num_msg
,

119 #i‚de‡
SOL2


122 
∑m_mesßge
 **
msg
,

123 
∑m_ª•⁄£
 **
ª•
, *
≠pd©a_±r
)

125 
	gª∂õs
 = 0;

126 
∑m_ª•⁄£
 *
	gª∂y
 = 
NULL
;

128 
	gª∂y
 = 
mÆloc
((
∑m_ª•⁄£
Ë* 
num_msg
);

129 i‡(!
	gª∂y
Ë 
	gPAM_CONV_ERR
;

131 
	gª∂õs
 = 0;Ñïlõ†< 
	gnum_msg
;Ñeplies++) {

132 
	gmsg
[
ª∂õs
]->
	gmsg_°yÀ
) {

133 
	gPAM_PROMPT_ECHO_ON
:

134 
ª∂y
[
ª∂õs
].
ª•_ªtcode
 = 
PAM_SUCCESS
;

135 
	gª∂y
[
ª∂õs
].
	gª•
 = 
COPY_STRING
(
PAM_u£∫ame
);

138 
	gPAM_PROMPT_ECHO_OFF
:

139 
ª∂y
[
ª∂õs
].
ª•_ªtcode
 = 
PAM_SUCCESS
;

140 
	gª∂y
[
ª∂õs
].
	gª•
 = 
COPY_STRING
(
PAM_∑ssw‹d
);

143 
	gPAM_TEXT_INFO
:

145 
PAM_ERROR_MSG
:

147 
ª∂y
[
ª∂õs
].
ª•_ªtcode
 = 
PAM_SUCCESS
;

148 
	gª∂y
[
ª∂õs
].
	gª•
 = 
NULL
;

152 
‰ì
 (
ª∂y
);

153  
	gPAM_CONV_ERR
;

156 *
	gª•
 = 
ª∂y
;

157  
	gPAM_SUCCESS
;

160 
∑m_c⁄v
 
	g∑m_c⁄v_d©a
 = {

161 &
c⁄vîßti⁄
,

162 
NULL


167 
	$£ssi⁄_°¨t
(
Êags
, 
u£r
, 
∑sswd
, 
âyName
, 
msg
)

168 c⁄° 
Êags
;

169 c⁄° *
u£r
;

170 c⁄° *
∑sswd
;

171 c⁄° *
âyName
;

172 **
msg
;

174 #ifde‡
USE_PAM


175 
boﬁ
 
ok
 = 1;

176 c⁄° *
u§
;

177 
∑m_îr‹
;

178 
boﬁ
 
åy_£ssi⁄
 = 0;

180 
∑sswd
 *
pw
;

181 *
cbuf
;

182 #ifde‡
HAS_SHADOW


183 
•wd
 *spwd;

184 
•wd
 *
	`gë•«m
();

185 
now
 = 0;

189 
	`SET_MSG
(
msg
, 
SUCCESS_MSG
);

192 i‡(!(
SESS_ALL
 & 
Êags
)) {

193  
SESSION_OK
;

196 i‡(
u£r
 =
NULL
) {

197 
	`SET_MSG
(
msg
, 
ABORT_MSG
);

198  
SESSION_FAILED
;

201 #ifde‡
USE_PAM


204 i‡((
u§
 = 
	`°rchr
(
u£r
, '\\')Ë=
NULL
)

205 
u§
 = 
u£r
;

207 
u§
++;

209 
PAM_£ssi⁄
 = 0;

210 
PAM_u£∫ame
 = 
u§
;

211 
PAM_∑ssw‹d
 = 
∑sswd
;

213 
	`dbglog
("Inôülizög PAM (%dËf‹ u£∏%s", 
Êags
, 
u§
);

214 
∑m_îr‹
 = 
	`∑m_°¨t
 (
SERVICE_NAME
, 
u§
, &
∑m_c⁄v_d©a
, &
∑mh
);

215 
	`dbglog
("---> PAM INIT Resu… = %d", 
∑m_îr‹
);

216 
ok
 = (
∑m_îr‹
 =
PAM_SUCCESS
);

218 i‡(
ok
) {

219 
ok
 = (
	`∑m_£t_ôem
(
∑mh
, 
PAM_TTY
, 
âyName
Ë=
PAM_SUCCESS
) &&

220 (
	`∑m_£t_ôem
(
∑mh
, 
PAM_RHOST
, 
i‚ame
Ë=
PAM_SUCCESS
);

223 i‡(
ok
 && (
SESS_AUTH
 & 
Êags
)) {

224 
	`dbglog
("Attempting PAMáuthentication");

225 
∑m_îr‹
 = 
	`∑m_authítiˇã
 (
∑mh
, 
PAM_SILENT
);

226 i‡(
∑m_îr‹
 =
PAM_SUCCESS
) {

228 
	`dbglog
("PAM Authítiˇti⁄ OK f‹ %s", 
u£r
);

231 
ok
 = 0;

232 i‡(
∑m_îr‹
 =
PAM_USER_UNKNOWN
) {

233 
	`dbglog
("User unknown, failing PAMáuthentication");

234 
	`SET_MSG
(
msg
, "User unknown - cannotáuthenticate via PAM");

237 
	`dbglog
("PAM Authítiˇti⁄ faûed: %d: %s", 
∑m_îr‹
,

238 
	`∑m_°ªº‹
(
∑mh
, 
∑m_îr‹
));

239 
	`SET_MSG
(
msg
, (*Ë
	`∑m_°ªº‹
 (
∑mh
, 
∑m_îr‹
));

244 i‡(
ok
 && (
SESS_ACCT
 & 
Êags
)) {

245 
	`dbglog
("Attempting PAMáccount checks");

246 
∑m_îr‹
 = 
	`∑m_ac˘_mgmt
 (
∑mh
, 
PAM_SILENT
);

247 i‡(
∑m_îr‹
 =
PAM_SUCCESS
) {

252 
åy_£ssi⁄
 = 1;

253 
	`dbglog
("PAM Accou¡ OK f‹ %s", 
u£r
);

259 
åy_£ssi⁄
 = 0;

260 i‡(
∑m_îr‹
 =
PAM_USER_UNKNOWN
) {

266 
	`dbglog
("User unknown, ignoring PAMÑestrictions");

267 
	`SET_MSG
(
msg
, "User unknown - ignoring PAMÑestrictions");

270 
ok
 = 0;

271 
	`dbglog
("PAM Accou¡ check†Áûed: %d: %s", 
∑m_îr‹
,

272 
	`∑m_°ªº‹
(
∑mh
, 
∑m_îr‹
));

273 
	`SET_MSG
(
msg
, (*Ë
	`∑m_°ªº‹
 (
∑mh
, 
∑m_îr‹
));

278 i‡(
ok
 && 
åy_£ssi⁄
 && (
SESS_ACCT
 & 
Êags
)) {

280 
∑m_îr‹
 = 
	`∑m_›í_£ssi⁄
 (
∑mh
, 
PAM_SILENT
);

281 i‡(
∑m_îr‹
 =
PAM_SUCCESS
) {

282 
	`dbglog
("PAM Sessi⁄ o≥√d f‹ u£∏%s", 
u£r
);

283 
PAM_£ssi⁄
 = 1;

285 
	`dbglog
("PAM Sessi⁄ díõd f‹ u£∏%s", 
u£r
);

286 
	`SET_MSG
(
msg
, (*Ë
	`∑m_°ªº‹
 (
∑mh
, 
∑m_îr‹
));

287 
ok
 = 0;

292 
	`ª›í_log
();

295 i‡(!
ok
Ë 
SESSION_FAILED
;

304 
pw
 = 
NULL
;

305 i‡((
SESS_AUTH
 & 
Êags
)) {

306 
pw
 = 
	`gëpw«m
(
u£r
);

308 
	`ídpwít
();

313 i‡(
pw
 =
NULL
)

314  
SESSION_FAILED
;

316 #ifde‡
HAS_SHADOW


318 
•wd
 = 
	`gë•«m
(
u£r
);

319 
	`íd•ít
();

325 i‡(
•wd
 =
NULL
)

326  
SESSION_FAILED
;

335 
now
 = 
	`time
(
NULL
) / 86400L;

336 i‡((
•wd
->
•_expúe
 > 0 && 
now
 >= spwd->sp_expire)

337 || ((
•wd
->
•_max
 >= 0 && spwd->sp_max < 10000)

338 && 
•wd
->
•_l°chg
 >= 0

339 && 
now
 >
•wd
->
•_l°chg
 + spwd->
•_max
)) {

340 
	`w¨n
("Passw‹d f‹ %†ha†expúed", 
u£r
);

341  
SESSION_FAILED
;

345 
pw
->
pw_∑sswd
 = 
•wd
->
•_pwdp
;

352 i‡(
pw
->
pw_∑sswd
 =
NULL
 || 
	`°æí
(pw->pw_passwd) < 2)

353  
SESSION_FAILED
;

354 
cbuf
 = 
	`¸y±
(
∑sswd
, 
pw
->
pw_∑sswd
);

355 i‡(!
cbuf
 || 
	`°rcmp
(cbuf, 
pw
->
pw_∑sswd
) != 0)

356  
SESSION_FAILED
;

365 i‡(
SESS_ACCT
 & 
Êags
) {

366 i‡(
	`°∫cmp
(
âyName
, "/dev/", 5) == 0)

367 
âyName
 += 5;

368 
	`logwtmp
(
âyName
, 
u£r
, 
i‚ame
);

369 
logged_ö
 = 1;

371 #i‡
	`deföed
(
_PATH_LASTLOG
Ë&& !deföed(
USE_PAM
)

377 i‡(
pw
 !
NULL
) {

378 
œ°log
 
Œ
;

379 
fd
;

380 
time_t
 
äow
;

382 i‡((
fd
 = 
	`›í
(
_PATH_LASTLOG
, 
O_RDWR
, 0)) >= 0) {

383 ()
	`l£ek
(
fd
, (
off_t
)(
pw
->
pw_uid
 * (
Œ
)), 
SEEK_SET
);

384 
	`mem£t
((*)&
Œ
, 0, (ll));

385 ()
	`time
(&
äow
);

386 
Œ
.
Œ_time
 = 
äow
;

387 
	`°æ˝y
(
Œ
.
Œ_löe
, 
âyName
, (ll.ll_line));

388 
	`°æ˝y
(
Œ
.
Œ_ho°
, 
i‚ame
, (ll.ll_host));

389 ()
	`wrôe
(
fd
, (*)&
Œ
, (ll));

390 ()
	`˛o£
(
fd
);

394 
	`öfo
("u£∏%†logged i¿⁄Åty %†öt‡%s", 
u£r
, 
âyName
, 
i‚ame
);

397  
SESSION_OK
;

398 
	}
}

404 
	$£ssi⁄_íd
(c⁄° * 
âyName
)

406 #ifde‡
USE_PAM


407 
∑m_îr‹
 = 
PAM_SUCCESS
;

409 i‡(
∑mh
 !
NULL
) {

410 i‡(
PAM_£ssi⁄
Ë
∑m_îr‹
 = 
	`∑m_˛o£_£ssi⁄
 (
∑mh
, 
PAM_SILENT
);

411 
PAM_£ssi⁄
 = 0;

412 
	`∑m_íd
 (
∑mh
, 
∑m_îr‹
);

413 
∑mh
 = 
NULL
;

415 
	`ª›í_log
();

418 i‡(
logged_ö
) {

419 i‡(
	`°∫cmp
(
âyName
, "/dev/", 5) == 0)

420 
âyName
 += 5;

421 
	`logwtmp
(
âyName
, "", "");

422 
logged_ö
 = 0;

424 
	}
}

	@pppd/session.h

31 #i‚de‡
__SESSION_H


32 
	#__SESSION_H


	)

34 
	#SESS_AUTH
 1

	)

35 
	#SESS_ACCT
 2

	)

38 
	#SESS_ALL
 (
SESS_AUTH
 | 
SESS_ACCT
)

	)

67 
£ssi⁄_°¨t
(c⁄° 
Êags
, c⁄° * 
u£r
, c⁄° * 
∑sswd
, c⁄° * 
ây
, ** 
msg
);

70 
	#£ssi⁄_auth
(
u£r
, 
∑ss
, 
ây
, 
msg
) \

71 
	`£ssi⁄_°¨t
(
SESS_AUTH
, 
u£r
, 
∑ss
, 
ây
, 
msg
)

	)

73 
	#£ssi⁄_check
(
u£r
, 
∑ss
, 
ây
, 
msg
) \

74 
	`£ssi⁄_°¨t
(
SESS_ACCT
, 
u£r
, 
∑ss
, 
ây
, 
msg
)

	)

76 
	#£ssi⁄_fuŒ
(
u£r
, 
∑ss
, 
ây
, 
msg
) \

77 
	`£ssi⁄_°¨t
(
SESS_ALL
, 
u£r
, 
∑ss
, 
ây
, 
msg
)

	)

89 
£ssi⁄_íd
(c⁄° * 
ây
);

	@pppd/sha1.c

19 
	~<°rög.h
>

20 
	~<time.h
>

21 
	~<√töë/ö.h
>

22 
	~<√t/µp_defs.h
>

23 
	~"sha1.h
"

26 
SHA1_Tønsf‹m
(
u_öt32_t
[5], const [64]);

28 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

32 
	#blk0
(
i
Ë(
block
->
l
[i] = 
	`ht⁄l
(block->l[i]))

	)

33 
	#blk
(
i
Ë(
block
->
l
[i&15] = 
	`rﬁ
(block->l[(i+13)&15]^block->l[(i+8)&15] \

34 ^
block
->
l
[(
i
+2)&15]^block->l[i&15],1))

	)

37 
	#R0
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk0
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

38 
	#R1
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

39 
	#R2
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0x6ED9EBA1+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

40 
	#R3
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(((w|x)&y)|(w&x))+
	`blk
(i)+0x8F1BBCDC+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

41 
	#R4
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0xCA62C1D6+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

47 
	$SHA1_Tønsf‹m
(
u_öt32_t
 
°©e
[5], c⁄° 
buf„r
[64])

49 
u_öt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

51 
c
[64];

52 
u_öt32_t
 
l
[16];

53 } 
	tCHAR64LONG16
;

54 
CHAR64LONG16
 *
block
;

56 #ifde‡
SHA1HANDSOFF


57 
w‹k•a˚
[64];

58 
block
 = (
CHAR64LONG16
 *Ë
w‹k•a˚
;

59 
	`mem˝y
(
block
, 
buf„r
, 64);

61 
block
 = (
CHAR64LONG16
 *Ë
buf„r
;

64 
a
 = 
°©e
[0];

65 
b
 = 
°©e
[1];

66 
c
 = 
°©e
[2];

67 
d
 = 
°©e
[3];

68 
e
 = 
°©e
[4];

70 
	`R0
(
a
,
b
,
c
,
d
,
e
, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);

71 
	`R0
(
b
,
c
,
d
,
e
,
a
, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);

72 
	`R0
(
c
,
d
,
e
,
a
,
b
, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);

73 
	`R0
(
d
,
e
,
a
,
b
,
c
,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);

74 
	`R1
(
e
,
a
,
b
,
c
,
d
,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);

75 
	`R2
(
a
,
b
,
c
,
d
,
e
,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);

76 
	`R2
(
b
,
c
,
d
,
e
,
a
,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);

77 
	`R2
(
c
,
d
,
e
,
a
,
b
,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);

78 
	`R2
(
d
,
e
,
a
,
b
,
c
,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);

79 
	`R2
(
e
,
a
,
b
,
c
,
d
,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);

80 
	`R3
(
a
,
b
,
c
,
d
,
e
,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);

81 
	`R3
(
b
,
c
,
d
,
e
,
a
,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);

82 
	`R3
(
c
,
d
,
e
,
a
,
b
,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);

83 
	`R3
(
d
,
e
,
a
,
b
,
c
,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);

84 
	`R3
(
e
,
a
,
b
,
c
,
d
,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);

85 
	`R4
(
a
,
b
,
c
,
d
,
e
,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);

86 
	`R4
(
b
,
c
,
d
,
e
,
a
,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);

87 
	`R4
(
c
,
d
,
e
,
a
,
b
,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);

88 
	`R4
(
d
,
e
,
a
,
b
,
c
,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);

89 
	`R4
(
e
,
a
,
b
,
c
,
d
,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);

91 
°©e
[0] +
a
;

92 
°©e
[1] +
b
;

93 
°©e
[2] +
c
;

94 
°©e
[3] +
d
;

95 
°©e
[4] +
e
;

97 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

98 
	}
}

104 
	$SHA1_Inô
(
SHA1_CTX
 *
c⁄ãxt
)

107 
c⁄ãxt
->
°©e
[0] = 0x67452301;

108 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

109 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

110 
c⁄ãxt
->
°©e
[3] = 0x10325476;

111 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

112 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

113 
	}
}

119 
	$SHA1_Upd©e
(
SHA1_CTX
 *
c⁄ãxt
, c⁄° *
d©a
, 
Àn
)

121 
i
, 
j
;

123 
j
 = (
c⁄ãxt
->
cou¡
[0] >> 3) & 63;

124 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3) < (len << 3)) context->count[1]++;

125 
c⁄ãxt
->
cou¡
[1] +(
Àn
 >> 29);

126 
i
 = 64 - 
j
;

127 
Àn
 >
i
) {

128 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, 
i
);

129 
	`SHA1_Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

130 
d©a
 +
i
;

131 
Àn
 -
i
;

132 
i
 = 64;

133 
j
 = 0;

136 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, 
Àn
);

137 
	}
}

143 
	$SHA1_FöÆ
(
dige°
[20], 
SHA1_CTX
 *
c⁄ãxt
)

145 
u_öt32_t
 
i
, 
j
;

146 
föÆcou¡
[8];

148 
i
 = 0; i < 8; i++) {

149 
föÆcou¡
[
i
] = ()((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)]

150 >> ((3-(
i
 & 3)) * 8) ) & 255);

152 
	`SHA1_Upd©e
(
c⁄ãxt
, (*) "\200", 1);

153 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

154 
	`SHA1_Upd©e
(
c⁄ãxt
, (*) "\0", 1);

156 
	`SHA1_Upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

157 
i
 = 0; i < 20; i++) {

158 
dige°
[
i
] = ()

159 ((
c⁄ãxt
->
°©e
[
i
>>2] >> ((3-(i & 3)) * 8) ) & 255);

162 
i
 = 
j
 = 0;

163 
	`mem£t
(
c⁄ãxt
->
buf„r
, 0, 64);

164 
	`mem£t
(
c⁄ãxt
->
°©e
, 0, 20);

165 
	`mem£t
(
c⁄ãxt
->
cou¡
, 0, 8);

166 
	`mem£t
(&
föÆcou¡
, 0, 8);

167 #ifde‡
SHA1HANDSOFF


168 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

170 
	}
}

	@pppd/sha1.h

4 #ifde‡
OPENSSL


5 
	~<t_sha.h
>

6 
	#__SHA1_INCLUDE_


	)

9 #i‚de‡
__SHA1_INCLUDE_


11 #i‚de‡
SHA1_SIGNATURE_SIZE


12 #ifde‡
SHA_DIGESTSIZE


13 
	#SHA1_SIGNATURE_SIZE
 
SHA_DIGESTSIZE


	)

15 
	#SHA1_SIGNATURE_SIZE
 20

	)

20 
u_öt32_t
 
	m°©e
[5];

21 
u_öt32_t
 
	mcou¡
[2];

22 
	mbuf„r
[64];

23 } 
	tSHA1_CTX
;

25 
SHA1_Inô
(
SHA1_CTX
 *);

26 
SHA1_Upd©e
(
SHA1_CTX
 *, const *, );

27 
SHA1_FöÆ
([
SHA1_SIGNATURE_SIZE
], 
SHA1_CTX
 *);

29 
	#__SHA1_INCLUDE_


	)

	@pppd/spinlock.c

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~<°rög.h
>

30 
	~<f˙é.h
>

31 
	~<î∫o.h
>

32 
	~<sys/°©.h
>

33 
	~<time.h
>

34 
	~<sig«l.h
>

35 
	~"tdb.h
"

36 
	~"•ölock.h
"

38 
	#DEBUG


	)

40 #ifde‡
USE_SPINLOCKS


46 #i‡
deföed
(
SPARC_SPINLOCKS
)

48 
ölöe
 
	$__•ö_åylock
(
•ölock_t
 *
lock
)

50 
ªsu…
;

52 
asm
 volatile("ldstub [%1], %0"

53 : "Ù" (
ªsu…
)

54 : "r" (
lock
)

57  (
ªsu…
 =0Ë? 0 : 
EBUSY
;

58 
	}
}

60 
ölöe
 
	$__•ö_u∆ock
(
•ölock_t
 *
lock
)

62 
asm
 volatile("":::"memory");

63 *
lock
 = 0;

64 
	}
}

66 
ölöe
 
	$__•ö_lock_öô
(
•ölock_t
 *
lock
)

68 *
lock
 = 0;

69 
	}
}

71 
ölöe
 
	$__•ö_is_locked
(
•ölock_t
 *
lock
)

73  (*
lock
 != 0);

74 
	}
}

76 #ñi‡
deföed
(
POWERPC_SPINLOCKS
)

78 
ölöe
 
	$__•ö_åylock
(
•ölock_t
 *
lock
)

80 
ªsu…
;

82 
__asm__
 
	`__vﬁ©ûe__
(

83 "1:Üw¨x %0,0,%1\n\
 0,%0,0\n\
 %0,0\n\
- 2f\n\
 %0,1\n\
. %0,0,%1\n\
- 1b\n\
\n\
2:" : "=&r"(
ªsu…
)

92 : "r"(
lock
)

95  (
ªsu…
 =1Ë? 0 : 
EBUSY
;

96 
	}
}

98 
ölöe
 
	$__•ö_u∆ock
(
•ölock_t
 *
lock
)

100 
asm
 volatile("eieio":::"memory");

101 *
lock
 = 0;

102 
	}
}

104 
ölöe
 
	$__•ö_lock_öô
(
•ölock_t
 *
lock
)

106 *
lock
 = 0;

107 
	}
}

109 
ölöe
 
	$__•ö_is_locked
(
•ölock_t
 *
lock
)

111  (*
lock
 != 0);

112 
	}
}

114 #ñi‡
deföed
(
INTEL_SPINLOCKS
)

116 
ölöe
 
	$__•ö_åylock
(
•ölock_t
 *
lock
)

118 
ﬁdvÆ
;

120 
asm
 volatile("xchgl %0,%1"

121 : "Ù" (
ﬁdvÆ
), "=m" (*
lock
)

125  
ﬁdvÆ
 > 0 ? 0 : 
EBUSY
;

126 
	}
}

128 
ölöe
 
	$__•ö_u∆ock
(
•ölock_t
 *
lock
)

130 
asm
 volatile("":::"memory");

131 *
lock
 = 1;

132 
	}
}

134 
ölöe
 
	$__•ö_lock_öô
(
•ölock_t
 *
lock
)

136 *
lock
 = 1;

137 
	}
}

139 
ölöe
 
	$__•ö_is_locked
(
•ölock_t
 *
lock
)

141  (*
lock
 != 1);

142 
	}
}

144 #ñi‡
deföed
(
MIPS_SPINLOCKS
Ë&& deföed(
sgi
Ë&& (
_COMPILER_VERSION
 >= 730)

152 #ifde‡
STANDALONE


155 
	#ölöe
 
__ölöe


	)

160 
ölöe
 
	$__•ö_åylock
(
•ölock_t
 *
lock
)

162 
vÆ
;

163 
vÆ
 = 
	`__lock_ã°_™d_£t
(
lock
, 1);

164  
vÆ
 =0 ? 0 : 
EBUSY
;

165 
	}
}

167 
ölöe
 
	$__•ö_u∆ock
(
•ölock_t
 *
lock
)

169 
	`__lock_ªÀa£
(
lock
);

170 
	}
}

172 
ölöe
 
	$__•ö_lock_öô
(
•ölock_t
 *
lock
)

174 
	`__lock_ªÀa£
(
lock
);

175 
	}
}

178 
ölöe
 
	$__•ö_is_locked
(
•ölock_t
 *
lock
)

180 
vÆ
;

181 
vÆ
 = 
	`__add_™d_„tch
(
lock
, 0);

182  
vÆ
;

183 
	}
}

185 #ñi‡
deföed
(
MIPS_SPINLOCKS
)

187 
ölöe
 
	$lﬂd_löked
(
addr
)

189 
ªs
;

191 
__asm__
 
	`__vﬁ©ûe__
("ll\t%0,(%1)"

192 : "Ù" (
ªs
)

193 : "r" (
addr
));

195  
ªs
;

196 
	}
}

198 
ölöe
 
	$°‹e_c⁄dôi⁄Æ
(
addr
, 
vÆue
)

200 
ªs
;

202 
__asm__
 
	`__vﬁ©ûe__
("sc\t%0,(%2)"

203 : "Ù" (
ªs
)

204 : "0" (
vÆue
), "r" (
addr
));

205  
ªs
;

206 
	}
}

208 
ölöe
 
	$__•ö_åylock
(
•ölock_t
 *
lock
)

210 
mw
;

213 
mw
 = 
	`lﬂd_löked
(
lock
);

214 i‡(
mw
)

215  
EBUSY
;

216 } !
	`°‹e_c⁄dôi⁄Æ
(
lock
, 1));

218 
asm
 volatile("":::"memory");

221 
	}
}

223 
ölöe
 
	$__•ö_u∆ock
(
•ölock_t
 *
lock
)

225 
asm
 volatile("":::"memory");

226 *
lock
 = 0;

227 
	}
}

229 
ölöe
 
	$__•ö_lock_öô
(
•ölock_t
 *
lock
)

231 *
lock
 = 0;

232 
	}
}

234 
ölöe
 
	$__•ö_is_locked
(
•ölock_t
 *
lock
)

236  (*
lock
 != 0);

237 
	}
}

240 #îr‹ 
Nìd
 
to
 
im∂emít
 
•ölock
 
code
 
ö
 spölock.
c


247 
	$yõld_˝u
()

249 
time•ec
 
tm
;

251 #ifde‡
USE_SCHED_YIELD


252 
	`sched_yõld
();

255 
tm
.
tv_£c
 = 0;

256 
tm
.
tv_n£c
 = 2000000L + 1;

257 
	`«no¶ìp
(&
tm
, 
NULL
);

259 
	}
}

261 
	$this_is_smp
()

263 #i‡
	`deföed
(
HAVE_SYSCONF
Ë&& deföed(
SYSCONF_SC_NPROC_ONLN
)

264  (
	`sysc⁄f
(
_SC_NPROC_ONLN
) > 1) ? 1 : 0;

268 
	}
}

274 
	gsmp_machöe
 = 0;

276 
ölöe
 
	$__•ö_lock
(
•ölock_t
 *
lock
)

278 
¡rõs
 = 0;

280 
	`__•ö_åylock
(
lock
)) {

281 
	`__•ö_is_locked
(
lock
)) {

282 i‡(
smp_machöe
 && 
¡rõs
++ < 
MAX_BUSY_LOOPS
)

284 
	`yõld_˝u
();

287 
	}
}

289 
	$__ªad_lock
(
tdb_rwlock_t
 *
rwlock
)

291 
¡rõs
 = 0;

294 
	`__•ö_lock
(&
rwlock
->
lock
);

296 i‡(!(
rwlock
->
cou¡
 & 
RWLOCK_BIAS
)) {

297 
rwlock
->
cou¡
++;

298 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

302 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

304 
rwlock
->
cou¡
 & 
RWLOCK_BIAS
) {

305 i‡(
smp_machöe
 && 
¡rõs
++ < 
MAX_BUSY_LOOPS
)

307 
	`yõld_˝u
();

310 
	}
}

312 
	$__wrôe_lock
(
tdb_rwlock_t
 *
rwlock
)

314 
¡rõs
 = 0;

317 
	`__•ö_lock
(&
rwlock
->
lock
);

319 i‡(
rwlock
->
cou¡
 == 0) {

320 
rwlock
->
cou¡
 |
RWLOCK_BIAS
;

321 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

325 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

327 
rwlock
->
cou¡
 != 0) {

328 i‡(
smp_machöe
 && 
¡rõs
++ < 
MAX_BUSY_LOOPS
)

330 
	`yõld_˝u
();

333 
	}
}

335 
	$__wrôe_u∆ock
(
tdb_rwlock_t
 *
rwlock
)

337 
	`__•ö_lock
(&
rwlock
->
lock
);

339 #ifde‡
DEBUG


340 i‡(!(
rwlock
->
cou¡
 & 
RWLOCK_BIAS
))

341 
	`Ârötf
(
°dîr
, "bug: write_unlock\n");

344 
rwlock
->
cou¡
 &~
RWLOCK_BIAS
;

345 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

346 
	}
}

348 
	$__ªad_u∆ock
(
tdb_rwlock_t
 *
rwlock
)

350 
	`__•ö_lock
(&
rwlock
->
lock
);

352 #ifde‡
DEBUG


353 i‡(!
rwlock
->
cou¡
)

354 
	`Ârötf
(
°dîr
, "bug:Ñead_unlock\n");

356 i‡(
rwlock
->
cou¡
 & 
RWLOCK_BIAS
)

357 
	`Ârötf
(
°dîr
, "bug:Ñead_unlock\n");

360 
rwlock
->
cou¡
--;

361 
	`__•ö_u∆ock
(&
rwlock
->
lock
);

362 
	}
}

367 
	$tdb_•ölock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
)

369 
tdb_rwlock_t
 *
rwlocks
;

371 i‡(!
tdb
->
m≠_±r
)  -1;

372 
rwlocks
 = (
tdb_rwlock_t
 *)((*)
tdb
->
m≠_±r
 +Ådb->
hódî
.rwlocks);

374 
rw_ty≥
) {

375 
F_RDLCK
:

376 
	`__ªad_lock
(&
rwlocks
[
li°
+1]);

379 
F_WRLCK
:

380 
	`__wrôe_lock
(&
rwlocks
[
li°
+1]);

384  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

387 
	}
}

390 
	$tdb_•öu∆ock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
)

392 
tdb_rwlock_t
 *
rwlocks
;

394 i‡(!
tdb
->
m≠_±r
)  -1;

395 
rwlocks
 = (
tdb_rwlock_t
 *)((*)
tdb
->
m≠_±r
 +Ådb->
hódî
.rwlocks);

397 
rw_ty≥
) {

398 
F_RDLCK
:

399 
	`__ªad_u∆ock
(&
rwlocks
[
li°
+1]);

402 
F_WRLCK
:

403 
	`__wrôe_u∆ock
(&
rwlocks
[
li°
+1]);

407  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

411 
	}
}

413 
	$tdb_¸óã_rwlocks
(
fd
, 
hash_size
)

415 
size
, 
i
;

416 
tdb_rwlock_t
 *
rwlocks
;

418 
size
 = 
	`TDB_SPINLOCK_SIZE
(
hash_size
);

419 
rwlocks
 = 
	`mÆloc
(
size
);

420 i‡(!
rwlocks
)

423 
i
 = 0; i < 
hash_size
+1; i++) {

424 
	`__•ö_lock_öô
(&
rwlocks
[
i
].
lock
);

425 
rwlocks
[
i
].
cou¡
 = 0;

429 i‡(
	`wrôe
(
fd
, 
rwlocks
, 
size
) != size) {

430 
	`‰ì
(
rwlocks
);

433 
smp_machöe
 = 
	`this_is_smp
();

434 
	`‰ì
(
rwlocks
);

436 
	}
}

438 
	$tdb_˛ór_•ölocks
(
TDB_CONTEXT
 *
tdb
)

440 
tdb_rwlock_t
 *
rwlocks
;

441 
i
;

443 i‡(
tdb
->
hódî
.
rwlocks
 == 0)  0;

444 i‡(!
tdb
->
m≠_±r
)  -1;

447 
rwlocks
 = (
tdb_rwlock_t
 *)((*)
tdb
->
m≠_±r
 +Ådb->
hódî
.rwlocks);

448 
i
 = 0; i < 
tdb
->
hódî
.
hash_size
+1; i++) {

449 
	`__•ö_lock_öô
(&
rwlocks
[
i
].
lock
);

450 
rwlocks
[
i
].
cou¡
 = 0;

453 
	}
}

455 
	$tdb_¸óã_rwlocks
(
fd
, 
hash_size
Ë{  0; 
	}
}

456 
	$tdb_•ölock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
Ë{  -1; 
	}
}

457 
	$tdb_•öu∆ock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
Ë{  -1; 
	}
}

460 
	$tdb_˛ór_•ölocks
(
TDB_CONTEXT
 *
tdb
)

462 
tdb_off
 
off
 = (tdb_off)((*)&
tdb
->
hódî
.
rwlocks


463 - (*)&
tdb
->
hódî
);

465 
tdb
->
hódî
.
rwlocks
 = 0;

466 i‡(
	`l£ek
(
tdb
->
fd
, 
off
, 
SEEK_SET
) != off

467 || 
	`wrôe
(
tdb
->
fd
, (*)&tdb->
hódî
.
rwlocks
,

468 (
tdb
->
hódî
.
rwlocks
))

469 !(
tdb
->
hódî
.
rwlocks
))

472 
	}
}

	@pppd/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~"tdb.h
"

10 #ifde‡
USE_SPINLOCKS


12 
	#RWLOCK_BIAS
 0x1000UL

	)

15 
	#MAX_BUSY_LOOPS
 1000

	)

16 #unde‡
USE_SCHED_YIELD


20 #i‡
deföed
(
SPARC_SPINLOCKS
)

21 vﬁ©ûê
	t•ölock_t
;

22 #ñi‡
deföed
(
POWERPC_SPINLOCKS
)

23 vﬁ©ûê
	t•ölock_t
;

24 #ñi‡
deföed
(
INTEL_SPINLOCKS
)

25 vﬁ©ûê
	t•ölock_t
;

26 #ñi‡
deföed
(
MIPS_SPINLOCKS
)

27 vﬁ©ûê
	t•ölock_t
;

29 #îr‹ 
Nìd
 
to
 
im∂emít
 
•ölock
 
code
 
ö
 spölock.
h


33 
•ölock_t
 
	mlock
;

34 vﬁ©ûê
	mcou¡
;

35 } 
	ttdb_rwlock_t
;

37 
tdb_•ölock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
);

38 
tdb_•öu∆ock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
);

39 
tdb_¸óã_rwlocks
(
fd
, 
hash_size
);

40 
tdb_˛ór_•ölocks
(
TDB_CONTEXT
 *
tdb
);

42 
	#TDB_SPINLOCK_SIZE
(
hash_size
Ë(((hash_sizeË+ 1Ë* (
tdb_rwlock_t
))

	)

46 
	#tdb_¸óã_rwlocks
(
fd
, 
hash_size
Ë0

	)

47 
	#tdb_•ölock
(
tdb
, 
li°
, 
rw_ty≥
Ë(-1)

	)

48 
	#tdb_•öu∆ock
(
tdb
, 
li°
, 
rw_ty≥
Ë(-1)

	)

50 
tdb_•ölock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
);

51 
tdb_•öu∆ock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
rw_ty≥
);

52 
tdb_¸óã_rwlocks
(
fd
, 
hash_size
);

54 
tdb_˛ór_•ölocks
(
TDB_CONTEXT
 *
tdb
);

55 
	#TDB_SPINLOCK_SIZE
(
hash_size
Ë0

	)

	@pppd/srp-entry.c

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<uni°d.h
>

35 
	~<°rög.h
>

36 
	~<˘y≥.h
>

37 
	~<t_pwd.h
>

39 #i‚def 
SOL2


40 
	#gë∑s•hø£
 
gë∑ss


	)

43 
	#HAS_SPACE
 1

	)

44 
	#HAS_DQUOTE
 2

	)

45 
	#HAS_SQUOTE
 4

	)

46 
	#HAS_BACKSLASH
 8

	)

48 c⁄° 
u_ch¨
 
	gwkmodulus
[] = {

83 c⁄° *
	gmy«me
;

86 
	$ußge
()

88 (Ë
	`Ârötf
(
°dîr
, "Usage:\n\t%s [-i index] [clientname]\n",

89 
my«me
);

90 
	`exô
(1);

91 
	}
}

94 
	$maö
(
¨gc
, **
¨gv
)

96 
t_c⁄f
 *
tc
;

97 
t_c⁄„¡
 *
t˚¡
, 
myt˚
;

98 
t_pw
 
pwvÆ
;

99 *
«me
;

100 
≤ame
[256];

101 *
∑ss1
, *
∑ss2
;

102 
Êags
, 
idx
;

103 *
˝
;

104 
dñimô
;

105 
°rbuf
[
MAXB64PARAMLEN
];

106 
ß…buf
[
MAXB64SALTLEN
];

108 i‡((
my«me
 = *
¨gv
Ë=
NULL
)

109 
my«me
 = "srp-entry";

111 
¨gv
++;

113 
idx
 = -1;

114 i‡(*
¨gv
 !
NULL
 && 
	`°rcmp
(*argv, "-i") == 0) {

115 i‡(*++
¨gv
 =
NULL
)

116 
	`ußge
();

117 
idx
 = 
	`©oi
(*
¨gv
++);

120 
t˚¡
 = 
NULL
;

121 i‡(
idx
 !0 && (
tc
 = 
	`t_›íc⁄f
(
NULL
)) != NULL) {

122 i‡(
idx
 == -1)

123 
t˚¡
 = 
	`t_gëc⁄Êa°
(
tc
);

125 
t˚¡
 = 
	`t_gëc⁄fbyödex
(
tc
, 
idx
);

127 i‡(
idx
 <0 && 
t˚¡
 =
NULL
) {

128 
myt˚
.
ödex
 = 0;

129 
myt˚
.
modulus
.
d©a
 = (
u_ch¨
 *)
wkmodulus
;

130 
myt˚
.
modulus
.
Àn
 =  (
wkmodulus
);

131 
myt˚
.
gíî©‹
.
d©a
 = (
u_ch¨
 *)"\002";

132 
myt˚
.
gíî©‹
.
Àn
 = 1;

133 
t˚¡
 = &
myt˚
;

135 i‡(
t˚¡
 =
NULL
) {

136 (Ë
	`Ârötf
(
°dîr
, "SRP modulus/generator %dÇot found\n",

137 
idx
);

138 
	`exô
(1);

141 i‡((
«me
 = *
¨gv
Ë=
NULL
) {

142 (Ë
	`¥ötf
("ClientÇame: ");

143 i‡(
	`fgës
(
≤ame
,  (≤ame), 
°dö
Ë=
NULL
)

144 
	`exô
(1);

145 i‡((
˝
 = 
	`°rchr
(
≤ame
, '\n')Ë!
NULL
)

146 *
˝
 = '\0';

147 
«me
 = 
≤ame
;

151 i‡((
∑ss1
 = 
	`gë∑s•hø£
("Pas†phø£: ")Ë=
NULL
)

152 
	`exô
(1);

153 
∑ss1
 = 
	`°rdup
(pass1);

154 i‡((
∑ss2
 = 
	`gë∑s•hø£
("Re-íã∏phø£: ")Ë=
NULL
)

155 
	`exô
(1);

156 i‡(
	`°rcmp
(
∑ss1
, 
∑ss2
) == 0)

158 
	`‰ì
(
∑ss1
);

159 (Ë
	`¥ötf
("Phrases don't match;Åryágain.\n");

162 
	`mem£t
(&
pwvÆ
, 0,  (pwval));

163 
	`t_makïwít
(&
pwvÆ
, 
«me
, 
∑ss1
, 
NULL
, 
t˚¡
);

164 
Êags
 = 0;

165 
˝
 = 
«me
; *cp != '\0'; cp++)

166 i‡(
	`is•a˚
(*
˝
))

167 
Êags
 |
HAS_SPACE
;

168 i‡(*
˝
 == '"')

169 
Êags
 |
HAS_DQUOTE
;

170 i‡(*
˝
 == '\'')

171 
Êags
 |
HAS_SQUOTE
;

172 i‡(*
˝
 == '\\')

173 
Êags
 |
HAS_BACKSLASH
;

174 
dñimô
 = 
Êags
 =0 ? '\0' : (Êag†& 
HAS_DQUOTE
) ? '\'' : '"';

175 i‡(
dñimô
 != '\0')

176 (Ë
	`putch¨
(
dñimô
);

177 
˝
 = 
«me
; *cp != '\0'; cp++) {

178 i‡(*
˝
 =
dñimô
 || *cp == '\\')

179 (Ë
	`putch¨
('\\');

180 (Ë
	`putch¨
(*
˝
);

182 i‡(
dñimô
 != '\0')

183 (Ë
	`putch¨
(
dñimô
);

184 (Ë
	`¥ötf
(" * %d:%s:%s *\n",

185 
pwvÆ
.
≥buf
.
ödex
, 
	`t_tob64
(
°rbuf
,

186 (*)
pwvÆ
.
≥buf
.
∑ssw‹d
.
d©a
,ÖwvÆ.≥buf.∑ssw‹d.
Àn
),

187 
	`t_tob64
(
ß…buf
, (*)
pwvÆ
.
≥buf
.
ß…
.
d©a
,

188 
pwvÆ
.
≥buf
.
ß…
.
Àn
));

190 
	}
}

	@pppd/sys-linux.c

72 
	~<sys/io˘l.h
>

73 
	~<sys/ty≥s.h
>

74 
	~<sys/sockë.h
>

75 
	~<sys/time.h
>

76 
	~<sys/fûe.h
>

77 
	~<sys/°©.h
>

78 
	~<sys/ut¢ame.h
>

79 
	~<sys/sysma¸os.h
>

81 
	~<î∫o.h
>

82 
	~<°dio.h
>

83 
	~<°dlib.h
>

84 
	~<sy¶og.h
>

85 
	~<°rög.h
>

86 
	~<time.h
>

87 
	~<mem‹y.h
>

88 
	~<utmp.h
>

89 
	~<m¡ít.h
>

90 
	~<sig«l.h
>

91 
	~<f˙é.h
>

92 
	~<˘y≥.h
>

93 
	~<ãrmios.h
>

94 
	~<uni°d.h
>

101 #i‚de‡
MAX_ADDR_LEN


102 
	#MAX_ADDR_LEN
 7

	)

105 #i‡!
deföed
(
__GLIBC__
) || __GLIBC__ >= 2

106 
	~<asm/ty≥s.h
>

107 
	~<√t/if.h
>

108 
	~<√t/if_¨p.h
>

109 
	~<√t/rouã.h
>

110 
	~<√töë/if_ëhî.h
>

112 
	~<löux/ty≥s.h
>

113 
	~<löux/if.h
>

114 
	~<löux/if_¨p.h
>

115 
	~<löux/rouã.h
>

116 
	~<löux/if_ëhî.h
>

118 
	~<√töë/ö.h
>

119 
	~<¨∑/öë.h
>

121 
	~<löux/µp_defs.h
>

122 
	~<löux/if_µp.h
>

124 
	~"µpd.h
"

125 
	~"fsm.h
"

126 
	~"ù˝.h
"

128 #ifde‡
IPX_CHANGE


129 
	~"ùx˝.h
"

130 #i‡
__GLIBC__
 >= 2 && \

131 !(
deföed
(
__powîpc__
Ë&& 
	g__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0)

132 
	~<√tùx/ùx.h
>

134 
	~<löux/ùx.h
>

138 #ifde‡
PPP_FILTER


139 
	~<pˇp-bpf.h
>

140 
	~<löux/fûãr.h
>

143 #ifde‡
LOCKLIB


144 
	~<sys/locks.h
>

147 #ifde‡
INET6


148 #i‚de‡
_LINUX_IN6_H


153 
	sö6_i‰eq
 {

154 
ö6_addr
 
i‰6_addr
;

155 
__u32
 
	mi‰6_¥efixÀn
;

156 
	mi‰6_ifödex
;

160 
	#IN6_LLADDR_FROM_EUI64
(
sö6
, 
eui64
) do { \

161 
	`mem£t
(&
sö6
.
s6_addr
, 0, (
ö6_addr
)); \

162 
sö6
.
s6_addr16
[0] = 
	`ht⁄s
(0xfe80); \

163 
	`eui64_c›y
(
eui64
, 
sö6
.
s6_addr32
[2]); \

164 } 0)

	)

166 c⁄° 
eui64_t
 
	gnuŒeui64
;

170 
	#ok_îr‹
(
num
Ë(“um)==
EIO
)

	)

172 
	gây_disc
 = 
N_TTY
;

173 
	gµp_disc
 = 
N_PPP
;

174 
	göôfdÊags
 = -1;

175 
	gµp_fd
 = -1;

176 
	gsock_fd
 = -1;

177 
	g¶ave_fd
 = -1;

178 
	gma°î_fd
 = -1;

179 #ifde‡
INET6


180 
	gsock6_fd
 = -1;

188 
	gµp_dev_fd
 = -1;

190 
	gchödex
;

192 
fd_£t
 
	gö_fds
;

193 
	gmax_ö_fd
;

195 
	ghas_¥oxy_¨p
 = 0;

196 
	gdrivî_vîsi⁄
 = 0;

197 
	gdrivî_modifiˇti⁄
 = 0;

198 
	gdrivî_∑tch
 = 0;

199 
	gdrivî_is_ﬁd
 = 0;

200 
	gª°‹e_ãrm
 = 0;

201 
ãrmios
 
	göôãrmios
;

203 
	g√w_°yÀ_drivî
 = 0;

205 
	glo›_«me
[20];

206 
	göbuf
[512];

208 
	gif_is_up
;

209 
	gif6_is_up
;

210 
	ghave_deÁu…_rouã
;

211 
	ghave_deÁu…_rouã6
;

212 
u_öt32_t
 
	g¥oxy_¨p_addr
;

213 
	g¥oxy_¨p_dev
[16];

214 
u_öt32_t
 
	gour_ﬁd_addr
;

215 
	gdy«ddr_£t
;

216 
	glo›ed
;

217 
	glök_mtu
;

219 
ut¢ame
 
	gut¢ame
;

220 
	gkî√l_vîsi⁄
;

221 
	#KVERSION
(
j
,
n
,
p
Ë((j)*1000000 + (n)*1000 + (p))

	)

223 
	#MAX_IFS
 100

	)

225 
	#FLAGS_GOOD
 (
IFF_UP
 | 
IFF_BROADCAST
)

	)

226 
	#FLAGS_MASK
 (
IFF_UP
 | 
IFF_BROADCAST
 | \

227 
IFF_POINTOPOINT
 | 
IFF_LOOPBACK
 | 
IFF_NOARP
)

	)

229 
	#SIN_ADDR
(
x
Ë(((
sockaddr_ö
 *Ë(&(x)))->
sö_addr
.
s_addr
)

	)

232 
modify_Êags
(
fd
, 
˛ór_bôs
, 
£t_bôs
);

233 
å™¶©e_•ìd
 (
bps
);

234 
baud_øã_of
 (
•ìd
);

235 
˛o£_rouã_èbÀ
 ();

236 
›í_rouã_èbÀ
 ();

237 
ªad_rouã_èbÀ
 (
πíåy
 *
π
);

238 
deÁu…rouã_exi°s
 (
πíåy
 *
π
, 
mëric
);

239 
deÁu…rouã6_exi°s
 (
ö6_πmsg
 *
π
, 
mëric
);

240 
gë_ëhî_addr
 (
u_öt32_t
 
ùaddr
, 
sockaddr
 *
hwaddr
,

241 *
«me
, 
«mñí
);

242 
decode_vîsi⁄
 (*
buf
, *
vîsi⁄
, *
mod
, *
∑tch
);

243 
£t_kdebugÊag
(
Àvñ
);

244 
µp_ªgi°îed
();

245 
make_µp_unô
();

246 
£tif°©e
 (
u
, 
°©e
);

248 
u_ch¨
 
ö∑ckë_buf
[];

250 
dÊ_rouã_mëric
;

257 
	#SET_SA_FAMILY
(
addr
, 
Ámûy
) \

258 
	`mem£t
 ((*Ë&(
addr
), '\0', (addr)); \

259 
addr
.
ß_Ámûy
 = (
Ámûy
);

	)

265 
hungup
;

268 
	$£t_µp_fd
 (
√w_fd
)

270 
µp_fd
 = 
√w_fd
;

271 i‡(!
√w_°yÀ_drivî
)

272 
µp_dev_fd
 = 
√w_fd
;

273 
	}
}

275 
	$°ûl_µp
()

277 i‡(
√w_°yÀ_drivî
)

278  !
hungup
 && 
µp_fd
 >= 0;

279 i‡(!
hungup
 || 
µp_fd
 =
¶ave_fd
)

281 i‡(
¶ave_fd
 >= 0) {

282 
	`£t_µp_fd
(
¶ave_fd
);

286 
	}
}

292 
	$modify_Êags
(
fd
, 
˛ór_bôs
, 
£t_bôs
)

294 
Êags
;

296 i‡(
	`io˘l
(
fd
, 
PPPIOCGFLAGS
, &
Êags
) == -1)

297 
îr
;

298 
Êags
 = (Êag†& ~
˛ór_bôs
Ë| 
£t_bôs
;

299 i‡(
	`io˘l
(
fd
, 
PPPIOCSFLAGS
, &
Êags
) == -1)

300 
îr
;

304 
îr
:

305 i‡(
î∫o
 !
EIO
)

306 
	`îr‹
("FailedÅo set PPP kernel option flags: %m");

308 
	}
}

315 
	$sys_öô
()

318 
sock_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

319 i‡(
sock_fd
 < 0)

320 
	`Áèl
("Couldn'à¸óã IP sockë: %m(%d)", 
î∫o
);

322 #ifde‡
INET6


323 
sock6_fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

324 i‡(
sock6_fd
 < 0)

325 
sock6_fd
 = -
î∫o
;

328 
	`FD_ZERO
(&
ö_fds
);

329 
max_ö_fd
 = 0;

330 
	}
}

339 
	$sys_˛ónup
()

344 i‡(
if_is_up
) {

345 
if_is_up
 = 0;

346 
	`sifdown
(0);

348 i‡(
if6_is_up
)

349 
	`sif6down
(0);

354 i‡(
have_deÁu…_rouã
)

355 
	`cifdeÁu…rouã
(0, 0, 0);

356 #ifde‡
INET6


357 i‡(
have_deÁu…_rouã6
)

358 
	`cif6deÁu…rouã
(0, 
nuŒeui64
,Çulleui64);

361 i‡(
has_¥oxy_¨p
)

362 
	`ciÂroxy¨p
(0, 
¥oxy_¨p_addr
);

363 
	}
}

370 
	$sys_˛o£
()

372 i‡(
√w_°yÀ_drivî
 && 
µp_dev_fd
 >= 0)

373 
	`˛o£
(
µp_dev_fd
);

374 i‡(
sock_fd
 >= 0)

375 
	`˛o£
(
sock_fd
);

376 #ifde‡
INET6


377 i‡(
sock6_fd
 >= 0)

378 
	`˛o£
(
sock6_fd
);

380 i‡(
¶ave_fd
 >= 0)

381 
	`˛o£
(
¶ave_fd
);

382 i‡(
ma°î_fd
 >= 0)

383 
	`˛o£
(
ma°î_fd
);

384 
	}
}

391 
	$£t_kdebugÊag
 (
ªque°ed_Àvñ
)

393 i‡(
µp_dev_fd
 < 0)

395 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSDEBUG
, &
ªque°ed_Àvñ
) < 0) {

396 i‡–! 
	`ok_îr‹
 (
î∫o
) )

397 
	`îr‹
("io˘l(PPPIOCSDEBUG): %m (löê%d)", 
__LINE__
);

401 
	}
}

408 
	$ây_e°ablish_µp
 (
ây_fd
)

410 
ªt_fd
;

415 i‡(
	`io˘l
(
ây_fd
, 
TIOCEXCL
, 0) < 0) {

416 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

417 
	`w¨n
("Couldn't makeÅtyÉxclusive: %m");

422 i‡(!
√w_°yÀ_drivî
 && 
lo›ed


423 && 
	`io˘l
(
¶ave_fd
, 
PPPIOCXFERUNIT
, 0) < 0) {

424 
	`îr‹
("io˘l—øns„∏µ∞unô): %m,Üöê%d", 
__LINE__
);

431 #i‚de‡
N_SYNC_PPP


432 
	#N_SYNC_PPP
 14

	)

434 
µp_disc
 = (
√w_°yÀ_drivî
 && 
sync_£rül
)? 
N_SYNC_PPP
: 
N_PPP
;

435 i‡(
	`io˘l
(
ây_fd
, 
TIOCSETD
, &
µp_disc
) < 0) {

436 i‡–! 
	`ok_îr‹
 (
î∫o
) ) {

437 
	`îr‹
("Couldn't setÅtyÅo PPP discipline: %m");

442 
ªt_fd
 = 
	`gíîic_e°ablish_µp
(
ây_fd
);

444 
	#SC_RCVB
 (
SC_RCV_B7_0
 | 
SC_RCV_B7_1
 | 
SC_RCV_EVNP
 | 
SC_RCV_ODDP
)

	)

445 
	#SC_LOGB
 (
SC_DEBUG
 | 
SC_LOG_INPKT
 | 
SC_LOG_OUTPKT
 | 
SC_LOG_RAWIN
 \

446 | 
SC_LOG_FLUSH
)

	)

448 i‡(
ªt_fd
 >= 0) {

449 
	`modify_Êags
(
µp_fd
, 
SC_RCVB
 | 
SC_LOGB
,

450 (
kdebugÊag
 * 
SC_DEBUG
Ë& 
SC_LOGB
);

452 i‡(
	`io˘l
(
ây_fd
, 
TIOCSETD
, &
ây_disc
Ë< 0 && !
	`ok_îr‹
(
î∫o
))

453 
	`w¨n
("Couldn'tÑesetÅtyÅoÇormalÜine discipline: %m");

456  
ªt_fd
;

457 
	}
}

463 
	$gíîic_e°ablish_µp
 (
fd
)

465 
x
;

467 i‡(
√w_°yÀ_drivî
) {

468 
Êags
;

471 i‡(
	`io˘l
(
fd
, 
PPPIOCGCHAN
, &
chödex
) == -1) {

472 
	`îr‹
("Couldn't get channelÇumber: %m");

473 
îr
;

475 
	`dbglog
("usög ch™√»%d", 
chödex
);

476 
fd
 = 
	`›í
("/dev/µp", 
O_RDWR
);

477 i‡(
fd
 < 0) {

478 
	`îr‹
("Couldn'tÑeopen /dev/ppp: %m");

479 
îr
;

481 (Ë
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
);

482 i‡(
	`io˘l
(
fd
, 
PPPIOCATTCHAN
, &
chödex
) < 0) {

483 
	`îr‹
("Couldn'à©èchÅÿch™√»%d: %m", 
chödex
);

484 
îr_˛o£
;

486 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

487 i‡(
Êags
 =-1 || 
	`f˙é
(
fd
, 
F_SETFL
, fœg†| 
O_NONBLOCK
) == -1)

488 
	`w¨n
("Couldn't set /dev/ppp (channel)ÅoÇonblock: %m");

489 
	`£t_µp_fd
(
fd
);

491 i‡(!
lo›ed
)

492 
ifunô
 = -1;

493 i‡(!
lo›ed
 && !
mu…ûök
) {

497 i‡(
	`make_µp_unô
() < 0)

498 
îr_˛o£
;

501 i‡(
lo›ed
)

502 
	`modify_Êags
(
µp_dev_fd
, 
SC_LOOP_TRAFFIC
, 0);

504 i‡(!
mu…ûök
) {

505 
	`add_fd
(
µp_dev_fd
);

506 i‡(
	`io˘l
(
fd
, 
PPPIOCCONNECT
, &
ifunô
) < 0) {

507 
	`îr‹
("Couldn'à©èchÅÿPPP unô %d: %m", 
ifunô
);

508 
îr_˛o£
;

516 
	`£t_µp_fd
 (
fd
);

517 i‡(
	`io˘l
(
fd
, 
PPPIOCGUNIT
, &
x
) < 0) {

518 i‡(
	`ok_îr‹
 (
î∫o
))

519 
îr
;

520 
	`Áèl
("io˘l(PPPIOCGUNIT): %m (löê%d)", 
__LINE__
);

523 i‡(
lo›ed
 && 
x
 !
ifunô
)

524 
	`Áèl
("å™s„r_µ∞Áûed: w™ãd unô %d, gŸ %d", 
ifunô
, 
x
);

525 
ifunô
 = 
x
;

530 
öôfdÊags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

531 i‡(
öôfdÊags
 == -1 ||

532 
	`f˙é
(
fd
, 
F_SETFL
, 
öôfdÊags
 | 
O_NONBLOCK
) == -1) {

533 i‡–! 
	`ok_îr‹
 (
î∫o
))

534 
	`w¨n
("Couldn't set deviceÅoÇon-blocking mode: %m");

541 i‡(!
lo›ed
)

542 
	`£t_kdebugÊag
 (
kdebugÊag
);

544 
lo›ed
 = 0;

546  
µp_fd
;

548 
îr_˛o£
:

549 
	`˛o£
(
fd
);

550 
îr
:

552 
	}
}

560 
	$ây_di£°ablish_µp
(
ây_fd
)

562 i‡(!
hungup
) {

566 i‡(
	`tcÊush
(
ây_fd
, 
TCIOFLUSH
) < 0)

568 
	`w¨n
("tcflush failed: %m");

569 
ÊushÁûed
;

574 i‡(
	`io˘l
(
ây_fd
, 
TIOCSETD
, &
ây_disc
) < 0) {

575 i‡–! 
	`ok_îr‹
 (
î∫o
))

576 
	`îr‹
("io˘l(TIOCSETD, N_TTY): %m (löê%d)", 
__LINE__
);

579 i‡(
	`io˘l
(
ây_fd
, 
TIOCNXCL
, 0) < 0) {

580 i‡–! 
	`ok_îr‹
 (
î∫o
))

581 
	`w¨n
("io˘l(TIOCNXCL): %m (löê%d)", 
__LINE__
);

585 i‡(
öôfdÊags
 !-1 && 
	`f˙é
(
ây_fd
, 
F_SETFL
, initfdflags) < 0) {

586 i‡–! 
	`ok_îr‹
 (
î∫o
))

587 
	`w¨n
("Couldn'tÑestore device fd flags: %m");

590 
ÊushÁûed
:

591 
öôfdÊags
 = -1;

593 
	`gíîic_di£°ablish_µp
(
ây_fd
);

594 
	}
}

602 
	$gíîic_di£°ablish_µp
(
dev_fd
)

604 i‡(
√w_°yÀ_drivî
) {

605 
	`˛o£
(
µp_fd
);

606 
µp_fd
 = -1;

607 i‡(
dem™d
) {

608 
	`modify_Êags
(
µp_dev_fd
, 0, 
SC_LOOP_TRAFFIC
);

609 
lo›ed
 = 1;

610 } i‡(!
doög_mu…ûök
 && 
µp_dev_fd
 >= 0) {

611 
	`˛o£
(
µp_dev_fd
);

612 
	`ªmove_fd
(
µp_dev_fd
);

613 
µp_dev_fd
 = -1;

617 i‡(
dem™d
)

618 
	`£t_µp_fd
(
¶ave_fd
);

620 
µp_dev_fd
 = -1;

622 
	}
}

628 
	$make_µp_unô
()

630 
x
, 
Êags
;

632 i‡(
µp_dev_fd
 >= 0) {

633 
	`dbglog
("in make_ppp_unit,álready had /dev/ppp open?");

634 
	`˛o£
(
µp_dev_fd
);

636 
µp_dev_fd
 = 
	`›í
("/dev/µp", 
O_RDWR
);

637 i‡(
µp_dev_fd
 < 0)

638 
	`Áèl
("Couldn't open /dev/ppp: %m");

639 
Êags
 = 
	`f˙é
(
µp_dev_fd
, 
F_GETFL
);

640 i‡(
Êags
 == -1

641 || 
	`f˙é
(
µp_dev_fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

642 
	`w¨n
("Couldn't set /dev/pppÅoÇonblock: %m");

644 
ifunô
 = 
ªq_unô
;

645 
x
 = 
	`io˘l
(
µp_dev_fd
, 
PPPIOCNEWUNIT
, &
ifunô
);

646 i‡(
x
 < 0 && 
ªq_unô
 >0 && 
î∫o
 =
EEXIST
) {

647 
	`w¨n
("Couldn'àÆloˇã PPP unô %dá†ô i†Æªady i¿u£", 
ªq_unô
);

648 
ifunô
 = -1;

649 
x
 = 
	`io˘l
(
µp_dev_fd
, 
PPPIOCNEWUNIT
, &
ifunô
);

651 i‡(
x
 < 0)

652 
	`îr‹
("Couldn't createÇewÖpp unit: %m");

654 i‡(
x
 =0 && 
ªq_i‚ame
[0] != '\0') {

655 
i‰eq
 
i‰
;

656 
t
[
MAXIFNAMELEN
];

657 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

658 
	`¶¥ötf
(
t
, —), "%s%d", 
PPP_DRV_NAME
, 
ifunô
);

659 
	`°æ˝y
(
i‰
.
i‰_«me
, 
t
, 
IF_NAMESIZE
);

660 
	`°æ˝y
(
i‰
.
i‰_√w«me
, 
ªq_i‚ame
, 
IF_NAMESIZE
);

661 
x
 = 
	`io˘l
(
sock_fd
, 
SIOCSIFNAME
, &
i‰
);

662 i‡(
x
 < 0)

663 
	`îr‹
("Couldn'àª«mêöãrÁ˚ %†tÿ%s: %m", 
t
, 
ªq_i‚ame
);

665 
	`öfo
("Ríamed i¡îÁ˚ %†tÿ%s", 
t
, 
ªq_i‚ame
);

668  
x
;

669 
	}
}

675 
	$cfg_bundÀ
(
mºu
, 
måu
, 
rs¢
, 
ts¢
)

677 i‡(!
√w_°yÀ_drivî
)

681 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSMRRU
, &
mºu
) < 0)

682 
	`îr‹
("Couldn't set MRRU: %m");

684 
	`modify_Êags
(
µp_dev_fd
, 
SC_MP_SHORTSEQ
|
SC_MP_XSHORTSEQ
|
SC_MULTILINK
,

685 ((
rs¢
? 
SC_MP_SHORTSEQ
: 0Ë| (
ts¢
? 
SC_MP_XSHORTSEQ
: 0)

686 | (
mºu
? 
SC_MULTILINK
: 0)));

689 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCCONNECT
, &
ifunô
) < 0)

690 
	`Áèl
("Couldn'à©èchÅÿPPP unô %d: %m", 
ifunô
);

691 
	`add_fd
(
µp_dev_fd
);

692 
	}
}

701 
	$make_√w_bundÀ
(
mºu
, 
måu
, 
rs¢
, 
ts¢
)

703 i‡(!
√w_°yÀ_drivî
)

707 i‡(
	`make_µp_unô
() < 0)

708 
	`dõ
(1);

711 
	`cfg_bundÀ
(
mºu
, 
måu
, 
rs¢
, 
ts¢
);

712 
	}
}

718 
	$bundÀ_©èch
(
i‚um
)

720 
ma°î_fd
;

722 i‡(!
√w_°yÀ_drivî
)

725 
ma°î_fd
 = 
	`›í
("/dev/µp", 
O_RDWR
);

726 i‡(
ma°î_fd
 < 0)

727 
	`Áèl
("Couldn't open /dev/ppp: %m");

728 i‡(
	`io˘l
(
ma°î_fd
, 
PPPIOCATTACH
, &
i‚um
) < 0) {

729 i‡(
î∫o
 =
ENXIO
) {

730 
	`˛o£
(
ma°î_fd
);

733 
	`Áèl
("Couldn'à©èchÅÿöãrÁ˚ unô %d: %m\n", 
i‚um
);

735 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCCONNECT
, &
i‚um
) < 0)

736 
	`Áèl
("Couldn'àc⁄√˘ÅÿöãrÁ˚ unô %d: %m", 
i‚um
);

737 
	`modify_Êags
(
ma°î_fd
, 0, 
SC_MULTILINK
);

738 
	`˛o£
(
ma°î_fd
);

740 
ifunô
 = 
i‚um
;

742 
	}
}

747 
	$de°roy_bundÀ
()

749 i‡(
µp_dev_fd
 >= 0) {

750 
	`˛o£
(
µp_dev_fd
);

751 
	`ªmove_fd
(
µp_dev_fd
);

752 
µp_dev_fd
 = -1;

754 
	}
}

761 
	$˛ón_check
()

763 
x
;

764 *
s
;

766 i‡(
	`°ûl_µp
()) {

767 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCGFLAGS
, (
ˇddr_t
Ë&
x
) == 0) {

768 
s
 = 
NULL
;

769 ~
x
 & (
SC_RCV_B7_0
|
SC_RCV_B7_1
|
SC_RCV_EVNP
|
SC_RCV_ODDP
)) {

770 
SC_RCV_B7_0
:

771 
s
 = "all had bit 7 setÅo 1";

774 
SC_RCV_B7_1
:

775 
s
 = "all had bit 7 setÅo 0";

778 
SC_RCV_EVNP
:

779 
s
 = "all had oddÖarity";

782 
SC_RCV_ODDP
:

783 
s
 = "all hadÉvenÖarity";

787 i‡(
s
 !
NULL
) {

788 
	`w¨n
("Receive serialÜink isÇot 8-bit clean:");

789 
	`w¨n
("ProbÀm: %s", 
s
);

793 
	}
}

800 
	s•ìd
 {

801 
	m•ìd_öt
, 
	m•ìd_vÆ
;

802 } 
	g•ìds
[] = {

803 #ifde‡
B50


804 { 50, 
B50
 },

806 #ifde‡
B75


807 { 75, 
B75
 },

809 #ifde‡
B110


810 { 110, 
B110
 },

812 #ifde‡
B134


813 { 134, 
B134
 },

815 #ifde‡
B150


816 { 150, 
B150
 },

818 #ifde‡
B200


819 { 200, 
B200
 },

821 #ifde‡
B300


822 { 300, 
B300
 },

824 #ifde‡
B600


825 { 600, 
B600
 },

827 #ifde‡
B1200


828 { 1200, 
B1200
 },

830 #ifde‡
B1800


831 { 1800, 
B1800
 },

833 #ifde‡
B2000


834 { 2000, 
B2000
 },

836 #ifde‡
B2400


837 { 2400, 
B2400
 },

839 #ifde‡
B3600


840 { 3600, 
B3600
 },

842 #ifde‡
B4800


843 { 4800, 
B4800
 },

845 #ifde‡
B7200


846 { 7200, 
B7200
 },

848 #ifde‡
B9600


849 { 9600, 
B9600
 },

851 #ifde‡
B19200


852 { 19200, 
B19200
 },

854 #ifde‡
B38400


855 { 38400, 
B38400
 },

857 #ifde‡
B57600


858 { 57600, 
B57600
 },

860 #ifde‡
B76800


861 { 76800, 
B76800
 },

863 #ifde‡
B115200


864 { 115200, 
B115200
 },

866 #ifde‡
EXTA


867 { 19200, 
EXTA
 },

869 #ifde‡
EXTB


870 { 38400, 
EXTB
 },

872 #ifde‡
B230400


873 { 230400, 
B230400
 },

875 #ifde‡
B460800


876 { 460800, 
B460800
 },

878 #ifde‡
B921600


879 { 921600, 
B921600
 },

881 #ifde‡
B1000000


882 { 1000000, 
B1000000
 },

884 #ifde‡
B1152000


885 { 1152000, 
B1152000
 },

887 #ifde‡
B1500000


888 { 1500000, 
B1500000
 },

890 #ifde‡
B2000000


891 { 2000000, 
B2000000
 },

893 #ifde‡
B2500000


894 { 2500000, 
B2500000
 },

896 #ifde‡
B3000000


897 { 3000000, 
B3000000
 },

899 #ifde‡
B3500000


900 { 3500000, 
B3500000
 },

902 #ifde‡
B4000000


903 { 4000000, 
B4000000
 },

913 
	$å™¶©e_•ìd
 (
bps
)

915 
•ìd
 *
•ìdp
;

917 i‡(
bps
 != 0) {

918 
•ìdp
 = 
•ìds
; s≥edp->
•ìd_öt
; speedp++) {

919 i‡(
bps
 =
•ìdp
->
•ìd_öt
)

920  
•ìdp
->
•ìd_vÆ
;

922 
	`w¨n
("•ìd %dÇŸ suµ‹ãd", 
bps
);

925 
	}
}

932 
	$baud_øã_of
 (
•ìd
)

934 
•ìd
 *
•ìdp
;

936 i‡(
•ìd
 != 0) {

937 
•ìdp
 = 
•ìds
; s≥edp->
•ìd_öt
; speedp++) {

938 i‡(
•ìd
 =
•ìdp
->
•ìd_vÆ
)

939  
•ìdp
->
•ìd_öt
;

943 
	}
}

952 
	$£t_up_ây
(
ây_fd
, 
loˇl
)

954 
•ìd
;

955 
ãrmios
 
tios
;

957 
	`£tdå
(
ây_fd
, 1);

958 i‡(
	`tcgë©å
(
ây_fd
, &
tios
) < 0) {

959 i‡(!
	`ok_îr‹
(
î∫o
))

960 
	`Áèl
("tcgë©å: %m (löê%d)", 
__LINE__
);

964 i‡(!
ª°‹e_ãrm
)

965 
öôãrmios
 = 
tios
;

967 
tios
.
c_cÊag
 &~(
CSIZE
 | 
CSTOPB
 | 
PARENB
 | 
CLOCAL
);

968 
tios
.
c_cÊag
 |
CS8
 | 
CREAD
 | 
HUPCL
;

970 
tios
.
c_iÊag
 = 
IGNBRK
 | 
IGNPAR
;

971 
tios
.
c_oÊag
 = 0;

972 
tios
.
c_lÊag
 = 0;

973 
tios
.
c_cc
[
VMIN
] = 1;

974 
tios
.
c_cc
[
VTIME
] = 0;

976 i‡(
loˇl
 || !
modem
)

977 
tios
.
c_cÊag
 ^(
CLOCAL
 | 
HUPCL
);

979 
¸ts˘s
) {

981 
tios
.
c_cÊag
 |
CRTSCTS
;

985 
tios
.
c_iÊag
 |
IXON
 | 
IXOFF
;

986 
tios
.
c_cc
[
VSTOP
] = 0x13;

987 
tios
.
c_cc
[
VSTART
] = 0x11;

991 
tios
.
c_cÊag
 &~
CRTSCTS
;

998 i‡(
°›_bôs
 >= 2)

999 
tios
.
c_cÊag
 |
CSTOPB
;

1001 
•ìd
 = 
	`å™¶©e_•ìd
(
ö•ìd
);

1002 i‡(
•ìd
) {

1003 
	`cf£to•ìd
 (&
tios
, 
•ìd
);

1004 
	`cf£ti•ìd
 (&
tios
, 
•ìd
);

1011 
•ìd
 = 
	`cfgëo•ìd
(&
tios
);

1012 i‡(
•ìd
 =
B0
)

1013 
	`Áèl
("BaudÑ©êf‹ %†i†0;ÇìdÉx∂icô baudÑ©e", 
dev«m
);

1016 
	`tc£èâr
(
ây_fd
, 
TCSAFLUSH
, &
tios
Ë< 0 && !
	`ok_îr‹
(
î∫o
))

1017 i‡(
î∫o
 !
EINTR
)

1018 
	`Áèl
("tc£èâr: %m (löê%d)", 
__LINE__
);

1020 
baud_øã
 = 
	`baud_øã_of
(
•ìd
);

1021 
ª°‹e_ãrm
 = 1;

1022 
	}
}

1030 
	$£tdå
 (
ây_fd
, 
⁄
)

1032 
modembôs
 = 
TIOCM_DTR
;

1034 
	`io˘l
(
ây_fd
, (
⁄
 ? 
TIOCMBIS
 : 
TIOCMBIC
), &
modembôs
);

1035 
	}
}

1042 
	$ª°‹e_ây
 (
ây_fd
)

1044 i‡(
ª°‹e_ãrm
) {

1045 
ª°‹e_ãrm
 = 0;

1052 i‡(!
deÁu…_devi˚
)

1053 
öôãrmios
.
c_lÊag
 &~(
ECHO
 | 
ECHONL
);

1055 i‡(
	`tc£èâr
(
ây_fd
, 
TCSAFLUSH
, &
öôãrmios
) < 0) {

1056 i‡(! 
	`ok_îr‹
 (
î∫o
))

1057 
	`w¨n
("tc£èâr: %m (löê%d)", 
__LINE__
);

1060 
	}
}

1067 
	$ouçut
 (
unô
, *
p
, 
Àn
)

1069 
fd
 = 
µp_fd
;

1070 
¥Ÿo
;

1072 
	`dump_∑ckë
("£¡", 
p
, 
Àn
);

1073 i‡(
¢o›_£nd_hook
Ë
	`¢o›_£nd_hook
(
p
, 
Àn
);

1075 i‡(
Àn
 < 
PPP_HDRLEN
)

1077 i‡(
√w_°yÀ_drivî
) {

1078 
p
 += 2;

1079 
Àn
 -= 2;

1080 
¥Ÿo
 = (
p
[0] << 8) +Ö[1];

1081 i‡(
µp_dev_fd
 >0 && !(
¥Ÿo
 >0xc000 ||ÖrŸÿ=
PPP_CCPFRAG
))

1082 
fd
 = 
µp_dev_fd
;

1084 i‡(
	`wrôe
(
fd
, 
p
, 
Àn
) < 0) {

1085 i‡(
î∫o
 =
EWOULDBLOCK
 ||Éºnÿ=
EAGAIN
 ||Éºnÿ=
ENOBUFS


1086 || 
î∫o
 =
ENXIO
 ||Éºnÿ=
EIO
 ||Éºnÿ=
EINTR
)

1087 
	`w¨n
("wrôe: w¨nög: %m (%d)", 
î∫o
);

1089 
	`îr‹
("wrôe: %m (%d)", 
î∫o
);

1091 
	}
}

1100 
	$waô_öput
(
timevÆ
 *
timo
)

1102 
fd_£t
 
ªady
, 
exc
;

1103 
n
;

1105 
ªady
 = 
ö_fds
;

1106 
exc
 = 
ö_fds
;

1107 
n
 = 
	`£À˘
(
max_ö_fd
 + 1, &
ªady
, 
NULL
, &
exc
, 
timo
);

1108 i‡(
n
 < 0 && 
î∫o
 !
EINTR
)

1109 
	`Áèl
("select: %m");

1110 
	}
}

1115 
	$add_fd
(
fd
)

1117 i‡(
fd
 >
FD_SETSIZE
)

1118 
	`Áèl
("öã∫ÆÉº‹: fûêdes¸ùt‹Åoÿœrgê(%d)", 
fd
);

1119 
	`FD_SET
(
fd
, &
ö_fds
);

1120 i‡(
fd
 > 
max_ö_fd
)

1121 
max_ö_fd
 = 
fd
;

1122 
	}
}

1127 
	$ªmove_fd
(
fd
)

1129 
	`FD_CLR
(
fd
, &
ö_fds
);

1130 
	}
}

1138 
	$ªad_∑ckë
 (*
buf
)

1140 
Àn
, 
ƒ
;

1142 
Àn
 = 
PPP_MRU
 + 
PPP_HDRLEN
;

1143 i‡(
√w_°yÀ_drivî
) {

1144 *
buf
++ = 
PPP_ALLSTATIONS
;

1145 *
buf
++ = 
PPP_UI
;

1146 
Àn
 -= 2;

1148 
ƒ
 = -1;

1149 i‡(
µp_fd
 >= 0) {

1150 
ƒ
 = 
	`ªad
(
µp_fd
, 
buf
, 
Àn
);

1151 i‡(
ƒ
 < 0 && 
î∫o
 !
EWOULDBLOCK
 &&Éºnÿ!
EAGAIN


1152 && 
î∫o
 !
EIO
 &&Éºnÿ!
EINTR
)

1153 
	`îr‹
("read: %m");

1154 i‡(
ƒ
 < 0 && 
î∫o
 =
ENXIO
)

1157 i‡(
ƒ
 < 0 && 
√w_°yÀ_drivî
 && 
µp_dev_fd
 >0 && !
bundÀ_eof
) {

1159 
ƒ
 = 
	`ªad
(
µp_dev_fd
, 
buf
, 
Àn
);

1160 i‡(
ƒ
 < 0 && 
î∫o
 !
EWOULDBLOCK
 &&Éºnÿ!
EAGAIN


1161 && 
î∫o
 !
EIO
 &&Éºnÿ!
EINTR
)

1162 
	`îr‹
("read /dev/ppp: %m");

1163 i‡(
ƒ
 < 0 && 
î∫o
 =
ENXIO
)

1164 
ƒ
 = 0;

1165 i‡(
ƒ
 =0 && 
doög_mu…ûök
) {

1166 
	`ªmove_fd
(
µp_dev_fd
);

1167 
bundÀ_eof
 = 1;

1170 i‡(
√w_°yÀ_drivî
 && 
µp_fd
 < 0 && 
µp_dev_fd
 < 0)

1171 
ƒ
 = 0;

1172  (
√w_°yÀ_drivî
 && 
ƒ
 > 0)?Çr+2:Çr;

1173 
	}
}

1182 
	$gë_lo›_ouçut
()

1184 
rv
 = 0;

1185 
n
;

1187 i‡(
√w_°yÀ_drivî
) {

1188 (
n
 = 
	`ªad_∑ckë
(
ö∑ckë_buf
)) > 0)

1189 i‡(
	`lo›_‰ame
(
ö∑ckë_buf
, 
n
))

1190 
rv
 = 1;

1191  
rv
;

1194 (
n
 = 
	`ªad
(
ma°î_fd
, 
öbuf
, (inbuf))) > 0)

1195 i‡(
	`lo›_ch¨s
(
öbuf
, 
n
))

1196 
rv
 = 1;

1198 i‡(
n
 == 0)

1199 
	`Áèl
("eof onÜoopback");

1201 i‡(
î∫o
 !
EWOULDBLOCK
 &&Éºnÿ!
EAGAIN
)

1202 
	`Áèl
("ªad fromÜo›back: %m(%d)", 
î∫o
);

1204  
rv
;

1205 
	}
}

1211 
	$√tif_£t_mtu
(
unô
, 
mtu
)

1213 
i‰eq
 
i‰
;

1215 
	`mem£t
 (&
i‰
, '\0',  (ifr));

1216 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
,  (ifr.ifr_name));

1217 
i‰
.
i‰_mtu
 = 
mtu
;

1219 i‡(
ifunô
 >0 && 
	`io˘l
(
sock_fd
, 
SIOCSIFMTU
, (
ˇddr_t
Ë&
i‰
) < 0)

1220 
	`îr‹
("io˘l(SIOCSIFMTU): %m (löê%d)", 
__LINE__
);

1221 
	}
}

1227 
	$√tif_gë_mtu
(
unô
)

1229 
i‰eq
 
i‰
;

1231 
	`mem£t
 (&
i‰
, '\0',  (ifr));

1232 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
,  (ifr.ifr_name));

1234 i‡(
ifunô
 >0 && 
	`io˘l
(
sock_fd
, 
SIOCGIFMTU
, (
ˇddr_t
Ë&
i‰
) < 0) {

1235 
	`îr‹
("io˘l(SIOCGIFMTU): %m (löê%d)", 
__LINE__
);

1238  
i‰
.
i‰_mtu
;

1239 
	}
}

1247 
	$ây_£nd_c⁄fig
(
mtu
, 
u_öt32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1249 
x
;

1251 i‡(!
	`°ûl_µp
())

1253 
lök_mtu
 = 
mtu
;

1254 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCSASYNCMAP
, (
ˇddr_t
Ë&
asyncm≠
) < 0) {

1255 i‡(
î∫o
 !
EIO
 &&Éºnÿ!
ENOTTY
)

1256 
	`îr‹
("Couldn't setÅransmitásync character map: %m");

1257 ++
îr‹_cou¡
;

1261 
x
 = (
pcomp
? 
SC_COMP_PROT
: 0Ë| (
accomp
? 
SC_COMP_AC
: 0)

1262 | (
sync_£rül
? 
SC_SYNC
: 0);

1263 
	`modify_Êags
(
µp_fd
, 
SC_COMP_PROT
|
SC_COMP_AC
|
SC_SYNC
, 
x
);

1264 
	}
}

1271 
	$ây_£t_xaccm
 (
ext_accm
 
accm
)

1273 i‡(!
	`°ûl_µp
())

1275 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCSXASYNCMAP
, 
accm
Ë< 0 && 
î∫o
 !
ENOTTY
) {

1276 i‡–! 
	`ok_îr‹
 (
î∫o
))

1277 
	`w¨n
("io˘l(£àexãnded ACCM): %m (löê%d)", 
__LINE__
);

1279 
	}
}

1287 
	$ây_ªcv_c⁄fig
(
mru
, 
u_öt32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1293 i‡(!
	`°ûl_µp
())

1298 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCSMRU
, (
ˇddr_t
Ë&
mru
) < 0) {

1299 i‡(
î∫o
 !
EIO
 &&Éºnÿ!
ENOTTY
)

1300 
	`îr‹
("Couldn't set channelÑeceive MRU: %m");

1302 i‡(
√w_°yÀ_drivî
 && 
µp_dev_fd
 >= 0

1303 && 
	`io˘l
(
µp_dev_fd
, 
PPPIOCSMRU
, (
ˇddr_t
Ë&
mru
) < 0)

1304 
	`îr‹
("Couldn't set MRU in generic PPPÜayer: %m");

1306 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCSRASYNCMAP
, (
ˇddr_t
Ë&
asyncm≠
) < 0) {

1307 i‡(
î∫o
 !
EIO
 &&Éºnÿ!
ENOTTY
)

1308 
	`îr‹
("Couldn't set channelÑeceiveásyncmap: %m");

1310 
	}
}

1319 
	$c˝_ã°
(
unô
, 
u_ch¨
 *
›t_±r
, 
›t_Àn
, 
f‹_å™smô
)

1321 
µp_›ti⁄_d©a
 
d©a
;

1323 
	`mem£t
 (&
d©a
, '\0',  (data));

1324 
d©a
.
±r
 = 
›t_±r
;

1325 
d©a
.
Àngth
 = 
›t_Àn
;

1326 
d©a
.
å™smô
 = 
f‹_å™smô
;

1328 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSCOMPRESS
, (
ˇddr_t
Ë&
d©a
) >= 0)

1331  (
î∫o
 =
ENOBUFS
)? 0: -1;

1332 
	}
}

1339 
	$c˝_Êags_£t
 (
unô
, 
is›í
, 
isup
)

1341 
x
;

1343 
x
 = (
is›í
? 
SC_CCP_OPEN
: 0Ë| (
isup
? 
SC_CCP_UP
: 0);

1344 i‡(
	`°ûl_µp
(Ë&& 
µp_dev_fd
 >= 0)

1345 
	`modify_Êags
(
µp_dev_fd
, 
SC_CCP_OPEN
|
SC_CCP_UP
, 
x
);

1346 
	}
}

1348 #ifde‡
PPP_FILTER


1352 
	$£t_fûãrs
(
bpf_¥ogøm
 *
∑ss
, bpf_¥ogøm *
a˘ive
)

1354 
sock_Ârog
 
Â
;

1356 
Â
.
Àn
 = 
∑ss
->
bf_Àn
;

1357 
Â
.
fûãr
 = (
sock_fûãr
 *Ë
∑ss
->
bf_ö¢s
;

1358 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSPASS
, &
Â
) < 0) {

1359 i‡(
î∫o
 =
ENOTTY
)

1360 
	`w¨n
("kernel doesÇot support PPP filtering");

1362 
	`îr‹
("Couldn't setÖass-filter in kernel: %m");

1365 
Â
.
Àn
 = 
a˘ive
->
bf_Àn
;

1366 
Â
.
fûãr
 = (
sock_fûãr
 *Ë
a˘ive
->
bf_ö¢s
;

1367 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSACTIVE
, &
Â
) < 0) {

1368 
	`îr‹
("Couldn't setáctive-filter in kernel: %m");

1372 
	}
}

1380 
	$gë_idÀ_time
(
u
, 
ù
)

1381 
u
;

1382 
µp_idÀ
 *
ù
;

1384  
	`io˘l
(
µp_dev_fd
, 
PPPIOCGIDLE
, 
ù
) >= 0;

1385 
	}
}

1392 
	$gë_µp_°©s
(
u
, 
°©s
)

1393 
u
;

1394 
µpd_°©s
 *
°©s
;

1396 
iÂµ°©§eq
 
ªq
;

1398 
	`mem£t
 (&
ªq
, 0,  (req));

1400 
ªq
.
°©s_±r
 = (
ˇddr_t
Ë&ªq.
°©s
;

1401 
	`°æ˝y
(
ªq
.
i‰__«me
, 
i‚ame
, (req.ifr__name));

1402 i‡(
	`io˘l
(
sock_fd
, 
SIOCGPPPSTATS
, &
ªq
) < 0) {

1403 
	`îr‹
("Couldn't get PPP statistics: %m");

1406 
°©s
->
byãs_ö
 = 
ªq
.°©s.
p
.
µp_ibyãs
;

1407 
°©s
->
byãs_out
 = 
ªq
.°©s.
p
.
µp_obyãs
;

1408 
°©s
->
pkts_ö
 = 
ªq
.°©s.
p
.
µp_ùackës
;

1409 
°©s
->
pkts_out
 = 
ªq
.°©s.
p
.
µp_›ackës
;

1411 
	}
}

1420 
	$c˝_Áèl_îr‹
 (
unô
)

1422 
Êags
;

1424 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCGFLAGS
, &
Êags
) < 0) {

1425 
	`îr‹
("Couldn'tÑead compressionÉrror flags: %m");

1426 
Êags
 = 0;

1428  
Êags
 & 
SC_DC_FERROR
;

1429 
	}
}

1435 
	g¥oc_∑th
[
MAXPATHLEN
];

1436 
	g¥oc_∑th_Àn
;

1438 *
	$∑th_to_¥ocfs
(c⁄° *
èû
)

1440 
m¡ít
 *mntent;

1441 
FILE
 *
Â
;

1443 i‡(
¥oc_∑th_Àn
 == 0) {

1445 
	`°æ˝y
 (
¥oc_∑th
, "/proc", (proc_path));

1446 
¥oc_∑th_Àn
 = 5;

1447 
Â
 = 
	`f›í
(
MOUNTED
, "r");

1448 i‡(
Â
 !
NULL
) {

1449 (
m¡ít
 = 
	`gëm¡ít
(
Â
)Ë!
NULL
) {

1450 i‡(
	`°rcmp
(
m¡ít
->
m¡_ty≥
, 
MNTTYPE_IGNORE
) == 0)

1452 i‡(
	`°rcmp
(
m¡ít
->
m¡_ty≥
, "proc") == 0) {

1453 
	`°æ˝y
(
¥oc_∑th
, 
m¡ít
->
m¡_dú
, (proc_path));

1454 
¥oc_∑th_Àn
 = 
	`°æí
(
¥oc_∑th
);

1458 
	`f˛o£
 (
Â
);

1462 
	`°æ˝y
(
¥oc_∑th
 + 
¥oc_∑th_Àn
, 
èû
,

1463 (
¥oc_∑th
Ë- 
¥oc_∑th_Àn
);

1464  
¥oc_∑th
;

1465 
	}
}

1470 
	#ROUTE_MAX_COLS
 12

	)

1471 
FILE
 *
	grouã_fd
 = (FILE *) 0;

1472 
	grouã_buf„r
[512];

1473 
	grouã_dev_cﬁ
, 
	grouã_de°_cﬁ
, 
	grouã_gw_cﬁ
;

1474 
	grouã_Êags_cﬁ
, 
	grouã_mëric_cﬁ
, 
	grouã_mask_cﬁ
;

1475 
	grouã_num_cﬁs
;

1477 
›í_rouã_èbÀ
 ();

1478 
˛o£_rouã_èbÀ
 ();

1479 
ªad_rouã_èbÀ
 (
πíåy
 *
π
);

1486 
	$˛o£_rouã_èbÀ
 ()

1488 i‡(
rouã_fd
 !(
FILE
 *) 0) {

1489 
	`f˛o£
 (
rouã_fd
);

1490 
rouã_fd
 = (
FILE
 *) 0;

1492 
	}
}

1498 
	grouã_dñims
[] = " \t\n";

1500 
	$›í_rouã_èbÀ
 ()

1502 *
∑th
;

1504 
	`˛o£_rouã_èbÀ
();

1506 
∑th
 = 
	`∑th_to_¥ocfs
("/net/route");

1507 
rouã_fd
 = 
	`f›í
 (
∑th
, "r");

1508 i‡(
rouã_fd
 =
NULL
) {

1509 
	`îr‹
("ˇn'à›íÑoutögÅabÀ %s: %m", 
∑th
);

1513 
rouã_dev_cﬁ
 = 0;

1514 
rouã_de°_cﬁ
 = 1;

1515 
rouã_gw_cﬁ
 = 2;

1516 
rouã_Êags_cﬁ
 = 3;

1517 
rouã_mëric_cﬁ
 = 6;

1518 
rouã_mask_cﬁ
 = 7;

1519 
rouã_num_cﬁs
 = 8;

1522 i‡(
	`fgës
(
rouã_buf„r
, ‘ouã_buf„r), 
rouã_fd
) != 0) {

1523 *
p
 = 
rouã_buf„r
, *
q
;

1524 
cﬁ
;

1525 
cﬁ
 = 0; cﬁ < 
ROUTE_MAX_COLS
; ++col) {

1526 
u£d
 = 1;

1527 i‡((
q
 = 
	`°πok
(
p
, 
rouã_dñims
)) == 0)

1529 i‡(
	`°rˇ£cmp
(
q
, "iface") == 0)

1530 
rouã_dev_cﬁ
 = 
cﬁ
;

1531 i‡(
	`°rˇ£cmp
(
q
, "destination") == 0)

1532 
rouã_de°_cﬁ
 = 
cﬁ
;

1533 i‡(
	`°rˇ£cmp
(
q
, "gateway") == 0)

1534 
rouã_gw_cﬁ
 = 
cﬁ
;

1535 i‡(
	`°rˇ£cmp
(
q
, "flags") == 0)

1536 
rouã_Êags_cﬁ
 = 
cﬁ
;

1537 i‡(
	`°rˇ£cmp
(
q
, "mask") == 0)

1538 
rouã_mask_cﬁ
 = 
cﬁ
;

1540 
u£d
 = 0;

1541 i‡(
u£d
 && 
cﬁ
 >
rouã_num_cﬁs
)

1542 
rouã_num_cﬁs
 = 
cﬁ
 + 1;

1543 
p
 = 
NULL
;

1548 
	}
}

1555 
	$ªad_rouã_èbÀ
(
πíåy
 *
π
)

1557 *
cﬁs
[
ROUTE_MAX_COLS
], *
p
;

1558 
cﬁ
;

1560 
	`mem£t
 (
π
, '\0',  (
πíåy
));

1562 i‡(
	`fgës
 (
rouã_buf„r
,  (rouã_buf„r), 
rouã_fd
) == (*) 0)

1565 
p
 = 
rouã_buf„r
;

1566 
cﬁ
 = 0; cﬁ < 
rouã_num_cﬁs
; ++col) {

1567 
cﬁs
[
cﬁ
] = 
	`°πok
(
p
, 
rouã_dñims
);

1568 i‡(
cﬁs
[
cﬁ
] =
NULL
)

1570 
p
 = 
NULL
;

1573 
	`SIN_ADDR
(
π
->
π_d°
Ë
	`°πoul
(
cﬁs
[
rouã_de°_cﬁ
], 
NULL
, 16);

1574 
	`SIN_ADDR
(
π
->
π_g©eway
Ë
	`°πoul
(
cﬁs
[
rouã_gw_cﬁ
], 
NULL
, 16);

1575 
	`SIN_ADDR
(
π
->
π_gímask
Ë
	`°πoul
(
cﬁs
[
rouã_mask_cﬁ
], 
NULL
, 16);

1577 
π
->
π_Êags
 = (Ë
	`°πoul
(
cﬁs
[
rouã_Êags_cﬁ
], 
NULL
, 16);

1578 
π
->
π_mëric
 = (Ë
	`°πoul
(
cﬁs
[
rouã_mëric_cﬁ
], 
NULL
, 10);

1579 
π
->
π_dev
 = 
cﬁs
[
rouã_dev_cﬁ
];

1582 
	}
}

1590 
	$deÁu…rouã_exi°s
 (
πíåy
 *
π
, 
mëric
)

1592 
ªsu…
 = 0;

1594 i‡(!
	`›í_rouã_èbÀ
())

1597 
	`ªad_rouã_èbÀ
(
π
) != 0) {

1598 i‡((
π
->
π_Êags
 & 
RTF_UP
) == 0)

1601 i‡(
kî√l_vîsi⁄
 > 
	`KVERSION
(2,1,0Ë&& 
	`SIN_ADDR
(
π
->
π_gímask
) != 0)

1603 i‡(
	`SIN_ADDR
(
π
->
π_d°
Ë=0L && (
mëric
 < 0

1604 || 
π
->
π_mëric
 =
mëric
)) {

1605 
ªsu…
 = 1;

1610 
	`˛o£_rouã_èbÀ
();

1611  
ªsu…
;

1612 
	}
}

1621 
	$have_rouã_to
(
u_öt32_t
 
addr
)

1623 
πíåy
 
π
;

1624 
ªsu…
 = 0;

1626 i‡(!
	`›í_rouã_èbÀ
())

1629 
	`ªad_rouã_èbÀ
(&
π
)) {

1630 i‡((
π
.
π_Êags
 & 
RTF_UP
Ë=0 || 
	`°rcmp
‘t.
π_dev
, 
i‚ame
) == 0)

1632 i‡((
addr
 & 
	`SIN_ADDR
(
π
.
π_gímask
)Ë=SIN_ADDR‘t.
π_d°
)) {

1633 
ªsu…
 = 1;

1638 
	`˛o£_rouã_èbÀ
();

1639  
ªsu…
;

1640 
	}
}

1647 
	$sifdeÁu…rouã
 (
unô
, 
u_öt32_t
 
ouøddr
, u_öt32_à
g©eway
)

1649 
πíåy
 
π
;

1651 i‡(
	`deÁu…rouã_exi°s
(&
π
, 
dÊ_rouã_mëric
Ë&& 
	`°rcmp
‘t.
π_dev
, 
i‚ame
) != 0) {

1652 i‡(
π
.
π_Êags
 & 
RTF_GATEWAY
)

1653 
	`îr‹
("notÑeplacingÉxisting defaultÑoute via %I with metric %d",

1654 
	`SIN_ADDR
(
π
.
π_g©eway
), 
dÊ_rouã_mëric
);

1656 
	`îr‹
("notÑeplacingÉxisting defaultÑouteÅhrough %s with metric %d",

1657 
π
.
π_dev
, 
dÊ_rouã_mëric
);

1661 
	`mem£t
 (&
π
, 0,  (rt));

1662 
	`SET_SA_FAMILY
 (
π
.
π_d°
, 
AF_INET
);

1664 
π
.
π_dev
 = 
i‚ame
;

1665 
π
.
π_mëric
 = 
dÊ_rouã_mëric
 + 1;

1667 i‡(
kî√l_vîsi⁄
 > 
	`KVERSION
(2,1,0)) {

1668 
	`SET_SA_FAMILY
 (
π
.
π_gímask
, 
AF_INET
);

1669 
	`SIN_ADDR
(
π
.
π_gímask
) = 0L;

1672 
π
.
π_Êags
 = 
RTF_UP
;

1673 i‡(
	`io˘l
(
sock_fd
, 
SIOCADDRT
, &
π
) < 0) {

1674 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1675 
	`îr‹
("defaultÑoute ioctl(SIOCADDRT): %m");

1679 
have_deÁu…_rouã
 = 1;

1681 
	}
}

1688 
	$cifdeÁu…rouã
 (
unô
, 
u_öt32_t
 
ouøddr
, u_öt32_à
g©eway
)

1690 
πíåy
 
π
;

1692 
have_deÁu…_rouã
 = 0;

1694 
	`mem£t
 (&
π
, '\0',  (rt));

1695 
	`SET_SA_FAMILY
 (
π
.
π_d°
, 
AF_INET
);

1696 
	`SET_SA_FAMILY
 (
π
.
π_g©eway
, 
AF_INET
);

1698 
π
.
π_dev
 = 
i‚ame
;

1700 
π
.
π_dev
 = 
i‚ame
;

1701 
π
.
π_mëric
 = 
dÊ_rouã_mëric
 + 1;

1703 i‡(
kî√l_vîsi⁄
 > 
	`KVERSION
(2,1,0)) {

1704 
	`SET_SA_FAMILY
 (
π
.
π_gímask
, 
AF_INET
);

1705 
	`SIN_ADDR
(
π
.
π_gímask
) = 0L;

1708 
π
.
π_Êags
 = 
RTF_UP
;

1709 i‡(
	`io˘l
(
sock_fd
, 
SIOCDELRT
, &
π
Ë< 0 && 
î∫o
 !
ESRCH
) {

1710 i‡(
	`°ûl_µp
()) {

1711 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1712 
	`îr‹
("defaultÑoute ioctl(SIOCDELRT): %m");

1718 
	}
}

1720 #ifde‡
INET6


1724 
	grouã_de°_∂í_cﬁ
;

1725 
›í_rouã6_èbÀ
 ();

1726 
ªad_rouã6_èbÀ
 (
ö6_πmsg
 *
π
);

1732 
	$›í_rouã6_èbÀ
 ()

1734 *
∑th
;

1736 
	`˛o£_rouã_èbÀ
();

1738 
∑th
 = 
	`∑th_to_¥ocfs
("/net/ipv6_route");

1739 
rouã_fd
 = 
	`f›í
 (
∑th
, "r");

1740 i‡(
rouã_fd
 =
NULL
) {

1741 
	`îr‹
("ˇn'à›íÑoutögÅabÀ %s: %m", 
∑th
);

1746 
rouã_de°_cﬁ
 = 0;

1747 
rouã_de°_∂í_cﬁ
 = 1;

1748 
rouã_gw_cﬁ
 = 4;

1749 
rouã_mëric_cﬁ
 = 5;

1750 
rouã_Êags_cﬁ
 = 8;

1751 
rouã_dev_cﬁ
 = 9;

1752 
rouã_num_cﬁs
 = 10;

1755 
	}
}

1762 
	$hex_to_ö6_addr
(
ö6_addr
 *
addr
, c⁄° *
s
)

1764 
hex8
[9];

1765 
i
;

1766 
uöt32_t
 
v
;

1768 
hex8
[8] = 0;

1769 
i
 = 0; i < 4; i++) {

1770 
	`mem˝y
(
hex8
, 
s
 + 8*
i
, 8);

1771 
v
 = 
	`°πoul
(
hex8
, 
NULL
, 16);

1772 
addr
->
s6_addr32
[
i
] = 
v
;

1774 
	}
}

1776 
	$ªad_rouã6_èbÀ
(
ö6_πmsg
 *
π
)

1778 *
cﬁs
[
ROUTE_MAX_COLS
], *
p
;

1779 
cﬁ
;

1781 
	`mem£t
 (
π
, '\0',  (
ö6_πmsg
));

1783 i‡(
	`fgës
 (
rouã_buf„r
,  (rouã_buf„r), 
rouã_fd
) == (*) 0)

1786 
p
 = 
rouã_buf„r
;

1787 
cﬁ
 = 0; cﬁ < 
rouã_num_cﬁs
; ++col) {

1788 
cﬁs
[
cﬁ
] = 
	`°πok
(
p
, 
rouã_dñims
);

1789 i‡(
cﬁs
[
cﬁ
] =
NULL
)

1791 
p
 = 
NULL
;

1794 
	`hex_to_ö6_addr
(&
π
->
πmsg_d°
, 
cﬁs
[
rouã_de°_cﬁ
]);

1795 
π
->
πmsg_d°_Àn
 = 
	`°πoul
(
cﬁs
[
rouã_de°_∂í_cﬁ
], 
NULL
, 16);

1796 
	`hex_to_ö6_addr
(&
π
->
πmsg_g©eway
, 
cﬁs
[
rouã_gw_cﬁ
]);

1798 
π
->
πmsg_mëric
 = 
	`°πoul
(
cﬁs
[
rouã_mëric_cﬁ
], 
NULL
, 16);

1799 
π
->
πmsg_Êags
 = 
	`°πoul
(
cﬁs
[
rouã_Êags_cﬁ
], 
NULL
, 16);

1800 
π
->
πmsg_ifödex
 = 
	`if_«mëoödex
(
cﬁs
[
rouã_dev_cﬁ
]);

1803 
	}
}

1810 
	$deÁu…rouã6_exi°s
 (
ö6_πmsg
 *
π
, 
mëric
)

1812 
ªsu…
 = 0;

1814 i‡(!
	`›í_rouã6_èbÀ
())

1817 
	`ªad_rouã6_èbÀ
(
π
) != 0) {

1818 i‡((
π
->
πmsg_Êags
 & 
RTF_UP
) == 0)

1821 i‡(
π
->
πmsg_d°_Àn
 != 0)

1823 i‡(
π
->
πmsg_d°
.
s6_addr32
[0] == 0L

1824 && 
π
->
πmsg_d°
.
s6_addr32
[1] == 0L

1825 && 
π
->
πmsg_d°
.
s6_addr32
[2] == 0L

1826 && 
π
->
πmsg_d°
.
s6_addr32
[3] == 0L

1827 && (
mëric
 < 0 || 
π
->
πmsg_mëric
 == metric)) {

1828 
ªsu…
 = 1;

1833 
	`˛o£_rouã_èbÀ
();

1834  
ªsu…
;

1835 
	}
}

1850 
	$sif6deÁu…rouã
 (
unô
, 
eui64_t
 
ouøddr
,Éui64_à
g©eway
)

1852 
ö6_πmsg
 
π
;

1853 
buf
[
IF_NAMESIZE
];

1855 i‡(
	`deÁu…rouã6_exi°s
(&
π
, 
dÊ_rouã_mëric
) &&

1856 
π
.
πmsg_ifödex
 !
	`if_«mëoödex
(
i‚ame
)) {

1857 i‡(
π
.
πmsg_Êags
 & 
RTF_GATEWAY
)

1858 
	`îr‹
("notÑeplacingÉxisting defaultÑoute via gateway");

1860 
	`îr‹
("notÑeplacingÉxisting defaultÑouteÅhrough %s",

1861 
	`if_ödext⁄ame
(
π
.
πmsg_ifödex
, 
buf
));

1865 
	`mem£t
 (&
π
, 0,  (rt));

1867 
π
.
πmsg_ifödex
 = 
	`if_«mëoödex
(
i‚ame
);

1868 
π
.
πmsg_mëric
 = 
dÊ_rouã_mëric
 + 1;

1869 
π
.
πmsg_d°_Àn
 = 0;

1871 
π
.
πmsg_Êags
 = 
RTF_UP
;

1872 i‡(
	`io˘l
(
sock6_fd
, 
SIOCADDRT
, &
π
) < 0) {

1873 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1874 
	`îr‹
("defaultÑoute ioctl(SIOCADDRT): %m");

1878 
have_deÁu…_rouã6
 = 1;

1880 
	}
}

1887 
	$cif6deÁu…rouã
 (
unô
, 
eui64_t
 
ouøddr
,Éui64_à
g©eway
)

1889 
ö6_πmsg
 
π
;

1891 
have_deÁu…_rouã6
 = 0;

1893 
	`mem£t
 (&
π
, '\0',  (rt));

1895 
π
.
πmsg_ifödex
 = 
	`if_«mëoödex
(
i‚ame
);

1896 
π
.
πmsg_mëric
 = 
dÊ_rouã_mëric
 + 1;

1897 
π
.
πmsg_d°_Àn
 = 0;

1899 
π
.
πmsg_Êags
 = 
RTF_UP
;

1900 i‡(
	`io˘l
(
sock6_fd
, 
SIOCDELRT
, &
π
Ë< 0 && 
î∫o
 !
ESRCH
) {

1901 i‡(
	`°ûl_µp
()) {

1902 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1903 
	`îr‹
("defaultÑoute ioctl(SIOCDELRT): %m");

1909 
	}
}

1917 
	$siÂroxy¨p
 (
unô
, 
u_öt32_t
 
his_adr
)

1919 
¨¥eq
árpreq;

1920 *
f‹w_∑th
;

1922 i‡(
has_¥oxy_¨p
 == 0) {

1923 
	`mem£t
 (&
¨¥eq
, '\0', (arpreq));

1925 
	`SET_SA_FAMILY
(
¨¥eq
.
¨p_∑
, 
AF_INET
);

1926 
	`SIN_ADDR
(
¨¥eq
.
¨p_∑
Ë
his_adr
;

1927 
¨¥eq
.
¨p_Êags
 = 
ATF_PERM
 | 
ATF_PUBL
;

1932 i‡(!
	`gë_ëhî_addr
(
his_adr
, &
¨¥eq
.
¨p_ha
, 
¥oxy_¨p_dev
,

1933 (
¥oxy_¨p_dev
))) {

1934 
	`îr‹
("Cannot determineÉthernetáddress forÖroxy ARP");

1937 
	`°æ˝y
(
¨¥eq
.
¨p_dev
, 
¥oxy_¨p_dev
, (arpreq.arp_dev));

1939 i‡(
	`io˘l
(
sock_fd
, 
SIOCSARP
, (
ˇddr_t
)&
¨¥eq
) < 0) {

1940 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1941 
	`îr‹
("ioctl(SIOCSARP): %m");

1944 
¥oxy_¨p_addr
 = 
his_adr
;

1945 
has_¥oxy_¨p
 = 1;

1947 i‡(
tu√_kî√l
) {

1948 
f‹w_∑th
 = 
	`∑th_to_¥ocfs
("/sys/net/ipv4/ip_forward");

1949 i‡(
f‹w_∑th
 != 0) {

1950 
fd
 = 
	`›í
(
f‹w_∑th
, 
O_WRONLY
);

1951 i‡(
fd
 >= 0) {

1952 i‡(
	`wrôe
(
fd
, "1", 1) != 1)

1953 
	`îr‹
("Couldn'tÉnable IP forwarding: %m");

1954 
	`˛o£
(
fd
);

1961 
	}
}

1968 
	$ciÂroxy¨p
 (
unô
, 
u_öt32_t
 
his_adr
)

1970 
¨¥eq
árpreq;

1972 i‡(
has_¥oxy_¨p
) {

1973 
has_¥oxy_¨p
 = 0;

1974 
	`mem£t
 (&
¨¥eq
, '\0', (arpreq));

1975 
	`SET_SA_FAMILY
(
¨¥eq
.
¨p_∑
, 
AF_INET
);

1976 
	`SIN_ADDR
(
¨¥eq
.
¨p_∑
Ë
his_adr
;

1977 
¨¥eq
.
¨p_Êags
 = 
ATF_PERM
 | 
ATF_PUBL
;

1978 
	`°æ˝y
(
¨¥eq
.
¨p_dev
, 
¥oxy_¨p_dev
, (arpreq.arp_dev));

1980 i‡(
	`io˘l
(
sock_fd
, 
SIOCDARP
, (
ˇddr_t
)&
¨¥eq
) < 0) {

1981 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

1982 
	`w¨n
("ioctl(SIOCDARP): %m");

1987 
	}
}

1995 
	$gë_ëhî_addr
 (
u_öt32_t
 
ùaddr
,

1996 
sockaddr
 *
hwaddr
,

1997 *
«me
, 
«mñí
)

1999 
i‰eq
 *
i‰
, *
i„nd
;

2000 
u_öt32_t
 
öa
, 
mask
;

2001 *
Æü•
;

2002 
i‰eq
 i‰eq, 
be°i‰eq
;

2003 
ifc⁄f
 
ifc
;

2004 
i‰eq
 
ifs
[
MAX_IFS
];

2006 
u_öt32_t
 
be°mask
=0;

2007 
found_öãrÁ˚
 = 0;

2009 
ifc
.
ifc_Àn
 = (
ifs
);

2010 
ifc
.
ifc_ªq
 = 
ifs
;

2011 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

2012 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

2013 
	`îr‹
("io˘l(SIOCGIFCONF): %m (löê%d)", 
__LINE__
);

2021 
i„nd
 = 
ifs
 + (
ifc
.
ifc_Àn
 / (
i‰eq
));

2022 
i‰
 = 
ifc
.
ifc_ªq
; i‰ < 
i„nd
; ifr++) {

2023 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 =
AF_INET
) {

2024 
öa
 = 
	`SIN_ADDR
(
i‰
->
i‰_addr
);

2025 
	`°æ˝y
(
i‰eq
.
i‰_«me
, 
i‰
->ifr_name, (ifreq.ifr_name));

2030 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFFLAGS
, &
i‰eq
) < 0)

2033 i‡(((
i‰eq
.
i‰_Êags
 ^ 
FLAGS_GOOD
Ë& 
FLAGS_MASK
) != 0)

2038 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFNETMASK
, &
i‰eq
) < 0)

2041 
mask
 = 
	`SIN_ADDR
(
i‰eq
.
i‰_addr
);

2043 i‡(((
ùaddr
 ^ 
öa
Ë& 
mask
) != 0)

2046 i‡(
mask
 >
be°mask
) {

2049 
found_öãrÁ˚
 = 1;

2050 
be°i‰eq
 = 
i‰eq
;

2051 
be°mask
 = 
mask
;

2056 i‡(!
found_öãrÁ˚
)  0;

2058 
	`°æ˝y
(
«me
, 
be°i‰eq
.
i‰_«me
, 
«mñí
);

2061 
Æü•
 = 
	`°rchr
(
«me
, ':');

2062 i‡(
Æü•
 != 0)

2063 *
Æü•
 = 0;

2065 
	`öfo
("found i¡îÁ˚ %†f‹ÖroxyáΩ", 
«me
);

2069 
	`mem£t
 (&
be°i‰eq
.
i‰_hwaddr
, 0,  (
sockaddr
));

2070 i‡(
	`io˘l
 (
sock_fd
, 
SIOCGIFHWADDR
, &
be°i‰eq
) < 0) {

2071 
	`îr‹
("SIOCGIFHWADDR(%s): %m", 
be°i‰eq
.
i‰_«me
);

2075 
	`mem˝y
 (
hwaddr
,

2076 &
be°i‰eq
.
i‰_hwaddr
,

2077  (
sockaddr
));

2080 
	}
}

2087 
	$gë_if_hwaddr
(
u_ch¨
 *
addr
, *
«me
)

2089 
i‰eq
 ifreq;

2090 
ªt
, 
sock_fd
;

2092 
sock_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

2093 i‡(
sock_fd
 < 0)

2095 
	`mem£t
(&
i‰eq
.
i‰_hwaddr
, 0, (
sockaddr
));

2096 
	`°æ˝y
(
i‰eq
.
i‰_«me
, 
«me
, (ifreq.ifr_name));

2097 
ªt
 = 
	`io˘l
(
sock_fd
, 
SIOCGIFHWADDR
, &
i‰eq
);

2098 
	`˛o£
(
sock_fd
);

2099 i‡(
ªt
 >= 0)

2100 
	`mem˝y
(
addr
, 
i‰eq
.
i‰_hwaddr
.
ß_d©a
, 6);

2101  
ªt
;

2102 
	}
}

2109 
	$gë_fú°_ëhî√t
()

2112 
	}
}

2124 
u_öt32_t
 
	$GëMask
 (
u_öt32_t
 
addr
)

2126 
u_öt32_t
 
mask
, 
nmask
, 
öa
;

2127 
i‰eq
 *
i‰
, *
i„nd
, ifreq;

2128 
ifc⁄f
 
ifc
;

2129 
i‰eq
 
ifs
[
MAX_IFS
];

2131 
addr
 = 
	`¡ohl
(addr);

2133 i‡(
	`IN_CLASSA
(
addr
))

2134 
nmask
 = 
IN_CLASSA_NET
;

2135 i‡(
	`IN_CLASSB
(
addr
))

2136 
nmask
 = 
IN_CLASSB_NET
;

2138 
nmask
 = 
IN_CLASSC_NET
;

2141 
mask
 = 
√tmask
 | 
	`ht⁄l
(
nmask
);

2145 
ifc
.
ifc_Àn
 = (
ifs
);

2146 
ifc
.
ifc_ªq
 = 
ifs
;

2147 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

2148 i‡–! 
	`ok_îr‹
 ( 
î∫o
 ))

2149 
	`w¨n
("io˘l(SIOCGIFCONF): %m (löê%d)", 
__LINE__
);

2150  
mask
;

2153 
i„nd
 = (
i‰eq
 *Ë(
ifc
.
ifc_buf
 + ifc.
ifc_Àn
);

2154 
i‰
 = 
ifc
.
ifc_ªq
; i‰ < 
i„nd
; ifr++) {

2158 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
)

2160 
öa
 = 
	`SIN_ADDR
(
i‰
->
i‰_addr
);

2161 i‡(((
	`¡ohl
(
öa
Ë^ 
addr
Ë& 
nmask
) != 0)

2166 
	`°æ˝y
(
i‰eq
.
i‰_«me
, 
i‰
->ifr_name, (ifreq.ifr_name));

2167 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFFLAGS
, &
i‰eq
) < 0)

2170 i‡(((
i‰eq
.
i‰_Êags
 ^ 
FLAGS_GOOD
Ë& 
FLAGS_MASK
) != 0)

2175 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFNETMASK
, &
i‰eq
) < 0)

2177 
mask
 |
	`SIN_ADDR
(
i‰eq
.
i‰_addr
);

2180  
mask
;

2181 
	}
}

2188 
	$decode_vîsi⁄
 (*
buf
, *
vîsi⁄
,

2189 *
modifiˇti⁄
, *
∑tch
)

2191 *
ídp
;

2193 *
vîsi⁄
 = (Ë
	`°πoul
 (
buf
, &
ídp
, 10);

2194 *
modifiˇti⁄
 = 0;

2195 *
∑tch
 = 0;

2197 i‡(
ídp
 !
buf
 && *endp == '.') {

2198 
buf
 = 
ídp
 + 1;

2199 *
modifiˇti⁄
 = (Ë
	`°πoul
 (
buf
, &
ídp
, 10);

2200 i‡(
ídp
 !
buf
 && *endp == '.') {

2201 
buf
 = 
ídp
 + 1;

2202 *
∑tch
 = (Ë
	`°πoul
 (
buf
, &buf, 10);

2205 
	}
}

2213 
	$µp_ªgi°îed
()

2215 
loˇl_fd
;

2216 
mfd
 = -1;

2217 
ªt
 = 0;

2218 
¶ave
[16];

2227 i‡(!
	`gë_±y
(&
mfd
, &
loˇl_fd
, 
¶ave
, 0)) {

2228 
no_µp_msg
 = "Couldn't determine if PPP is supported (no freeÖtys)";

2235 i‡(
	`io˘l
(
loˇl_fd
, 
TIOCSETD
, &
µp_disc
) < 0) {

2236 
	`îr‹
("io˘l(TIOCSETD(PPP)): %m (löê%d)", 
__LINE__
);

2238 
ªt
 = 1;

2240 
	`˛o£
(
loˇl_fd
);

2241 
	`˛o£
(
mfd
);

2242  
ªt
;

2243 
	}
}

2251 
	$µp_avaûabÀ
()

2253 
s
, 
ok
, 
fd
;

2254 
i‰eq
 
i‰
;

2255 
size
;

2256 
my_vîsi⁄
, 
my_modifiˇti⁄
, 
my_∑tch
;

2257 
osmaj
, 
osmö
, 
o•©ch
;

2260 
	`u«me
(&
ut¢ame
);

2261 
osmaj
 = 
osmö
 = 
o•©ch
 = 0;

2262 
	`ssˇnf
(
ut¢ame
.
ªÀa£
, "%d.%d.%d", &
osmaj
, &
osmö
, &
o•©ch
);

2263 
kî√l_vîsi⁄
 = 
	`KVERSION
(
osmaj
, 
osmö
, 
o•©ch
);

2265 
fd
 = 
	`›í
("/dev/µp", 
O_RDWR
);

2266 i‡(
fd
 >= 0) {

2267 
√w_°yÀ_drivî
 = 1;

2270 
drivî_vîsi⁄
 = 2;

2271 
drivî_modifiˇti⁄
 = 4;

2272 
drivî_∑tch
 = 0;

2273 
	`˛o£
(
fd
);

2277 i‡(
kî√l_vîsi⁄
 >
	`KVERSION
(2,3,13)) {

2278 
	`îr‹
("Couldn't openÅhe /dev/ppp device: %m");

2279 i‡(
î∫o
 =
ENOENT
)

2280 
no_µp_msg
 =

2284 i‡(
î∫o
 =
ENODEV
 ||Éºnÿ=
ENXIO
)

2285 
no_µp_msg
 =

2291 
no_µp_msg
 =

2302 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

2303 i‡(
s
 < 0)

2306 
	`°æ˝y
 (
i‰
.
i‰_«me
, "ppp0",  (ifr.ifr_name));

2307 
ok
 = 
	`io˘l
(
s
, 
SIOCGIFFLAGS
, (
ˇddr_t
Ë&
i‰
) >= 0;

2313 i‡(!
ok
) {

2314 i‡(
	`µp_ªgi°îed
()) {

2315 
	`°æ˝y
 (
i‰
.
i‰_«me
, "ppp0",  (ifr.ifr_name));

2316 
ok
 = 
	`io˘l
(
s
, 
SIOCGIFFLAGS
, (
ˇddr_t
Ë&
i‰
) >= 0;

2322 i‡(
ok
)

2323 
ok
 = 
	`io˘l
 (
s
, 
SIOCGIFHWADDR
, (
ˇddr_t
Ë&
i‰
) >= 0;

2325 i‡(
ok
 && ((
i‰
.
i‰_hwaddr
.
ß_Ámûy
 & ~0xFFË!
ARPHRD_PPP
))

2326 
ok
 = 0;

2332 i‡(
ok
) {

2333 
abBuf„r
 [1024];

2335 
i‰
.
i‰_d©a
 = 
abBuf„r
;

2336 
size
 = 
	`io˘l
 (
s
, 
SIOCGPPPVER
, (
ˇddr_t
Ë&
i‰
);

2337 i‡(
size
 < 0) {

2338 
	`îr‹
("Couldn'tÑead driver version: %m");

2339 
ok
 = 0;

2340 
no_µp_msg
 = "Sorry, couldn't verify kernel driver version\n";

2343 
	`decode_vîsi⁄
(
abBuf„r
,

2344 &
drivî_vîsi⁄
,

2345 &
drivî_modifiˇti⁄
,

2346 &
drivî_∑tch
);

2350 
	`decode_vîsi⁄
(
VERSION
,

2351 &
my_vîsi⁄
,

2352 &
my_modifiˇti⁄
,

2353 &
my_∑tch
);

2356 i‡(
drivî_vîsi⁄
 !
my_vîsi⁄
)

2357 
ok
 = 0;

2360 i‡(
drivî_modifiˇti⁄
 < 3) {

2361 i‡(
drivî_modifiˇti⁄
 >= 2) {

2363 
drivî_is_ﬁd
 = 1;

2365 
ok
 = 0;

2369 i‡(!
ok
) {

2370 
	`¶¥ötf
(
rouã_buf„r
, (route_buffer),

2372 
drivî_vîsi⁄
, 
drivî_modifiˇti⁄
, 
drivî_∑tch
);

2374 
no_µp_msg
 = 
rouã_buf„r
;

2378 
	`˛o£
(
s
);

2379  
ok
;

2380 
	}
}

2382 #i‚de‡
HAVE_LOGWTMP


2388 
	$logwtmp
 (c⁄° *
löe
, c⁄° *
«me
, c⁄° *
ho°
)

2390 
utmp
 
ut
, *
uç
;

2391 
pid_t
 
mypid
 = 
	`gëpid
();

2392 #i‡
__GLIBC__
 < 2

2393 
wtmp
;

2400 
	`utm≤ame
(
_PATH_UTMP
);

2401 
	`£tuã¡
();

2402 (
uç
 = 
	`gëuã¡
()Ë&& (uç->
ut_pid
 !
mypid
))

2405 i‡(
uç
)

2406 
	`mem˝y
(&
ut
, 
uç
, (ut));

2409 
	`mem£t
(&
ut
, 0, (ut));

2411 i‡(
ut
.
ut_id
[0] == 0)

2412 
	`°∫˝y
(
ut
.
ut_id
, 
löe
 + 3, (ut.ut_id));

2414 
	`°∫˝y
(
ut
.
ut_u£r
, 
«me
, (ut.ut_user));

2415 
	`°∫˝y
(
ut
.
ut_löe
, 
löe
, (ut.ut_line));

2417 
	`time
(&
ut
.
ut_time
);

2419 
ut
.
ut_ty≥
 = 
USER_PROCESS
;

2420 
ut
.
ut_pid
 = 
mypid
;

2423 i‡(*
ho°
)

2424 
	`°∫˝y
 (
ut
.
ut_ho°
, 
ho°
, (ut.ut_host));

2427 i‡(
ù˝_¥Ÿít
.
íabÀd_Êag
 && 
ù˝_his›ti⁄s
[0].
√g_addr
)

2428 
	`mem˝y
(&
ut
.
ut_addr
, (*Ë&
ù˝_his›ti⁄s
[0].
hißddr
,

2429 (
ut
.
ut_addr
));

2432 i‡(*
ho°
 =0 && *
«me
==0)

2433 
ut
.
ut_ho°
[0]=0;

2435 
	`putuéöe
(&
ut
);

2436 
	`íduã¡
();

2440 #i‡
__GLIBC__
 >= 2

2441 
	`updwtmp
(
_PATH_WTMP
, &
ut
);

2443 
wtmp
 = 
	`›í
(
_PATH_WTMP
, 
O_APPEND
|
O_WRONLY
);

2444 i‡(
wtmp
 >= 0) {

2445 
	`Êock
(
wtmp
, 
LOCK_EX
);

2447 i‡(
	`wrôe
 (
wtmp
, (*)&
ut
, (ut)) != (ut))

2448 
	`w¨n
("îr‹ wrôög %s: %m", 
_PATH_WTMP
);

2450 
	`Êock
(
wtmp
, 
LOCK_UN
);

2452 
	`˛o£
 (
wtmp
);

2455 
	}
}

2463 
	$sifvjcomp
 (
u
, 
vjcomp
, 
cidcomp
, 
maxcid
)

2465 
u_öt
 
x
;

2467 i‡(
vjcomp
) {

2468 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSMAXCID
, (
ˇddr_t
Ë&
maxcid
) < 0) {

2469 
	`îr‹
("Couldn't set up TCP header compression: %m");

2470 
vjcomp
 = 0;

2474 
x
 = (
vjcomp
? 
SC_COMP_TCP
: 0Ë| (
cidcomp
? 0: 
SC_NO_TCP_CCID
);

2475 
	`modify_Êags
(
µp_dev_fd
, 
SC_COMP_TCP
|
SC_NO_TCP_CCID
, 
x
);

2478 
	}
}

2485 
	$sifup
(
u
)

2487 
ªt
;

2489 i‡((
ªt
 = 
	`£tif°©e
(
u
, 1)))

2490 
if_is_up
++;

2492  
ªt
;

2493 
	}
}

2501 
	$sifdown
 (
u
)

2503 i‡(
if_is_up
 && --if_is_up > 0)

2506 #ifde‡
INET6


2507 i‡(
if6_is_up
)

2511  
	`£tif°©e
(
u
, 0);

2512 
	}
}

2514 #ifde‡
INET6


2520 
	$sif6up
(
u
)

2522 
ªt
;

2524 i‡((
ªt
 = 
	`£tif°©e
(
u
, 1)))

2525 
if6_is_up
 = 1;

2527  
ªt
;

2528 
	}
}

2536 
	$sif6down
 (
u
)

2538 
if6_is_up
 = 0;

2540 i‡(
if_is_up
)

2543  
	`£tif°©e
(
u
, 0);

2544 
	}
}

2552 
	$£tif°©e
 (
u
, 
°©e
)

2554 
i‰eq
 
i‰
;

2556 
	`mem£t
 (&
i‰
, '\0',  (ifr));

2557 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
,  (ifr.ifr_name));

2558 i‡(
	`io˘l
(
sock_fd
, 
SIOCGIFFLAGS
, (
ˇddr_t
Ë&
i‰
) < 0) {

2559 i‡(! 
	`ok_îr‹
 (
î∫o
))

2560 
	`îr‹
("io˘»(SIOCGIFFLAGS): %m (löê%d)", 
__LINE__
);

2564 i‡(
°©e
)

2565 
i‰
.
i‰_Êags
 |
IFF_UP
;

2567 
i‰
.
i‰_Êags
 &~
IFF_UP
;

2568 
i‰
.
i‰_Êags
 |
IFF_POINTOPOINT
;

2569 i‡(
	`io˘l
(
sock_fd
, 
SIOCSIFFLAGS
, (
ˇddr_t
Ë&
i‰
) < 0) {

2570 i‡(! 
	`ok_îr‹
 (
î∫o
))

2571 
	`îr‹
("io˘l(SIOCSIFFLAGS): %m (löê%d)", 
__LINE__
);

2575 
	}
}

2582 
	$siÁddr
 (
unô
, 
u_öt32_t
 
our_adr
, u_öt32_à
his_adr
,

2583 
u_öt32_t
 
√t_mask
)

2585 
i‰eq
 
i‰
;

2586 
πíåy
 
π
;

2588 
	`mem£t
 (&
i‰
, '\0',  (ifr));

2589 
	`mem£t
 (&
π
, '\0',  (rt));

2591 
	`SET_SA_FAMILY
 (
i‰
.
i‰_addr
, 
AF_INET
);

2592 
	`SET_SA_FAMILY
 (
i‰
.
i‰_d°addr
, 
AF_INET
);

2593 
	`SET_SA_FAMILY
 (
i‰
.
i‰_√tmask
, 
AF_INET
);

2595 
	`°æ˝y
 (
i‰
.
i‰_«me
, 
i‚ame
,  (ifr.ifr_name));

2599 
	`SIN_ADDR
(
i‰
.
i‰_addr
Ë
our_adr
;

2600 i‡(
	`io˘l
(
sock_fd
, 
SIOCSIFADDR
, (
ˇddr_t
Ë&
i‰
) < 0) {

2601 i‡(
î∫o
 !
EEXIST
) {

2602 i‡(! 
	`ok_îr‹
 (
î∫o
))

2603 
	`îr‹
("io˘l(SIOCSIFADDR): %m (löê%d)", 
__LINE__
);

2606 
	`w¨n
("ioctl(SIOCSIFADDR): AddressálreadyÉxists");

2613 i‡(
his_adr
 != 0) {

2614 
	`SIN_ADDR
(
i‰
.
i‰_d°addr
Ë
his_adr
;

2615 i‡(
	`io˘l
(
sock_fd
, 
SIOCSIFDSTADDR
, (
ˇddr_t
Ë&
i‰
) < 0) {

2616 i‡(! 
	`ok_îr‹
 (
î∫o
))

2617 
	`îr‹
("io˘l(SIOCSIFDSTADDR): %m (löê%d)", 
__LINE__
);

2625 i‡(
kî√l_vîsi⁄
 >
	`KVERSION
(2,1,16))

2626 
√t_mask
 = ~0L;

2627 i‡(
√t_mask
 != 0) {

2628 
	`SIN_ADDR
(
i‰
.
i‰_√tmask
Ë
√t_mask
;

2629 i‡(
	`io˘l
(
sock_fd
, 
SIOCSIFNETMASK
, (
ˇddr_t
Ë&
i‰
) < 0) {

2630 i‡(! 
	`ok_îr‹
 (
î∫o
))

2631 
	`îr‹
("io˘l(SIOCSIFNETMASK): %m (löê%d)", 
__LINE__
);

2638 i‡(
kî√l_vîsi⁄
 < 
	`KVERSION
(2,1,16)) {

2639 
	`SET_SA_FAMILY
 (
π
.
π_d°
, 
AF_INET
);

2640 
	`SET_SA_FAMILY
 (
π
.
π_g©eway
, 
AF_INET
);

2641 
π
.
π_dev
 = 
i‚ame
;

2643 
	`SIN_ADDR
(
π
.
π_g©eway
) = 0L;

2644 
	`SIN_ADDR
(
π
.
π_d°
Ë
his_adr
;

2645 
π
.
π_Êags
 = 
RTF_UP
 | 
RTF_HOST
;

2647 i‡(
kî√l_vîsi⁄
 > 
	`KVERSION
(2,1,0)) {

2648 
	`SET_SA_FAMILY
 (
π
.
π_gímask
, 
AF_INET
);

2649 
	`SIN_ADDR
(
π
.
π_gímask
) = -1L;

2652 i‡(
	`io˘l
(
sock_fd
, 
SIOCADDRT
, &
π
) < 0) {

2653 i‡(! 
	`ok_îr‹
 (
î∫o
))

2654 
	`îr‹
("io˘l(SIOCADDRTËdevi˚Ñouã: %m (löê%d)", 
__LINE__
);

2660 i‡(
dem™d
 && 
tu√_kî√l
 && !
dy«ddr_£t


2661 && 
our_ﬁd_addr
 && our_ﬁd_add∏!
our_adr
) {

2663 *
∑th
;

2664 
fd
;

2666 
∑th
 = 
	`∑th_to_¥ocfs
("/sys/net/ipv4/ip_dynaddr");

2667 i‡(
∑th
 !0 && (
fd
 = 
	`›í
’©h, 
O_WRONLY
)) >= 0) {

2668 i‡(
	`wrôe
(
fd
, "1", 1) != 1)

2669 
	`îr‹
("Couldn'tÉnable dynamic IPáddressing: %m");

2670 
	`˛o£
(
fd
);

2672 
dy«ddr_£t
 = 1;

2674 
our_ﬁd_addr
 = 0;

2677 
	}
}

2685 
	$ciÁddr
 (
unô
, 
u_öt32_t
 
our_adr
, u_öt32_à
his_adr
)

2687 
i‰eq
 
i‰
;

2689 i‡(
kî√l_vîsi⁄
 < 
	`KVERSION
(2,1,16)) {

2693 
πíåy
 
π
;

2694 
	`mem£t
 (&
π
, '\0',  (rt));

2696 
	`SET_SA_FAMILY
 (
π
.
π_d°
, 
AF_INET
);

2697 
	`SET_SA_FAMILY
 (
π
.
π_g©eway
, 
AF_INET
);

2698 
π
.
π_dev
 = 
i‚ame
;

2700 
	`SIN_ADDR
(
π
.
π_g©eway
) = 0;

2701 
	`SIN_ADDR
(
π
.
π_d°
Ë
his_adr
;

2702 
π
.
π_Êags
 = 
RTF_UP
 | 
RTF_HOST
;

2704 i‡(
kî√l_vîsi⁄
 > 
	`KVERSION
(2,1,0)) {

2705 
	`SET_SA_FAMILY
 (
π
.
π_gímask
, 
AF_INET
);

2706 
	`SIN_ADDR
(
π
.
π_gímask
) = -1L;

2709 i‡(
	`io˘l
(
sock_fd
, 
SIOCDELRT
, &
π
Ë< 0 && 
î∫o
 !
ESRCH
) {

2710 i‡(
	`°ûl_µp
(Ë&& ! 
	`ok_îr‹
 (
î∫o
))

2711 
	`îr‹
("io˘l(SIOCDELRTËdevi˚Ñouã: %m (löê%d)", 
__LINE__
);

2717 
	`mem£t
(&
i‰
, 0, (ifr));

2718 
	`SET_SA_FAMILY
(
i‰
.
i‰_addr
, 
AF_INET
);

2719 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

2721 i‡(
	`io˘l
(
sock_fd
, 
SIOCSIFADDR
, (
ˇddr_t
Ë&
i‰
) < 0) {

2722 i‡(! 
	`ok_îr‹
 (
î∫o
)) {

2723 
	`îr‹
("io˘l(SIOCSIFADDR): %m (löê%d)", 
__LINE__
);

2728 
our_ﬁd_addr
 = 
our_adr
;

2731 
	}
}

2733 #ifde‡
INET6


2738 
	$sif6addr
 (
unô
, 
eui64_t
 
our_eui64
,Éui64_à
his_eui64
)

2740 
ö6_i‰eq
 
i‰6
;

2741 
i‰eq
 
i‰
;

2742 
ö6_πmsg
 
π6
;

2744 i‡(
sock6_fd
 < 0) {

2745 
î∫o
 = -
sock6_fd
;

2746 
	`îr‹
("IPv6 socket creation failed: %m");

2749 
	`mem£t
(&
i‰
, 0,  (ifr));

2750 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

2751 i‡(
	`io˘l
(
sock6_fd
, 
SIOCGIFINDEX
, (
ˇddr_t
Ë&
i‰
) < 0) {

2752 
	`îr‹
("sif6addr: io˘l(SIOCGIFINDEX): %m (löê%d)", 
__LINE__
);

2757 
	`mem£t
(&
i‰6
, 0, (ifr6));

2758 
	`IN6_LLADDR_FROM_EUI64
(
i‰6
.
i‰6_addr
, 
our_eui64
);

2759 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

2760 
i‰6
.
i‰6_¥efixÀn
 = 128;

2762 i‡(
	`io˘l
(
sock6_fd
, 
SIOCSIFADDR
, &
i‰6
) < 0) {

2763 
	`îr‹
("sif6addr: io˘l(SIOCSIFADDR): %m (löê%d)", 
__LINE__
);

2768 
	`mem£t
(&
π6
, 0, (rt6));

2769 
	`IN6_LLADDR_FROM_EUI64
(
π6
.
πmsg_d°
, 
his_eui64
);

2770 
π6
.
πmsg_Êags
 = 
RTF_UP
;

2771 
π6
.
πmsg_d°_Àn
 = 128;

2772 
π6
.
πmsg_ifödex
 = 
i‰
.
i‰_ifödex
;

2773 
π6
.
πmsg_mëric
 = 1;

2775 i‡(
	`io˘l
(
sock6_fd
, 
SIOCADDRT
, &
π6
) < 0) {

2776 
	`îr‹
("sif6addr: io˘l(SIOCADDRT): %m (löê%d)", 
__LINE__
);

2781 
	}
}

2788 
	$cif6addr
 (
unô
, 
eui64_t
 
our_eui64
,Éui64_à
his_eui64
)

2790 
i‰eq
 
i‰
;

2791 
ö6_i‰eq
 
i‰6
;

2793 i‡(
sock6_fd
 < 0) {

2794 
î∫o
 = -
sock6_fd
;

2795 
	`îr‹
("IPv6 socket creation failed: %m");

2798 
	`mem£t
(&
i‰
, 0, (ifr));

2799 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

2800 i‡(
	`io˘l
(
sock6_fd
, 
SIOCGIFINDEX
, (
ˇddr_t
Ë&
i‰
) < 0) {

2801 
	`îr‹
("cif6addr: io˘l(SIOCGIFINDEX): %m (löê%d)", 
__LINE__
);

2805 
	`mem£t
(&
i‰6
, 0, (ifr6));

2806 
	`IN6_LLADDR_FROM_EUI64
(
i‰6
.
i‰6_addr
, 
our_eui64
);

2807 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

2808 
i‰6
.
i‰6_¥efixÀn
 = 128;

2810 i‡(
	`io˘l
(
sock6_fd
, 
SIOCDIFADDR
, &
i‰6
) < 0) {

2811 i‡(
î∫o
 !
EADDRNOTAVAIL
) {

2812 i‡(! 
	`ok_îr‹
 (
î∫o
))

2813 
	`îr‹
("cif6addr: io˘l(SIOCDIFADDR): %m (löê%d)", 
__LINE__
);

2816 
	`w¨n
("cif6addr: ioctl(SIOCDIFADDR): No sucháddress");

2821 
	}
}

2829 
	$gë_±y
(
ma°î_fdp
, 
¶ave_fdp
, 
¶ave_«me
, 
uid
)

2830 *
ma°î_fdp
;

2831 *
¶ave_fdp
;

2832 *
¶ave_«me
;

2833 
uid
;

2835 
i
, 
mfd
, 
sfd
 = -1;

2836 
±y_«me
[16];

2837 
ãrmios
 
tios
;

2839 #ifde‡
TIOCGPTN


2843 
mfd
 = 
	`›í
("/dev/±mx", 
O_RDWR
);

2844 i‡(
mfd
 >= 0) {

2845 
±n
;

2846 i‡(
	`io˘l
(
mfd
, 
TIOCGPTN
, &
±n
) >= 0) {

2847 
	`¶¥ötf
(
±y_«me
, ’ty_«me), "/dev/±s/%d", 
±n
);

2848 
	`chmod
(
±y_«me
, 
S_IRUSR
 | 
S_IWUSR
);

2849 #ifde‡
TIOCSPTLCK


2850 
±n
 = 0;

2851 i‡(
	`io˘l
(
mfd
, 
TIOCSPTLCK
, &
±n
) < 0)

2852 
	`w¨n
("Couldn'àu∆ockÖty sœvê%s: %m", 
±y_«me
);

2854 i‡((
sfd
 = 
	`›í
(
±y_«me
, 
O_RDWR
 | 
O_NOCTTY
)) < 0)

2856 
	`w¨n
("Couldn'à›íÖty sœvê%s: %m", 
±y_«me
);

2857 
	`˛o£
(
mfd
);

2863 i‡(
sfd
 < 0) {

2865 
i
 = 0; i < 64; ++i) {

2866 
	`¶¥ötf
(
±y_«me
, (pty_name), "/dev/pty%c%x",

2867 'p' + 
i
 / 16, i % 16);

2868 
mfd
 = 
	`›í
(
±y_«me
, 
O_RDWR
, 0);

2869 i‡(
mfd
 >= 0) {

2870 
±y_«me
[5] = 't';

2871 
sfd
 = 
	`›í
(
±y_«me
, 
O_RDWR
 | 
O_NOCTTY
, 0);

2872 i‡(
sfd
 >= 0) {

2873 
	`fchown
(
sfd
, 
uid
, -1);

2874 
	`fchmod
(
sfd
, 
S_IRUSR
 | 
S_IWUSR
);

2877 
	`˛o£
(
mfd
);

2882 i‡(
sfd
 < 0)

2885 
	`°æ˝y
(
¶ave_«me
, 
±y_«me
, 16);

2886 *
ma°î_fdp
 = 
mfd
;

2887 *
¶ave_fdp
 = 
sfd
;

2888 i‡(
	`tcgë©å
(
sfd
, &
tios
) == 0) {

2889 
tios
.
c_cÊag
 &~(
CSIZE
 | 
CSTOPB
 | 
PARENB
);

2890 
tios
.
c_cÊag
 |
CS8
 | 
CREAD
 | 
CLOCAL
;

2891 
tios
.
c_iÊag
 = 
IGNPAR
;

2892 
tios
.
c_oÊag
 = 0;

2893 
tios
.
c_lÊag
 = 0;

2894 i‡(
	`tc£èâr
(
sfd
, 
TCSAFLUSH
, &
tios
) < 0)

2895 
	`w¨n
("couldn't setáttributes onÖty: %m");

2897 
	`w¨n
("couldn't getáttributes onÖty: %m");

2900 
	}
}

2909 
	$›í_µp_lo›back
()

2911 
Êags
;

2913 
lo›ed
 = 1;

2914 i‡(
√w_°yÀ_drivî
) {

2916 i‡(
	`make_µp_unô
() < 0)

2917 
	`dõ
(1);

2918 
	`modify_Êags
(
µp_dev_fd
, 0, 
SC_LOOP_TRAFFIC
);

2919 
	`£t_kdebugÊag
(
kdebugÊag
);

2920 
µp_fd
 = -1;

2921  
µp_dev_fd
;

2924 i‡(!
	`gë_±y
(&
ma°î_fd
, &
¶ave_fd
, 
lo›_«me
, 0))

2925 
	`Áèl
("No freeÖty forÜoopback");

2927 
	`£t_µp_fd
(
¶ave_fd
);

2929 
Êags
 = 
	`f˙é
(
ma°î_fd
, 
F_GETFL
);

2930 i‡(
Êags
 == -1 ||

2931 
	`f˙é
(
ma°î_fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

2932 
	`w¨n
("couldn't set masterÜoopbackÅoÇonblock: %m");

2934 
Êags
 = 
	`f˙é
(
µp_fd
, 
F_GETFL
);

2935 i‡(
Êags
 == -1 ||

2936 
	`f˙é
(
µp_fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

2937 
	`w¨n
("couldn't set slaveÜoopbackÅoÇonblock: %m");

2939 i‡(
	`io˘l
(
µp_fd
, 
TIOCSETD
, &
µp_disc
) < 0)

2940 
	`Áèl
("io˘l(TIOCSETD): %m (löê%d)", 
__LINE__
);

2944 i‡(
	`io˘l
(
µp_fd
, 
PPPIOCGUNIT
, &
ifunô
) < 0)

2945 
	`Áèl
("io˘l(PPPIOCGUNIT): %m (löê%d)", 
__LINE__
);

2949 
	`£t_kdebugÊag
 (
kdebugÊag
);

2951  
ma°î_fd
;

2952 
	}
}

2960 
	$si‚pmode
(
u
, 
¥Ÿo
, 
mode
)

2961 
u
;

2962 
¥Ÿo
;

2963 
NPmode
 
mode
;

2965 
≈io˘l
 
≈i
;

2967 
≈i
.
¥Ÿocﬁ
 = 
¥Ÿo
;

2968 
≈i
.
mode
 = mode;

2969 i‡(
	`io˘l
(
µp_dev_fd
, 
PPPIOCSNPMODE
, (
ˇddr_t
Ë&
≈i
) < 0) {

2970 i‡(! 
	`ok_îr‹
 (
î∫o
))

2971 
	`îr‹
("io˘l(PPPIOCSNPMODE, %d, %d): %m", 
¥Ÿo
, 
mode
);

2975 
	}
}

2983 
	$sùxÁddr
 (
unô
, 
√tw‹k
, * 
node
 )

2985 
ªsu…
 = 1;

2987 #ifde‡
IPX_CHANGE


2988 
skfd
;

2989 
i‰eq
 
i‰
;

2990 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë&
i‰
.
i‰_addr
;

2992 
skfd
 = 
	`sockë
 (
AF_IPX
, 
SOCK_DGRAM
, 0);

2993 i‡(
skfd
 < 0) {

2994 i‡(! 
	`ok_îr‹
 (
î∫o
))

2995 
	`dbglog
("sockë(AF_IPX): %m (löê%d)", 
__LINE__
);

2996 
ªsu…
 = 0;

2999 
	`mem£t
 (&
i‰
, '\0',  (ifr));

3000 
	`°æ˝y
 (
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

3002 
	`mem˝y
 (
sùx
->
sùx_node
, 
node
, 
IPX_NODE_LEN
);

3003 
sùx
->
sùx_Ámûy
 = 
AF_IPX
;

3004 
sùx
->
sùx_p‹t
 = 0;

3005 
sùx
->
sùx_√tw‹k
 = 
	`ht⁄l
 (
√tw‹k
);

3006 
sùx
->
sùx_ty≥
 = 
IPX_FRAME_ETHERII
;

3007 
sùx
->
sùx_a˘i⁄
 = 
IPX_CRTITF
;

3011 i‡(
	`io˘l
(
skfd
, 
SIOCSIFADDR
, (
ˇddr_t
Ë&
i‰
) < 0) {

3012 
ªsu…
 = 0;

3013 i‡(
î∫o
 !
EEXIST
) {

3014 i‡(! 
	`ok_îr‹
 (
î∫o
))

3015 
	`dbglog
("io˘l(SIOCSIFADDR, CRTITF): %m (löê%d)", 
__LINE__
);

3018 
	`w¨n
("ioctl(SIOCSIFADDR, CRTITF): AddressálreadyÉxists");

3021 
	`˛o£
 (
skfd
);

3024  
ªsu…
;

3025 
	}
}

3034 
	$cùxÁddr
 (
unô
)

3036 
ªsu…
 = 1;

3038 #ifde‡
IPX_CHANGE


3039 
skfd
;

3040 
i‰eq
 
i‰
;

3041 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë&
i‰
.
i‰_addr
;

3043 
skfd
 = 
	`sockë
 (
AF_IPX
, 
SOCK_DGRAM
, 0);

3044 i‡(
skfd
 < 0) {

3045 i‡(! 
	`ok_îr‹
 (
î∫o
))

3046 
	`dbglog
("sockë(AF_IPX): %m (löê%d)", 
__LINE__
);

3047 
ªsu…
 = 0;

3050 
	`mem£t
 (&
i‰
, '\0',  (ifr));

3051 
	`°æ˝y
 (
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

3053 
sùx
->
sùx_ty≥
 = 
IPX_FRAME_ETHERII
;

3054 
sùx
->
sùx_a˘i⁄
 = 
IPX_DLTITF
;

3055 
sùx
->
sùx_Ámûy
 = 
AF_IPX
;

3059 i‡(
	`io˘l
(
skfd
, 
SIOCSIFADDR
, (
ˇddr_t
Ë&
i‰
) < 0) {

3060 i‡(! 
	`ok_îr‹
 (
î∫o
))

3061 
	`öfo
("io˘l(SIOCSIFADDR, IPX_DLTITF): %m (löê%d)", 
__LINE__
);

3062 
ªsu…
 = 0;

3064 
	`˛o£
 (
skfd
);

3067  
ªsu…
;

3068 
	}
}

3074 
	$gë_ho°_£ed
()

3076 
h
;

3077 *
p
 = 
ho°«me
;

3079 
h
 = 407;

3080 
p
 = 
ho°«me
; *p != 0; ++p)

3081 
h
 = h * 37 + *
p
;

3082  
h
;

3083 
	}
}

3091 
	$sys_check_›ti⁄s
()

3093 #ifde‡
IPX_CHANGE


3097 *
∑th
;

3099 i‡(
ùx˝_¥Ÿít
.
íabÀd_Êag
) {

3100 
°©
 
°©_buf
;

3101 i‡–((
∑th
 = 
	`∑th_to_¥ocfs
("/√t/ùx/öãrÁ˚")Ë=
NULL


3102 && (
∑th
 = 
	`∑th_to_¥ocfs
("/√t/ùx_öãrÁ˚")Ë=
NULL
)

3103 || 
	`l°©
(
∑th
, &
°©_buf
) < 0) {

3104 
	`îr‹
("IPX support isÇotÖresent inÅhe kernel\n");

3105 
ùx˝_¥Ÿít
.
íabÀd_Êag
 = 0;

3109 i‡(
dem™d
 && 
drivî_is_ﬁd
) {

3110 
	`›ti⁄_îr‹
("demand dialling isÇot supported by kernel driver "

3111 "vîsi⁄ %d.%d.%d", 
drivî_vîsi⁄
, 
drivî_modifiˇti⁄
,

3112 
drivî_∑tch
);

3115 i‡(
mu…ûök
 && !
√w_°yÀ_drivî
) {

3116 
	`w¨n
("Warning: multilink isÇot supported byÅhe kernel driver");

3117 
mu…ûök
 = 0;

3120 
	}
}

3122 #ifde‡
INET6


3131 
	$ëhî_to_eui64
(
eui64_t
 *
p_eui64
)

3133 
i‰eq
 
i‰
;

3134 
skfd
;

3135 c⁄° *
±r
;

3137 
skfd
 = 
	`sockë
(
PF_INET6
, 
SOCK_DGRAM
, 0);

3138 if(
skfd
 == -1)

3140 
	`w¨n
("couldÇot open IPv6 socket");

3144 
	`°r˝y
(
i‰
.
i‰_«me
, "eth0");

3145 if(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

3147 
	`˛o£
(
skfd
);

3148 
	`w¨n
("couldÇot obtain hardwareáddress forÉth0");

3151 
	`˛o£
(
skfd
);

3156 
±r
 = (*Ë
i‰
.
i‰_hwaddr
.
ß_d©a
;

3157 
p_eui64
->
e8
[0] = 
±r
[0] | 0x02;

3158 
p_eui64
->
e8
[1] = 
±r
[1];

3159 
p_eui64
->
e8
[2] = 
±r
[2];

3160 
p_eui64
->
e8
[3] = 0xFF;

3161 
p_eui64
->
e8
[4] = 0xFE;

3162 
p_eui64
->
e8
[5] = 
±r
[3];

3163 
p_eui64
->
e8
[6] = 
±r
[4];

3164 
p_eui64
->
e8
[7] = 
±r
[5];

3167 
	}
}

3175 
	$gë_time
(
timevÆ
 *
tv
)

3179 #i‚de‡
CLOCK_MONOTONIC


3180 
	#CLOCK_MONOTONIC
 1

	)

3182 
m⁄Ÿ⁄ic
 = -1;

3183 
time•ec
 
ts
;

3184 
ªt
;

3186 i‡(
m⁄Ÿ⁄ic
) {

3187 
ªt
 = 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

3188 i‡(
ªt
 == 0) {

3189 
m⁄Ÿ⁄ic
 = 1;

3190 i‡(
tv
) {

3191 
tv
->
tv_£c
 = 
ts
.tv_sec;

3192 
tv
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

3194  
ªt
;

3195 } i‡(
m⁄Ÿ⁄ic
 > 0)

3196  
ªt
;

3198 
m⁄Ÿ⁄ic
 = 0;

3199 
	`w¨n
("Couldn't use monotonic clock source: %m");

3202  
	`gëtimeofday
(
tv
, 
NULL
);

3203 
	}
}

	@pppd/sys-solaris.c

88 
	#RCSID
 "$Id: sys-sﬁ¨is.c,v 1.16 2008/01/30 14:26:53 c¨ls⁄j Ex∞$"

	)

90 
	~<limôs.h
>

91 
	~<°dio.h
>

92 
	~<°ddef.h
>

93 
	~<°dlib.h
>

94 
	~<°rög.h
>

95 
	~<˘y≥.h
>

96 
	~<î∫o.h
>

97 
	~<f˙é.h
>

98 
	~<uni°d.h
>

99 
	~<ãrmios.h
>

100 #i‚de‡
CRTSCTS


101 
	~<sys/ãrmiox.h
>

103 
	~<sig«l.h
>

104 
	~<utmpx.h
>

105 
	~<°r›ts.h
>

106 
	~<sys/ty≥s.h
>

107 
	~<sys/ioccom.h
>

108 
	~<sys/°ªam.h
>

109 
	~<sys/°r›ts.h
>

110 
	~<sys/sockë.h
>

111 
	~<sys/sockio.h
>

112 
	~<sys/sysma¸os.h
>

113 
	~<sys/sy°emöfo.h
>

114 
	~<sys/dÕi.h
>

115 
	~<sys/°©.h
>

116 
	~<sys/mkdev.h
>

117 
	~<sys/time.h
>

118 
	~<√t/if.h
>

119 
	~<√t/if_¨p.h
>

120 
	~<√t/rouã.h
>

121 
	~<√t/µp_defs.h
>

122 
	~<√t/µpio.h
>

123 
	~<√töë/ö.h
>

124 #ifde‡
SOL2


125 
	~<sys/tihdr.h
>

126 
	~<sys/tiu£r.h
>

127 
	~<öë/comm⁄.h
>

128 
	~<öë/mib2.h
>

129 
	~<sys/ëhî√t.h
>

132 
	~"µpd.h
"

133 
	~"fsm.h
"

134 
	~"l˝.h
"

135 
	~"ù˝.h
"

136 
	~"c˝.h
"

138 #i‡!
deföed
(
PPP_DRV_NAME
)

139 
	#PPP_DRV_NAME
 "µp"

	)

142 #i‡!
deföed
(
PPP_DEV_NAME
)

143 
	#PPP_DEV_NAME
 "/dev/" 
PPP_DRV_NAME


	)

146 #i‡!
deföed
(
AHDLC_MOD_NAME
)

147 
	#AHDLC_MOD_NAME
 "µp_ahdl"

	)

150 #i‡!
deföed
(
COMP_MOD_NAME
)

151 
	#COMP_MOD_NAME
 "µp_comp"

	)

154 #i‡!
deföed
(
IP_DEV_NAME
)

155 
	#IP_DEV_NAME
 "/dev/ù"

	)

158 #i‡!
deföed
(
IP_MOD_NAME
)

159 
	#IP_MOD_NAME
 "ù"

	)

162 #i‡!
deföed
(
UDP_DEV_NAME
Ë&& deföed(
SOL2
)

163 
	#UDP_DEV_NAME
 "/dev/udp"

	)

166 #i‡!
deföed
(
UDP6_DEV_NAME
Ë&& deföed(
SOL2
)

167 
	#UDP6_DEV_NAME
 "/dev/udp6"

	)

171 #i‡
deföed
(
SOL2
)

178 *
	gmux_dev_«me
 = 
UDP_DEV_NAME
;

180 *
	gmux_dev_«me
 = 
IP_DEV_NAME
;

182 
	gµpfd
;

183 
	gfdmuxid
 = -1;

184 
	gùfd
;

185 
	gùmuxid
 = -1;

187 #i‡
deföed
(
INET6
Ë&& deföed(
SOL2
)

188 
	gù6fd
;

189 
	gù6muxid
 = -1;

190 
	gif6_is_up
 = 0;

192 
	#IN6_SOCKADDR_FROM_EUI64
(
s
, 
eui64
) do { \

193 (
s
)->
sö6_Ámûy
 = 
AF_INET6
; \

194 (
s
)->
sö6_addr
.
s6_addr32
[0] = 
	`ht⁄l
(0xfe800000); \

195 
	`eui64_c›y
(
eui64
, (
s
)->
sö6_addr
.
s6_addr32
[2]); \

196 } 0)

	)

198 
	#_IN6_LLX_FROM_EUI64
(
l
, 
s
, 
eui64
, 
as
) do { \

199 
s
->
sö6_addr
.
s6_addr32
[0] = 
	`ht⁄l
(
as
); \

200 
	`eui64_c›y
(
eui64
, 
s
->
sö6_addr
.
s6_addr32
[2]); \

201 
s
->
sö6_Ámûy
 = 
AF_INET6
; \

202 
l
.
li‰_addr
.
ss_Ámûy
 = 
AF_INET6
; \

203 
l
.
li‰_addæí
 = 64; \

204 
l
.
li‰_addr
 = 
œddr
; \

205 } 0)

	)

207 
	#_IN6A_LLX_FROM_EUI64
(
s
, 
eui64
, 
as
) do { \

208 
s
->
s6_addr32
[0] = 
	`ht⁄l
(
as
); \

209 
	`eui64_c›y
(
eui64
, 
s
->
s6_addr32
[2]); \

210 } 0)

	)

212 
	#IN6_LLADDR_FROM_EUI64
(
l
, 
s
, 
eui64
) \

213 
	`_IN6_LLX_FROM_EUI64
(
l
, 
s
, 
eui64
, 0x„800000)

	)

215 
	#IN6_LLTOKEN_FROM_EUI64
(
l
, 
s
, 
eui64
) \

216 
	`_IN6_LLX_FROM_EUI64
(
l
, 
s
, 
eui64
, 0)

	)

218 
	#IN6A_LLADDR_FROM_EUI64
(
s
, 
eui64
) \

219 
	`_IN6A_LLX_FROM_EUI64
(
s
, 
eui64
, 0x„800000)

	)

223 #i‡
deföed
(
INET6
Ë&& deföed(
SOL2
)

224 
	gfú°_ëhî_«me
[
LIFNAMSIZ
];

226 
	gfú°_ëhî_«me
[
IFNAMSIZ
];

227 
	#MAXIFS
 256

	)

230 
	gª°‹e_ãrm
;

231 
ãrmios
 
	göôãrmios
;

232 #i‚de‡
CRTSCTS


233 
ãrmiox
 
	göôãrmiox
;

234 
	gãrmiox_ok
;

236 
wösize
 
	gwsöfo
;

237 
pid_t
 
	gây_sid
;

239 
u_ch¨
 
ö∑ckë_buf
[];

241 
	#MAX_POLLFDS
 32

	)

242 
pﬁlfd
 
	gpﬁlfds
[
MAX_POLLFDS
];

243 
	gn_pﬁlfds
;

245 
	glök_mtu
, 
	glök_mru
;

247 
	#NMODULES
 32

	)

248 
	gây_nmoduÀs
;

249 
	gây_moduÀs
[
NMODULES
][
FMNAMESZ
+1];

250 
	gây_≈ushed
;

252 
	gif_is_up
;

253 
u_öt32_t
 
	gªmŸe_addr
;

254 
u_öt32_t
 
	gdeÁu…_rouã_g©eway
;

255 
eui64_t
 
	gdeÁu…_rouã_g©eway6
;

256 
u_öt32_t
 
	g¥oxy_¨p_addr
;

259 
å™¶©e_•ìd
 
__P
(());

260 
baud_øã_of
 
__P
(());

261 
gë_ëhî_addr
 
__P
((
u_öt32_t
, 
sockaddr
 *));

262 
gë_hw_addr
 
__P
((*, 
u_öt32_t
, 
sockaddr
 *));

263 
gë_hw_addr_dÕi
 
__P
((*, 
sockaddr
 *));

264 
dÕi_©èch
 
__P
((, ));

265 
dÕi_öfo_ªq
 
__P
(());

266 
dÕi_gë_ª∂y
 
__P
((, 
DL_¥imôives
 *, , ));

267 
°rio˘l
 
__P
((, , *, , ));

269 #ifde‡
SOL2


289 
	$siÂ∑
(
fd
, 
µa
)

290 
fd
;

291 
µa
;

293  ()
	`io˘l
(
fd
, 
IF_UNITSEL
, (*)&
µa
);

294 
	}
}

297 #i‡
deföed
(
SOL2
Ë&& deföed(
INET6
)

305 
	$gë_fú°_ëhî√t
()

307 
li‚um
 
li‚
;

308 
lifc⁄f
 
lifc
;

309 
li‰eq
 *
∂i‰eq
;

310 
li‰eq
 
li‰
;

311 
fd
, 
num_ifs
, 
i
, 
found
;

312 
uöt_t
 
Ê
, 
ªq_size
;

313 *
ªq
;

315 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

316 i‡(
fd
 < 0) {

323 
li‚
.
li‚_Ámûy
 = 
AF_UNSPEC
;

324 
li‚
.
li‚_Êags
 = 
LIFC_NOXMIT
;

325 i‡(
	`io˘l
(
fd
, 
SIOCGLIFNUM
, &
li‚
) < 0) {

326 
	`˛o£
(
fd
);

327 
	`îr‹
("couldÇot determineÇumber of interfaces: %m");

331 
num_ifs
 = 
li‚
.
li‚_cou¡
;

332 
ªq_size
 = 
num_ifs
 * (
li‰eq
);

333 
ªq
 = 
	`mÆloc
(
ªq_size
);

334 i‡(
ªq
 =
NULL
) {

335 
	`˛o£
(
fd
);

336 
	`îr‹
("out of memory");

343 
lifc
.
lifc_Ámûy
 = 
AF_UNSPEC
;

344 
lifc
.
lifc_Êags
 = 
LIFC_NOXMIT
;

345 
lifc
.
lifc_Àn
 = 
ªq_size
;

346 
lifc
.
lifc_buf
 = 
ªq
;

347 i‡(
	`io˘l
(
fd
, 
SIOCGLIFCONF
, &
lifc
) < 0) {

348 
	`˛o£
(
fd
);

349 
	`‰ì
(
ªq
);

350 
	`îr‹
("SIOCGLIFCONF: %m");

358 
∂i‰eq
 = 
lifc
.
lifc_ªq
;

359 
found
 = 0;

360 
i
 = 
lifc
.
lifc_Àn
 / (
li‰eq
); i > 0; i--, 
∂i‰eq
++) {

362 i‡(
	`°rchr
(
∂i‰eq
->
li‰_«me
, ':'Ë!
NULL
)

365 
	`mem£t
(&
li‰
, 0, (lifr));

366 
	`°∫˝y
(
li‰
.
li‰_«me
, 
∂i‰eq
->lifr_name, (lifr.lifr_name));

367 i‡(
	`io˘l
(
fd
, 
SIOCGLIFFLAGS
, &
li‰
) < 0) {

368 
	`˛o£
(
fd
);

369 
	`‰ì
(
ªq
);

370 
	`îr‹
("SIOCGLIFFLAGS: %m");

373 
Ê
 = 
li‰
.
li‰_Êags
;

375 i‡((
Ê
 & (
IFF_UP
|
IFF_BROADCAST
|
IFF_POINTOPOINT
|
IFF_LOOPBACK
|
IFF_NOARP
))

376 !(
IFF_UP
 | 
IFF_BROADCAST
))

379 
found
 = 1;

382 
	`‰ì
(
ªq
);

383 
	`˛o£
(
fd
);

385 i‡(
found
) {

386 
	`°∫˝y
(
fú°_ëhî_«me
, 
li‰
.
li‰_«me
, (first_ether_name));

387  (*)
fú°_ëhî_«me
;

389  
NULL
;

390 
	}
}

399 
	$gë_fú°_ëhî√t
()

401 
ifc⁄f
 
ifc
;

402 
i‰eq
 *
pi‰eq
;

403 
i‰eq
 
i‰
;

404 
fd
, 
num_ifs
, 
i
, 
found
;

405 
uöt_t
 
Ê
, 
ªq_size
;

406 *
ªq
;

408 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

409 i‡(
fd
 < 0) {

416 i‡(
	`io˘l
(
fd
, 
SIOCGIFNUM
, (*)&
num_ifs
) < 0) {

417 
num_ifs
 = 
MAXIFS
;

420 
ªq_size
 = 
num_ifs
 * (
i‰eq
);

421 
ªq
 = 
	`mÆloc
(
ªq_size
);

422 i‡(
ªq
 =
NULL
) {

423 
	`˛o£
(
fd
);

424 
	`îr‹
("out of memory");

431 
ifc
.
ifc_Àn
 = 
ªq_size
;

432 
ifc
.
ifc_buf
 = 
ªq
;

433 i‡(
	`io˘l
(
fd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

434 
	`˛o£
(
fd
);

435 
	`‰ì
(
ªq
);

436 
	`îr‹
("SIOCGIFCONF: %m");

444 
pi‰eq
 = 
ifc
.
ifc_ªq
;

445 
found
 = 0;

446 
i
 = 
ifc
.
ifc_Àn
 / (
i‰eq
); i > 0; i--, 
pi‰eq
++) {

448 i‡(
	`°rchr
(
pi‰eq
->
i‰_«me
, ':'Ë!
NULL
)

451 
	`mem£t
(&
i‰
, 0, (ifr));

452 
	`°∫˝y
(
i‰
.
i‰_«me
, 
pi‰eq
->ifr_name, (ifr.ifr_name));

453 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

454 
	`˛o£
(
fd
);

455 
	`‰ì
(
ªq
);

456 
	`îr‹
("SIOCGIFFLAGS: %m");

459 
Ê
 = 
i‰
.
i‰_Êags
;

461 i‡((
Ê
 & (
IFF_UP
|
IFF_BROADCAST
|
IFF_POINTOPOINT
|
IFF_LOOPBACK
|
IFF_NOARP
))

462 !(
IFF_UP
 | 
IFF_BROADCAST
))

465 
found
 = 1;

468 
	`‰ì
(
ªq
);

469 
	`˛o£
(
fd
);

471 i‡(
found
) {

472 
	`°∫˝y
(
fú°_ëhî_«me
, 
i‰
.
i‰_«me
, (first_ether_name));

473  (*)
fú°_ëhî_«me
;

475  
NULL
;

476 
	}
}

479 #i‡
deföed
(
SOL2
)

485 
	$gë_if_hwaddr
(
u_ch¨
 *
addr
, *
if_«me
)

487 
sockaddr
 
s_ëh_addr
;

488 
ëhî_addr
 *
ëh_addr
 = (ëhî_add∏*)&
s_ëh_addr
.
ß_d©a
;

490 i‡(
if_«me
 =
NULL
)

496 i‡(!
	`gë_hw_addr_dÕi
(
if_«me
, &
s_ëh_addr
)) {

497 
	`îr‹
("couldÇŸ obèö h¨dw¨êaddªs†f‹ %s", 
if_«me
);

501 
	`mem˝y
(
addr
, 
ëh_addr
->
ëhî_addr_o˘ë
, 6);

503 
	}
}

506 #i‡
deföed
(
SOL2
Ë&& deföed(
INET6
)

514 
	$¶i‚ame
(
fd
, 
µa
)

515 
fd
;

516 
µa
;

518 
li‰eq
 
li‰
;

519 
ªt
;

521 
	`mem£t
(&
li‰
, 0, (lifr));

522 
ªt
 = 
	`io˘l
(
fd
, 
SIOCGLIFFLAGS
, &
li‰
);

523 i‡(
ªt
 < 0)

524 
¶i‚ame_d⁄e
;

526 
li‰
.
li‰_Êags
 |
IFF_IPV6
;

527 
li‰
.
li‰_Êags
 &~(
IFF_BROADCAST
 | 
IFF_IPV4
);

528 
li‰
.
li‰_µa
 = 
µa
;

529 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

531 
ªt
 = 
	`io˘l
(
fd
, 
SIOCSLIFNAME
, &
li‰
);

533 
¶i‚ame_d⁄e
:

534  
ªt
;

537 
	}
}

549 
	$ëhî_to_eui64
(
eui64_t
 *
p_eui64
)

551 
sockaddr
 
s_ëh_addr
;

552 
ëhî_addr
 *
ëh_addr
 = (ëhî_add∏*)&
s_ëh_addr
.
ß_d©a
;

553 *
if_«me
;

555 i‡((
if_«me
 = 
	`gë_fú°_ëhî√t
()Ë=
NULL
) {

556 
	`îr‹
("noÖersistent id can be found");

563 i‡(!
	`gë_hw_addr_dÕi
(
if_«me
, &
s_ëh_addr
)) {

564 
	`îr‹
("couldÇŸ obèö h¨dw¨êaddªs†f‹ %s", 
if_«me
);

571 
p_eui64
->
e8
[0] = (
ëh_addr
->
ëhî_addr_o˘ë
[0] & 0xFF) | 0x02;

572 
p_eui64
->
e8
[1] = (
ëh_addr
->
ëhî_addr_o˘ë
[1] & 0xFF);

573 
p_eui64
->
e8
[2] = (
ëh_addr
->
ëhî_addr_o˘ë
[2] & 0xFF);

574 
p_eui64
->
e8
[3] = 0xFF;

575 
p_eui64
->
e8
[4] = 0xFE;

576 
p_eui64
->
e8
[5] = (
ëh_addr
->
ëhî_addr_o˘ë
[3] & 0xFF);

577 
p_eui64
->
e8
[6] = (
ëh_addr
->
ëhî_addr_o˘ë
[4] & 0xFF);

578 
p_eui64
->
e8
[7] = (
ëh_addr
->
ëhî_addr_o˘ë
[5] & 0xFF);

581 
	}
}

588 
	$sys_öô
()

590 
ifd
, 
x
;

591 
i‰eq
 
i‰
;

592 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

593 
i6fd
;

594 
li‰eq
 
li‰
;

596 #i‡!
	`deföed
(
SOL2
)

598 
DL_¥imôives
 
¥im
;

599 
•a˚
[64];

600 } 
ª∂y
;

603 
ùfd
 = 
	`›í
(
mux_dev_«me
, 
O_RDWR
, 0);

604 i‡(
ùfd
 < 0)

605 
	`Áèl
("Couldn't open IP device: %m");

607 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

608 
ù6fd
 = 
	`›í
(
UDP6_DEV_NAME
, 
O_RDWR
, 0);

609 i‡(
ù6fd
 < 0)

610 
	`Áèl
("Couldn't open IP device (2): %m");

613 i‡(
deÁu…_devi˚
 && !
nŸty
)

614 
ây_sid
 = 
	`gësid
((
pid_t
)0);

616 
µpfd
 = 
	`›í
(
PPP_DEV_NAME
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

617 i‡(
µpfd
 < 0)

618 
	`Áèl
("C™'à›í %s: %m", 
PPP_DEV_NAME
);

619 i‡(
kdebugÊag
 & 1) {

620 
x
 = 
PPPDBG_LOG
 + 
PPPDBG_DRIVER
;

621 
	`°rio˘l
(
µpfd
, 
PPPIO_DEBUG
, &
x
, (), 0);

625 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_NEWPPA
, &
ifunô
, 0, ()) < 0)

626 
	`Áèl
("Can't createÇew PPP interface: %m");

628 #i‡
	`deföed
(
SOL2
)

635 
	`•rötf
(
i‚ame
, 
PPP_DRV_NAME
 "%d", 
ifunô
);

642 
ifd
 = 
	`›í
(
PPP_DEV_NAME
, 
O_RDWR
, 0);

643 i‡(
ifd
 < 0)

644 
	`Áèl
("C™'à›í %†(2): %m", 
PPP_DEV_NAME
);

645 i‡(
kdebugÊag
 & 1) {

646 
x
 = 
PPPDBG_LOG
 + 
PPPDBG_DRIVER
;

647 
	`°rio˘l
(
ifd
, 
PPPIO_DEBUG
, &
x
, (), 0);

650 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

651 
i6fd
 = 
	`›í
(
PPP_DEV_NAME
, 
O_RDWR
, 0);

652 i‡(
i6fd
 < 0) {

653 
	`˛o£
(
ifd
);

654 
	`Áèl
("C™'à›í %†(3): %m", 
PPP_DEV_NAME
);

656 i‡(
kdebugÊag
 & 1) {

657 
x
 = 
PPPDBG_LOG
 + 
PPPDBG_DRIVER
;

658 
	`°rio˘l
(
i6fd
, 
PPPIO_DEBUG
, &
x
, (), 0);

662 #i‡
	`deföed
(
SOL2
)

663 i‡(
	`io˘l
(
ifd
, 
I_PUSH
, 
IP_MOD_NAME
) < 0) {

664 
	`˛o£
(
ifd
);

665 #i‡
	`deföed
(
INET6
)

666 
	`˛o£
(
i6fd
);

668 
	`Áèl
("Can'tÖush IP module: %m");

675 i‡(
	`siÂ∑
(
ifd
, 
ifunô
) < 0) {

676 
	`˛o£
 (
ifd
);

677 #i‡
	`deföed
(
INET6
)

678 
	`˛o£
(
i6fd
);

680 
	`Áèl
("C™'à£àµ®f‹ unô %d: %m", 
ifunô
);

683 #i‡
	`deföed
(
INET6
)

689 i‡(
	`io˘l
(
i6fd
, 
I_PUSH
, 
IP_MOD_NAME
) < 0) {

690 
	`˛o£
(
ifd
);

691 
	`˛o£
(
i6fd
);

692 
	`Áèl
("Can'tÖush IP module (2): %m");

700 i‡(
	`¶i‚ame
(
i6fd
, 
ifunô
) < 0) {

701 
	`˛o£
(
ifd
);

702 
	`˛o£
(
i6fd
);

703 
	`Áèl
("C™'à£ài‚amêf‹ unô %d: %m", 
ifunô
);

707 
ùmuxid
 = 
	`io˘l
(
ùfd
, 
I_PLINK
, 
ifd
);

708 
	`˛o£
(
ifd
);

709 i‡(
ùmuxid
 < 0) {

710 #i‡
	`deföed
(
INET6
)

711 
	`˛o£
(
i6fd
);

713 
	`Áèl
("Can't I_PLINK PPP deviceÅo IP: %m");

716 
	`mem£t
(&
i‰
, 0, (ifr));

717 
	`•rötf
(
i‰
.
i‰_«me
, "%s", 
i‚ame
);

718 
i‰
.
i‰_ù_muxid
 = 
ùmuxid
;

727 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFMUXID
, &
i‰
) < 0) {

728 
	`io˘l
(
ùfd
, 
I_PUNLINK
, 
ùmuxid
);

729 #i‡
	`deföed
(
INET6
)

730 
	`˛o£
(
i6fd
);

732 
	`Áèl
("SIOCSIFMUXID: %m");

737 i‡(
	`dÕi_©èch
(
ifd
, 
ifunô
) < 0 ||

738 
	`dÕi_gë_ª∂y
(
ifd
, &
ª∂y
.
¥im
, 
DL_OK_ACK
, (reply)) < 0) {

739 
	`˛o£
(
ifd
);

740 
	`Áèl
("C™'à©èchÅÿµp%d: %m", 
ifunô
);

743 
ùmuxid
 = 
	`io˘l
(
ùfd
, 
I_LINK
, 
ifd
);

744 
	`˛o£
(
ifd
);

745 i‡(
ùmuxid
 < 0)

746 
	`Áèl
("Can'tÜink PPP deviceÅo IP: %m");

749 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

750 
ù6muxid
 = 
	`io˘l
(
ù6fd
, 
I_PLINK
, 
i6fd
);

751 
	`˛o£
(
i6fd
);

752 i‡(
ù6muxid
 < 0) {

753 
	`io˘l
(
ùfd
, 
I_PUNLINK
, 
ùmuxid
);

754 
	`Áèl
("Can't I_PLINK PPP deviceÅo IP (2): %m");

757 
	`mem£t
(&
li‰
, 0, (lifr));

758 
	`•rötf
(
li‰
.
li‰_«me
, "%s", 
i‚ame
);

759 
li‰
.
li‰_ù_muxid
 = 
ù6muxid
;

764 i‡(
	`io˘l
(
ù6fd
, 
SIOCSLIFMUXID
, &
li‰
) < 0) {

765 
	`io˘l
(
ùfd
, 
I_PUNLINK
, 
ùmuxid
);

766 
	`io˘l
(
ù6fd
, 
I_PUNLINK
, 
ù6muxid
);

767 
	`Áèl
("Can'tÜink PPP deviceÅo IP (2): %m");

771 #i‡!
	`deföed
(
SOL2
)

773 
	`¶¥ötf
(
i‰
.
i‰_«me
, (i‰.i‰_«me), 
PPP_DRV_NAME
 "%d", 
ifunô
);

774 
i‰
.
i‰_mëric
 = 
ùmuxid
;

775 i‡(
	`°rio˘l
(
ùfd
, 
SIOCSIFNAME
, (*)&
i‰
,  ifr, 0) < 0)

776 
	`Áèl
("C™'à£àöãrÁ˚Çamê%s: %m", 
i‰
.
i‰_«me
);

779 
n_pﬁlfds
 = 0;

780 
	}
}

788 
	$sys_˛ónup
()

790 #i‡
	`deföed
(
SOL2
)

791 
i‰eq
 
i‰
;

792 #i‡
	`deföed
(
INET6
)

793 
li‰eq
 
li‰
;

797 #i‡
	`deföed
(
SOL2
Ë&& deföed(
INET6
)

798 i‡(
if6_is_up
)

799 
	`sif6down
(0);

801 i‡(
if_is_up
)

802 
	`sifdown
(0);

803 i‡(
deÁu…_rouã_g©eway
)

804 
	`cifdeÁu…rouã
(0, 
deÁu…_rouã_g©eway
, default_route_gateway);

805 i‡(
deÁu…_rouã_g©eway6
.
e32
[0] != 0 || default_route_gateway6.e32[1] != 0)

806 
	`cif6deÁu…rouã
(0, 
deÁu…_rouã_g©eway6
, default_route_gateway6);

807 i‡(
¥oxy_¨p_addr
)

808 
	`ciÂroxy¨p
(0, 
¥oxy_¨p_addr
);

809 #i‡
	`deföed
(
SOL2
)

814 
	`mem£t
(&
i‰
, 0, (ifr));

815 
	`•rötf
(
i‰
.
i‰_«me
, "%s", 
i‚ame
);

816 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

817 
	`îr‹
("SIOCGIFFLAGS: %m");

821 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFMUXID
, &
i‰
) < 0) {

822 
	`îr‹
("SIOCGIFMUXID: %m");

826 
ùmuxid
 = 
i‰
.
i‰_ù_muxid
;

828 i‡(
	`io˘l
(
ùfd
, 
I_PUNLINK
, 
ùmuxid
) < 0) {

829 
	`îr‹
("Can't I_PUNLINK PPP from IP: %m");

832 #i‡
	`deföed
(
INET6
)

837 
	`mem£t
(&
li‰
, 0, (lifr));

838 
	`•rötf
(
li‰
.
li‰_«me
, "%s", 
i‚ame
);

839 i‡(
	`io˘l
(
ù6fd
, 
SIOCGLIFFLAGS
, &
li‰
) < 0) {

840 
	`îr‹
("SIOCGLIFFLAGS: %m");

844 i‡(
	`io˘l
(
ù6fd
, 
SIOCGLIFMUXID
, &
li‰
) < 0) {

845 
	`îr‹
("SIOCGLIFMUXID: %m");

849 
ù6muxid
 = 
li‰
.
li‰_ù_muxid
;

851 i‡(
	`io˘l
(
ù6fd
, 
I_PUNLINK
, 
ù6muxid
) < 0) {

852 
	`îr‹
("Can't I_PUNLINK PPP from IP (2): %m");

856 
	}
}

862 
	$sys_˛o£
()

864 
	`˛o£
(
ùfd
);

865 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

866 
	`˛o£
(
ù6fd
);

868 i‡(
µpfd
 >= 0)

869 
	`˛o£
(
µpfd
);

870 
	}
}

876 
	$sys_check_›ti⁄s
()

879 
	}
}

886 
	$d´m⁄
(
nochdú
, 
no˛o£
)

887 
nochdú
, 
no˛o£
;

889 
pid
;

891 i‡((
pid
 = 
	`f‹k
()) < 0)

893 i‡(
pid
 != 0)

894 
	`exô
(0);

895 
	`£tsid
();

896 i‡(!
nochdú
)

897 
	`chdú
("/");

898 i‡(!
no˛o£
) {

899 
	`f˛o£
(
°dö
);

900 
	`f˛o£
(
°dout
);

901 
	`f˛o£
(
°dîr
);

904 
	}
}

911 
	$µp_avaûabÀ
()

913 
°©
 
buf
;

915  
	`°©
(
PPP_DEV_NAME
, &
buf
) >= 0;

916 
	}
}

928 
	$™y_com¥essi⁄s
()

930 i‡((!
l˝_w™t›ti⁄s
[0].
√g_accom¥essi⁄
) &&

931 (!
l˝_w™t›ti⁄s
[0].
√g_pcom¥essi⁄
) &&

932 (!
c˝_¥Ÿít
.
íabÀd_Êag
) &&

933 (!
ù˝_w™t›ti⁄s
[0].
√g_vj
)) {

937 
	}
}

943 
	$ây_e°ablish_µp
(
fd
)

944 
fd
;

946 
i
;

949 
i
 = 0;; ++i)

950 i‡(
	`io˘l
(
fd
, 
I_LOOK
, 
ây_moduÀs
[
i
]) < 0

951 || 
	`°rcmp
(
ây_moduÀs
[
i
], "ptem") == 0

952 || 
	`io˘l
(
fd
, 
I_POP
, 0) < 0)

954 
ây_nmoduÀs
 = 
i
;

957 
ây_≈ushed
 = 0;

959 if(!
sync_£rül
) {

960 i‡(
	`io˘l
(
fd
, 
I_PUSH
, 
AHDLC_MOD_NAME
) < 0) {

961 
	`îr‹
("Couldn'tÖush PPP Async HDLC module: %m");

964 ++
ây_≈ushed
;

966 i‡(
kdebugÊag
 & 4) {

967 
i
 = 
PPPDBG_LOG
 + 
PPPDBG_AHDLC
;

968 
	`°rio˘l
(
µpfd
, 
PPPIO_DEBUG
, &
i
, (), 0);

974 i‡(
	`™y_com¥essi⁄s
()) {

975 i‡(
	`io˘l
(
fd
, 
I_PUSH
, 
COMP_MOD_NAME
) < 0)

976 
	`îr‹
("Couldn'tÖush PPP compression module: %m");

978 ++
ây_≈ushed
;

981 i‡(
kdebugÊag
 & 2) {

982 
i
 = 
PPPDBG_LOG
;

983 i‡(
	`™y_com¥essi⁄s
())

984 
i
 +
PPPDBG_COMP
;

985 
	`°rio˘l
(
µpfd
, 
PPPIO_DEBUG
, &
i
, (), 0);

989 i‡((
fdmuxid
 = 
	`io˘l
(
µpfd
, 
I_LINK
, 
fd
)) < 0) {

990 
	`îr‹
("Can'tÜinkÅtyÅo PPP mux: %m");

994  
µpfd
;

995 
	}
}

1003 
	$ây_di£°ablish_µp
(
fd
)

1004 
fd
;

1006 
i
;

1008 i‡(
fdmuxid
 >= 0) {

1009 i‡(
	`io˘l
(
µpfd
, 
I_UNLINK
, 
fdmuxid
) < 0) {

1010 i‡(!
hungup
)

1011 
	`îr‹
("Can't unlinkÅty from PPP mux: %m");

1013 
fdmuxid
 = -1;

1015 i‡(!
hungup
) {

1016 
ây_≈ushed
 > 0 && 
	`io˘l
(
fd
, 
I_POP
, 0) >= 0)

1017 --
ây_≈ushed
;

1018 
i
 = 
ây_nmoduÀs
 - 1; i >= 0; --i)

1019 i‡(
	`io˘l
(
fd
, 
I_PUSH
, 
ây_moduÀs
[
i
]) < 0)

1020 
	`îr‹
("Couldn'tÑestoreÅty module %s: %m",

1021 
ây_moduÀs
[
i
]);

1023 i‡(
hungup
 && 
deÁu…_devi˚
 && 
ây_sid
 > 0) {

1031 
	`kûl
(
ây_sid
, 
SIGHUP
);

1034 
	}
}

1040 
	$˛ón_check
()

1042 
x
;

1043 *
s
;

1045 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_GCLEAN
, &
x
, 0, (x)) < 0)

1047 
s
 = 
NULL
;

1048 ~
x
) {

1049 
RCV_B7_0
:

1050 
s
 = "bit 7 setÅo 1";

1052 
RCV_B7_1
:

1053 
s
 = "bit 7 setÅo 0";

1055 
RCV_EVNP
:

1056 
s
 = "oddÖarity";

1058 
RCV_ODDP
:

1059 
s
 = "evenÖarity";

1062 i‡(
s
 !
NULL
) {

1063 
	`w¨n
("SerialÜink isÇot 8-bit clean:");

1064 
	`w¨n
("AŒÑe˚ived ch¨a˘î†had %s", 
s
);

1066 
	}
}

1071 
	s•ìd
 {

1072 
	m•ìd_öt
, 
	m•ìd_vÆ
;

1073 } 
	g•ìds
[] = {

1074 #ifde‡
B50


1075 { 50, 
B50
 },

1077 #ifde‡
B75


1078 { 75, 
B75
 },

1080 #ifde‡
B110


1081 { 110, 
B110
 },

1083 #ifde‡
B134


1084 { 134, 
B134
 },

1086 #ifde‡
B150


1087 { 150, 
B150
 },

1089 #ifde‡
B200


1090 { 200, 
B200
 },

1092 #ifde‡
B300


1093 { 300, 
B300
 },

1095 #ifde‡
B600


1096 { 600, 
B600
 },

1098 #ifde‡
B1200


1099 { 1200, 
B1200
 },

1101 #ifde‡
B1800


1102 { 1800, 
B1800
 },

1104 #ifde‡
B2000


1105 { 2000, 
B2000
 },

1107 #ifde‡
B2400


1108 { 2400, 
B2400
 },

1110 #ifde‡
B3600


1111 { 3600, 
B3600
 },

1113 #ifde‡
B4800


1114 { 4800, 
B4800
 },

1116 #ifde‡
B7200


1117 { 7200, 
B7200
 },

1119 #ifde‡
B9600


1120 { 9600, 
B9600
 },

1122 #ifde‡
B19200


1123 { 19200, 
B19200
 },

1125 #ifde‡
B38400


1126 { 38400, 
B38400
 },

1128 #ifde‡
EXTA


1129 { 19200, 
EXTA
 },

1131 #ifde‡
EXTB


1132 { 38400, 
EXTB
 },

1134 #ifde‡
B57600


1135 { 57600, 
B57600
 },

1137 #ifde‡
B76800


1138 { 76800, 
B76800
 },

1140 #ifde‡
B115200


1141 { 115200, 
B115200
 },

1143 #ifde‡
B153600


1144 { 153600, 
B153600
 },

1146 #ifde‡
B230400


1147 { 230400, 
B230400
 },

1149 #ifde‡
B307200


1150 { 307200, 
B307200
 },

1152 #ifde‡
B460800


1153 { 460800, 
B460800
 },

1162 
	$å™¶©e_•ìd
(
bps
)

1163 
bps
;

1165 
•ìd
 *
•ìdp
;

1167 i‡(
bps
 == 0)

1169 
•ìdp
 = 
•ìds
; s≥edp->
•ìd_öt
; speedp++)

1170 i‡(
bps
 =
•ìdp
->
•ìd_öt
)

1171  
•ìdp
->
•ìd_vÆ
;

1172 
	`w¨n
("•ìd %dÇŸ suµ‹ãd", 
bps
);

1174 
	}
}

1180 
	$baud_øã_of
(
•ìd
)

1181 
•ìd
;

1183 
•ìd
 *
•ìdp
;

1185 i‡(
•ìd
 == 0)

1187 
•ìdp
 = 
•ìds
; s≥edp->
•ìd_öt
; speedp++)

1188 i‡(
•ìd
 =
•ìdp
->
•ìd_vÆ
)

1189  
•ìdp
->
•ìd_öt
;

1191 
	}
}

1199 
	$£t_up_ây
(
fd
, 
loˇl
)

1200 
fd
, 
loˇl
;

1202 
•ìd
;

1203 
ãrmios
 
tios
;

1204 #i‡!
	`deföed
 (
CRTSCTS
)

1205 
ãrmiox
 
tiox
;

1208 i‡(!
sync_£rül
 && 
	`tcgë©å
(
fd
, &
tios
) < 0)

1209 
	`Áèl
("tcgetattr: %m");

1211 #i‚de‡
CRTSCTS


1212 
ãrmiox_ok
 = 1;

1213 i‡(!
sync_£rül
 && 
	`io˘l
 (
fd
, 
TCGETX
, &
tiox
) < 0) {

1214 
ãrmiox_ok
 = 0;

1215 i‡(
î∫o
 !
ENOTTY
)

1216 
	`îr‹
("TCGETX: %m");

1220 i‡(!
ª°‹e_ãrm
) {

1221 
öôãrmios
 = 
tios
;

1222 #i‚de‡
CRTSCTS


1223 
öôãrmiox
 = 
tiox
;

1225 i‡(!
sync_£rül
)

1226 
	`io˘l
(
fd
, 
TIOCGWINSZ
, &
wsöfo
);

1229 
tios
.
c_cÊag
 &~(
CSIZE
 | 
CSTOPB
 | 
PARENB
 | 
CLOCAL
);

1230 #ifde‡
CRTSCTS


1231 i‡(
¸ts˘s
 > 0)

1232 
tios
.
c_cÊag
 |
CRTSCTS
;

1233 i‡(
¸ts˘s
 < 0)

1234 
tios
.
c_cÊag
 &~
CRTSCTS
;

1236 i‡(
¸ts˘s
 !0 && !
ãrmiox_ok
) {

1237 
	`îr‹
("Can't set RTS/CTS flow control");

1238 } i‡(
¸ts˘s
 > 0) {

1239 
tiox
.
x_hÊag
 |
RTSXOFF
|
CTSXON
;

1240 } i‡(
¸ts˘s
 < 0) {

1241 
tiox
.
x_hÊag
 &~(
RTSXOFF
|
CTSXON
);

1245 i‡(
°›_bôs
 >= 2)

1246 
tios
.
c_cÊag
 |
CSTOPB
;

1248 
tios
.
c_cÊag
 |
CS8
 | 
CREAD
 | 
HUPCL
;

1249 i‡(
loˇl
 || !
modem
)

1250 
tios
.
c_cÊag
 |
CLOCAL
;

1251 
tios
.
c_iÊag
 = 
IGNBRK
 | 
IGNPAR
;

1252 
tios
.
c_oÊag
 = 0;

1253 
tios
.
c_lÊag
 = 0;

1254 
tios
.
c_cc
[
VMIN
] = 1;

1255 
tios
.
c_cc
[
VTIME
] = 0;

1257 i‡(
¸ts˘s
 == -2) {

1258 
tios
.
c_iÊag
 |
IXON
 | 
IXOFF
;

1259 
tios
.
c_cc
[
VSTOP
] = 0x13;

1260 
tios
.
c_cc
[
VSTART
] = 0x11;

1263 
•ìd
 = 
	`å™¶©e_•ìd
(
ö•ìd
);

1264 i‡(
•ìd
) {

1265 
	`cf£to•ìd
(&
tios
, 
•ìd
);

1266 
	`cf£ti•ìd
(&
tios
, 
•ìd
);

1268 
•ìd
 = 
	`cfgëo•ìd
(&
tios
);

1273 i‡((
•ìd
 =
B0
Ë&& !
sync_£rül
)

1274 
	`Áèl
("BaudÑ©êf‹ %†i†0;ÇìdÉx∂icô baudÑ©e", 
dev«m
);

1277 i‡(!
sync_£rül
 && 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
tios
) < 0)

1278 
	`Áèl
("tcsetattr: %m");

1280 #i‚de‡
CRTSCTS


1281 i‡(!
sync_£rül
 && 
ãrmiox_ok
 && 
	`io˘l
 (
fd
, 
TCSETXF
, &
tiox
) < 0){

1282 
	`îr‹
("TCSETXF: %m");

1286 
baud_øã
 = 
ö•ìd
 = 
	`baud_øã_of
(
•ìd
);

1287 i‡(!
sync_£rül
)

1288 
ª°‹e_ãrm
 = 1;

1289 
	}
}

1295 
	$ª°‹e_ây
(
fd
)

1296 
fd
;

1298 i‡(
ª°‹e_ãrm
) {

1299 i‡(!
deÁu…_devi˚
) {

1306 
öôãrmios
.
c_lÊag
 &~(
ECHO
 | 
ECHONL
);

1308 i‡(!
sync_£rül
 && 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
öôãrmios
) < 0)

1309 i‡(!
hungup
 && 
î∫o
 !
ENXIO
)

1310 
	`w¨n
("tcsetattr: %m");

1311 #i‚de‡
CRTSCTS


1312 i‡(!
sync_£rül
 && 
	`io˘l
 (
fd
, 
TCSETXF
, &
öôãrmiox
) < 0){

1313 i‡(!
hungup
 && 
î∫o
 !
ENXIO
)

1314 
	`îr‹
("TCSETXF: %m");

1317 i‡(!
sync_£rül
)

1318 
	`io˘l
(
fd
, 
TIOCSWINSZ
, &
wsöfo
);

1319 
ª°‹e_ãrm
 = 0;

1321 
	}
}

1328 
	$£tdå
(
fd
, 
⁄
)

1329 
fd
, 
⁄
;

1331 
modembôs
 = 
TIOCM_DTR
;

1333 
	`io˘l
(
fd
, (
⁄
? 
TIOCMBIS
: 
TIOCMBIC
), &
modembôs
);

1334 
	}
}

1342 
	$›í_µp_lo›back
()

1344  
µpfd
;

1345 
	}
}

1351 
	$ouçut
(
unô
, 
p
, 
Àn
)

1352 
unô
;

1353 
u_ch¨
 *
p
;

1354 
Àn
;

1356 
°rbuf
 
d©a
;

1357 
ªåõs
;

1358 
pﬁlfd
 
pfd
;

1360 
	`dump_∑ckë
("£¡", 
p
, 
Àn
);

1361 i‡(
¢o›_£nd_hook
Ë
	`¢o›_£nd_hook
(
p
, 
Àn
);

1363 
d©a
.
Àn
 =Üen;

1364 
d©a
.
buf
 = (
ˇddr_t
Ë
p
;

1365 
ªåõs
 = 4;

1366 
	`putmsg
(
µpfd
, 
NULL
, &
d©a
, 0) < 0) {

1367 i‡(--
ªåõs
 < 0 || (
î∫o
 !
EWOULDBLOCK
 &&Éºnÿ!
EAGAIN
)) {

1368 i‡(
î∫o
 !
ENXIO
)

1369 
	`îr‹
("Couldn't sendÖacket: %m");

1372 
pfd
.
fd
 = 
µpfd
;

1373 
pfd
.
evíts
 = 
POLLOUT
;

1374 
	`pﬁl
(&
pfd
, 1, 250);

1376 
	}
}

1385 
	$waô_öput
(
timo
)

1386 
timevÆ
 *
timo
;

1388 
t
;

1390 
t
 = 
timo
 =
NULL
? -1:Åimo->
tv_£c
 * 1000 +Åimo->
tv_u£c
 / 1000;

1391 i‡(
	`pﬁl
(
pﬁlfds
, 
n_pﬁlfds
, 
t
Ë< 0 && 
î∫o
 !
EINTR
)

1392 
	`Áèl
("poll: %m");

1393 
	}
}

1398 
	$add_fd
(
fd
)

1399 
fd
;

1401 
n
;

1403 
n
 = 0;Ç < 
n_pﬁlfds
; ++n)

1404 i‡(
pﬁlfds
[
n
].
fd
 == fd)

1406 i‡(
n_pﬁlfds
 < 
MAX_POLLFDS
) {

1407 
pﬁlfds
[
n_pﬁlfds
].
fd
 = fd;

1408 
pﬁlfds
[
n_pﬁlfds
].
evíts
 = 
POLLIN
 | 
POLLPRI
 | 
POLLHUP
;

1409 ++
n_pﬁlfds
;

1411 
	`îr‹
("Too many inputs!");

1412 
	}
}

1417 
	$ªmove_fd
(
fd
)

1418 
fd
;

1420 
n
;

1422 
n
 = 0;Ç < 
n_pﬁlfds
; ++n) {

1423 i‡(
pﬁlfds
[
n
].
fd
 == fd) {

1424 ++
n
 < 
n_pﬁlfds
)

1425 
pﬁlfds
[
n
-1] =Öollfds[n];

1426 --
n_pﬁlfds
;

1430 
	}
}

1439 
	$waô_lo›_ouçut
(
timo
)

1440 
timevÆ
 *
timo
;

1442 
	`waô_öput
(
timo
);

1443 
	}
}

1450 
	$waô_time
(
timo
)

1451 
timevÆ
 *
timo
;

1453 
n
;

1455 
n
 = 
	`£À˘
(0, 
NULL
, NULL, NULL, 
timo
);

1456 i‡(
n
 < 0 && 
î∫o
 !
EINTR
)

1457 
	`Áèl
("select: %m");

1458 
	}
}

1466 
	$ªad_∑ckë
(
buf
)

1467 
u_ch¨
 *
buf
;

1469 
°rbuf
 
˘æ
, 
d©a
;

1470 
Êags
, 
Àn
;

1471 
˘æbuf
[(
DL_¥imôives
) + 64];

1474 
d©a
.
maxÀn
 = 
PPP_MRU
 + 
PPP_HDRLEN
;

1475 
d©a
.
buf
 = (
ˇddr_t
) buf;

1476 
˘æ
.
maxÀn
 = (
˘æbuf
);

1477 
˘æ
.
buf
 = (
ˇddr_t
Ë
˘æbuf
;

1478 
Êags
 = 0;

1479 
Àn
 = 
	`gëmsg
(
µpfd
, &
˘æ
, &
d©a
, &
Êags
);

1480 i‡(
Àn
 < 0) {

1481 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

1483 
	`Áèl
("ErrorÑeadingÖacket: %m");

1486 i‡(
˘æ
.
Àn
 <= 0)

1487  
d©a
.
Àn
;

1493 i‡(
debug
)

1494 
	`dbglog
("got dlpiÖrim 0x%x,Üen=%d",

1495 ((
DL_¥imôives
 *)
˘æbuf
)->
dl_¥imôive
, 
˘æ
.
Àn
);

1498 
	}
}

1506 
	$gë_lo›_ouçut
()

1508 
Àn
;

1509 
rv
 = 0;

1511 (
Àn
 = 
	`ªad_∑ckë
(
ö∑ckë_buf
)) > 0) {

1512 i‡(
	`lo›_‰ame
(
ö∑ckë_buf
, 
Àn
))

1513 
rv
 = 1;

1515  
rv
;

1516 
	}
}

1522 
	$√tif_£t_mtu
(
unô
, 
mtu
)

1523 
unô
, 
mtu
;

1525 
i‰eq
 
i‰
;

1526 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

1527 
li‰eq
 
li‰
;

1528 
fd
;

1531 
	`mem£t
(&
i‰
, 0, (ifr));

1532 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

1533 
i‰
.
i‰_mëric
 = 
lök_mtu
;

1534 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFMTU
, &
i‰
) < 0) {

1535 
	`îr‹
("Couldn'à£àIP MTU (%s): %m", 
i‰
.
i‰_«me
);

1538 #i‡
	`deföed
(
INET6
Ë&& deföed(
SOL2
)

1539 
fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

1540 i‡(
fd
 < 0)

1541 
	`îr‹
("Couldn't open IPv6 socket: %m");

1543 
	`mem£t
(&
li‰
, 0, (lifr));

1544 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1545 
li‰
.
li‰_mtu
 = 
lök_mtu
;

1546 i‡(
	`io˘l
(
fd
, 
SIOCSLIFMTU
, &
li‰
) < 0) {

1547 
	`˛o£
(
fd
);

1548 
	`îr‹
("Couldn'à£àIPv6 MTU (%s): %m", 
i‰
.
i‰_«me
);

1550 
	`˛o£
(
fd
);

1552 
	}
}

1560 
	$√tif_gë_mtu
(
unô
)

1562 
i‰eq
 
i‰
;

1564 
	`mem£t
 (&
i‰
, '\0',  (ifr));

1565 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
,  (ifr.ifr_name));

1567 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFMTU
, (
ˇddr_t
Ë&
i‰
) < 0) {

1568 
	`îr‹
("io˘l(SIOCGIFMTU): %m (löê%d)", 
__LINE__
);

1571  
i‰
.
i‰_mtu
;

1572 
	}
}

1579 
	$ây_£nd_c⁄fig
(
mtu
, 
asyncm≠
, 
pcomp
, 
accomp
)

1580 
mtu
;

1581 
u_öt32_t
 
asyncm≠
;

1582 
pcomp
, 
accomp
;

1584 
cf
[2];

1586 
lök_mtu
 = 
mtu
;

1587 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_MTU
, &
mtu
, (mtu), 0) < 0) {

1588 i‡(
hungup
 && 
î∫o
 =
ENXIO
) {

1589 ++
îr‹_cou¡
;

1592 
	`îr‹
("Couldn't set MTU: %m");

1594 i‡(
fdmuxid
 >= 0) {

1595 i‡(!
sync_£rül
) {

1596 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_XACCM
, &
asyncm≠
, (asyncmap), 0) < 0)

1597 
	`îr‹
("Couldn't setÅransmit ACCM: %m");

1599 
cf
[0] = (
pcomp
? 
COMP_PROT
: 0Ë+ (
accomp
? 
COMP_AC
: 0);

1600 
cf
[1] = 
COMP_PROT
 | 
COMP_AC
;

1601 i‡(
	`™y_com¥essi⁄s
() &&

1602 
	`°rio˘l
(
µpfd
, 
PPPIO_CFLAGS
, 
cf
, (cf), ()) < 0)

1603 
	`îr‹
("Couldn't setÖrot/AC compression: %m");

1605 
	}
}

1611 
	$ây_£t_xaccm
(
accm
)

1612 
ext_accm
 
accm
;

1614 i‡(
sync_£rül
)

1617 i‡(
fdmuxid
 >= 0

1618 && 
	`°rio˘l
(
µpfd
, 
PPPIO_XACCM
, 
accm
, (
ext_accm
), 0) < 0) {

1619 i‡(!
hungup
 || 
î∫o
 !
ENXIO
)

1620 
	`w¨n
("Couldn't setÉxtended ACCM: %m");

1622 
	}
}

1629 
	$ây_ªcv_c⁄fig
(
mru
, 
asyncm≠
, 
pcomp
, 
accomp
)

1630 
mru
;

1631 
u_öt32_t
 
asyncm≠
;

1632 
pcomp
, 
accomp
;

1634 
cf
[2];

1636 
lök_mru
 = 
mru
;

1637 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_MRU
, &
mru
, (mru), 0) < 0) {

1638 i‡(
hungup
 && 
î∫o
 =
ENXIO
) {

1639 ++
îr‹_cou¡
;

1642 
	`îr‹
("Couldn't set MRU: %m");

1644 i‡(
fdmuxid
 >= 0) {

1645 i‡(!
sync_£rül
) {

1646 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_RACCM
, &
asyncm≠
, (asyncmap), 0) < 0)

1647 
	`îr‹
("Couldn't setÑeceive ACCM: %m");

1649 
cf
[0] = (
pcomp
? 
DECOMP_PROT
: 0Ë+ (
accomp
? 
DECOMP_AC
: 0);

1650 
cf
[1] = 
DECOMP_PROT
 | 
DECOMP_AC
;

1651 i‡(
	`™y_com¥essi⁄s
() &&

1652 
	`°rio˘l
(
µpfd
, 
PPPIO_CFLAGS
, 
cf
, (cf), ()) < 0)

1653 
	`îr‹
("Couldn't setÖrot/AC decompression: %m");

1655 
	}
}

1662 
	$c˝_ã°
(
unô
, 
›t_±r
, 
›t_Àn
, 
f‹_å™smô
)

1663 
unô
, 
›t_Àn
, 
f‹_å™smô
;

1664 
u_ch¨
 *
›t_±r
;

1666 i‡(
	`°rio˘l
(
µpfd
, (
f‹_å™smô
? 
PPPIO_XCOMP
: 
PPPIO_RCOMP
),

1667 
›t_±r
, 
›t_Àn
, 0) >= 0)

1669  (
î∫o
 =
ENOSR
)? 0: -1;

1670 
	}
}

1676 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1677 
unô
, 
is›í
, 
isup
;

1679 
cf
[2];

1681 
cf
[0] = (
is›í
? 
CCP_ISOPEN
: 0Ë+ (
isup
? 
CCP_ISUP
: 0);

1682 
cf
[1] = 
CCP_ISOPEN
 | 
CCP_ISUP
 | 
CCP_ERROR
 | 
CCP_FATALERROR
;

1683 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_CFLAGS
, 
cf
, (cf), ()) < 0) {

1684 i‡(!
hungup
 || 
î∫o
 !
ENXIO
)

1685 
	`îr‹
("Couldn't set kernel CCP state: %m");

1687 
	}
}

1693 
	$gë_idÀ_time
(
u
, 
ù
)

1694 
u
;

1695 
µp_idÀ
 *
ù
;

1697  
	`°rio˘l
(
µpfd
, 
PPPIO_GIDLE
, 
ù
, 0, (
µp_idÀ
)) >= 0;

1698 
	}
}

1704 
	$gë_µp_°©s
(
u
, 
°©s
)

1705 
u
;

1706 
µpd_°©s
 *
°©s
;

1708 
µp_°©s
 
s
;

1710 i‡(!
sync_£rül
 &&

1711 
	`°rio˘l
(
µpfd
, 
PPPIO_GETSTAT
, &
s
, 0, (s)) < 0) {

1712 
	`îr‹
("Couldn't getÜink statistics: %m");

1715 
°©s
->
byãs_ö
 = 
s
.
p
.
µp_ibyãs
;

1716 
°©s
->
byãs_out
 = 
s
.
p
.
µp_obyãs
;

1717 
°©s
->
pkts_ö
 = 
s
.
p
.
µp_ùackës
;

1718 
°©s
->
pkts_out
 = 
s
.
p
.
µp_›ackës
;

1720 
	}
}

1727 
	$£t_fûãrs
(
∑ss
, 
a˘ive
)

1728 
bpf_¥ogøm
 *
∑ss
, *
a˘ive
;

1730 
ªt
 = 1;

1732 i‡(
∑ss
->
bf_Àn
 > 0) {

1733 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_PASSFILT
, 
∑ss
,

1734 (
bpf_¥ogøm
), 0) < 0) {

1735 
	`îr‹
("Couldn't setÖass-filter in kernel: %m");

1736 
ªt
 = 0;

1739 i‡(
a˘ive
->
bf_Àn
 > 0) {

1740 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_ACTIVEFILT
, 
a˘ive
,

1741 (
bpf_¥ogøm
), 0) < 0) {

1742 
	`îr‹
("Couldn't setáctive-filter in kernel: %m");

1743 
ªt
 = 0;

1746  
ªt
;

1747 
	}
}

1756 
	$c˝_Áèl_îr‹
(
unô
)

1757 
unô
;

1759 
cf
[2];

1761 
cf
[0] = cf[1] = 0;

1762 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_CFLAGS
, 
cf
, (cf), ()) < 0) {

1763 i‡(
î∫o
 !
ENXIO
 &&Éºnÿ!
EINVAL
)

1764 
	`îr‹
("Couldn't get compression flags: %m");

1767  
cf
[0] & 
CCP_FATALERROR
;

1768 
	}
}

1774 
	$sifvjcomp
(
u
, 
vjcomp
, 
xcidcomp
, 
xmaxcid
)

1775 
u
, 
vjcomp
, 
xcidcomp
, 
xmaxcid
;

1777 
cf
[2];

1778 
maxcid
[2];

1780 i‡(
vjcomp
) {

1781 
maxcid
[0] = 
xcidcomp
;

1782 
maxcid
[1] = 15;

1783 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_VJINIT
, 
maxcid
, (maxcid), 0) < 0) {

1784 
	`îr‹
("Couldn't initialize VJ compression: %m");

1788 
cf
[0] = (
vjcomp
? 
COMP_VJC
 + 
DECOMP_VJC
: 0)

1789 + (
xcidcomp
? 
COMP_VJCCID
 + 
DECOMP_VJCCID
: 0);

1790 
cf
[1] = 
COMP_VJC
 + 
DECOMP_VJC
 + 
COMP_VJCCID
 + 
DECOMP_VJCCID
;

1791 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_CFLAGS
, 
cf
, (cf), ()) < 0) {

1792 i‡(
vjcomp
)

1793 
	`îr‹
("Couldn'tÉnable VJ compression: %m");

1797 
	}
}

1803 
	$sifup
(
u
)

1804 
u
;

1806 
i‰eq
 
i‰
;

1808 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

1809 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

1810 
	`îr‹
("Couldn't mark interface up (get): %m");

1813 
i‰
.
i‰_Êags
 |
IFF_UP
;

1814 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

1815 
	`îr‹
("Couldn't mark interface up (set): %m");

1818 
if_is_up
 = 1;

1820 
	}
}

1826 
	$sifdown
(
u
)

1827 
u
;

1829 
i‰eq
 
i‰
;

1831 i‡(
ùmuxid
 < 0)

1833 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

1834 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

1835 
	`îr‹
("Couldn't mark interface down (get): %m");

1838 
i‰
.
i‰_Êags
 &~
IFF_UP
;

1839 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

1840 
	`îr‹
("Couldn't mark interface down (set): %m");

1843 
if_is_up
 = 0;

1845 
	}
}

1851 
	$si‚pmode
(
u
, 
¥Ÿo
, 
mode
)

1852 
u
;

1853 
¥Ÿo
;

1854 
NPmode
 
mode
;

1856 
≈i
[2];

1858 
≈i
[0] = 
¥Ÿo
;

1859 
≈i
[1] = (Ë
mode
;

1860 i‡(
	`°rio˘l
(
µpfd
, 
PPPIO_NPMODE
, &
≈i
, 2 * (), 0) < 0) {

1861 
	`îr‹
("io˘l(£àNP %d modêtÿ%d): %m", 
¥Ÿo
, 
mode
);

1865 
	}
}

1867 #i‡
deföed
(
SOL2
Ë&& deföed(
INET6
)

1872 
	$sif6up
(
u
)

1873 
u
;

1875 
li‰eq
 
li‰
;

1876 
fd
;

1878 
fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

1879 i‡(
fd
 < 0) {

1883 
	`mem£t
(&
li‰
, 0, (lifr));

1884 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1885 i‡(
	`io˘l
(
fd
, 
SIOCGLIFFLAGS
, &
li‰
) < 0) {

1886 
	`˛o£
(
fd
);

1890 
li‰
.
li‰_Êags
 |
IFF_UP
;

1891 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1892 i‡(
	`io˘l
(
fd
, 
SIOCSLIFFLAGS
, &
li‰
) < 0) {

1893 
	`˛o£
(
fd
);

1897 
if6_is_up
 = 1;

1898 
	`˛o£
(
fd
);

1900 
	}
}

1906 
	$sif6down
(
u
)

1907 
u
;

1909 
li‰eq
 
li‰
;

1910 
fd
;

1912 
fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

1913 i‡(
fd
 < 0)

1916 
	`mem£t
(&
li‰
, 0, (lifr));

1917 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1918 i‡(
	`io˘l
(
fd
, 
SIOCGLIFFLAGS
, &
li‰
) < 0) {

1919 
	`˛o£
(
fd
);

1923 
li‰
.
li‰_Êags
 &~
IFF_UP
;

1924 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1925 i‡(
	`io˘l
(
fd
, 
SIOCGLIFFLAGS
, &
li‰
) < 0) {

1926 
	`˛o£
(
fd
);

1930 
if6_is_up
 = 0;

1931 
	`˛o£
(
fd
);

1933 
	}
}

1939 
	$sif6addr
(
u
, 
o
, 
h
)

1940 
u
;

1941 
eui64_t
 
o
, 
h
;

1943 
li‰eq
 
li‰
;

1944 
sockaddr_°‹age
 
œddr
;

1945 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6 *)&
œddr
;

1946 
fd
;

1948 
fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

1949 i‡(
fd
 < 0)

1952 
	`mem£t
(&
li‰
, 0, (lifr));

1953 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1960 
	`IN6_LLTOKEN_FROM_EUI64
(
li‰
, 
sö6
, 
o
);

1961 i‡(
	`io˘l
(
fd
, 
SIOCSLIFTOKEN
, &
li‰
) < 0) {

1962 
	`˛o£
(
fd
);

1969 
	`IN6_LLADDR_FROM_EUI64
(
li‰
, 
sö6
, 
o
);

1970 i‡(
	`io˘l
(
fd
, 
SIOCSLIFADDR
, &
li‰
) < 0) {

1971 
	`˛o£
(
fd
);

1975 
	`mem£t
(&
li‰
, 0, (lifr));

1976 
	`°æ˝y
(
li‰
.
li‰_«me
, 
i‚ame
, (lifr.lifr_name));

1977 
	`IN6_LLADDR_FROM_EUI64
(
li‰
, 
sö6
, 
h
);

1978 i‡(
	`io˘l
(
fd
, 
SIOCSLIFDSTADDR
, &
li‰
) < 0) {

1979 
	`˛o£
(
fd
);

1984 
	}
}

1990 
	$cif6addr
(
u
, 
o
, 
h
)

1991 
u
;

1992 
eui64_t
 
o
, 
h
;

1995 
	}
}

2001 
	$sif6deÁu…rouã
(
u
, 
l
, 
g
)

2002 
u
;

2003 
eui64_t
 
l
, 
g
;

2006 
π_msghdr
 
πm
;

2007 
sockaddr_ö6
 
d°
;

2008 
sockaddr_ö6
 
gw
;

2009 } 
rmsg
;

2010 
£q
;

2011 
πsock
;

2013 #i‡
	`deföed
(
__USLC__
)

2014 
g
 = 
l
;

2016 
	`mem£t
(&
rmsg
, 0, (rmsg));

2018 
rmsg
.
πm
.
πm_msgÀn
 =  (rmsg);

2019 
rmsg
.
πm
.
πm_vîsi⁄
 = 
RTM_VERSION
;

2020 
rmsg
.
πm
.
πm_ty≥
 = 
RTM_ADD
;

2021 
rmsg
.
πm
.
πm_Êags
 = 
RTF_GATEWAY
;

2022 
rmsg
.
πm
.
πm_addrs
 = 
RTA_DST
 | 
RTA_GATEWAY
;

2023 
rmsg
.
πm
.
πm_pid
 = 
	`gëpid
();

2024 
rmsg
.
πm
.
πm_£q
 = 
£q
++;

2026 
rmsg
.
d°
.
sö6_Ámûy
 = 
AF_INET6
;

2028 
rmsg
.
gw
.
sö6_Ámûy
 = 
AF_INET6
;

2029 
	`IN6_SOCKADDR_FROM_EUI64
(&
rmsg
.
gw
, 
g
);

2031 
πsock
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0);

2033 i‡(
πsock
 < 0) {

2034 
	`îr‹
("Can'tádd defaultÑoute: %m");

2038 i‡(
	`wrôe
(
πsock
, &
rmsg
, (rmsg)) < 0)

2039 
	`îr‹
("Can'tádd defaultÑoute: %m");

2041 
	`˛o£
(
πsock
);

2043 
deÁu…_rouã_g©eway6
 = 
g
;

2045 
	}
}

2051 
	$cif6deÁu…rouã
(
u
, 
l
, 
g
)

2052 
u
;

2053 
eui64_t
 
l
, 
g
;

2057 
	`mem£t
(&
deÁu…_rouã_g©eway6
, 0, (default_route_gateway6));

2059 
	}
}

2064 
	#INET_ADDR
(
x
Ë(((
sockaddr_ö
 *Ë&(x))->
sö_addr
.
s_addr
)

	)

2070 
	$siÁddr
(
u
, 
o
, 
h
, 
m
)

2071 
u
;

2072 
u_öt32_t
 
o
, 
h
, 
m
;

2074 
i‰eq
 
i‰
;

2075 
ªt
 = 1;

2077 
	`mem£t
(&
i‰
, 0, (ifr));

2078 
	`°æ˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

2079 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

2080 
	`INET_ADDR
(
i‰
.
i‰_addr
Ë
m
;

2081 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFNETMASK
, &
i‰
) < 0) {

2082 
	`îr‹
("Couldn't set IPÇetmask: %m");

2083 
ªt
 = 0;

2085 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

2086 
	`INET_ADDR
(
i‰
.
i‰_addr
Ë
o
;

2087 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFADDR
, &
i‰
) < 0) {

2088 
	`îr‹
("Couldn't setÜocal IPáddress: %m");

2089 
ªt
 = 0;

2096 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰
) >= 0

2097 && (
i‰
.
i‰_Êags
 & 
IFF_POINTOPOINT
) == 0) {

2098 
i‰
.
i‰_Êags
 |
IFF_POINTOPOINT
;

2099 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

2100 
	`îr‹
("Couldn't mark interfaceÖt-to-pt: %m");

2101 
ªt
 = 0;

2104 
i‰
.
i‰_d°addr
.
ß_Ámûy
 = 
AF_INET
;

2105 
	`INET_ADDR
(
i‰
.
i‰_d°addr
Ë
h
;

2106 i‡(
	`io˘l
(
ùfd
, 
SIOCSIFDSTADDR
, &
i‰
) < 0) {

2107 
	`îr‹
("Couldn't setÑemote IPáddress: %m");

2108 
ªt
 = 0;

2111 
ªmŸe_addr
 = 
h
;

2112  
ªt
;

2113 
	}
}

2120 
	$ciÁddr
(
u
, 
o
, 
h
)

2121 
u
;

2122 
u_öt32_t
 
o
, 
h
;

2124 #i‡
	`deföed
(
__USLC__
)

2125 
	`ci‰ouã
(
unô
, 
ouøddr
, 
hißddr
);

2126 i‡(
ùmuxid
 >= 0) {

2127 
	`nŸi˚
("RemovingÖpp interface unit");

2128 i‡(
	`io˘l
(
ùfd
, 
I_UNLINK
, 
ùmuxid
) < 0) {

2129 
	`îr‹
("Can'tÑemoveÖpp interface unit: %m");

2132 
ùmuxid
 = -1;

2135 
ªmŸe_addr
 = 0;

2137 
	}
}

2143 
	$sifdeÁu…rouã
(
u
, 
l
, 
g
)

2144 
u
;

2145 
u_öt32_t
 
l
, 
g
;

2147 
πíåy
 
π
;

2149 #i‡
	`deföed
(
__USLC__
)

2150 
g
 = 
l
;

2152 
	`mem£t
(&
π
, 0, (rt));

2153 
π
.
π_d°
.
ß_Ámûy
 = 
AF_INET
;

2154 
	`INET_ADDR
(
π
.
π_d°
) = 0;

2155 
π
.
π_g©eway
.
ß_Ámûy
 = 
AF_INET
;

2156 
	`INET_ADDR
(
π
.
π_g©eway
Ë
g
;

2157 
π
.
π_Êags
 = 
RTF_GATEWAY
;

2159 i‡(
	`io˘l
(
ùfd
, 
SIOCADDRT
, &
π
) < 0) {

2160 
	`îr‹
("Can'tádd defaultÑoute: %m");

2164 
deÁu…_rouã_g©eway
 = 
g
;

2166 
	}
}

2172 
	$cifdeÁu…rouã
(
u
, 
l
, 
g
)

2173 
u
;

2174 
u_öt32_t
 
l
, 
g
;

2176 
πíåy
 
π
;

2178 #i‡
	`deföed
(
__USLC__
)

2179 
g
 = 
l
;

2181 
	`mem£t
(&
π
, 0, (rt));

2182 
π
.
π_d°
.
ß_Ámûy
 = 
AF_INET
;

2183 
	`INET_ADDR
(
π
.
π_d°
) = 0;

2184 
π
.
π_g©eway
.
ß_Ámûy
 = 
AF_INET
;

2185 
	`INET_ADDR
(
π
.
π_g©eway
Ë
g
;

2186 
π
.
π_Êags
 = 
RTF_GATEWAY
;

2188 i‡(
	`io˘l
(
ùfd
, 
SIOCDELRT
, &
π
) < 0) {

2189 
	`îr‹
("Can't delete defaultÑoute: %m");

2193 
deÁu…_rouã_g©eway
 = 0;

2195 
	}
}

2201 
	$siÂroxy¨p
(
unô
, 
hißddr
)

2202 
unô
;

2203 
u_öt32_t
 
hißddr
;

2205 
¨¥eq
árpreq;

2207 
	`mem£t
(&
¨¥eq
, 0, (arpreq));

2208 i‡(!
	`gë_ëhî_addr
(
hißddr
, &
¨¥eq
.
¨p_ha
))

2211 
¨¥eq
.
¨p_∑
.
ß_Ámûy
 = 
AF_INET
;

2212 
	`INET_ADDR
(
¨¥eq
.
¨p_∑
Ë
hißddr
;

2213 
¨¥eq
.
¨p_Êags
 = 
ATF_PERM
 | 
ATF_PUBL
;

2214 i‡(
	`io˘l
(
ùfd
, 
SIOCSARP
, (
ˇddr_t
Ë&
¨¥eq
) < 0) {

2215 
	`îr‹
("Couldn't setÖroxy ARPÉntry: %m");

2219 
¥oxy_¨p_addr
 = 
hißddr
;

2221 
	}
}

2227 
	$ciÂroxy¨p
(
unô
, 
hißddr
)

2228 
unô
;

2229 
u_öt32_t
 
hißddr
;

2231 
¨¥eq
árpreq;

2233 
	`mem£t
(&
¨¥eq
, 0, (arpreq));

2234 
¨¥eq
.
¨p_∑
.
ß_Ámûy
 = 
AF_INET
;

2235 
	`INET_ADDR
(
¨¥eq
.
¨p_∑
Ë
hißddr
;

2236 i‡(
	`io˘l
(
ùfd
, 
SIOCDARP
, (
ˇddr_t
)&
¨¥eq
) < 0) {

2237 
	`îr‹
("Couldn't deleteÖroxy ARPÉntry: %m");

2241 
¥oxy_¨p_addr
 = 0;

2243 
	}
}

2249 
	#MAX_IFS
 32

	)

2252 
	$gë_ëhî_addr
(
ùaddr
, 
hwaddr
)

2253 
u_öt32_t
 
ùaddr
;

2254 
sockaddr
 *
hwaddr
;

2256 
i‰eq
 *
i‰
, *
i„nd
, ifreq;

2257 
nif
;

2258 
ifc⁄f
 
ifc
;

2259 
u_öt32_t
 
öa
, 
mask
;

2264 #ifde‡
SIOCGIFNUM


2265 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFNUM
, &
nif
) < 0)

2267 
nif
 = 
MAX_IFS
;

2268 
ifc
.
ifc_Àn
 = 
nif
 * (
i‰eq
);

2269 
ifc
.
ifc_buf
 = (
ˇddr_t
Ë
	`mÆloc
(ifc.
ifc_Àn
);

2270 i‡(
ifc
.
ifc_buf
 == 0)

2272 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

2273 
	`w¨n
("Couldn't get system interfaceÜist: %m");

2274 
	`‰ì
(
ifc
.
ifc_buf
);

2277 
i„nd
 = (
i‰eq
 *Ë(
ifc
.
ifc_buf
 + ifc.
ifc_Àn
);

2278 
i‰
 = 
ifc
.
ifc_ªq
; i‰ < 
i„nd
; ++ifr) {

2279 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
)

2284 
	`°æ˝y
(
i‰eq
.
i‰_«me
, 
i‰
->ifr_name, (ifreq.ifr_name));

2285 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰eq
) < 0)

2287 i‡((
i‰eq
.
i‰_Êags
 &

2288 (
IFF_UP
|
IFF_BROADCAST
|
IFF_POINTOPOINT
|
IFF_LOOPBACK
|
IFF_NOARP
))

2289 !(
IFF_UP
|
IFF_BROADCAST
))

2294 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFNETMASK
, &
i‰eq
) < 0)

2296 
öa
 = 
	`INET_ADDR
(
i‰
->
i‰_addr
);

2297 
mask
 = 
	`INET_ADDR
(
i‰eq
.
i‰_addr
);

2298 i‡((
ùaddr
 & 
mask
Ë=(
öa
 & mask))

2302 i‡(
i‰
 >
i„nd
) {

2303 
	`w¨n
("No suitable interface found forÖroxy ARP");

2304 
	`‰ì
(
ifc
.
ifc_buf
);

2308 
	`öfo
("found i¡îÁ˚ %†f‹Öroxy ARP", 
i‰
->
i‰_«me
);

2309 i‡(!
	`gë_hw_addr
(
i‰
->
i‰_«me
, 
öa
, 
hwaddr
)) {

2310 
	`îr‹
("Couldn'àgë h¨dw¨êaddªs†f‹ %s", 
i‰
->
i‰_«me
);

2311 
	`‰ì
(
ifc
.
ifc_buf
);

2315 
	`‰ì
(
ifc
.
ifc_buf
);

2317 
	}
}

2323 
	$gë_hw_addr_dÕi
(
«me
, 
hwaddr
)

2324 *
«me
;

2325 
sockaddr
 *
hwaddr
;

2327 *
q
;

2328 
unô
, 
iffd
, 
adæí
;

2329 *
adΩ
;

2330 
ifdev
[24];

2332 
DL_¥imôives
 
¥im
;

2333 
•a˚
[64];

2334 } 
ª∂y
;

2340 
	`¶¥ötf
(
ifdev
, (ifdev), "/dev/%s", 
«me
);

2341 
q
 = 
ifdev
 + 
	`°æí
(ifdev); --q >= ifdev; )

2342 i‡(!
	`isdigô
(*
q
))

2344 
unô
 = 
	`©oi
(
q
+1);

2345 
q
[1] = 0;

2350 
iffd
 = 
	`›í
(
ifdev
, 
O_RDWR
);

2351 i‡(
iffd
 < 0) {

2352 
	`îr‹
("C™'à›í %s: %m", 
ifdev
);

2355 i‡(
	`dÕi_©èch
(
iffd
, 
unô
) < 0

2356 || 
	`dÕi_gë_ª∂y
(
iffd
, &
ª∂y
.
¥im
, 
DL_OK_ACK
, (reply)) < 0

2357 || 
	`dÕi_öfo_ªq
(
iffd
) < 0

2358 || 
	`dÕi_gë_ª∂y
(
iffd
, &
ª∂y
.
¥im
, 
DL_INFO_ACK
, (reply)) < 0) {

2359 
	`˛o£
(
iffd
);

2363 
adæí
 = 
ª∂y
.
¥im
.
öfo_ack
.
dl_addr_Àngth
;

2364 
adΩ
 = (*)&
ª∂y
 +Ñïly.
¥im
.
öfo_ack
.
dl_addr_off£t
;

2366 #i‡
DL_CURRENT_VERSION
 >= 2

2367 i‡(
ª∂y
.
¥im
.
öfo_ack
.
dl_ßp_Àngth
 < 0)

2368 
adæí
 +
ª∂y
.
¥im
.
öfo_ack
.
dl_ßp_Àngth
;

2370 
adΩ
 +
ª∂y
.
¥im
.
öfo_ack
.
dl_ßp_Àngth
;

2373 
hwaddr
->
ß_Ámûy
 = 
AF_UNSPEC
;

2374 
	`mem˝y
(
hwaddr
->
ß_d©a
, 
adΩ
, 
adæí
);

2377 
	}
}

2382 
	$gë_hw_addr
(
«me
, 
öa
, 
hwaddr
)

2383 *
«me
;

2384 
u_öt32_t
 
öa
;

2385 
sockaddr
 *
hwaddr
;

2388 
s
;

2389 
¨¥eq
 
ªq
;

2391 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

2392 i‡(
s
 < 0)

2394 
	`mem£t
(&
ªq
, 0, (req));

2395 
ªq
.
¨p_∑
.
ß_Ámûy
 = 
AF_INET
;

2396 
	`INET_ADDR
(
ªq
.
¨p_∑
Ë
öa
;

2397 i‡(
	`io˘l
(
s
, 
SIOCGARP
, &
ªq
) < 0) {

2398 
	`îr‹
("Couldn'àgë ARPÉ¡ry f‹ %s: %m", 
	`ù_¡ﬂ
(
öa
));

2401 *
hwaddr
 = 
ªq
.
¨p_ha
;

2402 
hwaddr
->
ß_Ámûy
 = 
AF_UNSPEC
;

2405 
	}
}

2408 
	$dÕi_©èch
(
fd
, 
µa
)

2409 
fd
, 
µa
;

2411 
dl_©èch_ªq_t
 
ªq
;

2412 
°rbuf
 
buf
;

2414 
ªq
.
dl_¥imôive
 = 
DL_ATTACH_REQ
;

2415 
ªq
.
dl_µa
 = 
µa
;

2416 
buf
.
Àn
 = (
ªq
);

2417 
buf
.bu‡(*Ë&
ªq
;

2418  
	`putmsg
(
fd
, &
buf
, 
NULL
, 
RS_HIPRI
);

2419 
	}
}

2422 
	$dÕi_öfo_ªq
(
fd
)

2423 
fd
;

2425 
dl_öfo_ªq_t
 
ªq
;

2426 
°rbuf
 
buf
;

2428 
ªq
.
dl_¥imôive
 = 
DL_INFO_REQ
;

2429 
buf
.
Àn
 = (
ªq
);

2430 
buf
.bu‡(*Ë&
ªq
;

2431  
	`putmsg
(
fd
, &
buf
, 
NULL
, 
RS_HIPRI
);

2432 
	}
}

2435 
	$dÕi_gë_ª∂y
(
fd
, 
ª∂y
, 
ex≥˘ed_¥im
, 
maxÀn
)

2436 
DL_¥imôives
 *
ª∂y
;

2437 
fd
, 
ex≥˘ed_¥im
, 
maxÀn
;

2439 
°rbuf
 
buf
;

2440 
Êags
, 
n
;

2441 
pﬁlfd
 
pfd
;

2446 
pfd
.
fd
 = fd;

2447 
pfd
.
evíts
 = 
POLLIN
 | 
POLLPRI
;

2449 
n
 = 
	`pﬁl
(&
pfd
, 1, 1000);

2450 } 
n
 =-1 && 
î∫o
 =
EINTR
 && !
gŸ_sigãrm
);

2451 i‡(
n
 <= 0)

2457 
buf
.
maxÀn
 = maxlen;

2458 
buf
.bu‡(*Ë
ª∂y
;

2459 
Êags
 = 0;

2460 i‡(
	`gëmsg
(
fd
, &
buf
, 
NULL
, &
Êags
) < 0)

2463 i‡(
buf
.
Àn
 < (
ul⁄g
)) {

2464 i‡(
debug
)

2465 
	`dbglog
("dÕòª•⁄£ sh‹à÷í=%d)\n", 
buf
.
Àn
);

2469 i‡(
ª∂y
->
dl_¥imôive
 =
ex≥˘ed_¥im
)

2472 i‡(
debug
) {

2473 i‡(
ª∂y
->
dl_¥imôive
 =
DL_ERROR_ACK
) {

2474 
	`dbglog
("dlpiÉrror %d (unixÉrrno %d) forÖrim %x\n",

2475 
ª∂y
->
îr‹_ack
.
dl_î∫o
,Ñïly->îr‹_ack.
dl_unix_î∫o
,

2476 
ª∂y
->
îr‹_ack
.
dl_îr‹_¥imôive
);

2478 
	`dbglog
("dlpi unexpectedÑesponseÖrim %x\n",

2479 
ª∂y
->
dl_¥imôive
);

2484 
	}
}

2494 
u_öt32_t


2495 
	$GëMask
(
addr
)

2496 
u_öt32_t
 
addr
;

2498 
u_öt32_t
 
mask
, 
nmask
, 
öa
;

2499 
i‰eq
 *
i‰
, *
i„nd
, ifreq;

2500 
nif
;

2501 
ifc⁄f
 
ifc
;

2503 
addr
 = 
	`¡ohl
(addr);

2504 i‡(
	`IN_CLASSA
(
addr
))

2505 
nmask
 = 
IN_CLASSA_NET
;

2506 i‡(
	`IN_CLASSB
(
addr
))

2507 
nmask
 = 
IN_CLASSB_NET
;

2509 
nmask
 = 
IN_CLASSC_NET
;

2511 
mask
 = 
√tmask
 | 
	`ht⁄l
(
nmask
);

2516 #ifde‡
SIOCGIFNUM


2517 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFNUM
, &
nif
) < 0)

2519 
nif
 = 
MAX_IFS
;

2520 
ifc
.
ifc_Àn
 = 
nif
 * (
i‰eq
);

2521 
ifc
.
ifc_buf
 = (
ˇddr_t
Ë
	`mÆloc
(ifc.
ifc_Àn
);

2522 i‡(
ifc
.
ifc_buf
 == 0)

2523  
mask
;

2524 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

2525 
	`w¨n
("Couldn't get system interfaceÜist: %m");

2526 
	`‰ì
(
ifc
.
ifc_buf
);

2527  
mask
;

2529 
i„nd
 = (
i‰eq
 *Ë(
ifc
.
ifc_buf
 + ifc.
ifc_Àn
);

2530 
i‰
 = 
ifc
.
ifc_ªq
; i‰ < 
i„nd
; ++ifr) {

2534 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
)

2536 
öa
 = 
	`INET_ADDR
(
i‰
->
i‰_addr
);

2537 i‡((
	`¡ohl
(
öa
Ë& 
nmask
Ë!(
addr
 &Çmask))

2542 
	`°æ˝y
(
i‰eq
.
i‰_«me
, 
i‰
->ifr_name, (ifreq.ifr_name));

2543 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFFLAGS
, &
i‰eq
) < 0)

2545 i‡((
i‰eq
.
i‰_Êags
 & (
IFF_UP
|
IFF_POINTOPOINT
|
IFF_LOOPBACK
))

2546 !
IFF_UP
)

2551 i‡(
	`io˘l
(
ùfd
, 
SIOCGIFNETMASK
, &
i‰eq
) < 0)

2553 
mask
 |
	`INET_ADDR
(
i‰eq
.
i‰_addr
);

2556 
	`‰ì
(
ifc
.
ifc_buf
);

2557  
mask
;

2558 
	}
}

2564 
	$logwtmp
(
löe
, 
«me
, 
ho°
)

2565 c⁄° *
löe
, *
«me
, *
ho°
;

2567 
utmpx
 utmpx;

2569 i‡(
«me
[0] != 0) {

2571 
	`°∫˝y
(
utmpx
.
ut_u£r
, 
«me
, (utmpx.ut_user));

2572 
	`°∫˝y
(
utmpx
.
ut_löe
, 
löe
, (utmpx.ut_line));

2573 
	`°∫˝y
(
utmpx
.
ut_ho°
, 
ho°
, (utmpx.ut_host));

2574 i‡(*
ho°
 != '\0') {

2575 
utmpx
.
ut_sy¶í
 = 
	`°æí
(
ho°
) + 1;

2576 i‡(
utmpx
.
ut_sy¶í
 > (utmpx.
ut_ho°
))

2577 
utmpx
.
ut_sy¶í
 = (utmpx.
ut_ho°
);

2579 
utmpx
.
ut_pid
 = 
	`gëpid
();

2580 
utmpx
.
ut_ty≥
 = 
USER_PROCESS
;

2582 
utmpx
.
ut_ty≥
 = 
DEAD_PROCESS
;

2584 
	`gëtimeofday
(&
utmpx
.
ut_tv
, 
NULL
);

2585 
	`updwtmpx
("/v¨/adm/wtmpx", &
utmpx
);

2586 
	}
}

2592 
	$gë_ho°_£ed
()

2594 
buf
[32];

2596 i‡(
	`sysöfo
(
SI_HW_SERIAL
, 
buf
, (buf)) < 0) {

2597 
	`îr‹
("sysinfo: %m");

2600  (Ë
	`°πoul
(
buf
, 
NULL
, 16);

2601 
	}
}

2604 
	$°rio˘l
(
fd
, 
cmd
, 
±r
, 
ûí
, 
ﬁí
)

2605 
fd
, 
cmd
, 
ûí
, 
ﬁí
;

2606 *
±r
;

2608 
°rio˘l
 
°r
;

2610 
°r
.
ic_cmd
 = 
cmd
;

2611 
°r
.
ic_timout
 = 0;

2612 
°r
.
ic_Àn
 = 
ûí
;

2613 
°r
.
ic_dp
 = 
±r
;

2614 i‡(
	`io˘l
(
fd
, 
I_STR
, &
°r
) == -1)

2616 i‡(
°r
.
ic_Àn
 !
ﬁí
)

2617 
	`dbglog
("strioctl:Éxpected %d bytes, got %d for cmd %x\n",

2618 
ﬁí
, 
°r
.
ic_Àn
, 
cmd
);

2620 
	}
}

2627 
	#LOCK_PREFIX
 "/v¨/•oﬁ/locks/LK."

	)

2628 
	glock_fûe
[40];

2631 
	$lock
(
dev
)

2632 *
dev
;

2634 
n
, 
fd
, 
pid
;

2635 
°©
 
sbuf
;

2636 
ascii_pid
[12];

2638 i‡(
	`°©
(
dev
, &
sbuf
) < 0) {

2639 
	`îr‹
("C™'àgë devi˚Çumbî f‹ %s: %m", 
dev
);

2642 i‡((
sbuf
.
°_mode
 & 
S_IFMT
Ë!
S_IFCHR
) {

2643 
	`îr‹
("C™'àlock %s:ÇŸá ch¨a˘î devi˚", 
dev
);

2646 
	`¶¥ötf
(
lock_fûe
, (lock_file), "%s%03d.%03d.%03d",

2647 
LOCK_PREFIX
, 
	`maj‹
(
sbuf
.
°_dev
),

2648 
	`maj‹
(
sbuf
.
°_rdev
), 
	`mö‹
(sbuf.st_rdev));

2650 (
fd
 = 
	`›í
(
lock_fûe
, 
O_EXCL
 | 
O_CREAT
 | 
O_RDWR
, 0644)) < 0) {

2651 i‡(
î∫o
 =
EEXIST


2652 && (
fd
 = 
	`›í
(
lock_fûe
, 
O_RDONLY
, 0)) >= 0) {

2654 
n
 = 
	`ªad
(
fd
, 
ascii_pid
, 11);

2655 i‡(
n
 <= 0) {

2656 
	`îr‹
("C™'àªadÖid fromÜock fûê%s", 
lock_fûe
);

2657 
	`˛o£
(
fd
);

2659 
ascii_pid
[
n
] = 0;

2660 
pid
 = 
	`©oi
(
ascii_pid
);

2661 i‡(
pid
 > 0 && 
	`kûl
’id, 0Ë=-1 && 
î∫o
 =
ESRCH
) {

2663 i‡(
	`u∆ök
(
lock_fûe
) == 0) {

2664 
	`˛o£
(
fd
);

2665 
	`nŸi˚
("Removed staleÜock on %s (pid %d)",

2666 
dev
, 
pid
);

2669 
	`w¨n
("Couldn'tÑemove staleÜock on %s",

2670 
dev
);

2672 
	`nŸi˚
("Device %s isÜocked byÖid %d",

2673 
dev
, 
pid
);

2675 
	`˛o£
(
fd
);

2677 
	`îr‹
("C™'à¸óãÜock fûê%s: %m", 
lock_fûe
);

2678 
lock_fûe
[0] = 0;

2682 
	`¶¥ötf
(
ascii_pid
, ◊scii_pid), "%10d\n", 
	`gëpid
());

2683 
	`wrôe
(
fd
, 
ascii_pid
, 11);

2685 
	`˛o£
(
fd
);

2687 
	}
}

2693 
	$u∆ock
()

2695 i‡(
lock_fûe
[0]) {

2696 
	`u∆ök
(
lock_fûe
);

2697 
lock_fûe
[0] = 0;

2699 
	}
}

2706 
	$ci‰ouã
(
u
, 
our
, 
his
)

2707 
u
;

2708 
u_öt32_t
 
our
, 
his
;

2710 
πíåy
 
π
;

2712 
	`mem£t
(&
π
, 0, (rt));

2713 
π
.
π_d°
.
ß_Ámûy
 = 
AF_INET
;

2714 
	`INET_ADDR
(
π
.
π_d°
Ë
his
;

2715 
π
.
π_g©eway
.
ß_Ámûy
 = 
AF_INET
;

2716 
	`INET_ADDR
(
π
.
π_g©eway
Ë
our
;

2717 
π
.
π_Êags
 = 
RTF_HOST
;

2719 i‡(
	`io˘l
(
ùfd
, 
SIOCDELRT
, &
π
) < 0) {

2720 
	`îr‹
("Can't deleteÑoute: %m");

2725 
	}
}

2734 #i‚de‡
T_CURRENT


2735 
	#T_CURRENT
 
MI_T_CURRENT


	)

2739 
	$have_rouã_to
(
addr
)

2740 
u_öt32_t
 
addr
;

2742 #ifde‡
SOL2


2743 
fd
, 
r
, 
Êags
, 
i
;

2745 
T_›tmgmt_ªq
 
ªq
;

2746 
›thdr
 
hdr
;

2747 } 
ªq
;

2749 
T_›tmgmt_ack
 
ack
;

2750 
•a˚
[64];

2751 } 
ack
;

2752 
›thdr
 *
rh
;

2753 
°rbuf
 
cbuf
, 
dbuf
;

2754 
ƒouãs
;

2755 
mib2_ùRouãE¡ry_t
 
rouãs
[8];

2756 
mib2_ùRouãE¡ry_t
 *
Ω
;

2758 
fd
 = 
	`›í
(
mux_dev_«me
, 
O_RDWR
);

2759 i‡(
fd
 < 0) {

2760 
	`w¨n
("have_rouã_to: couldn'à›í %s: %m", 
mux_dev_«me
);

2764 
ªq
.ªq.
PRIM_ty≥
 = 
T_OPTMGMT_REQ
;

2765 
ªq
.ªq.
OPT_off£t
 = (*Ë&ªq.
hdr
 - (*) &req;

2766 
ªq
.ªq.
OPT_Àngth
 = ‘eq.
hdr
);

2767 
ªq
.ªq.
MGMT_Êags
 = 
T_CURRENT
;

2769 
ªq
.
hdr
.
Àvñ
 = 
MIB2_IP
;

2770 
ªq
.
hdr
.
«me
 = 0;

2771 
ªq
.
hdr
.
Àn
 = 0;

2773 
cbuf
.
buf
 = (*Ë&
ªq
;

2774 
cbuf
.
Àn
 = (
ªq
);

2776 i‡(
	`putmsg
(
fd
, &
cbuf
, 
NULL
, 0) == -1) {

2777 
	`w¨n
("have_route_to:Öutmsg: %m");

2778 
	`˛o£
(
fd
);

2783 
cbuf
.
buf
 = (*Ë&
ack
;

2784 
cbuf
.
maxÀn
 = (
ack
);

2785 
dbuf
.
buf
 = (*Ë
rouãs
;

2786 
dbuf
.
maxÀn
 = (
rouãs
);

2787 
Êags
 = 0;

2788 
r
 = 
	`gëmsg
(
fd
, &
cbuf
, &
dbuf
, &
Êags
);

2789 i‡(
r
 == -1) {

2790 
	`w¨n
("have_route_to: getmsg: %m");

2791 
	`˛o£
(
fd
);

2795 i‡(
cbuf
.
Àn
 < (
T_›tmgmt_ack
)

2796 || 
ack
.ack.
PRIM_ty≥
 !
T_OPTMGMT_ACK


2797 || 
ack
.ack.
MGMT_Êags
 !
T_SUCCESS


2798 || 
ack
.ack.
OPT_Àngth
 < (
›thdr
)) {

2799 
	`dbglog
("have_route_to: bad messageÜen=%dÖrim=%d",

2800 
cbuf
.
Àn
, 
ack
.ack.
PRIM_ty≥
);

2801 
	`˛o£
(
fd
);

2805 
rh
 = (
›thdr
 *Ë((*)&
ack
 +áck.ack.
OPT_off£t
);

2806 i‡(
rh
->
Àvñ
 =0 &&Ñh->
«me
 == 0)

2808 i‡(
rh
->
Àvñ
 !
MIB2_IP
 ||Ñh->
«me
 !
MIB2_IP_21
) {

2809 
r
 =
MOREDATA
)

2810 
r
 = 
	`gëmsg
(
fd
, 
NULL
, &
dbuf
, &
Êags
);

2815 
ƒouãs
 = 
dbuf
.
Àn
 / (
mib2_ùRouãE¡ry_t
);

2816 
Ω
 = 
rouãs
, 
i
 = 0; i < 
ƒouãs
; ++i, ++rp) {

2817 i‡(
Ω
->
ùRouãMask
 != ~0) {

2818 
	`dbglog
("have_route_to: dest=%x gw=%x mask=%x\n",

2819 
Ω
->
ùRouãDe°
,Ñp->
ùRouãNextH›
,

2820 
Ω
->
ùRouãMask
);

2821 i‡(((
addr
 ^ 
Ω
->
ùRouãDe°
Ë&Ñp->
ùRouãMask
) == 0

2822 && 
Ω
->
ùRouãNextH›
 !
ªmŸe_addr
)

2826 i‡(
r
 == 0)

2828 
r
 = 
	`gëmsg
(
fd
, 
NULL
, &
dbuf
, &
Êags
);

2831 
	`˛o£
(
fd
);

2836 
	}
}

2843 
	$gë_±y
(
ma°î_fdp
, 
¶ave_fdp
, 
¶ave_«me
, 
uid
)

2844 *
ma°î_fdp
;

2845 *
¶ave_fdp
;

2846 *
¶ave_«me
;

2847 
uid
;

2849 
mfd
, 
sfd
;

2850 *
±y_«me
;

2852 
mfd
 = 
	`›í
("/dev/±mx", 
O_RDWR
);

2853 i‡(
mfd
 < 0) {

2854 
	`îr‹
("Couldn't openÖty master: %m");

2858 
±y_«me
 = 
	`±¢ame
(
mfd
);

2859 i‡(
±y_«me
 =
NULL
) {

2860 
	`îr‹
("Couldn't getÇame ofÖty slave");

2861 
	`˛o£
(
mfd
);

2864 i‡(
	`chown
(
±y_«me
, 
uid
, -1) < 0)

2865 
	`w¨n
("Couldn't change owner ofÖty slave: %m");

2866 i‡(
	`chmod
(
±y_«me
, 
S_IRUSR
 | 
S_IWUSR
) < 0)

2867 
	`w¨n
("Couldn't changeÖermissions onÖty slave: %m");

2868 i‡(
	`u∆ock±
(
mfd
) < 0)

2869 
	`w¨n
("Couldn't unlockÖty slave: %m");

2871 
sfd
 = 
	`›í
(
±y_«me
, 
O_RDWR
);

2872 i‡(
sfd
 < 0) {

2873 
	`îr‹
("Couldn'à›íÖty sœvê%s: %m", 
±y_«me
);

2874 
	`˛o£
(
mfd
);

2877 i‡(
	`io˘l
(
sfd
, 
I_PUSH
, "ptem") < 0)

2878 
	`w¨n
("Couldn'tÖushÖtem module onÖty slave: %m");

2880 
	`dbglog
("Usög %s", 
±y_«me
);

2881 
	`°æ˝y
(
¶ave_«me
, 
±y_«me
, 
MAXPATHLEN
);

2882 *
ma°î_fdp
 = 
mfd
;

2883 *
¶ave_fdp
 = 
sfd
;

2886 
	}
}

2893 
	$gë_time
(
timevÆ
 *
tv
)

2895  
	`gëtimeofday
(
tv
, 
NULL
);

2896 
	}
}

	@pppd/tdb.c

49 
	~<°dlib.h
>

50 
	~<°dio.h
>

51 
	~<f˙é.h
>

52 
	~<uni°d.h
>

53 
	~<°rög.h
>

54 
	~<f˙é.h
>

55 
	~<î∫o.h
>

56 
	~<sys/mm™.h
>

57 
	~<sys/°©.h
>

58 
	~<sig«l.h
>

59 
	~"tdb.h
"

60 
	~"•ölock.h
"

62 
	#TDB_MAGIC_FOOD
 "TDB fûe\n"

	)

63 
	#TDB_VERSION
 (0x26011967 + 6)

	)

64 
	#TDB_MAGIC
 (0x26011999U)

	)

65 
	#TDB_FREE_MAGIC
 (~
TDB_MAGIC
)

	)

66 
	#TDB_DEAD_MAGIC
 (0xFEE1DEAD)

	)

67 
	#TDB_ALIGNMENT
 4

	)

68 
	#MIN_REC_SIZE
 (2*(
li°_°ru˘
Ë+ 
TDB_ALIGNMENT
)

	)

69 
	#DEFAULT_HASH_SIZE
 131

	)

70 
	#TDB_PAGE_SIZE
 0x2000

	)

71 
	#FREELIST_TOP
 ((
tdb_hódî
))

	)

72 
	#TDB_ALIGN
(
x
,
a
Ë(((xË+ (a)-1Ë& ~(◊)-1))

	)

73 
	#TDB_BYTEREV
(
x
Ë(((((x)&0xff)<<24)|((x)&0xFF00)<<8)|(((x)>>8)&0xFF00)|((x)>>24))

	)

74 
	#TDB_DEAD
(
r
Ë(‘)->
magic
 =
TDB_DEAD_MAGIC
)

	)

75 
	#TDB_BAD_MAGIC
(
r
Ë(‘)->
magic
 !
TDB_MAGIC
 && !
	`TDB_DEAD
‘))

	)

76 
	#TDB_HASH_TOP
(
hash
Ë(
FREELIST_TOP
 + (
	`BUCKET
(hash)+1)*(
tdb_off
))

	)

77 
	#TDB_DATA_START
(
hash_size
Ë(
	`TDB_HASH_TOP
(hash_size-1Ë+ 
	`TDB_SPINLOCK_SIZE
(hash_size))

	)

83 
	#TDB_LOG
(
x
Ë(
tdb
->
log_‚
?(—db->log_‚ x),0Ë: 0)

	)

86 
	#GLOBAL_LOCK
 0

	)

87 
	#ACTIVE_LOCK
 4

	)

89 #i‚de‡
MAP_FILE


90 
	#MAP_FILE
 0

	)

93 #i‚de‡
MAP_FAILED


94 
	#MAP_FAILED
 ((*)-1)

	)

98 #i‚de‡
SAFE_FREE


99 
	#SAFE_FREE
(
x
Ëdÿ{ i‡((xË!
NULL
Ë{
	`‰ì
((x)); (x)=NULL;} } 0)

	)

102 
	#BUCKET
(
hash
Ë((hashË% 
tdb
->
hódî
.
hash_size
)

	)

103 
TDB_DATA
 
	gtdb_nuŒ
;

106 
TDB_CONTEXT
 *
	gtdbs
 = 
NULL
;

108 
	$tdb_munm≠
(
TDB_CONTEXT
 *
tdb
)

110 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

113 #ifde‡
HAVE_MMAP


114 i‡(
tdb
->
m≠_±r
) {

115 
ªt
 = 
	`munm≠
(
tdb
->
m≠_±r
,Ådb->
m≠_size
);

116 i‡(
ªt
 != 0)

117  
ªt
;

120 
tdb
->
m≠_±r
 = 
NULL
;

122 
	}
}

124 
	$tdb_mm≠
(
TDB_CONTEXT
 *
tdb
)

126 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

129 #ifde‡
HAVE_MMAP


130 i‡(!(
tdb
->
Êags
 & 
TDB_NOMMAP
)) {

131 
tdb
->
m≠_±r
 = 
	`mm≠
(
NULL
,Ådb->
m≠_size
,

132 
PROT_READ
|(
tdb
->
ªad_⁄ly
? 0:
PROT_WRITE
),

133 
MAP_SHARED
|
MAP_FILE
, 
tdb
->
fd
, 0);

139 i‡(
tdb
->
m≠_±r
 =
MAP_FAILED
) {

140 
tdb
->
m≠_±r
 = 
NULL
;

141 
	`TDB_LOG
((
tdb
, 2, "tdb_mmap failed for size %d (%s)\n",

142 
tdb
->
m≠_size
, 
	`°ªº‹
(
î∫o
)));

145 
tdb
->
m≠_±r
 = 
NULL
;

148 
tdb
->
m≠_±r
 = 
NULL
;

150 
	}
}

153 *
	$c⁄vît
(*
buf
, 
u32
 
size
)

155 
u32
 
i
, *
p
 = 
buf
;

156 
i
 = 0; i < 
size
 / 4; i++)

157 
p
[
i
] = 
	`TDB_BYTEREV
(p[i]);

158  
buf
;

159 
	}
}

160 
	#DOCONV
(Ë(
tdb
->
Êags
 & 
TDB_CONVERT
)

	)

161 
	#CONVERT
(
x
Ë(
	`DOCONV
(Ë? 
	`c⁄vît
(&x, (x)Ë: &x)

	)

165 
	sli°_°ru˘
 {

166 
tdb_off
 
	m√xt
;

167 
tdb_Àn
 
	mªc_Àn
;

168 
tdb_Àn
 
	mkey_Àn
;

169 
tdb_Àn
 
	md©a_Àn
;

170 
u32
 
	mfuŒ_hash
;

171 
u32
 
	mmagic
;

189 
sig_©omic_t
 *
	g∑œrm_fúed
;

191 
	$tdb_£t_lock_Æ¨m
(
sig_©omic_t
 *
∑œrm
)

193 
∑œrm_fúed
 = 
∑œrm
;

194 
	}
}

201 
	$tdb_bæock
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
,

202 
rw_ty≥
, 
lck_ty≥
, 
¥obe
)

204 
Êock
 
Ê
;

205 
ªt
;

207 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
)

209 i‡((
rw_ty≥
 =
F_WRLCK
Ë&& (
tdb
->
ªad_⁄ly
)) {

210 
î∫o
 = 
EACCES
;

214 
Ê
.
l_ty≥
 = 
rw_ty≥
;

215 
Ê
.
l_whí˚
 = 
SEEK_SET
;

216 
Ê
.
l_°¨t
 = 
off£t
;

217 
Ê
.
l_Àn
 = 1;

218 
Ê
.
l_pid
 = 0;

221 
ªt
 = 
	`f˙é
(
tdb
->
fd
,
lck_ty≥
,&
Ê
);

222 i‡(
ªt
 =-1 && 
î∫o
 =
EINTR
 && 
∑œrm_fúed
 && *palarm_fired)

224 } 
ªt
 =-1 && 
î∫o
 =
EINTR
);

226 i‡(
ªt
 == -1) {

227 i‡(!
¥obe
 && 
lck_ty≥
 !
F_SETLK
) {

229 i‡(
î∫o
 =
EINTR
 && 
∑œrm_fúed
 && *palarm_fired)

230 
tdb
->
ecode
 = 
TDB_ERR_LOCK_TIMEOUT
;

232 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

233 
	`TDB_LOG
((
tdb
, 5,"tdb_brlock failed (fd=%d)át offset %dÑw_type=%dÜck_type=%d\n",

234 
tdb
->
fd
, 
off£t
, 
rw_ty≥
, 
lck_ty≥
));

237 i‡(
î∫o
 =
EINTR
 && 
∑œrm_fúed
 && *palarm_fired) {

238 
	`TDB_LOG
((
tdb
, 5, "tdb_brlockÅimed out (fd=%d)át offset %dÑw_type=%dÜck_type=%d\n",

239 
tdb
->
fd
, 
off£t
, 
rw_ty≥
, 
lck_ty≥
));

240  
	`TDB_ERRCODE
(
TDB_ERR_LOCK_TIMEOUT
, -1);

245 i‡(
î∫o
 !
EAGAIN
) {

246 
	`TDB_LOG
((
tdb
, 5, "tdb_brlock failed (fd=%d)át offset %dÑw_type=%dÜck_type=%d: %s\n",

247 
tdb
->
fd
, 
off£t
, 
rw_ty≥
, 
lck_ty≥
,

248 
	`°ªº‹
(
î∫o
)));

250  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

253 
	}
}

256 
	$tdb_lock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
…y≥
)

258 i‡(
li°
 < -1 ||Üi° >()
tdb
->
hódî
.
hash_size
) {

259 
	`TDB_LOG
((
tdb
, 0,"tdb_lock: invalidÜist %d forÜtype=%d\n",

260 
li°
, 
…y≥
));

263 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
)

268 i‡(
tdb
->
locked
[
li°
+1].
cou¡
 == 0) {

269 i‡(!
tdb
->
ªad_⁄ly
 &&Ådb->
hódî
.
rwlocks
) {

270 i‡(
	`tdb_•ölock
(
tdb
, 
li°
, 
…y≥
)) {

271 
	`TDB_LOG
((
tdb
, 0, "tdb_lock spinlock failed onÜist %dÜtype=%d\n",

272 
li°
, 
…y≥
));

275 } i‡(
	`tdb_bæock
(
tdb
,
FREELIST_TOP
+4*
li°
,
…y≥
,
F_SETLKW
, 0)) {

276 
	`TDB_LOG
((
tdb
, 0,"tdb_lock failed onÜist %dÜtype=%d (%s)\n",

277 
li°
, 
…y≥
, 
	`°ªº‹
(
î∫o
)));

280 
tdb
->
locked
[
li°
+1].
…y≥
 =Ütype;

282 
tdb
->
locked
[
li°
+1].
cou¡
++;

284 
	}
}

289 
	$tdb_u∆ock
(
TDB_CONTEXT
 *
tdb
, 
li°
, 
…y≥
)

291 
ªt
 = -1;

293 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
)

297 i‡(
li°
 < -1 ||Üi° >()
tdb
->
hódî
.
hash_size
) {

298 
	`TDB_LOG
((
tdb
, 0, "tdb_u∆ock:Üi° %d invÆid (%d)\n", 
li°
,Ådb->
hódî
.
hash_size
));

299  
ªt
;

302 i‡(
tdb
->
locked
[
li°
+1].
cou¡
==0) {

303 
	`TDB_LOG
((
tdb
, 0, "tdb_unlock: count is 0\n"));

304  
ªt
;

307 i‡(
tdb
->
locked
[
li°
+1].
cou¡
 == 1) {

309 i‡(!
tdb
->
ªad_⁄ly
 &&Ådb->
hódî
.
rwlocks
) {

310 
ªt
 = 
	`tdb_•öu∆ock
(
tdb
, 
li°
, 
…y≥
);

312 
ªt
 = 
	`tdb_bæock
(
tdb
, 
FREELIST_TOP
+4*
li°
, 
F_UNLCK
, 
F_SETLKW
, 0);

315 
ªt
 = 0;

317 
tdb
->
locked
[
li°
+1].
cou¡
--;

319 i‡(
ªt
)

320 
	`TDB_LOG
((
tdb
, 0,"tdb_unlock: AnÉrror occurred unlocking!\n"));

321  
ªt
;

322 
	}
}

329 
	$tdb_oob
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
Àn
, 
¥obe
)

331 
°©
 
°
;

332 i‡(
Àn
 <
tdb
->
m≠_size
)

334 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

335 i‡(!
¥obe
) {

337 
tdb
->
ecode
 = 
TDB_ERR_IO
;

338 
	`TDB_LOG
((
tdb
, 0,"tdb_oobÜen %d beyond internal malloc size %d\n",

339 ()
Àn
, ()
tdb
->
m≠_size
));

341  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

344 i‡(
	`f°©
(
tdb
->
fd
, &
°
) == -1)

345  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

347 i‡(
°
.
°_size
 < (
size_t
)
Àn
) {

348 i‡(!
¥obe
) {

350 
tdb
->
ecode
 = 
TDB_ERR_IO
;

351 
	`TDB_LOG
((
tdb
, 0,"tdb_oobÜen %d beyondÉofát %d\n",

352 ()
Àn
, ()
°
.
°_size
));

354  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

358 i‡(
	`tdb_munm≠
(
tdb
) == -1)

359  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

360 
tdb
->
m≠_size
 = 
°
.
°_size
;

361 
	`tdb_mm≠
(
tdb
);

363 
	}
}

366 
	$tdb_wrôe
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
, *
buf
, 
tdb_Àn
 
Àn
)

368 i‡(
	`tdb_oob
(
tdb
, 
off
 + 
Àn
, 0) != 0)

371 i‡(
tdb
->
m≠_±r
)

372 
	`mem˝y
(
off
 + (*)
tdb
->
m≠_±r
, 
buf
, 
Àn
);

373 #ifde‡
HAVE_PWRITE


374 i‡(
	`pwrôe
(
tdb
->
fd
, 
buf
, 
Àn
, 
off
Ë!(
ssize_t
)len) {

376 i‡(
	`l£ek
(
tdb
->
fd
, 
off
, 
SEEK_SET
) != off

377 || 
	`wrôe
(
tdb
->
fd
, 
buf
, 
Àn
Ë!(
ssize_t
)len) {

380 
tdb
->
ecode
 = 
TDB_ERR_IO
;

381 
	`TDB_LOG
((
tdb
, 0,"tdb_write failedát %dÜen=%d (%s)\n",

382 
off
, 
Àn
, 
	`°ªº‹
(
î∫o
)));

383  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

386 
	}
}

389 
	$tdb_ªad
(
TDB_CONTEXT
 *
tdb
,
tdb_off
 
off
,*
buf
,
tdb_Àn
 
Àn
,
cv
)

391 i‡(
	`tdb_oob
(
tdb
, 
off
 + 
Àn
, 0) != 0)

394 i‡(
tdb
->
m≠_±r
)

395 
	`mem˝y
(
buf
, 
off
 + (*)
tdb
->
m≠_±r
, 
Àn
);

396 #ifde‡
HAVE_PREAD


397 i‡(
	`¥ód
(
tdb
->
fd
, 
buf
, 
Àn
, 
off
Ë!(
ssize_t
)len) {

399 i‡(
	`l£ek
(
tdb
->
fd
, 
off
, 
SEEK_SET
) != off

400 || 
	`ªad
(
tdb
->
fd
, 
buf
, 
Àn
Ë!(
ssize_t
)len) {

403 
tdb
->
ecode
 = 
TDB_ERR_IO
;

404 
	`TDB_LOG
((
tdb
, 0,"tdb_read failedát %dÜen=%d (%s)\n",

405 
off
, 
Àn
, 
	`°ªº‹
(
î∫o
)));

406  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

408 i‡(
cv
)

409 
	`c⁄vît
(
buf
, 
Àn
);

411 
	}
}

414 *
	$tdb_Æloc_ªad
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
, 
tdb_Àn
 
Àn
)

416 *
buf
;

418 i‡(!(
buf
 = 
	`mÆloc
(
Àn
))) {

420 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

421 
	`TDB_LOG
((
tdb
, 0,"tdb_alloc_read malloc failedÜen=%d (%s)\n",

422 
Àn
, 
	`°ªº‹
(
î∫o
)));

423  
	`TDB_ERRCODE
(
TDB_ERR_OOM
, 
buf
);

425 i‡(
	`tdb_ªad
(
tdb
, 
off£t
, 
buf
, 
Àn
, 0) == -1) {

426 
	`SAFE_FREE
(
buf
);

427  
NULL
;

429  
buf
;

430 
	}
}

433 
	$ofs_ªad
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
,Ådb_of‡*
d
)

435  
	`tdb_ªad
(
tdb
, 
off£t
, (*)
d
, (*d), 
	`DOCONV
());

436 
	}
}

437 
	$ofs_wrôe
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
,Ådb_of‡*
d
)

439 
tdb_off
 
off
 = *
d
;

440  
	`tdb_wrôe
(
tdb
, 
off£t
, 
	`CONVERT
(
off
), (*
d
));

441 
	}
}

444 
	$ªc_ªad
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
, 
li°_°ru˘
 *
ªc
)

446 i‡(
	`tdb_ªad
(
tdb
, 
off£t
, 
ªc
, (*ªc),
	`DOCONV
()) == -1)

448 i‡(
	`TDB_BAD_MAGIC
(
ªc
)) {

450 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

451 
	`TDB_LOG
((
tdb
, 0,"ªc_ªad bad magi¯0x%xáàoff£t=%d\n", 
ªc
->
magic
, 
off£t
));

452  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

454  
	`tdb_oob
(
tdb
, 
ªc
->
√xt
+(*rec), 0);

455 
	}
}

456 
	$ªc_wrôe
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
, 
li°_°ru˘
 *
ªc
)

458 
li°_°ru˘
 
r
 = *
ªc
;

459  
	`tdb_wrôe
(
tdb
, 
off£t
, 
	`CONVERT
(
r
), (r));

460 
	}
}

463 
	$ªc_‰ì_ªad
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
, 
li°_°ru˘
 *
ªc
)

465 i‡(
	`tdb_ªad
(
tdb
, 
off
, 
ªc
, (*ªc),
	`DOCONV
()) == -1)

468 i‡(
ªc
->
magic
 =
TDB_MAGIC
) {

471 
	`TDB_LOG
((
tdb
, 0,"rec_free_readÇon-free magic 0x%xát offset=%d - fixing\n",

472 
ªc
->
magic
, 
off
));

473 
ªc
->
magic
 = 
TDB_FREE_MAGIC
;

474 i‡(
	`tdb_wrôe
(
tdb
, 
off
, 
ªc
, (*rec)) == -1)

478 i‡(
ªc
->
magic
 !
TDB_FREE_MAGIC
) {

480 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

481 
	`TDB_LOG
((
tdb
, 0,"rec_free_read bad magic 0x%xát offset=%d\n",

482 
ªc
->
magic
, 
off
));

483  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

485 i‡(
	`tdb_oob
(
tdb
, 
ªc
->
√xt
+(*rec), 0) != 0)

488 
	}
}

491 
	$upd©e_èûî
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
,

492 c⁄° 
li°_°ru˘
 *
ªc
)

494 
tdb_off
 
tŸÆsize
;

497 
tŸÆsize
 = (*
ªc
Ë+Ñec->
ªc_Àn
;

498  
	`ofs_wrôe
(
tdb
, 
off£t
 + 
tŸÆsize
 - (
tdb_off
),

499 &
tŸÆsize
);

500 
	}
}

502 
tdb_off
 
	$tdb_dump_ªc‹d
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
)

504 
li°_°ru˘
 
ªc
;

505 
tdb_off
 
èûî_ofs
, 
èûî
;

507 i‡(
	`tdb_ªad
(
tdb
, 
off£t
, (*)&
ªc
, ‘ec), 
	`DOCONV
()) == -1) {

508 
	`¥ötf
("ERROR: faûedÅÿªadÑec‹dáà%u\n", 
off£t
);

512 
	`¥ötf
("Ñec: offset=%uÇext=%dÑec_len=%d key_len=%d data_len=%d full_hash=0x%x magic=0x%x\n",

513 
off£t
, 
ªc
.
√xt
,Ñec.
ªc_Àn
,Ñec.
key_Àn
,Ñec.
d©a_Àn
,Ñec.
fuŒ_hash
,Ñec.
magic
);

515 
èûî_ofs
 = 
off£t
 + (
ªc
Ë+Ñec.
ªc_Àn
 - (
tdb_off
);

516 i‡(
	`ofs_ªad
(
tdb
, 
èûî_ofs
, &
èûî
) == -1) {

517 
	`¥ötf
("ERROR: faûedÅÿªadÅaûîáà%u\n", 
èûî_ofs
);

518  
ªc
.
√xt
;

521 i‡(
èûî
 !
ªc
.
ªc_Àn
 + (rec)) {

522 
	`¥ötf
("ERROR:Åailer doesÇot matchÑecord!Åailer=%uÅotalsize=%u\n",

523 ()
èûî
, ()(
ªc
.
ªc_Àn
 + (rec)));

525  
ªc
.
√xt
;

526 
	}
}

528 
	$tdb_dump_chaö
(
TDB_CONTEXT
 *
tdb
, 
i
)

530 
tdb_off
 
ªc_±r
, 
t›
;

532 
t›
 = 
	`TDB_HASH_TOP
(
i
);

534 i‡(
	`tdb_lock
(
tdb
, 
i
, 
F_WRLCK
) != 0)

537 i‡(
	`ofs_ªad
(
tdb
, 
t›
, &
ªc_±r
) == -1)

538  
	`tdb_u∆ock
(
tdb
, 
i
, 
F_WRLCK
);

540 i‡(
ªc_±r
)

541 
	`¥ötf
("hash=%d\n", 
i
);

543 
ªc_±r
) {

544 
ªc_±r
 = 
	`tdb_dump_ªc‹d
(
tdb
,Ñec_ptr);

547  
	`tdb_u∆ock
(
tdb
, 
i
, 
F_WRLCK
);

548 
	}
}

550 
	$tdb_dump_Æl
(
TDB_CONTEXT
 *
tdb
)

552 
i
;

553 
i
=0;i<
tdb
->
hódî
.
hash_size
;i++) {

554 
	`tdb_dump_chaö
(
tdb
, 
i
);

556 
	`¥ötf
("freelist:\n");

557 
	`tdb_dump_chaö
(
tdb
, -1);

558 
	}
}

560 
	$tdb_¥öt‰ìli°
(
TDB_CONTEXT
 *
tdb
)

562 
ªt
;

563 
tŸÆ_‰ì
 = 0;

564 
tdb_off
 
off£t
, 
ªc_±r
;

565 
li°_°ru˘
 
ªc
;

567 i‡((
ªt
 = 
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
)) != 0)

568  
ªt
;

570 
off£t
 = 
FREELIST_TOP
;

573 i‡(
	`ofs_ªad
(
tdb
, 
off£t
, &
ªc_±r
) == -1) {

574 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

578 
	`¥ötf
("‰ìli°Å›=[0x%08x]\n", 
ªc_±r
 );

579 
ªc_±r
) {

580 i‡(
	`tdb_ªad
(
tdb
, 
ªc_±r
, (*)&
ªc
, ‘ec), 
	`DOCONV
()) == -1) {

581 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

585 i‡(
ªc
.
magic
 !
TDB_FREE_MAGIC
) {

586 
	`¥ötf
("bad magi¯0x%08x i¿‰ìÜi°\n", 
ªc
.
magic
);

587 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

591 
	`¥ötf
("íåy off£t=[0x%08x],Ñec.ªc_À¿[0x%08x (%d)]\n", 
ªc
.
√xt
,Ñec.
ªc_Àn
,Ñec.rec_len );

592 
tŸÆ_‰ì
 +
ªc
.
ªc_Àn
;

595 
ªc_±r
 = 
ªc
.
√xt
;

597 
	`¥ötf
("tŸÆÑec_À¿[0x%08x (%d)]\n", ()
tŸÆ_‰ì
,

598 ()
tŸÆ_‰ì
);

600  
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

601 
	}
}

604 
	$ªmove_‰om_‰ìli°
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
,Ådb_of‡
√xt
)

606 
tdb_off
 
œ°_±r
, 
i
;

609 
œ°_±r
 = 
FREELIST_TOP
;

610 
	`ofs_ªad
(
tdb
, 
œ°_±r
, &
i
) != -1 && i != 0) {

611 i‡(
i
 =
off
) {

613  
	`ofs_wrôe
(
tdb
, 
œ°_±r
, &
√xt
);

616 
œ°_±r
 = 
i
;

618 
	`TDB_LOG
((
tdb
, 0,"ªmove_‰om_‰ìli°:ÇŸ o¿li°áàoff=%d\n", 
off
));

619  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

620 
	}
}

624 
	$tdb_‰ì
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off£t
, 
li°_°ru˘
 *
ªc
)

626 
tdb_off
 
right
, 
À·
;

629 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) != 0)

633 i‡(
	`upd©e_èûî
(
tdb
, 
off£t
, 
ªc
) != 0) {

634 
	`TDB_LOG
((
tdb
, 0, "tdb_free: upfate_tailer failed!\n"));

635 
Áû
;

639 
right
 = 
off£t
 + (*
ªc
Ë+Ñec->
ªc_Àn
;

640 i‡(
right
 + (*
ªc
Ë<
tdb
->
m≠_size
) {

641 
li°_°ru˘
 
r
;

643 i‡(
	`tdb_ªad
(
tdb
, 
right
, &
r
, ‘), 
	`DOCONV
()) == -1) {

644 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì:Ñighàªad faûedáà%u\n", 
right
));

645 
À·
;

649 i‡(
r
.
magic
 =
TDB_FREE_MAGIC
) {

650 i‡(
	`ªmove_‰om_‰ìli°
(
tdb
, 
right
, 
r
.
√xt
) == -1) {

651 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì:Ñighà‰ì faûedáà%u\n", 
right
));

652 
À·
;

654 
ªc
->
ªc_Àn
 +(
r
) +Ñ.rec_len;

658 
À·
:

660 
À·
 = 
off£t
 - (
tdb_off
);

661 i‡(
À·
 > 
	`TDB_DATA_START
(
tdb
->
hódî
.
hash_size
)) {

662 
li°_°ru˘
 
l
;

663 
tdb_off
 
À·size
;

666 i‡(
	`ofs_ªad
(
tdb
, 
À·
, &
À·size
) == -1) {

667 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì:Üe· off£àªad faûedáà%u\n", 
À·
));

668 
upd©e
;

670 
À·
 = 
off£t
 - 
À·size
;

673 i‡(
	`tdb_ªad
(
tdb
, 
À·
, &
l
, ÷), 
	`DOCONV
()) == -1) {

674 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì:Üe·Ñód faûedáà%u (%u)\n", 
À·
, 
À·size
));

675 
upd©e
;

679 i‡(
l
.
magic
 =
TDB_FREE_MAGIC
) {

680 i‡(
	`ªmove_‰om_‰ìli°
(
tdb
, 
À·
, 
l
.
√xt
) == -1) {

681 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì:Üe· fªêÁûedáà%u\n", 
À·
));

682 
upd©e
;

684 
off£t
 = 
À·
;

685 
ªc
->
ªc_Àn
 +
À·size
;

690 
upd©e
:

691 i‡(
	`upd©e_èûî
(
tdb
, 
off£t
, 
ªc
) == -1) {

692 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ì: upd©e_èûî faûedáà%u\n", 
off£t
));

693 
Áû
;

697 
ªc
->
magic
 = 
TDB_FREE_MAGIC
;

699 i‡(
	`ofs_ªad
(
tdb
, 
FREELIST_TOP
, &
ªc
->
√xt
) == -1 ||

700 
	`ªc_wrôe
(
tdb
, 
off£t
, 
ªc
) == -1 ||

701 
	`ofs_wrôe
(
tdb
, 
FREELIST_TOP
, &
off£t
) == -1) {

702 
	`TDB_LOG
((
tdb
, 0, "tdb_‰ìÑec‹d wrôêÁûedáàoff£t=%d\n", 
off£t
));

703 
Áû
;

707 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

710 
Áû
:

711 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

713 
	}
}

718 
	$ex∑nd_fûe
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
size
,Ådb_of‡
addôi⁄
)

720 
buf
[1024];

721 #i‡
HAVE_FTRUNCATE_EXTEND


722 i‡(
	`·runˇã
(
tdb
->
fd
, 
size
+
addôi⁄
) != 0) {

723 
	`TDB_LOG
((
tdb
, 0, "expand_file ftruncateÅo %d failed (%s)\n",

724 
size
+
addôi⁄
, 
	`°ªº‹
(
î∫o
)));

728 
b
 = 0;

730 #ifde‡
HAVE_PWRITE


731 i‡(
	`pwrôe
(
tdb
->
fd
, &
b
, 1, (
size
+
addôi⁄
) - 1) != 1) {

733 i‡(
	`l£ek
(
tdb
->
fd
, (
size
+
addôi⁄
Ë- 1, 
SEEK_SET
) != (size+addition) - 1 ||

734 
	`wrôe
(
tdb
->
fd
, &
b
, 1) != 1) {

736 
	`TDB_LOG
((
tdb
, 0, "expand_fileÅo %d failed (%s)\n",

737 
size
+
addôi⁄
, 
	`°ªº‹
(
î∫o
)));

744 
	`mem£t
(
buf
, 0x42, (buf));

745 
addôi⁄
) {

746 
n
 = 
addôi⁄
>(
buf
)?(buf):addition;

747 #ifde‡
HAVE_PWRITE


748 
ªt
 = 
	`pwrôe
(
tdb
->
fd
, 
buf
, 
n
, 
size
);

750 
ªt
;

751 i‡(
	`l£ek
(
tdb
->
fd
, 
size
, 
SEEK_SET
) != size)

753 
ªt
 = 
	`wrôe
(
tdb
->
fd
, 
buf
, 
n
);

755 i‡(
ªt
 !
n
) {

756 
	`TDB_LOG
((
tdb
, 0, "expand_file write of %d failed (%s)\n",

757 
n
, 
	`°ªº‹
(
î∫o
)));

760 
addôi⁄
 -
n
;

761 
size
 +
n
;

764 
	}
}

769 
	$tdb_ex∑nd
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
size
)

771 
li°_°ru˘
 
ªc
;

772 
tdb_off
 
off£t
;

774 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1) {

775 
	`TDB_LOG
((
tdb
, 0, "lock failed inÅdb_expand\n"));

780 
	`tdb_oob
(
tdb
,Ådb->
m≠_size
 + 1, 1);

784 
size
 = 
	`TDB_ALIGN
(
tdb
->
m≠_size
 + size*10, 
TDB_PAGE_SIZE
) -Ådb->map_size;

786 i‡(!(
tdb
->
Êags
 & 
TDB_INTERNAL
))

787 
	`tdb_munm≠
(
tdb
);

796 i‡(!(
tdb
->
Êags
 & 
TDB_INTERNAL
)) {

797 i‡(
	`ex∑nd_fûe
(
tdb
,Ådb->
m≠_size
, 
size
) != 0)

798 
Áû
;

801 
tdb
->
m≠_size
 +
size
;

803 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

804 
tdb
->
m≠_±r
 = 
	`ªÆloc
—db->m≠_±r,Ådb->
m≠_size
);

813 
	`tdb_mm≠
(
tdb
);

817 
	`mem£t
(&
ªc
,'\0',(rec));

818 
ªc
.
ªc_Àn
 = 
size
 - (rec);

821 
off£t
 = 
tdb
->
m≠_size
 - 
size
;

822 i‡(
	`tdb_‰ì
(
tdb
, 
off£t
, &
ªc
) == -1)

823 
Áû
;

825 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

827 
Áû
:

828 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

830 
	}
}

838 
tdb_off
 
	$tdb_Æloˇã
(
TDB_CONTEXT
 *
tdb
, 
tdb_Àn
 
Àngth
,

839 
li°_°ru˘
 *
ªc
)

841 
tdb_off
 
ªc_±r
, 
œ°_±r
, 
√wªc_±r
;

842 
li°_°ru˘
 
√wªc
;

844 
	`mem£t
(&
√wªc
, '\0', (newrec));

846 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1)

850 
Àngth
 +(
tdb_off
);

852 
agaö
:

853 
œ°_±r
 = 
FREELIST_TOP
;

856 i‡(
	`ofs_ªad
(
tdb
, 
FREELIST_TOP
, &
ªc_±r
) == -1)

857 
Áû
;

860 
ªc_±r
) {

861 i‡(
	`ªc_‰ì_ªad
(
tdb
, 
ªc_±r
, 
ªc
) == -1)

862 
Áû
;

864 i‡(
ªc
->
ªc_Àn
 >
Àngth
) {

866 i‡(
ªc
->
ªc_Àn
 > 
Àngth
 + 
MIN_REC_SIZE
) {

868 
Àngth
 = 
	`TDB_ALIGN
÷ígth, 
TDB_ALIGNMENT
);

871 
√wªc
.
ªc_Àn
 = 
ªc
->rec_len

872 - ((*
ªc
Ë+ 
Àngth
);

873 
√wªc_±r
 = 
ªc_±r
 + (*
ªc
Ë+ 
Àngth
;

876 
ªc
->
ªc_Àn
 = 
Àngth
;

878 
√wªc_±r
 = 0;

881 i‡(
	`ofs_wrôe
(
tdb
, 
œ°_±r
, &
ªc
->
√xt
) == -1)

882 
Áû
;

888 
ªc
->
magic
 = 
TDB_MAGIC
;

889 i‡(
	`ªc_wrôe
(
tdb
, 
ªc_±r
, 
ªc
) == -1)

890 
Áû
;

893 i‡(
√wªc_±r
) {

896 i‡(
	`upd©e_èûî
(
tdb
, 
ªc_±r
, 
ªc
) == -1)

897 
Áû
;

900 i‡(
	`tdb_‰ì
(
tdb
, 
√wªc_±r
, &
√wªc
) == -1)

901 
Áû
;

905 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

906  
ªc_±r
;

909 
œ°_±r
 = 
ªc_±r
;

910 
ªc_±r
 = 
ªc
->
√xt
;

914 i‡(
	`tdb_ex∑nd
(
tdb
, 
Àngth
 + (*
ªc
)) == 0)

915 
agaö
;

916 
Áû
:

917 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

919 
	}
}

922 
	$tdb_√w_d©aba£
(
TDB_CONTEXT
 *
tdb
, 
hash_size
)

924 
tdb_hódî
 *
√wdb
;

925 
size
, 
ªt
 = -1;

928 
size
 = (
tdb_hódî
Ë+ (
hash_size
+1)*(
tdb_off
);

929 i‡(!(
√wdb
 = 
	`ˇŒoc
(
size
, 1)))

930  
	`TDB_ERRCODE
(
TDB_ERR_OOM
, -1);

933 
√wdb
->
vîsi⁄
 = 
TDB_VERSION
;

934 
√wdb
->
hash_size
 = hash_size;

935 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

936 
tdb
->
m≠_size
 = 
size
;

937 
tdb
->
m≠_±r
 = (*)
√wdb
;

938 
	`mem˝y
(&
tdb
->
hódî
, 
√wdb
, (tdb->header));

940 
	`CONVERT
(*
√wdb
);

943 i‡(
	`l£ek
(
tdb
->
fd
, 0, 
SEEK_SET
) == -1)

944 
Áû
;

946 i‡(
	`·runˇã
(
tdb
->
fd
, 0) == -1)

947 
Áû
;

950 
	`CONVERT
(*
√wdb
);

951 
	`mem˝y
(&
tdb
->
hódî
, 
√wdb
, (tdb->header));

953 
	`mem˝y
(
√wdb
->
magic_food
, 
TDB_MAGIC_FOOD
, 
	`°æí
(TDB_MAGIC_FOOD)+1);

954 i‡(
	`wrôe
(
tdb
->
fd
, 
√wdb
, 
size
) != size)

955 
ªt
 = -1;

957 
ªt
 = 
	`tdb_¸óã_rwlocks
(
tdb
->
fd
, 
hash_size
);

959 
Áû
:

960 
	`SAFE_FREE
(
√wdb
);

961  
ªt
;

962 
	}
}

966 
tdb_off
 
	$tdb_föd
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
,

967 
li°_°ru˘
 *
r
)

969 
tdb_off
 
ªc_±r
;

972 i‡(
	`ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1)

976 
ªc_±r
) {

977 i‡(
	`ªc_ªad
(
tdb
, 
ªc_±r
, 
r
) == -1)

980 i‡(!
	`TDB_DEAD
(
r
Ë&& 
hash
=Ù->
fuŒ_hash
 && 
key
.
dsize
=Ù->
key_Àn
) {

981 *
k
;

983 
k
 = 
	`tdb_Æloc_ªad
(
tdb
, 
ªc_±r
 + (*
r
),

984 
r
->
key_Àn
);

985 i‡(!
k
)

988 i‡(
	`memcmp
(
key
.
d±r
, 
k
, key.
dsize
) == 0) {

989 
	`SAFE_FREE
(
k
);

990  
ªc_±r
;

992 
	`SAFE_FREE
(
k
);

994 
ªc_±r
 = 
r
->
√xt
;

996  
	`TDB_ERRCODE
(
TDB_ERR_NOEXIST
, 0);

997 
	}
}

1000 
tdb_off
 
	$tdb_föd_lock_hash
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, 
lockty≥
,

1001 
li°_°ru˘
 *
ªc
)

1003 
u32
 
ªc_±r
;

1005 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
lockty≥
) == -1)

1007 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, 
ªc
)))

1008 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
lockty≥
);

1009  
ªc_±r
;

1010 
	}
}

1012 
TDB_ERROR
 
	$tdb_îr‹
(
TDB_CONTEXT
 *
tdb
)

1014  
tdb
->
ecode
;

1015 
	}
}

1017 
	stdb_î∫ame
 {

1018 
TDB_ERROR
 
	mecode
; c⁄° *
	me°rög
;

1019 } 
	gem≠
[] = { {
TDB_SUCCESS
, "Success"},

1020 {
TDB_ERR_CORRUPT
, "Corrupt database"},

1021 {
TDB_ERR_IO
, "IO Error"},

1022 {
TDB_ERR_LOCK
, "LockingÉrror"},

1023 {
TDB_ERR_OOM
, "Out of memory"},

1024 {
TDB_ERR_EXISTS
, "RecordÉxists"},

1025 {
TDB_ERR_NOLOCK
, "LockÉxists on other keys"},

1026 {
TDB_ERR_NOEXIST
, "Record doesÇotÉxist"} };

1029 c⁄° *
	$tdb_îr‹°r
(
TDB_CONTEXT
 *
tdb
)

1031 
u32
 
i
;

1032 
i
 = 0; i < (
em≠
Ë/ (
tdb_î∫ame
); i++)

1033 i‡(
tdb
->
ecode
 =
em≠
[
i
].ecode)

1034  
em≠
[
i
].
e°rög
;

1036 
	}
}

1043 
	$tdb_upd©e_hash
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, TDB_DATA 
dbuf
)

1045 
li°_°ru˘
 
ªc
;

1046 
tdb_off
 
ªc_±r
;

1049 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, &
ªc
)))

1053 i‡(
ªc
.
ªc_Àn
 < 
key
.
dsize
 + 
dbuf
.dsizê+ (
tdb_off
)) {

1054 
tdb
->
ecode
 = 
TDB_SUCCESS
;

1058 i‡(
	`tdb_wrôe
(
tdb
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
,

1059 
dbuf
.
d±r
, dbuf.
dsize
) == -1)

1062 i‡(
dbuf
.
dsize
 !
ªc
.
d©a_Àn
) {

1064 
ªc
.
d©a_Àn
 = 
dbuf
.
dsize
;

1065  
	`ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
);

1069 
	}
}

1078 
TDB_DATA
 
	$tdb_„tch
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1080 
tdb_off
 
ªc_±r
;

1081 
li°_°ru˘
 
ªc
;

1082 
TDB_DATA
 
ªt
;

1083 
u32
 
hash
;

1086 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

1087 i‡(!(
ªc_±r
 = 
	`tdb_föd_lock_hash
(
tdb
,
key
,
hash
,
F_RDLCK
,&
ªc
)))

1088  
tdb_nuŒ
;

1090 i‡(
ªc
.
d©a_Àn
)

1091 
ªt
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
,

1092 
ªc
.
d©a_Àn
);

1094 
ªt
.
d±r
 = 
NULL
;

1095 
ªt
.
dsize
 = 
ªc
.
d©a_Àn
;

1096 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_RDLCK
);

1097  
ªt
;

1098 
	}
}

1106 
	$tdb_exi°s_hash
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
)

1108 
li°_°ru˘
 
ªc
;

1110 i‡(
	`tdb_föd_lock_hash
(
tdb
, 
key
, 
hash
, 
F_RDLCK
, &
ªc
) == 0)

1112 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_RDLCK
);

1114 
	}
}

1116 
	$tdb_exi°s
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1118 
u32
 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

1119  
	`tdb_exi°s_hash
(
tdb
, 
key
, 
hash
);

1120 
	}
}

1123 
	$lock_ªc‹d
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
)

1125  
off
 ? 
	`tdb_bæock
(
tdb
, off, 
F_RDLCK
, 
F_SETLKW
, 0) : 0;

1126 
	}
}

1133 
	$wrôe_lock_ªc‹d
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
)

1135 
tdb_åavî£_lock
 *
i
;

1136 
i
 = &
tdb
->
åavlocks
; i; i = i->
√xt
)

1137 i‡(
i
->
off
 == off)

1139  
	`tdb_bæock
(
tdb
, 
off
, 
F_WRLCK
, 
F_SETLK
, 1);

1140 
	}
}

1147 
	$wrôe_u∆ock_ªc‹d
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
)

1149  
	`tdb_bæock
(
tdb
, 
off
, 
F_UNLCK
, 
F_SETLK
, 0);

1150 
	}
}

1152 
	$u∆ock_ªc‹d
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
off
)

1154 
tdb_åavî£_lock
 *
i
;

1155 
u32
 
cou¡
 = 0;

1157 i‡(
off
 == 0)

1159 
i
 = &
tdb
->
åavlocks
; i; i = i->
√xt
)

1160 i‡(
i
->
off
 == off)

1161 
cou¡
++;

1162  (
cou¡
 =1 ? 
	`tdb_bæock
(
tdb
, 
off
, 
F_UNLCK
, 
F_SETLKW
, 0) : 0);

1163 
	}
}

1166 
	$do_dñëe
(
TDB_CONTEXT
 *
tdb
, 
tdb_off
 
ªc_±r
, 
li°_°ru˘
*
ªc
)

1168 
tdb_off
 
œ°_±r
, 
i
;

1169 
li°_°ru˘
 
œ°ªc
;

1171 i‡(
tdb
->
ªad_⁄ly
)  -1;

1173 i‡(
	`wrôe_lock_ªc‹d
(
tdb
, 
ªc_±r
) == -1) {

1175 
ªc
->
magic
 = 
TDB_DEAD_MAGIC
;

1176  
	`ªc_wrôe
(
tdb
, 
ªc_±r
, 
ªc
);

1178 i‡(
	`wrôe_u∆ock_ªc‹d
(
tdb
, 
ªc_±r
) != 0)

1182 i‡(
	`ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
ªc
->
fuŒ_hash
), &
i
) == -1)

1184 
œ°_±r
 = 0; 
i
 !
ªc_±r
;Üa°_±∏i, i = 
œ°ªc
.
√xt
)

1185 i‡(
	`ªc_ªad
(
tdb
, 
i
, &
œ°ªc
) == -1)

1189 i‡(
œ°_±r
 == 0)

1190 
œ°_±r
 = 
	`TDB_HASH_TOP
(
ªc
->
fuŒ_hash
);

1191 i‡(
	`ofs_wrôe
(
tdb
, 
œ°_±r
, &
ªc
->
√xt
) == -1)

1195 i‡(
	`tdb_‰ì
(
tdb
, 
ªc_±r
, 
ªc
) == -1)

1198 
	}
}

1201 
	$tdb_√xt_lock
(
TDB_CONTEXT
 *
tdb
, 
tdb_åavî£_lock
 *
éock
,

1202 
li°_°ru˘
 *
ªc
)

1204 
w™t_√xt
 = (
éock
->
off
 != 0);

1207 ; 
éock
->
hash
 < 
tdb
->
hódî
.
hash_size
;Ålock->hash++) {

1208 i‡(
	`tdb_lock
(
tdb
, 
éock
->
hash
, 
F_WRLCK
) == -1)

1212 i‡(!
éock
->
off
) {

1213 i‡(
	`ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
éock
->
hash
),

1214 &
éock
->
off
) == -1)

1215 
Áû
;

1218 i‡(
	`u∆ock_ªc‹d
(
tdb
, 
éock
->
off
) != 0)

1219 
Áû
;

1222 i‡(
w™t_√xt
) {

1224 i‡(
	`ªc_ªad
(
tdb
, 
éock
->
off
, 
ªc
) == -1)

1225 
Áû
;

1226 
éock
->
off
 = 
ªc
->
√xt
;

1230  
éock
->
off
) {

1231 
tdb_off
 
cuºít
;

1232 i‡(
	`ªc_ªad
(
tdb
, 
éock
->
off
, 
ªc
) == -1)

1233 
Áû
;

1234 i‡(!
	`TDB_DEAD
(
ªc
)) {

1236 i‡(
	`lock_ªc‹d
(
tdb
, 
éock
->
off
) != 0)

1237 
Áû
;

1238  
éock
->
off
;

1241 
cuºít
 = 
éock
->
off
;

1242 
éock
->
off
 = 
ªc
->
√xt
;

1243 i‡(!
tdb
->
ªad_⁄ly
 &&

1244 
	`do_dñëe
(
tdb
, 
cuºít
, 
ªc
) != 0)

1245 
Áû
;

1247 
	`tdb_u∆ock
(
tdb
, 
éock
->
hash
, 
F_WRLCK
);

1248 
w™t_√xt
 = 0;

1251  
	`TDB_ERRCODE
(
TDB_SUCCESS
, 0);

1253 
Áû
:

1254 
éock
->
off
 = 0;

1255 i‡(
	`tdb_u∆ock
(
tdb
, 
éock
->
hash
, 
F_WRLCK
) != 0)

1256 
	`TDB_LOG
((
tdb
, 0, "tdb_next_lock: OnÉrror unlock failed!\n"));

1258 
	}
}

1265 
	$tdb_åavî£
(
TDB_CONTEXT
 *
tdb
, 
tdb_åavî£_func
 
‚
, *
¥iv©e
)

1267 
TDB_DATA
 
key
, 
dbuf
;

1268 
li°_°ru˘
 
ªc
;

1269 
tdb_åavî£_lock
 
é
 = { 
NULL
, 0, 0 };

1270 
ªt
, 
cou¡
 = 0;

1275 
é
.
√xt
 = 
tdb
->
åavlocks
.next;

1278 
tdb
->
åavlocks
.
√xt
 = &
é
;

1281 (
ªt
 = 
	`tdb_√xt_lock
(
tdb
, &
é
, &
ªc
)) > 0) {

1282 
cou¡
++;

1284 
key
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
, 
é
.
off
 + (
ªc
),

1285 
ªc
.
key_Àn
 +Ñec.
d©a_Àn
);

1286 i‡(!
key
.
d±r
) {

1287 
ªt
 = -1;

1288 i‡(
	`tdb_u∆ock
(
tdb
, 
é
.
hash
, 
F_WRLCK
) != 0)

1289 
out
;

1290 i‡(
	`u∆ock_ªc‹d
(
tdb
, 
é
.
off
) != 0)

1291 
	`TDB_LOG
((
tdb
, 0, "tdb_traverse: key.dptr == NULLánd unlock_record failed!\n"));

1292 
out
;

1294 
key
.
dsize
 = 
ªc
.
key_Àn
;

1295 
dbuf
.
d±r
 = 
key
.d±∏+ 
ªc
.
key_Àn
;

1296 
dbuf
.
dsize
 = 
ªc
.
d©a_Àn
;

1299 i‡(
	`tdb_u∆ock
(
tdb
, 
é
.
hash
, 
F_WRLCK
) != 0) {

1300 
ªt
 = -1;

1301 
out
;

1303 i‡(
‚
 && 
	`‚
(
tdb
, 
key
, 
dbuf
, 
¥iv©e
)) {

1305 
ªt
 = 
cou¡
;

1306 i‡(
	`u∆ock_ªc‹d
(
tdb
, 
é
.
off
) != 0) {

1307 
	`TDB_LOG
((
tdb
, 0, "tdb_traverse: unlock_record failed!\n"));;

1308 
ªt
 = -1;

1310 
tdb
->
åavlocks
.
√xt
 = 
é
.next;

1311 
	`SAFE_FREE
(
key
.
d±r
);

1312  
cou¡
;

1314 
	`SAFE_FREE
(
key
.
d±r
);

1316 
out
:

1317 
tdb
->
åavlocks
.
√xt
 = 
é
.next;

1318 i‡(
ªt
 < 0)

1321  
cou¡
;

1322 
	}
}

1325 
TDB_DATA
 
	$tdb_fú°key
(
TDB_CONTEXT
 *
tdb
)

1327 
TDB_DATA
 
key
;

1328 
li°_°ru˘
 
ªc
;

1331 i‡(
	`u∆ock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0)

1332  
tdb_nuŒ
;

1333 
tdb
->
åavlocks
.
off
 =Ådb->åavlocks.
hash
 = 0;

1335 i‡(
	`tdb_√xt_lock
(
tdb
, &tdb->
åavlocks
, &
ªc
) <= 0)

1336  
tdb_nuŒ
;

1338 
key
.
dsize
 = 
ªc
.
key_Àn
;

1339 
key
.
d±r
 =
	`tdb_Æloc_ªad
(
tdb
,tdb->
åavlocks
.
off
+(
ªc
),key.
dsize
);

1340 i‡(
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
åavlocks
.
hash
), 
F_WRLCK
) != 0)

1341 
	`TDB_LOG
((
tdb
, 0, "tdb_firstkey:Érror occurred whileÅdb_unlocking!\n"));

1342  
key
;

1343 
	}
}

1346 
TDB_DATA
 
	$tdb_√xtkey
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
ﬁdkey
)

1348 
u32
 
ﬁdhash
;

1349 
TDB_DATA
 
key
 = 
tdb_nuŒ
;

1350 
li°_°ru˘
 
ªc
;

1351 *
k
 = 
NULL
;

1354 i‡(
tdb
->
åavlocks
.
off
) {

1355 i‡(
	`tdb_lock
(
tdb
,tdb->
åavlocks
.
hash
,
F_WRLCK
))

1356  
tdb_nuŒ
;

1357 i‡(
	`ªc_ªad
(
tdb
,Ådb->
åavlocks
.
off
, &
ªc
) == -1

1358 || !(
k
 = 
	`tdb_Æloc_ªad
(
tdb
,tdb->
åavlocks
.
off
+(
ªc
),

1359 
ªc
.
key_Àn
))

1360 || 
	`memcmp
(
k
, 
ﬁdkey
.
d±r
, oldkey.
dsize
) != 0) {

1362 i‡(
	`u∆ock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0)

1363  
tdb_nuŒ
;

1364 i‡(
	`tdb_u∆ock
(
tdb
,Ådb->
åavlocks
.
hash
, 
F_WRLCK
) != 0)

1365  
tdb_nuŒ
;

1366 
tdb
->
åavlocks
.
off
 = 0;

1369 
	`SAFE_FREE
(
k
);

1372 i‡(!
tdb
->
åavlocks
.
off
) {

1374 
tdb
->
åavlocks
.
off
 = 
	`tdb_föd_lock_hash
—db, 
ﬁdkey
,Ådb->
	`hash_‚
(&ﬁdkey), 
F_WRLCK
, &
ªc
);

1375 i‡(!
tdb
->
åavlocks
.
off
)

1376  
tdb_nuŒ
;

1377 
tdb
->
åavlocks
.
hash
 = 
	`BUCKET
(
ªc
.
fuŒ_hash
);

1378 i‡(
	`lock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0) {

1379 
	`TDB_LOG
((
tdb
, 0, "tdb_√xtkey:Üock_ªc‹d faûed (%s)!\n", 
	`°ªº‹
(
î∫o
)));

1380  
tdb_nuŒ
;

1383 
ﬁdhash
 = 
tdb
->
åavlocks
.
hash
;

1387 i‡(
	`tdb_√xt_lock
(
tdb
, &tdb->
åavlocks
, &
ªc
) > 0) {

1388 
key
.
dsize
 = 
ªc
.
key_Àn
;

1389 
key
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
,Ådb->
åavlocks
.
off
+(
ªc
),

1390 
key
.
dsize
);

1392 i‡(
	`tdb_u∆ock
(
tdb
,Ådb->
åavlocks
.
hash
, 
F_WRLCK
) != 0)

1393 
	`TDB_LOG
((
tdb
, 0, "tdb_nextkey: WARNINGÅdb_unlock failed!\n"));

1396 i‡(
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ﬁdhash
), 
F_WRLCK
) != 0)

1397 
	`TDB_LOG
((
tdb
, 0, "tdb_nextkey: WARNINGÅdb_unlock failed!\n"));

1398  
key
;

1399 
	}
}

1402 
	$tdb_dñëe_hash
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
)

1404 
tdb_off
 
ªc_±r
;

1405 
li°_°ru˘
 
ªc
;

1406 
ªt
;

1408 i‡(!(
ªc_±r
 = 
	`tdb_föd_lock_hash
(
tdb
, 
key
, 
hash
, 
F_WRLCK
, &
ªc
)))

1410 
ªt
 = 
	`do_dñëe
(
tdb
, 
ªc_±r
, &
ªc
);

1411 i‡(
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_WRLCK
) != 0)

1412 
	`TDB_LOG
((
tdb
, 0, "tdb_delete: WARNINGÅdb_unlock failed!\n"));

1413  
ªt
;

1414 
	}
}

1416 
	$tdb_dñëe
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1418 
u32
 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

1419  
	`tdb_dñëe_hash
(
tdb
, 
key
, 
hash
);

1420 
	}
}

1427 
	$tdb_°‹e
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
)

1429 
li°_°ru˘
 
ªc
;

1430 
u32
 
hash
;

1431 
tdb_off
 
ªc_±r
;

1432 *
p
 = 
NULL
;

1433 
ªt
 = 0;

1436 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

1437 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
) == -1)

1441 i‡(
Êag
 =
TDB_INSERT
) {

1442 i‡(
	`tdb_exi°s_hash
(
tdb
, 
key
, 
hash
)) {

1443 
tdb
->
ecode
 = 
TDB_ERR_EXISTS
;

1444 
Áû
;

1448 i‡(
	`tdb_upd©e_hash
(
tdb
, 
key
, 
hash
, 
dbuf
) == 0)

1449 
out
;

1450 i‡(
tdb
->
ecode
 =
TDB_ERR_NOEXIST
 &&

1451 
Êag
 =
TDB_MODIFY
) {

1454 
Áû
;

1458 
tdb
->
ecode
 = 
TDB_SUCCESS
;

1463 i‡(
Êag
 !
TDB_INSERT
)

1464 
	`tdb_dñëe_hash
(
tdb
, 
key
, 
hash
);

1469 i‡(!(
p
 = (*)
	`mÆloc
(
key
.
dsize
 + 
dbuf
.dsize))) {

1470 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1471 
Áû
;

1474 
	`mem˝y
(
p
, 
key
.
d±r
, key.
dsize
);

1475 i‡(
dbuf
.
dsize
)

1476 
	`mem˝y
(
p
+
key
.
dsize
, 
dbuf
.
d±r
, dbuf.dsize);

1479 i‡(!(
ªc_±r
 = 
	`tdb_Æloˇã
(
tdb
, 
key
.
dsize
 + 
dbuf
.dsize, &
ªc
)))

1480 
Áû
;

1483 i‡(
	`ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc
.
√xt
) == -1)

1484 
Áû
;

1486 
ªc
.
key_Àn
 = 
key
.
dsize
;

1487 
ªc
.
d©a_Àn
 = 
dbuf
.
dsize
;

1488 
ªc
.
fuŒ_hash
 = 
hash
;

1489 
ªc
.
magic
 = 
TDB_MAGIC
;

1492 i‡(
	`ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
) == -1

1493 || 
	`tdb_wrôe
(
tdb
, 
ªc_±r
+(
ªc
), 
p
, 
key
.
dsize
+
dbuf
.dsize)==-1

1494 || 
	`ofs_wrôe
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1) {

1496 
Áû
;

1498 
out
:

1499 
	`SAFE_FREE
(
p
);

1500 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
);

1501  
ªt
;

1502 
Áû
:

1503 
ªt
 = -1;

1504 
out
;

1505 
	}
}

1511 
	$tdb_≠≥nd_ö∂a˚
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, TDB_DATA 
√w_dbuf
)

1513 
li°_°ru˘
 
ªc
;

1514 
tdb_off
 
ªc_±r
;

1517 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, &
ªc
)))

1521 i‡(
√w_dbuf
.
dsize
 == 0)

1525 i‡(
ªc
.
ªc_Àn
 < 
key
.
dsize
 +Ñec.
d©a_Àn
 + 
√w_dbuf
.dsizê+ (
tdb_off
)) {

1527 
tdb
->
ecode
 = 
TDB_SUCCESS
;

1531 i‡(
	`tdb_wrôe
(
tdb
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
 +Ñec.
d©a_Àn
,

1532 
√w_dbuf
.
d±r
,Çew_dbuf.
dsize
) == -1)

1536 
ªc
.
d©a_Àn
 +
√w_dbuf
.
dsize
;

1537  
	`ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
);

1538 
	}
}

1542 
	$tdb_≠≥nd
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
)

1544 
li°_°ru˘
 
ªc
;

1545 
u32
 
hash
;

1546 
tdb_off
 
ªc_±r
;

1547 *
p
 = 
NULL
;

1548 
ªt
 = 0;

1549 
size_t
 
√w_d©a_size
 = 0;

1552 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

1553 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
) == -1)

1557 i‡(
	`tdb_≠≥nd_ö∂a˚
(
tdb
, 
key
, 
hash
, 
√w_dbuf
) == 0)

1558 
out
;

1561 
tdb
->
ecode
 = 
TDB_SUCCESS
;

1564 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, &
ªc
))) {

1565 i‡(
tdb
->
ecode
 !
TDB_ERR_NOEXIST
)

1566 
Áû
;

1570 
ªt
 = 
	`tdb_°‹e
(
tdb
, 
key
, 
√w_dbuf
, 
TDB_INSERT
);

1571 
out
;

1574 
√w_d©a_size
 = 
ªc
.
d©a_Àn
 + 
√w_dbuf
.
dsize
;

1579 i‡(!(
p
 = (*)
	`mÆloc
(
key
.
dsize
 + 
√w_d©a_size
))) {

1580 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1581 
Áû
;

1585 
	`mem˝y
(
p
, 
key
.
d±r
, key.
dsize
);

1588 i‡(
ªc
.
d©a_Àn
 &&

1589 
	`tdb_ªad
(
tdb
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
, 
p
 + 
key
.
dsize
,Ñec.
d©a_Àn
, 0) == -1)

1590 
Áû
;

1593 i‡(
√w_dbuf
.
dsize
)

1594 
	`mem˝y
(
p
+
key
.
dsize
+
ªc
.
d©a_Àn
, 
√w_dbuf
.
d±r
,Çew_dbuf.dsize);

1600 
	`tdb_dñëe_hash
(
tdb
, 
key
, 
hash
);

1602 i‡(!(
ªc_±r
 = 
	`tdb_Æloˇã
(
tdb
, 
key
.
dsize
 + 
√w_d©a_size
, &
ªc
)))

1603 
Áû
;

1606 i‡(
	`ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc
.
√xt
) == -1)

1607 
Áû
;

1609 
ªc
.
key_Àn
 = 
key
.
dsize
;

1610 
ªc
.
d©a_Àn
 = 
√w_d©a_size
;

1611 
ªc
.
fuŒ_hash
 = 
hash
;

1612 
ªc
.
magic
 = 
TDB_MAGIC
;

1615 i‡(
	`ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
) == -1

1616 || 
	`tdb_wrôe
(
tdb
, 
ªc_±r
+(
ªc
), 
p
, 
key
.
dsize
+
√w_d©a_size
)==-1

1617 || 
	`ofs_wrôe
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1) {

1619 
Áû
;

1622 
out
:

1623 
	`SAFE_FREE
(
p
);

1624 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
);

1625  
ªt
;

1627 
Áû
:

1628 
ªt
 = -1;

1629 
out
;

1630 
	}
}

1632 
	$tdb_Æªady_›í
(
dev_t
 
devi˚
,

1633 
öo_t
 
öo
)

1635 
TDB_CONTEXT
 *
i
;

1637 
i
 = 
tdbs
; i; i = i->
√xt
) {

1638 i‡(
i
->
devi˚
 =devi˚ && i->
öode
 =
öo
) {

1644 
	}
}

1647 
u32
 
	$deÁu…_tdb_hash
(
TDB_DATA
 *
key
)

1649 
u32
 
vÆue
;

1650 
u32
 
i
;

1653 
vÆue
 = 0x238F13AF * 
key
->
dsize
, 
i
=0; i < key->dsize; i++)

1654 
vÆue
 = (vÆuê+ (
key
->
d±r
[
i
] << (i*5 % 24)));

1656  (1103515243 * 
vÆue
 + 12345);

1657 
	}
}

1669 
TDB_CONTEXT
 *
	$tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

1670 
›í_Êags
, 
mode_t
 
mode
)

1672  
	`tdb_›í_ex
(
«me
, 
hash_size
, 
tdb_Êags
, 
›í_Êags
, 
mode
, 
NULL
, NULL);

1673 
	}
}

1676 
TDB_CONTEXT
 *
	$tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

1677 
›í_Êags
, 
mode_t
 
mode
,

1678 
tdb_log_func
 
log_‚
,

1679 
tdb_hash_func
 
hash_‚
)

1681 
TDB_CONTEXT
 *
tdb
;

1682 
°©
 
°
;

1683 
ªv
 = 0, 
locked
 = 0;

1684 *
vp
;

1685 
u32
 
vîã°
;

1687 i‡(!(
tdb
 = 
	`ˇŒoc
(1,  *tdb))) {

1689 
î∫o
 = 
ENOMEM
;

1690 
Áû
;

1692 
tdb
->
fd
 = -1;

1693 
tdb
->
«me
 = 
NULL
;

1694 
tdb
->
m≠_±r
 = 
NULL
;

1695 
tdb
->
Êags
 = 
tdb_Êags
;

1696 
tdb
->
›í_Êags
 = open_flags;

1697 
tdb
->
log_‚
 =Üog_fn;

1698 
tdb
->
hash_‚
 = hash_‚ ? hash_‚ : 
deÁu…_tdb_hash
;

1700 i‡((
›í_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

1701 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex: can't openÅdb %s write-only\n",

1702 
«me
));

1703 
î∫o
 = 
EINVAL
;

1704 
Áû
;

1707 i‡(
hash_size
 == 0)

1708 
hash_size
 = 
DEFAULT_HASH_SIZE
;

1709 i‡((
›í_Êags
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

1710 
tdb
->
ªad_⁄ly
 = 1;

1712 
tdb
->
Êags
 |
TDB_NOLOCK
;

1713 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

1717 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

1718 
tdb
->
Êags
 |(
TDB_NOLOCK
 | 
TDB_NOMMAP
);

1719 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

1720 i‡(
	`tdb_√w_d©aba£
(
tdb
, 
hash_size
) != 0) {

1721 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex:Ådb_new_database failed!"));

1722 
Áû
;

1724 
öã∫Æ
;

1727 i‡((
tdb
->
fd
 = 
	`›í
(
«me
, 
›í_Êags
, 
mode
)) == -1) {

1728 
	`TDB_LOG
((
tdb
, 5, "tdb_open_ex: couldÇot open file %s: %s\n",

1729 
«me
, 
	`°ªº‹
(
î∫o
)));

1730 
Áû
;

1734 i‡(
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_WRLCK
, 
F_SETLKW
, 0) == -1) {

1735 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex: failedÅo get globalÜock on %s: %s\n",

1736 
«me
, 
	`°ªº‹
(
î∫o
)));

1737 
Áû
;

1741 i‡((
tdb_Êags
 & 
TDB_CLEAR_IF_FIRST
) &&

1742 (
locked
 = (
	`tdb_bæock
(
tdb
, 
ACTIVE_LOCK
, 
F_WRLCK
, 
F_SETLK
, 0) == 0))) {

1743 
›í_Êags
 |
O_CREAT
;

1744 i‡(
	`·runˇã
(
tdb
->
fd
, 0) == -1) {

1745 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex: "

1747 
«me
, 
	`°ªº‹
(
î∫o
)));

1748 
Áû
;

1752 i‡(
	`ªad
(
tdb
->
fd
, &tdb->
hódî
, (tdb->header)) != (tdb->header)

1753 || 
	`°rcmp
(
tdb
->
hódî
.
magic_food
, 
TDB_MAGIC_FOOD
) != 0

1754 || (
tdb
->
hódî
.
vîsi⁄
 !
TDB_VERSION


1755 && !(
ªv
 = (
tdb
->
hódî
.
vîsi⁄
==
	`TDB_BYTEREV
(
TDB_VERSION
))))) {

1757 i‡(!(
›í_Êags
 & 
O_CREAT
Ë|| 
	`tdb_√w_d©aba£
(
tdb
, 
hash_size
) == -1) {

1758 
î∫o
 = 
EIO
;

1759 
Áû
;

1761 
ªv
 = (
tdb
->
Êags
 & 
TDB_CONVERT
);

1763 
vp
 = (*)&
tdb
->
hódî
.
vîsi⁄
;

1764 
vîã°
 = (((
u32
)
vp
[0]) << 24) | (((u32)vp[1]) << 16) |

1765 (((
u32
)
vp
[2]) << 8) | (u32)vp[3];

1766 
tdb
->
Êags
 |(
vîã°
==
TDB_VERSION
Ë? 
TDB_BIGENDIAN
 : 0;

1767 i‡(!
ªv
)

1768 
tdb
->
Êags
 &~
TDB_CONVERT
;

1770 
tdb
->
Êags
 |
TDB_CONVERT
;

1771 
	`c⁄vît
(&
tdb
->
hódî
, (tdb->header));

1773 i‡(
	`f°©
(
tdb
->
fd
, &
°
) == -1)

1774 
Áû
;

1777 i‡(
	`tdb_Æªady_›í
(
°
.
°_dev
, st.
°_öo
)) {

1778 
	`TDB_LOG
((
tdb
, 2, "tdb_open_ex: "

1780 
«me
, ()
°
.
°_dev
, ()°.
°_öo
));

1781 
î∫o
 = 
EBUSY
;

1782 
Áû
;

1785 i‡(!(
tdb
->
«me
 = (*)
	`°rdup
(name))) {

1786 
î∫o
 = 
ENOMEM
;

1787 
Áû
;

1790 
tdb
->
m≠_size
 = 
°
.
°_size
;

1791 
tdb
->
devi˚
 = 
°
.
°_dev
;

1792 
tdb
->
öode
 = 
°
.
°_öo
;

1793 
tdb
->
locked
 = 
	`ˇŒoc
—db->
hódî
.
hash_size
+1, (tdb->locked[0]));

1794 i‡(!
tdb
->
locked
) {

1795 
	`TDB_LOG
((
tdb
, 2, "tdb_open_ex: "

1797 
«me
));

1798 
î∫o
 = 
ENOMEM
;

1799 
Áû
;

1801 
	`tdb_mm≠
(
tdb
);

1802 i‡(
locked
) {

1803 i‡(!
tdb
->
ªad_⁄ly
)

1804 i‡(
	`tdb_˛ór_•ölocks
(
tdb
) != 0) {

1805 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex: "

1807 
Áû
;

1809 i‡(
	`tdb_bæock
(
tdb
, 
ACTIVE_LOCK
, 
F_UNLCK
, 
F_SETLK
, 0) == -1) {

1810 
	`TDB_LOG
((
tdb
, 0, "tdb_open_ex: "

1812 
«me
, 
	`°ªº‹
(
î∫o
)));

1813 
Áû
;

1822 i‡(
tdb_Êags
 & 
TDB_CLEAR_IF_FIRST
) {

1824 i‡(
	`tdb_bæock
(
tdb
, 
ACTIVE_LOCK
, 
F_RDLCK
, 
F_SETLKW
, 0) == -1)

1825 
Áû
;

1829 
öã∫Æ
:

1833 i‡(
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0) == -1)

1834 
Áû
;

1835 
tdb
->
√xt
 = 
tdbs
;

1836 
tdbs
 = 
tdb
;

1837  
tdb
;

1839 
Áû
:

1840 { 
ßve_î∫o
 = 
î∫o
;

1842 i‡(!
tdb
)

1843  
NULL
;

1845 i‡(
tdb
->
m≠_±r
) {

1846 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

1847 
	`SAFE_FREE
(
tdb
->
m≠_±r
);

1849 
	`tdb_munm≠
(
tdb
);

1851 
	`SAFE_FREE
(
tdb
->
«me
);

1852 i‡(
tdb
->
fd
 != -1)

1853 i‡(
	`˛o£
(
tdb
->
fd
) != 0)

1854 
	`TDB_LOG
((
tdb
, 5, "tdb_open_ex: failedÅo closeÅdb->fd onÉrror!\n"));

1855 
	`SAFE_FREE
(
tdb
->
locked
);

1856 
	`SAFE_FREE
(
tdb
);

1857 
î∫o
 = 
ßve_î∫o
;

1858  
NULL
;

1860 
	}
}

1867 
	$tdb_˛o£
(
TDB_CONTEXT
 *
tdb
)

1869 
TDB_CONTEXT
 **
i
;

1870 
ªt
 = 0;

1872 i‡(
tdb
->
m≠_±r
) {

1873 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

1874 
	`SAFE_FREE
(
tdb
->
m≠_±r
);

1876 
	`tdb_munm≠
(
tdb
);

1878 
	`SAFE_FREE
(
tdb
->
«me
);

1879 i‡(
tdb
->
fd
 != -1)

1880 
ªt
 = 
	`˛o£
(
tdb
->
fd
);

1881 
	`SAFE_FREE
(
tdb
->
locked
);

1884 
i
 = &
tdbs
; *i; i = &(*i)->
√xt
) {

1885 i‡(*
i
 =
tdb
) {

1886 *
i
 = 
tdb
->
√xt
;

1891 
	`mem£t
(
tdb
, 0, (*tdb));

1892 
	`SAFE_FREE
(
tdb
);

1894  
ªt
;

1895 
	}
}

1898 
	$tdb_lockÆl
(
TDB_CONTEXT
 *
tdb
)

1900 
u32
 
i
;

1903 i‡(
tdb
->
ªad_⁄ly
)

1904  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

1905 
i
 = 0; i < 
tdb
->
hódî
.
hash_size
; i++)

1906 i‡(
	`tdb_lock
(
tdb
, 
i
, 
F_WRLCK
))

1910 i‡(
i
 < 
tdb
->
hódî
.
hash_size
) {

1911 
u32
 
j
;

1913  
j
 = 0; j < 
i
; j++)

1914 
	`tdb_u∆ock
(
tdb
, 
j
, 
F_WRLCK
);

1915  
	`TDB_ERRCODE
(
TDB_ERR_NOLOCK
, -1);

1919 
	}
}

1920 
	$tdb_u∆ockÆl
(
TDB_CONTEXT
 *
tdb
)

1922 
u32
 
i
;

1923 
i
=0; i < 
tdb
->
hódî
.
hash_size
; i++)

1924 
	`tdb_u∆ock
(
tdb
, 
i
, 
F_WRLCK
);

1925 
	}
}

1929 
	$tdb_chaölock
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1931  
	`tdb_lock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
);

1932 
	}
}

1934 
	$tdb_chaöu∆ock
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1936  
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
);

1937 
	}
}

1939 
	$tdb_chaölock_ªad
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1941  
	`tdb_lock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_RDLCK
);

1942 
	}
}

1944 
	$tdb_chaöu∆ock_ªad
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
)

1946  
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_RDLCK
);

1947 
	}
}

1951 
	$tdb_loggög_fun˘i⁄
(
TDB_CONTEXT
 *
tdb
, (*
‚
)(TDB_CONTEXT *, , const *, ...))

1953 
tdb
->
log_‚
 = 
‚
;

1954 
	}
}

1958 
	$tdb_ª›í
(
TDB_CONTEXT
 *
tdb
)

1960 
°©
 
°
;

1962 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

1964 i‡(
	`tdb_munm≠
(
tdb
) != 0) {

1965 
	`TDB_LOG
((
tdb
, 0, "tdb_ª›í: munm≠ faûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

1966 
Áû
;

1968 i‡(
	`˛o£
(
tdb
->
fd
) != 0)

1969 
	`TDB_LOG
((
tdb
, 0, "tdb_reopen: WARNING closingÅdb->fd failed!\n"));

1970 
tdb
->
fd
 = 
	`›í
—db->
«me
,Ådb->
›í_Êags
 & ~(
O_CREAT
|
O_TRUNC
), 0);

1971 i‡(
tdb
->
fd
 == -1) {

1972 
	`TDB_LOG
((
tdb
, 0, "tdb_ª›í: o≥¿Áûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

1973 
Áû
;

1975 i‡(
	`f°©
(
tdb
->
fd
, &
°
) != 0) {

1976 
	`TDB_LOG
((
tdb
, 0, "tdb_ª›í: f°© faûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

1977 
Áû
;

1979 i‡(
°
.
°_öo
 !
tdb
->
öode
 || st.
°_dev
 !tdb->
devi˚
) {

1980 
	`TDB_LOG
((
tdb
, 0, "tdb_reopen: file dev/inode has changed!\n"));

1981 
Áû
;

1983 
	`tdb_mm≠
(
tdb
);

1984 i‡((
tdb
->
Êags
 & 
TDB_CLEAR_IF_FIRST
Ë&& (
	`tdb_bæock
—db, 
ACTIVE_LOCK
, 
F_RDLCK
, 
F_SETLKW
, 0) == -1)) {

1985 
	`TDB_LOG
((
tdb
, 0, "tdb_reopen: failedÅo obtaináctiveÜock\n"));

1986 
Áû
;

1991 
Áû
:

1992 
	`tdb_˛o£
(
tdb
);

1994 
	}
}

1997 
	$tdb_ª›í_Æl
()

1999 
TDB_CONTEXT
 *
tdb
;

2001 
tdb
=
tdbs
;Ådb;Ådb =Ådb->
√xt
) {

2003 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

2004 i‡(
	`tdb_ª›í
(
tdb
) != 0)

2009 
	}
}

	@pppd/tdb.h

1 #i‚de‡
__TDB_H__


2 
	#__TDB_H__


	)

30 #ifde‡ 
__˝lu•lus


34 #i‚de‡
PRINTF_ATTRIBUTE


39 #i‡(
__GNUC__
 >= 3)

40 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á1,á2)))

	)

42 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
)

	)

47 
	#TDB_REPLACE
 1

	)

48 
	#TDB_INSERT
 2

	)

49 
	#TDB_MODIFY
 3

	)

52 
	#TDB_DEFAULT
 0

	)

53 
	#TDB_CLEAR_IF_FIRST
 1

	)

54 
	#TDB_INTERNAL
 2

	)

55 
	#TDB_NOLOCK
 4

	)

56 
	#TDB_NOMMAP
 8

	)

57 
	#TDB_CONVERT
 16

	)

58 
	#TDB_BIGENDIAN
 32

	)

60 
	#TDB_ERRCODE
(
code
, 
ªt
Ë((
tdb
->
ecode
 = (code)),Ñë)

	)

63 
	eTDB_ERROR
 {
TDB_SUCCESS
=0, 
TDB_ERR_CORRUPT
, 
TDB_ERR_IO
, 
TDB_ERR_LOCK
,

64 
TDB_ERR_OOM
, 
TDB_ERR_EXISTS
, 
TDB_ERR_NOLOCK
, 
TDB_ERR_LOCK_TIMEOUT
,

65 
TDB_ERR_NOEXIST
};

67 #i‚de‡
u32


68 
	#u32
 

	)

72 *
d±r
;

73 
size_t
 
dsize
;

74 } 
	tTDB_DATA
;

76 
u32
 
	ttdb_Àn
;

77 
u32
 
	ttdb_off
;

80 
	stdb_hódî
 {

81 
magic_food
[32];

82 
u32
 
vîsi⁄
;

83 
u32
 
hash_size
;

84 
tdb_off
 
rwlocks
;

85 
tdb_off
 
ª£rved
[31];

88 
	stdb_lock_ty≥
 {

89 
u32
 
cou¡
;

90 
u32
 
…y≥
;

93 
	stdb_åavî£_lock
 {

94 
tdb_åavî£_lock
 *
√xt
;

95 
u32
 
off
;

96 
u32
 
hash
;

100 
	stdb_c⁄ãxt
 {

101 *
«me
;

102 *
m≠_±r
;

103 
fd
;

104 
tdb_Àn
 
m≠_size
;

105 
ªad_⁄ly
;

106 
tdb_lock_ty≥
 *
locked
;

107 
TDB_ERROR
 
ecode
;

108 
tdb_hódî
 
hódî
;

109 
u32
 
Êags
;

110 
tdb_åavî£_lock
 
åavlocks
;

111 
tdb_c⁄ãxt
 *
√xt
;

112 
dev_t
 
devi˚
;

113 
öo_t
 
öode
;

114 (*
log_‚
)(
tdb_c⁄ãxt
 *
tdb
, 
Àvñ
, c⁄° *, ...Ë
PRINTF_ATTRIBUTE
(3,4);

115 
u32
 (*
hash_‚
)(
TDB_DATA
 *
key
);

116 
›í_Êags
;

117 } 
	tTDB_CONTEXT
;

119 (*
tdb_åavî£_func
)(
	tTDB_CONTEXT
 *, 
	tTDB_DATA
, TDB_DATA, *);

120 (*
tdb_log_func
)(
	tTDB_CONTEXT
 *, , const *, ...);

121 
u32
 (*
	ttdb_hash_func
)(
	tTDB_DATA
 *
	tkey
);

123 
TDB_CONTEXT
 *
tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

124 
›í_Êags
, 
mode_t
 
mode
);

125 
TDB_CONTEXT
 *
tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

126 
›í_Êags
, 
mode_t
 
mode
,

127 
tdb_log_func
 
log_‚
,

128 
tdb_hash_func
 
hash_‚
);

130 
tdb_ª›í
(
TDB_CONTEXT
 *
tdb
);

131 
tdb_ª›í_Æl
();

132 
tdb_loggög_fun˘i⁄
(
TDB_CONTEXT
 *
tdb
, 
tdb_log_func
);

133 
TDB_ERROR
 
tdb_îr‹
(
TDB_CONTEXT
 *
tdb
);

134 c⁄° *
tdb_îr‹°r
(
TDB_CONTEXT
 *
tdb
);

135 
TDB_DATA
 
tdb_„tch
(
TDB_CONTEXT
 *
tdb
, TDB_DATA 
key
);

136 
tdb_dñëe
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
);

137 
tdb_°‹e
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
);

138 
tdb_≠≥nd
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
);

139 
tdb_˛o£
(
TDB_CONTEXT
 *
tdb
);

140 
TDB_DATA
 
tdb_fú°key
(
TDB_CONTEXT
 *
tdb
);

141 
TDB_DATA
 
tdb_√xtkey
(
TDB_CONTEXT
 *
tdb
, TDB_DATA 
key
);

142 
tdb_åavî£
(
TDB_CONTEXT
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

143 
tdb_exi°s
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
);

144 
tdb_lockkeys
(
TDB_CONTEXT
 *
tdb
, 
u32
 
numbî
, 
TDB_DATA
 
keys
[]);

145 
tdb_u∆ockkeys
(
TDB_CONTEXT
 *
tdb
);

146 
tdb_lockÆl
(
TDB_CONTEXT
 *
tdb
);

147 
tdb_u∆ockÆl
(
TDB_CONTEXT
 *
tdb
);

150 
tdb_£t_lock_Æ¨m
(
sig_©omic_t
 *
∑œrm
);

151 
tdb_chaölock
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
);

152 
tdb_chaöu∆ock
(
TDB_CONTEXT
 *
tdb
, 
TDB_DATA
 
key
);

155 
tdb_dump_Æl
(
TDB_CONTEXT
 *
tdb
);

156 
tdb_¥öt‰ìli°
(
TDB_CONTEXT
 *
tdb
);

158 
TDB_DATA
 
tdb_nuŒ
;

160 #ifde‡ 
__˝lu•lus


	@pppd/tty.c

71 
	#RCSID
 "$Id:Åty.c,v 1.27 2008/07/01 12:27:56Öaulu†Ex∞$"

	)

73 
	~<°dio.h
>

74 
	~<˘y≥.h
>

75 
	~<°dlib.h
>

76 
	~<°rög.h
>

77 
	~<ãrmios.h
>

78 
	~<uni°d.h
>

79 
	~<sig«l.h
>

80 
	~<î∫o.h
>

81 
	~<f˙é.h
>

82 
	~<sy¶og.h
>

83 
	~<√tdb.h
>

84 
	~<utmp.h
>

85 
	~<pwd.h
>

86 
	~<sys/∑øm.h
>

87 
	~<sys/ty≥s.h
>

88 
	~<sys/waô.h
>

89 
	~<sys/time.h
>

90 
	~<sys/ªsour˚.h
>

91 
	~<sys/°©.h
>

92 
	~<sys/sockë.h
>

93 
	~<√töë/ö.h
>

94 
	~<¨∑/öë.h
>

96 
	~"µpd.h
"

97 
	~"fsm.h
"

98 
	~"l˝.h
"

100 
ây_¥o˚ss_exåa_›ti⁄s
 
__P
(());

101 
ây_check_›ti⁄s
 
__P
(());

102 
c⁄√˘_ây
 
__P
(());

103 
disc⁄√˘_ây
 
__P
(());

104 
ây_˛o£_fds
 
__P
(());

105 
˛ónup_ây
 
__P
(());

106 
ây_do_£nd_c⁄fig
 
__P
((, 
u_öt32_t
, , ));

108 
£tdev«me
 
__P
((*, **, ));

109 
£t•ìd
 
__P
((*, **, ));

110 
£tx⁄xoff
 
__P
((**));

111 
£ãsˇ≥
 
__P
((**));

112 
¥öãsˇ≥
 
__P
((
›ti⁄_t
 *, (*)(*, *,...),*));

113 
föish_ây
 
	`__P
(());

114 
°¨t_ch¨shu¡
 
	`__P
((, ));

115 
°›_ch¨shu¡
 
	`__P
((*, ));

116 
ch¨shu¡_d⁄e
 
	`__P
((*));

117 
ch¨shu¡
 
	`__P
((, , *));

118 
ªc‹d_wrôe
 
	`__P
((
FILE
 *, 
code
, 
u_ch¨
 *
buf
, 
nb
,

119 
timevÆ
 *));

120 
›í_sockë
 
	`__P
((*));

121 
maybe_ªlock
 
	`__P
((*, ));

123 
±y_ma°î
;

124 
±y_¶ave
;

125 
ªÆ_âyfd
;

126 
âyfd
;

127 
•ìd_°r
[16];

129 
mode_t
 
ây_mode
 = (mode_t)-1;

130 
baud_øã
;

131 *
ˇŒback_s¸ùt
;

132 
ch¨shu¡_pid
;

133 
locked
;

134 
°©
 
dev°©
;

137 
¸ts˘s
 = 0;

138 
°›_bôs
 = 1;

139 
boﬁ
 
modem
 = 1;

140 
ö•ìd
 = 0;

141 
boﬁ
 
lockÊag
 = 0;

142 *
öôülizî
 = 
NULL
;

143 *
c⁄√˘_s¸ùt
 = 
NULL
;

144 *
disc⁄√˘_s¸ùt
 = 
NULL
;

145 *
wñcomî
 = 
NULL
;

146 *
±ycomm™d
 = 
NULL
;

147 
boﬁ
 
nŸty
 = 0;

148 *
ªc‹d_fûe
 = 
NULL
;

149 
max_d©a_øã
;

150 
boﬁ
 
sync_£rül
 = 0;

151 *
±y_sockë
 = 
NULL
;

152 
usög_±y
 = 0;

154 
uid_t
 
uid
;

155 
kûl_lök
;

156 
asked_to_quô
;

157 
gŸ_sigãrm
;

160 
¥iv›í
;

162 
u_öt32_t
 
xmô_accm
[8];

165 
›ti⁄_t
 
ây_›ti⁄s
[] = {

167 { "devi˚Çame", 
o_wûd
, (*Ë&
£tdev«me
,

169 
OPT_DEVNAM
 | 
OPT_PRIVFIX
 | 
OPT_NOARG
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
,

170 
dev«m
},

172 { "ây s≥ed", 
o_wûd
, (*Ë&
£t•ìd
,

174 
OPT_PRIO
 | 
OPT_NOARG
 | 
OPT_A2STRVAL
 | 
OPT_STATIC
, 
•ìd_°r
 },

176 { "lock", 
o_boﬁ
, &
lockÊag
,

177 "Lock sîü»devi˚ wôh UUCP-°yÀÜock fûe", 
OPT_PRIO
 | 1 },

178 { "nﬁock", 
o_boﬁ
, &
lockÊag
,

179 "D⁄'àlock sîü»devi˚", 
OPT_PRIOSUB
 | 
OPT_PRIV
 },

181 { "öô", 
o_°rög
, &
öôülizî
,

182 "AÖrogømÅÿöôülizêthêdevi˚", 
OPT_PRIO
 | 
OPT_PRIVFIX
 },

184 { "c⁄√˘", 
o_°rög
, &
c⁄√˘_s¸ùt
,

185 "AÖrogømÅÿ£àu∞®c⁄√˘i⁄", 
OPT_PRIO
 | 
OPT_PRIVFIX
 },

187 { "disc⁄√˘", 
o_°rög
, &
disc⁄√˘_s¸ùt
,

188 "ProgømÅÿdisc⁄√˘ sîü»devi˚", 
OPT_PRIO
 | 
OPT_PRIVFIX
 },

190 { "wñcome", 
o_°rög
, &
wñcomî
,

191 "S¸ùàtÿwñcomê˛õ¡", 
OPT_PRIO
 | 
OPT_PRIVFIX
 },

193 { "±y", 
o_°rög
, &
±ycomm™d
,

195 
OPT_PRIO
 | 
OPT_PRIVFIX
 | 
OPT_DEVNAM
 },

197 { "nŸty", 
o_boﬁ
, &
nŸty
,

198 "I≈ut/ouçuài†nŸáÅty", 
OPT_DEVNAM
 | 1 },

200 { "sockë", 
o_°rög
, &
±y_sockë
,

202 
OPT_PRIO
 | 
OPT_DEVNAM
 },

204 { "ªc‹d", 
o_°rög
, &
ªc‹d_fûe
,

205 "Rec‹d ch¨a˘î†£¡/ª˚ivedÅÿfûe", 
OPT_PRIO
 },

207 { "¸ts˘s", 
o_öt
, &
¸ts˘s
,

209 
OPT_PRIO
 | 
OPT_NOARG
 | 
	`OPT_VAL
(1) },

210 { "cdå˘s", 
o_öt
, &
¸ts˘s
,

212 
OPT_PRIOSUB
 | 
OPT_NOARG
 | 
	`OPT_VAL
(2) },

213 { "no¸ts˘s", 
o_öt
, &
¸ts˘s
,

215 
OPT_PRIOSUB
 | 
OPT_NOARG
 | 
	`OPT_VAL
(-1) },

216 { "-¸ts˘s", 
o_öt
, &
¸ts˘s
,

218 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 
OPT_NOARG
 | 
	`OPT_VAL
(-1) },

219 { "nocdå˘s", 
o_öt
, &
¸ts˘s
,

221 
OPT_PRIOSUB
 | 
OPT_ALIAS
 | 
OPT_NOARG
 | 
	`OPT_VAL
(-1) },

222 { "x⁄xoff", 
o_•ecül_nﬂrg
, (*)
£tx⁄xoff
,

223 "Së so·w¨ê(XON/XOFFËÊow c⁄åﬁ", 
OPT_PRIOSUB
 },

224 { "°›-bôs", 
o_öt
, &
°›_bôs
,

226 
OPT_PRIO
 | 
OPT_PRIVFIX
 | 
OPT_LIMITS
, 
NULL
, 2, 1 },

228 { "modem", 
o_boﬁ
, &
modem
,

229 "U£ modem c⁄åﬁÜöes", 
OPT_PRIO
 | 1 },

230 { "loˇl", 
o_boﬁ
, &
modem
,

231 "D⁄'àu£ modem c⁄åﬁÜöes", 
OPT_PRIOSUB
 | 0 },

233 { "sync", 
o_boﬁ
, &
sync_£rül
,

236 { "d©¨©e", 
o_öt
, &
max_d©a_øã
,

238 
OPT_PRIO
 },

240 { "esˇ≥", 
o_•ecül
, (*)
£ãsˇ≥
,

242 
OPT_A2PRINTER
, (*)
¥öãsˇ≥
 },

244 { 
NULL
 }

245 
	}
};

248 
ch™√l
 
	gây_ch™√l
 = {

249 
ây_›ti⁄s
,

250 &
ây_¥o˚ss_exåa_›ti⁄s
,

251 &
ây_check_›ti⁄s
,

252 &
c⁄√˘_ây
,

253 &
disc⁄√˘_ây
,

254 &
ây_e°ablish_µp
,

255 &
ây_di£°ablish_µp
,

256 &
ây_do_£nd_c⁄fig
,

257 &
ây_ªcv_c⁄fig
,

258 &
˛ónup_ây
,

259 &
ây_˛o£_fds


268 
	$£t•ìd
(
¨g
, 
¨gv
, 
doô
)

269 *
¨g
;

270 **
¨gv
;

271 
doô
;

273 *
±r
;

274 
•d
;

276 
•d
 = 
	`°πﬁ
(
¨g
, &
±r
, 0);

277 i‡(
±r
 =
¨g
 || *±∏!0 || 
•d
 == 0)

279 i‡(
doô
) {

280 
ö•ìd
 = 
•d
;

281 
	`¶¥ötf
(
•ìd_°r
, (•ìd_°r), "%d", 
•d
);

284 
	}
}

293 
	$£tdev«me
(
˝
, 
¨gv
, 
doô
)

294 *
˝
;

295 **
¨gv
;

296 
doô
;

298 
°©
 
°©buf
;

299 
dev
[
MAXPATHLEN
];

301 i‡(*
˝
 == 0)

304 i‡(*
˝
 != '/') {

305 
	`°æ˝y
(
dev
, "/dev/", (dev));

306 
	`°æˇt
(
dev
, 
˝
, (dev));

307 
˝
 = 
dev
;

313 i‡(
	`°©
(
˝
, &
°©buf
) < 0) {

314 i‡(!
doô
)

315  
î∫o
 !
ENOENT
;

316 
	`›ti⁄_îr‹
("Couldn'à°© %s: %m", 
˝
);

319 i‡(!
	`S_ISCHR
(
°©buf
.
°_mode
)) {

320 i‡(
doô
)

321 
	`›ti⁄_îr‹
("%†i†nŸá ch¨a˘î devi˚", 
˝
);

325 i‡(
doô
) {

326 
	`°æ˝y
(
dev«m
, 
˝
, (devnam));

327 
dev°©
 = 
°©buf
;

328 
deÁu…_devi˚
 = 0;

332 
	}
}

335 
	$£tx⁄xoff
(
¨gv
)

336 **
¨gv
;

338 
l˝_w™t›ti⁄s
[0].
asyncm≠
 |= 0x000A0000;

339 
l˝_w™t›ti⁄s
[0].
√g_asyncm≠
 = 1;

341 
¸ts˘s
 = -2;

343 
	}
}

349 
	$£ãsˇ≥
(
¨gv
)

350 **
¨gv
;

352 
n
, 
ªt
;

353 *
p
, *
ídp
;

355 
p
 = *
¨gv
;

356 
ªt
 = 1;

357 *
p
) {

358 
n
 = 
	`°πﬁ
(
p
, &
ídp
, 16);

359 i‡(
p
 =
ídp
) {

360 
	`›ti⁄_îr‹
("escapeÖarameter contains invalid hexÇumber '%s'",

361 
p
);

364 
p
 = 
ídp
;

365 i‡(
n
 < 0 ||Ç == 0x5E ||Ç > 0xFF) {

366 
	`›ti⁄_îr‹
("ˇn'àesˇ≥ ch¨a˘î 0x%x", 
n
);

367 
ªt
 = 0;

369 
xmô_accm
[
n
 >> 5] |= 1 << (n & 0x1F);

370 *
p
 == ',' || *p == ' ')

371 ++
p
;

373 
l˝_Ælow›ti⁄s
[0].
asyncm≠
 = 
xmô_accm
[0];

374  
ªt
;

375 
	}
}

378 
	$¥öãsˇ≥
(
›t
, 
¥öãr
, 
¨g
)

379 
›ti⁄_t
 *
›t
;

380 (*
¥öãr
Ë
	`__P
((*, *, ...));

381 *
¨g
;

383 
n
;

384 
fú°
 = 1;

386 
n
 = 0;Ç < 256; ++n) {

387 i‡(
n
 == 0x7d)

388 
n
 += 2;

389 i‡(
xmô_accm
[
n
 >> 5] & (1 << (n & 0x1f))) {

390 i‡(!
fú°
)

391 
	`¥öãr
(
¨g
, ",");

393 
fú°
 = 0;

394 
	`¥öãr
(
¨g
, "%x", 
n
);

397 i‡(
fú°
)

398 
	`¥öãr
(
¨g
, "oops #ÇothingÉscaped");

399 
	}
}

404 
	$ây_öô
()

406 
	`add_nŸifõr
(&
pidch™ge
, 
maybe_ªlock
, 0);

407 
the_ch™√l
 = &
ây_ch™√l
;

408 
xmô_accm
[3] = 0x60000000;

409 
	}
}

415 
	$ây_¥o˚ss_exåa_›ti⁄s
()

417 
usög_±y
 = 
nŸty
 || 
±ycomm™d
 !
NULL
 || 
±y_sockë
 != NULL;

418 i‡(
usög_±y
)

420 i‡(
deÁu…_devi˚
) {

421 *
p
;

422 i‡(!
	`ißây
(0Ë|| (
p
 = 
	`ây«me
(0)Ë=
NULL
) {

423 
	`›ti⁄_îr‹
("no device specifiedánd stdin isÇotáÅty");

424 
	`exô
(
EXIT_OPTION_ERROR
);

426 
	`°æ˝y
(
dev«m
, 
p
, (devnam));

427 i‡(
	`°©
(
dev«m
, &
dev°©
) < 0)

428 
	`Áèl
("Couldn'à°© deÁu… devi˚ %s: %m", 
dev«m
);

439 i‡(!
	`›ti⁄s_f‹_ây
())

440 
	`exô
(
EXIT_OPTION_ERROR
);

441 
	}
}

447 
	$ây_check_›ti⁄s
()

449 
°©
 
°©buf
;

450 
fdÊags
;

452 i‡(
dem™d
 && 
nŸty
) {

453 
	`›ti⁄_îr‹
("demand-dialling is incompatible withÇotty");

454 
	`exô
(
EXIT_OPTION_ERROR
);

456 i‡(
dem™d
 && 
c⁄√˘_s¸ùt
 =0 && 
±ycomm™d
 =
NULL


457 && 
±y_sockë
 =
NULL
) {

458 
	`›ti⁄_îr‹
("connect script isÑequired for demand-dialling\n");

459 
	`exô
(
EXIT_OPTION_ERROR
);

462 i‡(
c⁄√˘_s¸ùt
 =0 && !
hﬁdoff_•ecifõd
)

463 
hﬁdoff
 = 0;

465 i‡(
usög_±y
) {

466 i‡(!
deÁu…_devi˚
) {

467 
	`›ti⁄_îr‹
("%s optionÖrecludes specifying deviceÇame",

468 
±y_sockë
? "sockë": 
nŸty
? "notty": "pty");

469 
	`exô
(
EXIT_OPTION_ERROR
);

471 i‡(
±ycomm™d
 !
NULL
 && 
nŸty
) {

472 
	`›ti⁄_îr‹
("pty option is incompatible withÇotty option");

473 
	`exô
(
EXIT_OPTION_ERROR
);

475 i‡(
±y_sockë
 !
NULL
 && (
±ycomm™d
 !NULL || 
nŸty
)) {

476 
	`›ti⁄_îr‹
("socket option is incompatible withÖtyándÇotty");

477 
	`exô
(
EXIT_OPTION_ERROR
);

479 
deÁu…_devi˚
 = 
nŸty
;

480 
lockÊag
 = 0;

481 
modem
 = 0;

482 i‡(
nŸty
 && 
log_to_fd
 <= 1)

483 
log_to_fd
 = -1;

492 i‡(
	`f°©
(0, &
°©buf
Ë>0 && 
	`S_ISCHR
(°©buf.
°_mode
)

493 && 
°©buf
.
°_rdev
 =
dev°©
.st_rdev) {

494 
deÁu…_devi˚
 = 1;

495 
fdÊags
 = 
	`f˙é
(0, 
F_GETFL
);

496 i‡(
fdÊags
 !-1 && (fdÊag†& 
O_ACCMODE
Ë=
O_RDWR
)

497 
¥iv›í
 = 1;

500 i‡(
deÁu…_devi˚
)

501 
nodëach
 = 1;

507 i‡(
log_to_fd
 >0 && 
	`f°©
÷og_to_fd, &
°©buf
) >= 0

508 && 
	`S_ISCHR
(
°©buf
.
°_mode
Ë&& sètbuf.
°_rdev
 =
dev°©
.st_rdev)

509 
log_to_fd
 = -1;

510 
	}
}

517 
	$c⁄√˘_ây
()

519 *
c⁄√˘‹
;

520 
fdÊags
;

521 #i‚de‡
__löux__


522 
°©
 
°©buf
;

524 
numbuf
[16];

530 
	`°æ˝y
(
µp_dev«m
, 
dev«m
, (ppp_devnam));

531 
±y_ma°î
 = -1;

532 
±y_¶ave
 = -1;

533 
ªÆ_âyfd
 = -1;

534 i‡(
usög_±y
 || 
ªc‹d_fûe
 !
NULL
) {

535 i‡(!
	`gë_±y
(&
±y_ma°î
, &
±y_¶ave
, 
µp_dev«m
, 
uid
)) {

536 
	`îr‹
("Couldn'tállocateÖseudo-tty");

537 
°©us
 = 
EXIT_FATAL_ERROR
;

540 
	`£t_up_ây
(
±y_¶ave
, 1);

546 
°©us
 = 
EXIT_LOCK_FAILED
;

547 i‡(
lockÊag
 && !
¥iv›í
) {

548 i‡(
	`lock
(
dev«m
) < 0)

549 
îºë
;

550 
locked
 = 1;

560 
gŸ_sigãrm
 = 0;

561 
c⁄√˘‹
 = 
doög_ˇŒback
? 
ˇŒback_s¸ùt
: 
c⁄√˘_s¸ùt
;

562 i‡(
dev«m
[0] != 0) {

566 
îr
, 
¥io
;

568 
¥io
 = 
¥iv›í
? 
OPRIO_ROOT
: 
ây_›ti⁄s
[0].
¥i‹ôy
;

569 i‡(
¥io
 < 
OPRIO_ROOT
 && 
	`£ãuid
(
uid
) == -1) {

570 
	`îr‹
("UnableÅo dropÖrivileges before opening %s: %m\n",

571 
dev«m
);

572 
°©us
 = 
EXIT_OPEN_FAILED
;

573 
îºë
;

575 
ªÆ_âyfd
 = 
	`›í
(
dev«m
, 
O_NONBLOCK
 | 
O_RDWR
, 0);

576 
îr
 = 
î∫o
;

577 i‡(
¥io
 < 
OPRIO_ROOT
 && 
	`£ãuid
(0) == -1)

578 
	`Áèl
("UnableÅoÑegainÖrivileges");

579 i‡(
ªÆ_âyfd
 >= 0)

581 
î∫o
 = 
îr
;

582 i‡(
îr
 !
EINTR
) {

583 
	`îr‹
("FaûedÅÿ›í %s: %m", 
dev«m
);

584 
°©us
 = 
EXIT_OPEN_FAILED
;

586 i‡(!
≥rsi°
 || 
îr
 !
EINTR
)

587 
îºë
;

589 
âyfd
 = 
ªÆ_âyfd
;

590 i‡((
fdÊags
 = 
	`f˙é
(
âyfd
, 
F_GETFL
)) == -1

591 || 
	`f˙é
(
âyfd
, 
F_SETFL
, 
fdÊags
 & ~
O_NONBLOCK
) < 0)

592 
	`w¨n
("Couldn'tÑesetÇon-blocking mode on device: %m");

594 #i‚de‡
__löux__


602 i‡(
	`f°©
(
âyfd
, &
°©buf
) < 0

603 || 
	`fchmod
(
âyfd
, 
°©buf
.
°_mode
 & ~(
S_IWGRP
 | 
S_IWOTH
)) < 0) {

604 
	`w¨n
("Couldn'àª°ri˘ wrôê≥rmissi⁄†tÿ%s: %m", 
dev«m
);

606 
ây_mode
 = 
°©buf
.
°_mode
;

619 
	`£t_up_ây
(
âyfd
, ((
c⁄√˘‹
 !
NULL
 && connector[0] != 0)

620 || 
öôülizî
 !
NULL
));

627 
°©us
 = 
EXIT_PTYCMD_FAILED
;

628 i‡(
±ycomm™d
 !
NULL
) {

629 i‡(
ªc‹d_fûe
 !
NULL
) {

630 
ùùe
[2], 
›ùe
[2], 
ok
;

632 i‡(
	`pùe
(
ùùe
Ë< 0 ||Öùe(
›ùe
) < 0)

633 
	`Áèl
("Couldn't createÖipes forÑecord option: %m");

636 (Ë
	`f˙é
(
ùùe
[0], 
F_SETFD
, 
FD_CLOEXEC
);

637 (Ë
	`f˙é
(
›ùe
[1], 
F_SETFD
, 
FD_CLOEXEC
);

639 
ok
 = 
	`devi˚_s¸ùt
(
±ycomm™d
, 
›ùe
[0], 
ùùe
[1], 1) == 0

640 && 
	`°¨t_ch¨shu¡
(
ùùe
[0], 
›ùe
[1]);

641 
	`˛o£
(
ùùe
[0]);

642 
	`˛o£
(
ùùe
[1]);

643 
	`˛o£
(
›ùe
[0]);

644 
	`˛o£
(
›ùe
[1]);

645 i‡(!
ok
)

646 
îºë
;

648 i‡(
	`devi˚_s¸ùt
(
±ycomm™d
, 
±y_ma°î
,Öty_master, 1) < 0)

649 
îºë
;

651 } i‡(
±y_sockë
 !
NULL
) {

652 
fd
 = 
	`›í_sockë
(
±y_sockë
);

653 i‡(
fd
 < 0)

654 
îºë
;

655 i‡(!
	`°¨t_ch¨shu¡
(
fd
, fd))

656 
îºë
;

657 
	`˛o£
(
fd
);

658 } i‡(
nŸty
) {

659 i‡(!
	`°¨t_ch¨shu¡
(0, 1))

660 
îºë
;

661 
	`dup2
(
fd_devnuŒ
, 0);

662 
	`dup2
(
fd_devnuŒ
, 1);

663 i‡(
log_to_fd
 == 1)

664 
log_to_fd
 = -1;

665 i‡(
log_to_fd
 != 2)

666 
	`dup2
(
fd_devnuŒ
, 2);

667 } i‡(
ªc‹d_fûe
 !
NULL
) {

668 
fd
 = 
	`dup
(
âyfd
);

669 i‡(!
	`°¨t_ch¨shu¡
(
fd
, fd))

670 
îºë
;

673 i‡(
usög_±y
 || 
ªc‹d_fûe
 !
NULL
) {

674 
âyfd
 = 
±y_¶ave
;

675 
	`˛o£
(
±y_ma°î
);

676 
±y_ma°î
 = -1;

680 i‡((
c⁄√˘‹
 && c⁄√˘‹[0]Ë|| 
öôülizî
) {

681 i‡(
ªÆ_âyfd
 != -1) {

683 i‡(!
deÁu…_devi˚
 && 
modem
) {

684 
	`£tdå
(
ªÆ_âyfd
, 0);

685 
	`¶ìp
(1);

686 
	`£tdå
(
ªÆ_âyfd
, 1);

690 i‡(
öôülizî
 && initializer[0]) {

691 i‡(
	`devi˚_s¸ùt
(
öôülizî
, 
âyfd
,Åtyfd, 0) < 0) {

692 
	`îr‹
("Initializer script failed");

693 
°©us
 = 
EXIT_INIT_FAILED
;

694 
îºëf
;

696 i‡(
gŸ_sigãrm
) {

697 
	`disc⁄√˘_ây
();

698 
îºëf
;

700 
	`öfo
("SerialÖort initialized.");

703 i‡(
c⁄√˘‹
 && connector[0]) {

704 i‡(
	`devi˚_s¸ùt
(
c⁄√˘‹
, 
âyfd
,Åtyfd, 0) < 0) {

705 
	`îr‹
("Connect script failed");

706 
°©us
 = 
EXIT_CONNECT_FAILED
;

707 
îºëf
;

709 i‡(
gŸ_sigãrm
) {

710 
	`disc⁄√˘_ây
();

711 
îºëf
;

713 
	`öfo
("Serial connectionÉstablished.");

718 i‡(
ªÆ_âyfd
 != -1)

719 
	`£t_up_ây
(
ªÆ_âyfd
, 0);

721 i‡(
doög_ˇŒback
 =
CALLBACK_DIALIN
)

722 
c⁄√˘‹
 = 
NULL
;

726 i‡(
c⁄√˘‹
 =
NULL
 && 
modem
 && 
dev«m
[0] != 0) {

727 
i
;

729 i‡((
i
 = 
	`›í
(
dev«m
, 
O_RDWR
)) >= 0)

731 i‡(
î∫o
 !
EINTR
) {

732 
	`îr‹
("FaûedÅÿª›í %s: %m", 
dev«m
);

733 
°©us
 = 
EXIT_OPEN_FAILED
;

735 i‡(!
≥rsi°
 || 
î∫o
 !
EINTR
 || 
hungup
 || 
gŸ_sigãrm
)

736 
îºë
;

738 
	`˛o£
(
i
);

741 
	`¶¥ötf
(
numbuf
, “umbuf), "%d", 
baud_øã
);

742 
	`s¸ùt_£ãnv
("SPEED", 
numbuf
, 0);

745 i‡(
wñcomî
 && welcomer[0]) {

746 i‡(
	`devi˚_s¸ùt
(
wñcomî
, 
âyfd
,Åtyfd, 0) < 0)

747 
	`w¨n
("Welcome script failed");

755 i‡(
c⁄√˘‹
 !
NULL
 || 
±ycomm™d
 !NULL || 
±y_sockë
 != NULL)

756 
li°í_time
 = 
c⁄√˘_dñay
;

758  
âyfd
;

760 
îºëf
:

761 i‡(
ªÆ_âyfd
 >= 0)

762 
	`tcÊush
(
ªÆ_âyfd
, 
TCIOFLUSH
);

763 
îºë
:

764 i‡(
±y_ma°î
 >= 0) {

765 
	`˛o£
(
±y_ma°î
);

766 
±y_ma°î
 = -1;

768 
âyfd
 = -1;

769 i‡(
gŸ_sigãrm
)

770 
asked_to_quô
 = 1;

772 
	}
}

775 
	$disc⁄√˘_ây
()

777 i‡(
disc⁄√˘_s¸ùt
 =
NULL
 || 
hungup
)

779 i‡(
ªÆ_âyfd
 >= 0)

780 
	`£t_up_ây
(
ªÆ_âyfd
, 1);

781 i‡(
	`devi˚_s¸ùt
(
disc⁄√˘_s¸ùt
, 
âyfd
,Åtyfd, 0) < 0) {

782 
	`w¨n
("disconnect script failed");

784 
	`öfo
("SerialÜink disconnected.");

786 
	`°›_ch¨shu¡
(
NULL
, 0);

787 
	}
}

789 
	$ây_˛o£_fds
()

791 i‡(
±y_¶ave
 >= 0)

792 
	`˛o£
(
±y_¶ave
);

793 i‡(
ªÆ_âyfd
 >= 0) {

794 
	`˛o£
(
ªÆ_âyfd
);

795 
ªÆ_âyfd
 = -1;

798 
	}
}

800 
	$˛ónup_ây
()

802 i‡(
ªÆ_âyfd
 >= 0)

803 
	`föish_ây
();

804 
	`ây_˛o£_fds
();

805 i‡(
locked
) {

806 
	`u∆ock
();

807 
locked
 = 0;

809 
	}
}

816 
	$ây_do_£nd_c⁄fig
(
mtu
, 
accm
, 
pcomp
, 
accomp
)

817 
mtu
;

818 
u_öt32_t
 
accm
;

819 
pcomp
, 
accomp
;

821 
	`ây_£t_xaccm
(
xmô_accm
);

822 
	`ây_£nd_c⁄fig
(
mtu
, 
accm
, 
pcomp
, 
accomp
);

823 
	}
}

829 
	$föish_ây
()

832 i‡(!
deÁu…_devi˚
 && 
modem
) {

833 
	`£tdå
(
ªÆ_âyfd
, 0);

838 
	`¶ìp
(1);

841 
	`ª°‹e_ây
(
ªÆ_âyfd
);

843 #i‚de‡
__löux__


844 i‡(
ây_mode
 !(
mode_t
) -1) {

845 i‡(
	`fchmod
(
ªÆ_âyfd
, 
ây_mode
) != 0)

846 
	`îr‹
("Couldn'tÑestoreÅtyÖermissions");

850 
	`˛o£
(
ªÆ_âyfd
);

851 
ªÆ_âyfd
 = -1;

852 
	}
}

858 
	$maybe_ªlock
(
¨g
, 
pid
)

859 *
¨g
;

860 
pid
;

862 i‡(
locked
)

863 
	`ªlock
(
pid
);

864 
	}
}

871 
	$›í_sockë
(
de°
)

872 *
de°
;

874 *
£p
, *
ídp
 = 
NULL
;

875 
sock
, 
p‹t
 = -1;

876 
u_öt32_t
 
ho°
;

877 
ho°ít
 *
hít
;

878 
sockaddr_ö
 
ßd
;

881 
£p
 = 
	`°rchr
(
de°
, ':');

882 i‡(
£p
 !
NULL
)

883 
p‹t
 = 
	`°πﬁ
(
£p
+1, &
ídp
, 10);

884 i‡(
p‹t
 < 0 || 
ídp
 =
£p
+1 || sï =
de°
) {

885 
	`îr‹
("Can'tÖarse host:port for socket destination");

888 *
£p
 = 0;

889 
ho°
 = 
	`öë_addr
(
de°
);

890 i‡(
ho°
 =(
u_öt32_t
) -1) {

891 
hít
 = 
	`gëho°by«me
(
de°
);

892 i‡(
hít
 =
NULL
) {

893 
	`îr‹
("%s: unknow¿ho° i¿sockë o±i⁄", 
de°
);

894 *
£p
 = ':';

897 
ho°
 = *(
u_öt32_t
 *)(
hít
->
h_addr_li°
[0]);

899 *
£p
 = ':';

902 
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

903 i‡(
sock
 < 0) {

904 
	`îr‹
("Can't create socket: %m");

907 
	`mem£t
(&
ßd
, 0, (sad));

908 
ßd
.
sö_Ámûy
 = 
AF_INET
;

909 
ßd
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

910 
ßd
.
sö_addr
.
s_addr
 = 
ho°
;

911 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *)&
ßd
, (sad)) < 0) {

912 
	`îr‹
("C™'àc⁄√˘Åÿ%s: %m", 
de°
);

913 
	`˛o£
(
sock
);

917  
sock
;

918 
	}
}

925 
	$°¨t_ch¨shu¡
(
ifd
, 
ofd
)

926 
ifd
, 
ofd
;

928 
˝id
;

930 
˝id
 = 
	`ß„_f‹k
(
ifd
, 
ofd
, (
log_to_fd
 >= 0?Üog_to_fd: 2));

931 i‡(
˝id
 == -1) {

932 
	`îr‹
("Can't forkÖrocess for character shunt: %m");

935 i‡(
˝id
 == 0) {

937 
	`ª›í_log
();

938 i‡(!
nodëach
)

939 
log_to_fd
 = -1;

940 i‡(
log_to_fd
 >= 0)

941 
log_to_fd
 = 2;

942 
	`£tgid
(
	`gëgid
());

943 
	`£tuid
(
uid
);

944 i‡(
	`gëuid
(Ë!
uid
)

945 
	`Áèl
("setuid failed");

946 
	`ch¨shu¡
(0, 1, 
ªc‹d_fûe
);

947 
	`exô
(0);

949 
ch¨shu¡_pid
 = 
˝id
;

950 
	`ªc‹d_chûd
(
˝id
, "µpd (ch¨shu¡)", 
ch¨shu¡_d⁄e
, 
NULL
, 1);

952 
	}
}

955 
	$ch¨shu¡_d⁄e
(
¨g
)

956 *
¨g
;

958 
ch¨shu¡_pid
 = 0;

959 
	}
}

962 
	$°›_ch¨shu¡
(
¨g
, 
sig
)

963 *
¨g
;

964 
sig
;

966 i‡(
ch¨shu¡_pid
)

967 
	`kûl
(
ch¨shu¡_pid
, (
sig
 =
SIGINT
? sig: 
SIGTERM
));

968 
	}
}

977 
	$ch¨shu¡
(
ifd
, 
ofd
, 
ªc‹d_fûe
)

978 
ifd
, 
ofd
;

979 *
ªc‹d_fûe
;

981 
n
, 
nfds
;

982 
fd_£t
 
ªady
, 
wrôey
;

983 
u_ch¨
 *
ibuÂ
, *
obuÂ
;

984 
nibuf
, 
nobuf
;

985 
Êags
;

986 
±y_ªadabÀ
, 
°dö_ªadabÀ
;

987 
timevÆ
 
œ°time
;

988 
FILE
 *
ªc‹df
 = 
NULL
;

989 
ûevñ
, 
ﬁevñ
, 
max_Àvñ
;

990 
timevÆ
 
Àvñt
, 
tout
, *
t›
;

991 
u_ch¨
 
ö∑ckë_buf
[];

996 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

997 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

998 
	`sig«l
(
SIGTERM
, 
SIG_DFL
);

999 
	`sig«l
(
SIGCHLD
, 
SIG_DFL
);

1000 
	`sig«l
(
SIGUSR1
, 
SIG_DFL
);

1001 
	`sig«l
(
SIGUSR2
, 
SIG_DFL
);

1002 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

1003 
	`sig«l
(
SIGALRM
, 
SIG_DFL
);

1004 
	`sig«l
(
SIGFPE
, 
SIG_DFL
);

1005 
	`sig«l
(
SIGILL
, 
SIG_DFL
);

1006 
	`sig«l
(
SIGPIPE
, 
SIG_DFL
);

1007 
	`sig«l
(
SIGQUIT
, 
SIG_DFL
);

1008 
	`sig«l
(
SIGSEGV
, 
SIG_DFL
);

1009 #ifde‡
SIGBUS


1010 
	`sig«l
(
SIGBUS
, 
SIG_DFL
);

1012 #ifde‡
SIGEMT


1013 
	`sig«l
(
SIGEMT
, 
SIG_DFL
);

1015 #ifde‡
SIGPOLL


1016 
	`sig«l
(
SIGPOLL
, 
SIG_DFL
);

1018 #ifde‡
SIGPROF


1019 
	`sig«l
(
SIGPROF
, 
SIG_DFL
);

1021 #ifde‡
SIGSYS


1022 
	`sig«l
(
SIGSYS
, 
SIG_DFL
);

1024 #ifde‡
SIGTRAP


1025 
	`sig«l
(
SIGTRAP
, 
SIG_DFL
);

1027 #ifde‡
SIGVTALRM


1028 
	`sig«l
(
SIGVTALRM
, 
SIG_DFL
);

1030 #ifde‡
SIGXCPU


1031 
	`sig«l
(
SIGXCPU
, 
SIG_DFL
);

1033 #ifde‡
SIGXFSZ


1034 
	`sig«l
(
SIGXFSZ
, 
SIG_DFL
);

1040 i‡(
ifd
 >
FD_SETSIZE
 || 
ofd
 >FD_SETSIZE || 
±y_ma°î
 >= FD_SETSIZE)

1041 
	`Áèl
("internalÉrror: file descriptorÅooÜarge (%d, %d, %d)",

1042 
ifd
, 
ofd
, 
±y_ma°î
);

1047 i‡(
ªc‹d_fûe
 !
NULL
) {

1048 
ªc‹df
 = 
	`f›í
(
ªc‹d_fûe
, "a");

1049 i‡(
ªc‹df
 =
NULL
)

1050 
	`îr‹
("Couldn'à¸óãÑec‹d fûê%s: %m", 
ªc‹d_fûe
);

1054 
Êags
 = 
	`f˙é
(
±y_ma°î
, 
F_GETFL
);

1055 i‡(
Êags
 == -1

1056 || 
	`f˙é
(
±y_ma°î
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

1057 
	`w¨n
("couldn't setÖty masterÅoÇonblock: %m");

1058 
Êags
 = 
	`f˙é
(
ifd
, 
F_GETFL
);

1059 i‡(
Êags
 == -1

1060 || 
	`f˙é
(
ifd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

1061 
	`w¨n
("couldn'à£à%†tÿn⁄block: %m", (
ifd
==0? "stdin": "tty"));

1062 i‡(
ofd
 !
ifd
) {

1063 
Êags
 = 
	`f˙é
(
ofd
, 
F_GETFL
);

1064 i‡(
Êags
 == -1

1065 || 
	`f˙é
(
ofd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

1066 
	`w¨n
("couldn't set stdoutÅoÇonblock: %m");

1069 
nibuf
 = 
nobuf
 = 0;

1070 
ibuÂ
 = 
obuÂ
 = 
NULL
;

1071 
±y_ªadabÀ
 = 
°dö_ªadabÀ
 = 1;

1073 
ûevñ
 = 
ﬁevñ
 = 0;

1074 
	`gë_time
(&
Àvñt
);

1075 i‡(
max_d©a_øã
) {

1076 
max_Àvñ
 = 
max_d©a_øã
 / 10;

1077 i‡(
max_Àvñ
 < 100)

1078 
max_Àvñ
 = 100;

1080 
max_Àvñ
 = 
PPP_MRU
 + 
PPP_HDRLEN
 + 1;

1082 
nfds
 = (
ofd
 > 
±y_ma°î
? ofd:Öty_master) + 1;

1083 i‡(
ªc‹df
 !
NULL
) {

1084 
	`gëtimeofday
(&
œ°time
, 
NULL
);

1085 
	`putc
(7, 
ªc‹df
);

1086 
	`putc
(
œ°time
.
tv_£c
 >> 24, 
ªc‹df
);

1087 
	`putc
(
œ°time
.
tv_£c
 >> 16, 
ªc‹df
);

1088 
	`putc
(
œ°time
.
tv_£c
 >> 8, 
ªc‹df
);

1089 
	`putc
(
œ°time
.
tv_£c
, 
ªc‹df
);

1090 
œ°time
.
tv_u£c
 = 0;

1093 
nibuf
 !0 || 
nobuf
 !0 || 
±y_ªadabÀ
 || 
°dö_ªadabÀ
) {

1094 
t›
 = 0;

1095 
tout
.
tv_£c
 = 0;

1096 
tout
.
tv_u£c
 = 10000;

1097 
	`FD_ZERO
(&
ªady
);

1098 
	`FD_ZERO
(&
wrôey
);

1099 i‡(
nibuf
 != 0) {

1100 i‡(
ûevñ
 >
max_Àvñ
)

1101 
t›
 = &
tout
;

1103 
	`FD_SET
(
±y_ma°î
, &
wrôey
);

1104 } i‡(
°dö_ªadabÀ
)

1105 
	`FD_SET
(
ifd
, &
ªady
);

1106 i‡(
nobuf
 != 0) {

1107 i‡(
ﬁevñ
 >
max_Àvñ
)

1108 
t›
 = &
tout
;

1110 
	`FD_SET
(
ofd
, &
wrôey
);

1111 } i‡(
±y_ªadabÀ
)

1112 
	`FD_SET
(
±y_ma°î
, &
ªady
);

1113 i‡(
	`£À˘
(
nfds
, &
ªady
, &
wrôey
, 
NULL
, 
t›
) < 0) {

1114 i‡(
î∫o
 !
EINTR
)

1115 
	`Áèl
("select");

1118 i‡(
max_d©a_øã
) {

1119 
dt
;

1120 
nbt
;

1121 
timevÆ
 
now
;

1123 
	`gë_time
(&
now
);

1124 
dt
 = (
now
.
tv_£c
 - 
Àvñt
.tv_sec

1125 + (
now
.
tv_u£c
 - 
Àvñt
.tv_usec) / 1e6);

1126 
nbt
 = ()(
dt
 * 
max_d©a_øã
);

1127 
ûevñ
 = (
nbt
 < 0 ||Çbt > ilevel)? 0: ilevel -Çbt;

1128 
ﬁevñ
 = (
nbt
 < 0 ||Çbt > olevel)? 0: olevel -Çbt;

1129 
Àvñt
 = 
now
;

1131 
ûevñ
 = 
ﬁevñ
 = 0;

1132 i‡(
	`FD_ISSET
(
ifd
, &
ªady
)) {

1133 
ibuÂ
 = 
ö∑ckë_buf
;

1134 
nibuf
 = 
	`ªad
(
ifd
, 
ibuÂ
, 
PPP_MRU
 + 
PPP_HDRLEN
);

1135 i‡(
nibuf
 < 0 && 
î∫o
 =
EIO
)

1136 
nibuf
 = 0;

1137 i‡(
nibuf
 < 0) {

1138 i‡(!(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)) {

1139 
	`îr‹
("ErrorÑeading standard input: %m");

1142 
nibuf
 = 0;

1143 } i‡(
nibuf
 == 0) {

1145 
°dö_ªadabÀ
 = 0;

1146 i‡(
ªc‹df
)

1147 i‡(!
	`ªc‹d_wrôe
(
ªc‹df
, 4, 
NULL
, 0, &
œ°time
))

1148 
ªc‹df
 = 
NULL
;

1150 
	`FD_SET
(
±y_ma°î
, &
wrôey
);

1151 i‡(
ªc‹df
)

1152 i‡(!
	`ªc‹d_wrôe
(
ªc‹df
, 2, 
ibuÂ
, 
nibuf
, &
œ°time
))

1153 
ªc‹df
 = 
NULL
;

1156 i‡(
	`FD_ISSET
(
±y_ma°î
, &
ªady
)) {

1157 
obuÂ
 = 
ouçackë_buf
;

1158 
nobuf
 = 
	`ªad
(
±y_ma°î
, 
obuÂ
, 
PPP_MRU
 + 
PPP_HDRLEN
);

1159 i‡(
nobuf
 < 0 && 
î∫o
 =
EIO
)

1160 
nobuf
 = 0;

1161 i‡(
nobuf
 < 0) {

1162 i‡(!(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)) {

1163 
	`îr‹
("ErrorÑeadingÖseudo-tty master: %m");

1166 
nobuf
 = 0;

1167 } i‡(
nobuf
 == 0) {

1169 
±y_ªadabÀ
 = 0;

1170 
°dö_ªadabÀ
 = 0;

1171 
nibuf
 = 0;

1172 
	`˛o£
(
ofd
);

1173 i‡(
ªc‹df
)

1174 i‡(!
	`ªc‹d_wrôe
(
ªc‹df
, 3, 
NULL
, 0, &
œ°time
))

1175 
ªc‹df
 = 
NULL
;

1177 
	`FD_SET
(
ofd
, &
wrôey
);

1178 i‡(
ªc‹df
)

1179 i‡(!
	`ªc‹d_wrôe
(
ªc‹df
, 1, 
obuÂ
, 
nobuf
, &
œ°time
))

1180 
ªc‹df
 = 
NULL
;

1182 } i‡(!
°dö_ªadabÀ
)

1183 
±y_ªadabÀ
 = 0;

1184 i‡(
	`FD_ISSET
(
ofd
, &
wrôey
)) {

1185 
n
 = 
nobuf
;

1186 i‡(
ﬁevñ
 + 
n
 > 
max_Àvñ
)

1187 
n
 = 
max_Àvñ
 - 
ﬁevñ
;

1188 
n
 = 
	`wrôe
(
ofd
, 
obuÂ
,Ç);

1189 i‡(
n
 < 0) {

1190 i‡(
î∫o
 =
EIO
) {

1191 
±y_ªadabÀ
 = 0;

1192 
nobuf
 = 0;

1193 } i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EINTR
) {

1194 
	`îr‹
("Error writing standard output: %m");

1198 
obuÂ
 +
n
;

1199 
nobuf
 -
n
;

1200 
ﬁevñ
 +
n
;

1203 i‡(
	`FD_ISSET
(
±y_ma°î
, &
wrôey
)) {

1204 
n
 = 
nibuf
;

1205 i‡(
ûevñ
 + 
n
 > 
max_Àvñ
)

1206 
n
 = 
max_Àvñ
 - 
ûevñ
;

1207 
n
 = 
	`wrôe
(
±y_ma°î
, 
ibuÂ
,Ç);

1208 i‡(
n
 < 0) {

1209 i‡(
î∫o
 =
EIO
) {

1210 
°dö_ªadabÀ
 = 0;

1211 
nibuf
 = 0;

1212 } i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EINTR
) {

1213 
	`îr‹
("Error writingÖseudo-tty master: %m");

1217 
ibuÂ
 +
n
;

1218 
nibuf
 -
n
;

1219 
ûevñ
 +
n
;

1223 
	`exô
(0);

1224 
	}
}

1227 
	$ªc‹d_wrôe
(
f
, 
code
, 
buf
, 
nb
, 
ç
)

1228 
FILE
 *
f
;

1229 
code
;

1230 
u_ch¨
 *
buf
;

1231 
nb
;

1232 
timevÆ
 *
ç
;

1234 
timevÆ
 
now
;

1235 
diff
;

1237 
	`gëtimeofday
(&
now
, 
NULL
);

1238 
now
.
tv_u£c
 /= 100000;

1239 
diff
 = (
now
.
tv_£c
 - 
ç
->tv_£cË* 10 + (now.
tv_u£c
 -Åp->tv_usec);

1240 i‡(
diff
 > 0) {

1241 i‡(
diff
 > 255) {

1242 
	`putc
(5, 
f
);

1243 
	`putc
(
diff
 >> 24, 
f
);

1244 
	`putc
(
diff
 >> 16, 
f
);

1245 
	`putc
(
diff
 >> 8, 
f
);

1246 
	`putc
(
diff
, 
f
);

1248 
	`putc
(6, 
f
);

1249 
	`putc
(
diff
, 
f
);

1251 *
ç
 = 
now
;

1253 
	`putc
(
code
, 
f
);

1254 i‡(
buf
 !
NULL
) {

1255 
	`putc
(
nb
 >> 8, 
f
);

1256 
	`putc
(
nb
, 
f
);

1257 
	`fwrôe
(
buf
, 
nb
, 1, 
f
);

1259 
	`fÊush
(
f
);

1260 i‡(
	`„º‹
(
f
)) {

1261 
	`îr‹
("Error writingÑecord file: %m");

1265 
	}
}

	@pppd/upap.c

43 
	#RCSID
 "$Id: u∑p.c,v 1.30 2005/07/13 10:41:58Öaulu†Ex∞$"

	)

49 
	~<°dio.h
>

50 
	~<°rög.h
>

52 
	~"µpd.h
"

53 
	~"u∑p.h
"

56 
boﬁ
 
	ghide_∑ssw‹d
 = 1;

61 
›ti⁄_t
 
	g∑p_›ti⁄_li°
[] = {

62 { "hide-∑ssw‹d", 
o_boﬁ
, &
hide_∑ssw‹d
,

63 "D⁄'àouçuà∑ssw‹d†tÿlog", 
OPT_PRIO
 | 1 },

64 { "show-∑ssw‹d", 
o_boﬁ
, &
hide_∑ssw‹d
,

65 "ShowÖassw‹d såög i¿debugÜog mesßges", 
OPT_PRIOSUB
 | 0 },

67 { "∑p-ª°¨t", 
o_öt
, &
u∑p
[0].
us_timeouâime
,

68 "SëÑëønsmôÅimeouàf‹ PAP", 
OPT_PRIO
 },

69 { "∑p-max-authªq", 
o_öt
, &
u∑p
[0].
us_maxå™smôs
,

70 "Së maxÇumbî o‡å™smissi⁄†f‹áuth-ªqs", 
OPT_PRIO
 },

71 { "∑p-timeout", 
o_öt
, &
u∑p
[0].
us_ªqtimeout
,

72 "SëÅimêlimô f‹Öì∏PAPáuthítiˇti⁄", 
OPT_PRIO
 },

74 { 
NULL
 }

80 
u∑p_öô
 
__P
(());

81 
u∑p_lowîup
 
__P
(());

82 
u∑p_lowîdown
 
__P
(());

83 
u∑p_öput
 
__P
((, 
u_ch¨
 *, ));

84 
u∑p_¥Ÿªj
 
__P
(());

85 
u∑p_¥öçkt
 
__P
((
u_ch¨
 *, ,

86 (*Ë
	`__P
((*, *, ...)), *));

88 
¥Ÿít
 
∑p_¥Ÿít
 = {

89 
PPP_PAP
,

90 
u∑p_öô
,

91 
u∑p_öput
,

92 
u∑p_¥Ÿªj
,

93 
u∑p_lowîup
,

94 
u∑p_lowîdown
,

95 
NULL
,

96 
NULL
,

97 
u∑p_¥öçkt
,

98 
NULL
,

101 
NULL
,

102 
∑p_›ti⁄_li°
,

103 
NULL
,

104 
NULL
,

105 
NULL


106 
	}
};

108 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

110 
u∑p_timeout
 
__P
((*));

111 
u∑p_ªqtimeout
 
__P
((*));

112 
u∑p_øuthªq
 
__P
((
u∑p_°©e
 *, 
u_ch¨
 *, , ));

113 
u∑p_øuthack
 
__P
((
u∑p_°©e
 *, 
u_ch¨
 *, , ));

114 
u∑p_øuth«k
 
__P
((
u∑p_°©e
 *, 
u_ch¨
 *, , ));

115 
u∑p_ßuthªq
 
__P
((
u∑p_°©e
 *));

116 
u∑p_§e•
 
__P
((
u∑p_°©e
 *, , , *, ));

123 
	$u∑p_öô
(
unô
)

124 
unô
;

126 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

128 
u
->
us_unô
 = 
unô
;

129 
u
->
us_u£r
 = 
NULL
;

130 
u
->
us_u£æí
 = 0;

131 
u
->
us_∑sswd
 = 
NULL
;

132 
u
->
us_∑sswdÀn
 = 0;

133 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

134 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

135 
u
->
us_id
 = 0;

136 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

137 
u
->
us_maxå™smôs
 = 10;

138 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

139 
	}
}

148 
	$u∑p_authwôh≥î
(
unô
, 
u£r
, 
∑ssw‹d
)

149 
unô
;

150 *
u£r
, *
∑ssw‹d
;

152 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

155 
u
->
us_u£r
 = 
u£r
;

156 
u
->
us_u£æí
 = 
	`°æí
(
u£r
);

157 
u
->
us_∑sswd
 = 
∑ssw‹d
;

158 
u
->
us_∑sswdÀn
 = 
	`°æí
(
∑ssw‹d
);

159 
u
->
us_å™smôs
 = 0;

162 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

163 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

164 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

168 
	`u∑p_ßuthªq
(
u
);

169 
	}
}

178 
	$u∑p_auth≥î
(
unô
)

179 
unô
;

181 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

184 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

185 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

186 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

190 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

191 i‡(
u
->
us_ªqtimeout
 > 0)

192 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

193 
	}
}

200 
	$u∑p_timeout
(
¨g
)

201 *
¨g
;

203 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

205 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
)

208 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

210 
	`îr‹
("NoÑesponseÅo PAPáuthenticate-requests");

211 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

212 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

216 
	`u∑p_ßuthªq
(
u
);

217 
	}
}

224 
	$u∑p_ªqtimeout
(
¨g
)

225 *
¨g
;

227 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

229 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
)

232 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

233 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

234 
	}
}

243 
	$u∑p_lowîup
(
unô
)

244 
unô
;

246 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

248 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
)

249 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

250 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

251 
	`u∑p_ßuthªq
(
u
);

254 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
)

255 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

256 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

257 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

258 i‡(
u
->
us_ªqtimeout
 > 0)

259 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

261 
	}
}

270 
	$u∑p_lowîdown
(
unô
)

271 
unô
;

273 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

275 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
)

276 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

277 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0)

278 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

280 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

281 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

282 
	}
}

291 
	$u∑p_¥Ÿªj
(
unô
)

292 
unô
;

294 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`îr‹
("PAPáuthentication failed dueÅoÖrotocol-reject");

298 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

300 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

301 
	`îr‹
("PAPáuthentication ofÖeer failed (protocol-reject)");

302 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

304 
	`u∑p_lowîdown
(
unô
);

305 
	}
}

312 
	$u∑p_öput
(
unô
, 
ö∑ckë
, 
l
)

313 
unô
;

314 
u_ch¨
 *
ö∑ckë
;

315 
l
;

317 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 
u_ch¨
 *
öp
;

319 
u_ch¨
 
code
, 
id
;

320 
Àn
;

326 
öp
 = 
ö∑ckë
;

327 i‡(
l
 < 
UPAP_HEADERLEN
) {

328 
	`UPAPDEBUG
(("pap_input:Ñcvd short header."));

331 
	`GETCHAR
(
code
, 
öp
);

332 
	`GETCHAR
(
id
, 
öp
);

333 
	`GETSHORT
(
Àn
, 
öp
);

334 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

335 
	`UPAPDEBUG
(("pap_input:Ñcvd illegalÜength."));

338 i‡(
Àn
 > 
l
) {

339 
	`UPAPDEBUG
(("pap_input:Ñcvd shortÖacket."));

342 
Àn
 -
UPAP_HEADERLEN
;

347 
code
) {

348 
UPAP_AUTHREQ
:

349 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

352 
UPAP_AUTHACK
:

353 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

356 
UPAP_AUTHNAK
:

357 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

363 
	}
}

370 
	$u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
)

371 
u∑p_°©e
 *
u
;

372 
u_ch¨
 *
öp
;

373 
id
;

374 
Àn
;

376 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

377 *
ru£r
, *
Ωasswd
;

378 
rho°«me
[256];

379 
ªtcode
;

380 *
msg
;

381 
msgÀn
;

383 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
)

390 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

391 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

394 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

395 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

402 i‡(
Àn
 < 1) {

403 
	`UPAPDEBUG
(("pap_rauth:Ñcvd shortÖacket."));

406 
	`GETCHAR
(
ru£æí
, 
öp
);

407 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

408 i‡(
Àn
 < 0) {

409 
	`UPAPDEBUG
(("pap_rauth:Ñcvd shortÖacket."));

412 
ru£r
 = (*Ë
öp
;

413 
	`INCPTR
(
ru£æí
, 
öp
);

414 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

415 i‡(
Àn
 < 
ΩasswdÀn
) {

416 
	`UPAPDEBUG
(("pap_rauth:Ñcvd shortÖacket."));

419 
Ωasswd
 = (*Ë
öp
;

424 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
,

425 
ΩasswdÀn
, &
msg
);

426 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

433 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

434 i‡(!
	`auth_numbî
()) {

436 
ªtcode
 = 
UPAP_AUTHNAK
;

437 
	`w¨n
("ˇŒögÇumbî %q i†nŸáuth‹ized", 
ªmŸe_numbî
);

441 
msgÀn
 = 
	`°æí
(
msg
);

442 i‡(
msgÀn
 > 255)

443 
msgÀn
 = 255;

444 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

447 
	`¶¥ötf
(
rho°«me
, ‘ho°«me), "%.*v", 
ru£æí
, 
ru£r
);

449 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

450 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

451 
	`nŸi˚
("PAPÖì∏authítiˇti⁄ suc˚eded f‹ %q", 
rho°«me
);

452 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 0, 
ru£r
, 
ru£æí
);

454 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

455 
	`w¨n
("PAPÖì∏authítiˇti⁄ faûed f‹ %q", 
rho°«me
);

456 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

459 i‡(
u
->
us_ªqtimeout
 > 0)

460 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

461 
	}
}

468 
	$u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
)

469 
u∑p_°©e
 *
u
;

470 
u_ch¨
 *
öp
;

471 
id
;

472 
Àn
;

474 
u_ch¨
 
msgÀn
;

475 *
msg
;

477 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
)

483 i‡(
Àn
 < 1) {

484 
	`UPAPDEBUG
(("pap_rauthack: ignoring missing msg-length."));

486 
	`GETCHAR
(
msgÀn
, 
öp
);

487 i‡(
msgÀn
 > 0) {

488 
Àn
 - (
u_ch¨
);

489 i‡(
Àn
 < 
msgÀn
) {

490 
	`UPAPDEBUG
(("pap_rauthack:Ñcvd shortÖacket."));

493 
msg
 = (*Ë
öp
;

494 
	`PRINTMSG
(
msg
, 
msgÀn
);

498 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

500 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 0);

501 
	}
}

508 
	$u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
)

509 
u∑p_°©e
 *
u
;

510 
u_ch¨
 *
öp
;

511 
id
;

512 
Àn
;

514 
u_ch¨
 
msgÀn
;

515 *
msg
;

517 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
)

523 i‡(
Àn
 < 1) {

524 
	`UPAPDEBUG
(("pap_rauthnak: ignoring missing msg-length."));

526 
	`GETCHAR
(
msgÀn
, 
öp
);

527 i‡(
msgÀn
 > 0) {

528 
Àn
 - (
u_ch¨
);

529 i‡(
Àn
 < 
msgÀn
) {

530 
	`UPAPDEBUG
(("pap_rauthnak:Ñcvd shortÖacket."));

533 
msg
 = (*Ë
öp
;

534 
	`PRINTMSG
(
msg
, 
msgÀn
);

538 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

540 
	`îr‹
("PAPáuthentication failed");

541 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

542 
	}
}

549 
	$u∑p_ßuthªq
(
u
)

550 
u∑p_°©e
 *
u
;

552 
u_ch¨
 *
ouç
;

553 
ouéí
;

555 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
) +

556 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

557 
ouç
 = 
ouçackë_buf
;

559 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

561 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

562 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

563 
	`PUTSHORT
(
ouéí
, 
ouç
);

564 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

565 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

566 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

567 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

568 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

570 
	`ouçut
(
u
->
us_unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

572 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

573 ++
u
->
us_å™smôs
;

574 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

575 
	}
}

582 
	$u∑p_§e•
(
u
, 
code
, 
id
, 
msg
, 
msgÀn
)

583 
u∑p_°©e
 *
u
;

584 
u_ch¨
 
code
, 
id
;

585 *
msg
;

586 
msgÀn
;

588 
u_ch¨
 *
ouç
;

589 
ouéí
;

591 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

592 
ouç
 = 
ouçackë_buf
;

593 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

595 
	`PUTCHAR
(
code
, 
ouç
);

596 
	`PUTCHAR
(
id
, 
ouç
);

597 
	`PUTSHORT
(
ouéí
, 
ouç
);

598 
	`PUTCHAR
(
msgÀn
, 
ouç
);

599 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

600 
	`ouçut
(
u
->
us_unô
, 
ouçackë_buf
, 
ouéí
 + 
PPP_HDRLEN
);

601 
	}
}

606 *
	gu∑p_codíames
[] = {

611 
	$u∑p_¥öçkt
(
p
, 
∂í
, 
¥öãr
, 
¨g
)

612 
u_ch¨
 *
p
;

613 
∂í
;

614 (*
¥öãr
Ë
	`__P
((*, *, ...));

615 *
¨g
;

617 
code
, 
id
, 
Àn
;

618 
mÀn
, 
uÀn
, 
wÀn
;

619 *
u£r
, *
pwd
, *
msg
;

620 
u_ch¨
 *
p°¨t
;

622 i‡(
∂í
 < 
UPAP_HEADERLEN
)

624 
p°¨t
 = 
p
;

625 
	`GETCHAR
(
code
, 
p
);

626 
	`GETCHAR
(
id
, 
p
);

627 
	`GETSHORT
(
Àn
, 
p
);

628 i‡(
Àn
 < 
UPAP_HEADERLEN
 ||Üí > 
∂í
)

631 i‡(
code
 >1 && codê<(
u∑p_codíames
) / (*))

632 
	`¥öãr
(
¨g
, " %s", 
u∑p_codíames
[
code
-1]);

634 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

635 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

636 
Àn
 -
UPAP_HEADERLEN
;

637 
code
) {

638 
UPAP_AUTHREQ
:

639 i‡(
Àn
 < 1)

641 
uÀn
 = 
p
[0];

642 i‡(
Àn
 < 
uÀn
 + 2)

644 
wÀn
 = 
p
[
uÀn
 + 1];

645 i‡(
Àn
 < 
uÀn
 + 
wÀn
 + 2)

647 
u£r
 = (*Ë(
p
 + 1);

648 
pwd
 = (*Ë(
p
 + 
uÀn
 + 2);

649 
p
 +
uÀn
 + 
wÀn
 + 2;

650 
Àn
 -
uÀn
 + 
wÀn
 + 2;

651 
	`¥öãr
(
¨g
, " user=");

652 
	`¥öt_°rög
(
u£r
, 
uÀn
, 
¥öãr
, 
¨g
);

653 
	`¥öãr
(
¨g
, "Öassword=");

654 i‡(!
hide_∑ssw‹d
)

655 
	`¥öt_°rög
(
pwd
, 
wÀn
, 
¥öãr
, 
¨g
);

657 
	`¥öãr
(
¨g
, "<hidden>");

659 
UPAP_AUTHACK
:

660 
UPAP_AUTHNAK
:

661 i‡(
Àn
 < 1)

663 
mÀn
 = 
p
[0];

664 i‡(
Àn
 < 
mÀn
 + 1)

666 
msg
 = (*Ë(
p
 + 1);

667 
p
 +
mÀn
 + 1;

668 
Àn
 -
mÀn
 + 1;

669 
	`¥öãr
(
¨g
, " ");

670 
	`¥öt_°rög
(
msg
, 
mÀn
, 
¥öãr
, 
¨g
);

675 ; 
Àn
 > 0; --len) {

676 
	`GETCHAR
(
code
, 
p
);

677 
	`¥öãr
(
¨g
, " %.2x", 
code
);

680  
p
 - 
p°¨t
;

681 
	}
}

	@pppd/upap.h

48 
	#UPAP_HEADERLEN
 4

	)

54 
	#UPAP_AUTHREQ
 1

	)

55 
	#UPAP_AUTHACK
 2

	)

56 
	#UPAP_AUTHNAK
 3

	)

62 
	su∑p_°©e
 {

63 
	mus_unô
;

64 *
	mus_u£r
;

65 
	mus_u£æí
;

66 *
	mus_∑sswd
;

67 
	mus_∑sswdÀn
;

68 
	mus_˛õ¡°©e
;

69 
	mus_£rvî°©e
;

70 
u_ch¨
 
	mus_id
;

71 
	mus_timeouâime
;

72 
	mus_å™smôs
;

73 
	mus_maxå™smôs
;

74 
	mus_ªqtimeout
;

75 } 
	tu∑p_°©e
;

81 
	#UPAPCS_INITIAL
 0

	)

82 
	#UPAPCS_CLOSED
 1

	)

83 
	#UPAPCS_PENDING
 2

	)

84 
	#UPAPCS_AUTHREQ
 3

	)

85 
	#UPAPCS_OPEN
 4

	)

86 
	#UPAPCS_BADAUTH
 5

	)

91 
	#UPAPSS_INITIAL
 0

	)

92 
	#UPAPSS_CLOSED
 1

	)

93 
	#UPAPSS_PENDING
 2

	)

94 
	#UPAPSS_LISTEN
 3

	)

95 
	#UPAPSS_OPEN
 4

	)

96 
	#UPAPSS_BADAUTH
 5

	)

102 
	#UPAP_DEFTIMEOUT
 3

	)

103 
	#UPAP_DEFREQTIME
 30

	)

105 
u∑p_°©e
 
u∑p
[];

107 
u∑p_authwôh≥î
 
__P
((, *, *));

108 
u∑p_auth≥î
 
__P
(());

110 
¥Ÿít
 
∑p_¥Ÿít
;

	@pppd/utils.c

31 
	#RCSID
 "$Id: utûs.c,v 1.25 2008/06/03 12:06:37Öaulu†Ex∞$"

	)

33 
	~<°dio.h
>

34 
	~<˘y≥.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<sig«l.h
>

39 
	~<î∫o.h
>

40 
	~<f˙é.h
>

41 
	~<sy¶og.h
>

42 
	~<√tdb.h
>

43 
	~<time.h
>

44 
	~<utmp.h
>

45 
	~<pwd.h
>

46 
	~<sys/∑øm.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/waô.h
>

49 
	~<sys/time.h
>

50 
	~<sys/ªsour˚.h
>

51 
	~<sys/°©.h
>

52 
	~<sys/sockë.h
>

53 
	~<√töë/ö.h
>

54 #ifde‡
SVR4


55 
	~<sys/mkdev.h
>

58 
	~"µpd.h
"

59 
	~"fsm.h
"

60 
	~"l˝.h
"

63 #i‡
deföed
(
SUNOS4
)

64 *
°ªº‹
();

67 
logô
 
__P
((, *, 
va_li°
));

68 
log_wrôe
 
__P
((, *));

69 
v¶p_¥öãr
 
__P
((*, *, ...));

70 
f‹m©_∑ckë
 
__P
((
u_ch¨
 *, , 
¥öãr_func
, *));

72 
	sbuf„r_öfo
 {

73 *
	m±r
;

74 
	mÀn
;

81 
size_t


82 
	$°æ˝y
(
de°
, 
§c
, 
Àn
)

83 *
de°
;

84 c⁄° *
§c
;

85 
size_t
 
Àn
;

87 
size_t
 
ªt
 = 
	`°æí
(
§c
);

89 i‡(
Àn
 != 0) {

90 i‡(
ªt
 < 
Àn
)

91 
	`°r˝y
(
de°
, 
§c
);

93 
	`°∫˝y
(
de°
, 
§c
, 
Àn
 - 1);

94 
de°
[
Àn
-1] = 0;

97  
ªt
;

98 
	}
}

104 
size_t


105 
	$°æˇt
(
de°
, 
§c
, 
Àn
)

106 *
de°
;

107 c⁄° *
§c
;

108 
size_t
 
Àn
;

110 
size_t
 
dÀn
 = 
	`°æí
(
de°
);

112  
dÀn
 + 
	`°æ˝y
(
de°
 + dÀn, 
§c
, (
Àn
 > dlen?Üen - dlen: 0));

113 
	}
}

125 
¶¥ötf
 
__V
((*
buf
, 
buÊí
, *
fmt
, ...))

127 
va_li°
 
	g¨gs
;

128 
	gn
;

130 #i‡
deföed
(
__STDC__
)

131 
va_°¨t
(
¨gs
, 
fmt
);

133 *
	gbuf
;

134 
	gbuÊí
;

135 *
	gfmt
;

136 
va_°¨t
(
¨gs
);

137 
	gbuf
 = 
va_¨g
(
¨gs
, *);

138 
	gbuÊí
 = 
va_¨g
(
¨gs
, );

139 
	gfmt
 = 
va_¨g
(
¨gs
, *);

141 
	gn
 = 
v¶¥ötf
(
buf
, 
buÊí
, 
fmt
, 
¨gs
);

142 
va_íd
(
¨gs
);

143  
	gn
;

149 
	#OUTCHAR
(
c
Ë(
buÊí
 > 0? (--buÊí, *
buf
++ = (c)): 0)

	)

152 
	$v¶¥ötf
(
buf
, 
buÊí
, 
fmt
, 
¨gs
)

153 *
buf
;

154 
buÊí
;

155 *
fmt
;

156 
va_li°
 
¨gs
;

158 
c
, 
i
, 
n
;

159 
width
, 
¥ec
, 
fûlch
;

160 
ba£
, 
Àn
, 
√g
, 
quŸed
;

161 
vÆ
 = 0;

162 *
°r
, *
f
, *
buf0
;

163 *
p
;

164 
num
[32];

165 
time_t
 
t
;

166 
u_öt32_t
 
ù
;

167 
hexch¨s
[] = "0123456789abcdef";

168 
buf„r_öfo
 
buföfo
;

169 
ãrmch
;

171 
buf0
 = 
buf
;

172 --
buÊí
;

173 
buÊí
 > 0) {

174 
f
 = 
fmt
; *f != '%' && *f != 0; ++f)

176 i‡(
f
 > 
fmt
) {

177 
Àn
 = 
f
 - 
fmt
;

178 i‡(
Àn
 > 
buÊí
)

179 
Àn
 = 
buÊí
;

180 
	`mem˝y
(
buf
, 
fmt
, 
Àn
);

181 
buf
 +
Àn
;

182 
buÊí
 -
Àn
;

183 
fmt
 = 
f
;

185 i‡(*
fmt
 == 0)

187 
c
 = *++
fmt
;

188 
width
 = 0;

189 
¥ec
 = -1;

190 
fûlch
 = ' ';

191 i‡(
c
 == '0') {

192 
fûlch
 = '0';

193 
c
 = *++
fmt
;

195 i‡(
c
 == '*') {

196 
width
 = 
	`va_¨g
(
¨gs
, );

197 
c
 = *++
fmt
;

199 
	`isdigô
(
c
)) {

200 
width
 = width * 10 + 
c
 - '0';

201 
c
 = *++
fmt
;

204 i‡(
c
 == '.') {

205 
c
 = *++
fmt
;

206 i‡(
c
 == '*') {

207 
¥ec
 = 
	`va_¨g
(
¨gs
, );

208 
c
 = *++
fmt
;

210 
¥ec
 = 0;

211 
	`isdigô
(
c
)) {

212 
¥ec
 =Öª¯* 10 + 
c
 - '0';

213 
c
 = *++
fmt
;

217 
°r
 = 0;

218 
ba£
 = 0;

219 
√g
 = 0;

220 ++
fmt
;

221 
c
) {

223 
c
 = *
fmt
++;

224 
c
) {

226 
vÆ
 = 
	`va_¨g
(
¨gs
, );

227 i‡(
vÆ
 < 0) {

228 
√g
 = 1;

229 
vÆ
 = -val;

231 
ba£
 = 10;

234 
vÆ
 = 
	`va_¨g
(
¨gs
, );

235 
ba£
 = 10;

238 
	`OUTCHAR
('%');

239 
	`OUTCHAR
('l');

240 --
fmt
;

245 
i
 = 
	`va_¨g
(
¨gs
, );

246 i‡(
i
 < 0) {

247 
√g
 = 1;

248 
vÆ
 = -
i
;

250 
vÆ
 = 
i
;

251 
ba£
 = 10;

254 
vÆ
 = 
	`va_¨g
(
¨gs
, );

255 
ba£
 = 10;

258 
vÆ
 = 
	`va_¨g
(
¨gs
, );

259 
ba£
 = 8;

263 
vÆ
 = 
	`va_¨g
(
¨gs
, );

264 
ba£
 = 16;

267 
vÆ
 = (Ë
	`va_¨g
(
¨gs
, *);

268 
ba£
 = 16;

269 
√g
 = 2;

272 
°r
 = 
	`va_¨g
(
¨gs
, *);

275 
num
[0] = 
	`va_¨g
(
¨gs
, );

276 
num
[1] = 0;

277 
°r
 = 
num
;

280 
°r
 = 
	`°ªº‹
(
î∫o
);

283 
ù
 = 
	`va_¨g
(
¨gs
, 
u_öt32_t
);

284 
ù
 = 
	`¡ohl
(ip);

285 
	`¶¥ötf
(
num
, “um), "%d.%d.%d.%d", (
ù
 >> 24) & 0xff,

286 (
ù
 >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);

287 
°r
 = 
num
;

290 
	`time
(&
t
);

291 
°r
 = 
	`˘ime
(&
t
);

292 
°r
 += 4;

293 
°r
[15] = 0;

297 
quŸed
 = 
c
 == 'q';

298 
p
 = 
	`va_¨g
(
¨gs
, *);

299 i‡(
p
 =
NULL
)

300 
p
 = (*)"<NULL>";

301 i‡(
fûlch
 ='0' && 
¥ec
 >= 0) {

302 
n
 = 
¥ec
;

303 
ãrmch
 = -1;

305 
n
 = 
buÊí
;

306 i‡(
¥ec
 !-1 && 
n
 >Örec)

307 
n
 = 
¥ec
;

308 
ãrmch
 = 0;

310 
n
 > 0 && 
buÊí
 > 0) {

311 
c
 = *
p
++;

312 i‡(
c
 =
ãrmch
)

314 --
n
;

315 i‡(!
quŸed
 && 
c
 >= 0x80) {

316 
	`OUTCHAR
('M');

317 
	`OUTCHAR
('-');

318 
c
 -= 0x80;

320 i‡(
quŸed
 && (
c
 == '"' || c == '\\'))

321 
	`OUTCHAR
('\\');

322 i‡(
c
 < 0x20 || (0x7f <= c && c < 0xa0)) {

323 i‡(
quŸed
) {

324 
	`OUTCHAR
('\\');

325 
c
) {

326 '\t': 
	`OUTCHAR
('t'); ;

327 '\n': 
	`OUTCHAR
('n'); ;

328 '\b': 
	`OUTCHAR
('b'); ;

329 '\f': 
	`OUTCHAR
('f'); ;

331 
	`OUTCHAR
('x');

332 
	`OUTCHAR
(
hexch¨s
[
c
 >> 4]);

333 
	`OUTCHAR
(
hexch¨s
[
c
 & 0xf]);

336 i‡(
c
 == '\t')

337 
	`OUTCHAR
(
c
);

339 
	`OUTCHAR
('^');

340 
	`OUTCHAR
(
c
 ^ 0x40);

344 
	`OUTCHAR
(
c
);

348 
buföfo
.
±r
 = 
buf
;

349 
buföfo
.
Àn
 = 
buÊí
 + 1;

350 
p
 = 
	`va_¨g
(
¨gs
, *);

351 
n
 = 
	`va_¨g
(
¨gs
, );

352 
	`f‹m©_∑ckë
(
p
, 
n
, 
v¶p_¥öãr
, &
buföfo
);

353 
buf
 = 
buföfo
.
±r
;

354 
buÊí
 = 
buföfo
.
Àn
 - 1;

357 
p
 = 
	`va_¨g
(
¨gs
, *);

358 
n
 = 
¥ec
;Ç > 0; --n) {

359 
c
 = *
p
++;

360 i‡(
fûlch
 == ' ')

361 
	`OUTCHAR
(' ');

362 
	`OUTCHAR
(
hexch¨s
[(
c
 >> 4) & 0xf]);

363 
	`OUTCHAR
(
hexch¨s
[
c
 & 0xf]);

367 *
buf
++ = '%';

368 i‡(
c
 != '%')

369 --
fmt
;

370 --
buÊí
;

373 i‡(
ba£
 != 0) {

374 
°r
 = 
num
 + (num);

375 *--
°r
 = 0;

376 
°r
 > 
num
 + 
√g
) {

377 *--
°r
 = 
hexch¨s
[
vÆ
 % 
ba£
];

378 
vÆ
 = vÆ / 
ba£
;

379 i‡(--
¥ec
 <0 && 
vÆ
 == 0)

382 
√g
) {

384 *--
°r
 = '-';

387 *--
°r
 = 'x';

388 *--
°r
 = '0';

391 
Àn
 = 
num
 + “umË- 1 - 
°r
;

393 
Àn
 = 0;Üí < 
buÊí
 && (
¥ec
 == -1 ||Üen <Örec); ++len)

394 i‡(
°r
[
Àn
] == 0)

397 i‡(
width
 > 0) {

398 i‡(
width
 > 
buÊí
)

399 
width
 = 
buÊí
;

400 i‡((
n
 = 
width
 - 
Àn
) > 0) {

401 
buÊí
 -
n
;

402 ; 
n
 > 0; --n)

403 *
buf
++ = 
fûlch
;

406 i‡(
Àn
 > 
buÊí
)

407 
Àn
 = 
buÊí
;

408 
	`mem˝y
(
buf
, 
°r
, 
Àn
);

409 
buf
 +
Àn
;

410 
buÊí
 -
Àn
;

412 *
buf
 = 0;

413  
buf
 - 
buf0
;

414 
	}
}

420 
v¶p_¥öãr
 
__V
((*
¨g
, *
fmt
, ...))

422 
	gn
;

423 
va_li°
 
	gpv¨
;

424 
buf„r_öfo
 *
	gbi
;

426 #i‡
deföed
(
__STDC__
)

427 
va_°¨t
(
pv¨
, 
fmt
);

429 *
	g¨g
;

430 *
	gfmt
;

431 
va_°¨t
(
pv¨
);

432 
	g¨g
 = 
va_¨g
(
pv¨
, *);

433 
	gfmt
 = 
va_¨g
(
pv¨
, *);

436 
	gbi
 = (
buf„r_öfo
 *Ë
¨g
;

437 
	gn
 = 
v¶¥ötf
(
bi
->
±r
, bi->
Àn
, 
fmt
, 
pv¨
);

438 
va_íd
(
pv¨
);

440 
	gbi
->
	g±r
 +
n
;

441 
	gbi
->
	gÀn
 -
n
;

444 #ifde‡
unu£d


450 
	$log_∑ckë
(
p
, 
Àn
, 
¥efix
, 
Àvñ
)

451 
u_ch¨
 *
p
;

452 
Àn
;

453 *
¥efix
;

454 
Àvñ
;

456 
	`öô_¥_log
(
¥efix
, 
Àvñ
);

457 
	`f‹m©_∑ckë
(
p
, 
Àn
, 
¥_log
, &
Àvñ
);

458 
	`íd_¥_log
();

459 
	}
}

467 
	$f‹m©_∑ckë
(
p
, 
Àn
, 
¥öãr
, 
¨g
)

468 
u_ch¨
 *
p
;

469 
Àn
;

470 
¥öãr_func
 
¥öãr
;

471 *
¨g
;

473 
i
, 
n
;

474 
u_sh‹t
 
¥Ÿo
;

475 
¥Ÿít
 *
¥Ÿp
;

477 i‡(
Àn
 >
PPP_HDRLEN
 && 
p
[0] =
PPP_ALLSTATIONS
 &&Ö[1] =
PPP_UI
) {

478 
p
 += 2;

479 
	`GETSHORT
(
¥Ÿo
, 
p
);

480 
Àn
 -
PPP_HDRLEN
;

481 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

482 i‡(
¥Ÿo
 =
¥Ÿp
->
¥Ÿocﬁ
)

484 i‡(
¥Ÿp
 !
NULL
) {

485 
	`¥öãr
(
¨g
, "[%s", 
¥Ÿp
->
«me
);

486 
n
 = (*
¥Ÿp
->
¥öçkt
)(
p
, 
Àn
, 
¥öãr
, 
¨g
);

487 
	`¥öãr
(
¨g
, "]");

488 
p
 +
n
;

489 
Àn
 -
n
;

491 
i
 = 0; (
¥Ÿp
 = 
¥Ÿocﬁs
[i]Ë!
NULL
; ++i)

492 i‡(
¥Ÿo
 =(
¥Ÿp
->
¥Ÿocﬁ
 & ~0x8000))

494 i‡(
¥Ÿp
 !0 &&ÖrŸp->
d©a_«me
 != 0) {

495 
	`¥öãr
(
¨g
, "[%†d©a]", 
¥Ÿp
->
d©a_«me
);

496 i‡(
Àn
 > 8)

497 
	`¥öãr
(
¨g
, "%.8B ...", 
p
);

499 
	`¥öãr
(
¨g
, "%.*B", 
Àn
, 
p
);

500 
Àn
 = 0;

502 
	`¥öãr
(
¨g
, "[¥Ÿo=0x%x]", 
¥Ÿo
);

506 i‡(
Àn
 > 32)

507 
	`¥öãr
(
¨g
, "%.32B ...", 
p
);

509 
	`¥öãr
(
¨g
, "%.*B", 
Àn
, 
p
);

510 
	}
}

516 
	glöe
[256];

517 *
	glöï
;

518 
	gŒevñ
;

521 
	$öô_¥_log
(
¥efix
, 
Àvñ
)

522 c⁄° *
¥efix
;

523 
Àvñ
;

525 
löï
 = 
löe
;

526 i‡(
¥efix
 !
NULL
) {

527 
	`°æ˝y
(
löe
, 
¥efix
, (line));

528 
löï
 = 
löe
 + 
	`°æí
(line);

530 
Œevñ
 = 
Àvñ
;

531 
	}
}

534 
	$íd_¥_log
()

536 i‡(
löï
 !
löe
) {

537 *
löï
 = 0;

538 
	`log_wrôe
(
Œevñ
, 
löe
);

540 
	}
}

546 
¥_log
 
__V
((*
¨g
, *
fmt
, ...))

548 
	gl
, 
	gn
;

549 
va_li°
 
	gpv¨
;

550 *
	gp
, *
	geﬁ
;

551 
	gbuf
[256];

553 #i‡
deföed
(
__STDC__
)

554 
va_°¨t
(
pv¨
, 
fmt
);

556 *
	g¨g
;

557 *
	gfmt
;

558 
va_°¨t
(
pv¨
);

559 
	g¨g
 = 
va_¨g
(
pv¨
, *);

560 
	gfmt
 = 
va_¨g
(
pv¨
, *);

563 
	gn
 = 
v¶¥ötf
(
buf
, (buf), 
fmt
, 
pv¨
);

564 
va_íd
(
pv¨
);

566 
	gp
 = 
buf
;

567 
	geﬁ
 = 
°rchr
(
buf
, '\n');

568 i‡(
	glöï
 !
löe
) {

569 
l
 = (
eﬁ
 =
NULL
)? 
n
:Éﬁ - 
buf
;

570 i‡(
	glöï
 + 
	gl
 < 
	glöe
 + (line)) {

571 i‡(
	gl
 > 0) {

572 
mem˝y
(
löï
, 
buf
, 
l
);

573 
	glöï
 +
l
;

575 i‡(
	geﬁ
 =
NULL
)

577 
	gp
 = 
eﬁ
 + 1;

578 
	geﬁ
 = 
°rchr
(
p
, '\n');

580 *
	glöï
 = 0;

581 
log_wrôe
(
Œevñ
, 
löe
);

582 
	glöï
 = 
löe
;

585 
	geﬁ
 !
NULL
) {

586 *
eﬁ
 = 0;

587 
log_wrôe
(
Œevñ
, 
p
);

588 
	gp
 = 
eﬁ
 + 1;

589 
	geﬁ
 = 
°rchr
(
p
, '\n');

593 
	gl
 = 
buf
 + 
n
 - 
p
;

594 i‡(
	gl
 > 0) {

595 
mem˝y
(
löe
, 
p
, 
n
);

596 
	glöï
 = 
löe
 + 
l
;

605 
	$¥öt_°rög
(
p
, 
Àn
, 
¥öãr
, 
¨g
)

606 *
p
;

607 
Àn
;

608 
¥öãr_func
 
¥öãr
;

609 *
¨g
;

611 
c
;

613 
	`¥öãr
(
¨g
, "\"");

614 ; 
Àn
 > 0; --len) {

615 
c
 = *
p
++;

616 i‡(' ' <
c
 && c <= '~') {

617 i‡(
c
 == '\\' || c == '"')

618 
	`¥öãr
(
¨g
, "\\");

619 
	`¥öãr
(
¨g
, "%c", 
c
);

621 
c
) {

623 
	`¥öãr
(
¨g
, "\\n");

626 
	`¥öãr
(
¨g
, "\\r");

629 
	`¥öãr
(
¨g
, "\\t");

632 
	`¥öãr
(
¨g
, "\\%.3o", (Ë
c
);

636 
	`¥öãr
(
¨g
, "\"");

637 
	}
}

643 
	$logô
(
Àvñ
, 
fmt
, 
¨gs
)

644 
Àvñ
;

645 *
fmt
;

646 
va_li°
 
¨gs
;

648 
buf
[1024];

650 
	`v¶¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

651 
	`log_wrôe
(
Àvñ
, 
buf
);

652 
	}
}

655 
	$log_wrôe
(
Àvñ
, 
buf
)

656 
Àvñ
;

657 *
buf
;

659 
	`sy¶og
(
Àvñ
, "%s", 
buf
);

660 i‡(
log_to_fd
 >0 && (
Àvñ
 !
LOG_DEBUG
 || 
debug
)) {

661 
n
 = 
	`°æí
(
buf
);

663 i‡(
n
 > 0 && 
buf
[n-1] == '\n')

664 --
n
;

665 i‡(
	`wrôe
(
log_to_fd
, 
buf
, 
n
) !=Ç

666 || 
	`wrôe
(
log_to_fd
, "\n", 1) != 1)

667 
log_to_fd
 = -1;

669 
	}
}

675 
Áèl
 
__V
((*
fmt
, ...))

677 
va_li°
 
	gpv¨
;

679 #i‡
deföed
(
__STDC__
)

680 
va_°¨t
(
pv¨
, 
fmt
);

682 *
	gfmt
;

683 
va_°¨t
(
pv¨
);

684 
	gfmt
 = 
va_¨g
(
pv¨
, *);

687 
logô
(
LOG_ERR
, 
fmt
, 
pv¨
);

688 
va_íd
(
pv¨
);

690 
dõ
(1);

697 
îr‹
 
__V
((*
fmt
, ...))

699 
va_li°
 
	gpv¨
;

701 #i‡
deföed
(
__STDC__
)

702 
va_°¨t
(
pv¨
, 
fmt
);

704 *
	gfmt
;

705 
va_°¨t
(
pv¨
);

706 
	gfmt
 = 
va_¨g
(
pv¨
, *);

709 
logô
(
LOG_ERR
, 
fmt
, 
pv¨
);

710 
va_íd
(
pv¨
);

711 ++
	gîr‹_cou¡
;

718 
w¨n
 
__V
((*
fmt
, ...))

720 
va_li°
 
	gpv¨
;

722 #i‡
deföed
(
__STDC__
)

723 
va_°¨t
(
pv¨
, 
fmt
);

725 *
	gfmt
;

726 
va_°¨t
(
pv¨
);

727 
	gfmt
 = 
va_¨g
(
pv¨
, *);

730 
logô
(
LOG_WARNING
, 
fmt
, 
pv¨
);

731 
va_íd
(
pv¨
);

738 
nŸi˚
 
__V
((*
fmt
, ...))

740 
va_li°
 
	gpv¨
;

742 #i‡
deföed
(
__STDC__
)

743 
va_°¨t
(
pv¨
, 
fmt
);

745 *
	gfmt
;

746 
va_°¨t
(
pv¨
);

747 
	gfmt
 = 
va_¨g
(
pv¨
, *);

750 
logô
(
LOG_NOTICE
, 
fmt
, 
pv¨
);

751 
va_íd
(
pv¨
);

758 
öfo
 
__V
((*
fmt
, ...))

760 
va_li°
 
	gpv¨
;

762 #i‡
deföed
(
__STDC__
)

763 
va_°¨t
(
pv¨
, 
fmt
);

765 *
	gfmt
;

766 
va_°¨t
(
pv¨
);

767 
	gfmt
 = 
va_¨g
(
pv¨
, *);

770 
logô
(
LOG_INFO
, 
fmt
, 
pv¨
);

771 
va_íd
(
pv¨
);

778 
dbglog
 
__V
((*
fmt
, ...))

780 
va_li°
 
	gpv¨
;

782 #i‡
deföed
(
__STDC__
)

783 
va_°¨t
(
pv¨
, 
fmt
);

785 *
	gfmt
;

786 
va_°¨t
(
pv¨
);

787 
	gfmt
 = 
va_¨g
(
pv¨
, *);

790 
logô
(
LOG_DEBUG
, 
fmt
, 
pv¨
);

791 
va_íd
(
pv¨
);

799 
	$dump_∑ckë
(c⁄° *
èg
, *
p
, 
Àn
)

801 
¥Ÿo
;

803 i‡(!
debug
)

810 
¥Ÿo
 = (
p
[2] << 8) +Ö[3];

811 i‡(
debug
 <1 && 
unsuc˚ss
 =0 && 
¥Ÿo
 =
PPP_LCP


812 && 
Àn
 >
PPP_HDRLEN
 + 
HEADERLEN
) {

813 *
l˝
 = 
p
 + 
PPP_HDRLEN
;

814 
l
 = (
l˝
[2] << 8) +Ücp[3];

816 i‡((
l˝
[0] =
ECHOREQ
 ||Ü˝[0] =
ECHOREP
)

817 && 
l
 >
HEADERLEN
 &&Ü <
Àn
 - 
PPP_HDRLEN
)

821 
	`dbglog
("%†%P", 
èg
, 
p
, 
Àn
);

822 
	}
}

828 
ssize_t


829 
	$com∂ëe_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

831 
size_t
 
d⁄e
;

832 
ssize_t
 
nb
;

833 *
±r
 = 
buf
;

835 
d⁄e
 = 0; d⁄ê< 
cou¡
; ) {

836 
nb
 = 
	`ªad
(
fd
, 
±r
, 
cou¡
 - 
d⁄e
);

837 i‡(
nb
 < 0) {

838 i‡(
î∫o
 =
EINTR
 && !
gŸ_sigãrm
)

842 i‡(
nb
 == 0)

844 
d⁄e
 +
nb
;

845 
±r
 +
nb
;

847  
d⁄e
;

848 
	}
}

851 #i‚de‡
LOCK_DIR


852 #ifde‡
__löux__


853 
	#LOCK_DIR
 "/v¨/lock"

	)

855 #ifde‡
SVR4


856 
	#LOCK_DIR
 "/v¨/•oﬁ/locks"

	)

858 
	#LOCK_DIR
 "/v¨/•oﬁ/lock"

	)

863 
	glock_fûe
[
MAXPATHLEN
];

869 
	$lock
(
dev
)

870 *
dev
;

872 #ifde‡
LOCKLIB


873 
ªsu…
;

875 
ªsu…
 = 
	`mklock
 (
dev
, (*) 0);

876 i‡(
ªsu…
 == 0) {

877 
	`°æ˝y
(
lock_fûe
, 
dev
, (lock_file));

881 i‡(
ªsu…
 > 0)

882 
	`nŸi˚
("Devi˚ %†i†locked byÖid %d", 
dev
, 
ªsu…
);

884 
	`îr‹
("C™'à¸óãÜock fûê%s", 
lock_fûe
);

889 
lock_buf„r
[12];

890 
fd
, 
pid
, 
n
;

892 #ifde‡
SVR4


893 
°©
 
sbuf
;

895 i‡(
	`°©
(
dev
, &
sbuf
) < 0) {

896 
	`îr‹
("C™'àgë devi˚Çumbî f‹ %s: %m", 
dev
);

899 i‡((
sbuf
.
°_mode
 & 
S_IFMT
Ë!
S_IFCHR
) {

900 
	`îr‹
("C™'àlock %s:ÇŸá ch¨a˘î devi˚", 
dev
);

903 
	`¶¥ötf
(
lock_fûe
, (lock_file), "%s/LK.%03d.%03d.%03d",

904 
LOCK_DIR
, 
	`maj‹
(
sbuf
.
°_dev
),

905 
	`maj‹
(
sbuf
.
°_rdev
), 
	`mö‹
(sbuf.st_rdev));

907 *
p
;

908 
lockdev
[
MAXPATHLEN
];

910 i‡((
p
 = 
	`°r°r
(
dev
, "dev/")Ë!
NULL
) {

911 
dev
 = 
p
 + 4;

912 
	`°∫˝y
(
lockdev
, 
dev
, 
MAXPATHLEN
-1);

913 
lockdev
[
MAXPATHLEN
-1] = 0;

914 (
p
 = 
	`°ºchr
(
lockdev
, '/')Ë!
NULL
) {

915 *
p
 = '_';

917 
dev
 = 
lockdev
;

919 i‡((
p
 = 
	`°ºchr
(
dev
, '/')Ë!
NULL
)

920 
dev
 = 
p
 + 1;

922 
	`¶¥ötf
(
lock_fûe
, ÷ock_fûe), "%s/LCK..%s", 
LOCK_DIR
, 
dev
);

925 (
fd
 = 
	`›í
(
lock_fûe
, 
O_EXCL
 | 
O_CREAT
 | 
O_RDWR
, 0644)) < 0) {

926 i‡(
î∫o
 !
EEXIST
) {

927 
	`îr‹
("C™'à¸óãÜock fûê%s: %m", 
lock_fûe
);

932 
fd
 = 
	`›í
(
lock_fûe
, 
O_RDONLY
, 0);

933 i‡(
fd
 < 0) {

934 i‡(
î∫o
 =
ENOENT
)

936 
	`îr‹
("C™'à›íÉxi°ögÜock fûê%s: %m", 
lock_fûe
);

939 #i‚de‡
LOCK_BINARY


940 
n
 = 
	`ªad
(
fd
, 
lock_buf„r
, 11);

942 
n
 = 
	`ªad
(
fd
, &
pid
, (pid));

944 
	`˛o£
(
fd
);

945 
fd
 = -1;

946 i‡(
n
 <= 0) {

947 
	`îr‹
("C™'àªadÖid fromÜock fûê%s", 
lock_fûe
);

952 #i‚de‡
LOCK_BINARY


953 
lock_buf„r
[
n
] = 0;

954 
pid
 = 
	`©oi
(
lock_buf„r
);

956 i‡(
pid
 =
	`gëpid
())

958 i‡(
pid
 == 0

959 || (
	`kûl
(
pid
, 0Ë=-1 && 
î∫o
 =
ESRCH
)) {

960 i‡(
	`u∆ök
 (
lock_fûe
) == 0) {

961 
	`nŸi˚
("Removed sèÀÜock o¿%†’id %d)", 
dev
, 
pid
);

964 
	`w¨n
("Couldn'àªmovê°Æêlock o¿%s", 
dev
);

966 
	`nŸi˚
("Devi˚ %†i†locked byÖid %d", 
dev
, 
pid
);

970 i‡(
fd
 < 0) {

971 
lock_fûe
[0] = 0;

975 
pid
 = 
	`gëpid
();

976 #i‚de‡
LOCK_BINARY


977 
	`¶¥ötf
(
lock_buf„r
, ÷ock_buf„r), "%10d\n", 
pid
);

978 
	`wrôe
 (
fd
, 
lock_buf„r
, 11);

980 
	`wrôe
(
fd
, &
pid
,  (pid));

982 
	`˛o£
(
fd
);

986 
	}
}

998 
	$ªlock
(
pid
)

999 
pid
;

1001 #ifde‡
LOCKLIB


1006 
fd
;

1007 
lock_buf„r
[12];

1009 i‡(
lock_fûe
[0] == 0)

1011 
fd
 = 
	`›í
(
lock_fûe
, 
O_WRONLY
, 0);

1012 i‡(
fd
 < 0) {

1013 
	`îr‹
("Couldn'àª›íÜock fûê%s: %m", 
lock_fûe
);

1014 
lock_fûe
[0] = 0;

1018 #i‚de‡
LOCK_BINARY


1019 
	`¶¥ötf
(
lock_buf„r
, ÷ock_buf„r), "%10d\n", 
pid
);

1020 
	`wrôe
 (
fd
, 
lock_buf„r
, 11);

1022 
	`wrôe
(
fd
, &
pid
, (pid));

1024 
	`˛o£
(
fd
);

1028 
	}
}

1034 
	$u∆ock
()

1036 i‡(
lock_fûe
[0]) {

1037 #ifde‡
LOCKLIB


1038 (Ë
	`rmlock
(
lock_fûe
, (*) 0);

1040 
	`u∆ök
(
lock_fûe
);

1042 
lock_fûe
[0] = 0;

1044 
	}
}

	@pppdump/bsd-comp.c

44 
	~<sys/ty≥s.h
>

45 
	~<°dio.h
>

46 
	~<°ddef.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~"µp_defs.h
"

50 
	~"µp-comp.h
"

52 #i‡
DO_BSD_COMPRESS


79 
	sbsd_db
 {

80 
	mtŸÀn
;

81 
u_öt
 
	mhsize
;

82 
u_ch¨
 
	mhshi·
;

83 
u_ch¨
 
	mn_bôs
;

84 
u_ch¨
 
	mmaxbôs
;

85 
u_ch¨
 
	mdebug
;

86 
u_ch¨
 
	munô
;

87 
u_sh‹t
 
	m£qno
;

88 
u_öt
 
	mhdæí
;

89 
u_öt
 
	mmru
;

90 
u_öt
 
	mmaxmaxcode
;

91 
u_öt
 
	mmax_ít
;

92 
u_öt
 
	mö_cou¡
;

93 
u_öt
 
	mbyãs_out
;

94 
u_öt
 
	møtio
;

95 
u_öt
 
	mcheckpoöt
;

96 
u_öt
 
	m˛ór_cou¡
;

97 
u_öt
 
	möcomp_cou¡
;

98 
u_öt
 
	möcomp_byãs
;

99 
u_öt
 
	muncomp_cou¡
;

100 
u_öt
 
	muncomp_byãs
;

101 
u_öt
 
	mcomp_cou¡
;

102 
u_öt
 
	mcomp_byãs
;

103 
u_sh‹t
 *
	mÀns
;

104 
	sbsd_di˘
 {

106 
u_öt32_t
 
	mfcode
;

108 #ifde‡
BSD_LITTLE_ENDIAN


109 
u_sh‹t
 
	m¥efix
;

110 
u_ch¨
 
	msuffix
;

111 
u_ch¨
 
	m∑d
;

113 
u_ch¨
 
	m∑d
;

114 
u_ch¨
 
	msuffix
;

115 
u_sh‹t
 
	m¥efix
;

117 } 
	mhs
;

118 } 
	mf
;

119 
u_sh‹t
 
	mcodem1
;

120 
u_sh‹t
 
	m˝å
;

121 } 
	mdi˘
[1];

124 
	#BSD_OVHD
 2

	)

125 
	#BSD_INIT_BITS
 
BSD_MIN_BITS


	)

127 *
bsd_decomp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

128 
bsd_‰ì
 
__P
((*
°©e
));

129 
bsd_decomp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

130 
unô
, 
hdæí
, 
mru
, 
debug
));

131 
bsd_öcomp
 
__P
((*
°©e
, 
u_ch¨
 *
dmsg
, 
Àn
));

132 
bsd_decom¥ess
 
__P
((*
°©e
, 
u_ch¨
 *
cmp
, 
öÀn
,

133 
u_ch¨
 *
dmp
, *
ouéí
));

134 
bsd_ª£t
 
__P
((*
°©e
));

135 
bsd_comp_°©s
 
__P
((*
°©e
, 
comp°©
 *
°©s
));

140 
com¥ess‹
 
	gµp_bsd_com¥ess
 = {

141 
CI_BSD_COMPRESS
,

142 
bsd_decomp_Æloc
,

143 
bsd_‰ì
,

144 
bsd_decomp_öô
,

145 
bsd_ª£t
,

146 
bsd_decom¥ess
,

147 
bsd_öcomp
,

148 
bsd_comp_°©s
,

155 
	#CLEAR
 256

	)

156 
	#FIRST
 257

	)

157 
	#LAST
 255

	)

159 
	#MAXCODE
(
b
Ë((1 << (b)Ë- 1)

	)

160 
	#BADCODEM1
 
	`MAXCODE
(
BSD_MAX_BITS
)

	)

162 
	#BSD_HASH
(
¥efix
,
suffix
,
hshi·
Ë((((
u_öt32_t
)(suffix)) << (hshift)) \

163 ^ (
u_öt32_t
)(
¥efix
))

	)

164 
	#BSD_KEY
(
¥efix
,
suffix
Ë((((
u_öt32_t
)(suffix)) << 16) \

165 + (
u_öt32_t
)(
¥efix
))

	)

167 
	#CHECK_GAP
 10000

	)

169 
	#RATIO_SCALE_LOG
 8

	)

170 
	#RATIO_SCALE
 (1<<
RATIO_SCALE_LOG
)

	)

171 
	#RATIO_MAX
 (0x7fffffff>>
RATIO_SCALE_LOG
)

	)

177 
	$bsd_˛ór
(
db
)

178 
bsd_db
 *
db
;

180 
db
->
˛ór_cou¡
++;

181 
db
->
max_ít
 = 
FIRST
-1;

182 
db
->
n_bôs
 = 
BSD_INIT_BITS
;

183 
db
->
øtio
 = 0;

184 
db
->
byãs_out
 = 0;

185 
db
->
ö_cou¡
 = 0;

186 
db
->
checkpoöt
 = 
CHECK_GAP
;

187 
	}
}

203 
	$bsd_check
(
db
)

204 
bsd_db
 *
db
;

206 
u_öt
 
√w_øtio
;

208 i‡(
db
->
ö_cou¡
 >db->
checkpoöt
) {

210 i‡(
db
->
ö_cou¡
 >
RATIO_MAX


211 || 
db
->
byãs_out
 >
RATIO_MAX
) {

212 
db
->
ö_cou¡
 -= db->in_count/4;

213 
db
->
byãs_out
 -= db->bytes_out/4;

216 
db
->
checkpoöt
 = db->
ö_cou¡
 + 
CHECK_GAP
;

218 i‡(
db
->
max_ít
 >db->
maxmaxcode
) {

226 
√w_øtio
 = 
db
->
ö_cou¡
 << 
RATIO_SCALE_LOG
;

227 i‡(
db
->
byãs_out
 != 0)

228 
√w_øtio
 /
db
->
byãs_out
;

230 i‡(
√w_øtio
 < 
db
->
øtio
 ||Çew_øtiÿ< 1 * 
RATIO_SCALE
) {

231 
	`bsd_˛ór
(
db
);

234 
db
->
øtio
 = 
√w_øtio
;

238 
	}
}

244 
	$bsd_comp_°©s
(
°©e
, 
°©s
)

245 *
°©e
;

246 
comp°©
 *
°©s
;

248 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

249 
u_öt
 
out
;

251 
°©s
->
unc_byãs
 = 
db
->
uncomp_byãs
;

252 
°©s
->
unc_∑ckës
 = 
db
->
uncomp_cou¡
;

253 
°©s
->
comp_byãs
 = 
db
->comp_bytes;

254 
°©s
->
comp_∑ckës
 = 
db
->
comp_cou¡
;

255 
°©s
->
öc_byãs
 = 
db
->
öcomp_byãs
;

256 
°©s
->
öc_∑ckës
 = 
db
->
öcomp_cou¡
;

257 
°©s
->
øtio
 = 
db
->
ö_cou¡
;

258 
out
 = 
db
->
byãs_out
;

259 i‡(
°©s
->
øtio
 <= 0x7fffff)

260 
°©s
->
øtio
 <<= 8;

262 
out
 >>= 8;

263 i‡(
out
 != 0)

264 
°©s
->
øtio
 /
out
;

265 
	}
}

271 
	$bsd_ª£t
(
°©e
)

272 *
°©e
;

274 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

276 
db
->
£qno
 = 0;

277 
	`bsd_˛ór
(
db
);

278 
db
->
˛ór_cou¡
 = 0;

279 
	}
}

285 
	$bsd_Æloc
(
›ti⁄s
, 
›t_Àn
, 
decomp
)

286 
u_ch¨
 *
›ti⁄s
;

287 
›t_Àn
, 
decomp
;

289 
bôs
;

290 
u_öt
 
√wÀn
, 
hsize
, 
hshi·
, 
maxmaxcode
;

291 
bsd_db
 *
db
;

293 i‡(
›t_Àn
 !3 || 
›ti⁄s
[0] !
CI_BSD_COMPRESS
 || options[1] != 3

294 || 
	`BSD_VERSION
(
›ti⁄s
[2]Ë!
BSD_CURRENT_VERSION
)

295  
NULL
;

297 
bôs
 = 
	`BSD_NBITS
(
›ti⁄s
[2]);

298 
bôs
) {

303 
hsize
 = 5003;

304 
hshi·
 = 4;

307 
hsize
 = 9001;

308 
hshi·
 = 5;

311 
hsize
 = 18013;

312 
hshi·
 = 6;

315 
hsize
 = 35023;

316 
hshi·
 = 7;

323  
NULL
;

326 
maxmaxcode
 = 
	`MAXCODE
(
bôs
);

327 
√wÀn
 = (*
db
Ë+ (
hsize
-1Ë* ((db->
di˘
[0]));

328 
db
 = (
bsd_db
 *Ë
	`mÆloc
(
√wÀn
);

329 i‡(!
db
)

330  
NULL
;

331 
	`mem£t
(
db
, 0, (*dbË- (db->
di˘
));

333 i‡(!
decomp
) {

334 
db
->
Àns
 = 
NULL
;

336 
db
->
Àns
 = (
u_sh‹t
 *Ë
	`mÆloc
((
maxmaxcode
+1) * (db->lens[0]));

337 i‡(!
db
->
Àns
) {

338 
	`‰ì
(
db
);

339  
NULL
;

343 
db
->
tŸÀn
 = 
√wÀn
;

344 
db
->
hsize
 = hsize;

345 
db
->
hshi·
 = hshift;

346 
db
->
maxmaxcode
 = maxmaxcode;

347 
db
->
maxbôs
 = 
bôs
;

349  (*Ë
db
;

350 
	}
}

353 
	$bsd_‰ì
(
°©e
)

354 *
°©e
;

356 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

358 i‡(
db
->
Àns
)

359 
	`‰ì
(
db
->
Àns
);

360 
	`‰ì
(
db
);

361 
	}
}

364 
	$bsd_decomp_Æloc
(
›ti⁄s
, 
›t_Àn
)

365 
u_ch¨
 *
›ti⁄s
;

366 
›t_Àn
;

368  
	`bsd_Æloc
(
›ti⁄s
, 
›t_Àn
, 1);

369 
	}
}

375 
	$bsd_öô
(
db
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
, 
decomp
)

376 
bsd_db
 *
db
;

377 
u_ch¨
 *
›ti⁄s
;

378 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
, 
decomp
;

380 
i
;

382 i‡(
›t_Àn
 < 
CILEN_BSD_COMPRESS


383 || 
›ti⁄s
[0] !
CI_BSD_COMPRESS
 || o±i⁄s[1] !
CILEN_BSD_COMPRESS


384 || 
	`BSD_VERSION
(
›ti⁄s
[2]Ë!
BSD_CURRENT_VERSION


385 || 
	`BSD_NBITS
(
›ti⁄s
[2]Ë!
db
->
maxbôs


386 || (
decomp
 && 
db
->
Àns
 =
NULL
))

389 i‡(
decomp
) {

390 
i
 = 
LAST
+1;

391 
i
 != 0)

392 
db
->
Àns
[--
i
] = 1;

394 
i
 = 
db
->
hsize
;

395 
i
 != 0) {

396 
db
->
di˘
[--
i
].
codem1
 = 
BADCODEM1
;

397 
db
->
di˘
[
i
].
˝å
 = 0;

400 
db
->
unô
 = unit;

401 
db
->
hdæí
 = hdrlen;

402 
db
->
mru
 = mru;

403 i‡(
debug
)

404 
db
->
debug
 = 1;

406 
	`bsd_ª£t
(
db
);

409 
	}
}

412 
	$bsd_decomp_öô
(
°©e
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
)

413 *
°©e
;

414 
u_ch¨
 *
›ti⁄s
;

415 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
;

417  
	`bsd_öô
((
bsd_db
 *Ë
°©e
, 
›ti⁄s
, 
›t_Àn
,

418 
unô
, 
hdæí
, 
mru
, 
debug
, 1);

419 
	}
}

427 
	$bsd_öcomp
(
°©e
, 
dmsg
, 
mÀn
)

428 *
°©e
;

429 
u_ch¨
 *
dmsg
;

430 
mÀn
;

432 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

433 
u_öt
 
hshi·
 = 
db
->hshift;

434 
u_öt
 
max_ít
 = 
db
->max_ent;

435 
u_öt
 
n_bôs
 = 
db
->n_bits;

436 
bsd_di˘
 *
di˘p
;

437 
u_öt32_t
 
fcode
;

438 
u_ch¨
 
c
;

439 
hvÆ
, 
di•
;

440 
¶í
, 
ûí
;

441 
u_öt
 
bôno
 = 7;

442 
u_ch¨
 *
Ωå
;

443 
u_öt
 
ít
;

445 
Ωå
 = 
dmsg
;

446 
ít
 = 
Ωå
[0];

447 i‡(
ít
 == 0) {

448 ++
Ωå
;

449 --
mÀn
;

450 
ít
 = 
Ωå
[0];

452 i‡((
ít
 & 1) == 0 ||Ént < 0x21 ||Ént > 0xf9)

455 
db
->
£qno
++;

456 
ûí
 = 1;

457 ++
Ωå
;

458 
¶í
 = 
dmsg
 + 
mÀn
 - 
Ωå
;

459 
ûí
 +
¶í
;

460 ; 
¶í
 > 0; --slen) {

461 
c
 = *
Ωå
++;

462 
fcode
 = 
	`BSD_KEY
(
ít
, 
c
);

463 
hvÆ
 = 
	`BSD_HASH
(
ít
, 
c
, 
hshi·
);

464 
di˘p
 = &
db
->
di˘
[
hvÆ
];

467 i‡(
di˘p
->
codem1
 >
max_ít
)

468 
nom©ch
;

469 i‡(
di˘p
->
f
.
fcode
 == fcode) {

470 
ít
 = 
di˘p
->
codem1
+1;

475 
di•
 = (
hvÆ
 == 0) ? 1 : hval;

477 
hvÆ
 +
di•
;

478 i‡(
hvÆ
 >
db
->
hsize
)

479 
hvÆ
 -
db
->
hsize
;

480 
di˘p
 = &
db
->
di˘
[
hvÆ
];

481 i‡(
di˘p
->
codem1
 >
max_ít
)

482 
nom©ch
;

483 } 
di˘p
->
f
.
fcode
 != fcode);

484 
ít
 = 
di˘p
->
codem1
+1;

487 
nom©ch
:

488 
bôno
 +
n_bôs
;

491 i‡(
max_ít
 < 
db
->
maxmaxcode
) {

492 
bsd_di˘
 *
di˘p2
;

494 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
))

495 
db
->
n_bôs
 = ++n_bits;

500 
di˘p2
 = &
db
->
di˘
[
max_ít
+1];

501 i‡(
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 =
max_ít
)

502 
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 = 
BADCODEM1
;

503 
di˘p2
->
˝å
 = 
hvÆ
;

504 
di˘p
->
codem1
 = 
max_ít
;

505 
di˘p
->
f
.
fcode
 = fcode;

507 
db
->
max_ít
 = ++max_ent;

508 
db
->
Àns
[
max_ít
] = db->Àns[
ít
]+1;

510 
ít
 = 
c
;

512 
bôno
 +
n_bôs
;

513 
db
->
byãs_out
 +
bôno
/8;

514 
db
->
ö_cou¡
 +
ûí
;

515 ()
	`bsd_check
(
db
);

517 ++
db
->
öcomp_cou¡
;

518 
db
->
öcomp_byãs
 +
ûí
;

519 ++
db
->
uncomp_cou¡
;

520 
db
->
uncomp_byãs
 +
ûí
;

525 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
Ë&& max_íà< 
db
->
maxmaxcode
)

526 
db
->
n_bôs
++;

527 
	}
}

547 
	$bsd_decom¥ess
(
°©e
, 
cmsg
, 
öÀn
, 
dmp
, 
ouéíp
)

548 *
°©e
;

549 
u_ch¨
 *
cmsg
, *
dmp
;

550 
öÀn
, *
ouéíp
;

552 
bsd_db
 *
db
 = (bsd_db *Ë
°©e
;

553 
u_öt
 
max_ít
 = 
db
->max_ent;

554 
u_öt32_t
 
accm
 = 0;

555 
u_öt
 
bôno
 = 32;

556 
u_öt
 
n_bôs
 = 
db
->n_bits;

557 
u_öt
 
tgtbôno
 = 32-
n_bôs
;

558 
bsd_di˘
 *
di˘p
;

559 
ex∂í
, 
£q
, 
Àn
;

560 
u_öt
 
öcode
, 
ﬁdcode
, 
föch¨
;

561 
u_ch¨
 *
p
, *
Ωå
, *
w±r
;

562 
ûí
;

563 
codñí
, 
exåa
;

565 
Ωå
 = 
cmsg
;

566 i‡(*
Ωå
 == 0)

567 ++
Ωå
;

568 ++
Ωå
;

569 
£q
 = (
Ωå
[0] << 8) +Ñptr[1];

570 
Ωå
 +
BSD_OVHD
;

571 
ûí
 = 
Àn
 = 
cmsg
 + 
öÀn
 - 
Ωå
;

576 i‡(
£q
 !
db
->
£qno
++) {

577 i‡(
db
->
debug
)

578 
	`¥ötf
("bsd_decomp%d: bad sequence # %d,Éxpected %d\n",

579 
db
->
unô
, 
£q
, db->
£qno
 - 1);

580  
DECOMP_ERROR
;

583 
w±r
 = 
dmp
 + 
db
->
hdæí
;

585 
ﬁdcode
 = 
CLEAR
;

586 
ex∂í
 = 0;

587 
Àn
 > 0) {

593 
bôno
 -= 8;

594 
accm
 |*
Ωå
++ << 
bôno
;

595 --
Àn
;

596 i‡(
tgtbôno
 < 
bôno
)

598 
öcode
 = 
accm
 >> 
tgtbôno
;

599 
accm
 <<
n_bôs
;

600 
bôno
 +
n_bôs
;

602 i‡(
öcode
 =
CLEAR
) {

608 i‡(
Àn
 > 0) {

609 i‡(
db
->
debug
)

610 
	`¥ötf
("bsd_decomp%d: bad CLEAR\n", 
db
->
unô
);

611  
DECOMP_FATALERROR
;

613 
	`bsd_˛ór
(
db
);

614 
ex∂í
 = 
ûí
 = 0;

618 i‡(
öcode
 > 
max_ít
 + 2 || incodê> 
db
->
maxmaxcode


619 || (
öcode
 > 
max_ít
 && 
ﬁdcode
 =
CLEAR
)) {

620 i‡(
db
->
debug
) {

621 
	`¥ötf
("bsd_decomp%d: bad code 0x%x oldcode=0x%x ",

622 
db
->
unô
, 
öcode
, 
ﬁdcode
);

623 
	`¥ötf
("max_ent=0x%x seqno=%d\n",

624 
max_ít
, 
db
->
£qno
);

626  
DECOMP_FATALERROR
;

630 i‡(
öcode
 > 
max_ít
) {

631 
föch¨
 = 
ﬁdcode
;

632 
exåa
 = 1;

634 
föch¨
 = 
öcode
;

635 
exåa
 = 0;

638 
codñí
 = 
db
->
Àns
[
föch¨
];

639 
ex∂í
 +
codñí
 + 
exåa
;

640 i‡(
ex∂í
 > 
db
->
mru
 + 1) {

641 i‡(
db
->
debug
)

642 
	`¥ötf
("bsd_decomp%d:Ñ™ ouào‡mru\n", 
db
->
unô
);

643  
DECOMP_FATALERROR
;

649 
p
 = (
w±r
 +
codñí
);

650 
föch¨
 > 
LAST
) {

651 
di˘p
 = &
db
->
di˘
[db->di˘[
föch¨
].
˝å
];

652 #ifde‡
DEBUG


653 --
codñí
;

654 i‡(
codñí
 <= 0) {

655 
	`¥ötf
("bsd_decomp%d: fñ»of‡íd o‡chaö ", 
db
->
unô
);

656 
	`¥ötf
("0x%xát 0x%x by 0x%x, max_ent=0x%x\n",

657 
öcode
, 
föch¨
, 
db
->
di˘
[föch¨].
˝å
, 
max_ít
);

658  
DECOMP_FATALERROR
;

660 i‡(
di˘p
->
codem1
 !
föch¨
-1) {

661 
	`¥ötf
("bsd_decomp%d: bad code chain 0x%x finchar=0x%x ",

662 
db
->
unô
, 
öcode
, 
föch¨
);

663 
	`¥ötf
("ﬁdcode=0x%x c±r=0x%x codem1=0x%x\n", 
ﬁdcode
,

664 
db
->
di˘
[
föch¨
].
˝å
, 
di˘p
->
codem1
);

665  
DECOMP_FATALERROR
;

668 *--
p
 = 
di˘p
->
f
.
hs
.
suffix
;

669 
föch¨
 = 
di˘p
->
f
.
hs
.
¥efix
;

671 *--
p
 = 
föch¨
;

673 #ifde‡
DEBUG


674 i‡(--
codñí
 != 0)

675 
	`¥ötf
("bsd_decomp%d: short by %dáfter code 0x%x, max_ent=0x%x\n",

676 
db
->
unô
, 
codñí
, 
öcode
, 
max_ít
);

679 i‡(
exåa
)

680 *
w±r
++ = 
föch¨
;

689 i‡(
ﬁdcode
 !
CLEAR
 && 
max_ít
 < 
db
->
maxmaxcode
) {

690 
bsd_di˘
 *
di˘p2
;

691 
u_öt32_t
 
fcode
;

692 
hvÆ
, 
di•
;

694 
fcode
 = 
	`BSD_KEY
(
ﬁdcode
,
föch¨
);

695 
hvÆ
 = 
	`BSD_HASH
(
ﬁdcode
,
föch¨
,
db
->
hshi·
);

696 
di˘p
 = &
db
->
di˘
[
hvÆ
];

699 i‡(
di˘p
->
codem1
 < 
max_ít
) {

700 
di•
 = (
hvÆ
 == 0) ? 1 : hval;

702 
hvÆ
 +
di•
;

703 i‡(
hvÆ
 >
db
->
hsize
)

704 
hvÆ
 -
db
->
hsize
;

705 
di˘p
 = &
db
->
di˘
[
hvÆ
];

706 } 
di˘p
->
codem1
 < 
max_ít
);

713 
di˘p2
 = &
db
->
di˘
[
max_ít
+1];

714 i‡(
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 =
max_ít
) {

715 
db
->
di˘
[
di˘p2
->
˝å
].
codem1
 = 
BADCODEM1
;

717 
di˘p2
->
˝å
 = 
hvÆ
;

718 
di˘p
->
codem1
 = 
max_ít
;

719 
di˘p
->
f
.
fcode
 = fcode;

721 
db
->
max_ít
 = ++max_ent;

722 
db
->
Àns
[
max_ít
] = db->Àns[
ﬁdcode
]+1;

725 i‡(
max_ít
 >
	`MAXCODE
(
n_bôs
Ë&& max_íà< 
db
->
maxmaxcode
) {

726 
db
->
n_bôs
 = ++n_bits;

727 
tgtbôno
 = 32-
n_bôs
;

730 
ﬁdcode
 = 
öcode
;

732 *
ouéíp
 = 
w±r
 - (
dmp
 + 
db
->
hdæí
);

738 
db
->
byãs_out
 +
ûí
;

739 
db
->
ö_cou¡
 +
ex∂í
;

740 i‡(
	`bsd_check
(
db
Ë&& db->
debug
) {

741 
	`¥ötf
("bsd_decomp%d:Öeer should have cleared dictionary\n",

742 
db
->
unô
);

745 ++
db
->
comp_cou¡
;

746 
db
->
comp_byãs
 +
ûí
 + 
BSD_OVHD
;

747 ++
db
->
uncomp_cou¡
;

748 
db
->
uncomp_byãs
 +
ex∂í
;

750  
DECOMP_OK
;

751 
	}
}

	@pppdump/deflate.c

39 
	~<sys/ty≥s.h
>

40 
	~<°dio.h
>

41 
	~<°ddef.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~"µp_defs.h
"

45 
	~"µp-comp.h
"

46 
	~"zlib.h
"

48 #i‡
DO_DEFLATE


50 
	#DEFLATE_DEBUG
 1

	)

55 
	sdeÊ©e_°©e
 {

56 
	m£qno
;

57 
	mw_size
;

58 
	munô
;

59 
	mhdæí
;

60 
	mmru
;

61 
	mdebug
;

62 
z_°ªam
 
	m°rm
;

63 
comp°©
 
	m°©s
;

66 
	#DEFLATE_OVHD
 2

	)

68 *
z_Æloc
 
__P
((*, 
u_öt
 
ôems
, u_öà
size
));

69 
z_‰ì
 
__P
((*, *
±r
, 
u_öt
 
nb
));

70 *
z_decomp_Æloc
 
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

71 
z_decomp_‰ì
 
__P
((*
°©e
));

72 
z_decomp_öô
 
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

73 
unô
, 
hdæí
, 
mru
, 
debug
));

74 
z_öcomp
 
__P
((*
°©e
, 
u_ch¨
 *
dmsg
, 
Àn
));

75 
z_decom¥ess
 
__P
((*
°©e
, 
u_ch¨
 *
cmp
, 
öÀn
,

76 
u_ch¨
 *
dmp
, *
ouéíp
));

77 
z_decomp_ª£t
 
__P
((*
°©e
));

78 
z_comp_°©s
 
__P
((*
°©e
, 
comp°©
 *
°©s
));

83 
com¥ess‹
 
	gµp_deÊ©e
 = {

84 
CI_DEFLATE
,

85 
z_decomp_Æloc
,

86 
z_decomp_‰ì
,

87 
z_decomp_öô
,

88 
z_decomp_ª£t
,

89 
z_decom¥ess
,

90 
z_öcomp
,

91 
z_comp_°©s
,

98 
	$z_Æloc
(
nŸu£d
, 
ôems
, 
size
)

99 *
nŸu£d
;

100 
u_öt
 
ôems
, 
size
;

102  
	`mÆloc
(
ôems
 * 
size
);

103 
	}
}

106 
	$z_‰ì
(
nŸu£d
, 
±r
, 
nbyãs
)

107 *
nŸu£d
;

108 *
±r
;

109 
u_öt
 
nbyãs
;

111 
	`‰ì
(
±r
);

112 
	}
}

115 
	$z_comp_°©s
(
¨g
, 
°©s
)

116 *
¨g
;

117 
comp°©
 *
°©s
;

119 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

120 
u_öt
 
out
;

122 *
°©s
 = 
°©e
->stats;

123 
°©s
->
øtio
 = sèts->
unc_byãs
;

124 
out
 = 
°©s
->
comp_byãs
 + sèts->
unc_byãs
;

125 i‡(
°©s
->
øtio
 <= 0x7ffffff)

126 
°©s
->
øtio
 <<= 8;

128 
out
 >>= 8;

129 i‡(
out
 != 0)

130 
°©s
->
øtio
 /
out
;

131 
	}
}

137 
	$z_decomp_Æloc
(
›ti⁄s
, 
›t_Àn
)

138 
u_ch¨
 *
›ti⁄s
;

139 
›t_Àn
;

141 
deÊ©e_°©e
 *
°©e
;

142 
w_size
;

144 i‡(
›t_Àn
 !
CILEN_DEFLATE
 || 
›ti⁄s
[0] !
CI_DEFLATE


145 || 
›ti⁄s
[1] !
CILEN_DEFLATE


146 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


147 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

148  
NULL
;

149 
w_size
 = 
	`DEFLATE_SIZE
(
›ti⁄s
[2]);

150 i‡(
w_size
 < 
DEFLATE_MIN_SIZE
 || w_sizê> 
DEFLATE_MAX_SIZE
)

151  
NULL
;

153 
°©e
 = (
deÊ©e_°©e
 *Ë
	`mÆloc
((*state));

154 i‡(
°©e
 =
NULL
)

155  
NULL
;

157 
°©e
->
°rm
.
√xt_out
 = 
NULL
;

158 
°©e
->
°rm
.
zÆloc
 = (
Æloc_func
Ë
z_Æloc
;

159 
°©e
->
°rm
.
z‰ì
 = (
‰ì_func
Ë
z_‰ì
;

160 i‡(
	`öÊ©eInô2
(&
°©e
->
°rm
, -
w_size
Ë!
Z_OK
) {

161 
	`‰ì
(
°©e
);

162  
NULL
;

165 
°©e
->
w_size
 = w_size;

166 
	`mem£t
(&
°©e
->
°©s
, 0, (state->stats));

167  (*Ë
°©e
;

168 
	}
}

171 
	$z_decomp_‰ì
(
¨g
)

172 *
¨g
;

174 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

176 
	`öÊ©eEnd
(&
°©e
->
°rm
);

177 
	`‰ì
(
°©e
);

178 
	}
}

181 
	$z_decomp_öô
(
¨g
, 
›ti⁄s
, 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
)

182 *
¨g
;

183 
u_ch¨
 *
›ti⁄s
;

184 
›t_Àn
, 
unô
, 
hdæí
, 
mru
, 
debug
;

186 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

188 i‡(
›t_Àn
 < 
CILEN_DEFLATE
 || 
›ti⁄s
[0] !
CI_DEFLATE


189 || 
›ti⁄s
[1] !
CILEN_DEFLATE


190 || 
	`DEFLATE_METHOD
(
›ti⁄s
[2]Ë!
DEFLATE_METHOD_VAL


191 || 
	`DEFLATE_SIZE
(
›ti⁄s
[2]Ë!
°©e
->
w_size


192 || 
›ti⁄s
[3] !
DEFLATE_CHK_SEQUENCE
)

195 
°©e
->
£qno
 = 0;

196 
°©e
->
unô
 = unit;

197 
°©e
->
hdæí
 = hdrlen;

198 
°©e
->
debug
 = debug;

199 
°©e
->
mru
 = mru;

201 
	`öÊ©eRe£t
(&
°©e
->
°rm
);

204 
	}
}

207 
	$z_decomp_ª£t
(
¨g
)

208 *
¨g
;

210 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

212 
°©e
->
£qno
 = 0;

213 
	`öÊ©eRe£t
(&
°©e
->
°rm
);

214 
	}
}

233 
	$z_decom¥ess
(
¨g
, 
mi
, 
öÀn
, 
mo
, 
ouéíp
)

234 *
¨g
;

235 
u_ch¨
 *
mi
, *
mo
;

236 
öÀn
, *
ouéíp
;

238 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

239 
u_ch¨
 *
Ωå
, *
w±r
;

240 
æí
, 
ﬁí
;

241 
£q
, 
r
;

243 
Ωå
 = 
mi
;

244 i‡(*
Ωå
 == 0)

245 ++
Ωå
;

246 ++
Ωå
;

249 
£q
 = (
Ωå
[0] << 8) +Ñptr[1];

250 
Ωå
 += 2;

251 i‡(
£q
 !
°©e
->
£qno
) {

252 #i‡!
DEFLATE_DEBUG


253 i‡(
°©e
->
debug
)

255 
	`¥ötf
("z_decompress%d: bad seq # %d,Éxpected %d\n",

256 
°©e
->
unô
, 
£q
, sèã->
£qno
);

257  
DECOMP_ERROR
;

259 ++
°©e
->
£qno
;

264 
w±r
 = 
mo
;

265 
°©e
->
°rm
.
√xt_ö
 = 
Ωå
;

266 
°©e
->
°rm
.
avaû_ö
 = 
mi
 + 
öÀn
 - 
Ωå
;

267 
æí
 = 
°©e
->
°rm
.
avaû_ö
 + 
PPP_HDRLEN
 + 
DEFLATE_OVHD
;

268 
°©e
->
°rm
.
√xt_out
 = 
w±r
;

269 
°©e
->
°rm
.
avaû_out
 = sèã->
mru
 + 2;

271 
r
 = 
	`öÊ©e
(&
°©e
->
°rm
, 
Z_PACKET_FLUSH
);

272 i‡(
r
 !
Z_OK
) {

273 #i‡!
DEFLATE_DEBUG


274 i‡(
°©e
->
debug
)

276 
	`¥ötf
("z_decompress%d: inflateÑeturned %d (%s)\n",

277 
°©e
->
unô
, 
r
, (°©e->
°rm
.
msg
? state->strm.msg: ""));

278  
DECOMP_FATALERROR
;

280 
ﬁí
 = 
°©e
->
mru
 + 2 - sèã->
°rm
.
avaû_out
;

281 *
ouéíp
 = 
ﬁí
;

283 i‡((
w±r
[0] & 1) != 0)

284 ++
ﬁí
;

285 
ﬁí
 += 2;

287 #i‡
DEFLATE_DEBUG


288 i‡(
ﬁí
 > 
°©e
->
mru
 + 
PPP_HDRLEN
)

289 
	`¥ötf
("ppp_deflate%d:Éxceeded mru (%d > %d)\n",

290 
°©e
->
unô
, 
ﬁí
, sèã->
mru
 + 
PPP_HDRLEN
);

293 
°©e
->
°©s
.
unc_byãs
 +
ﬁí
;

294 
°©e
->
°©s
.
unc_∑ckës
++;

295 
°©e
->
°©s
.
comp_byãs
 +
æí
;

296 
°©e
->
°©s
.
comp_∑ckës
++;

298  
DECOMP_OK
;

299 
	}
}

305 
	$z_öcomp
(
¨g
, 
mi
, 
mÀn
)

306 *
¨g
;

307 
u_ch¨
 *
mi
;

308 
mÀn
;

310 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
¨g
;

311 
u_ch¨
 *
Ωå
;

312 
æí
, 
¥Ÿo
, 
r
;

317 
Ωå
 = 
mi
;

318 
¥Ÿo
 = 
Ωå
[0];

319 i‡((
¥Ÿo
 & 1) == 0)

320 
¥Ÿo
 = (¥Ÿÿ<< 8Ë+ 
Ωå
[1];

321 i‡(
¥Ÿo
 > 0x3fff ||Öroto == 0xfd ||Öroto == 0xfb)

324 ++
°©e
->
£qno
;

326 i‡(
Ωå
[0] == 0)

327 ++
Ωå
;

328 
æí
 = 
mi
 + 
mÀn
 - 
Ωå
;

329 
°©e
->
°rm
.
√xt_ö
 = 
Ωå
;

330 
°©e
->
°rm
.
avaû_ö
 = 
æí
;

331 
r
 = 
	`öÊ©eIncomp
(&
°©e
->
°rm
);

332 i‡(
r
 !
Z_OK
) {

334 #i‡!
DEFLATE_DEBUG


335 i‡(
°©e
->
debug
)

337 
	`¥ötf
("z_incomp%d: inflateIncompÑeturned %d (%s)\n",

338 
°©e
->
unô
, 
r
, (°©e->
°rm
.
msg
? state->strm.msg: ""));

345 i‡(
¥Ÿo
 <= 0xff)

346 ++
æí
;

347 
æí
 += 2;

348 
°©e
->
°©s
.
öc_byãs
 +
æí
;

349 
°©e
->
°©s
.
öc_∑ckës
++;

350 
°©e
->
°©s
.
unc_byãs
 +
æí
;

351 
°©e
->
°©s
.
unc_∑ckës
++;

352 
	}
}

	@pppdump/ppp-comp.h

38 #i‚de‡
_NET_PPP_COMP_H


39 
	#_NET_PPP_COMP_H


	)

45 #i‚de‡
DO_BSD_COMPRESS


46 
	#DO_BSD_COMPRESS
 1

	)

48 #i‚de‡
DO_DEFLATE


49 
	#DO_DEFLATE
 1

	)

51 
	#DO_PREDICTOR_1
 0

	)

52 
	#DO_PREDICTOR_2
 0

	)

57 
	scom¥ess‹
 {

58 
	mcom¥ess_¥Ÿo
;

61 *(*
	mdecomp_Æloc
Ë
__P
((
u_ch¨
 *
›ti⁄s
, 
›t_Àn
));

63 (*
	mdecomp_‰ì
Ë
__P
((*
°©e
));

65 (*
	mdecomp_öô
Ë
__P
((*
°©e
, 
u_ch¨
 *
›ti⁄s
, 
›t_Àn
,

66 
unô
, 
hdæí
, 
mru
, 
debug
));

68 (*
	mdecomp_ª£t
Ë
__P
((*
°©e
));

70 (*
	mdecom¥ess
Ë
__P
((*
°©e
, 
u_ch¨
 *
mp
, 
öÀn
,

71 
u_ch¨
 *
dmp
, *
ouéí
));

73 (*
	möcomp
Ë
__P
((*
°©e
, 
u_ch¨
 *
mp
, 
Àn
));

75 (*
	mdecomp_°©
Ë
__P
((*
°©e
, 
comp°©
 *
°©s
));

86 
	#DECOMP_OK
 0

	)

87 
	#DECOMP_ERROR
 1

	)

88 
	#DECOMP_FATALERROR
 2

	)

93 
	#CCP_CONFREQ
 1

	)

94 
	#CCP_CONFACK
 2

	)

95 
	#CCP_CONFNAK
 3

	)

96 
	#CCP_CONFREJ
 4

	)

97 
	#CCP_TERMREQ
 5

	)

98 
	#CCP_TERMACK
 6

	)

99 
	#CCP_RESETREQ
 14

	)

100 
	#CCP_RESETACK
 15

	)

105 
	#CCP_MAX_OPTION_LENGTH
 32

	)

110 
	#CCP_CODE
(
dp
Ë((dp)[0])

	)

111 
	#CCP_ID
(
dp
Ë((dp)[1])

	)

112 
	#CCP_LENGTH
(
dp
Ë(((dp)[2] << 8Ë+ (dp)[3])

	)

113 
	#CCP_HDRLEN
 4

	)

115 
	#CCP_OPT_CODE
(
dp
Ë((dp)[0])

	)

116 
	#CCP_OPT_LENGTH
(
dp
Ë((dp)[1])

	)

117 
	#CCP_OPT_MINLEN
 2

	)

122 
	#CI_BSD_COMPRESS
 21

	)

123 
	#CILEN_BSD_COMPRESS
 3

	)

126 
	#BSD_NBITS
(
x
Ë((xË& 0x1FË

	)

127 
	#BSD_VERSION
(
x
Ë((xË>> 5Ë

	)

128 
	#BSD_CURRENT_VERSION
 1

	)

129 
	#BSD_MAKE_OPT
(
v
, 
n
Ë(((vË<< 5Ë| (n))

	)

131 
	#BSD_MIN_BITS
 9

	)

132 
	#BSD_MAX_BITS
 15

	)

137 
	#CI_DEFLATE
 26

	)

138 
	#CI_DEFLATE_DRAFT
 24

	)

139 
	#CILEN_DEFLATE
 4

	)

141 
	#DEFLATE_MIN_SIZE
 8

	)

142 
	#DEFLATE_MAX_SIZE
 15

	)

143 
	#DEFLATE_METHOD_VAL
 8

	)

144 
	#DEFLATE_SIZE
(
x
Ë(((xË>> 4Ë+ 
DEFLATE_MIN_SIZE
)

	)

145 
	#DEFLATE_METHOD
(
x
Ë((xË& 0x0F)

	)

146 
	#DEFLATE_MAKE_OPT
(
w
Ë((((wË- 
DEFLATE_MIN_SIZE
) << 4) \

147 + 
DEFLATE_METHOD_VAL
)

	)

148 
	#DEFLATE_CHK_SEQUENCE
 0

	)

153 
	#CI_PREDICTOR_1
 1

	)

154 
	#CILEN_PREDICTOR_1
 2

	)

155 
	#CI_PREDICTOR_2
 2

	)

156 
	#CILEN_PREDICTOR_2
 2

	)

	@pppdump/pppdump.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<°dlib.h
>

39 
	~<time.h
>

40 
	~<sys/ty≥s.h
>

41 
	~"µp_defs.h
"

42 
	~"µp-comp.h
"

44 
	ghexmode
;

45 
	gµpmode
;

46 
	gªvî£
;

47 
	gdecom¥ess
;

48 
	gmru
 = 1500;

49 
	gabs_times
;

50 
time_t
 
	g°¨t_time
;

51 
	g°¨t_time_ã¡hs
;

52 
	gtŸ_£¡
, 
	gtŸ_rcvd
;

54 
›töd
;

55 *
›èrg
;

57 
dum∂og
();

58 
dumµµ
();

59 
show_time
();

60 
h™dÀ_c˝
();

63 
	$maö
(
ac
, 
av
)

64 
ac
;

65 **
av
;

67 
i
;

68 *
p
;

69 
FILE
 *
f
;

71 (
i
 = 
	`gë›t
(
ac
, 
av
, "hprdm:a")) != -1) {

72 
i
) {

74 
hexmode
 = 1;

77 
µpmode
 = 1;

80 
ªvî£
 = 1;

83 
decom¥ess
 = 1;

86 
mru
 = 
	`©oi
(
›èrg
);

89 
abs_times
 = 1;

92 
	`Ârötf
(
°dîr
, "Ußge: %†[-h | -p[d]] [-r] [-m mru] [-a] [fûê...]\n", 
av
[0]);

93 
	`exô
(1);

96 i‡(
›töd
 >
ac
)

97 
	`dum∂og
(
°dö
);

99 
i
 = 
›töd
; i < 
ac
; ++i) {

100 
p
 = 
av
[
i
];

101 i‡((
f
 = 
	`f›í
(
p
, "r")Ë=
NULL
) {

102 
	`≥º‹
(
p
);

103 
	`exô
(1);

105 i‡(
µpmode
)

106 
	`dumµµ
(
f
);

108 
	`dum∂og
(
f
);

109 
	`f˛o£
(
f
);

112 
	`exô
(0);

113 
	}
}

116 
	$dum∂og
(
f
)

117 
FILE
 *
f
;

119 
c
, 
n
, 
k
, 
cﬁ
;

120 
nb
, 
c2
;

121 
buf
[16];

123 (
c
 = 
	`gëc
(
f
)Ë!
EOF
) {

124 
c
) {

127 i‡(
ªvî£
)

128 
c
 = 3 - c;

129 
	`¥ötf
("%†%c", 
c
==1? "£¡": "rcvd", 
hexmode
? ' ': '"');

130 
cﬁ
 = 6;

131 
n
 = 
	`gëc
(
f
);

132 
n
 = (¿<< 8Ë+ 
	`gëc
(
f
);

133 *(
c
==1? &
tŸ_£¡
: &
tŸ_rcvd
Ë+
n
;

134 
nb
 = 0;

135 ; 
n
 > 0; --n) {

136 
c
 = 
	`gëc
(
f
);

137 i‡(
c
 =
EOF
) {

138 
	`¥ötf
("\nEOF\n");

139 
	`exô
(0);

141 i‡(
hexmode
) {

142 i‡(
nb
 >= 16) {

143 
	`¥ötf
(" ");

144 
k
 = 0; k < 
nb
; ++k) {

145 
c2
 = 
buf
[
k
];

146 
	`putch¨
((' ' <
c2
 && c2 <= '~')? c2: '.');

148 
	`¥ötf
("\n ");

149 
nb
 = 0;

151 
buf
[
nb
++] = 
c
;

152 
	`¥ötf
(" %.2x", 
c
);

154 
k
 = (' ' <
c
 && c <= '~')? (c != '\\' && c != '"')? 1: 2: 3;

155 i‡((
cﬁ
 +
k
) >= 78) {

156 
	`¥ötf
("\n ");

157 
cﬁ
 = 6 + 
k
;

159 
k
) {

161 
	`putch¨
(
c
);

164 
	`¥ötf
("\\%c", 
c
);

167 
	`¥ötf
("\\%.2x", 
c
);

172 i‡(
hexmode
) {

173 
k
 = 
nb
; k < 16; ++k)

174 
	`¥ötf
(" ");

175 
	`¥ötf
(" ");

176 
k
 = 0; k < 
nb
; ++k) {

177 
c2
 = 
buf
[
k
];

178 
	`putch¨
((' ' <
c2
 && c2 <= '~')? c2: '.');

181 
	`putch¨
('"');

182 
	`¥ötf
("\n");

186 
	`¥ötf
("íd %s\n", 
c
==3? "send": "recv");

191 
	`show_time
(
f
, 
c
);

194 
	`¥ötf
("?%.2x\n", 
c
);

197 
	}
}

202 
u_sh‹t
 
	gfc°ab
[256] = {

237 
	spkt
 {

238 
	m˙t
;

239 
	mesc
;

240 
	mÊags
;

241 
com¥ess‹
 *
	mcomp
;

242 *
	m°©e
;

243 
	mbuf
[8192];

244 } 
	g•kt
, 
	gΩkt
;

247 
	#CCP_ISUP
 1

	)

248 
	#CCP_ERROR
 2

	)

249 
	#CCP_FATALERROR
 4

	)

250 
	#CCP_ERR
 (
CCP_ERROR
 | 
CCP_FATALERROR
)

	)

251 
	#CCP_DECOMP_RUN
 8

	)

253 
	gdbuf
[8192];

256 
	$dumµµ
(
f
)

257 
FILE
 *
f
;

259 
c
, 
n
, 
k
;

260 
nb
, 
∆
, 
dn
, 
¥Ÿo
, 
rv
;

261 *
dú
, *
q
;

262 *
p
, *
r
, *
ídp
;

263 *
d
;

264 
fcs
;

265 
pkt
 *pkt;

267 
•kt
.
˙t
 = 
Ωkt
.cnt = 0;

268 
•kt
.
esc
 = 
Ωkt
.esc = 0;

269 (
c
 = 
	`gëc
(
f
)Ë!
EOF
) {

270 
c
) {

273 i‡(
ªvî£
)

274 
c
 = 3 - c;

275 
dú
 = 
c
==1? "sent": "rcvd";

276 
pkt
 = 
c
==1? &
•kt
: &
Ωkt
;

277 
n
 = 
	`gëc
(
f
);

278 
n
 = (¿<< 8Ë+ 
	`gëc
(
f
);

279 *(
c
==1? &
tŸ_£¡
: &
tŸ_rcvd
Ë+
n
;

280 ; 
n
 > 0; --n) {

281 
c
 = 
	`gëc
(
f
);

282 
c
) {

283 
EOF
:

284 
	`¥ötf
("\nEOF\n");

285 i‡(
•kt
.
˙t
 > 0)

286 
	`¥ötf
("[%d bytes in incomplete sendÖacket]\n",

287 
•kt
.
˙t
);

288 i‡(
Ωkt
.
˙t
 > 0)

289 
	`¥ötf
("[%d bytes in incompleteÑecvÖacket]\n",

290 
Ωkt
.
˙t
);

291 
	`exô
(0);

293 i‡(
pkt
->
˙t
 > 0) {

294 
q
 = 
dú
;

295 i‡(
pkt
->
esc
) {

296 
	`¥ötf
("%†ab‹ãdÖackë:\¿ ", 
dú
);

297 
q
 = " ";

299 
nb
 = 
pkt
->
˙t
;

300 
p
 = 
pkt
->
buf
;

301 
pkt
->
˙t
 = 0;

302 
pkt
->
esc
 = 0;

303 i‡(
nb
 <= 2) {

304 
	`¥ötf
("%†sh‹à∑ckë [%d byãs]:", 
q
, 
nb
);

305 
k
 = 0; k < 
nb
; ++k)

306 
	`¥ötf
(" %.2x", 
p
[
k
]);

307 
	`¥ötf
("\n");

310 
fcs
 = 
PPP_INITFCS
;

311 
k
 = 0; k < 
nb
; ++k)

312 
fcs
 = 
	`PPP_FCS
(fcs, 
p
[
k
]);

313 
fcs
 &= 0xFFFF;

314 
nb
 -= 2;

315 
ídp
 = 
p
 + 
nb
;

316 
r
 = 
p
;

317 i‡(
r
[0] == 0xff &&Ñ[1] == 3)

318 
r
 += 2;

319 i‡((
r
[0] & 1) == 0)

320 ++
r
;

321 ++
r
;

322 i‡(
ídp
 - 
r
 > 
mru
)

323 
	`¥ötf
(" ERROR:Üength (%zd) > MRU (%d)\n",

324 
ídp
 - 
r
, 
mru
);

325 i‡(
decom¥ess
 && 
fcs
 =
PPP_GOODFCS
) {

327 
d
 = 
dbuf
;

328 
r
 = 
p
;

329 i‡(
r
[0] == 0xff &&Ñ[1] == 3) {

330 *
d
++ = *
r
++;

331 *
d
++ = *
r
++;

333 
¥Ÿo
 = 
r
[0];

334 i‡((
¥Ÿo
 & 1) == 0)

335 
¥Ÿo
 = (¥Ÿÿ<< 8Ë+ 
r
[1];

336 i‡(
¥Ÿo
 =
PPP_CCP
) {

337 
	`h™dÀ_c˝
(
pkt
, 
r
 + 2, 
ídp
 -Ñ - 2);

338 } i‡(
¥Ÿo
 =
PPP_COMP
) {

339 i‡((
pkt
->
Êags
 & 
CCP_ISUP
)

340 && (
pkt
->
Êags
 & 
CCP_DECOMP_RUN
)

341 && 
pkt
->
°©e


342 && (
pkt
->
Êags
 & 
CCP_ERR
) == 0) {

343 
rv
 = 
pkt
->
comp
->
	`decom¥ess
’kt->
°©e
, 
r
,

344 
ídp
 - 
r
, 
d
, &
dn
);

345 
rv
) {

346 
DECOMP_OK
:

347 
p
 = 
dbuf
;

348 
nb
 = 
d
 + 
dn
 - 
p
;

349 i‡((
d
[0] & 1) == 0)

350 --
dn
;

351 --
dn
;

352 i‡(
dn
 > 
mru
)

353 
	`¥ötf
(" ERROR: decom¥es£dÜígth (%dË> MRU (%d)\n", 
dn
, 
mru
);

355 
DECOMP_ERROR
:

356 
	`¥ötf
(" DECOMPRESSION ERROR\n");

357 
pkt
->
Êags
 |
CCP_ERROR
;

359 
DECOMP_FATALERROR
:

360 
	`¥ötf
(" FATAL DECOMPRESSION ERROR\n");

361 
pkt
->
Êags
 |
CCP_FATALERROR
;

365 } i‡(
pkt
->
°©e


366 && (
pkt
->
Êags
 & 
CCP_DECOMP_RUN
)) {

367 
pkt
->
comp
->
	`öcomp
’kt->
°©e
, 
r
, 
ídp
 -Ñ);

371 
∆
 = 
nb
 < 16?Çb: 16;

372 
	`¥ötf
("%†", 
q
);

373 
k
 = 0; k < 
∆
; ++k)

374 
	`¥ötf
(" %.2x", 
p
[
k
]);

375 ; 
k
 < 16; ++k)

376 
	`¥ötf
(" ");

377 
	`¥ötf
(" ");

378 
k
 = 0; k < 
∆
; ++k) {

379 
c
 = 
p
[
k
];

380 
	`putch¨
((' ' <
c
 && c <= '~')? c: '.');

382 
	`¥ötf
("\n");

383 
q
 = " ";

384 
p
 +
∆
;

385 
nb
 -
∆
;

386 } 
nb
 > 0);

387 i‡(
fcs
 !
PPP_GOODFCS
)

388 
	`¥ötf
(" BAD FCS: (ªsiduê%x)\n", 
fcs
);

392 i‡(!
pkt
->
esc
) {

393 
pkt
->
esc
 = 1;

398 i‡(
pkt
->
esc
) {

399 
c
 ^= 0x20;

400 
pkt
->
esc
 = 0;

402 
pkt
->
buf
[pkt->
˙t
++] = 
c
;

409 i‡(
ªvî£
)

410 
c
 = 7 - c;

411 
dú
 = 
c
==3? "send": "recv";

412 
pkt
 = 
c
==3? &
•kt
: &
Ωkt
;

413 
	`¥ötf
("íd %s", 
dú
);

414 i‡(
pkt
->
˙t
 > 0)

415 
	`¥ötf
(" [%d byã†ö incom∂ëê∑ckë]", 
pkt
->
˙t
);

416 
	`¥ötf
("\n");

421 
	`show_time
(
f
, 
c
);

424 
	`¥ötf
("?%.2x\n", 
c
);

427 
	}
}

429 
com¥ess‹
 
µp_bsd_com¥ess
, 
µp_deÊ©e
;

431 
com¥ess‹
 *
	gcom¥ess‹s
[] = {

432 #i‡
DO_BSD_COMPRESS


433 &
µp_bsd_com¥ess
,

435 #i‡
DO_DEFLATE


436 &
µp_deÊ©e
,

438 
NULL


442 
	$h™dÀ_c˝
(
˝
, 
dp
, 
Àn
)

443 
pkt
 *
˝
;

444 
u_ch¨
 *
dp
;

445 
Àn
;

447 
˛í
;

448 
com¥ess‹
 **
comp
;

450 i‡(
Àn
 < 
CCP_HDRLEN
)

452 
˛í
 = 
	`CCP_LENGTH
(
dp
);

453 i‡(
˛í
 > 
Àn
)

456 
	`CCP_CODE
(
dp
)) {

457 
CCP_CONFACK
:

458 
˝
->
Êags
 &~(
CCP_DECOMP_RUN
 | 
CCP_ISUP
);

459 i‡(
˛í
 < 
CCP_HDRLEN
 + 
CCP_OPT_MINLEN


460 || 
˛í
 < 
CCP_HDRLEN
 + 
	`CCP_OPT_LENGTH
(
dp
 + CCP_HDRLEN))

462 
dp
 +
CCP_HDRLEN
;

463 
˛í
 -
CCP_HDRLEN
;

464 
comp
 = 
com¥ess‹s
; *com∞!
NULL
; ++comp) {

465 i‡((*
comp
)->
com¥ess_¥Ÿo
 =
dp
[0]) {

466 i‡(
˝
->
°©e
 !
NULL
) {

467 (*
˝
->
comp
->
decomp_‰ì
)(˝->
°©e
);

468 
˝
->
°©e
 = 
NULL
;

470 
˝
->
comp
 = *comp;

471 
˝
->
°©e
 = (*
comp
)->
	`decomp_Æloc
(
dp
, 
	`CCP_OPT_LENGTH
(dp));

472 
˝
->
Êags
 |
CCP_ISUP
;

473 i‡(
˝
->
°©e
 !
NULL


474 && (*
˝
->
comp
->
decomp_öô
)

475 (
˝
->
°©e
, 
dp
, 
˛í
, 0, 0, 8192, 1))

476 
˝
->
Êags
 = (˝->Êag†& ~
CCP_ERR
Ë| 
CCP_DECOMP_RUN
;

482 
CCP_CONFNAK
:

483 
CCP_CONFREJ
:

484 
˝
->
Êags
 &~(
CCP_DECOMP_RUN
 | 
CCP_ISUP
);

487 
CCP_RESETACK
:

488 i‡(
˝
->
Êags
 & 
CCP_ISUP
) {

489 i‡(
˝
->
°©e
 && (˝->
Êags
 & 
CCP_DECOMP_RUN
)) {

490 (*
˝
->
comp
->
decomp_ª£t
)(˝->
°©e
);

491 
˝
->
Êags
 &~
CCP_ERROR
;

496 
	}
}

499 
	$show_time
(
f
, 
c
)

500 
FILE
 *
f
;

501 
c
;

503 
time_t
 
t
;

504 
n
;

505 
tm
 *tm;

507 i‡(
c
 == 7) {

508 
t
 = 
	`gëc
(
f
);

509 
t
 = (à<< 8Ë+ 
	`gëc
(
f
);

510 
t
 = (à<< 8Ë+ 
	`gëc
(
f
);

511 
t
 = (à<< 8Ë+ 
	`gëc
(
f
);

512 
	`¥ötf
("°¨à%s", 
	`˘ime
(&
t
));

513 
°¨t_time
 = 
t
;

514 
°¨t_time_ã¡hs
 = 0;

515 
tŸ_£¡
 = 
tŸ_rcvd
 = 0;

517 
n
 = 
	`gëc
(
f
);

518 i‡(
c
 == 5) {

519 
c
 = 3; c > 0; --c)

520 
n
 = (¿<< 8Ë+ 
	`gëc
(
f
);

522 i‡(
abs_times
) {

523 
n
 +
°¨t_time_ã¡hs
;

524 
°¨t_time
 +
n
 / 10;

525 
°¨t_time_ã¡hs
 = 
n
 % 10;

526 
tm
 = 
	`loˇ…ime
(&
°¨t_time
);

527 
	`¥ötf
("timê %.2d:%.2d:%.2d.%d", 
tm
->
tm_hour
,Åm->
tm_mö
,

528 
tm
->
tm_£c
, 
°¨t_time_ã¡hs
);

529 
	`¥ötf
(" (£¡ %d,Ñcvd %d)\n", 
tŸ_£¡
, 
tŸ_rcvd
);

531 
	`¥ötf
("timê %.1fs\n", (Ë
n
 / 10);

533 
	}
}

	@pppdump/zlib.c

31 
	#_Z_UTIL_H


	)

33 
	~"zlib.h
"

35 #ifde‡
STDC


36 
	~<°rög.h
>

39 #i‚de‡
loˇl


40 
	#loˇl
 

	)

44 
	#FAR


	)

46 
	tuch
;

47 
uch
 
	tFAR
 
	tuchf
;

48 
	tush
;

49 
ush
 
	tFAR
 
	tushf
;

50 
	tulg
;

52 *
z_îrmsg
[];

54 
	#ERR_RETURN
(
°rm
,
îr
Ë (°rm->
msg
=
z_îrmsg
[1-îr],Éº)

	)

57 #i‚de‡
NULL


58 
	#NULL
 ((*Ë0)

	)

63 
	#DEFLATED
 8

	)

65 #i‚de‡
DEF_WBITS


66 
	#DEF_WBITS
 
MAX_WBITS


	)

70 #i‡
MAX_MEM_LEVEL
 >= 8

71 
	#DEF_MEM_LEVEL
 8

	)

73 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

77 
	#STORED_BLOCK
 0

	)

78 
	#STATIC_TREES
 1

	)

79 
	#DYN_TREES
 2

	)

82 
	#MIN_MATCH
 3

	)

83 
	#MAX_MATCH
 258

	)

88 #i‡
deföed
(
STDC
Ë&& !deföed(
HAVE_MEMCPY
Ë&& !deföed(
NO_MEMCPY
)

89 
	#HAVE_MEMCPY


	)

91 #ifde‡
HAVE_MEMCPY


92 
	#zmem˝y
 
mem˝y


	)

93 
	#zmemzîo
(
de°
, 
Àn
Ë
	`mem£t
(de°, 0,Üí)

	)

95 
	#zmem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

96 
	#zmemzîo
 
bzîo


	)

100 #ifde‡
DEBUG_ZLIB


101 
	~<°dio.h
>

102 #i‚de‡
vîbo£


103 
	#vîbo£
 0

	)

105 
	#As£π
(
c⁄d
,
msg
Ë{if(!(c⁄d)Ë
	`z_îr‹
(msg);}

	)

106 
	#Tø˚
(
x
Ë
Ârötf
 
	)
x

107 
	#Tø˚v
(
x
Ë{i‡(
vîbo£
Ë
Ârötf
 x ;}

	)

108 
	#Tø˚vv
(
x
Ë{i‡(
vîbo£
>1Ë
Ârötf
 x ;}

	)

109 
	#Tø˚c
(
c
,
x
Ë{i‡(
vîbo£
 && (c)Ë
Ârötf
 x ;}

	)

110 
	#Tø˚cv
(
c
,
x
Ë{i‡(
vîbo£
>1 && (c)Ë
Ârötf
 x ;}

	)

112 
	#As£π
(
c⁄d
,
msg
)

	)

113 
	#Tø˚
(
x
)

	)

114 
	#Tø˚v
(
x
)

	)

115 
	#Tø˚vv
(
x
)

	)

116 
	#Tø˚c
(
c
,
x
)

	)

117 
	#Tø˚cv
(
c
,
x
)

	)

121 
	$uL⁄g
 (*
	tcheck_func
Ë
	tOF
((
	tuL⁄g
 
	tcheck
, 
	tByãf
 *
	tbuf
, 
	tuI¡
 
	tÀn
));

126 
	#ZALLOC
(
°rm
, 
ôems
, 
size
) \

127 (*((
°rm
)->
zÆloc
))((°rm)->
›aque
, (
ôems
), (
size
))

	)

128 
	#ZFREE
(
°rm
, 
addr
, 
size
) \

129 (*((
°rm
)->
z‰ì
))((°rm)->
›aque
, (
voidpf
)(
addr
), (
size
))

	)

130 
	#TRY_FREE
(
s
, 
p
, 
n
Ë{i‡’Ë
	`ZFREE
(s,Ö,Ç);
	}

	)
}

151 
	#BINARY
 0

	)

152 
	#ASCII
 1

	)

153 
	#UNKNOWN
 2

	)

155 
	#LENGTH_CODES
 29

	)

158 
	#LITERALS
 256

	)

161 
	#L_CODES
 (
LITERALS
+1+
LENGTH_CODES
)

	)

164 
	#D_CODES
 30

	)

167 
	#BL_CODES
 19

	)

170 
	#HEAP_SIZE
 (2*
L_CODES
+1)

	)

173 
	#MAX_BITS
 15

	)

176 
	#INIT_STATE
 42

	)

177 
	#BUSY_STATE
 113

	)

178 
	#FLUSH_STATE
 124

	)

179 
	#FINISH_STATE
 666

	)

184 
	s˘_d©a_s
 {

186 
ush
 
	m‰eq
;

187 
ush
 
	mcode
;

188 } 
	mfc
;

190 
ush
 
	mdad
;

191 
ush
 
	mÀn
;

192 } 
	mdl
;

193 } 
	tFAR
 
	t˘_d©a
;

195 
	#Fªq
 
fc
.
‰eq


	)

196 
	#Code
 
fc
.
code


	)

197 
	#Dad
 
dl
.
dad


	)

198 
	#Lí
 
dl
.
Àn


	)

200 
°©ic_åì_desc_s
 
	t°©ic_åì_desc
;

202 
	såì_desc_s
 {

203 
˘_d©a
 *
	mdyn_åì
;

204 
	mmax_code
;

205 
°©ic_åì_desc
 *
	m°©_desc
;

206 } 
	tFAR
 
	tåì_desc
;

208 
ush
 
	tPos
;

209 
Pos
 
	tFAR
 
	tPosf
;

210 
	tIPos
;

216 
	sdeÊ©e_°©e
 {

217 
z_°ªam
 *
	m°rm
;

218 
	m°©us
;

219 
Byãf
 *
	m≥ndög_buf
;

220 
Byãf
 *
	m≥ndög_out
;

221 
	m≥ndög
;

222 
uL⁄g
 
	madÀr
;

223 
	mnohódî
;

224 
Byã
 
	md©a_ty≥
;

225 
Byã
 
	mmëhod
;

226 
	mmöCom¥
;

230 
uI¡
 
	mw_size
;

231 
uI¡
 
	mw_bôs
;

232 
uI¡
 
	mw_mask
;

234 
Byãf
 *
	mwödow
;

244 
ulg
 
	mwödow_size
;

249 
Posf
 *
	m¥ev
;

255 
Posf
 *
	mhód
;

257 
uI¡
 
	mös_h
;

258 
uI¡
 
	mhash_size
;

259 
uI¡
 
	mhash_bôs
;

260 
uI¡
 
	mhash_mask
;

262 
uI¡
 
	mhash_shi·
;

269 
	mblock_°¨t
;

274 
uI¡
 
	mm©ch_Àngth
;

275 
IPos
 
	m¥ev_m©ch
;

276 
	mm©ch_avaûabÀ
;

277 
uI¡
 
	m°r°¨t
;

278 
uI¡
 
	mm©ch_°¨t
;

279 
uI¡
 
	mlookahód
;

281 
uI¡
 
	m¥ev_Àngth
;

286 
uI¡
 
	mmax_chaö_Àngth
;

292 
uI¡
 
	mmax_œzy_m©ch
;

297 
	#max_ö£π_Àngth
 
max_œzy_m©ch


	)

303 
	mÀvñ
;

304 
	m°øãgy
;

306 
uI¡
 
	mgood_m©ch
;

309 
	mni˚_m©ch
;

313 
˘_d©a_s
 
	mdyn_…ªe
[
HEAP_SIZE
];

314 
˘_d©a_s
 
	mdyn_dåì
[2*
D_CODES
+1];

315 
˘_d©a_s
 
	mbl_åì
[2*
BL_CODES
+1];

317 
åì_desc_s
 
	ml_desc
;

318 
åì_desc_s
 
	md_desc
;

319 
åì_desc_s
 
	mbl_desc
;

321 
ush
 
	mbl_cou¡
[
MAX_BITS
+1];

324 
	mhóp
[2*
L_CODES
+1];

325 
	mhóp_Àn
;

326 
	mhóp_max
;

331 
uch
 
	mdïth
[2*
L_CODES
+1];

335 
uchf
 *
	ml_buf
;

337 
uI¡
 
	mlô_bufsize
;

357 
uI¡
 
	mœ°_lô
;

359 
ushf
 *
	md_buf
;

365 
ulg
 
	m›t_Àn
;

366 
ulg
 
	m°©ic_Àn
;

367 
ulg
 
	mcom¥es£d_Àn
;

368 
uI¡
 
	mm©ches
;

369 
	mœ°_eob_Àn
;

371 #ifde‡
DEBUG_ZLIB


372 
ulg
 
	mbôs_£¡
;

375 
ush
 
	mbi_buf
;

379 
	mbi_vÆid
;

384 
uI¡
 
	mblocks_ö_∑ckë
;

389 } 
	tFAR
 
	tdeÊ©e_°©e
;

394 
	#put_byã
(
s
, 
c
Ë{s->
≥ndög_buf
[s->
≥ndög
++] = (c);}

	)

397 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

402 
	#MAX_DIST
(
s
Ë((s)->
w_size
-
MIN_LOOKAHEAD
)

	)

408 
loˇl
 
˘_öô
 
OF
((
deÊ©e_°©e
 *
s
));

409 
loˇl
 
˘_èŒy
 
OF
((
deÊ©e_°©e
 *
s
, 
di°
, 
lc
));

410 
loˇl
 
ulg
 
˘_Êush_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, ulg 
°‹ed_Àn
,

411 
Êush
));

412 
loˇl
 
˘_Æign
 
OF
((
deÊ©e_°©e
 *
s
));

413 
loˇl
 
˘_°‹ed_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, 
ulg
 
°‹ed_Àn
,

414 
eof
));

415 
loˇl
 
˘_°‹ed_ty≥_⁄ly
 
OF
((
deÊ©e_°©e
 *
s
));

470 
loˇl
 
	gzlib_c›yright
[] = " deflate Copyright 1995 Jean-loup Gailly ";

478 
	#NIL
 0

	)

481 #i‚de‡
TOO_FAR


482 
	#TOO_FAR
 4096

	)

486 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

497 
	sc⁄fig_s
 {

498 
ush
 
	mgood_Àngth
;

499 
ush
 
	mmax_œzy
;

500 
ush
 
	mni˚_Àngth
;

501 
ush
 
	mmax_chaö
;

502 } 
	tc⁄fig
;

504 
loˇl
 
c⁄fig
 
	gc⁄figuøti⁄_èbÀ
[10] = {

523 
	#EQUAL
 0

	)

530 
loˇl
 
fûl_wödow
 
OF
((
deÊ©e_°©e
 *
s
));

531 
loˇl
 
deÊ©e_Á°
 
OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

532 
loˇl
 
deÊ©e_¶ow
 
OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

533 
loˇl
 
lm_öô
 
OF
((
deÊ©e_°©e
 *
s
));

534 
loˇl
 
l⁄ge°_m©ch
 
OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
cur_m©ch
));

535 
loˇl
 
putSh‹tMSB
 
OF
((
deÊ©e_°©e
 *
s
, 
uI¡
 
b
));

536 
loˇl
 
Êush_≥ndög
 
OF
((
z_°ªam
 *
°rm
));

537 
loˇl
 
ªad_buf
 
OF
((
z_°ªam
 *
°rm
, 
ch¨f
 *
buf
, 
size
));

538 #ifde‡
ASMV


539 
m©ch_öô
 
OF
(());

542 #ifde‡
DEBUG_ZLIB


543 
loˇl
 
check_m©ch
 
OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
°¨t
, IPo†
m©ch
,

544 
Àngth
));

554 
	#UPDATE_HASH
(
s
,
h
,
c
Ë(h = (((h)<<s->
hash_shi·
Ë^ (c)Ë& s->
hash_mask
)

	)

565 
	#INSERT_STRING
(
s
, 
°r
, 
m©ch_hód
) \

566 (
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[(
°r
Ë+ (
MIN_MATCH
-1)]), \

567 
s
->
¥ev
[(
°r
Ë& s->
w_mask
] = 
m©ch_hód
 = s->
hód
[s->
ös_h
], \

568 
s
->
hód
[s->
ös_h
] = (
°r
))

	)

574 
	#CLEAR_HASH
(
s
) \

575 
s
->
hód
[s->
hash_size
-1] = 
NIL
; \

576 
	`zmemzîo
((
ch¨f
 *)
s
->
hód
, ()(s->
hash_size
-1)*(*s->hód));

	)

579 
	$deÊ©eInô
 (
°rm
, 
Àvñ
)

580 
z_°ªam
 *
°rm
;

581 
Àvñ
;

583  
	`deÊ©eInô2
 (
°rm
, 
Àvñ
, 
DEFLATED
, 
MAX_WBITS
, 
DEF_MEM_LEVEL
,

586 
	}
}

589 
	$deÊ©eInô2
 (
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
,

590 
°øãgy
, 
möCom¥essi⁄
)

591 
z_°ªam
 *
°rm
;

592 
Àvñ
;

593 
mëhod
;

594 
wödowBôs
;

595 
memLevñ
;

596 
°øãgy
;

597 
möCom¥essi⁄
;

599 
deÊ©e_°©e
 *
s
;

600 
nohódî
 = 0;

602 i‡(
°rm
 =
Z_NULL
Ë 
Z_STREAM_ERROR
;

604 
°rm
->
msg
 = 
Z_NULL
;

608 i‡(
Àvñ
 =
Z_DEFAULT_COMPRESSION
)Üevel = 6;

610 i‡(
wödowBôs
 < 0) {

611 
nohódî
 = 1;

612 
wödowBôs
 = -windowBits;

614 i‡(
memLevñ
 < 1 || memLevñ > 
MAX_MEM_LEVEL
 || 
mëhod
 !
DEFLATED
 ||

615 
wödowBôs
 < 8 || wödowBô†> 15 || 
Àvñ
 < 1 ||Üevel > 9) {

616  
Z_STREAM_ERROR
;

618 
s
 = (
deÊ©e_°©e
 *Ë
	`ZALLOC
(
°rm
, 1, (deflate_state));

619 i‡(
s
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

620 
°rm
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)
s
;

621 
s
->
°rm
 = strm;

623 
s
->
nohódî
 =Çoheader;

624 
s
->
w_bôs
 = 
wödowBôs
;

625 
s
->
w_size
 = 1 << s->
w_bôs
;

626 
s
->
w_mask
 = s->
w_size
 - 1;

628 
s
->
hash_bôs
 = 
memLevñ
 + 7;

629 
s
->
hash_size
 = 1 << s->
hash_bôs
;

630 
s
->
hash_mask
 = s->
hash_size
 - 1;

631 
s
->
hash_shi·
 = ((s->
hash_bôs
+
MIN_MATCH
-1)/MIN_MATCH);

633 
s
->
wödow
 = (
Byãf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, 2*(
Byã
));

634 
s
->
¥ev
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, (
Pos
));

635 
s
->
hód
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
hash_size
, (
Pos
));

637 
s
->
lô_bufsize
 = 1 << (
memLevñ
 + 6);

639 
s
->
≥ndög_buf
 = (
uchf
 *Ë
	`ZALLOC
(
°rm
, s->
lô_bufsize
, 2*(
ush
));

641 i‡(
s
->
wödow
 =
Z_NULL
 || s->
¥ev
 =Z_NULL || s->
hód
 == Z_NULL ||

642 
s
->
≥ndög_buf
 =
Z_NULL
) {

643 
°rm
->
msg
 = 
z_îrmsg
[1-
Z_MEM_ERROR
];

644 
	`deÊ©eEnd
 (
°rm
);

645  
Z_MEM_ERROR
;

647 
s
->
d_buf
 = (
ushf
 *Ë&(s->
≥ndög_buf
[s->
lô_bufsize
]);

648 
s
->
l_buf
 = (
uchf
 *Ë&(s->
≥ndög_buf
[3*s->
lô_bufsize
]);

654 
s
->
Àvñ
 =Üevel;

655 
s
->
°øãgy
 = strategy;

656 
s
->
mëhod
 = (
Byã
)method;

657 
s
->
möCom¥
 = 
möCom¥essi⁄
;

658 
s
->
blocks_ö_∑ckë
 = 0;

660  
	`deÊ©eRe£t
(
°rm
);

661 
	}
}

664 
	$deÊ©eRe£t
 (
°rm
)

665 
z_°ªam
 *
°rm
;

667 
deÊ©e_°©e
 *
s
;

669 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL ||

670 
°rm
->
zÆloc
 =
Z_NULL
 || såm->
z‰ì
 =Z_NULLË 
Z_STREAM_ERROR
;

672 
°rm
->
tŸÆ_ö
 = såm->
tŸÆ_out
 = 0;

673 
°rm
->
msg
 = 
Z_NULL
;

674 
°rm
->
d©a_ty≥
 = 
Z_UNKNOWN
;

676 
s
 = (
deÊ©e_°©e
 *)
°rm
->
°©e
;

677 
s
->
≥ndög
 = 0;

678 
s
->
≥ndög_out
 = s->
≥ndög_buf
;

680 i‡(
s
->
nohódî
 < 0) {

681 
s
->
nohódî
 = 0;

683 
s
->
°©us
 = s->
nohódî
 ? 
BUSY_STATE
 : 
INIT_STATE
;

684 
s
->
adÀr
 = 1;

686 
	`˘_öô
(
s
);

687 
	`lm_öô
(
s
);

689  
Z_OK
;

690 
	}
}

697 
loˇl
 
	$putSh‹tMSB
 (
s
, 
b
)

698 
deÊ©e_°©e
 *
s
;

699 
uI¡
 
b
;

701 
	`put_byã
(
s
, (
Byã
)(
b
 >> 8));

702 
	`put_byã
(
s
, (
Byã
)(
b
 & 0xff));

703 
	}
}

708 
loˇl
 
	$Êush_≥ndög
(
°rm
)

709 
z_°ªam
 *
°rm
;

711 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
°rm
->state;

712 
Àn
 = 
°©e
->
≥ndög
;

714 i‡(
Àn
 > 
°rm
->
avaû_out
)Üen = strm->avail_out;

715 i‡(
Àn
 == 0) ;

717 i‡(
°rm
->
√xt_out
 !
NULL
) {

718 
	`zmem˝y
(
°rm
->
√xt_out
, 
°©e
->
≥ndög_out
, 
Àn
);

719 
°rm
->
√xt_out
 +
Àn
;

721 
°©e
->
≥ndög_out
 +
Àn
;

722 
°rm
->
tŸÆ_out
 +
Àn
;

723 
°rm
->
avaû_out
 -
Àn
;

724 
°©e
->
≥ndög
 -
Àn
;

725 i‡(
°©e
->
≥ndög
 == 0) {

726 
°©e
->
≥ndög_out
 = sèã->
≥ndög_buf
;

728 
	}
}

731 
	$deÊ©e
 (
°rm
, 
Êush
)

732 
z_°ªam
 *
°rm
;

733 
Êush
;

735 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
°rm
->state;

737 i‡(
°rm
 =
Z_NULL
 || 
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

739 i‡(
°rm
->
√xt_ö
 =
Z_NULL
 && såm->
avaû_ö
 != 0) {

740 
	`ERR_RETURN
(
°rm
, 
Z_STREAM_ERROR
);

742 i‡(
°rm
->
avaû_out
 =0Ë
	`ERR_RETURN
(°rm, 
Z_BUF_ERROR
);

744 
°©e
->
°rm
 = strm;

747 i‡(
°©e
->
°©us
 =
INIT_STATE
) {

749 
uI¡
 
hódî
 = (
DEFLATED
 + ((
°©e
->
w_bôs
-8)<<4)) << 8;

750 
uI¡
 
Àvñ_Êags
 = (
°©e
->
Àvñ
-1) >> 1;

752 i‡(
Àvñ_Êags
 > 3)Üevel_flags = 3;

753 
hódî
 |(
Àvñ_Êags
 << 6);

754 
hódî
 += 31 - (header % 31);

756 
°©e
->
°©us
 = 
BUSY_STATE
;

757 
	`putSh‹tMSB
(
°©e
, 
hódî
);

761 i‡(
°©e
->
≥ndög
 != 0) {

762 
	`Êush_≥ndög
(
°rm
);

763 i‡(
°rm
->
avaû_out
 =0Ë 
Z_OK
;

769 i‡(
°©e
->
°©us
 =
FLUSH_STATE
) {

770 
°©e
->
°©us
 = 
BUSY_STATE
;

771 i‡(
Êush
 !
Z_NO_FLUSH
 && flush !
Z_FINISH
)

772  
Z_OK
;

776 i‡(
°©e
->
°©us
 =
FINISH_STATE
 && 
°rm
->
avaû_ö
 != 0) {

777 
	`ERR_RETURN
(
°rm
, 
Z_BUF_ERROR
);

782 i‡(
°rm
->
avaû_ö
 !0 || 
°©e
->
lookahód
 != 0 ||

783 (
Êush
 =
Z_FINISH
 && 
°©e
->
°©us
 !
FINISH_STATE
)) {

784 
quô
;

786 i‡(
Êush
 =
Z_FINISH
) {

787 
°©e
->
°©us
 = 
FINISH_STATE
;

789 i‡(
°©e
->
Àvñ
 <= 3) {

790 
quô
 = 
	`deÊ©e_Á°
(
°©e
, 
Êush
);

792 
quô
 = 
	`deÊ©e_¶ow
(
°©e
, 
Êush
);

794 i‡(
quô
 || 
°rm
->
avaû_out
 == 0)

795  
Z_OK
;

806 i‡(
Êush
 !
Z_NO_FLUSH
 && flush !
Z_FINISH


807 && 
°©e
->
°©us
 !
FINISH_STATE
) {

808 
Êush
) {

809 
Z_PARTIAL_FLUSH
:

810 
	`˘_Æign
(
°©e
);

812 
Z_PACKET_FLUSH
:

815 
	`˘_°‹ed_ty≥_⁄ly
(
°©e
);

818 
	`˘_°‹ed_block
(
°©e
, (*)0, 0L, 0);

822 i‡(
Êush
 =
Z_FULL_FLUSH
) {

823 
	`CLEAR_HASH
(
°©e
);

826 
	`Êush_≥ndög
(
°rm
);

827 i‡(
°rm
->
avaû_out
 == 0) {

832 
°©e
->
°©us
 = 
FLUSH_STATE
;

833  
Z_OK
;

837 
	`As£π
(
°rm
->
avaû_out
 > 0, "bug2");

839 i‡(
Êush
 !
Z_FINISH
Ë 
Z_OK
;

840 i‡(
°©e
->
nohódî
Ë 
Z_STREAM_END
;

843 
	`putSh‹tMSB
(
°©e
, (
uI¡
)(°©e->
adÀr
 >> 16));

844 
	`putSh‹tMSB
(
°©e
, (
uI¡
)(°©e->
adÀr
 & 0xffff));

845 
	`Êush_≥ndög
(
°rm
);

849 
°©e
->
nohódî
 = -1;

850  
°©e
->
≥ndög
 !0 ? 
Z_OK
 : 
Z_STREAM_END
;

851 
	}
}

854 
	$deÊ©eEnd
 (
°rm
)

855 
z_°ªam
 *
°rm
;

857 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
°rm
->state;

859 i‡(
°rm
 =
Z_NULL
 || 
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

861 
	`TRY_FREE
(
°rm
, 
°©e
->
wödow
, sèã->
w_size
 * 2 * (
Byã
));

862 
	`TRY_FREE
(
°rm
, 
°©e
->
¥ev
, sèã->
w_size
 * (
Pos
));

863 
	`TRY_FREE
(
°rm
, 
°©e
->
hód
, sèã->
hash_size
 * (
Pos
));

864 
	`TRY_FREE
(
°rm
, 
°©e
->
≥ndög_buf
, sèã->
lô_bufsize
 * 2 * (
ush
));

866 
	`ZFREE
(
°rm
, 
°©e
, (
deÊ©e_°©e
));

867 
°rm
->
°©e
 = 
Z_NULL
;

869  
Z_OK
;

870 
	}
}

876 
loˇl
 
	$ªad_buf
(
°rm
, 
buf
, 
size
)

877 
z_°ªam
 *
°rm
;

878 
ch¨f
 *
buf
;

879 
size
;

881 
Àn
 = 
°rm
->
avaû_ö
;

882 
deÊ©e_°©e
 *
°©e
 = (deÊ©e_°©ê*Ë
°rm
->state;

884 i‡(
Àn
 > 
size
)Üen = size;

885 i‡(
Àn
 == 0)  0;

887 
°rm
->
avaû_ö
 -
Àn
;

889 i‡(!
°©e
->
nohódî
) {

890 
°©e
->
adÀr
 = 
	`adÀr32
(°©e->adÀr, 
°rm
->
√xt_ö
, 
Àn
);

892 
	`zmem˝y
(
buf
, 
°rm
->
√xt_ö
, 
Àn
);

893 
°rm
->
√xt_ö
 +
Àn
;

894 
°rm
->
tŸÆ_ö
 +
Àn
;

896  ()
Àn
;

897 
	}
}

902 
loˇl
 
	$lm_öô
 (
s
)

903 
deÊ©e_°©e
 *
s
;

905 
s
->
wödow_size
 = (
ulg
)2L*s->
w_size
;

907 
	`CLEAR_HASH
(
s
);

911 
s
->
max_œzy_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_œzy
;

912 
s
->
good_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
good_Àngth
;

913 
s
->
ni˚_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
ni˚_Àngth
;

914 
s
->
max_chaö_Àngth
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_chaö
;

916 
s
->
°r°¨t
 = 0;

917 
s
->
block_°¨t
 = 0L;

918 
s
->
lookahód
 = 0;

919 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

920 
s
->
m©ch_avaûabÀ
 = 0;

921 
s
->
ös_h
 = 0;

922 #ifde‡
ASMV


923 
	`m©ch_öô
();

925 
	}
}

935 #i‚de‡
ASMV


939 
loˇl
 
	$l⁄ge°_m©ch
(
s
, 
cur_m©ch
)

940 
deÊ©e_°©e
 *
s
;

941 
IPos
 
cur_m©ch
;

943 
chaö_Àngth
 = 
s
->
max_chaö_Àngth
;

944 
Byãf
 *
sˇn
 = 
s
->
wödow
 + s->
°r°¨t
;

945 
Byãf
 *
m©ch
;

946 
Àn
;

947 
be°_Àn
 = 
s
->
¥ev_Àngth
;

948 
IPos
 
limô
 = 
s
->
°r°¨t
 > (IPos)
	`MAX_DIST
(s) ?

949 
s
->
°r°¨t
 - (
IPos
)
	`MAX_DIST
(sË: 
NIL
;

953 
Posf
 *
¥ev
 = 
s
->prev;

954 
uI¡
 
wmask
 = 
s
->
w_mask
;

956 #ifde‡
UNALIGNED_OK


960 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
 - 1;

961 
ush
 
sˇn_°¨t
 = *(
ushf
*)
sˇn
;

962 
ush
 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

964 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
;

965 
Byã
 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

966 
Byã
 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

972 
	`As£π
(
s
->
hash_bôs
 >8 && 
MAX_MATCH
 == 258, "CodeÅoo clever");

975 i‡(
s
->
¥ev_Àngth
 >s->
good_m©ch
) {

976 
chaö_Àngth
 >>= 2;

978 
	`As£π
((
ulg
)
s
->
°r°¨t
 <s->
wödow_size
-
MIN_LOOKAHEAD
, "needÜookahead");

981 
	`As£π
(
cur_m©ch
 < 
s
->
°r°¨t
, "no future");

982 
m©ch
 = 
s
->
wödow
 + 
cur_m©ch
;

987 #i‡(
	`deföed
(
UNALIGNED_OK
Ë&& 
MAX_MATCH
 == 258)

991 i‡(*(
ushf
*)(
m©ch
+
be°_Àn
-1Ë!
sˇn_íd
 ||

992 *(
ushf
*)
m©ch
 !
sˇn_°¨t
) ;

1003 
	`As£π
(
sˇn
[2] =
m©ch
[2], "scan[2]?");

1004 
sˇn
++, 
m©ch
++;

1006 } *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1007 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1008 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1009 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1010 
sˇn
 < 
°ªnd
);

1014 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1015 i‡(*
sˇn
 =*
m©ch
) scan++;

1017 
Àn
 = (
MAX_MATCH
 - 1Ë- ()(
°ªnd
-
sˇn
);

1018 
sˇn
 = 
°ªnd
 - (
MAX_MATCH
-1);

1022 i‡(
m©ch
[
be°_Àn
] !
sˇn_íd
 ||

1023 
m©ch
[
be°_Àn
-1] !
sˇn_íd1
 ||

1024 *
m©ch
 !*
sˇn
 ||

1025 *++
m©ch
 !
sˇn
[1]) ;

1033 
sˇn
 +2, 
m©ch
++;

1034 
	`As£π
(*
sˇn
 =*
m©ch
, "match[2]?");

1040 } *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1041 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1042 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1043 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1044 
sˇn
 < 
°ªnd
);

1046 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1048 
Àn
 = 
MAX_MATCH
 - ()(
°ªnd
 - 
sˇn
);

1049 
sˇn
 = 
°ªnd
 - 
MAX_MATCH
;

1053 i‡(
Àn
 > 
be°_Àn
) {

1054 
s
->
m©ch_°¨t
 = 
cur_m©ch
;

1055 
be°_Àn
 = 
Àn
;

1056 i‡(
Àn
 >
s
->
ni˚_m©ch
) ;

1057 #ifde‡
UNALIGNED_OK


1058 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

1060 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

1061 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

1064 } (
cur_m©ch
 = 
¥ev
[cur_m©ch & 
wmask
]Ë> 
limô


1065 && --
chaö_Àngth
 != 0);

1067  
be°_Àn
;

1068 
	}
}

1071 #ifde‡
DEBUG_ZLIB


1075 
loˇl
 
	$check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

1076 
deÊ©e_°©e
 *
s
;

1077 
IPos
 
°¨t
, 
m©ch
;

1078 
Àngth
;

1081 i‡(
	`memcmp
((
ch¨f
 *)
s
->
wödow
 + 
m©ch
,

1082 (
ch¨f
 *)
s
->
wödow
 + 
°¨t
, 
Àngth
Ë!
EQUAL
) {

1083 
	`Ârötf
(
°dîr
,

1085 
°¨t
, 
m©ch
, 
Àngth
);

1086 dÿ{ 
	`Ârötf
(
°dîr
, "%c%c", 
s
->
wödow
[
m©ch
++],

1087 
s
->
wödow
[
°¨t
++]); } --
Àngth
 != 0);

1088 
	`z_îr‹
("invalid match");

1090 i‡(
vîbo£
 > 1) {

1091 
	`Ârötf
(
°dîr
,"\\[%d,%d]", 
°¨t
-
m©ch
, 
Àngth
);

1092 dÿ{ 
	`putc
(
s
->
wödow
[
°¨t
++], 
°dîr
); } --
Àngth
 != 0);

1094 
	}
}

1096 
	#check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

	)

1109 
loˇl
 
	$fûl_wödow
(
s
)

1110 
deÊ©e_°©e
 *
s
;

1112 
n
, 
m
;

1113 
Posf
 *
p
;

1114 
m‹e
;

1115 
uI¡
 
wsize
 = 
s
->
w_size
;

1118 
m‹e
 = ()(
s
->
wödow_size
 -(
ulg
)s->
lookahód
 -(ulg)s->
°r°¨t
);

1121 i‡(
m‹e
 =0 && 
s
->
°r°¨t
 =0 && s->
lookahód
 == 0) {

1122 
m‹e
 = 
wsize
;

1123 } i‡(
m‹e
 == ()(-1)) {

1127 
m‹e
--;

1132 } i‡(
s
->
°r°¨t
 >
wsize
+
	`MAX_DIST
(s)) {

1137 
	`zmem˝y
((
ch¨f
 *)
s
->
wödow
, (ch¨‡*)s->wödow+
wsize
,

1138 ()
wsize
);

1139 
s
->
m©ch_°¨t
 -
wsize
;

1140 
s
->
°r°¨t
 -
wsize
;

1142 
s
->
block_°¨t
 -(Ë
wsize
;

1147 
n
 = 
s
->
hash_size
;

1148 
p
 = &
s
->
hód
[
n
];

1150 
m
 = *--
p
;

1151 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1152 } --
n
);

1154 
n
 = 
wsize
;

1155 
p
 = &
s
->
¥ev
[
n
];

1157 
m
 = *--
p
;

1158 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1162 } --
n
);

1164 
m‹e
 +
wsize
;

1166 i‡(
s
->
°rm
->
avaû_ö
 == 0) ;

1179 
	`As£π
(
m‹e
 >= 2, "more < 2");

1181 
n
 = 
	`ªad_buf
(
s
->
°rm
, (
ch¨f
 *)s->
wödow
 + s->
°r°¨t
 + s->
lookahód
,

1182 
m‹e
);

1183 
s
->
lookahód
 +
n
;

1186 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1187 
s
->
ös_h
 = s->
wödow
[s->
°r°¨t
];

1188 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[s->
°r°¨t
+1]);

1189 #i‡
MIN_MATCH
 != 3

1190 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1197 } 
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && s->
°rm
->
avaû_ö
 != 0);

1198 
	}
}

1204 
	#FLUSH_BLOCK_ONLY
(
s
, 
Êush
) { \

1205 
	`˘_Êush_block
(
s
, (s->
block_°¨t
 >= 0L ? \

1206 (
ch¨f
 *)&
s
->
wödow
[()s->
block_°¨t
] : \

1207 (
ch¨f
 *)
Z_NULL
), ()
s
->
°r°¨t
 - s->
block_°¨t
, (
Êush
)); \

1208 
s
->
block_°¨t
 = s->
°r°¨t
; \

1209 
	`Êush_≥ndög
(
s
->
°rm
); \

1210 
	`Tø˚v
((
°dîr
,"[FLUSH]")); \

1211 }

	)

1214 
	#FLUSH_BLOCK
(
s
, 
Êush
) { \

1215 
	`FLUSH_BLOCK_ONLY
(
s
, 
Êush
); \

1216 i‡(
s
->
°rm
->
avaû_out
 == 0)  1; \

1217 }

	)

1226 
loˇl
 
	$deÊ©e_Á°
(
s
, 
Êush
)

1227 
deÊ©e_°©e
 *
s
;

1228 
Êush
;

1230 
IPos
 
hash_hód
 = 
NIL
;

1231 
bÊush
;

1233 
s
->
¥ev_Àngth
 = 
MIN_MATCH
-1;

1241 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1242 
	`fûl_wödow
(
s
);

1243 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
)  1;

1245 i‡(
s
->
lookahód
 == 0) ;

1251 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1252 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1258 i‡(
hash_hód
 !
NIL
 && 
s
->
°r°¨t
 - hash_hód <
	`MAX_DIST
(s)) {

1263 i‡(
s
->
°øãgy
 !
Z_HUFFMAN_ONLY
) {

1264 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1268 i‡(
s
->
m©ch_Àngth
 > s->
lookahód
) s->match_length = s->lookahead;

1270 i‡(
s
->
m©ch_Àngth
 >
MIN_MATCH
) {

1271 
	`check_m©ch
(
s
, s->
°r°¨t
, s->
m©ch_°¨t
, s->
m©ch_Àngth
);

1273 
bÊush
 = 
	`˘_èŒy
(
s
, s->
°r°¨t
 - s->
m©ch_°¨t
,

1274 
s
->
m©ch_Àngth
 - 
MIN_MATCH
);

1276 
s
->
lookahód
 -s->
m©ch_Àngth
;

1281 i‡(
s
->
m©ch_Àngth
 <s->
max_ö£π_Àngth
 &&

1282 
s
->
lookahód
 >
MIN_MATCH
) {

1283 
s
->
m©ch_Àngth
--;

1285 
s
->
°r°¨t
++;

1286 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1290 } --
s
->
m©ch_Àngth
 != 0);

1291 
s
->
°r°¨t
++;

1293 
s
->
°r°¨t
 +s->
m©ch_Àngth
;

1294 
s
->
m©ch_Àngth
 = 0;

1295 
s
->
ös_h
 = s->
wödow
[s->
°r°¨t
];

1296 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[s->
°r°¨t
+1]);

1297 #i‡
MIN_MATCH
 != 3

1298 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1306 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
]));

1307 
bÊush
 = 
	`˘_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
]);

1308 
s
->
lookahód
--;

1309 
s
->
°r°¨t
++;

1311 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 
Z_NO_FLUSH
);

1313 
	`FLUSH_BLOCK
(
s
, 
Êush
);

1315 
	}
}

1322 
loˇl
 
	$deÊ©e_¶ow
(
s
, 
Êush
)

1323 
deÊ©e_°©e
 *
s
;

1324 
Êush
;

1326 
IPos
 
hash_hód
 = 
NIL
;

1327 
bÊush
;

1336 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1337 
	`fûl_wödow
(
s
);

1338 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
)  1;

1340 i‡(
s
->
lookahód
 == 0) ;

1346 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1347 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1352 
s
->
¥ev_Àngth
 = s->
m©ch_Àngth
, s->
¥ev_m©ch
 = s->
m©ch_°¨t
;

1353 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1355 i‡(
hash_hód
 !
NIL
 && 
s
->
¥ev_Àngth
 < s->
max_œzy_m©ch
 &&

1356 
s
->
°r°¨t
 - 
hash_hód
 <
	`MAX_DIST
(s)) {

1361 i‡(
s
->
°øãgy
 !
Z_HUFFMAN_ONLY
) {

1362 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1365 i‡(
s
->
m©ch_Àngth
 > s->
lookahód
) s->match_length = s->lookahead;

1367 i‡(
s
->
m©ch_Àngth
 <5 && (s->
°øãgy
 =
Z_FILTERED
 ||

1368 (
s
->
m©ch_Àngth
 =
MIN_MATCH
 &&

1369 
s
->
°r°¨t
 - s->
m©ch_°¨t
 > 
TOO_FAR
))) {

1374 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1380 i‡(
s
->
¥ev_Àngth
 >
MIN_MATCH
 && s->
m©ch_Àngth
 <= s->prev_length) {

1381 
uI¡
 
max_ö£π
 = 
s
->
°r°¨t
 + s->
lookahód
 - 
MIN_MATCH
;

1384 
	`check_m©ch
(
s
, s->
°r°¨t
-1, s->
¥ev_m©ch
, s->
¥ev_Àngth
);

1386 
bÊush
 = 
	`˘_èŒy
(
s
, s->
°r°¨t
 -1 - s->
¥ev_m©ch
,

1387 
s
->
¥ev_Àngth
 - 
MIN_MATCH
);

1394 
s
->
lookahód
 -s->
¥ev_Àngth
-1;

1395 
s
->
¥ev_Àngth
 -= 2;

1397 i‡(++
s
->
°r°¨t
 <
max_ö£π
) {

1398 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1400 } --
s
->
¥ev_Àngth
 != 0);

1401 
s
->
m©ch_avaûabÀ
 = 0;

1402 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1403 
s
->
°r°¨t
++;

1405 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 
Z_NO_FLUSH
);

1407 } i‡(
s
->
m©ch_avaûabÀ
) {

1412 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1413 i‡(
	`˘_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
-1])) {

1414 
	`FLUSH_BLOCK_ONLY
(
s
, 
Z_NO_FLUSH
);

1416 
s
->
°r°¨t
++;

1417 
s
->
lookahód
--;

1418 i‡(
s
->
°rm
->
avaû_out
 == 0)  1;

1423 
s
->
m©ch_avaûabÀ
 = 1;

1424 
s
->
°r°¨t
++;

1425 
s
->
lookahód
--;

1428 
	`As£π
 (
Êush
 !
Z_NO_FLUSH
, "no flush?");

1429 i‡(
s
->
m©ch_avaûabÀ
) {

1430 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1431 
	`˘_èŒy
 (
s
, 0, s->
wödow
[s->
°r°¨t
-1]);

1432 
s
->
m©ch_avaûabÀ
 = 0;

1434 
	`FLUSH_BLOCK
(
s
, 
Êush
);

1436 
	}
}

1473 #ifde‡
DEBUG_ZLIB


1474 
	~<˘y≥.h
>

1481 
	#MAX_BL_BITS
 7

	)

1484 
	#END_BLOCK
 256

	)

1487 
	#REP_3_6
 16

	)

1490 
	#REPZ_3_10
 17

	)

1493 
	#REPZ_11_138
 18

	)

1496 
loˇl
 
	gexåa_lbôs
[
LENGTH_CODES
]

1499 
loˇl
 
	gexåa_dbôs
[
D_CODES
]

1502 
loˇl
 
	gexåa_blbôs
[
BL_CODES
]

1505 
loˇl
 
uch
 
	gbl_‹dî
[
BL_CODES
]

1511 
	#Buf_size
 (8 * 2*())

	)

1521 
loˇl
 
˘_d©a
 
	g°©ic_…ªe
[
L_CODES
+2];

1528 
loˇl
 
˘_d©a
 
	g°©ic_dåì
[
D_CODES
];

1533 
loˇl
 
uch
 
	gdi°_code
[512];

1539 
loˇl
 
uch
 
	gÀngth_code
[
MAX_MATCH
-
MIN_MATCH
+1];

1542 
loˇl
 
	gba£_Àngth
[
LENGTH_CODES
];

1545 
loˇl
 
	gba£_di°
[
D_CODES
];

1548 
	s°©ic_åì_desc_s
 {

1549 
˘_d©a
 *
	m°©ic_åì
;

1550 
ötf
 *
	mexåa_bôs
;

1551 
	mexåa_ba£
;

1552 
	mñems
;

1553 
	mmax_Àngth
;

1556 
loˇl
 
°©ic_åì_desc
 
	g°©ic_l_desc
 =

1557 {
°©ic_…ªe
, 
exåa_lbôs
, 
LITERALS
+1, 
L_CODES
, 
MAX_BITS
};

1559 
loˇl
 
°©ic_åì_desc
 
	g°©ic_d_desc
 =

1560 {
°©ic_dåì
, 
exåa_dbôs
, 0, 
D_CODES
, 
MAX_BITS
};

1562 
loˇl
 
°©ic_åì_desc
 
	g°©ic_bl_desc
 =

1563 {(
˘_d©a
 *)0, 
exåa_blbôs
, 0, 
BL_CODES
, 
MAX_BL_BITS
};

1569 
loˇl
 
˘_°©ic_öô
 
OF
(());

1570 
loˇl
 
öô_block
 
OF
((
deÊ©e_°©e
 *
s
));

1571 
loˇl
 
pqdownhóp
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
k
));

1572 
loˇl
 
gí_bôÀn
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

1573 
loˇl
 
gí_codes
 
OF
((
˘_d©a
 *
åì
, 
max_code
, 
ushf
 *
bl_cou¡
));

1574 
loˇl
 
buûd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

1575 
loˇl
 
sˇn_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

1576 
loˇl
 
£nd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

1577 
loˇl
 
buûd_bl_åì
 
OF
((
deÊ©e_°©e
 *
s
));

1578 
loˇl
 
£nd_Æl_åìs
 
OF
((
deÊ©e_°©e
 *
s
, 
lcodes
, 
dcodes
,

1579 
blcodes
));

1580 
loˇl
 
com¥ess_block
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
…ªe
,

1581 
˘_d©a
 *
dåì
));

1582 
loˇl
 
£t_d©a_ty≥
 
OF
((
deÊ©e_°©e
 *
s
));

1583 
loˇl
 
bi_ªvî£
 
OF
((
vÆue
, 
Àngth
));

1584 
loˇl
 
bi_wödup
 
OF
((
deÊ©e_°©e
 *
s
));

1585 
loˇl
 
bi_Êush
 
OF
((
deÊ©e_°©e
 *
s
));

1586 
loˇl
 
c›y_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, 
Àn
,

1587 
hódî
));

1589 #i‚de‡
DEBUG_ZLIB


1590 
	#£nd_code
(
s
, 
c
, 
åì
Ë
	`£nd_bôs
(s,Åªe[c].
Code
,Åªe[c].
Lí
)

	)

1594 
	#£nd_code
(
s
, 
c
, 
åì
) \

1595 { i‡(
vîbo£
>1Ë
	`Ârötf
(
°dîr
,"\ncd %3d ",(
c
)); \

1596 
	`£nd_bôs
(
s
, 
åì
[
c
].
Code
,Åªe[c].
Lí
); }

	)

1599 
	#d_code
(
di°
) \

1600 ((
di°
Ë< 256 ? 
di°_code
[di°] : di°_code[256+((di°)>>7)])

	)

1610 
	#put_sh‹t
(
s
, 
w
) { \

1611 
	`put_byã
(
s
, (
uch
)((
w
) & 0xff)); \

1612 
	`put_byã
(
s
, (
uch
)((
ush
)(
w
) >> 8)); \

1613 }

	)

1619 #ifde‡
DEBUG_ZLIB


1620 
loˇl
 
£nd_bôs
 
OF
((
deÊ©e_°©e
 *
s
, 
vÆue
, 
Àngth
));

1622 
loˇl
 
	$£nd_bôs
(
s
, 
vÆue
, 
Àngth
)

1623 
deÊ©e_°©e
 *
s
;

1624 
vÆue
;

1625 
Àngth
;

1627 
	`Tø˚v
((
°dîr
,"Ü %2d v %4x ", 
Àngth
, 
vÆue
));

1628 
	`As£π
(
Àngth
 > 0 &&Üength <= 15, "invalidÜength");

1629 
s
->
bôs_£¡
 +(
ulg
)
Àngth
;

1635 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àngth
) {

1636 
s
->
bi_buf
 |(
vÆue
 << s->
bi_vÆid
);

1637 
	`put_sh‹t
(
s
, s->
bi_buf
);

1638 
s
->
bi_buf
 = (
ush
)
vÆue
 >> (
Buf_size
 - s->
bi_vÆid
);

1639 
s
->
bi_vÆid
 +
Àngth
 - 
Buf_size
;

1641 
s
->
bi_buf
 |
vÆue
 << s->
bi_vÆid
;

1642 
s
->
bi_vÆid
 +
Àngth
;

1644 
	}
}

1647 
	#£nd_bôs
(
s
, 
vÆue
, 
Àngth
) \

1648 { 
Àn
 = 
Àngth
;\

1649 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àn
) {\

1650 
vÆ
 = 
vÆue
;\

1651 
s
->
bi_buf
 |(
vÆ
 << s->
bi_vÆid
);\

1652 
	`put_sh‹t
(
s
, s->
bi_buf
);\

1653 
s
->
bi_buf
 = (
ush
)
vÆ
 >> (
Buf_size
 - s->
bi_vÆid
);\

1654 
s
->
bi_vÆid
 +
Àn
 - 
Buf_size
;\

1656 
s
->
bi_buf
 |(
vÆue
Ë<< s->
bi_vÆid
;\

1657 
s
->
bi_vÆid
 +
Àn
;\

1659 }

	)

1663 
	#MAX
(
a
,
b
Ë◊ >b ?á : b)

	)

1670 
loˇl
 
	$˘_°©ic_öô
()

1672 
n
;

1673 
bôs
;

1674 
Àngth
;

1675 
code
;

1676 
di°
;

1677 
ush
 
bl_cou¡
[
MAX_BITS
+1];

1681 
Àngth
 = 0;

1682 
code
 = 0; codê< 
LENGTH_CODES
-1; code++) {

1683 
ba£_Àngth
[
code
] = 
Àngth
;

1684 
n
 = 0;Ç < (1<<
exåa_lbôs
[
code
]);Ç++) {

1685 
Àngth_code
[
Àngth
++] = (
uch
)
code
;

1688 
	`As£π
 (
Àngth
 == 256, "ct_static_init:Üength != 256");

1693 
Àngth_code
[
Àngth
-1] = (
uch
)
code
;

1696 
di°
 = 0;

1697 
code
 = 0 ; code < 16; code++) {

1698 
ba£_di°
[
code
] = 
di°
;

1699 
n
 = 0;Ç < (1<<
exåa_dbôs
[
code
]);Ç++) {

1700 
di°_code
[
di°
++] = (
uch
)
code
;

1703 
	`As£π
 (
di°
 == 256, "ct_static_init: dist != 256");

1704 
di°
 >>= 7;

1705  ; 
code
 < 
D_CODES
; code++) {

1706 
ba£_di°
[
code
] = 
di°
 << 7;

1707 
n
 = 0;Ç < (1<<(
exåa_dbôs
[
code
]-7));Ç++) {

1708 
di°_code
[256 + 
di°
++] = (
uch
)
code
;

1711 
	`As£π
 (
di°
 == 256, "ct_static_init: 256+dist != 512");

1714 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
bl_cou¡
[bits] = 0;

1715 
n
 = 0;

1716 
n
 <143Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

1717 
n
 <255Ë
°©ic_…ªe
[n++].
Lí
 = 9, 
bl_cou¡
[9]++;

1718 
n
 <279Ë
°©ic_…ªe
[n++].
Lí
 = 7, 
bl_cou¡
[7]++;

1719 
n
 <287Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

1724 
	`gí_codes
((
˘_d©a
 *)
°©ic_…ªe
, 
L_CODES
+1, 
bl_cou¡
);

1727 
n
 = 0;Ç < 
D_CODES
;Ç++) {

1728 
°©ic_dåì
[
n
].
Lí
 = 5;

1729 
°©ic_dåì
[
n
].
Code
 = 
	`bi_ªvî£
(n, 5);

1731 
	}
}

1736 
loˇl
 
	$˘_öô
(
s
)

1737 
deÊ©e_°©e
 *
s
;

1739 i‡(
°©ic_dåì
[0].
Lí
 == 0) {

1740 
	`˘_°©ic_öô
();

1743 
s
->
com¥es£d_Àn
 = 0L;

1745 
s
->
l_desc
.
dyn_åì
 = s->
dyn_…ªe
;

1746 
s
->
l_desc
.
°©_desc
 = &
°©ic_l_desc
;

1748 
s
->
d_desc
.
dyn_åì
 = s->
dyn_dåì
;

1749 
s
->
d_desc
.
°©_desc
 = &
°©ic_d_desc
;

1751 
s
->
bl_desc
.
dyn_åì
 = s->
bl_åì
;

1752 
s
->
bl_desc
.
°©_desc
 = &
°©ic_bl_desc
;

1754 
s
->
bi_buf
 = 0;

1755 
s
->
bi_vÆid
 = 0;

1756 
s
->
œ°_eob_Àn
 = 8;

1757 #ifde‡
DEBUG_ZLIB


1758 
s
->
bôs_£¡
 = 0L;

1760 
s
->
blocks_ö_∑ckë
 = 0;

1763 
	`öô_block
(
s
);

1764 
	}
}

1769 
loˇl
 
	$öô_block
(
s
)

1770 
deÊ©e_°©e
 *
s
;

1772 
n
;

1775 
n
 = 0;Ç < 
L_CODES
;Ç++Ë
s
->
dyn_…ªe
[n].
Fªq
 = 0;

1776 
n
 = 0;Ç < 
D_CODES
;Ç++Ë
s
->
dyn_dåì
[n].
Fªq
 = 0;

1777 
n
 = 0;Ç < 
BL_CODES
;Ç++Ë
s
->
bl_åì
[n].
Fªq
 = 0;

1779 
s
->
dyn_…ªe
[
END_BLOCK
].
Fªq
 = 1;

1780 
s
->
›t_Àn
 = s->
°©ic_Àn
 = 0L;

1781 
s
->
œ°_lô
 = s->
m©ches
 = 0;

1782 
	}
}

1784 
	#SMALLEST
 1

	)

1792 
	#pqªmove
(
s
, 
åì
, 
t›
) \

1794 
t›
 = 
s
->
hóp
[
SMALLEST
]; \

1795 
s
->
hóp
[
SMALLEST
] = s->hóp[s->
hóp_Àn
--]; \

1796 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
); \

1797 }

	)

1803 
	#smÆÀr
(
åì
, 
n
, 
m
, 
dïth
) \

1804 (
åì
[
n
].
Fªq
 <Åªe[
m
].Freq || \

1805 (
åì
[
n
].
Fªq
 =åì[
m
].Fªq && 
dïth
[n] <dïth[m]))

	)

1813 
loˇl
 
	$pqdownhóp
(
s
, 
åì
, 
k
)

1814 
deÊ©e_°©e
 *
s
;

1815 
˘_d©a
 *
åì
;

1816 
k
;

1818 
v
 = 
s
->
hóp
[
k
];

1819 
j
 = 
k
 << 1;

1820 
j
 <
s
->
hóp_Àn
) {

1822 i‡(
j
 < 
s
->
hóp_Àn
 &&

1823 
	`smÆÀr
(
åì
, 
s
->
hóp
[
j
+1], s->hóp[j], s->
dïth
)) {

1824 
j
++;

1827 i‡(
	`smÆÀr
(
åì
, 
v
, 
s
->
hóp
[
j
], s->
dïth
)) ;

1830 
s
->
hóp
[
k
] = s->hóp[
j
]; k = j;

1833 
j
 <<= 1;

1835 
s
->
hóp
[
k
] = 
v
;

1836 
	}
}

1848 
loˇl
 
	$gí_bôÀn
(
s
, 
desc
)

1849 
deÊ©e_°©e
 *
s
;

1850 
åì_desc
 *
desc
;

1852 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

1853 
max_code
 = 
desc
->max_code;

1854 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

1855 
ötf
 *
exåa
 = 
desc
->
°©_desc
->
exåa_bôs
;

1856 
ba£
 = 
desc
->
°©_desc
->
exåa_ba£
;

1857 
max_Àngth
 = 
desc
->
°©_desc
->max_length;

1858 
h
;

1859 
n
, 
m
;

1860 
bôs
;

1861 
xbôs
;

1862 
ush
 
f
;

1863 
ovîÊow
 = 0;

1865 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
s
->
bl_cou¡
[bits] = 0;

1870 
åì
[
s
->
hóp
[s->
hóp_max
]].
Lí
 = 0;

1872 
h
 = 
s
->
hóp_max
+1; h < 
HEAP_SIZE
; h++) {

1873 
n
 = 
s
->
hóp
[
h
];

1874 
bôs
 = 
åì
[åì[
n
].
Dad
].
Lí
 + 1;

1875 i‡(
bôs
 > 
max_Àngth
Ëbô†max_Àngth, 
ovîÊow
++;

1876 
åì
[
n
].
Lí
 = (
ush
)
bôs
;

1879 i‡(
n
 > 
max_code
) ;

1881 
s
->
bl_cou¡
[
bôs
]++;

1882 
xbôs
 = 0;

1883 i‡(
n
 >
ba£
Ë
xbôs
 = 
exåa
[n-base];

1884 
f
 = 
åì
[
n
].
Fªq
;

1885 
s
->
›t_Àn
 +(
ulg
)
f
 * (
bôs
 + 
xbôs
);

1886 i‡(
°ªe
Ë
s
->
°©ic_Àn
 +(
ulg
)
f
 * (°ªe[
n
].
Lí
 + 
xbôs
);

1888 i‡(
ovîÊow
 == 0) ;

1890 
	`Tø˚
((
°dîr
,"\nbitÜength overflow\n"));

1895 
bôs
 = 
max_Àngth
-1;

1896 
s
->
bl_cou¡
[
bôs
] == 0) bits--;

1897 
s
->
bl_cou¡
[
bôs
]--;

1898 
s
->
bl_cou¡
[
bôs
+1] += 2;

1899 
s
->
bl_cou¡
[
max_Àngth
]--;

1903 
ovîÊow
 -= 2;

1904 } 
ovîÊow
 > 0);

1911 
bôs
 = 
max_Àngth
; bits != 0; bits--) {

1912 
n
 = 
s
->
bl_cou¡
[
bôs
];

1913 
n
 != 0) {

1914 
m
 = 
s
->
hóp
[--
h
];

1915 i‡(
m
 > 
max_code
) ;

1916 i‡(
åì
[
m
].
Lí
 !(Ë
bôs
) {

1917 
	`Tø˚
((
°dîr
,"codê%d bô†%d->%d\n", 
m
, 
åì
[m].
Lí
, 
bôs
));

1918 
s
->
›t_Àn
 +(()
bôs
 - ()
åì
[
m
].
Lí
)

1919 *()
åì
[
m
].
Fªq
;

1920 
åì
[
m
].
Lí
 = (
ush
)
bôs
;

1922 
n
--;

1925 
	}
}

1935 
loˇl
 
	$gí_codes
 (
åì
, 
max_code
, 
bl_cou¡
)

1936 
˘_d©a
 *
åì
;

1937 
max_code
;

1938 
ushf
 *
bl_cou¡
;

1940 
ush
 
√xt_code
[
MAX_BITS
+1];

1941 
ush
 
code
 = 0;

1942 
bôs
;

1943 
n
;

1948 
bôs
 = 1; bô†<
MAX_BITS
; bits++) {

1949 
√xt_code
[
bôs
] = 
code
 = (codê+ 
bl_cou¡
[bits-1]) << 1;

1954 
	`As£π
 (
code
 + 
bl_cou¡
[
MAX_BITS
]-1 == (1<<MAX_BITS)-1,

1956 
	`Tø˚v
((
°dîr
,"\ngí_codes: max_codê%d ", 
max_code
));

1958 
n
 = 0;Ç <
max_code
;Ç++) {

1959 
Àn
 = 
åì
[
n
].
Lí
;

1960 i‡(
Àn
 == 0) ;

1962 
åì
[
n
].
Code
 = 
	`bi_ªvî£
(
√xt_code
[
Àn
]++,Üen);

1964 
	`Tø˚c
(
åì
 !
°©ic_…ªe
, (
°dîr
,"\nn %3d %cÜ %2d c %4x (%x) ",

1965 
n
, (
	`isgøph
“Ë?Ç : ' '), 
Àn
, 
åì
[n].
Code
, 
√xt_code
[len]-1));

1967 
	}
}

1977 
loˇl
 
	$buûd_åì
(
s
, 
desc
)

1978 
deÊ©e_°©e
 *
s
;

1979 
åì_desc
 *
desc
;

1981 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

1982 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

1983 
ñems
 = 
desc
->
°©_desc
->elems;

1984 
n
, 
m
;

1985 
max_code
 = -1;

1986 
node
;

1992 
s
->
hóp_Àn
 = 0, s->
hóp_max
 = 
HEAP_SIZE
;

1994 
n
 = 0;Ç < 
ñems
;Ç++) {

1995 i‡(
åì
[
n
].
Fªq
 != 0) {

1996 
s
->
hóp
[++(s->
hóp_Àn
)] = 
max_code
 = 
n
;

1997 
s
->
dïth
[
n
] = 0;

1999 
åì
[
n
].
Lí
 = 0;

2008 
s
->
hóp_Àn
 < 2) {

2009 
node
 = 
s
->
hóp
[++(s->
hóp_Àn
)] = (
max_code
 < 2 ? ++max_code : 0);

2010 
åì
[
node
].
Fªq
 = 1;

2011 
s
->
dïth
[
node
] = 0;

2012 
s
->
›t_Àn
--; i‡(
°ªe
Ës->
°©ic_Àn
 -°ªe[
node
].
Lí
;

2015 
desc
->
max_code
 = max_code;

2020 
n
 = 
s
->
hóp_Àn
/2;Ç >1;Ç--Ë
	`pqdownhóp
(s, 
åì
,Ç);

2025 
node
 = 
ñems
;

2027 
	`pqªmove
(
s
, 
åì
, 
n
);

2028 
m
 = 
s
->
hóp
[
SMALLEST
];

2030 
s
->
hóp
[--(s->
hóp_max
)] = 
n
;

2031 
s
->
hóp
[--(s->
hóp_max
)] = 
m
;

2034 
åì
[
node
].
Fªq
 =Åªe[
n
].Fªq +Åªe[
m
].Freq;

2035 
s
->
dïth
[
node
] = (
uch
Ë(
	`MAX
(s->dïth[
n
], s->dïth[
m
]) + 1);

2036 
åì
[
n
].
Dad
 =Åªe[
m
].Dad = (
ush
)
node
;

2037 #ifde‡
DUMP_BL_TREE


2038 i‡(
åì
 =
s
->
bl_åì
) {

2039 
	`Ârötf
(
°dîr
,"\nnode %d(%d), sons %d(%d) %d(%d)",

2040 
node
, 
åì
[node].
Fªq
, 
n
,Åªe[n].Fªq, 
m
,Åree[m].Freq);

2044 
s
->
hóp
[
SMALLEST
] = 
node
++;

2045 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
);

2047 } 
s
->
hóp_Àn
 >= 2);

2049 
s
->
hóp
[--(s->
hóp_max
)] = s->hóp[
SMALLEST
];

2054 
	`gí_bôÀn
(
s
, (
åì_desc
 *)
desc
);

2057 
	`gí_codes
 ((
˘_d©a
 *)
åì
, 
max_code
, 
s
->
bl_cou¡
);

2058 
	}
}

2064 
loˇl
 
	$sˇn_åì
 (
s
, 
åì
, 
max_code
)

2065 
deÊ©e_°©e
 *
s
;

2066 
˘_d©a
 *
åì
;

2067 
max_code
;

2069 
n
;

2070 
¥evÀn
 = -1;

2071 
cuæí
;

2072 
√xéí
 = 
åì
[0].
Lí
;

2073 
cou¡
 = 0;

2074 
max_cou¡
 = 7;

2075 
mö_cou¡
 = 4;

2077 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2078 
åì
[
max_code
+1].
Lí
 = (
ush
)0xffff;

2080 
n
 = 0;Ç <
max_code
;Ç++) {

2081 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

2082 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

2084 } i‡(
cou¡
 < 
mö_cou¡
) {

2085 
s
->
bl_åì
[
cuæí
].
Fªq
 +
cou¡
;

2086 } i‡(
cuæí
 != 0) {

2087 i‡(
cuæí
 !
¥evÀn
Ë
s
->
bl_åì
[cuæí].
Fªq
++;

2088 
s
->
bl_åì
[
REP_3_6
].
Fªq
++;

2089 } i‡(
cou¡
 <= 10) {

2090 
s
->
bl_åì
[
REPZ_3_10
].
Fªq
++;

2092 
s
->
bl_åì
[
REPZ_11_138
].
Fªq
++;

2094 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

2095 i‡(
√xéí
 == 0) {

2096 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2097 } i‡(
cuæí
 =
√xéí
) {

2098 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

2100 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

2103 
	}
}

2109 
loˇl
 
	$£nd_åì
 (
s
, 
åì
, 
max_code
)

2110 
deÊ©e_°©e
 *
s
;

2111 
˘_d©a
 *
åì
;

2112 
max_code
;

2114 
n
;

2115 
¥evÀn
 = -1;

2116 
cuæí
;

2117 
√xéí
 = 
åì
[0].
Lí
;

2118 
cou¡
 = 0;

2119 
max_cou¡
 = 7;

2120 
mö_cou¡
 = 4;

2123 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2125 
n
 = 0;Ç <
max_code
;Ç++) {

2126 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

2127 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

2129 } i‡(
cou¡
 < 
mö_cou¡
) {

2130 dÿ{ 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); } --
cou¡
 != 0);

2132 } i‡(
cuæí
 != 0) {

2133 i‡(
cuæí
 !
¥evÀn
) {

2134 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); 
cou¡
--;

2136 
	`As£π
(
cou¡
 >= 3 && count <= 6, " 3_6?");

2137 
	`£nd_code
(
s
, 
REP_3_6
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 2);

2139 } i‡(
cou¡
 <= 10) {

2140 
	`£nd_code
(
s
, 
REPZ_3_10
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 3);

2143 
	`£nd_code
(
s
, 
REPZ_11_138
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-11, 7);

2145 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

2146 i‡(
√xéí
 == 0) {

2147 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

2148 } i‡(
cuæí
 =
√xéí
) {

2149 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

2151 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

2154 
	}
}

2160 
loˇl
 
	$buûd_bl_åì
(
s
)

2161 
deÊ©e_°©e
 *
s
;

2163 
max_blödex
;

2166 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, s->
l_desc
.
max_code
);

2167 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, s->
d_desc
.
max_code
);

2170 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
bl_desc
)));

2179 
max_blödex
 = 
BL_CODES
-1; max_blindex >= 3; max_blindex--) {

2180 i‡(
s
->
bl_åì
[
bl_‹dî
[
max_blödex
]].
Lí
 != 0) ;

2183 
s
->
›t_Àn
 +3*(
max_blödex
+1) + 5+5+4;

2184 
	`Tø˚v
((
°dîr
, "\ndynÅrees: dyn %ld, stat %ld",

2185 
s
->
›t_Àn
, s->
°©ic_Àn
));

2187  
max_blödex
;

2188 
	}
}

2195 
loˇl
 
	$£nd_Æl_åìs
(
s
, 
lcodes
, 
dcodes
, 
blcodes
)

2196 
deÊ©e_°©e
 *
s
;

2197 
lcodes
, 
dcodes
, 
blcodes
;

2199 
ønk
;

2201 
	`As£π
 (
lcodes
 >257 && 
dcodes
 >1 && 
blcodes
 >= 4, "notÉnough codes");

2202 
	`As£π
 (
lcodes
 <
L_CODES
 && 
dcodes
 <
D_CODES
 && 
blcodes
 <
BL_CODES
,

2204 
	`Tø˚v
((
°dîr
, "\nbl counts: "));

2205 
	`£nd_bôs
(
s
, 
lcodes
-257, 5);

2206 
	`£nd_bôs
(
s
, 
dcodes
-1, 5);

2207 
	`£nd_bôs
(
s
, 
blcodes
-4, 4);

2208 
ønk
 = 0;Ñ™k < 
blcodes
;Ñank++) {

2209 
	`Tø˚v
((
°dîr
, "\nb»codê%2d ", 
bl_‹dî
[
ønk
]));

2210 
	`£nd_bôs
(
s
, s->
bl_åì
[
bl_‹dî
[
ønk
]].
Lí
, 3);

2212 
	`Tø˚v
((
°dîr
, "\nb»åì: síà%ld", 
s
->
bôs_£¡
));

2214 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, 
lcodes
-1);

2215 
	`Tø˚v
((
°dîr
, "\∆ôÅªe: síà%ld", 
s
->
bôs_£¡
));

2217 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, 
dcodes
-1);

2218 
	`Tø˚v
((
°dîr
, "\ndi°Åªe: síà%ld", 
s
->
bôs_£¡
));

2219 
	}
}

2224 
loˇl
 
	$˘_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
eof
)

2225 
deÊ©e_°©e
 *
s
;

2226 
ch¨f
 *
buf
;

2227 
ulg
 
°‹ed_Àn
;

2228 
eof
;

2230 
	`£nd_bôs
(
s
, (
STORED_BLOCK
<<1)+
eof
, 3);

2231 
s
->
com¥es£d_Àn
 = (s->compressed_len + 3 + 7) & ~7L;

2232 
s
->
com¥es£d_Àn
 +(
°‹ed_Àn
 + 4) << 3;

2234 
	`c›y_block
(
s
, 
buf
, ()
°‹ed_Àn
, 1);

2235 
	}
}

2239 
loˇl
 
	$˘_°‹ed_ty≥_⁄ly
(
s
)

2240 
deÊ©e_°©e
 *
s
;

2242 
	`£nd_bôs
(
s
, (
STORED_BLOCK
 << 1), 3);

2243 
	`bi_wödup
(
s
);

2244 
s
->
com¥es£d_Àn
 = (s->compressed_len + 3) & ~7L;

2245 
	}
}

2256 
loˇl
 
	$˘_Æign
(
s
)

2257 
deÊ©e_°©e
 *
s
;

2259 
	`£nd_bôs
(
s
, 
STATIC_TREES
<<1, 3);

2260 
	`£nd_code
(
s
, 
END_BLOCK
, 
°©ic_…ªe
);

2261 
s
->
com¥es£d_Àn
 += 10L;

2262 
	`bi_Êush
(
s
);

2267 i‡(
s
->
œ°_eob_Àn
 + 10 - s->
bi_vÆid
 < 9) {

2268 
	`£nd_bôs
(
s
, 
STATIC_TREES
<<1, 3);

2269 
	`£nd_code
(
s
, 
END_BLOCK
, 
°©ic_…ªe
);

2270 
s
->
com¥es£d_Àn
 += 10L;

2271 
	`bi_Êush
(
s
);

2273 
s
->
œ°_eob_Àn
 = 7;

2274 
	}
}

2281 
loˇl
 
ulg
 
	$˘_Êush_block
(
s
, 
buf
, 
°‹ed_Àn
, 
Êush
)

2282 
deÊ©e_°©e
 *
s
;

2283 
ch¨f
 *
buf
;

2284 
ulg
 
°‹ed_Àn
;

2285 
Êush
;

2287 
ulg
 
›t_Ànb
, 
°©ic_Ànb
;

2288 
max_blödex
;

2289 
eof
 = 
Êush
 =
Z_FINISH
;

2291 ++
s
->
blocks_ö_∑ckë
;

2294 i‡(
s
->
d©a_ty≥
 =
UNKNOWN
Ë
	`£t_d©a_ty≥
(s);

2297 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
l_desc
)));

2298 
	`Tø˚v
((
°dîr
, "\∆ô d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

2299 
s
->
°©ic_Àn
));

2301 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
d_desc
)));

2302 
	`Tø˚v
((
°dîr
, "\ndi° d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

2303 
s
->
°©ic_Àn
));

2311 
max_blödex
 = 
	`buûd_bl_åì
(
s
);

2314 
›t_Ànb
 = (
s
->
›t_Àn
+3+7)>>3;

2315 
°©ic_Ànb
 = (
s
->
°©ic_Àn
+3+7)>>3;

2317 
	`Tø˚v
((
°dîr
, "\nopt %lu(%lu) stat %lu(%lu) stored %luÜit %u ",

2318 
›t_Ànb
, 
s
->
›t_Àn
, 
°©ic_Ànb
, s->
°©ic_Àn
, 
°‹ed_Àn
,

2319 
s
->
œ°_lô
));

2321 i‡(
°©ic_Ànb
 <
›t_Ànb
) opt_lenb = static_lenb;

2327 #ifde‡
STORED_FILE_OK


2328 #ifde‡
FORCE_STORED_FILE


2329 i‡(
eof
 && 
com¥es£d_Àn
 == 0L)

2331 i‡(
°‹ed_Àn
 <
›t_Ànb
 && 
eof
 && 
s
->
com¥es£d_Àn
==0L && 
	`£ekabÀ
())

2335 i‡(
buf
 =(
ch¨f
*)0Ë
	`îr‹
 ("block vanished");

2337 
	`c›y_block
(
buf
, ()
°‹ed_Àn
, 0);

2338 
s
->
com¥es£d_Àn
 = 
°‹ed_Àn
 << 3;

2339 
s
->
mëhod
 = 
STORED
;

2348 i‡(
Êush
 =
Z_PACKET_FLUSH
 && 
s
->
blocks_ö_∑ckë
 == 1

2349 && 
›t_Ànb
 > 
°‹ed_Àn
 - 
s
->
möCom¥
) {

2350 
s
->
blocks_ö_∑ckë
 = 0;

2354 #ifde‡
FORCE_STORED


2355 i‡(
buf
 != (*)0)

2357 i‡(
°‹ed_Àn
+4 <
›t_Ànb
 && 
buf
 != (*)0)

2367 
	`˘_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
eof
);

2370 #ifde‡
FORCE_STATIC


2371 i‡(
°©ic_Ànb
 >= 0)

2373 i‡(
°©ic_Ànb
 =
›t_Ànb
)

2376 
	`£nd_bôs
(
s
, (
STATIC_TREES
<<1)+
eof
, 3);

2377 
	`com¥ess_block
(
s
, (
˘_d©a
 *)
°©ic_…ªe
, (˘_d©®*)
°©ic_dåì
);

2378 
s
->
com¥es£d_Àn
 +3 + s->
°©ic_Àn
;

2380 
	`£nd_bôs
(
s
, (
DYN_TREES
<<1)+
eof
, 3);

2381 
	`£nd_Æl_åìs
(
s
, s->
l_desc
.
max_code
+1, s->
d_desc
.max_code+1,

2382 
max_blödex
+1);

2383 
	`com¥ess_block
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, (˘_d©®*)s->
dyn_dåì
);

2384 
s
->
com¥es£d_Àn
 +3 + s->
›t_Àn
;

2386 
	`As£π
 (
s
->
com¥es£d_Àn
 =s->
bôs_£¡
, "bad compressed size");

2387 
	`öô_block
(
s
);

2389 i‡(
eof
) {

2390 
	`bi_wödup
(
s
);

2391 
s
->
com¥es£d_Àn
 += 7;

2393 
	`Tø˚v
((
°dîr
,"\ncom¥À¿%lu(%luË", 
s
->
com¥es£d_Àn
>>3,

2394 
s
->
com¥es£d_Àn
-7*
eof
));

2396  
s
->
com¥es£d_Àn
 >> 3;

2397 
	}
}

2403 
loˇl
 
	$˘_èŒy
 (
s
, 
di°
, 
lc
)

2404 
deÊ©e_°©e
 *
s
;

2405 
di°
;

2406 
lc
;

2408 
s
->
d_buf
[s->
œ°_lô
] = (
ush
)
di°
;

2409 
s
->
l_buf
[s->
œ°_lô
++] = (
uch
)
lc
;

2410 i‡(
di°
 == 0) {

2412 
s
->
dyn_…ªe
[
lc
].
Fªq
++;

2414 
s
->
m©ches
++;

2416 
di°
--;

2417 
	`As£π
((
ush
)
di°
 < (ush)
	`MAX_DIST
(
s
) &&

2418 (
ush
)
lc
 <(ush)(
MAX_MATCH
-
MIN_MATCH
) &&

2419 (
ush
)
	`d_code
(
di°
Ë< (ush)
D_CODES
, "ct_tally: bad match");

2421 
s
->
dyn_…ªe
[
Àngth_code
[
lc
]+
LITERALS
+1].
Fªq
++;

2422 
s
->
dyn_dåì
[
	`d_code
(
di°
)].
Fªq
++;

2426 i‡(
s
->
Àvñ
 > 2 && (s->
œ°_lô
 & 0xfff) == 0) {

2428 
ulg
 
out_Àngth
 = (ulg)
s
->
œ°_lô
*8L;

2429 
ulg
 
ö_Àngth
 = (ulg)
s
->
°r°¨t
 - s->
block_°¨t
;

2430 
dcode
;

2431 
dcode
 = 0; dcodê< 
D_CODES
; dcode++) {

2432 
out_Àngth
 +(
ulg
)
s
->
dyn_dåì
[
dcode
].
Fªq
 *

2433 (5L+
exåa_dbôs
[
dcode
]);

2435 
out_Àngth
 >>= 3;

2436 
	`Tø˚v
((
°dîr
,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",

2437 
s
->
œ°_lô
, 
ö_Àngth
, 
out_Àngth
,

2438 100L - 
out_Àngth
*100L/
ö_Àngth
));

2439 i‡(
s
->
m©ches
 < s->
œ°_lô
/2 && 
out_Àngth
 < 
ö_Àngth
/2)  1;

2441  (
s
->
œ°_lô
 =s->
lô_bufsize
-1);

2446 
	}
}

2451 
loˇl
 
	$com¥ess_block
(
s
, 
…ªe
, 
dåì
)

2452 
deÊ©e_°©e
 *
s
;

2453 
˘_d©a
 *
…ªe
;

2454 
˘_d©a
 *
dåì
;

2456 
di°
;

2457 
lc
;

2458 
lx
 = 0;

2459 
code
;

2460 
exåa
;

2462 i‡(
s
->
œ°_lô
 != 0) do {

2463 
di°
 = 
s
->
d_buf
[
lx
];

2464 
lc
 = 
s
->
l_buf
[
lx
++];

2465 i‡(
di°
 == 0) {

2466 
	`£nd_code
(
s
, 
lc
, 
…ªe
);

2467 
	`Tø˚cv
(
	`isgøph
(
lc
), (
°dîr
," '%c' ",Üc));

2470 
code
 = 
Àngth_code
[
lc
];

2471 
	`£nd_code
(
s
, 
code
+
LITERALS
+1, 
…ªe
);

2472 
exåa
 = 
exåa_lbôs
[
code
];

2473 i‡(
exåa
 != 0) {

2474 
lc
 -
ba£_Àngth
[
code
];

2475 
	`£nd_bôs
(
s
, 
lc
, 
exåa
);

2477 
di°
--;

2478 
code
 = 
	`d_code
(
di°
);

2479 
	`As£π
 (
code
 < 
D_CODES
, "bad d_code");

2481 
	`£nd_code
(
s
, 
code
, 
dåì
);

2482 
exåa
 = 
exåa_dbôs
[
code
];

2483 i‡(
exåa
 != 0) {

2484 
di°
 -
ba£_di°
[
code
];

2485 
	`£nd_bôs
(
s
, 
di°
, 
exåa
);

2490 
	`As£π
(
s
->
≥ndög
 < s->
lô_bufsize
 + 2*
lx
, "pendingBuf overflow");

2492 } 
lx
 < 
s
->
œ°_lô
);

2494 
	`£nd_code
(
s
, 
END_BLOCK
, 
…ªe
);

2495 
s
->
œ°_eob_Àn
 = 
…ªe
[
END_BLOCK
].
Lí
;

2496 
	}
}

2504 
loˇl
 
	$£t_d©a_ty≥
(
s
)

2505 
deÊ©e_°©e
 *
s
;

2507 
n
 = 0;

2508 
ascii_‰eq
 = 0;

2509 
bö_‰eq
 = 0;

2510 
n
 < 7Ë
bö_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2511 
n
 < 128Ë
ascii_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2512 
n
 < 
LITERALS
Ë
bö_‰eq
 +
s
->
dyn_…ªe
[n++].
Fªq
;

2513 
s
->
d©a_ty≥
 = (
Byã
)(
bö_‰eq
 > (
ascii_‰eq
 >> 2Ë? 
BINARY
 : 
ASCII
);

2514 
	}
}

2521 
loˇl
 
	$bi_ªvî£
(
code
, 
Àn
)

2522 
code
;

2523 
Àn
;

2525 
ªs
 = 0;

2527 
ªs
 |
code
 & 1;

2528 
code
 >>1, 
ªs
 <<= 1;

2529 } --
Àn
 > 0);

2530  
ªs
 >> 1;

2531 
	}
}

2536 
loˇl
 
	$bi_Êush
(
s
)

2537 
deÊ©e_°©e
 *
s
;

2539 i‡(
s
->
bi_vÆid
 == 16) {

2540 
	`put_sh‹t
(
s
, s->
bi_buf
);

2541 
s
->
bi_buf
 = 0;

2542 
s
->
bi_vÆid
 = 0;

2543 } i‡(
s
->
bi_vÆid
 >= 8) {

2544 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

2545 
s
->
bi_buf
 >>= 8;

2546 
s
->
bi_vÆid
 -= 8;

2548 
	}
}

2553 
loˇl
 
	$bi_wödup
(
s
)

2554 
deÊ©e_°©e
 *
s
;

2556 i‡(
s
->
bi_vÆid
 > 8) {

2557 
	`put_sh‹t
(
s
, s->
bi_buf
);

2558 } i‡(
s
->
bi_vÆid
 > 0) {

2559 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

2561 
s
->
bi_buf
 = 0;

2562 
s
->
bi_vÆid
 = 0;

2563 #ifde‡
DEBUG_ZLIB


2564 
s
->
bôs_£¡
 = (s->bits_sent+7) & ~7;

2566 
	}
}

2572 
loˇl
 
	$c›y_block
(
s
, 
buf
, 
Àn
, 
hódî
)

2573 
deÊ©e_°©e
 *
s
;

2574 
ch¨f
 *
buf
;

2575 
Àn
;

2576 
hódî
;

2578 
	`bi_wödup
(
s
);

2579 
s
->
œ°_eob_Àn
 = 8;

2581 i‡(
hódî
) {

2582 
	`put_sh‹t
(
s
, (
ush
)
Àn
);

2583 
	`put_sh‹t
(
s
, (
ush
)~
Àn
);

2584 #ifde‡
DEBUG_ZLIB


2585 
s
->
bôs_£¡
 += 2*16;

2588 #ifde‡
DEBUG_ZLIB


2589 
s
->
bôs_£¡
 +(
ulg
)
Àn
<<3;

2591 
Àn
--) {

2592 
	`put_byã
(
s
, *
buf
++);

2594 
	}
}

2608 
	göÊ©e_blocks_°©e
;

2609 
öÊ©e_blocks_°©e
 
	tFAR
 
	töÊ©e_blocks_°©ef
;

2611 
loˇl
 
öÊ©e_blocks_°©ef
 * 
öÊ©e_blocks_√w
 
OF
((

2612 
z_°ªam
 *
z
,

2613 
check_func
 
c
,

2614 
uI¡
 
w
));

2616 
loˇl
 
öÊ©e_blocks
 
OF
((

2617 
öÊ©e_blocks_°©ef
 *,

2618 
z_°ªam
 *,

2621 
loˇl
 
öÊ©e_blocks_ª£t
 
OF
((

2622 
öÊ©e_blocks_°©ef
 *,

2623 
z_°ªam
 *,

2624 
uL⁄gf
 *));

2626 
loˇl
 
öÊ©e_blocks_‰ì
 
OF
((

2627 
öÊ©e_blocks_°©ef
 *,

2628 
z_°ªam
 *,

2629 
uL⁄gf
 *));

2631 
loˇl
 
öÊ©e_addhi°‹y
 
OF
((

2632 
öÊ©e_blocks_°©ef
 *,

2633 
z_°ªam
 *));

2635 
loˇl
 
öÊ©e_∑ckë_Êush
 
OF
((

2636 
öÊ©e_blocks_°©ef
 *));

2652 
öÊ©e_hu·_s
 
	tFAR
 
	töÊ©e_hu·
;

2654 
	söÊ©e_hu·_s
 {

2657 
Byã
 
	mEx›
;

2658 
Byã
 
	mBôs
;

2659 } 
	mwh©
;

2660 
uI¡
 
	mNÆloc
;

2661 
Byãf
 *
	m∑d
;

2662 } 
	mw‹d
;

2664 
uI¡
 
	mBa£
;

2665 
öÊ©e_hu·
 *
	mNext
;

2666 } 
	mm‹e
;

2669 #ifde‡
DEBUG_ZLIB


2670 
loˇl
 
uI¡
 
	göÊ©e_hu·s
;

2673 
loˇl
 
öÊ©e_åìs_bôs
 
OF
((

2674 
uI¡f
 *,

2675 
uI¡f
 *,

2676 
öÊ©e_hu·
 * 
FAR
 *,

2677 
z_°ªam
 *));

2679 
loˇl
 
öÊ©e_åìs_dy«mic
 
OF
((

2680 
uI¡
,

2681 
uI¡
,

2682 
uI¡f
 *,

2683 
uI¡f
 *,

2684 
uI¡f
 *,

2685 
öÊ©e_hu·
 * 
FAR
 *,

2686 
öÊ©e_hu·
 * 
FAR
 *,

2687 
z_°ªam
 *));

2689 
loˇl
 
öÊ©e_åìs_fixed
 
OF
((

2690 
uI¡f
 *,

2691 
uI¡f
 *,

2692 
öÊ©e_hu·
 * 
FAR
 *,

2693 
öÊ©e_hu·
 * 
FAR
 *));

2695 
loˇl
 
öÊ©e_åìs_‰ì
 
OF
((

2696 
öÊ©e_hu·
 *,

2697 
z_°ªam
 *));

2711 
	göÊ©e_codes_°©e
;

2712 
öÊ©e_codes_°©e
 
	tFAR
 
	töÊ©e_codes_°©ef
;

2714 
loˇl
 
öÊ©e_codes_°©ef
 *
öÊ©e_codes_√w
 
OF
((

2715 
uI¡
, uInt,

2716 
öÊ©e_hu·
 *, inflate_huft *,

2717 
z_°ªam
 *));

2719 
loˇl
 
öÊ©e_codes
 
OF
((

2720 
öÊ©e_blocks_°©ef
 *,

2721 
z_°ªam
 *,

2724 
loˇl
 
öÊ©e_codes_‰ì
 
OF
((

2725 
öÊ©e_codes_°©ef
 *,

2726 
z_°ªam
 *));

2736 
	söã∫Æ_°©e
 {

2740 
	mMETHOD
,

2741 
	mFLAG
,

2742 
	mBLOCKS
,

2743 
	mCHECK4
,

2744 
	mCHECK3
,

2745 
	mCHECK2
,

2746 
	mCHECK1
,

2747 
	mDONE
,

2748 
	mBAD
}

2749 
	mmode
;

2753 
uI¡
 
	mmëhod
;

2755 
uL⁄g
 
	mwas
;

2756 
uL⁄g
 
	m√ed
;

2757 } 
	mcheck
;

2758 
uI¡
 
	mm¨kî
;

2759 } 
	msub
;

2762 
	mnowøp
;

2763 
uI¡
 
	mwbôs
;

2764 
öÊ©e_blocks_°©ef


2765 *
	mblocks
;

2770 
	$öÊ©eRe£t
(
z
)

2771 
z_°ªam
 *
z
;

2773 
uL⁄g
 
c
;

2775 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

2776  
Z_STREAM_ERROR
;

2777 
z
->
tŸÆ_ö
 = z->
tŸÆ_out
 = 0;

2778 
z
->
msg
 = 
Z_NULL
;

2779 
z
->
°©e
->
mode
 = z->°©e->
nowøp
 ? 
BLOCKS
 : 
METHOD
;

2780 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &
c
);

2781 
	`Tø˚
((
°dîr
, "inflate:Ñeset\n"));

2782  
Z_OK
;

2783 
	}
}

2786 
	$öÊ©eEnd
(
z
)

2787 
z_°ªam
 *
z
;

2789 
uL⁄g
 
c
;

2791 i‡(
z
 =
Z_NULL
 || z->
°©e
 =Z_NULL || z->
z‰ì
 == Z_NULL)

2792  
Z_STREAM_ERROR
;

2793 i‡(
z
->
°©e
->
blocks
 !
Z_NULL
)

2794 
	`öÊ©e_blocks_‰ì
(
z
->
°©e
->
blocks
, z, &
c
);

2795 
	`ZFREE
(
z
, z->
°©e
, (
öã∫Æ_°©e
));

2796 
z
->
°©e
 = 
Z_NULL
;

2797 
	`Tø˚
((
°dîr
, "inflate:Énd\n"));

2798  
Z_OK
;

2799 
	}
}

2802 
	$öÊ©eInô2
(
z
, 
w
)

2803 
z_°ªam
 *
z
;

2804 
w
;

2807 i‡(
z
 =
Z_NULL
)

2808  
Z_STREAM_ERROR
;

2811 i‡((
z
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)

2812 
	`ZALLOC
(
z
,1,(
öã∫Æ_°©e
))Ë=
Z_NULL
)

2813  
Z_MEM_ERROR
;

2814 
z
->
°©e
->
blocks
 = 
Z_NULL
;

2817 
z
->
°©e
->
nowøp
 = 0;

2818 i‡(
w
 < 0)

2820 
w
 = - w;

2821 
z
->
°©e
->
nowøp
 = 1;

2825 i‡(
w
 < 8 || w > 15)

2827 
	`öÊ©eEnd
(
z
);

2828  
Z_STREAM_ERROR
;

2830 
z
->
°©e
->
wbôs
 = (
uI¡
)
w
;

2833 i‡((
z
->
°©e
->
blocks
 =

2834 
	`öÊ©e_blocks_√w
(
z
, z->
°©e
->
nowøp
 ? 
Z_NULL
 : 
adÀr32
, 1 << 
w
))

2835 =
Z_NULL
)

2837 
	`öÊ©eEnd
(
z
);

2838  
Z_MEM_ERROR
;

2840 
	`Tø˚
((
°dîr
, "inflate:állocated\n"));

2843 
	`öÊ©eRe£t
(
z
);

2844  
Z_OK
;

2845 
	}
}

2848 
	$öÊ©eInô
(
z
)

2849 
z_°ªam
 *
z
;

2851  
	`öÊ©eInô2
(
z
, 
DEF_WBITS
);

2852 
	}
}

2855 
	#NEEDBYTE
 {if(
z
->
avaû_ö
==0)
em±y
;
r
=
Z_OK
;}

	)

2856 
	#NEXTBYTE
 (
z
->
avaû_ö
--,z->
tŸÆ_ö
++,*z->
√xt_ö
++)

	)

2858 
	$öÊ©e
(
z
, 
f
)

2859 
z_°ªam
 *
z
;

2860 
f
;

2862 
r
;

2863 
uI¡
 
b
;

2865 i‡(
z
 =
Z_NULL
 || z->
√xt_ö
 == Z_NULL)

2866  
Z_STREAM_ERROR
;

2867 
r
 = 
Z_BUF_ERROR
;

2868 1Ë
z
->
°©e
->
mode
)

2870 
METHOD
:

2871 
NEEDBYTE


2872 i‡(((
z
->
°©e
->
sub
.
mëhod
 = 
NEXTBYTE
Ë& 0xfË!
DEFLATED
)

2874 
z
->
°©e
->
mode
 = 
BAD
;

2875 
z
->
msg
 = "unknown compression method";

2876 
z
->
°©e
->
sub
.
m¨kî
 = 5;

2879 i‡((
z
->
°©e
->
sub
.
mëhod
 >> 4Ë+ 8 > z->°©e->
wbôs
)

2881 
z
->
°©e
->
mode
 = 
BAD
;

2882 
z
->
msg
 = "invalid window size";

2883 
z
->
°©e
->
sub
.
m¨kî
 = 5;

2886 
z
->
°©e
->
mode
 = 
FLAG
;

2887 
FLAG
:

2888 
NEEDBYTE


2889 i‡((
b
 = 
NEXTBYTE
) & 0x20)

2891 
z
->
°©e
->
mode
 = 
BAD
;

2892 
z
->
msg
 = "invalidÑeserved bit";

2893 
z
->
°©e
->
sub
.
m¨kî
 = 5;

2896 i‡(((
z
->
°©e
->
sub
.
mëhod
 << 8Ë+ 
b
) % 31)

2898 
z
->
°©e
->
mode
 = 
BAD
;

2899 
z
->
msg
 = "incorrect header check";

2900 
z
->
°©e
->
sub
.
m¨kî
 = 5;

2903 
	`Tø˚
((
°dîr
, "inflate: zlib header ok\n"));

2904 
z
->
°©e
->
mode
 = 
BLOCKS
;

2905 
BLOCKS
:

2906 
r
 = 
	`öÊ©e_blocks
(
z
->
°©e
->
blocks
, z,Ñ);

2907 i‡(
f
 =
Z_PACKET_FLUSH
 && 
z
->
avaû_ö
 =0 && z->
avaû_out
 != 0)

2908 
r
 = 
	`öÊ©e_∑ckë_Êush
(
z
->
°©e
->
blocks
);

2909 i‡(
r
 =
Z_DATA_ERROR
)

2911 
z
->
°©e
->
mode
 = 
BAD
;

2912 
z
->
°©e
->
sub
.
m¨kî
 = 0;

2915 i‡(
r
 !
Z_STREAM_END
)

2916  
r
;

2917 
r
 = 
Z_OK
;

2918 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &z->°©e->
sub
.
check
.
was
);

2919 i‡(
z
->
°©e
->
nowøp
)

2921 
z
->
°©e
->
mode
 = 
DONE
;

2924 
z
->
°©e
->
mode
 = 
CHECK4
;

2925 
CHECK4
:

2926 
NEEDBYTE


2927 
z
->
°©e
->
sub
.
check
.
√ed
 = (
uL⁄g
)
NEXTBYTE
 << 24;

2928 
z
->
°©e
->
mode
 = 
CHECK3
;

2929 
CHECK3
:

2930 
NEEDBYTE


2931 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 16;

2932 
z
->
°©e
->
mode
 = 
CHECK2
;

2933 
CHECK2
:

2934 
NEEDBYTE


2935 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 8;

2936 
z
->
°©e
->
mode
 = 
CHECK1
;

2937 
CHECK1
:

2938 
NEEDBYTE


2939 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
;

2941 i‡(
z
->
°©e
->
sub
.
check
.
was
 !z->°©e->sub.check.
√ed
)

2943 
z
->
°©e
->
mode
 = 
BAD
;

2944 
z
->
msg
 = "incorrect data check";

2945 
z
->
°©e
->
sub
.
m¨kî
 = 5;

2948 
	`Tø˚
((
°dîr
, "inflate: zlib check ok\n"));

2949 
z
->
°©e
->
mode
 = 
DONE
;

2950 
DONE
:

2951  
Z_STREAM_END
;

2952 
BAD
:

2953  
Z_DATA_ERROR
;

2955  
Z_STREAM_ERROR
;

2958 
em±y
:

2959 i‡(
f
 !
Z_PACKET_FLUSH
)

2960  
r
;

2961 
z
->
°©e
->
mode
 = 
BAD
;

2962 
z
->
°©e
->
sub
.
m¨kî
 = 0;

2963  
Z_DATA_ERROR
;

2964 
	}
}

2975 
	$öÊ©eIncomp
(
z
)

2976 
z_°ªam
 *
z
;

2978 i‡(
z
->
°©e
->
mode
 !
BLOCKS
)

2979  
Z_DATA_ERROR
;

2980  
	`öÊ©e_addhi°‹y
(
z
->
°©e
->
blocks
, z);

2981 
	}
}

2984 
	$öÊ©eSync
(
z
)

2985 
z_°ªam
 *
z
;

2987 
uI¡
 
n
;

2988 
Byãf
 *
p
;

2989 
uI¡
 
m
;

2990 
uL⁄g
 
r
, 
w
;

2993 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

2994  
Z_STREAM_ERROR
;

2995 i‡(
z
->
°©e
->
mode
 !
BAD
)

2997 
z
->
°©e
->
mode
 = 
BAD
;

2998 
z
->
°©e
->
sub
.
m¨kî
 = 0;

3000 i‡((
n
 = 
z
->
avaû_ö
) == 0)

3001  
Z_BUF_ERROR
;

3002 
p
 = 
z
->
√xt_ö
;

3003 
m
 = 
z
->
°©e
->
sub
.
m¨kî
;

3006 
n
 && 
m
 < 4)

3008 i‡(*
p
 =(
Byã
)(
m
 < 2 ? 0 : 0xff))

3009 
m
++;

3010 i‡(*
p
)

3011 
m
 = 0;

3013 
m
 = 4 - m;

3014 
p
++, 
n
--;

3018 
z
->
tŸÆ_ö
 +
p
 - z->
√xt_ö
;

3019 
z
->
√xt_ö
 = 
p
;

3020 
z
->
avaû_ö
 = 
n
;

3021 
z
->
°©e
->
sub
.
m¨kî
 = 
m
;

3024 i‡(
m
 != 4)

3025  
Z_DATA_ERROR
;

3026 
r
 = 
z
->
tŸÆ_ö
; 
w
 = z->
tŸÆ_out
;

3027 
	`öÊ©eRe£t
(
z
);

3028 
z
->
tŸÆ_ö
 = 
r
; z->
tŸÆ_out
 = 
w
;

3029 
z
->
°©e
->
mode
 = 
BLOCKS
;

3030  
Z_OK
;

3031 
	}
}

3033 #unde‡
NEEDBYTE


3034 #unde‡
NEXTBYTE


3048 
	söÊ©e_blocks_°©e
 {

3052 
	mTYPE
,

3053 
	mLENS
,

3054 
	mSTORED
,

3055 
	mTABLE
,

3056 
	mBTREE
,

3057 
	mDTREE
,

3058 
	mCODES
,

3059 
	mDRY
,

3060 
	mDONEB
,

3061 
	mBADB
}

3062 
	mmode
;

3066 
uI¡
 
	mÀ·
;

3068 
uI¡
 
	mèbÀ
;

3069 
uI¡
 
	mödex
;

3070 
uI¡f
 *
	mbÀns
;

3071 
uI¡
 
	mbb
;

3072 
öÊ©e_hu·
 *
	mtb
;

3073 
	mnbÀns
;

3074 } 
	måìs
;

3076 
öÊ©e_hu·
 *
	mé
, *
	mtd
;

3077 
öÊ©e_codes_°©ef


3078 *
	mcodes
;

3079 } 
	mdecode
;

3080 } 
	msub
;

3081 
uI¡
 
	mœ°
;

3084 
uI¡
 
	mbôk
;

3085 
uL⁄g
 
	mbôb
;

3086 
Byãf
 *
	mwödow
;

3087 
Byãf
 *
	míd
;

3088 
Byãf
 *
	mªad
;

3089 
Byãf
 *
	mwrôe
;

3090 
check_func
 
	mcheck‚
;

3091 
uL⁄g
 
	mcheck
;

3098 
	#UPDBITS
 {
s
->
bôb
=
b
;s->
bôk
=
k
;}

	)

3099 
	#UPDIN
 {
z
->
avaû_ö
=
n
;z->
tŸÆ_ö
+=
p
-z->
√xt_ö
;z->√xt_öı;}

	)

3100 
	#UPDOUT
 {
s
->
wrôe
=
q
;}

	)

3101 
	#UPDATE
 {
UPDBITS
 
UPDIN
 
UPDOUT
}

	)

3102 
	#LEAVE
 {
UPDATE
  
	`öÊ©e_Êush
(
s
,
z
,
r
);}

	)

3104 
	#LOADIN
 {
p
=
z
->
√xt_ö
;
n
=z->
avaû_ö
;
b
=
s
->
bôb
;
k
=s->
bôk
;}

	)

3105 
	#NEEDBYTE
 {if(
n
)
r
=
Z_OK
;
LEAVE
}

	)

3106 
	#NEXTBYTE
 (
n
--,*
p
++)

	)

3107 
	#NEEDBITS
(
j
Ë{
k
<(j)){
NEEDBYTE
;
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

3108 
	#DUMPBITS
(
j
Ë{
b
>>=(j);
k
-=(j);}

	)

3110 
	#WAVAIL
 (
q
<
s
->
ªad
?s->ªad-q-1:s->
íd
-q)

	)

3111 
	#LOADOUT
 {
q
=
s
->
wrôe
;
m
=
WAVAIL
;}

	)

3112 
	#WRAP
 {if(
q
==
s
->
íd
&&s->
ªad
!=s->
wödow
){q=s->wödow;
m
=
WAVAIL
;}}

	)

3113 
	#FLUSH
 {
UPDOUT
 
r
=
	`öÊ©e_Êush
(
s
,
z
,r); 
LOADOUT
}

	)

3114 
	#NEEDOUT
 {if(
m
==0){
WRAP
 if(m==0){
FLUSH
 WRAP if(m==0Ë
LEAVE
}}
r
=
Z_OK
;}

	)

3115 
	#OUTBYTE
(
a
Ë{*
q
++=(
Byã
)◊);
m
--;}

	)

3117 
	#LOAD
 {
LOADIN
 
LOADOUT
}

	)

3120 
loˇl
 
uI¡
 
	göÊ©e_mask
[] = {

3127 
loˇl
 
öÊ©e_Êush
 
OF
((

3128 
öÊ©e_blocks_°©ef
 *,

3129 
z_°ªam
 *,

3143 
loˇl
 
öÊ©e_Á°
 
OF
((

3144 
uI¡
,

3145 
uI¡
,

3146 
öÊ©e_hu·
 *,

3147 
öÊ©e_hu·
 *,

3148 
öÊ©e_blocks_°©ef
 *,

3149 
z_°ªam
 *));

3159 
loˇl
 
uI¡
 
	gb‹dî
[] = {

3208 
loˇl
 
	$öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
)

3209 
öÊ©e_blocks_°©ef
 *
s
;

3210 
z_°ªam
 *
z
;

3211 
uL⁄gf
 *
c
;

3213 i‡(
s
->
check‚
 !
Z_NULL
)

3214 *
c
 = 
s
->
check
;

3215 i‡(
s
->
mode
 =
BTREE
 || s->modê=
DTREE
)

3216 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
, s->sub.åìs.
nbÀns
 * (
uI¡
));

3217 i‡(
s
->
mode
 =
CODES
)

3219 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

3220 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

3221 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

3223 
s
->
mode
 = 
TYPE
;

3224 
s
->
bôk
 = 0;

3225 
s
->
bôb
 = 0;

3226 
s
->
ªad
 = s->
wrôe
 = s->
wödow
;

3227 i‡(
s
->
check‚
 !
Z_NULL
)

3228 
s
->
check
 = (*s->
check‚
)(0L, 
Z_NULL
, 0);

3229 
	`Tø˚
((
°dîr
, "inflate: blocksÑeset\n"));

3230 
	}
}

3233 
loˇl
 
öÊ©e_blocks_°©ef
 *
	$öÊ©e_blocks_√w
(
z
, 
c
, 
w
)

3234 
z_°ªam
 *
z
;

3235 
check_func
 
c
;

3236 
uI¡
 
w
;

3238 
öÊ©e_blocks_°©ef
 *
s
;

3240 i‡((
s
 = (
öÊ©e_blocks_°©ef
 *)
ZALLOC


3241 (
z
,1,(
öÊ©e_blocks_°©e
))Ë=
Z_NULL
)

3242  
s
;

3243 i‡((
s
->
wödow
 = (
Byãf
 *)
	`ZALLOC
(
z
, 1, 
w
)Ë=
Z_NULL
)

3245 
	`ZFREE
(
z
, 
s
, (
öÊ©e_blocks_°©e
));

3246  
Z_NULL
;

3248 
s
->
íd
 = s->
wödow
 + 
w
;

3249 
s
->
check‚
 = 
c
;

3250 
s
->
mode
 = 
TYPE
;

3251 
	`Tø˚
((
°dîr
, "inflate: blocksállocated\n"));

3252 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, &s->
check
);

3253  
s
;

3254 
	}
}

3257 
loˇl
 
	$öÊ©e_blocks
(
s
, 
z
, 
r
)

3258 
öÊ©e_blocks_°©ef
 *
s
;

3259 
z_°ªam
 *
z
;

3260 
r
;

3262 
uI¡
 
t
;

3263 
uL⁄g
 
b
;

3264 
uI¡
 
k
;

3265 
Byãf
 *
p
;

3266 
uI¡
 
n
;

3267 
Byãf
 *
q
;

3268 
uI¡
 
m
;

3271 
LOAD


3274 1Ë
s
->
mode
)

3276 
TYPE
:

3277 
	`NEEDBITS
(3)

3278 
t
 = (
uI¡
)
b
 & 7;

3279 
s
->
œ°
 = 
t
 & 1;

3280 
t
 >> 1)

3283 
	`Tø˚
((
°dîr
, "inflate: stored block%s\n",

3284 
s
->
œ°
 ? " (last)" : ""));

3285 
	`DUMPBITS
(3)

3286 
t
 = 
k
 & 7;

3287 
	`DUMPBITS
(
t
)

3288 
s
->
mode
 = 
LENS
;

3291 
	`Tø˚
((
°dîr
, "inflate: fixed codes block%s\n",

3292 
s
->
œ°
 ? " (last)" : ""));

3294 
uI¡
 
bl
, 
bd
;

3295 
öÊ©e_hu·
 *
é
, *
td
;

3297 
	`öÊ©e_åìs_fixed
(&
bl
, &
bd
, &
é
, &
td
);

3298 
s
->
sub
.
decode
.
codes
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
);

3299 i‡(
s
->
sub
.
decode
.
codes
 =
Z_NULL
)

3301 
r
 = 
Z_MEM_ERROR
;

3302 
LEAVE


3304 
s
->
sub
.
decode
.
é
 = 
Z_NULL
;

3305 
s
->
sub
.
decode
.
td
 = 
Z_NULL
;

3307 
	`DUMPBITS
(3)

3308 
s
->
mode
 = 
CODES
;

3311 
	`Tø˚
((
°dîr
, "inflate: dynamic codes block%s\n",

3312 
s
->
œ°
 ? " (last)" : ""));

3313 
	`DUMPBITS
(3)

3314 
s
->
mode
 = 
TABLE
;

3317 
	`DUMPBITS
(3)

3318 
s
->
mode
 = 
BADB
;

3319 
z
->
msg
 = "invalid blockÅype";

3320 
r
 = 
Z_DATA_ERROR
;

3321 
LEAVE


3324 
LENS
:

3325 
	`NEEDBITS
(32)

3326 i‡(((~
b
) >> 16) != (b & 0xffff))

3328 
s
->
mode
 = 
BADB
;

3329 
z
->
msg
 = "invalid stored blockÜengths";

3330 
r
 = 
Z_DATA_ERROR
;

3331 
LEAVE


3333 
s
->
sub
.
À·
 = (
uI¡
)
b
 & 0xffff;

3334 
b
 = 
k
 = 0;

3335 
	`Tø˚v
((
°dîr
, "öÊ©e: st‹edÜígth %u\n", 
s
->
sub
.
À·
));

3336 
s
->
mode
 = s->
sub
.
À·
 ? 
STORED
 : 
TYPE
;

3338 
STORED
:

3339 i‡(
n
 == 0)

3340 
LEAVE


3341 
NEEDOUT


3342 
t
 = 
s
->
sub
.
À·
;

3343 i‡(
t
 > 
n
)Å =Ç;

3344 i‡(
t
 > 
m
)Å = m;

3345 
	`zmem˝y
(
q
, 
p
, 
t
);

3346 
p
 +
t
; 
n
 -=Å;

3347 
q
 +
t
; 
m
 -=Å;

3348 i‡((
s
->
sub
.
À·
 -
t
) != 0)

3350 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd, %luÅotal out\n",

3351 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

3352 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

3353 
s
->
mode
 = s->
œ°
 ? 
DRY
 : 
TYPE
;

3355 
TABLE
:

3356 
	`NEEDBITS
(14)

3357 
s
->
sub
.
åìs
.
èbÀ
 = 
t
 = (
uI¡
)
b
 & 0x3fff;

3358 #i‚de‡
PKZIP_BUG_WORKAROUND


3359 i‡((
t
 & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)

3361 
s
->
mode
 = 
BADB
;

3362 
z
->
msg
 = "too manyÜength or distance symbols";

3363 
r
 = 
Z_DATA_ERROR
;

3364 
LEAVE


3367 
t
 = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);

3368 i‡(
t
 < 19)

3369 
t
 = 19;

3370 i‡((
s
->
sub
.
åìs
.
bÀns
 = (
uI¡f
*)
	`ZALLOC
(
z
, 
t
, (
uI¡
))Ë=
Z_NULL
)

3372 
r
 = 
Z_MEM_ERROR
;

3373 
LEAVE


3375 
s
->
sub
.
åìs
.
nbÀns
 = 
t
;

3376 
	`DUMPBITS
(14)

3377 
s
->
sub
.
åìs
.
ödex
 = 0;

3378 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

3379 
s
->
mode
 = 
BTREE
;

3380 
BTREE
:

3381 
s
->
sub
.
åìs
.
ödex
 < 4 + (s->sub.åìs.
èbÀ
 >> 10))

3383 
	`NEEDBITS
(3)

3384 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = (
uI¡
)
b
 & 7;

3385 
	`DUMPBITS
(3)

3387 
s
->
sub
.
åìs
.
ödex
 < 19)

3388 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = 0;

3389 
s
->
sub
.
åìs
.
bb
 = 7;

3390 
t
 = 
	`öÊ©e_åìs_bôs
(
s
->
sub
.
åìs
.
bÀns
, &s->sub.åìs.
bb
,

3391 &
s
->
sub
.
åìs
.
tb
, 
z
);

3392 i‡(
t
 !
Z_OK
)

3394 
r
 = 
t
;

3395 i‡(
r
 =
Z_DATA_ERROR
)

3396 
s
->
mode
 = 
BADB
;

3397 
LEAVE


3399 
s
->
sub
.
åìs
.
ödex
 = 0;

3400 
	`Tø˚v
((
°dîr
, "inflate: bitsÅree ok\n"));

3401 
s
->
mode
 = 
DTREE
;

3402 
DTREE
:

3403 
t
 = 
s
->
sub
.
åìs
.
èbÀ
,

3404 
s
->
sub
.
åìs
.
ödex
 < 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f))

3406 
öÊ©e_hu·
 *
h
;

3407 
uI¡
 
i
, 
j
, 
c
;

3409 
t
 = 
s
->
sub
.
åìs
.
bb
;

3410 
	`NEEDBITS
(
t
)

3411 
h
 = 
s
->
sub
.
åìs
.
tb
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
t
]);

3412 
t
 = 
h
->
w‹d
.
wh©
.
Bôs
;

3413 
c
 = 
h
->
m‹e
.
Ba£
;

3414 i‡(
c
 < 16)

3416 
	`DUMPBITS
(
t
)

3417 
s
->
sub
.
åìs
.
bÀns
[s->sub.åìs.
ödex
++] = 
c
;

3421 
i
 = 
c
 == 18 ? 7 : c - 14;

3422 
j
 = 
c
 == 18 ? 11 : 3;

3423 
	`NEEDBITS
(
t
 + 
i
)

3424 
	`DUMPBITS
(
t
)

3425 
j
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
i
];

3426 
	`DUMPBITS
(
i
)

3427 
i
 = 
s
->
sub
.
åìs
.
ödex
;

3428 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

3429 i‡(
i
 + 
j
 > 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f) ||

3430 (
c
 =16 && 
i
 < 1))

3432 
s
->
mode
 = 
BADB
;

3433 
z
->
msg
 = "invalid bitÜengthÑepeat";

3434 
r
 = 
Z_DATA_ERROR
;

3435 
LEAVE


3437 
c
 = c =16 ? 
s
->
sub
.
åìs
.
bÀns
[
i
 - 1] : 0;

3439 
s
->
sub
.
åìs
.
bÀns
[
i
++] = 
c
;

3440 } --
j
);

3441 
s
->
sub
.
åìs
.
ödex
 = 
i
;

3444 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
åìs
.
tb
, 
z
);

3445 
s
->
sub
.
åìs
.
tb
 = 
Z_NULL
;

3447 
uI¡
 
bl
, 
bd
;

3448 
öÊ©e_hu·
 *
é
, *
td
;

3449 
öÊ©e_codes_°©ef
 *
c
;

3451 
bl
 = 9;

3452 
bd
 = 6;

3453 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

3454 
t
 = 
	`öÊ©e_åìs_dy«mic
(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f),

3455 
s
->
sub
.
åìs
.
bÀns
, &
bl
, &
bd
, &
é
, &
td
, 
z
);

3456 i‡(
t
 !
Z_OK
)

3458 i‡(
t
 =(
uI¡
)
Z_DATA_ERROR
)

3459 
s
->
mode
 = 
BADB
;

3460 
r
 = 
t
;

3461 
LEAVE


3463 
	`Tø˚v
((
°dîr
, "inflate:Årees ok\n"));

3464 i‡((
c
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)Ë=
Z_NULL
)

3466 
	`öÊ©e_åìs_‰ì
(
td
, 
z
);

3467 
	`öÊ©e_åìs_‰ì
(
é
, 
z
);

3468 
r
 = 
Z_MEM_ERROR
;

3469 
LEAVE


3471 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
, s->sub.åìs.
nbÀns
 * (
uI¡
));

3472 
s
->
sub
.
decode
.
codes
 = 
c
;

3473 
s
->
sub
.
decode
.
é
 =Ål;

3474 
s
->
sub
.
decode
.
td
 =Åd;

3476 
s
->
mode
 = 
CODES
;

3477 
CODES
:

3478 
UPDATE


3479 i‡((
r
 = 
	`öÊ©e_codes
(
s
, 
z
,Ñ)Ë!
Z_STREAM_END
)

3480  
	`öÊ©e_Êush
(
s
, 
z
, 
r
);

3481 
r
 = 
Z_OK
;

3482 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

3483 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

3484 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

3485 
LOAD


3486 
	`Tø˚v
((
°dîr
, "inflate: codesÉnd, %luÅotal out\n",

3487 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

3488 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

3489 i‡(!
s
->
œ°
)

3491 
s
->
mode
 = 
TYPE
;

3494 i‡(
k
 > 7)

3496 
	`As£π
(
k
 < 16, "inflate_codes grabbedÅoo many bytes")

3497 
k
 -= 8;

3498 
n
++;

3499 
p
--;

3501 
s
->
mode
 = 
DRY
;

3502 
DRY
:

3503 
FLUSH


3504 i‡(
s
->
ªad
 !s->
wrôe
)

3505 
LEAVE


3506 
s
->
mode
 = 
DONEB
;

3507 
DONEB
:

3508 
r
 = 
Z_STREAM_END
;

3509 
LEAVE


3510 
BADB
:

3511 
r
 = 
Z_DATA_ERROR
;

3512 
LEAVE


3514 
r
 = 
Z_STREAM_ERROR
;

3515 
LEAVE


3517 
	}
}

3520 
loˇl
 
	$öÊ©e_blocks_‰ì
(
s
, 
z
, 
c
)

3521 
öÊ©e_blocks_°©ef
 *
s
;

3522 
z_°ªam
 *
z
;

3523 
uL⁄gf
 *
c
;

3525 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
);

3526 
	`ZFREE
(
z
, 
s
->
wödow
, s->
íd
 - s->window);

3527 
	`ZFREE
(
z
, 
s
, (
öÊ©e_blocks_°©e
));

3528 
	`Tø˚
((
°dîr
, "inflate: blocks freed\n"));

3529  
Z_OK
;

3530 
	}
}

3540 
loˇl
 
	$öÊ©e_addhi°‹y
(
s
, 
z
)

3541 
öÊ©e_blocks_°©ef
 *
s
;

3542 
z_°ªam
 *
z
;

3544 
uL⁄g
 
b
;

3545 
uI¡
 
k
;

3546 
uI¡
 
t
;

3547 
Byãf
 *
p
;

3548 
uI¡
 
n
;

3549 
Byãf
 *
q
;

3550 
uI¡
 
m
;

3552 i‡(
s
->
ªad
 !s->
wrôe
)

3553  
Z_STREAM_ERROR
;

3554 i‡(
s
->
mode
 !
TYPE
)

3555  
Z_DATA_ERROR
;

3558 
LOAD


3562 
n
) {

3563 
t
 = 
n
;

3565 i‡(
t
 > 
m
)Å = m;

3567 i‡(
s
->
check‚
 !
Z_NULL
)

3568 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
t
);

3569 
	`zmem˝y
(
q
, 
p
, 
t
);

3570 
q
 +
t
;

3571 
p
 +
t
;

3572 
n
 -
t
;

3573 
z
->
tŸÆ_out
 +
t
;

3574 
s
->
ªad
 = 
q
;

3576 i‡(
q
 =
s
->
íd
) {

3577 
s
->
ªad
 = 
q
 = s->
wödow
;

3578 
m
 = 
WAVAIL
;

3581 
UPDATE


3582  
Z_OK
;

3583 
	}
}

3590 
loˇl
 
	$öÊ©e_∑ckë_Êush
(
s
)

3591 
öÊ©e_blocks_°©ef
 *
s
;

3593 i‡(
s
->
mode
 !
LENS
)

3594  
Z_DATA_ERROR
;

3595 
s
->
mode
 = 
TYPE
;

3596  
Z_OK
;

3597 
	}
}

3607 
	#ba£
 
m‹e
.
Ba£


	)

3608 
	#√xt
 
m‹e
.
Next


	)

3609 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

3610 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

3613 
loˇl
 
hu·_buûd
 
OF
((

3614 
uI¡f
 *,

3615 
uI¡
,

3616 
uI¡
,

3617 
uI¡f
 *,

3618 
uI¡f
 *,

3619 
öÊ©e_hu·
 * 
FAR
*,

3620 
uI¡f
 *,

3621 
z_°ªam
 *));

3623 
loˇl
 
voidpf
 
ÁŒoc
 
OF
((

3624 
voidpf
,

3625 
uI¡
,

3626 
uI¡
));

3628 
loˇl
 
f‰ì
 
OF
((

3629 
voidpf
 
q
,

3630 
voidpf
 
p
,

3631 
uI¡
 
n
));

3634 
loˇl
 
uI¡
 
	g˝Àns
[] = {

3638 
loˇl
 
uI¡
 
	g˝Àxt
[] = {

3641 
loˇl
 
uI¡
 
	g˝di°
[] = {

3645 
loˇl
 
uI¡
 
	g˝dext
[] = {

3684 
	#BMAX
 15

	)

3685 
	#N_MAX
 288

	)

3687 #ifde‡
DEBUG_ZLIB


3688 
uI¡
 
	göÊ©e_hu·s
;

3691 
loˇl
 
	$hu·_buûd
(
b
, 
n
, 
s
, 
d
, 
e
, 
t
, 
m
, 
zs
)

3692 
uI¡f
 *
b
;

3693 
uI¡
 
n
;

3694 
uI¡
 
s
;

3695 
uI¡f
 *
d
;

3696 
uI¡f
 *
e
;

3697 
öÊ©e_hu·
 * 
FAR
 *
t
;

3698 
uI¡f
 *
m
;

3699 
z_°ªam
 *
zs
;

3707 
uI¡
 
a
;

3708 
uI¡
 
c
[
BMAX
+1];

3709 
uI¡
 
f
;

3710 
g
;

3711 
h
;

3712 
uI¡
 
i
;

3713 
uI¡
 
j
;

3714 
k
;

3715 
l
;

3716 
uI¡f
 *
p
;

3717 
öÊ©e_hu·
 *
q
;

3718 
öÊ©e_hu·_s
 
r
;

3719 
öÊ©e_hu·
 *
u
[
BMAX
];

3720 
uI¡
 
v
[
N_MAX
];

3721 
w
;

3722 
uI¡
 
x
[
BMAX
+1];

3723 
uI¡f
 *
xp
;

3724 
y
;

3725 
uI¡
 
z
;

3729 
p
 = 
c
;

3730 
	#C0
 *
p
++ = 0;

	)

3731 
	#C2
 
C0
 C0 C0 
	)
C0

3732 
	#C4
 
C2
 C2 C2 
	)
C2

3733 
C4


3734 
p
 = 
b
; 
i
 = 
n
;

3736 
c
[*
p
++]++;

3737 } --
i
);

3738 i‡(
c
[0] =
n
)

3740 *
t
 = (
öÊ©e_hu·
 *)
Z_NULL
;

3741 *
m
 = 0;

3742  
Z_OK
;

3747 
l
 = *
m
;

3748 
j
 = 1; j <
BMAX
; j++)

3749 i‡(
c
[
j
])

3751 
k
 = 
j
;

3752 i‡((
uI¡
)
l
 < 
j
)

3753 
l
 = 
j
;

3754 
i
 = 
BMAX
; i; i--)

3755 i‡(
c
[
i
])

3757 
g
 = 
i
;

3758 i‡((
uI¡
)
l
 > 
i
)

3759 
l
 = 
i
;

3760 *
m
 = 
l
;

3764 
y
 = 1 << 
j
; j < 
i
; j++, y <<= 1)

3765 i‡((
y
 -
c
[
j
]) < 0)

3766  
Z_DATA_ERROR
;

3767 i‡((
y
 -
c
[
i
]) < 0)

3768  
Z_DATA_ERROR
;

3769 
c
[
i
] +
y
;

3773 
x
[1] = 
j
 = 0;

3774 
p
 = 
c
 + 1; 
xp
 = 
x
 + 2;

3775 --
i
) {

3776 *
xp
++ = (
j
 +*
p
++);

3781 
p
 = 
b
; 
i
 = 0;

3783 i‡((
j
 = *
p
++) != 0)

3784 
v
[
x
[
j
]++] = 
i
;

3785 } ++
i
 < 
n
);

3789 
x
[0] = 
i
 = 0;

3790 
p
 = 
v
;

3791 
h
 = -1;

3792 
w
 = -
l
;

3793 
u
[0] = (
öÊ©e_hu·
 *)
Z_NULL
;

3794 
q
 = (
öÊ©e_hu·
 *)
Z_NULL
;

3795 
z
 = 0;

3798 ; 
k
 <
g
; k++)

3800 
a
 = 
c
[
k
];

3801 
a
--)

3805 
k
 > 
w
 + 
l
)

3807 
h
++;

3808 
w
 +
l
;

3811 
z
 = (z = 
g
 - 
w
Ë> (
uI¡
)
l
 ?Ü : z;

3812 i‡((
f
 = 1 << (
j
 = 
k
 - 
w
)Ë> 
a
 + 1)

3814 
f
 -
a
 + 1;

3815 
xp
 = 
c
 + 
k
;

3816 i‡(
j
 < 
z
)

3817 ++
j
 < 
z
)

3819 i‡((
f
 <<1Ë<*++
xp
)

3821 
f
 -*
xp
;

3824 
z
 = 1 << 
j
;

3827 i‡((
q
 = (
öÊ©e_hu·
 *)
ZALLOC


3828 (
zs
,
z
 + 1,(
öÊ©e_hu·
))Ë=
Z_NULL
)

3830 i‡(
h
)

3831 
	`öÊ©e_åìs_‰ì
(
u
[0], 
zs
);

3832  
Z_MEM_ERROR
;

3834 
q
->
w‹d
.
NÆloc
 = 
z
 + 1;

3835 #ifde‡
DEBUG_ZLIB


3836 
öÊ©e_hu·s
 +
z
 + 1;

3838 *
t
 = 
q
 + 1;

3839 *(
t
 = &(
q
->
√xt
)Ë
Z_NULL
;

3840 
u
[
h
] = ++
q
;

3843 i‡(
h
)

3845 
x
[
h
] = 
i
;

3846 
r
.
bôs
 = (
Byã
)
l
;

3847 
r
.
ex›
 = (
Byã
)
j
;

3848 
r
.
√xt
 = 
q
;

3849 
j
 = 
i
 >> (
w
 - 
l
);

3850 
u
[
h
-1][
j
] = 
r
;

3855 
r
.
bôs
 = (
Byã
)(
k
 - 
w
);

3856 i‡(
p
 >
v
 + 
n
)

3857 
r
.
ex›
 = 128 + 64;

3858 i‡(*
p
 < 
s
)

3860 
r
.
ex›
 = (
Byã
)(*
p
 < 256 ? 0 : 32 + 64);

3861 
r
.
ba£
 = *
p
++;

3865 
r
.
ex›
 = (
Byã
)
e
[*
p
 - 
s
] + 16 + 64;

3866 
r
.
ba£
 = 
d
[*
p
++ - 
s
];

3870 
f
 = 1 << (
k
 - 
w
);

3871 
j
 = 
i
 >> 
w
; j < 
z
; j +
f
)

3872 
q
[
j
] = 
r
;

3875 
j
 = 1 << (
k
 - 1); 
i
 & j; j >>= 1)

3876 
i
 ^
j
;

3877 
i
 ^
j
;

3880 (
i
 & ((1 << 
w
Ë- 1)Ë!
x
[
h
])

3882 
h
--;

3883 
w
 -
l
;

3890  
y
 !0 && 
g
 !1 ? 
Z_BUF_ERROR
 : 
Z_OK
;

3891 
	}
}

3894 
loˇl
 
	$öÊ©e_åìs_bôs
(
c
, 
bb
, 
tb
, 
z
)

3895 
uI¡f
 *
c
;

3896 
uI¡f
 *
bb
;

3897 
öÊ©e_hu·
 * 
FAR
 *
tb
;

3898 
z_°ªam
 *
z
;

3900 
r
;

3902 
r
 = 
	`hu·_buûd
(
c
, 19, 19, (
uI¡f
*)
Z_NULL
, (uI¡f*)Z_NULL, 
tb
, 
bb
, 
z
);

3903 i‡(
r
 =
Z_DATA_ERROR
)

3904 
z
->
msg
 = "oversubscribed dynamic bitÜengthsÅree";

3905 i‡(
r
 =
Z_BUF_ERROR
)

3907 
	`öÊ©e_åìs_‰ì
(*
tb
, 
z
);

3908 
z
->
msg
 = "incomplete dynamic bitÜengthsÅree";

3909 
r
 = 
Z_DATA_ERROR
;

3911  
r
;

3912 
	}
}

3915 
loˇl
 
	$öÊ©e_åìs_dy«mic
(
∆
, 
nd
, 
c
, 
bl
, 
bd
, 
é
, 
td
, 
z
)

3916 
uI¡
 
∆
;

3917 
uI¡
 
nd
;

3918 
uI¡f
 *
c
;

3919 
uI¡f
 *
bl
;

3920 
uI¡f
 *
bd
;

3921 
öÊ©e_hu·
 * 
FAR
 *
é
;

3922 
öÊ©e_hu·
 * 
FAR
 *
td
;

3923 
z_°ªam
 *
z
;

3925 
r
;

3928 i‡((
r
 = 
	`hu·_buûd
(
c
, 
∆
, 257, 
˝Àns
, 
˝Àxt
, 
é
, 
bl
, 
z
)Ë!
Z_OK
)

3930 i‡(
r
 =
Z_DATA_ERROR
)

3931 
z
->
msg
 = "oversubscribedÜiteral/lengthÅree";

3932 i‡(
r
 =
Z_BUF_ERROR
)

3934 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

3935 
z
->
msg
 = "incompleteÜiteral/lengthÅree";

3936 
r
 = 
Z_DATA_ERROR
;

3938  
r
;

3942 i‡((
r
 = 
	`hu·_buûd
(
c
 + 
∆
, 
nd
, 0, 
˝di°
, 
˝dext
, 
td
, 
bd
, 
z
)Ë!
Z_OK
)

3944 i‡(
r
 =
Z_DATA_ERROR
)

3945 
z
->
msg
 = "oversubscribedÜiteral/lengthÅree";

3946 i‡(
r
 =
Z_BUF_ERROR
) {

3947 #ifde‡
PKZIP_BUG_WORKAROUND


3948 
r
 = 
Z_OK
;

3951 
	`öÊ©e_åìs_‰ì
(*
td
, 
z
);

3952 
z
->
msg
 = "incompleteÜiteral/lengthÅree";

3953 
r
 = 
Z_DATA_ERROR
;

3955 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

3956  
r
;

3961  
Z_OK
;

3962 
	}
}

3966 
loˇl
 
	gfixed_lock
 = 0;

3967 
loˇl
 
	gfixed_buût
 = 0;

3968 
	#FIXEDH
 530

	)

3969 
loˇl
 
uI¡
 
	gfixed_À·
 = 
FIXEDH
;

3970 
loˇl
 
öÊ©e_hu·
 
	gfixed_mem
[
FIXEDH
];

3971 
loˇl
 
uI¡
 
	gfixed_bl
;

3972 
loˇl
 
uI¡
 
	gfixed_bd
;

3973 
loˇl
 
öÊ©e_hu·
 *
	gfixed_é
;

3974 
loˇl
 
öÊ©e_hu·
 *
	gfixed_td
;

3977 
loˇl
 
voidpf
 
	$ÁŒoc
(
q
, 
n
, 
s
)

3978 
voidpf
 
q
;

3979 
uI¡
 
n
;

3980 
uI¡
 
s
;

3982 
	`As£π
(
s
 =(
öÊ©e_hu·
Ë&& 
n
 <
fixed_À·
,

3984 i‡(
q
Ë
s
++;

3985 
fixed_À·
 -
n
;

3986  (
voidpf
)(
fixed_mem
 + 
fixed_À·
);

3987 
	}
}

3990 
loˇl
 
	$f‰ì
(
q
, 
p
, 
n
)

3991 
voidpf
 
q
;

3992 
voidpf
 
p
;

3993 
uI¡
 
n
;

3995 
	`As£π
(0, "inflate_trees ffree called!");

3996 i‡(
q
Ëq = 
p
;

3997 
	}
}

4000 
loˇl
 
	$öÊ©e_åìs_fixed
(
bl
, 
bd
, 
é
, 
td
)

4001 
uI¡f
 *
bl
;

4002 
uI¡f
 *
bd
;

4003 
öÊ©e_hu·
 * 
FAR
 *
é
;

4004 
öÊ©e_hu·
 * 
FAR
 *
td
;

4007 ++
fixed_lock
 > 1)

4008 
fixed_lock
--;

4009 i‡(!
fixed_buût
)

4011 
k
;

4012 
c
[288];

4013 
z_°ªam
 
z
;

4016 
z
.
zÆloc
 = 
ÁŒoc
;

4017 
z
.
z‰ì
 = 
f‰ì
;

4018 
z
.
›aque
 = 
Z_NULL
;

4021 
k
 = 0; k < 144; k++)

4022 
c
[
k
] = 8;

4023 ; 
k
 < 256; k++)

4024 
c
[
k
] = 9;

4025 ; 
k
 < 280; k++)

4026 
c
[
k
] = 7;

4027 ; 
k
 < 288; k++)

4028 
c
[
k
] = 8;

4029 
fixed_bl
 = 7;

4030 
	`hu·_buûd
(
c
, 288, 257, 
˝Àns
, 
˝Àxt
, &
fixed_é
, &
fixed_bl
, &
z
);

4033 
k
 = 0; k < 30; k++)

4034 
c
[
k
] = 5;

4035 
fixed_bd
 = 5;

4036 
	`hu·_buûd
(
c
, 30, 0, 
˝di°
, 
˝dext
, &
fixed_td
, &
fixed_bd
, &
z
);

4039 
fixed_buût
 = 1;

4041 
fixed_lock
--;

4042 *
bl
 = 
fixed_bl
;

4043 *
bd
 = 
fixed_bd
;

4044 *
é
 = 
fixed_é
;

4045 *
td
 = 
fixed_td
;

4046  
Z_OK
;

4047 
	}
}

4050 
loˇl
 
	$öÊ©e_åìs_‰ì
(
t
, 
z
)

4051 
öÊ©e_hu·
 *
t
;

4052 
z_°ªam
 *
z
;

4057 
öÊ©e_hu·
 *
p
, *
q
;

4060 
p
 = 
t
;

4061 
p
 !
Z_NULL
)

4063 
q
 = (--
p
)->
√xt
;

4064 
	`ZFREE
(
z
, 
p
,Ö->
w‹d
.
NÆloc
 * (
öÊ©e_hu·
));

4065 
p
 = 
q
;

4067  
Z_OK
;

4068 
	}
}

4077 
	#ba£
 
m‹e
.
Ba£


	)

4078 
	#√xt
 
m‹e
.
Next


	)

4079 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

4080 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

4083 
	söÊ©e_codes_°©e
 {

4087 
	mSTART
,

4088 
	mLEN
,

4089 
	mLENEXT
,

4090 
	mDIST
,

4091 
	mDISTEXT
,

4092 
	mCOPY
,

4093 
	mLIT
,

4094 
	mWASH
,

4095 
	mEND
,

4096 
	mBADCODE
}

4097 
	mmode
;

4100 
uI¡
 
	mÀn
;

4103 
öÊ©e_hu·
 *
	måì
;

4104 
uI¡
 
	m√ed
;

4105 } 
	mcode
;

4106 
uI¡
 
	mlô
;

4108 
uI¡
 
	mgë
;

4109 
uI¡
 
	mdi°
;

4110 } 
	mc›y
;

4111 } 
	msub
;

4114 
Byã
 
	mlbôs
;

4115 
Byã
 
	mdbôs
;

4116 
öÊ©e_hu·
 *
	m…ªe
;

4117 
öÊ©e_hu·
 *
	mdåì
;

4122 
loˇl
 
öÊ©e_codes_°©ef
 *
	$öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)

4123 
uI¡
 
bl
, 
bd
;

4124 
öÊ©e_hu·
 *
é
, *
td
;

4125 
z_°ªam
 *
z
;

4127 
öÊ©e_codes_°©ef
 *
c
;

4129 i‡((
c
 = (
öÊ©e_codes_°©ef
 *)

4130 
	`ZALLOC
(
z
,1,(
öÊ©e_codes_°©e
))Ë!
Z_NULL
)

4132 
c
->
mode
 = 
START
;

4133 
c
->
lbôs
 = (
Byã
)
bl
;

4134 
c
->
dbôs
 = (
Byã
)
bd
;

4135 
c
->
…ªe
 = 
é
;

4136 
c
->
dåì
 = 
td
;

4137 
	`Tø˚v
((
°dîr
, "inflate: codesÇew\n"));

4139  
c
;

4140 
	}
}

4143 
loˇl
 
	$öÊ©e_codes
(
s
, 
z
, 
r
)

4144 
öÊ©e_blocks_°©ef
 *
s
;

4145 
z_°ªam
 *
z
;

4146 
r
;

4148 
uI¡
 
j
;

4149 
öÊ©e_hu·
 *
t
;

4150 
uI¡
 
e
;

4151 
uL⁄g
 
b
;

4152 
uI¡
 
k
;

4153 
Byãf
 *
p
;

4154 
uI¡
 
n
;

4155 
Byãf
 *
q
;

4156 
uI¡
 
m
;

4157 
Byãf
 *
f
;

4158 
öÊ©e_codes_°©ef
 *
c
 = 
s
->
sub
.
decode
.
codes
;

4161 
LOAD


4164 1Ë
c
->
mode
)

4166 
START
:

4167 #i‚de‡
SLOW


4168 i‡(
m
 >258 && 
n
 >= 10)

4170 
UPDATE


4171 
r
 = 
	`öÊ©e_Á°
(
c
->
lbôs
, c->
dbôs
, c->
…ªe
, c->
dåì
, 
s
, 
z
);

4172 
LOAD


4173 i‡(
r
 !
Z_OK
)

4175 
c
->
mode
 = 
r
 =
Z_STREAM_END
 ? 
WASH
 : 
BADCODE
;

4180 
c
->
sub
.
code
.
√ed
 = c->
lbôs
;

4181 
c
->
sub
.
code
.
åì
 = c->
…ªe
;

4182 
c
->
mode
 = 
LEN
;

4183 
LEN
:

4184 
j
 = 
c
->
sub
.
code
.
√ed
;

4185 
	`NEEDBITS
(
j
)

4186 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

4187 
	`DUMPBITS
(
t
->
bôs
)

4188 
e
 = (
uI¡
)(
t
->
ex›
);

4189 i‡(
e
 == 0)

4191 
c
->
sub
.
lô
 = 
t
->
ba£
;

4192 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

4194 "öÊ©e:ÜôîÆ 0x%02x\n", 
t
->
ba£
));

4195 
c
->
mode
 = 
LIT
;

4198 i‡(
e
 & 16)

4200 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

4201 
c
->
Àn
 = 
t
->
ba£
;

4202 
c
->
mode
 = 
LENEXT
;

4205 i‡((
e
 & 64) == 0)

4207 
c
->
sub
.
code
.
√ed
 = 
e
;

4208 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

4211 i‡(
e
 & 32)

4213 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

4214 
c
->
mode
 = 
WASH
;

4217 
c
->
mode
 = 
BADCODE
;

4218 
z
->
msg
 = "invalidÜiteral/length code";

4219 
r
 = 
Z_DATA_ERROR
;

4220 
LEAVE


4221 
LENEXT
:

4222 
j
 = 
c
->
sub
.
c›y
.
gë
;

4223 
	`NEEDBITS
(
j
)

4224 
c
->
Àn
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

4225 
	`DUMPBITS
(
j
)

4226 
c
->
sub
.
code
.
√ed
 = c->
dbôs
;

4227 
c
->
sub
.
code
.
åì
 = c->
dåì
;

4228 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
c
->
Àn
));

4229 
c
->
mode
 = 
DIST
;

4230 
DIST
:

4231 
j
 = 
c
->
sub
.
code
.
√ed
;

4232 
	`NEEDBITS
(
j
)

4233 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

4234 
	`DUMPBITS
(
t
->
bôs
)

4235 
e
 = (
uI¡
)(
t
->
ex›
);

4236 i‡(
e
 & 16)

4238 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

4239 
c
->
sub
.
c›y
.
di°
 = 
t
->
ba£
;

4240 
c
->
mode
 = 
DISTEXT
;

4243 i‡((
e
 & 64) == 0)

4245 
c
->
sub
.
code
.
√ed
 = 
e
;

4246 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

4249 
c
->
mode
 = 
BADCODE
;

4250 
z
->
msg
 = "invalid distance code";

4251 
r
 = 
Z_DATA_ERROR
;

4252 
LEAVE


4253 
DISTEXT
:

4254 
j
 = 
c
->
sub
.
c›y
.
gë
;

4255 
	`NEEDBITS
(
j
)

4256 
c
->
sub
.
c›y
.
di°
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

4257 
	`DUMPBITS
(
j
)

4258 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
c
->
sub
.
c›y
.
di°
));

4259 
c
->
mode
 = 
COPY
;

4260 
COPY
:

4261 #i‚de‡
__TURBOC__


4262 
f
 = (
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
 ?

4263 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
q
 - s->
wödow
)) :

4264 
q
 - 
c
->
sub
.
c›y
.
di°
;

4266 
f
 = 
q
 - 
c
->
sub
.
c›y
.
di°
;

4267 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
)

4268 
f
 = 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
q
 - s->
wödow
));

4270 
c
->
Àn
)

4272 
NEEDOUT


4273 
	`OUTBYTE
(*
f
++)

4274 i‡(
f
 =
s
->
íd
)

4275 
f
 = 
s
->
wödow
;

4276 
c
->
Àn
--;

4278 
c
->
mode
 = 
START
;

4280 
LIT
:

4281 
NEEDOUT


4282 
	`OUTBYTE
(
c
->
sub
.
lô
)

4283 
c
->
mode
 = 
START
;

4285 
WASH
:

4286 
FLUSH


4287 i‡(
s
->
ªad
 !s->
wrôe
)

4288 
LEAVE


4289 
c
->
mode
 = 
END
;

4290 
END
:

4291 
r
 = 
Z_STREAM_END
;

4292 
LEAVE


4293 
BADCODE
:

4294 
r
 = 
Z_DATA_ERROR
;

4295 
LEAVE


4297 
r
 = 
Z_STREAM_ERROR
;

4298 
LEAVE


4300 
	}
}

4303 
loˇl
 
	$öÊ©e_codes_‰ì
(
c
, 
z
)

4304 
öÊ©e_codes_°©ef
 *
c
;

4305 
z_°ªam
 *
z
;

4307 
	`ZFREE
(
z
, 
c
, (
öÊ©e_codes_°©e
));

4308 
	`Tø˚v
((
°dîr
, "inflate: codes free\n"));

4309 
	}
}

4318 
loˇl
 
	$öÊ©e_Êush
(
s
, 
z
, 
r
)

4319 
öÊ©e_blocks_°©ef
 *
s
;

4320 
z_°ªam
 *
z
;

4321 
r
;

4323 
uI¡
 
n
;

4324 
Byãf
 *
p
, *
q
;

4327 
p
 = 
z
->
√xt_out
;

4328 
q
 = 
s
->
ªad
;

4331 
n
 = (
uI¡
)((
q
 <
s
->
wrôe
 ? s->wrôê: s->
íd
) - q);

4332 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

4333 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

4336 
z
->
avaû_out
 -
n
;

4337 
z
->
tŸÆ_out
 +
n
;

4340 i‡(
s
->
check‚
 !
Z_NULL
)

4341 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

4344 i‡(
p
 !
NULL
) {

4345 
	`zmem˝y
(
p
, 
q
, 
n
);

4346 
p
 +
n
;

4348 
q
 +
n
;

4351 i‡(
q
 =
s
->
íd
)

4354 
q
 = 
s
->
wödow
;

4355 i‡(
s
->
wrôe
 =s->
íd
)

4356 
s
->
wrôe
 = s->
wödow
;

4359 
n
 = (
uI¡
)(
s
->
wrôe
 - 
q
);

4360 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

4361 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

4364 
z
->
avaû_out
 -
n
;

4365 
z
->
tŸÆ_out
 +
n
;

4368 i‡(
s
->
check‚
 !
Z_NULL
)

4369 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

4372 i‡(
p
 !
NULL
) {

4373 
	`zmem˝y
(
p
, 
q
, 
n
);

4374 
p
 +
n
;

4376 
q
 +
n
;

4380 
z
->
√xt_out
 = 
p
;

4381 
s
->
ªad
 = 
q
;

4384  
r
;

4385 
	}
}

4395 
	#ba£
 
m‹e
.
Ba£


	)

4396 
	#√xt
 
m‹e
.
Next


	)

4397 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

4398 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

4401 
	#GRABBITS
(
j
Ë{
k
<(j)){
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

4402 
	#UNGRAB
 {
n
+=(
c
=
k
>>3);
p
-=c;k&=7;}

	)

4409 
loˇl
 
	$öÊ©e_Á°
(
bl
, 
bd
, 
é
, 
td
, 
s
, 
z
)

4410 
uI¡
 
bl
, 
bd
;

4411 
öÊ©e_hu·
 *
é
, *
td
;

4412 
öÊ©e_blocks_°©ef
 *
s
;

4413 
z_°ªam
 *
z
;

4415 
öÊ©e_hu·
 *
t
;

4416 
uI¡
 
e
;

4417 
uL⁄g
 
b
;

4418 
uI¡
 
k
;

4419 
Byãf
 *
p
;

4420 
uI¡
 
n
;

4421 
Byãf
 *
q
;

4422 
uI¡
 
m
;

4423 
uI¡
 
ml
;

4424 
uI¡
 
md
;

4425 
uI¡
 
c
;

4426 
uI¡
 
d
;

4427 
Byãf
 *
r
;

4430 
LOAD


4433 
ml
 = 
öÊ©e_mask
[
bl
];

4434 
md
 = 
öÊ©e_mask
[
bd
];

4439 
	`GRABBITS
(20)

4440 i‡((
e
 = (
t
 = 
é
 + ((
uI¡
)
b
 & 
ml
))->
ex›
) == 0)

4442 
	`DUMPBITS
(
t
->
bôs
)

4443 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

4445 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

4446 *
q
++ = (
Byã
)
t
->
ba£
;

4447 
m
--;

4451 
	`DUMPBITS
(
t
->
bôs
)

4452 i‡(
e
 & 16)

4455 
e
 &= 15;

4456 
c
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

4457 
	`DUMPBITS
(
e
)

4458 
	`Tø˚vv
((
°dîr
, "öÊ©e: *Üígth %u\n", 
c
));

4461 
	`GRABBITS
(15);

4462 
e
 = (
t
 = 
td
 + ((
uI¡
)
b
 & 
md
))->
ex›
;

4464 
	`DUMPBITS
(
t
->
bôs
)

4465 i‡(
e
 & 16)

4468 
e
 &= 15;

4469 
	`GRABBITS
(
e
)

4470 
d
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

4471 
	`DUMPBITS
(
e
)

4472 
	`Tø˚vv
((
°dîr
, "öÊ©e: * di°™˚ %u\n", 
d
));

4475 
m
 -
c
;

4476 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë>
d
)

4478 
r
 = 
q
 - 
d
;

4479 *
q
++ = *
r
++; 
c
--;

4480 *
q
++ = *
r
++; 
c
--;

4484 
e
 = 
d
 - (
q
 - 
s
->
wödow
);

4485 
r
 = 
s
->
íd
 - 
e
;

4486 i‡(
c
 > 
e
)

4488 
c
 -
e
;

4490 *
q
++ = *
r
++;

4491 } --
e
);

4492 
r
 = 
s
->
wödow
;

4496 *
q
++ = *
r
++;

4497 } --
c
);

4500 i‡((
e
 & 64) == 0)

4501 
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
;

4504 
z
->
msg
 = "invalid distance code";

4505 
UNGRAB


4506 
UPDATE


4507  
Z_DATA_ERROR
;

4512 i‡((
e
 & 64) == 0)

4514 i‡((
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
) == 0)

4516 
	`DUMPBITS
(
t
->
bôs
)

4517 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

4519 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

4520 *
q
++ = (
Byã
)
t
->
ba£
;

4521 
m
--;

4525 i‡(
e
 & 32)

4527 
	`Tø˚vv
((
°dîr
, "inflate: *Énd of block\n"));

4528 
UNGRAB


4529 
UPDATE


4530  
Z_STREAM_END
;

4534 
z
->
msg
 = "invalidÜiteral/length code";

4535 
UNGRAB


4536 
UPDATE


4537  
Z_DATA_ERROR
;

4540 } 
m
 >258 && 
n
 >= 10);

4543 
UNGRAB


4544 
UPDATE


4545  
Z_OK
;

4546 
	}
}

4557 *
	gzlib_vîsi⁄
 = 
ZLIB_VERSION
;

4559 *
	gz_îrmsg
[] = {

4578 
	#BASE
 65521L

	)

4579 
	#NMAX
 5552

	)

4582 
	#DO1
(
buf
Ë{
s1
 +*buf++; 
s2
 +s1;}

	)

4583 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

4584 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

4585 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

4586 
	#DO16
(
buf
Ë
	`DO8
(buf); DO8(buf);

	)

4589 
uL⁄g
 
	$adÀr32
(
adÀr
, 
buf
, 
Àn
)

4590 
uL⁄g
 
adÀr
;

4591 
Byãf
 *
buf
;

4592 
uI¡
 
Àn
;

4594 
s1
 = 
adÀr
 & 0xffff;

4595 
s2
 = (
adÀr
 >> 16) & 0xffff;

4596 
k
;

4598 i‡(
buf
 =
Z_NULL
)  1L;

4600 
Àn
 > 0) {

4601 
k
 = 
Àn
 < 
NMAX
 ?Üen : NMAX;

4602 
Àn
 -
k
;

4603 
k
 >= 16) {

4604 
	`DO16
(
buf
);

4605 
k
 -= 16;

4607 i‡(
k
 != 0) do {

4608 
	`DO1
(
buf
);

4609 } --
k
);

4610 
s1
 %
BASE
;

4611 
s2
 %
BASE
;

4613  (
s2
 << 16Ë| 
s1
;

4614 
	}
}

	@pppdump/zlib.h

35 #i‚de‡
_ZLIB_H


36 
	#_ZLIB_H


	)

62 #i‚de‡
STDC


63 #i‡
deföed
(
MSDOS
Ë|| deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
)

64 
	#STDC


	)

68 #ifdef 
__MWERKS__


69 
	~<unix.h
>

73 #i‚de‡
MAX_MEM_LEVEL


74 #ifde‡
MAXSEG_64K


75 
	#MAX_MEM_LEVEL
 8

	)

77 
	#MAX_MEM_LEVEL
 9

	)

81 #i‚de‡
FAR


82 
	#FAR


	)

86 #i‚de‡
MAX_WBITS


87 
	#MAX_WBITS
 15

	)

105 #i‚de‡
OF


106 #ifde‡
STDC


107 
	#OF
(
¨gs
Ë
	)
¨gs

109 
	#OF
(
¨gs
Ë()

	)

113 
	tByã
;

114 
	tuI¡
;

115 
	tuL⁄g
;

117 
Byã
 
	tFAR
 
	tByãf
;

118 
	tFAR
 
	tch¨f
;

119 
	tFAR
 
	tötf
;

120 
uI¡
 
	tFAR
 
	tuI¡f
;

121 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

123 #ifde‡
STDC


124 
	tFAR
 *
	tvoidpf
;

125 *
	tvoidp
;

127 
Byã
 
	tFAR
 *
	tvoidpf
;

128 
Byã
 *
	tvoidp
;

133 
	#ZLIB_VERSION
 "0.95P"

	)

154 
	$voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

155 (*
	t‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
, 
	tuI¡
 
	tnbyãs
));

157 
öã∫Æ_°©e
;

159 
	sz_°ªam_s
 {

160 
Byãf
 *
√xt_ö
;

161 
uI¡
 
avaû_ö
;

162 
uL⁄g
 
tŸÆ_ö
;

164 
Byãf
 *
√xt_out
;

165 
uI¡
 
avaû_out
;

166 
uL⁄g
 
tŸÆ_out
;

168 *
msg
;

169 
öã∫Æ_°©e
 
FAR
 *
°©e
;

171 
Æloc_func
 
zÆloc
;

172 
‰ì_func
 
z‰ì
;

173 
voidp
 
›aque
;

175 
Byã
 
d©a_ty≥
;

177 } 
	tz_°ªam
;

210 
	#Z_NO_FLUSH
 0

	)

211 
	#Z_PARTIAL_FLUSH
 1

	)

212 
	#Z_FULL_FLUSH
 2

	)

213 
	#Z_SYNC_FLUSH
 3

	)

214 
	#Z_FINISH
 4

	)

215 
	#Z_PACKET_FLUSH
 5

	)

218 
	#Z_OK
 0

	)

219 
	#Z_STREAM_END
 1

	)

220 
	#Z_ERRNO
 (-1)

	)

221 
	#Z_STREAM_ERROR
 (-2)

	)

222 
	#Z_DATA_ERROR
 (-3)

	)

223 
	#Z_MEM_ERROR
 (-4)

	)

224 
	#Z_BUF_ERROR
 (-5)

	)

227 
	#Z_BEST_SPEED
 1

	)

228 
	#Z_BEST_COMPRESSION
 9

	)

229 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

232 
	#Z_FILTERED
 1

	)

233 
	#Z_HUFFMAN_ONLY
 2

	)

234 
	#Z_DEFAULT_STRATEGY
 0

	)

236 
	#Z_BINARY
 0

	)

237 
	#Z_ASCII
 1

	)

238 
	#Z_UNKNOWN
 2

	)

241 
	#Z_NULL
 0

	)

243 *
zlib_vîsi⁄
;

251 
deÊ©eInô
 
	`OF
((
z_°ªam
 *
°rm
, 
Àvñ
));

270 
deÊ©e
 
	`OF
((
z_°ªam
 *
°rm
, 
Êush
));

347 
deÊ©eEnd
 
	`OF
((
z_°ªam
 *
°rm
));

359 
öÊ©eInô
 
	`OF
((
z_°ªam
 *
°rm
));

373 
öÊ©e
 
	`OF
((
z_°ªam
 *
°rm
, 
Êush
));

424 
öÊ©eEnd
 
	`OF
((
z_°ªam
 *
°rm
));

441 
deÊ©eInô2
 
	`OF
((
z_°ªam
 *
°rm
,

442 
Àvñ
,

443 
mëhod
,

444 
wödowBôs
,

445 
memLevñ
,

446 
°øãgy
,

447 
möCom¥essi⁄
));

501 
deÊ©eC›y
 
	`OF
((
z_°ªam
 *
de°
,

502 
z_°ªam
 *
sour˚
));

524 
deÊ©eRe£t
 
	`OF
((
z_°ªam
 *
°rm
));

535 
öÊ©eInô2
 
	`OF
((
z_°ªam
 *
°rm
,

536 
wödowBôs
));

568 
öÊ©eSync
 
	`OF
((
z_°ªam
 *
°rm
));

583 
öÊ©eRe£t
 
	`OF
((
z_°ªam
 *
°rm
));

593 
öÊ©eIncomp
 
	`OF
((
z_°ªam
 *
°rm
));

610 
uL⁄g
 
adÀr32
 
	`OF
((uL⁄g 
adÀr
, 
Byãf
 *
buf
, 
uI¡
 
Àn
));

627 #i‚de‡
_Z_UTIL_H


628 
	söã∫Æ_°©e
 {
dummy
;};

	@pppstats/pppstats.c

34 #i‚de‡
__STDC__


35 c⁄°

	)

38 #i‚de‡
löt


39 c⁄° 
	grcsid
[] = "$Id:Öppstats.c,v 1.29 2002/10/27 12:56:26 fcusack Exp $";

42 
	~<°dio.h
>

43 
	~<°ddef.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<˘y≥.h
>

47 
	~<î∫o.h
>

48 
	~<sig«l.h
>

49 
	~<f˙é.h
>

50 
	~<uni°d.h
>

51 
	~<sys/∑øm.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/io˘l.h
>

55 #i‚de‡
STREAMS


56 #i‡
deföed
(
__löux__
Ë&& deföed(
__powîpc__
) \

57 && (
	g__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0)

59 #unde‡
__GLIBC__


61 
	~<sys/sockë.h
>

62 #i‚de‡
__löux__


63 
	~<√t/if.h
>

64 
	~<√t/µp_defs.h
>

65 
	~<√t/if_µp.h
>

68 #i‡
__GLIBC__
 >= 2

69 
	~<asm/ty≥s.h
>

70 
	~<√t/if.h
>

72 
	~<löux/ty≥s.h
>

73 
	~<löux/if.h
>

75 
	~<löux/µp_defs.h
>

76 
	~<löux/if_µp.h
>

80 
	~<sys/°r›ts.h
>

81 
	~<√t/µp_defs.h
>

82 
	~<√t/µpio.h
>

86 
vÊag
, 
	grÊag
, 
	gzÊag
;

87 
	gaÊag
;

88 
	gdÊag
;

89 
	göãrvÆ
, 
	gcou¡
;

90 
	göföôe
;

91 
	gs
;

92 
	gsig«Œed
;

93 *
	g¥og«me
;

94 *
	göãrÁ˚
;

96 #i‡
deföed
(
SUNOS4
Ë|| deföed(
ULTRIX
Ë|| deföed(
NeXT
)

97 
›töd
;

98 *
›èrg
;

105 #i‡!
deföed
(
PPP_DRV_NAME
)

106 
	#PPP_DRV_NAME
 "µp"

	)

109 
ußge
 
__P
(());

110 
ˇtchÆ¨m
 
__P
(());

111 
gë_µp_°©s
 
__P
((
µp_°©s
 *));

112 
gë_µp_c°©s
 
__P
((
µp_comp_°©s
 *));

113 
öçr
 
__P
(());

115 
maö
 
__P
((, *
¨gv
[]));

118 
	$ußge
()

120 
	`Ârötf
(
°dîr
, "Usage: %s [-a|-d] [-v|-r|-z] [-c count] [-w wait] [interface]\n",

121 
¥og«me
);

122 
	`exô
(1);

123 
	}
}

130 
	$ˇtchÆ¨m
(
¨g
)

131 
¨g
;

133 
sig«Œed
 = 1;

134 
	}
}

137 #i‚de‡
STREAMS


139 
	$gë_µp_°©s
(
cuΩ
)

140 
µp_°©s
 *
cuΩ
;

142 
iÂµ°©§eq
 
ªq
;

144 
	`mem£t
 (&
ªq
, 0,  (req));

146 #ifde‡
__löux__


147 
ªq
.
°©s_±r
 = (
ˇddr_t
Ë&ªq.
°©s
;

148 #unde‡
i‰_«me


149 
	#i‰_«me
 
i‰__«me


	)

152 
	`°∫˝y
(
ªq
.
i‰_«me
, 
öãrÁ˚
, 
IFNAMSIZ
);

153 
ªq
.
i‰_«me
[
IFNAMSIZ
 - 1] = 0;

154 i‡(
	`io˘l
(
s
, 
SIOCGPPPSTATS
, &
ªq
) < 0) {

155 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

156 i‡(
î∫o
 =
ENOTTY
)

157 
	`Ârötf
(
°dîr
, "kernel support missing\n");

159 
	`≥º‹
("couldn't get PPP statistics");

160 
	`exô
(1);

162 *
cuΩ
 = 
ªq
.
°©s
;

163 
	}
}

166 
	$gë_µp_c°©s
(
c•
)

167 
µp_comp_°©s
 *
c•
;

169 
iÂµc°©§eq
 
¸eq
;

171 
	`mem£t
 (&
¸eq
, 0,  (creq));

173 #ifde‡
__löux__


174 
¸eq
.
°©s_±r
 = (
ˇddr_t
Ë&¸eq.
°©s
;

175 #unde‡
i‰_«me


176 
	#i‰_«me
 
i‰__«me


	)

179 
	`°∫˝y
(
¸eq
.
i‰_«me
, 
öãrÁ˚
, 
IFNAMSIZ
);

180 
¸eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = 0;

181 i‡(
	`io˘l
(
s
, 
SIOCGPPPCSTATS
, &
¸eq
) < 0) {

182 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

183 i‡(
î∫o
 =
ENOTTY
) {

184 
	`Ârötf
(
°dîr
, "no kernel compression support\n");

185 i‡(
zÊag
)

186 
	`exô
(1);

187 
rÊag
 = 0;

189 
	`≥º‹
("couldn't get PPP compression stats");

190 
	`exô
(1);

194 #ifde‡
__löux__


195 i‡(
¸eq
.
°©s
.
c
.
byãs_out
 == 0) {

196 
¸eq
.
°©s
.
c
.
byãs_out
 = cªq.°©s.c.
comp_byãs
 + cªq.°©s.c.
öc_byãs
;

197 
¸eq
.
°©s
.
c
.
ö_cou¡
 = cªq.°©s.c.
unc_byãs
;

199 i‡(
¸eq
.
°©s
.
c
.
byãs_out
 == 0)

200 
¸eq
.
°©s
.
c
.
øtio
 = 0.0;

202 
¸eq
.
°©s
.
c
.
øtio
 = 256.0 * cªq.°©s.c.
ö_cou¡
 /

203 
¸eq
.
°©s
.
c
.
byãs_out
;

205 i‡(
¸eq
.
°©s
.
d
.
byãs_out
 == 0) {

206 
¸eq
.
°©s
.
d
.
byãs_out
 = cªq.°©s.d.
comp_byãs
 + cªq.°©s.d.
öc_byãs
;

207 
¸eq
.
°©s
.
d
.
ö_cou¡
 = cªq.°©s.d.
unc_byãs
;

209 i‡(
¸eq
.
°©s
.
d
.
byãs_out
 == 0)

210 
¸eq
.
°©s
.
d
.
øtio
 = 0.0;

212 
¸eq
.
°©s
.
d
.
øtio
 = 256.0 * cªq.°©s.d.
ö_cou¡
 /

213 
¸eq
.
°©s
.
d
.
byãs_out
;

216 *
c•
 = 
¸eq
.
°©s
;

217 
	}
}

222 
	$°rio˘l
(
fd
, 
cmd
, 
±r
, 
ûí
, 
ﬁí
)

223 
fd
, 
cmd
, 
ûí
, 
ﬁí
;

224 *
±r
;

226 
°rio˘l
 
°r
;

228 
°r
.
ic_cmd
 = 
cmd
;

229 
°r
.
ic_timout
 = 0;

230 
°r
.
ic_Àn
 = 
ûí
;

231 
°r
.
ic_dp
 = 
±r
;

232 i‡(
	`io˘l
(
fd
, 
I_STR
, &
°r
) == -1)

234 i‡(
°r
.
ic_Àn
 !
ﬁí
)

235 
	`Ârötf
(
°dîr
, "strioctl:Éxpected %d bytes, got %d for cmd %x\n",

236 
ﬁí
, 
°r
.
ic_Àn
, 
cmd
);

238 
	}
}

241 
	$gë_µp_°©s
(
cuΩ
)

242 
µp_°©s
 *
cuΩ
;

244 i‡(
	`°rio˘l
(
s
, 
PPPIO_GETSTAT
, 
cuΩ
, 0, (*curp)) < 0) {

245 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

246 i‡(
î∫o
 =
EINVAL
)

247 
	`Ârötf
(
°dîr
, "kernel support missing\n");

249 
	`≥º‹
("couldn't get PPP statistics");

250 
	`exô
(1);

252 
	}
}

255 
	$gë_µp_c°©s
(
c•
)

256 
µp_comp_°©s
 *
c•
;

258 i‡(
	`°rio˘l
(
s
, 
PPPIO_GETCSTAT
, 
c•
, 0, (*csp)) < 0) {

259 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

260 i‡(
î∫o
 =
ENOTTY
) {

261 
	`Ârötf
(
°dîr
, "no kernel compression support\n");

262 i‡(
zÊag
)

263 
	`exô
(1);

264 
rÊag
 = 0;

266 
	`≥º‹
("couldn't get PPP compression statistics");

267 
	`exô
(1);

270 
	}
}

274 
	#MAX0
(
a
Ë(()◊Ë> 0? (a): 0)

	)

275 
	#V
(
off£t
Ë
	`MAX0
(
cur
.off£à- 
ﬁd
.off£t)

	)

276 
	#W
(
off£t
Ë
	`MAX0
(
ccs
.off£à- 
ocs
.off£t)

	)

278 
	#RATIO
(
c
, 
i
, 
u
Ë((cË=0? 1.0: (uË/ (()(cË+ (i)))

	)

279 
	#CRATE
(
x
Ë
	`RATIO
(
	`W
(x.
comp_byãs
), W(x.
öc_byãs
), W(x.
unc_byãs
))

	)

281 
	#KBPS
(
n
Ë(“Ë/ (
öãrvÆ
 * 1000.0))

	)

290 
	$öçr
()

292 
löe
 = 0;

293 
sig£t_t
 
ﬁdmask
, 
mask
;

294 *
bunô
;

295 
øãf
 = 0;

296 
µp_°©s
 
cur
, 
ﬁd
;

297 
µp_comp_°©s
 
ccs
, 
ocs
;

299 
	`mem£t
(&
ﬁd
, 0, (old));

300 
	`mem£t
(&
ocs
, 0, (ocs));

303 
	`gë_µp_°©s
(&
cur
);

304 i‡(
zÊag
 || 
rÊag
)

305 
	`gë_µp_c°©s
(&
ccs
);

307 ()
	`sig«l
(
SIGALRM
, 
ˇtchÆ¨m
);

308 
sig«Œed
 = 0;

309 ()
	`Æ¨m
(
öãrvÆ
);

311 i‡((
löe
 % 20) == 0) {

312 i‡(
zÊag
) {

313 
	`¥ötf
("IN: COMPRESSED INCOMPRESSIBLE COMP | ");

314 
	`¥ötf
("OUT: COMPRESSED INCOMPRESSIBLE COMP\n");

315 
bunô
 = 
dÊag
? "KB/S": "BYTE";

316 
	`¥ötf
(" %† PACK %† PACK RATIO | ", 
bunô
, bunit);

317 
	`¥ötf
(" %† PACK %† PACK RATIO", 
bunô
, bunit);

319 
	`¥ötf
("%8.8s %6.6s %6.6s",

322 i‡(!
rÊag
)

323 
	`¥ötf
(" %6.6s %6.6s", "VJUNC", "VJERR");

324 i‡(
vÊag
)

325 
	`¥ötf
(" %6.6s %6.6s", "VJTOSS", "NON-VJ");

326 i‡(
rÊag
)

327 
	`¥ötf
(" %6.6s %6.6s", "RATIO", "UBYTE");

328 
	`¥ötf
(" | %8.8s %6.6s %6.6s",

331 i‡(!
rÊag
)

332 
	`¥ötf
(" %6.6s %6.6s", "VJUNC", "NON-VJ");

333 i‡(
vÊag
)

334 
	`¥ötf
(" %6.6s %6.6s", "VJSRCH", "VJMISS");

335 i‡(
rÊag
)

336 
	`¥ötf
(" %6.6s %6.6s", "RATIO", "UBYTE");

338 
	`putch¨
('\n');

341 i‡(
zÊag
) {

342 i‡(
øãf
) {

343 
	`¥ötf
("%8.3f %6u %8.3f %6u %6.2f",

344 
	`KBPS
(
	`W
(
d
.
comp_byãs
)),

345 
	`W
(
d
.
comp_∑ckës
),

346 
	`KBPS
(
	`W
(
d
.
öc_byãs
)),

347 
	`W
(
d
.
öc_∑ckës
),

348 
ccs
.
d
.
øtio
 / 256.0);

349 
	`¥ötf
(" | %8.3f %6u %8.3f %6u %6.2f",

350 
	`KBPS
(
	`W
(
c
.
comp_byãs
)),

351 
	`W
(
c
.
comp_∑ckës
),

352 
	`KBPS
(
	`W
(
c
.
öc_byãs
)),

353 
	`W
(
c
.
öc_∑ckës
),

354 
ccs
.
c
.
øtio
 / 256.0);

356 
	`¥ötf
("%8u %6u %8u %6u %6.2f",

357 
	`W
(
d
.
comp_byãs
),

358 
	`W
(
d
.
comp_∑ckës
),

359 
	`W
(
d
.
öc_byãs
),

360 
	`W
(
d
.
öc_∑ckës
),

361 
ccs
.
d
.
øtio
 / 256.0);

362 
	`¥ötf
(" | %8u %6u %8u %6u %6.2f",

363 
	`W
(
c
.
comp_byãs
),

364 
	`W
(
c
.
comp_∑ckës
),

365 
	`W
(
c
.
öc_byãs
),

366 
	`W
(
c
.
öc_∑ckës
),

367 
ccs
.
c
.
øtio
 / 256.0);

371 i‡(
øãf
)

372 
	`¥ötf
("%8.3f", 
	`KBPS
(
	`V
(
p
.
µp_ibyãs
)));

374 
	`¥ötf
("%8u", 
	`V
(
p
.
µp_ibyãs
));

375 
	`¥ötf
(" %6u %6u",

376 
	`V
(
p
.
µp_ùackës
),

377 
	`V
(
vj
.
vjs_com¥es£dö
));

378 i‡(!
rÊag
)

379 
	`¥ötf
(" %6u %6u",

380 
	`V
(
vj
.
vjs_uncom¥es£dö
),

381 
	`V
(
vj
.
vjs_îr‹ö
));

382 i‡(
vÊag
)

383 
	`¥ötf
(" %6u %6u",

384 
	`V
(
vj
.
vjs_tos£d
),

385 
	`V
(
p
.
µp_ùackës
Ë- V(
vj
.
vjs_com¥es£dö
)

386 - 
	`V
(
vj
.
vjs_uncom¥es£dö
Ë- V(vj.
vjs_îr‹ö
));

387 i‡(
rÊag
) {

388 
	`¥ötf
(" %6.2‡", 
	`CRATE
(
d
));

389 i‡(
øãf
)

390 
	`¥ötf
("%6.2f", 
	`KBPS
(
	`W
(
d
.
unc_byãs
)));

392 
	`¥ötf
("%6u", 
	`W
(
d
.
unc_byãs
));

394 i‡(
øãf
)

395 
	`¥ötf
(" | %8.3f", 
	`KBPS
(
	`V
(
p
.
µp_obyãs
)));

397 
	`¥ötf
(" | %8u", 
	`V
(
p
.
µp_obyãs
));

398 
	`¥ötf
(" %6u %6u",

399 
	`V
(
p
.
µp_›ackës
),

400 
	`V
(
vj
.
vjs_com¥es£d
));

401 i‡(!
rÊag
)

402 
	`¥ötf
(" %6u %6u",

403 
	`V
(
vj
.
vjs_∑ckës
Ë- V(vj.
vjs_com¥es£d
),

404 
	`V
(
p
.
µp_›ackës
Ë- V(
vj
.
vjs_∑ckës
));

405 i‡(
vÊag
)

406 
	`¥ötf
(" %6u %6u",

407 
	`V
(
vj
.
vjs_£¨ches
),

408 
	`V
(
vj
.
vjs_mis£s
));

409 i‡(
rÊag
) {

410 
	`¥ötf
(" %6.2‡", 
	`CRATE
(
c
));

411 i‡(
øãf
)

412 
	`¥ötf
("%6.2f", 
	`KBPS
(
	`W
(
c
.
unc_byãs
)));

414 
	`¥ötf
("%6u", 
	`W
(
c
.
unc_byãs
));

419 
	`putch¨
('\n');

420 
	`fÊush
(
°dout
);

421 
löe
++;

423 
cou¡
--;

424 i‡(!
öföôe
 && !
cou¡
)

427 
	`sigem±y£t
(&
mask
);

428 
	`sigadd£t
(&
mask
, 
SIGALRM
);

429 
	`sig¥ocmask
(
SIG_BLOCK
, &
mask
, &
ﬁdmask
);

430 i‡(!
sig«Œed
) {

431 
	`sigem±y£t
(&
mask
);

432 
	`sigsu•íd
(&
mask
);

434 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

435 
sig«Œed
 = 0;

436 ()
	`Æ¨m
(
öãrvÆ
);

438 i‡(!
aÊag
) {

439 
ﬁd
 = 
cur
;

440 
ocs
 = 
ccs
;

441 
øãf
 = 
dÊag
;

444 
	}
}

447 
	$maö
(
¨gc
, 
¨gv
)

448 
¨gc
;

449 *
¨gv
[];

451 
c
;

452 #ifde‡
STREAMS


453 
unô
;

454 *
dev
;

457 
öãrÁ˚
 = 
PPP_DRV_NAME
 "0";

458 i‡((
¥og«me
 = 
	`°ºchr
(
¨gv
[0], '/')Ë=
NULL
)

459 
¥og«me
 = 
¨gv
[0];

461 ++
¥og«me
;

463 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "advrzc:w:")) != -1) {

464 
c
) {

466 ++
aÊag
;

469 ++
dÊag
;

472 ++
vÊag
;

475 ++
rÊag
;

478 ++
zÊag
;

481 
cou¡
 = 
	`©oi
(
›èrg
);

482 i‡(
cou¡
 <= 0)

483 
	`ußge
();

486 
öãrvÆ
 = 
	`©oi
(
›èrg
);

487 i‡(
öãrvÆ
 <= 0)

488 
	`ußge
();

491 
	`ußge
();

494 
¨gc
 -
›töd
;

495 
¨gv
 +
›töd
;

497 i‡(!
öãrvÆ
 && 
cou¡
)

498 
öãrvÆ
 = 5;

499 i‡(
öãrvÆ
 && !
cou¡
)

500 
öföôe
 = 1;

501 i‡(!
öãrvÆ
 && !
cou¡
)

502 
cou¡
 = 1;

503 i‡(
aÊag
)

504 
dÊag
 = 0;

506 i‡(
¨gc
 > 1)

507 
	`ußge
();

508 i‡(
¨gc
 > 0)

509 
öãrÁ˚
 = 
¨gv
[0];

511 #i‚de‡
STREAMS


513 
i‰eq
 
i‰
;

515 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

516 i‡(
s
 < 0) {

517 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

518 
	`≥º‹
("couldn't create IP socket");

519 
	`exô
(1);

522 #ifde‡
__löux__


523 #unde‡
i‰_«me


524 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

526 
	`°∫˝y
(
i‰
.
i‰_«me
, 
öãrÁ˚
, 
IFNAMSIZ
);

527 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = 0;

528 i‡(
	`io˘l
(
s
, 
SIOCGIFFLAGS
, (
ˇddr_t
)&
i‰
) < 0) {

529 
	`Ârötf
(
°dîr
, "%s:Çonexistent interface '%s' specified\n",

530 
¥og«me
, 
öãrÁ˚
);

531 
	`exô
(1);

536 i‡(
	`ssˇnf
(
öãrÁ˚
, 
PPP_DRV_NAME
 "%d", &
unô
) != 1) {

537 
	`Ârötf
(
°dîr
, "%s: invalid interface '%s' specified\n",

538 
¥og«me
, 
öãrÁ˚
);

541 #ifde‡
__osf__


542 
dev
 = "/dev/streams/ppp";

544 
dev
 = "/dev/" 
PPP_DRV_NAME
;

546 i‡((
s
 = 
	`›í
(
dev
, 
O_RDONLY
)) < 0) {

547 
	`Ârötf
(
°dîr
, "%s: couldn'à›í ", 
¥og«me
);

548 
	`≥º‹
(
dev
);

549 
	`exô
(1);

551 i‡(
	`°rio˘l
(
s
, 
PPPIO_ATTACH
, &
unô
, (), 0) < 0) {

552 
	`Ârötf
(
°dîr
, "%s:Öµ%d i†nŸávaûabÀ\n", 
¥og«me
, 
unô
);

553 
	`exô
(1);

558 
	`öçr
();

559 
	`exô
(0);

560 
	}
}

	@scripts/chatchat/chatchat.c

82 
	~<sys/time.h
>

83 
	~<°dio.h
>

84 
	~<sys/ty≥s.h
>

85 
	~<sys/°©.h
>

86 
	~<f˙é.h
>

87 
	~<uni°d.h
>

88 
	~<°rög.h
>

93 
	#MAXINPUT
 80

	)

142 
	$maö
(
¨gc
, * 
¨gv
[])

144 
ªtvÆ
;

146 
	`¸óã_™d_wrôe_pùe
(* 
pùíame
);

148 i‡(
¨gc
 != 2)

150 
	`Ârötf
(
°dîr
, "ußge: %†pùíame\n", 
¨gv
[0]);

151 
ªtvÆ
 = -1;

155 
ªtvÆ
 = 
	`¸óã_™d_wrôe_pùe
(
¨gv
[1]);

157  (
ªtvÆ
);

158 
	}
}

208 
	$¸óã_™d_wrôe_pùe
(* 
pùíame
)

210 
ªtvÆ
, 
¸óãd
, 
pùefd
, 
ƒód
, 
nwrôãn
;

211 
öput
[
MAXINPUT
];

212 
îr°rög
[180];

214 
	`¸óã_pùe
(* 
pùíame
);

215 
	`wrôe_to_pùe
(
pùefd
, * 
öput
, 
nch¨
);

217 
¸óãd
 = 
	`¸óã_pùe
(
pùíame
);

219 i‡(-1 =
¸óãd
)

221 
	`•rötf
(
îr°rög
, "u«bÀÅÿ¸óãÖùê'%s'", 
pùíame
);

222 
	`≥º‹
(
îr°rög
);

223 
ªtvÆ
 = -1;

231 
pùefd
 = 
	`›í
(
pùíame
, 
O_WRONLY
);

233 i‡(-1 =
pùefd
)

235 
	`•rötf
(
îr°rög
, "u«bÀÅÿ›íÖùê'%s'", 
pùíame
);

236 
	`≥º‹
(
îr°rög
);

237 
ªtvÆ
 = -1;

241 
	`Ârötf
(
°dîr
, "%s \n %s",

244 
ƒód
 = 
	`ªad
(
STDIN_FILENO
, (*)
öput
, 
MAXINPUT
);

247 i‡(0 >
ƒód
)

249 
	`≥º‹
("unableÅoÑead from stdin");

250 
ªtvÆ
 = -1;

256 
öput
[
ƒód
 -1] = 0;

257 
ƒód
--;

258 
nwrôãn
 = 
	`wrôe_to_pùe
(
pùefd
, 
öput
, 
ƒód
);

260 
ªtvÆ
 = 
nwrôãn
;

262 
	`˛o£
(
pùefd
);

266 i‡(
	`u∆ök
(
pùíame
) < 0)

267 
	`≥º‹
("Warning: couldn'tÑemoveÖipe");

270 (
ªtvÆ
);

271 
	}
}

322 
	$¸óã_pùe
(* 
pùíame
)

324 
mode_t
 
ﬁd_umask
;

325 
¸óãd
;

330 
ﬁd_umask
 = 
	`umask
(000);

332 
¸óãd
 = 
	`mknod
(
pùíame
, 
S_IFIFO
 | 
S_IRWXU
 | 
S_IWGRP
 | 
S_IWOTH
,

333 (
dev_t
)
NULL
);

337 ()
	`umask
(
ﬁd_umask
);

339 i‡(-1 =
¸óãd
)

341 
	`≥º‹
("unableÅo createÖipe");

344 (
¸óãd
);

345 
	}
}

396 
	$wrôe_to_pùe
(
pùefd
, * 
öput
, 
nch¨
)

398 
nwrôãn
;

401 
nwrôãn
 = 
	`wrôe
(
pùefd
, (*)
öput
, 
nch¨
);

403 i‡(-1 =
nwrôãn
)

405 
	`≥º‹
("unableÅo writeÅoÖipe");

408 (
nwrôãn
);

409 
	}
}

	@solaris/ppp.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/∑øm.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/°ªam.h
>

46 
	~<sys/°r›ts.h
>

47 
	~<sys/î∫o.h
>

48 #ifde‡
__osf__


49 
	~<sys/io˘l.h
>

50 
	~<sys/cmn_îr.h
>

51 
	#que˛ass
(
mp
Ë((mp)->
b_b™d
 & 
QPCTL
)

	)

53 
	~<sys/ioccom.h
>

55 
	~<sys/time.h
>

56 #ifde‡
SVR4


57 
	~<sys/cmn_îr.h
>

58 
	~<sys/c⁄f.h
>

59 
	~<sys/dÕi.h
>

60 
	~<sys/ddi.h
>

61 #ifde‡
SOL2


62 
	~<sys/ksynch.h
>

63 
	~<sys/k°©.h
>

64 
	~<sys/sunddi.h
>

65 
	~<sys/ëhî√t.h
>

67 
	~<sys/sockë.h
>

68 
	~<sys/sockio.h
>

69 
	~<√t/if.h
>

70 
	~<√töë/ö.h
>

73 
	~<sys/u£r.h
>

75 
	~<√t/µp_defs.h
>

76 
	~<√t/µpio.h
>

77 
	~"µp_mod.h
"

83 #ifde‡
PRIOQ


86 
	~<√töë/ö.h
>

88 #ifde‡
__STDC__


89 
	#__P
(
x
Ë
	)
x

91 
	#__P
(
x
Ë()

	)

97 #i‚de‡
ETHERTYPE_IP


98 
	#ETHERTYPE_IP
 0x800

	)

101 #i‡!
deföed
(
ETHERTYPE_IPV6
)

102 
	#ETHERTYPE_IPV6
 0x86dd

	)

105 #i‡!
deföed
(
ETHERTYPE_ALLSAP
Ë&& deföed(
SOL2
)

106 
	#ETHERTYPE_ALLSAP
 0

	)

109 #i‡!
deföed
(
PPP_ALLSAP
Ë&& deföed(
SOL2
)

110 
	#PPP_ALLSAP
 
PPP_ALLSTATIONS


	)

113 
time_t
 
time
;

115 #ifde‡
SOL2


122 
krwlock_t
 
	gµp_lowî_lock
;

123 
	#LOCK_LOWER_W
 
	`rw_íãr
(&
µp_lowî_lock
, 
RW_WRITER
)

	)

124 
	#LOCK_LOWER_R
 
	`rw_íãr
(&
µp_lowî_lock
, 
RW_READER
)

	)

125 
	#TRYLOCK_LOWER_R
 
	`rw_åyíãr
(&
µp_lowî_lock
, 
RW_READER
)

	)

126 
	#UNLOCK_LOWER
 
	`rw_exô
(&
µp_lowî_lock
)

	)

128 
	#MT_ENTER
(
x
Ë
	`muãx_íãr
(x)

	)

129 
	#MT_EXIT
(
x
Ë
	`muãx_exô
(x)

	)

161 
	#LOCK_LOWER_W
 0

	)

162 
	#LOCK_LOWER_R
 0

	)

163 
	#TRYLOCK_LOWER_R
 1

	)

164 
	#UNLOCK_LOWER
 0

	)

165 
	#MT_ENTER
(
x
Ë0

	)

166 
	#MT_EXIT
(
x
Ë0

	)

173 
	suµî°r
 {

174 
mö‹_t
 
	mmn
;

175 
uµî°r
 *
	m√xtmn
;

176 
queue_t
 *
	mq
;

177 
	mÊags
;

178 
	m°©e
;

179 
	mßp
;

180 
	mªq_ßp
;

181 
uµî°r
 *
	mµa
;

182 
uµî°r
 *
	m√xt
;

183 
uöt
 
	mioc_id
;

184 
NPmode
 
	m≈mode
;

185 
	mrblocked
;

191 
	mµa_id
;

192 
queue_t
 *
	mlowîq
;

193 
uµî°r
 *
	m√xç∑
;

194 
	mmru
;

195 
	mmtu
;

196 
µp°©
 
	m°©s
;

197 
time_t
 
	mœ°_£¡
;

198 
time_t
 
	mœ°_ªcv
;

199 #ifde‡
SOL2


200 
kmuãx_t
 
	m°©s_lock
;

201 
k°©_t
 *
	mk°©s
;

203 #ifde‡
LACHTCP


204 
	mifÊags
;

205 
	mi‚ame
[
IFNAMSIZ
];

206 
if°©s
 
	mif°©s
;

208 } 
	tuµî°r_t
;

211 
	#US_PRIV
 1

	)

212 
	#US_CONTROL
 2

	)

213 
	#US_BLOCKED
 4

	)

214 
	#US_LASTMOD
 8

	)

215 
	#US_DBGLOG
 0x10

	)

216 
	#US_RBLOCKED
 0x20

	)

218 #i‡
deföed
(
SOL2
)

219 #i‡
DL_CURRENT_VERSION
 >= 2

220 
	#US_PROMISC
 0x40

	)

222 
	#US_RAWDATA
 0x80

	)

225 #ifde‡
PRIOQ


226 
u_ch¨
 
	gmax_b™d
=0;

227 
u_ch¨
 
	gdef_b™d
=0;

229 
	#IPPORT_DEFAULT
 65535

	)

241 
u_sh‹t
 
	g¥ioq_èbÀ
[]= {

246 
IPPORT_DEFAULT
, 0,

253 
uµî°r_t
 *
	gmö‹_devs
 = 
NULL
;

254 
uµî°r_t
 *
	gµas
 = 
NULL
;

256 #ifde‡
SVR4


257 
µp›í
 
__P
((
queue_t
 *, 
dev_t
 *, , , 
¸ed_t
 *));

258 
µp˛o£
 
__P
((
queue_t
 *, , 
¸ed_t
 *));

260 
µp›í
 
__P
((
queue_t
 *, , , ));

261 
µp˛o£
 
__P
((
queue_t
 *, ));

263 
µpuΩut
 
__P
((
queue_t
 *, 
mblk_t
 *));

264 
µpuwput
 
__P
((
queue_t
 *, 
mblk_t
 *));

265 
µpur§v
 
__P
((
queue_t
 *));

266 
µpuw§v
 
__P
((
queue_t
 *));

267 
µ∂Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

268 
µ∂wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

269 
µ∂r§v
 
__P
((
queue_t
 *));

270 
µ∂w§v
 
__P
((
queue_t
 *));

271 #i‚de‡
NO_DLPI


272 
dÕi_ªque°
 
__P
((
queue_t
 *, 
mblk_t
 *, 
uµî°r_t
 *));

273 
dÕi_îr‹
 
__P
((
queue_t
 *, 
uµî°r_t
 *, , , ));

274 
dÕi_ok
 
__P
((
queue_t
 *, ));

276 
£nd_d©a
 
__P
((
mblk_t
 *, 
uµî°r_t
 *));

277 
√w_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

278 
©èch_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

279 #i‚de‡
NO_DLPI


280 
dëach_µa
 
__P
((
queue_t
 *, 
mblk_t
 *));

282 
dëach_lowî
 
__P
((
queue_t
 *, 
mblk_t
 *));

283 
debug_dump
 
__P
((
queue_t
 *, 
mblk_t
 *));

284 
uµî°r_t
 *
föd_de°
 
__P
((upperstr_t *, ));

285 #i‡
deföed
(
SOL2
)

286 
uµî°r_t
 *
föd_¥omisc
 
__P
((upperstr_t *, ));

287 
mblk_t
 *
¥ïíd_ëhî
 
__P
((
uµî°r_t
 *, mblk_t *, ));

288 
mblk_t
 *
¥ïíd_udöd
 
__P
((
uµî°r_t
 *, mblk_t *, ));

289 
¥omisc_£ndup
 
__P
((
uµî°r_t
 *, 
mblk_t
 *, , ));

291 
put˘l2
 
__P
((
queue_t
 *, , , ));

292 
put˘l4
 
__P
((
queue_t
 *, , , ));

293 
∑ss_∑ckë
 
__P
((
uµî°r_t
 *
µa
, 
mblk_t
 *
mp
, 
outbound
));

294 #ifde‡
FILTER_PACKETS


295 
ù_h¨d_fûãr
 
__P
((
uµî°r_t
 *
µa
, 
mblk_t
 *
mp
, 
outbound
));

298 
	#PPP_ID
 0xb1a6

	)

299 
moduÀ_öfo
 
	gµp_öfo
 = {

300 #ifde‡
PRIOQ


301 
PPP_ID
, "ppp", 0, 512, 512, 384

303 
PPP_ID
, "ppp", 0, 512, 512, 128

307 
qöô
 
	gµpuröt
 = {

308 
µpuΩut
, 
µpur§v
, 
µp›í
, 
µp˛o£
, 
NULL
, &
µp_öfo
, NULL

311 
qöô
 
	gµpuwöt
 = {

312 
µpuwput
, 
µpuw§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

315 
qöô
 
	gµ∂röt
 = {

316 
µ∂Ωut
, 
µ∂r§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

319 
qöô
 
	gµ∂wöt
 = {

320 
µ∂wput
, 
µ∂w§v
, 
NULL
, NULL, NULL, &
µp_öfo
, NULL

323 #ifde‡
LACHTCP


324 
if°©s
 *ifstats;

325 
	gµpdevÊag
 = 0;

328 
°ªamèb
 
	gµpöfo
 = {

329 &
µpuröt
, &
µpuwöt
,

330 &
µ∂röt
, &
µ∂wöt


333 
	gµp_cou¡
;

338 #ifde‡
SOL2


339 
	#INCR_IPACKETS
(
µa
) \

340 i‡(
µa
->
k°©s
 != 0) { \

341 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[0].
vÆue
.
ul
++; \

342 }

	)

343 
	#INCR_IERRORS
(
µa
) \

344 i‡(
µa
->
k°©s
 != 0) { \

345 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[1].
vÆue
.
ul
++; \

346 }

	)

347 
	#INCR_OPACKETS
(
µa
) \

348 i‡(
µa
->
k°©s
 != 0) { \

349 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[2].
vÆue
.
ul
++; \

350 }

	)

351 
	#INCR_OERRORS
(
µa
) \

352 i‡(
µa
->
k°©s
 != 0) { \

353 
	`KSTAT_NAMED_PTR
(
µa
->
k°©s
)[3].
vÆue
.
ul
++; \

354 }

	)

357 #ifde‡
LACHTCP


358 
	#INCR_IPACKETS
(
µa
Ëµa->
if°©s
.
ifs_ùackës
++;

	)

359 
	#INCR_IERRORS
(
µa
Ëµa->
if°©s
.
ifs_õº‹s
++;

	)

360 
	#INCR_OPACKETS
(
µa
Ëµa->
if°©s
.
ifs_›ackës
++;

	)

361 
	#INCR_OERRORS
(
µa
Ëµa->
if°©s
.
ifs_€º‹s
++;

	)

368 #ifde‡
SVR4


369 
	$µp›í
(
q
, 
devp
, 
oÊag
, 
sÊag
, 
¸edp
)

370 
queue_t
 *
q
;

371 
dev_t
 *
devp
;

372 
oÊag
, 
sÊag
;

373 
¸ed_t
 *
¸edp
;

375 
	$µp›í
(
q
, 
dev
, 
oÊag
, 
sÊag
)

376 
queue_t
 *
q
;

377 
dev
;

378 
oÊag
, 
sÊag
;

381 
uµî°r_t
 *
up
;

382 
uµî°r_t
 **
¥evp
;

383 
mö‹_t
 
mn
;

384 #ifde‡
PRIOQ


385 
u_sh‹t
 *
±r
;

386 
u_ch¨
 
√w_b™d
;

389 i‡(
q
->
q_±r
)

390 
	`DRV_OPEN_OK
(
dev
);

392 #ifde‡
PRIOQ


397 
max_b™d
 = 1;

398 
def_b™d
 = 0;

399 
±r
 = 
¥ioq_èbÀ
;

400 *
±r
) {

401 
√w_b™d
 = 1;

402 *
±r
)

403 i‡(*
±r
++ =
IPPORT_DEFAULT
) {

404 
√w_b™d
 = 0;

405 
def_b™d
 = 
max_b™d
;

407 
max_b™d
 +
√w_b™d
;

408 
±r
++;

410 i‡(
def_b™d
)

411 
def_b™d
 = 
max_b™d
 - def_band;

412 --
max_b™d
;

415 i‡(
sÊag
 =
CLONEOPEN
) {

416 
mn
 = 0;

417 
¥evp
 = &
mö‹_devs
; (
up
 = *¥evpË!0;Öªv∞&up->
√xtmn
) {

418 i‡(
up
->
mn
 != mn)

420 ++
mn
;

423 #ifde‡
SVR4


424 
mn
 = 
	`gëmö‹
(*
devp
);

426 
mn
 = 
	`mö‹
(
dev
);

428 
¥evp
 = &
mö‹_devs
; (
up
 = *¥evpË!0;Öªv∞&up->
√xtmn
) {

429 i‡(
up
->
mn
 >= mn)

432 i‡(
up
->
mn
 == mn) {

434 
q
->
q_±r
 = 
	`WR
(q)->q_±∏(
ˇddr_t
Ë
up
;

435 
	`DRV_OPEN_OK
(
dev
);

442 
up
 = (
uµî°r_t
 *Ë
	`ALLOC_SLEEP
((upperstr_t));

443 
	`bzîo
((
ˇddr_t
Ë
up
, (
uµî°r_t
));

444 i‡(
up
 == 0) {

445 
	`DPRINT
("pppopen: out of kernel memory\n");

446 
	`OPEN_ERROR
(
ENXIO
);

448 
up
->
√xtmn
 = *
¥evp
;

449 *
¥evp
 = 
up
;

450 
up
->
mn
 = mn;

451 #ifde‡
SVR4


452 *
devp
 = 
	`makedevi˚
(
	`gëmaj‹
(*devp), 
mn
);

454 
up
->
q
 = q;

455 i‡(
	`NOTSUSER
() == 0)

456 
up
->
Êags
 |
US_PRIV
;

457 #i‚de‡
NO_DLPI


458 
up
->
°©e
 = 
DL_UNATTACHED
;

460 #ifde‡
LACHTCP


461 
up
->
ifÊags
 = 
IFF_UP
 | 
IFF_POINTOPOINT
;

463 
up
->
ßp
 = -1;

464 
up
->
œ°_£¡
 = up->
œ°_ªcv
 = 
time
;

465 
up
->
≈mode
 = 
NPMODE_DROP
;

466 
q
->
q_±r
 = (
ˇddr_t
Ë
up
;

467 
	`WR
(
q
)->
q_±r
 = (
ˇddr_t
Ë
up
;

468 
	`n€«bÀ
(
	`WR
(
q
));

469 #ifde‡
SOL2


470 
	`muãx_öô
(&
up
->
°©s_lock
, 
NULL
, 
MUTEX_DRIVER
, NULL);

472 ++
µp_cou¡
;

474 
	`q¥ocs⁄
(
q
);

475 
	`DRV_OPEN_OK
(
	`makedev
(
	`maj‹
(
dev
), 
mn
));

476 
	}
}

479 #ifde‡
SVR4


480 
	$µp˛o£
(
q
, 
Êag
, 
¸edp
)

481 
queue_t
 *
q
;

482 
Êag
;

483 
¸ed_t
 *
¸edp
;

485 
	$µp˛o£
(
q
, 
Êag
)

486 
queue_t
 *
q
;

487 
Êag
;

490 
uµî°r_t
 *
up
, **
uµ
;

491 
uµî°r_t
 *
as
, *
a¢ext
;

492 
uµî°r_t
 **
¥evp
;

494 
	`q¥ocsoff
(
q
);

496 
up
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

497 i‡(
up
 == 0) {

498 
	`DPRINT
("pppclose: q_ptr = 0\n");

501 i‡(
up
->
Êags
 & 
US_DBGLOG
)

502 
	`DPRINT2
("µp/%d: clo£, fœgs=%x\n", 
up
->
mn
, up->
Êags
);

503 i‡(
up
->
Êags
 & 
US_CONTROL
) {

504 #ifde‡
LACHTCP


505 
if°©s
 *
iÂ
, *
piÂ
;

507 i‡(
up
->
lowîq
 != 0) {

509 
	`DPRINT1
("ppp%d:Üower stream still connected on close?\n",

510 
up
->
mn
);

511 
LOCK_LOWER_W
;

512 
up
->
lowîq
->
q_±r
 = 0;

513 
	`RD
(
up
->
lowîq
)->
q_±r
 = 0;

514 
up
->
lowîq
 = 0;

515 
UNLOCK_LOWER
;

524 
as
 = 
up
->
√xt
;á†!0;á†
a¢ext
) {

525 
a¢ext
 = 
as
->
√xt
;

526 
as
->
√xt
 = 0;

527 
as
->
µa
 = 0;

528 i‡(
as
->
Êags
 & 
US_BLOCKED
) {

529 
as
->
Êags
 &~
US_BLOCKED
;

530 
	`Êushq
(
	`WR
(
as
->
q
), 
FLUSHDATA
);

533 
uµ
 = &
µas
; *uµ !0; uµ = &(*uµ)->
√xç∑
)

534 i‡(*
uµ
 =
up
) {

535 *
uµ
 = 
up
->
√xç∑
;

538 #ifde‡
LACHTCP


540 
iÂ
 = 
if°©s
, 
piÂ
 = 0; iÂ; iÂ = iÂ->
ifs_√xt
) {

541 i‡(
iÂ
 =&
up
->
if°©s
) {

542 i‡(
piÂ
)

543 
piÂ
->
ifs_√xt
 = 
iÂ
->ifs_next;

545 
if°©s
 = 
iÂ
->
ifs_√xt
;

548 
piÂ
 = 
iÂ
;

556 i‡((
as
 = 
up
->
µa
) != 0) {

557 ; 
as
->
√xt
 != 0;ás =ás->next)

558 i‡(
as
->
√xt
 =
up
) {

559 
as
->
√xt
 = 
up
->next;

565 #ifde‡
SOL2


566 i‡(
up
->
k°©s
)

567 
	`k°©_dñëe
(
up
->
k°©s
);

568 
	`muãx_de°roy
(&
up
->
°©s_lock
);

571 
q
->
q_±r
 = 
NULL
;

572 
	`WR
(
q
)->
q_±r
 = 
NULL
;

574 
¥evp
 = &
mö‹_devs
; *¥ev∞!0;Öªv∞&(*¥evp)->
√xtmn
) {

575 i‡(*
¥evp
 =
up
) {

576 *
¥evp
 = 
up
->
√xtmn
;

580 
	`FREE
(
up
, (
uµî°r_t
));

581 --
µp_cou¡
;

584 
	}
}

593 
	$µpuwput
(
q
, 
mp
)

594 
queue_t
 *
q
;

595 
mblk_t
 *
mp
;

597 
uµî°r_t
 *
us
, *
µa
, *
≈s
;

598 
iocblk
 *
i›
;

599 
lökblk
 *
lb
;

600 #ifde‡
LACHTCP


601 
i‰eq
 *
i‰
;

602 
i
;

604 
queue_t
 *
lq
;

605 
îr‹
, 
n
, 
ßp
;

606 
mblk_t
 *
mq
;

607 
µp_idÀ
 *
pù
;

608 #ifde‡
PRIOQ


609 
queue_t
 *
éq
;

611 #ifde‡
NO_DLPI


612 
uµî°r_t
 *
os
;

615 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

616 i‡(
us
 == 0) {

617 
	`DPRINT
("pppuwput: q_ptr = 0!\n");

620 i‡(
mp
 == 0) {

621 
	`DPRINT1
("µpuwput/%d: m∞0!\n", 
us
->
mn
);

624 i‡(
mp
->
b_d©≠
 == 0) {

625 
	`DPRINT1
("µpuwput/%d: mp->b_d©≠ = 0!\n", 
us
->
mn
);

628 
mp
->
b_d©≠
->
db_ty≥
) {

629 #i‚de‡
NO_DLPI


630 
M_PCPROTO
:

631 
M_PROTO
:

632 
	`dÕi_ªque°
(
q
, 
mp
, 
us
);

636 
M_DATA
:

637 i‡(
us
->
Êags
 & 
US_DBGLOG
)

638 
	`DPRINT3
("ppp/%d: uwput M_DATAÜen=%d flags=%x\n",

639 
us
->
mn
, 
	`msgdsize
(
mp
), us->
Êags
);

640 i‡(
us
->
µa
 =0 || 
	`msgdsize
(
mp
Ë> us->µa->
mtu
 + 
PPP_HDRLEN


641 #i‚de‡
NO_DLPI


642 || (
us
->
Êags
 & 
US_CONTROL
) == 0

645 
	`DPRINT1
("µpuwput: junk d©®Àn=%d\n", 
	`msgdsize
(
mp
));

646 
	`‰ìmsg
(
mp
);

649 #ifde‡
NO_DLPI


651 i‡((
us
->
Êags
 & 
US_CONTROL
Ë=0 && !
	`∑ss_∑ckë
(us, 
mp
, 1))

654 i‡(!
	`£nd_d©a
(
mp
, 
us
Ë&& !
	`putq
(
q
, mp))

655 
	`‰ìmsg
(
mp
);

658 
M_IOCTL
:

659 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

660 
îr‹
 = 
EINVAL
;

661 i‡(
us
->
Êags
 & 
US_DBGLOG
)

662 
	`DPRINT3
("ppp/%d: ioctl %x count=%d\n",

663 
us
->
mn
, 
i›
->
ioc_cmd
, i›->
ioc_cou¡
);

664 
i›
->
ioc_cmd
) {

665 #i‡
	`deföed
(
SOL2
)

666 
DLIOCRAW
:

667 
us
->
Êags
 |
US_RAWDATA
;

668 
îr‹
 = 0;

671 
I_LINK
:

672 i‡((
us
->
Êags
 & 
US_CONTROL
Ë=0 || us->
lowîq
 != 0)

674 i‡(
mp
->
b_c⁄t
 == 0) {

675 
	`DPRINT1
("µpuwput/%d: io˘»I_LINK b_c⁄à0!\n", 
us
->
mn
);

678 
lb
 = (
lökblk
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

679 
lq
 = 
lb
->
l_qbŸ
;

680 i‡(
lq
 == 0) {

681 
	`DPRINT1
("µpuwput/%d: io˘»I_LINKÜ_qbŸ = 0!\n", 
us
->
mn
);

684 
LOCK_LOWER_W
;

685 
us
->
lowîq
 = 
lq
;

686 
lq
->
q_±r
 = (
ˇddr_t
Ë
q
;

687 
	`RD
(
lq
)->
q_±r
 = (
ˇddr_t
Ë
us
->
q
;

688 
UNLOCK_LOWER
;

689 
i›
->
ioc_cou¡
 = 0;

690 
îr‹
 = 0;

691 
us
->
Êags
 &~
US_LASTMOD
;

693 
	`qíabÀ
(
q
);

696 
	`put˘l2
(
lq
, 
M_CTL
, 
PPPCTL_UNIT
, 
us
->
µa_id
);

697 
	`put˘l4
(
lq
, 
M_CTL
, 
PPPCTL_MRU
, 
us
->
mru
);

698 
	`put˘l4
(
lq
, 
M_CTL
, 
PPPCTL_MTU
, 
us
->
mtu
);

699 #ifde‡
PRIOQ


704 
	`‰ìze°r
(
lq
);

705 
éq
 = 
lq
;Ålq->
q_√xt
 !
NULL
;Ålq =Ålq->q_next)

707 
	`°rq£t
(
éq
, 
QHIWAT
, 0, 256);

708 
	`°rq£t
(
éq
, 
QLOWAT
, 0, 128);

709 
	`un‰ìze°r
(
lq
);

713 
I_UNLINK
:

714 i‡(
mp
->
b_c⁄t
 == 0) {

715 
	`DPRINT1
("µpuwput/%d: io˘»I_UNLINK b_c⁄à0!\n", 
us
->
mn
);

718 
lb
 = (
lökblk
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

719 #i‡
DEBUG


720 i‡(
us
->
lowîq
 !
lb
->
l_qbŸ
) {

721 
	`DPRINT2
("ppp unlink:Üowerq=%x qbot=%x\n",

722 
us
->
lowîq
, 
lb
->
l_qbŸ
);

726 
i›
->
ioc_cou¡
 = 0;

727 
	`qwrôî
(
q
, 
mp
, 
dëach_lowî
, 
PERIM_OUTER
);

729 
îr‹
 = -1;

732 
PPPIO_NEWPPA
:

733 i‡(
us
->
Êags
 & 
US_CONTROL
)

735 i‡((
us
->
Êags
 & 
US_PRIV
) == 0) {

736 
îr‹
 = 
EPERM
;

740 i‡((
mq
 = 
mp
->
b_c⁄t
) == 0

741 || 
mq
->
b_d©≠
->
db_lim
 - mq->
b_Ωå
 < ()) {

742 
mq
 = 
	`Ælocb
((), 
BPRI_HI
);

743 i‡(
mq
 == 0) {

744 
îr‹
 = 
ENOSR
;

747 i‡(
mp
->
b_c⁄t
 != 0)

748 
	`‰ìmsg
(
mp
->
b_c⁄t
);

749 
mp
->
b_c⁄t
 = 
mq
;

750 
mq
->
b_c⁄t
 = 0;

752 
i›
->
ioc_cou¡
 = ();

753 
mq
->
b_w±r
 = mq->
b_Ωå
 + ();

754 
	`qwrôî
(
q
, 
mp
, 
√w_µa
, 
PERIM_OUTER
);

756 
îr‹
 = -1;

759 
PPPIO_ATTACH
:

762 i‡(
i›
->
ioc_cou¡
 !(Ë|| 
us
->
µa
 != 0)

764 i‡(
mp
->
b_c⁄t
 == 0) {

765 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_ATTACH b_c⁄à0!\n", 
us
->
mn
);

768 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

769 
µa
 = 
µas
;Ö∑ !0;Ö∑ =Ö∑->
√xç∑
)

770 i‡(
µa
->
µa_id
 =
n
)

772 i‡(
µa
 == 0)

774 
us
->
µa
 =Öpa;

775 
i›
->
ioc_cou¡
 = 0;

776 
	`qwrôî
(
q
, 
mp
, 
©èch_µa
, 
PERIM_OUTER
);

778 
îr‹
 = -1;

781 #ifde‡
NO_DLPI


782 
PPPIO_BIND
:

784 i‡(
i›
->
ioc_cou¡
 !(Ë|| 
us
->
µa
 == 0)

786 i‡(
mp
->
b_c⁄t
 == 0) {

787 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_BIND b_c⁄à0!\n", 
us
->
mn
);

790 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

792 i‡(
n
 < 0x21 ||Ç > 0x3fff || (n & 0x101) != 1)

795 
os
 = 
us
->
µa
; o†!0; o†os->
√xt
)

796 i‡(
os
->
ßp
 =
n
)

798 i‡(
os
 != 0)

800 
us
->
ßp
 = 
n
;

801 
i›
->
ioc_cou¡
 = 0;

802 
îr‹
 = 0;

806 
PPPIO_MRU
:

807 i‡(
i›
->
ioc_cou¡
 !(Ë|| (
us
->
Êags
 & 
US_CONTROL
) == 0)

809 i‡(
mp
->
b_c⁄t
 == 0) {

810 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_MRU b_c⁄à0!\n", 
us
->
mn
);

813 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

814 i‡(
n
 <0 ||Ç > 
PPP_MAXMRU
)

816 i‡(
n
 < 
PPP_MRU
)

817 
n
 = 
PPP_MRU
;

818 
us
->
mru
 = 
n
;

819 i‡(
us
->
lowîq
)

820 
	`put˘l4
(
us
->
lowîq
, 
M_CTL
, 
PPPCTL_MRU
, 
n
);

821 
îr‹
 = 0;

822 
i›
->
ioc_cou¡
 = 0;

825 
PPPIO_MTU
:

826 i‡(
i›
->
ioc_cou¡
 !(Ë|| (
us
->
Êags
 & 
US_CONTROL
) == 0)

828 i‡(
mp
->
b_c⁄t
 == 0) {

829 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_MTU b_c⁄à0!\n", 
us
->
mn
);

832 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

833 i‡(
n
 <0 ||Ç > 
PPP_MAXMTU
)

835 
us
->
mtu
 = 
n
;

836 #ifde‡
LACHTCP


838 
us
->
if°©s
.
ifs_mtu
 = 
n
;

840 i‡(
us
->
lowîq
)

841 
	`put˘l4
(
us
->
lowîq
, 
M_CTL
, 
PPPCTL_MTU
, 
n
);

842 
îr‹
 = 0;

843 
i›
->
ioc_cou¡
 = 0;

846 
PPPIO_LASTMOD
:

847 
us
->
Êags
 |
US_LASTMOD
;

848 
îr‹
 = 0;

851 
PPPIO_DEBUG
:

852 i‡(
i›
->
ioc_cou¡
 != ())

854 i‡(
mp
->
b_c⁄t
 == 0) {

855 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_DEBUG b_c⁄à0!\n", 
us
->
mn
);

858 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

859 i‡(
n
 =
PPPDBG_DUMP
 + 
PPPDBG_DRIVER
) {

860 
	`qwrôî
(
q
, 
mp
, 
debug_dump
, 
PERIM_OUTER
);

862 
îr‹
 = -1;

863 } i‡(
n
 =
PPPDBG_LOG
 + 
PPPDBG_DRIVER
) {

864 
	`DPRINT1
("µp/%d: debugÜogÉ«bÀd\n", 
us
->
mn
);

865 
us
->
Êags
 |
US_DBGLOG
;

866 
i›
->
ioc_cou¡
 = 0;

867 
îr‹
 = 0;

869 i‡(
us
->
µa
 =0 || us->µa->
lowîq
 == 0)

871 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

873 
îr‹
 = -1;

877 
PPPIO_NPMODE
:

878 i‡(
i›
->
ioc_cou¡
 != 2 * ())

880 i‡((
us
->
Êags
 & 
US_CONTROL
) == 0)

882 i‡(
mp
->
b_c⁄t
 == 0) {

883 
	`DPRINT1
("µpuwput/%d: io˘»PPPIO_NPMODE b_c⁄à0!\n", 
us
->
mn
);

886 
ßp
 = ((*)
mp
->
b_c⁄t
->
b_Ωå
)[0];

887 
≈s
 = 
us
->
√xt
;Çps != 0;Çps =Çps->next) {

888 i‡(
us
->
Êags
 & 
US_DBGLOG
)

889 
	`DPRINT2
("u†0x%x, us->√xt->ß∞0x%x\n", 
≈s
,Çps->
ßp
);

890 i‡(
≈s
->
ßp
 == sap)

893 i‡(
≈s
 == 0) {

894 i‡(
us
->
Êags
 & 
US_DBGLOG
)

895 
	`DPRINT2
("µp/%d:Çÿ°ªam f‹ s≠ %x\n", 
us
->
mn
, 
ßp
);

899 
≈s
->
≈mode
 = (
NPmode
Ë((*)
mp
->
b_c⁄t
->
b_Ωå
)[1];

900 i‡(
≈s
->
≈mode
 !
NPMODE_QUEUE
 && (≈s->
Êags
 & 
US_BLOCKED
) != 0)

901 
	`qíabÀ
(
	`WR
(
≈s
->
q
));

902 
i›
->
ioc_cou¡
 = 0;

903 
îr‹
 = 0;

906 
PPPIO_GIDLE
:

907 i‡((
µa
 = 
us
->ppa) == 0)

909 
mq
 = 
	`Ælocb
((
µp_idÀ
), 
BPRI_HI
);

910 i‡(
mq
 == 0) {

911 
îr‹
 = 
ENOSR
;

914 i‡(
mp
->
b_c⁄t
 != 0)

915 
	`‰ìmsg
(
mp
->
b_c⁄t
);

916 
mp
->
b_c⁄t
 = 
mq
;

917 
mq
->
b_c⁄t
 = 0;

918 
pù
 = (
µp_idÀ
 *Ë
mq
->
b_w±r
;

919 
pù
->
xmô_idÀ
 = 
time
 - 
µa
->
œ°_£¡
;

920 
pù
->
ªcv_idÀ
 = 
time
 - 
µa
->
œ°_ªcv
;

921 
mq
->
b_w±r
 +(
µp_idÀ
);

922 
i›
->
ioc_cou¡
 = (
µp_idÀ
);

923 
îr‹
 = 0;

926 #ifde‡
LACHTCP


927 
SIOCSIFNAME
:

929 i‡(
i›
->
ioc_cou¡
 !(
i‰eq
Ë|| 
us
->
µa
 == 0)

931 
i‰
 = (
i‰eq
 *)
mp
->
b_c⁄t
->
b_Ωå
;

933 
i
 = 0; i < 
IFNAMSIZ
; i++) {

934 i‡(
i‰
->
i‰_«me
[
i
] == 0 ||

935 (
i‰
->
i‰_«me
[
i
] >= '0' &&

936 
i‰
->
i‰_«me
[
i
] <= '9'))

939 
us
->
i‚ame
[
i
] = 
i‰
->
i‰_«me
[i];

941 
us
->
i‚ame
[
i
] = 0;

944 
n
 = 0; 
i
 < 
IFNAMSIZ
; i++) {

945 i‡(
i‰
->
i‰_«me
[
i
] == 0) {

949 
n
 =Ç * 10 + 
i‰
->
i‰_«me
[
i
] - '0';

954 i‡(
us
->
µa
->
µa_id
 !
n
)

956 
µa
 = 
us
->ppa;

959 
	`°∫˝y
 (
µa
->
i‚ame
, 
us
->i‚ame, 
IFNAMSIZ
);

961 
µa
->
if°©s
.
ifs_«me
 =Ö∑->
i‚ame
;

962 
µa
->
if°©s
.
ifs_unô
 = 
n
;

963 
µa
->
if°©s
.
ifs_a˘ive
 = 
us
->
°©e
 !
DL_UNBOUND
;

964 
µa
->
if°©s
.
ifs_mtu
 =Ö∑->
mtu
;

967 
µa
->
if°©s
.
ifs_√xt
 = ifstats;

968 
if°©s
 = &
µa
->ifstats;

970 
i›
->
ioc_cou¡
 = 0;

971 
îr‹
 = 0;

974 
SIOCGIFFLAGS
:

975 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

976 i‡(
us
->
µa
)

977 
us
 = us->
µa
;

981 ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
 = 
us
->
ifÊags
;

982 
îr‹
 = 0;

985 
SIOCSIFFLAGS
:

986 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

987 i‡(
us
->
µa
)

988 
us
 = us->
µa
;

992 
us
->
ifÊags
 = ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
;

993 
îr‹
 = 0;

996 
SIOCSIFADDR
:

997 i‡(!(
us
->
Êags
 & 
US_CONTROL
)) {

998 i‡(
us
->
µa
)

999 
us
 = us->
µa
;

1003 
us
->
ifÊags
 |
IFF_RUNNING
;

1004 ((
iocblk_ö
 *)
i›
)->
ioc_ifÊags
 |
IFF_RUNNING
;

1005 
îr‹
 = 0;

1008 
SIOCSIFMTU
:

1015 i‡((
mq
 = 
	`Ælocb
((
dl_öfo_ªq_t
), 
BPRI_HI
)) == 0)

1017 ((
DL_¥imôives
 *)
mq
->
b_Ωå
)->
dl_¥imôive
 = 
DL_INFO_REQ
;

1018 
mq
->
b_w±r
 = mq->
b_Ωå
 + (
dl_öfo_ªq_t
);

1019 
	`dÕi_ªque°
(
q
, 
mq
, 
us
);

1021 
îr‹
 = -1;

1024 
SIOCGIFNETMASK
:

1025 
SIOCSIFNETMASK
:

1026 
SIOCGIFADDR
:

1027 
SIOCGIFDSTADDR
:

1028 
SIOCSIFDSTADDR
:

1029 
SIOCGIFMETRIC
:

1030 
îr‹
 = 0;

1035 i‡(
us
->
µa
 =0 || us->µa->
lowîq
 == 0)

1037 
us
->
ioc_id
 = 
i›
->ioc_id;

1038 
îr‹
 = -1;

1039 
i›
->
ioc_cmd
) {

1040 
PPPIO_GETSTAT
:

1041 
PPPIO_GETCSTAT
:

1042 i‡(
us
->
Êags
 & 
US_LASTMOD
) {

1043 
îr‹
 = 
EINVAL
;

1046 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

1049 i‡(
us
->
Êags
 & 
US_PRIV
)

1050 
	`puäext
(
us
->
µa
->
lowîq
, 
mp
);

1052 
	`DPRINT1
("µ∞io˘»%xÑeje˘ed\n", 
i›
->
ioc_cmd
);

1053 
îr‹
 = 
EPERM
;

1060 i‡(
îr‹
 > 0) {

1061 
i›
->
ioc_îr‹
 = 
îr‹
;

1062 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

1063 
	`qª∂y
(
q
, 
mp
);

1064 } i‡(
îr‹
 == 0) {

1065 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1066 
	`qª∂y
(
q
, 
mp
);

1070 
M_FLUSH
:

1071 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1072 
	`DPRINT2
("µp/%d: flush %x\n", 
us
->
mn
, *
mp
->
b_Ωå
);

1073 i‡(*
mp
->
b_Ωå
 & 
FLUSHW
)

1074 
	`Êushq
(
q
, 
FLUSHDATA
);

1075 i‡(*
mp
->
b_Ωå
 & 
FLUSHR
) {

1076 *
mp
->
b_Ωå
 &~
FLUSHW
;

1077 
	`qª∂y
(
q
, 
mp
);

1079 
	`‰ìmsg
(
mp
);

1083 
	`‰ìmsg
(
mp
);

1087 
	}
}

1089 #i‚de‡
NO_DLPI


1091 
	$dÕi_ªque°
(
q
, 
mp
, 
us
)

1092 
queue_t
 *
q
;

1093 
mblk_t
 *
mp
;

1094 
uµî°r_t
 *
us
;

1096 
DL_¥imôives
 *
d
 = (DL_¥imôive†*Ë
mp
->
b_Ωå
;

1097 
size
 = 
mp
->
b_w±r
 - mp->
b_Ωå
;

1098 
mblk_t
 *
ª∂y
, *
≈
;

1099 
uµî°r_t
 *
µa
, *
os
;

1100 
ßp
, 
Àn
;

1101 
dl_öfo_ack_t
 *
öfo
;

1102 
dl_böd_ack_t
 *
ackp
;

1103 #i‡
DL_CURRENT_VERSION
 >= 2

1104 
dl_phys_addr_ack_t
 *
∑ddøck
;

1105 
ëhî_addr
 
óddr
 = {0};

1108 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1109 
	`DPRINT3
("µp/%d: dÕò¥im %xÜí=%d\n", 
us
->
mn
,

1110 
d
->
dl_¥imôive
, 
size
);

1111 
d
->
dl_¥imôive
) {

1112 
DL_INFO_REQ
:

1113 i‡(
size
 < (
dl_öfo_ªq_t
))

1114 
bad¥im
;

1115 i‡((
ª∂y
 = 
	`Ælocb
((
dl_öfo_ack_t
), 
BPRI_HI
)) == 0)

1117 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1118 
öfo
 = (
dl_öfo_ack_t
 *Ë
ª∂y
->
b_w±r
;

1119 
ª∂y
->
b_w±r
 +(
dl_öfo_ack_t
);

1120 
	`bzîo
((
ˇddr_t
Ë
öfo
, (
dl_öfo_ack_t
));

1121 
öfo
->
dl_¥imôive
 = 
DL_INFO_ACK
;

1122 
öfo
->
dl_max_sdu
 = 
us
->
µa
? us->µa->
mtu
: 
PPP_MAXMTU
;

1123 
öfo
->
dl_mö_sdu
 = 1;

1124 
öfo
->
dl_addr_Àngth
 = (
uöt
);

1125 
öfo
->
dl_mac_ty≥
 = 
DL_ETHER
;

1126 
öfo
->
dl_cuºít_°©e
 = 
us
->
°©e
;

1127 
öfo
->
dl_£rvi˚_mode
 = 
DL_CLDLS
;

1128 
öfo
->
dl_¥ovidî_°yÀ
 = 
DL_STYLE2
;

1129 #i‡
DL_CURRENT_VERSION
 >= 2

1130 
öfo
->
dl_ßp_Àngth
 = (
uöt
);

1131 
öfo
->
dl_vîsi⁄
 = 
DL_CURRENT_VERSION
;

1133 
	`qª∂y
(
q
, 
ª∂y
);

1136 
DL_ATTACH_REQ
:

1137 i‡(
size
 < (
dl_©èch_ªq_t
))

1138 
bad¥im
;

1139 i‡(
us
->
°©e
 !
DL_UNATTACHED
 || us->
µa
 != 0) {

1140 
	`dÕi_îr‹
(
q
, 
us
, 
DL_ATTACH_REQ
, 
DL_OUTSTATE
, 0);

1143 
µa
 = 
µas
;Ö∑ !0;Ö∑ =Ö∑->
√xç∑
)

1144 i‡(
µa
->
µa_id
 =
d
->
©èch_ªq
.
dl_µa
)

1146 i‡(
µa
 == 0) {

1147 
	`dÕi_îr‹
(
q
, 
us
, 
DL_ATTACH_REQ
, 
DL_BADPPA
, 0);

1150 
us
->
µa
 =Öpa;

1151 
	`qwrôî
(
q
, 
mp
, 
©èch_µa
, 
PERIM_OUTER
);

1154 
DL_DETACH_REQ
:

1155 i‡(
size
 < (
dl_dëach_ªq_t
))

1156 
bad¥im
;

1157 i‡(
us
->
°©e
 !
DL_UNBOUND
 || us->
µa
 == 0) {

1158 
	`dÕi_îr‹
(
q
, 
us
, 
DL_DETACH_REQ
, 
DL_OUTSTATE
, 0);

1161 
	`qwrôî
(
q
, 
mp
, 
dëach_µa
, 
PERIM_OUTER
);

1164 
DL_BIND_REQ
:

1165 i‡(
size
 < (
dl_böd_ªq_t
))

1166 
bad¥im
;

1167 i‡(
us
->
°©e
 !
DL_UNBOUND
 || us->
µa
 == 0) {

1168 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_OUTSTATE
, 0);

1173 i‡(
d
->
böd_ªq
.
dl_£rvi˚_mode
 !
DL_CLDLS
) {

1174 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_UNSUPPORTED
, 0);

1181 
ßp
 = 
d
->
böd_ªq
.
dl_ßp
;

1182 
us
->
ªq_ßp
 = 
ßp
;

1184 #i‡
	`deföed
(
SOL2
)

1185 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1186 
	`DPRINT2
("DL_BIND_REQ: i∞give†ß∞0x%x, u†0x%x", 
ßp
, 
us
);

1188 i‡(
ßp
 =
ETHERTYPE_IP
)

1189 
ßp
 = 
PPP_IP
;

1190 i‡(
ßp
 =
ETHERTYPE_IPV6
)

1191 
ßp
 = 
PPP_IPV6
;

1192 i‡(
ßp
 =
ETHERTYPE_ALLSAP
)

1193 
ßp
 = 
PPP_ALLSAP
;

1195 
	`DPRINT2
("DL_BIND_REQ: uƒecognized s≠ = 0x%x, u†0x%x", 
ßp
, 
us
);

1196 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_BADADDR
, 0);

1200 i‡(
ßp
 =
ETHERTYPE_IP
)

1201 
ßp
 = 
PPP_IP
;

1202 i‡(
ßp
 < 0x21 || sap > 0x3fff || (sap & 0x101) != 1) {

1203 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_BADADDR
, 0);

1209 
os
 = 
us
->
µa
; o†!0; o†os->
√xt
)

1210 i‡(
os
->
ßp
 == sap)

1212 i‡(
os
 != 0) {

1213 
	`dÕi_îr‹
(
q
, 
us
, 
DL_BIND_REQ
, 
DL_NOADDR
, 0);

1217 
us
->
ßp
 = sap;

1218 
us
->
°©e
 = 
DL_IDLE
;

1220 i‡((
ª∂y
 = 
	`Ælocb
((
dl_böd_ack_t
Ë+ (
uöt
),

1221 
BPRI_HI
)) == 0)

1223 
ackp
 = (
dl_böd_ack_t
 *Ë
ª∂y
->
b_w±r
;

1224 
ª∂y
->
b_w±r
 +(
dl_böd_ack_t
Ë+ (
uöt
);

1225 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1226 
	`bzîo
((
ˇddr_t
Ë
ackp
, (
dl_böd_ack_t
));

1227 
ackp
->
dl_¥imôive
 = 
DL_BIND_ACK
;

1228 
ackp
->
dl_ßp
 = 
ßp
;

1229 
ackp
->
dl_addr_Àngth
 = (
uöt
);

1230 
ackp
->
dl_addr_off£t
 = (
dl_böd_ack_t
);

1231 *(
uöt
 *)(
ackp
+1Ë
ßp
;

1232 
	`qª∂y
(
q
, 
ª∂y
);

1235 
DL_UNBIND_REQ
:

1236 i‡(
size
 < (
dl_unböd_ªq_t
))

1237 
bad¥im
;

1238 i‡(
us
->
°©e
 !
DL_IDLE
) {

1239 
	`dÕi_îr‹
(
q
, 
us
, 
DL_UNBIND_REQ
, 
DL_OUTSTATE
, 0);

1242 
us
->
ßp
 = -1;

1243 
us
->
°©e
 = 
DL_UNBOUND
;

1244 #ifde‡
LACHTCP


1245 
us
->
µa
->
if°©s
.
ifs_a˘ive
 = 0;

1247 
	`dÕi_ok
(
q
, 
DL_UNBIND_REQ
);

1250 
DL_UNITDATA_REQ
:

1251 i‡(
size
 < (
dl_unôd©a_ªq_t
))

1252 
bad¥im
;

1253 i‡(
us
->
°©e
 !
DL_IDLE
) {

1254 
	`dÕi_îr‹
(
q
, 
us
, 
DL_UNITDATA_REQ
, 
DL_OUTSTATE
, 0);

1257 i‡((
µa
 = 
us
->ppa) == 0) {

1258 
	`cmn_îr
(
CE_CONT
, "ppp: in state dl_idle butÖpa == 0?\n");

1261 
Àn
 = 
mp
->
b_c⁄t
 =0? 0: 
	`msgdsize
(mp->b_cont);

1262 i‡(
Àn
 > 
µa
->
mtu
) {

1263 
	`DPRINT2
("dÕòd©®toÿœrgê(%d > %d)\n", 
Àn
, 
µa
->
mtu
);

1267 #i‡
	`deföed
(
SOL2
)

1272 i‡(
mp
->
b_c⁄t
)

1273 
	`¥omisc_£ndup
(
µa
, 
mp
->
b_c⁄t
, 
us
->
ßp
, 0);

1276 
mp
->
b_b™d
 = 0;

1277 #ifde‡
PRIOQ


1280 i‡(
mp
->
b_d©≠
->
db_ty≥
 =
M_PROTO
 && 
us
->
ßp
 =
PPP_IP


1281 && 
mp
->
b_c⁄t
 != 0) {

1282 
u_ch¨
 *
bb
, *
éh
;

1283 
ùhÀn
, 
Àn
;

1284 
u_sh‹t
 *
±r
;

1285 
u_ch¨
 
b™d_un£t
, 
cur_b™d
, 
syn
;

1286 
u_sh‹t
 
s_p‹t
, 
d_p‹t
;

1288 
bb
 = 
mp
->
b_c⁄t
->
b_Ωå
;

1289 
Àn
 = 
mp
->
b_c⁄t
->
b_w±r
 - mp->b_c⁄t->
b_Ωå
;

1290 
syn
 = 0;

1291 
s_p‹t
 = 
IPPORT_DEFAULT
;

1292 
d_p‹t
 = 
IPPORT_DEFAULT
;

1293 i‡(
Àn
 >= 20) {

1294 
ùhÀn
 = (
bb
[0] & 0x0f) * 4;

1295 
éh
 = 
bb
 + 
ùhÀn
;

1296 
Àn
 -
ùhÀn
;

1297 
bb
[9]) {

1298 
IPPROTO_TCP
:

1299 i‡(
Àn
 >= 20) {

1300 
s_p‹t
 = (
éh
[0] << 8) +Ålh[1];

1301 
d_p‹t
 = (
éh
[2] << 8) +Ålh[3];

1302 
syn
 = 
éh
[13] & 0x02;

1305 
IPPROTO_UDP
:

1306 i‡(
Àn
 >= 8) {

1307 
s_p‹t
 = (
éh
[0] << 8) +Ålh[1];

1308 
d_p‹t
 = (
éh
[2] << 8) +Ålh[3];

1318 
±r
 = 
¥ioq_èbÀ
;

1319 
cur_b™d
 = 
max_b™d
;

1320 
b™d_un£t
 = 1;

1321 *
±r
) {

1322 *
±r
 && 
b™d_un£t
)

1323 i‡(
s_p‹t
 =*
±r
 || 
d_p‹t
 == *ptr++) {

1324 
mp
->
b_b™d
 = 
cur_b™d
;

1325 
b™d_un£t
 = 0;

1328 
±r
++;

1329 
cur_b™d
--;

1331 i‡(
b™d_un£t
)

1332 
mp
->
b_b™d
 = 
def_b™d
;

1334 i‡(
syn
)

1335 
mp
->
b_b™d
++;

1339 i‡(
mp
->
b_d©≠
->
db_ªf
 > 1) {

1340 
≈
 = 
	`Ælocb
(
PPP_HDRLEN
, 
BPRI_HI
);

1341 i‡(
≈
 == 0)

1343 
≈
->
b_c⁄t
 = 
mp
->b_cont;

1344 
mp
->
b_c⁄t
 = 0;

1345 
	`‰ìb
(
mp
);

1346 
mp
 = 
≈
;

1348 
mp
->
b_d©≠
->
db_ty≥
 = 
M_DATA
;

1351 
mp
->
b_w±r
 = mp->
b_Ωå
 + 
PPP_HDRLEN
;

1352 
mp
->
b_Ωå
[0] = 
PPP_ALLSTATIONS
;

1353 
mp
->
b_Ωå
[1] = 
PPP_UI
;

1354 
mp
->
b_Ωå
[2] = 
us
->
ßp
 >> 8;

1355 
mp
->
b_Ωå
[3] = 
us
->
ßp
;

1357 i‡(
	`∑ss_∑ckë
(
us
, 
mp
, 1)) {

1358 i‡(!
	`£nd_d©a
(
mp
, 
us
Ë&& !
	`putq
(
q
, mp))

1359 
	`‰ìmsg
(
mp
);

1363 #i‡
DL_CURRENT_VERSION
 >= 2

1364 
DL_PHYS_ADDR_REQ
:

1365 i‡(
size
 < (
dl_phys_addr_ªq_t
))

1366 
bad¥im
;

1372 i‡((
ª∂y
 = 
	`Ælocb
((
dl_phys_addr_ack_t
)+
ETHERADDRL
,

1373 
BPRI_HI
)) == 0)

1375 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1376 
∑ddøck
 = (
dl_phys_addr_ack_t
 *Ë
ª∂y
->
b_w±r
;

1377 
ª∂y
->
b_w±r
 +(
dl_phys_addr_ack_t
);

1378 
	`bzîo
((
ˇddr_t
Ë
∑ddøck
, (
dl_phys_addr_ack_t
)+
ETHERADDRL
);

1379 
∑ddøck
->
dl_¥imôive
 = 
DL_PHYS_ADDR_ACK
;

1380 
∑ddøck
->
dl_addr_Àngth
 = 
ETHERADDRL
;

1381 
∑ddøck
->
dl_addr_off£t
 = (
dl_phys_addr_ack_t
);

1382 
	`bc›y
(&
óddr
, 
ª∂y
->
b_w±r
, 
ETHERADDRL
);

1383 
ª∂y
->
b_w±r
 +
ETHERADDRL
;

1384 
	`qª∂y
(
q
, 
ª∂y
);

1387 #i‡
	`deföed
(
SOL2
)

1388 
DL_PROMISCON_REQ
:

1389 i‡(
size
 < (
dl_¥omisc⁄_ªq_t
))

1390 
bad¥im
;

1391 
us
->
Êags
 |
US_PROMISC
;

1392 
	`dÕi_ok
(
q
, 
DL_PROMISCON_REQ
);

1395 
DL_PROMISCOFF_REQ
:

1396 i‡(
size
 < (
dl_¥omiscoff_ªq_t
))

1397 
bad¥im
;

1398 
us
->
Êags
 &~
US_PROMISC
;

1399 
	`dÕi_ok
(
q
, 
DL_PROMISCOFF_REQ
);

1402 
DL_PROMISCON_REQ
:

1403 
DL_PROMISCOFF_REQ
:

1407 #i‡
DL_CURRENT_VERSION
 >= 2

1408 
DL_SET_PHYS_ADDR_REQ
:

1409 
DL_SUBS_BIND_REQ
:

1410 
DL_SUBS_UNBIND_REQ
:

1411 
DL_ENABMULTI_REQ
:

1412 
DL_DISABMULTI_REQ
:

1413 
DL_XID_REQ
:

1414 
DL_TEST_REQ
:

1415 
DL_REPLY_UPDATE_REQ
:

1416 
DL_REPLY_REQ
:

1417 
DL_DATA_ACK_REQ
:

1419 
DL_CONNECT_REQ
:

1420 
DL_TOKEN_REQ
:

1421 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_NOTSUPPORTED
, 0);

1424 
DL_CONNECT_RES
:

1425 
DL_DISCONNECT_REQ
:

1426 
DL_RESET_REQ
:

1427 
DL_RESET_RES
:

1428 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_OUTSTATE
, 0);

1431 
DL_UDQOS_REQ
:

1432 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_BADQOSTYPE
, 0);

1435 #i‡
DL_CURRENT_VERSION
 >= 2

1436 
DL_TEST_RES
:

1437 
DL_XID_RES
:

1442 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1443 
	`DPRINT1
("µp: unknow¿dÕò¥im 0x%x\n", 
d
->
dl_¥imôive
);

1445 
bad¥im
:

1446 
	`dÕi_îr‹
(
q
, 
us
, 
d
->
dl_¥imôive
, 
DL_BADPRIM
, 0);

1449 
	`‰ìmsg
(
mp
);

1450 
	}
}

1453 
	$dÕi_îr‹
(
q
, 
us
, 
¥im
, 
îr
, 
uîr
)

1454 
queue_t
 *
q
;

1455 
uµî°r_t
 *
us
;

1456 
¥im
, 
îr
, 
uîr
;

1458 
mblk_t
 *
ª∂y
;

1459 
dl_îr‹_ack_t
 *
îΩ
;

1461 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1462 
	`DPRINT3
("µp/%d: dÕòîr‹,Örim=%x,Éº=%x\n", 
us
->
mn
, 
¥im
, 
îr
);

1463 
ª∂y
 = 
	`Ælocb
((
dl_îr‹_ack_t
), 
BPRI_HI
);

1464 i‡(
ª∂y
 == 0)

1466 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1467 
îΩ
 = (
dl_îr‹_ack_t
 *Ë
ª∂y
->
b_w±r
;

1468 
ª∂y
->
b_w±r
 +(
dl_îr‹_ack_t
);

1469 
îΩ
->
dl_¥imôive
 = 
DL_ERROR_ACK
;

1470 
îΩ
->
dl_îr‹_¥imôive
 = 
¥im
;

1471 
îΩ
->
dl_î∫o
 = 
îr
;

1472 
îΩ
->
dl_unix_î∫o
 = 
uîr
;

1473 
	`qª∂y
(
q
, 
ª∂y
);

1474 
	}
}

1477 
	$dÕi_ok
(
q
, 
¥im
)

1478 
queue_t
 *
q
;

1479 
¥im
;

1481 
mblk_t
 *
ª∂y
;

1482 
dl_ok_ack_t
 *
okp
;

1484 
ª∂y
 = 
	`Ælocb
((
dl_ok_ack_t
), 
BPRI_HI
);

1485 i‡(
ª∂y
 == 0)

1487 
ª∂y
->
b_d©≠
->
db_ty≥
 = 
M_PCPROTO
;

1488 
okp
 = (
dl_ok_ack_t
 *Ë
ª∂y
->
b_w±r
;

1489 
ª∂y
->
b_w±r
 +(
dl_ok_ack_t
);

1490 
okp
->
dl_¥imôive
 = 
DL_OK_ACK
;

1491 
okp
->
dl_c‹ª˘_¥imôive
 = 
¥im
;

1492 
	`qª∂y
(
q
, 
ª∂y
);

1493 
	}
}

1500 
	$∑ss_∑ckë
(
us
, 
mp
, 
outbound
)

1501 
uµî°r_t
 *
us
;

1502 
mblk_t
 *
mp
;

1503 
outbound
;

1505 
∑ss
;

1506 
uµî°r_t
 *
µa
;

1508 i‡((
µa
 = 
us
->ppa) == 0) {

1509 
	`‰ìmsg
(
mp
);

1513 #ifde‡
FILTER_PACKETS


1514 
∑ss
 = 
	`ù_h¨d_fûãr
(
us
, 
mp
, 
outbound
);

1520 
∑ss
 = 1;

1523 i‡(
∑ss
 < 0) {

1525 i‡(
µa
->
lowîq
 == 0) {

1526 
	`‰ìmsg
(
mp
);

1529 
∑ss
 = 1;

1530 } i‡(
∑ss
) {

1531 i‡(
outbound
)

1532 
µa
->
œ°_£¡
 = 
time
;

1534 
µa
->
œ°_ªcv
 = 
time
;

1537  
∑ss
;

1538 
	}
}

1547 
	$£nd_d©a
(
mp
, 
us
)

1548 
mblk_t
 *
mp
;

1549 
uµî°r_t
 *
us
;

1551 
uµî°r_t
 *
µa
;

1553 i‡((
us
->
Êags
 & 
US_BLOCKED
Ë|| us->
≈mode
 =
NPMODE_QUEUE
)

1555 
µa
 = 
us
->ppa;

1556 i‡(
µa
 =0 || 
us
->
≈mode
 =
NPMODE_DROP
 || us->≈modê=
NPMODE_ERROR
) {

1557 i‡(
us
->
Êags
 & 
US_DBGLOG
)

1558 
	`DPRINT2
("µp/%d: dr›pögÖkà“pmode=%d)\n", 
us
->
mn
, us->
≈mode
);

1559 
	`‰ìmsg
(
mp
);

1562 i‡(
µa
->
lowîq
 == 0) {

1564 i‡(
	`bˇ≈uäext
(
µa
->
q
, 
mp
->
b_b™d
)) {

1569 
mblk_t
 *
≈
 = 
	`c›ymsg
(
mp
);

1570 
	`‰ìmsg
(
mp
);

1571 i‡(
≈
 != 0)

1572 
	`puäext
(
µa
->
q
, 
≈
);

1576 i‡(
	`bˇ≈uäext
(
µa
->
lowîq
, 
mp
->
b_b™d
)) {

1577 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1578 
µa
->
°©s
.
µp_›ackës
++;

1579 
µa
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
mp
);

1580 #ifde‡
INCR_OPACKETS


1581 
	`INCR_OPACKETS
(
µa
);

1583 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1589 
	`puäext
(
µa
->
lowîq
, 
mp
);

1593 
us
->
Êags
 |
US_BLOCKED
;

1595 
	}
}

1603 
	$√w_µa
(
q
, 
mp
)

1604 
queue_t
 *
q
;

1605 
mblk_t
 *
mp
;

1607 
uµî°r_t
 *
us
, *
up
, **
u•
;

1608 
µa_id
;

1610 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1611 i‡(
us
 == 0) {

1612 
	`DPRINT
("new_ppa: q_ptr = 0!\n");

1616 
u•
 = &
µas
;

1617 
µa_id
 = 0;

1618 (
up
 = *
u•
Ë!0 && 
µa_id
 == up->ppa_id) {

1619 ++
µa_id
;

1620 
u•
 = &
up
->
√xç∑
;

1622 
us
->
µa_id
 =Öpa_id;

1623 
us
->
µa
 = us;

1624 
us
->
√xt
 = 0;

1625 
us
->
√xç∑
 = *
u•
;

1626 *
u•
 = 
us
;

1627 
us
->
Êags
 |
US_CONTROL
;

1628 
us
->
≈mode
 = 
NPMODE_PASS
;

1630 
us
->
mtu
 = 
PPP_MTU
;

1631 
us
->
mru
 = 
PPP_MRU
;

1633 #ifde‡
SOL2


1637 i‡(
us
->
k°©s
 == 0) {

1638 
unô
[32];

1640 
	`•rötf
(
unô
, "µp%d", 
us
->
µa
->
µa_id
);

1641 
us
->
k°©s
 = 
	`k°©_¸óã
("µp", us->
µa
->
µa_id
, 
unô
,

1642 "√t", 
KSTAT_TYPE_NAMED
, 4, 0);

1643 i‡(
us
->
k°©s
 != 0) {

1644 
k°©_«med_t
 *
kn
 = 
	`KSTAT_NAMED_PTR
(
us
->
k°©s
);

1646 
	`°r˝y
(
kn
[0].
«me
, "ipackets");

1647 
kn
[0].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1648 
	`°r˝y
(
kn
[1].
«me
, "ierrors");

1649 
kn
[1].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1650 
	`°r˝y
(
kn
[2].
«me
, "opackets");

1651 
kn
[2].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1652 
	`°r˝y
(
kn
[3].
«me
, "oerrors");

1653 
kn
[3].
d©a_ty≥
 = 
KSTAT_DATA_ULONG
;

1654 
	`k°©_ö°Æl
(
us
->
k°©s
);

1659 *(*)
mp
->
b_c⁄t
->
b_Ωå
 = 
µa_id
;

1660 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1661 
	`qª∂y
(
q
, 
mp
);

1662 
	}
}

1665 
	$©èch_µa
(
q
, 
mp
)

1666 
queue_t
 *
q
;

1667 
mblk_t
 *
mp
;

1669 
uµî°r_t
 *
us
, *
t
;

1671 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1672 i‡(
us
 == 0) {

1673 
	`DPRINT
("attach_ppa: q_ptr = 0!\n");

1677 #i‚de‡
NO_DLPI


1678 
us
->
°©e
 = 
DL_UNBOUND
;

1680 
t
 = 
us
->
µa
;Å->
√xt
 != 0;Å =Å->next)

1682 
t
->
√xt
 = 
us
;

1683 
us
->
√xt
 = 0;

1684 i‡(
mp
->
b_d©≠
->
db_ty≥
 =
M_IOCTL
) {

1685 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1686 
	`qª∂y
(
q
, 
mp
);

1688 #i‚de‡
NO_DLPI


1689 
	`dÕi_ok
(
q
, 
DL_ATTACH_REQ
);

1691 
	`‰ìmsg
(
mp
);

1693 
	}
}

1695 #i‚de‡
NO_DLPI


1697 
	$dëach_µa
(
q
, 
mp
)

1698 
queue_t
 *
q
;

1699 
mblk_t
 *
mp
;

1701 
uµî°r_t
 *
us
, *
t
;

1703 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1704 i‡(
us
 == 0) {

1705 
	`DPRINT
("detach_ppa: q_ptr = 0!\n");

1709 
t
 = 
us
->
µa
;Å->
√xt
 != 0;Å =Å->next)

1710 i‡(
t
->
√xt
 =
us
) {

1711 
t
->
√xt
 = 
us
->next;

1714 
us
->
√xt
 = 0;

1715 
us
->
µa
 = 0;

1716 
us
->
°©e
 = 
DL_UNATTACHED
;

1717 
	`dÕi_ok
(
q
, 
DL_DETACH_REQ
);

1718 
	`‰ìmsg
(
mp
);

1719 
	}
}

1728 
	$dëach_lowî
(
q
, 
mp
)

1729 
queue_t
 *
q
;

1730 
mblk_t
 *
mp
;

1732 
uµî°r_t
 *
us
;

1734 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1735 i‡(
us
 == 0) {

1736 
	`DPRINT
("detach_lower: q_ptr = 0!\n");

1740 
LOCK_LOWER_W
;

1741 
us
->
lowîq
->
q_±r
 = 0;

1742 
	`RD
(
us
->
lowîq
)->
q_±r
 = 0;

1743 
us
->
lowîq
 = 0;

1744 
UNLOCK_LOWER
;

1747 
	`qíabÀ
(
us
->
q
);

1749 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

1750 
	`qª∂y
(
q
, 
mp
);

1751 
	}
}

1754 
	$µpuw§v
(
q
)

1755 
queue_t
 *
q
;

1757 
uµî°r_t
 *
us
, *
as
;

1758 
mblk_t
 *
mp
;

1760 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1761 i‡(
us
 == 0) {

1762 
	`DPRINT
("pppuwsrv: q_ptr = 0!\n");

1773 i‡(
us
->
Êags
 & 
US_CONTROL
) {

1774 
as
 = 
us
->
√xt
;ás != 0;ás =ás->next)

1775 
	`qíabÀ
(
	`WR
(
as
->
q
));

1779 
us
->
Êags
 &~
US_BLOCKED
;

1780 (
mp
 = 
	`gëq
(
q
)) != 0) {

1781 i‡(!
	`£nd_d©a
(
mp
, 
us
)) {

1782 
	`putbq
(
q
, 
mp
);

1788 
	}
}

1792 
	$µ∂wput
(
q
, 
mp
)

1793 
queue_t
 *
q
;

1794 
mblk_t
 *
mp
;

1796 
	`puäext
(
q
, 
mp
);

1798 
	}
}

1801 
	$µ∂w§v
(
q
)

1802 
queue_t
 *
q
;

1804 
queue_t
 *
uq
;

1811 
LOCK_LOWER_R
;

1812 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

1813 i‡(
uq
 != 0)

1814 
	`qíabÀ
(
uq
);

1815 
UNLOCK_LOWER
;

1817 
	}
}

1823 
	$µpuΩut
(
q
, 
mp
)

1824 
queue_t
 *
q
;

1825 
mblk_t
 *
mp
;

1827 
uµî°r_t
 *
µa
, *
us
;

1828 
¥Ÿo
, 
Àn
;

1829 
iocblk
 *
i›
;

1831 
µa
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1832 i‡(
µa
 == 0) {

1833 
	`DPRINT
("pppurput: q_ptr = 0!\n");

1837 
mp
->
b_d©≠
->
db_ty≥
) {

1838 
M_CTL
:

1839 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1840 *
mp
->
b_Ωå
) {

1841 
PPPCTL_IERROR
:

1842 #ifde‡
INCR_IERRORS


1843 
	`INCR_IERRORS
(
µa
);

1845 
µa
->
°©s
.
µp_õº‹s
++;

1847 
PPPCTL_OERROR
:

1848 #ifde‡
INCR_OERRORS


1849 
	`INCR_OERRORS
(
µa
);

1851 
µa
->
°©s
.
µp_€º‹s
++;

1854 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1855 
	`‰ìmsg
(
mp
);

1858 
M_IOCACK
:

1859 
M_IOCNAK
:

1864 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

1865 
us
 = 
µa
; u†!0; u†us->
√xt
)

1866 i‡(
us
->
ioc_id
 =
i›
->ioc_id)

1868 i‡(
us
 == 0)

1869 
	`‰ìmsg
(
mp
);

1871 
	`puäext
(
us
->
q
, 
mp
);

1874 
M_HANGUP
:

1881 
	`‰ìmsg
(
mp
);

1882 
mp
 = 
	`Ælocb
(1, 
BPRI_HI
);

1883 i‡(
mp
 == 0) {

1884 
	`DPRINT1
("µp/%d: couldn'àÆloˇãÉo‡mesßge!\n", 
µa
->
mn
);

1887 
	`puäext
(
µa
->
q
, 
mp
);

1890 
M_DATA
:

1891 
Àn
 = 
	`msgdsize
(
mp
);

1892 i‡(
mp
->
b_w±r
 - mp->
b_Ωå
 < 
PPP_HDRLEN
) {

1893 
	`PULLUP
(
mp
, 
PPP_HDRLEN
);

1894 i‡(
mp
 == 0) {

1895 
	`DPRINT1
("µp_uΩut: msgpuŒu∞Áûed (Àn=%d)\n", 
Àn
);

1899 
	`MT_ENTER
(&
µa
->
°©s_lock
);

1900 
µa
->
°©s
.
µp_ùackës
++;

1901 
µa
->
°©s
.
µp_ibyãs
 +
Àn
;

1902 #ifde‡
INCR_IPACKETS


1903 
	`INCR_IPACKETS
(
µa
);

1905 
	`MT_EXIT
(&
µa
->
°©s_lock
);

1907 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

1909 #i‡
	`deföed
(
SOL2
)

1914 
	`¥omisc_£ndup
(
µa
, 
mp
, 
¥Ÿo
, 1);

1917 i‡(
¥Ÿo
 < 0x8000 && (
us
 = 
	`föd_de°
(
µa
,Öroto)) != 0) {

1926 i‡(!
	`∑ss_∑ckë
(
us
, 
mp
, 0))

1928 i‡(!
us
->
rblocked
 && !
	`ˇ≈ut
(us->
q
))

1929 
us
->
rblocked
 = 1;

1930 i‡(!
	`putq
(
us
->
rblocked
 ? 
q
 : us->q, 
mp
))

1931 
	`‰ìmsg
(
mp
);

1943 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || 
	`ˇ≈uäext
(
µa
->
q
))

1944 
	`puäext
(
µa
->
q
, 
mp
);

1945 i‡(!
	`putq
(
q
, 
mp
))

1946 
	`‰ìmsg
(
mp
);

1951 
	}
}

1954 
	$µpur§v
(
q
)

1955 
queue_t
 *
q
;

1957 
uµî°r_t
 *
us
, *
as
;

1958 
mblk_t
 *
mp
, *
hdr
;

1959 #i‚de‡
NO_DLPI


1960 
dl_unôd©a_öd_t
 *
ud
;

1962 
¥Ÿo
;

1964 
us
 = (
uµî°r_t
 *Ë
q
->
q_±r
;

1965 i‡(
us
 == 0) {

1966 
	`DPRINT
("pppursrv: q_ptr = 0!\n");

1970 i‡(
us
->
Êags
 & 
US_CONTROL
) {

1976 i‡(
us
->
lowîq
 == 0) {

1977 
as
 = 
us
;

1979 i‡(
as
->
Êags
 & 
US_BLOCKED
)

1980 
	`qíabÀ
(
	`WR
(
as
->
q
));

1981 
as
 =ás->
√xt
;

1982 } 
as
 != 0);

1993 (
mp
 = 
	`gëq
(
q
)) != 0) {

1994 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

1995 i‡(
¥Ÿo
 < 0x8000 && (
as
 = 
	`föd_de°
(
us
,Öroto)) != 0) {

1996 i‡(!
	`ˇ≈ut
(
as
->
q
))

1998 i‡(!
	`putq
(
as
->
q
, 
mp
))

1999 
	`‰ìmsg
(
mp
);

2001 i‡(!
	`ˇ≈uäext
(
q
))

2003 
	`puäext
(
q
, 
mp
);

2006 i‡(
mp
) {

2007 
	`putbq
(
q
, 
mp
);

2010 
as
 = 
us
->
√xt
;ás != 0;ás =ás->next)

2011 
as
->
rblocked
 = 0;

2020 i‡(
us
->
lowîq
 != 0)

2021 
	`qíabÀ
(
	`RD
(
us
->
lowîq
));

2030 (
mp
 = 
	`gëq
(
q
)) != 0) {

2031 i‡(!
	`ˇ≈uäext
(
q
)) {

2032 
	`putbq
(
q
, 
mp
);

2035 #i‚de‡
NO_DLPI


2036 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

2037 
mp
->
b_Ωå
 +
PPP_HDRLEN
;

2038 
hdr
 = 
	`Ælocb
((
dl_unôd©a_öd_t
Ë+ 2 * (
uöt
),

2039 
BPRI_MED
);

2040 i‡(
hdr
 == 0) {

2042 
	`‰ìmsg
(
mp
);

2045 
hdr
->
b_d©≠
->
db_ty≥
 = 
M_PROTO
;

2046 
ud
 = (
dl_unôd©a_öd_t
 *Ë
hdr
->
b_w±r
;

2047 
hdr
->
b_w±r
 +(
dl_unôd©a_öd_t
Ë+ 2 * (
uöt
);

2048 
hdr
->
b_c⁄t
 = 
mp
;

2049 
ud
->
dl_¥imôive
 = 
DL_UNITDATA_IND
;

2050 
ud
->
dl_de°_addr_Àngth
 = (
uöt
);

2051 
ud
->
dl_de°_addr_off£t
 = (
dl_unôd©a_öd_t
);

2052 
ud
->
dl_§c_addr_Àngth
 = (
uöt
);

2053 
ud
->
dl_§c_addr_off£t
 = ud->
dl_de°_addr_off£t
 + (
uöt
);

2054 #i‡
DL_CURRENT_VERSION
 >= 2

2055 
ud
->
dl_group_addªss
 = 0;

2060 ((
uöt
 *)(
ud
 + 1))[0] = 
us
->
ªq_ßp
;

2061 ((
uöt
 *)(
ud
 + 1))[1] = 
us
->
ªq_ßp
;

2062 
	`puäext
(
q
, 
hdr
);

2064 
	`puäext
(
q
, 
mp
);

2073 i‡(
us
->
µa
)

2074 
	`qíabÀ
(
us
->
µa
->
q
);

2078 
	}
}

2080 
uµî°r_t
 *

2081 
	$föd_de°
(
µa
, 
¥Ÿo
)

2082 
uµî°r_t
 *
µa
;

2083 
¥Ÿo
;

2085 
uµî°r_t
 *
us
;

2087 
us
 = 
µa
->
√xt
; us != 0; us = us->next)

2088 i‡(
¥Ÿo
 =
us
->
ßp
)

2090  
us
;

2091 
	}
}

2093 #i‡
deföed
 (
SOL2
)

2098 
uµî°r_t
 *

2099 
	$föd_¥omisc
(
us
, 
¥Ÿo
)

2100 
uµî°r_t
 *
us
;

2101 
¥Ÿo
;

2104 i‡((
¥Ÿo
 !
PPP_IP
Ë&& (¥Ÿÿ!
PPP_IPV6
))

2105  (
uµî°r_t
 *)0;

2107  ; 
us
; u†us->
√xt
) {

2108 i‡((
us
->
Êags
 & 
US_PROMISC
Ë&& (us->
°©e
 =
DL_IDLE
))

2109  
us
;

2112  (
uµî°r_t
 *)0;

2113 
	}
}

2118 
mblk_t
 *

2119 
	$¥ïíd_ëhî
(
us
, 
mp
, 
¥Ÿo
)

2120 
uµî°r_t
 *
us
;

2121 
mblk_t
 *
mp
;

2122 
¥Ÿo
;

2124 
mblk_t
 *
eh
;

2125 
ty≥
;

2127 i‡((
eh
 = 
	`Ælocb
((
ëhî_hódî
), 
BPRI_HI
)) == 0) {

2128 
	`‰ìmsg
(
mp
);

2129  (
mblk_t
 *)0;

2132 i‡(
¥Ÿo
 =
PPP_IP
)

2133 
ty≥
 = 
ETHERTYPE_IP
;

2134 i‡(
¥Ÿo
 =
PPP_IPV6
)

2135 
ty≥
 = 
ETHERTYPE_IPV6
;

2137 
ty≥
 = 
¥Ÿo
;

2139 
eh
->
b_w±r
 +(
ëhî_hódî
);

2140 
	`bzîo
((
ˇddr_t
)
eh
->
b_Ωå
, (
ëhî_hódî
));

2141 ((
ëhî_hódî
 *)
eh
->
b_Ωå
)->
ëhî_ty≥
 = 
	`ht⁄s
(()
ty≥
);

2142 
eh
->
b_c⁄t
 = 
mp
;

2143  (
eh
);

2144 
	}
}

2149 
mblk_t
 *

2150 
	$¥ïíd_udöd
(
us
, 
mp
, 
¥Ÿo
)

2151 
uµî°r_t
 *
us
;

2152 
mblk_t
 *
mp
;

2153 
¥Ÿo
;

2155 
dl_unôd©a_öd_t
 *
dlu
;

2156 
mblk_t
 *
dh
;

2157 
size_t
 
size
;

2159 
size
 = (
dl_unôd©a_öd_t
);

2160 i‡((
dh
 = 
	`Ælocb
(
size
, 
BPRI_MED
)) == 0) {

2161 
	`‰ìmsg
(
mp
);

2162  (
mblk_t
 *)0;

2165 
dh
->
b_d©≠
->
db_ty≥
 = 
M_PROTO
;

2166 
dh
->
b_w±r
 = dh->
b_d©≠
->
db_lim
;

2167 
dh
->
b_Ωå
 = dh->
b_w±r
 - 
size
;

2169 
dlu
 = (
dl_unôd©a_öd_t
 *)
dh
->
b_Ωå
;

2170 
dlu
->
dl_¥imôive
 = 
DL_UNITDATA_IND
;

2171 
dlu
->
dl_de°_addr_Àngth
 = 0;

2172 
dlu
->
dl_de°_addr_off£t
 = (
dl_unôd©a_öd_t
);

2173 
dlu
->
dl_§c_addr_Àngth
 = 0;

2174 
dlu
->
dl_§c_addr_off£t
 = (
dl_unôd©a_öd_t
);

2175 
dlu
->
dl_group_addªss
 = 0;

2177 
dh
->
b_c⁄t
 = 
mp
;

2178  (
dh
);

2179 
	}
}

2185 
	$¥omisc_£ndup
(
µa
, 
mp
, 
¥Ÿo
, 
skù
)

2186 
uµî°r_t
 *
µa
;

2187 
mblk_t
 *
mp
;

2188 
¥Ÿo
, 
skù
;

2190 
mblk_t
 *
dup_mp
, *
dup_dup_mp
;

2191 
uµî°r_t
 *
¥us
, *
≈rus
;

2193 i‡((
¥us
 = 
	`föd_¥omisc
(
µa
, 
¥Ÿo
)) != 0) {

2194 i‡(
dup_mp
 = 
	`dupmsg
(
mp
)) {

2196 i‡(
skù
)

2197 
dup_mp
->
b_Ωå
 +
PPP_HDRLEN
;

2199  ; 
≈rus
 = 
	`föd_¥omisc
(
¥us
->
√xt
, 
¥Ÿo
);

2200 
¥us
 = 
≈rus
) {

2202 i‡(
dup_dup_mp
 = 
	`dupmsg
(
dup_mp
)) {

2203 i‡(
	`ˇ≈uäext
(
¥us
->
q
)) {

2204 i‡(
¥us
->
Êags
 & 
US_RAWDATA
) {

2205 
dup_dup_mp
 = 
	`¥ïíd_ëhî
(
¥us
, dup_dup_mp, 
¥Ÿo
);

2207 
dup_dup_mp
 = 
	`¥ïíd_udöd
(
¥us
, dup_dup_mp, 
¥Ÿo
);

2209 i‡(
dup_dup_mp
 == 0)

2211 
	`puäext
(
¥us
->
q
, 
dup_dup_mp
);

2213 
	`DPRINT
("ppp_urput: dataÅoÖromisc q dropped\n");

2214 
	`‰ìmsg
(
dup_dup_mp
);

2219 i‡(
	`ˇ≈uäext
(
¥us
->
q
)) {

2220 i‡(
¥us
->
Êags
 & 
US_RAWDATA
) {

2221 
dup_mp
 = 
	`¥ïíd_ëhî
(
¥us
, dup_mp, 
¥Ÿo
);

2223 
dup_mp
 = 
	`¥ïíd_udöd
(
¥us
, dup_mp, 
¥Ÿo
);

2225 i‡(
dup_mp
 != 0)

2226 
	`puäext
(
¥us
->
q
, 
dup_mp
);

2228 
	`DPRINT
("ppp_urput: dataÅoÖromisc q dropped\n");

2229 
	`‰ìmsg
(
dup_mp
);

2233 
	}
}

2243 
	$µ∂Ωut
(
q
, 
mp
)

2244 
queue_t
 *
q
;

2245 
mblk_t
 *
mp
;

2247 
queue_t
 *
uq
;

2248 
iocblk
 *
i›
;

2250 
mp
->
b_d©≠
->
db_ty≥
) {

2251 
M_IOCTL
:

2252 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

2253 
i›
->
ioc_îr‹
 = 
EINVAL
;

2254 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

2255 
	`qª∂y
(
q
, 
mp
);

2257 
M_FLUSH
:

2258 i‡(*
mp
->
b_Ωå
 & 
FLUSHR
)

2259 
	`Êushq
(
q
, 
FLUSHDATA
);

2260 i‡(*
mp
->
b_Ωå
 & 
FLUSHW
) {

2261 *
mp
->
b_Ωå
 &~
FLUSHR
;

2262 
	`qª∂y
(
q
, 
mp
);

2264 
	`‰ìmsg
(
mp
);

2272 i‡(!
TRYLOCK_LOWER_R
) {

2273 i‡(!
	`putq
(
q
, 
mp
))

2274 
	`‰ìmsg
(
mp
);

2281 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

2282 i‡(
uq
 == 0) {

2283 
UNLOCK_LOWER
;

2284 
	`DPRINT1
("µ∂Ωut: q = %x, uq = 0??\n", 
q
);

2285 
	`‰ìmsg
(
mp
);

2295 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || (
	`qsize
(
q
Ë=0 && 
	`ˇ≈ut
(
uq
)))

2296 
	`put
(
uq
, 
mp
);

2297 i‡(!
	`putq
(
q
, 
mp
))

2298 
	`‰ìmsg
(
mp
);

2300 
UNLOCK_LOWER
;

2302 
	}
}

2305 
	$µ∂r§v
(
q
)

2306 
queue_t
 *
q
;

2308 
mblk_t
 *
mp
;

2309 
queue_t
 *
uq
;

2316 
LOCK_LOWER_R
;

2317 
uq
 = (
queue_t
 *Ë
q
->
q_±r
;

2318 i‡(
uq
 == 0) {

2319 
UNLOCK_LOWER
;

2320 
	`Êushq
(
q
, 
FLUSHALL
);

2321 
	`DPRINT1
("µ∂r§v: q = %x, uq = 0??\n", 
q
);

2324 (
mp
 = 
	`gëq
(
q
)) != 0) {

2325 i‡(
	`que˛ass
(
mp
Ë=
QPCTL
 || 
	`ˇ≈ut
(
uq
))

2326 
	`put
(
uq
, 
mp
);

2328 
	`putbq
(
q
, 
mp
);

2332 
UNLOCK_LOWER
;

2334 
	}
}

2337 
	$put˘l2
(
q
, 
ty≥
, 
code
, 
vÆ
)

2338 
queue_t
 *
q
;

2339 
ty≥
, 
code
, 
vÆ
;

2341 
mblk_t
 *
mp
;

2343 
mp
 = 
	`Ælocb
(2, 
BPRI_HI
);

2344 i‡(
mp
 == 0)

2346 
mp
->
b_d©≠
->
db_ty≥
 = 
ty≥
;

2347 
mp
->
b_w±r
[0] = 
code
;

2348 
mp
->
b_w±r
[1] = 
vÆ
;

2349 
mp
->
b_w±r
 += 2;

2350 
	`puäext
(
q
, 
mp
);

2352 
	}
}

2355 
	$put˘l4
(
q
, 
ty≥
, 
code
, 
vÆ
)

2356 
queue_t
 *
q
;

2357 
ty≥
, 
code
, 
vÆ
;

2359 
mblk_t
 *
mp
;

2361 
mp
 = 
	`Ælocb
(4, 
BPRI_HI
);

2362 i‡(
mp
 == 0)

2364 
mp
->
b_d©≠
->
db_ty≥
 = 
ty≥
;

2365 
mp
->
b_w±r
[0] = 
code
;

2366 ((*)
mp
->
b_w±r
)[1] = 
vÆ
;

2367 
mp
->
b_w±r
 += 4;

2368 
	`puäext
(
q
, 
mp
);

2370 
	}
}

2373 
	$debug_dump
(
q
, 
mp
)

2374 
queue_t
 *
q
;

2375 
mblk_t
 *
mp
;

2377 
uµî°r_t
 *
us
;

2378 
queue_t
 *
uq
, *
lq
;

2380 
	`DPRINT
("ppp upper streams:\n");

2381 
us
 = 
mö‹_devs
; u†!0; u†us->
√xtmn
) {

2382 
uq
 = 
us
->
q
;

2383 
	`DPRINT3
(" %d: q=%xÑlev=%d",

2384 
us
->
mn
, 
uq
, (uq? 
	`qsize
(uq): 0));

2385 
	`DPRINT3
(" wÀv=%d fœgs=0x%b", (
uq
? 
	`qsize
(
	`WR
(uq)): 0),

2386 
us
->
Êags
, "\020\1priv\2control\3blocked\4last");

2387 
	`DPRINT3
(" sèã=%x s≠=%xÑeq_ßp=%x", 
us
->
°©e
, us->
ßp
,

2388 
us
->
ªq_ßp
);

2389 i‡(
us
->
µa
 == 0)

2390 
	`DPRINT
("Öpa=?\n");

2392 
	`DPRINT1
("Ö∑=%d\n", 
us
->
µa
->
µa_id
);

2393 i‡(
us
->
Êags
 & 
US_CONTROL
) {

2394 
lq
 = 
us
->
lowîq
;

2395 
	`DPRINT3
(" control for %dÜq=%xÑlev=%d",

2396 
us
->
µa_id
, 
lq
, (lq? 
	`qsize
(
	`RD
(lq)): 0));

2397 
	`DPRINT3
(" wlev=%d mru=%d mtu=%d\n",

2398 (
lq
? 
	`qsize
÷q): 0), 
us
->
mru
, us->
mtu
);

2401 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

2402 
	`qª∂y
(
q
, 
mp
);

2403 
	}
}

2405 #ifde‡
FILTER_PACKETS


2406 
	~<√töë/ö_sy°m.h
>

2407 
	~<√töë/ù.h
>

2408 
	~<√töë/udp.h
>

2409 
	~<√töë/t˝.h
>

2411 
	#MAX_IPHDR
 128

	)

2421 
	spktfût_èb
 {

2422 
	m¥Ÿo
;

2423 
u_sh‹t
 
	mp‹t
;

2424 
u_sh‹t
 
	mok_if_lök_up
;

2425 } 
	gpktfût_èb
[] = {

2426 { 
IPPROTO_UDP
, 520, 1 },

2427 { 
IPPROTO_UDP
, 123, 1 },

2436 
	$ù_h¨d_fûãr
(
us
, 
mp
, 
outbound
)

2437 
uµî°r_t
 *
us
;

2438 
mblk_t
 *
mp
;

2439 
outbound
;

2441 
ù
 *ip;

2442 
pktfût_èb
 *
p·
;

2443 
mblk_t
 *
ãmp_mp
;

2444 
¥Ÿo
;

2445 
Àn
, 
hÀn
;

2449 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

2450 i‡(
us
->
Êags
 & 
US_DBGLOG
)

2451 
	`DPRINT3
("µp/%d: fûãr,ÖrŸo=0x%x, out=%d\n", 
us
->
mn
, 
¥Ÿo
, 
outbound
);

2453 
¥Ÿo
)

2455 
PPP_IP
:

2456 i‡((
mp
->
b_w±r
 - mp->
b_Ωå
Ë=
PPP_HDRLEN
 && mp->
b_c⁄t
 != 0) {

2457 
ãmp_mp
 = 
mp
->
b_c⁄t
;

2458 
Àn
 = 
	`msgdsize
(
ãmp_mp
);

2459 
hÀn
 = (
Àn
 < 
MAX_IPHDR
) ?Üen : MAX_IPHDR;

2460 
	`PULLUP
(
ãmp_mp
, 
hÀn
);

2461 i‡(
ãmp_mp
 == 0) {

2462 
	`DPRINT2
("ppp/%d: filter,ÖullupÇext failed,Üen=%d\n",

2463 
us
->
mn
, 
hÀn
);

2464 
mp
->
b_c⁄t
 = 0;

2465 
	`‰ìmsg
(
mp
);

2468 
ù
 = (ù *)
mp
->
b_c⁄t
->
b_Ωå
;

2471 
Àn
 = 
	`msgdsize
(
mp
);

2472 
hÀn
 = (
Àn
 < (
PPP_HDRLEN
+
MAX_IPHDR
)) ?Üen : (PPP_HDRLEN+MAX_IPHDR);

2473 
	`PULLUP
(
mp
, 
hÀn
);

2474 i‡(
mp
 == 0) {

2475 
	`DPRINT2
("ppp/%d: filter,Öullup failed,Üen=%d\n",

2476 
us
->
mn
, 
hÀn
);

2479 
ù
 = (ù *)(
mp
->
b_Ωå
 + 
PPP_HDRLEN
);

2487 
p·
=
pktfût_èb
;Ö·->
¥Ÿo
 != -1;Öft++) {

2488 i‡(
ù
->
ù_p
 =
p·
->
¥Ÿo
) {

2489 
p·
->
¥Ÿo
) {

2490 
IPPROTO_UDP
:

2491 i‡(((
udphdr
 *Ë&((*)
ù
)[ù->
ù_hl
])->
uh_dp‹t


2492 =
	`ht⁄s
(
p·
->
p‹t
)Ë
ídf‹
;

2494 
IPPROTO_TCP
:

2495 i‡(((
t˝hdr
 *Ë&((*)
ù
)[ù->
ù_hl
])->
th_dp‹t


2496 =
	`ht⁄s
(
p·
->
p‹t
)Ë
ídf‹
;

2501 
ídf‹
:

2502 i‡(
p·
->
¥Ÿo
 != -1) {

2503 i‡(
us
->
Êags
 & 
US_DBGLOG
)

2504 
	`DPRINT3
("ppp/%d: found IPÖkt,Öroto=0x%x (%d)\n",

2505 
us
->
mn
, 
p·
->
¥Ÿo
,Ö·->
p‹t
);

2508 i‡(
p·
->
ok_if_lök_up
)

2510 
	`‰ìmsg
(
mp
);

2517 
	}
}

	@solaris/ppp_ahdlc.c

58 
	~<sys/ty≥s.h
>

59 
	~<sys/∑øm.h
>

60 
	~<sys/°ªam.h
>

61 
	~<sys/°r›ts.h
>

62 
	~<sys/î∫o.h
>

64 #ifde‡
SVR4


65 
	~<sys/c⁄f.h
>

66 
	~<sys/kmem.h
>

67 
	~<sys/cmn_îr.h
>

68 
	~<sys/ddi.h
>

70 
	~<sys/u£r.h
>

71 #ifde‡
__osf__


72 
	~<sys/cmn_îr.h
>

76 
	~<√t/µp_defs.h
>

77 
	~<√t/µpio.h
>

78 
	~"µp_mod.h
"

83 #i‡
deföed
(
SOL2
)

84 
	#USE_MUTEX


	)

87 #ifde‡
USE_MUTEX


88 
	#MUTEX_ENTER
(
x
Ë
	`muãx_íãr
(x)

	)

89 
	#MUTEX_EXIT
(
x
Ë
	`muãx_exô
(x)

	)

91 
	#MUTEX_ENTER
(
x
)

	)

92 
	#MUTEX_EXIT
(
x
)

	)

102 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

103 
	töçoöãr_t
;

104 
	tuöçoöãr_t
;

106 
	töçoöãr_t
;

107 
	tuöçoöãr_t
;

110 
MOD_OPEN_DECL
(
ahdlc_›í
);

111 
MOD_CLOSE_DECL
(
ahdlc_˛o£
);

112 
ahdlc_wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

113 
ahdlc_Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

114 
ahdlc_ícode
 
__P
((
queue_t
 *, 
mblk_t
 *));

115 
ahdlc_decode
 
__P
((
queue_t
 *, 
mblk_t
 *));

116 
msg_byã
 
__P
((
mblk_t
 *, ));

118 #i‡
deföed
(
SOL2
)

123 
	#FLAG_TIME
 1500

	)

124 
	#ABS
(
x
Ë(x >0 ? x : (-x))

	)

130 
	#MSG_BYTE
(
mp
, 
i
Ë((iË< (mp)->
b_w±r
 - (mp)->
b_Ωå
? (mp)->b_rptr[i]: \

131 
	`msg_byã
((
mp
), (
i
)))

	)

136 
	#LCP_USE_DFLT
(
mp
Ë(1 <(
code
 = 
	`MSG_BYTE
((mp), 4)Ë&& codê<7)

	)

141 
moduÀ_öfo
 
	gmöfo
 = {

142 0x7d23, "µp_ahdl", 0, 
INFPSZ
, 32768, 512

145 
qöô
 
	gröô
 = {

146 
ahdlc_Ωut
, 
NULL
, 
ahdlc_›í
, 
ahdlc_˛o£
, NULL, &
möfo
, NULL

149 
qöô
 
	gwöô
 = {

150 
ahdlc_wput
, 
NULL
, NULL, NULL, NULL, &
möfo
, NULL

153 #i‡
deföed
(
SVR4
Ë&& !deföed(
SOL2
)

154 
	gphdldevÊag
 = 0;

155 
	#µp_ahdlcöfo
 
phdlöfo


	)

158 
°ªamèb
 
	gµp_ahdlcöfo
 = {

159 &
röô
,

160 &
wöô
,

161 
NULL
,

162 
NULL
,

163 #i‡
deföed
(
SUNOS4
)

164 
NULL


168 #i‡
deföed
(
SUNOS4
)

169 
	gµp_ahdlc_cou¡
 = 0;

175 
	sahdlc_°©e
 {

176 #i‡
deföed
(
USE_MUTEX
)

177 
kmuãx_t
 
	mlock
;

179 
	mÊags
;

180 
mblk_t
 *
	mrx_buf
;

181 
	mrx_buf_size
;

182 
ush‹t_t
 
	möfcs
;

183 
u_öt32_t
 
	mxaccm
[8];

184 
u_öt32_t
 
	møccm
;

185 
	mmtu
;

186 
	mmru
;

187 
	munô
;

188 
µp°©
 
	m°©s
;

189 #i‡
deföed
(
SOL2
)

190 
˛ock_t
 
	mÊag_time
;

191 
˛ock_t
 
	mlbﬁt
;

193 } 
	tahdlc_°©e_t
;

198 
	#ESCAPED
 0x100

	)

199 
	#IFLUSH
 0x200

	)

204 
	#RCV_FLAGS
 (
RCV_B7_1
|
RCV_B7_0
|
RCV_ODDP
|
RCV_EVNP
)

	)

209 
u_sh‹t
 
	gfc°ab
[256] = {

244 
u_öt32_t
 
	g∑rôyèb
[8] =

253 
	$MOD_OPEN
(
ahdlc_›í
)

255 
ahdlc_°©e_t
 *
°©e
;

256 
mblk_t
 *
mp
;

261 i‡(
q
->
q_±r
) {

268 i‡(
sÊag
 !
MODOPEN
) {

269 
	`OPEN_ERROR
(
EINVAL
);

272 
°©e
 = (
ahdlc_°©e_t
 *Ë
	`ALLOC_NOSLEEP
((ahdlc_state_t));

273 i‡(
°©e
 == 0)

274 
	`OPEN_ERROR
(
ENOSR
);

275 
	`bzîo
((
ˇddr_t
Ë
°©e
, (
ahdlc_°©e_t
));

277 
q
->
q_±r
 = (
ˇddr_t
Ë
°©e
;

278 
	`WR
(
q
)->
q_±r
 = (
ˇddr_t
Ë
°©e
;

280 #i‡
	`deföed
(
USE_MUTEX
)

281 
	`muãx_öô
(&
°©e
->
lock
, 
NULL
, 
MUTEX_DEFAULT
, NULL);

284 
°©e
->
xaccm
[0] = ~0;

285 
°©e
->
xaccm
[3] = 0x60000000;

286 
°©e
->
mru
 = 
PPP_MRU
;

287 #i‡
	`deföed
(
SOL2
)

288 
°©e
->
Êag_time
 = 
	`drv_u£˘ohz
(
FLAG_TIME
);

291 #i‡
	`deföed
(
SUNOS4
)

292 
µp_ahdlc_cou¡
++;

295 
	`q¥ocs⁄
(
q
);

297 i‡((
mp
 = 
	`Ælocb
(1, 
BPRI_HI
)Ë!
NULL
) {

298 
mp
->
b_d©≠
->
db_ty≥
 = 
M_FLUSH
;

299 *
mp
->
b_w±r
++ = 
FLUSHR
;

300 
	`puäext
(
q
, 
mp
);

304 
	}
}

309 
	$MOD_CLOSE
(
ahdlc_˛o£
)

311 
ahdlc_°©e_t
 *
°©e
;

313 
	`q¥ocsoff
(
q
);

315 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

317 i‡(
°©e
 == 0) {

318 
	`DPRINT
("state == 0 ináhdlc_close\n");

322 i‡(
°©e
->
rx_buf
 != 0) {

323 
	`‰ìmsg
(
°©e
->
rx_buf
);

324 
°©e
->
rx_buf
 = 0;

327 #i‡
	`deföed
(
USE_MUTEX
)

328 
	`muãx_de°roy
(&
°©e
->
lock
);

331 
	`FREE
(
q
->
q_±r
, (
ahdlc_°©e_t
));

332 
q
->
q_±r
 = 
NULL
;

333 
	`OTHERQ
(
q
)->
q_±r
 = 
NULL
;

335 #i‡
	`deföed
(
SUNOS4
)

336 i‡(
µp_ahdlc_cou¡
)

337 
µp_ahdlc_cou¡
--;

341 
	}
}

347 
	$ahdlc_wput
(
q
, 
mp
)

348 
queue_t
 *
q
;

349 
mblk_t
 *
mp
;

351 
ahdlc_°©e_t
 *
°©e
;

352 
iocblk
 *
i›
;

353 
îr‹
;

354 
mblk_t
 *
≈
;

355 
µp_°©s
 *
p•
;

357 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

358 i‡(
°©e
 == 0) {

359 
	`DPRINT
("state == 0 ináhdlc_wput\n");

360 
	`‰ìmsg
(
mp
);

364 
mp
->
b_d©≠
->
db_ty≥
) {

365 
M_DATA
:

370 
	`ahdlc_ícode
(
q
, 
mp
);

371 
	`‰ìmsg
(
mp
);

374 
M_IOCTL
:

375 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

376 
îr‹
 = 
EINVAL
;

377 
i›
->
ioc_cmd
) {

378 
PPPIO_XACCM
:

379 i‡((
i›
->
ioc_cou¡
 < (
u_öt32_t
)) ||

380 (
i›
->
ioc_cou¡
 > (
ext_accm
))) {

383 i‡(
mp
->
b_c⁄t
 == 0) {

384 
	`DPRINT1
("ahdlc_wput/%d: PPPIO_XACCM b_c⁄à0!\n", 
°©e
->
unô
);

387 
	`MUTEX_ENTER
(&
°©e
->
lock
);

388 
	`bc›y
((
ˇddr_t
)
mp
->
b_c⁄t
->
b_Ωå
, (ˇddr_t)
°©e
->
xaccm
,

389 
i›
->
ioc_cou¡
);

390 
°©e
->
xaccm
[2] &= ~0x40000000;

391 
°©e
->
xaccm
[3] |= 0x60000000;

392 
	`MUTEX_EXIT
(&
°©e
->
lock
);

393 
i›
->
ioc_cou¡
 = 0;

394 
îr‹
 = 0;

397 
PPPIO_RACCM
:

398 i‡(
i›
->
ioc_cou¡
 !(
u_öt32_t
))

400 i‡(
mp
->
b_c⁄t
 == 0) {

401 
	`DPRINT1
("ahdlc_wput/%d: PPPIO_RACCM b_c⁄à0!\n", 
°©e
->
unô
);

404 
	`MUTEX_ENTER
(&
°©e
->
lock
);

405 
	`bc›y
((
ˇddr_t
)
mp
->
b_c⁄t
->
b_Ωå
, (ˇddr_t)&
°©e
->
øccm
,

406 (
u_öt32_t
));

407 
	`MUTEX_EXIT
(&
°©e
->
lock
);

408 
i›
->
ioc_cou¡
 = 0;

409 
îr‹
 = 0;

412 
PPPIO_GCLEAN
:

413 
≈
 = 
	`Ælocb
((), 
BPRI_HI
);

414 i‡(
≈
 == 0) {

415 
îr‹
 = 
ENOSR
;

418 i‡(
mp
->
b_c⁄t
 != 0)

419 
	`‰ìmsg
(
mp
->
b_c⁄t
);

420 
mp
->
b_c⁄t
 = 
≈
;

421 
	`MUTEX_ENTER
(&
°©e
->
lock
);

422 *(*)
≈
->
b_w±r
 = 
°©e
->
Êags
 & 
RCV_FLAGS
;

423 
	`MUTEX_EXIT
(&
°©e
->
lock
);

424 
≈
->
b_w±r
 += ();

425 
i›
->
ioc_cou¡
 = ();

426 
îr‹
 = 0;

429 
PPPIO_GETSTAT
:

430 
≈
 = 
	`Ælocb
((
µp_°©s
), 
BPRI_HI
);

431 i‡(
≈
 == 0) {

432 
îr‹
 = 
ENOSR
;

435 i‡(
mp
->
b_c⁄t
 != 0)

436 
	`‰ìmsg
(
mp
->
b_c⁄t
);

437 
mp
->
b_c⁄t
 = 
≈
;

438 
p•
 = (
µp_°©s
 *Ë
≈
->
b_w±r
;

439 
≈
->
b_w±r
 +(
µp_°©s
);

440 
	`bzîo
((
ˇddr_t
)
p•
, (
µp_°©s
));

441 
p•
->
p
 = 
°©e
->
°©s
;

442 
i›
->
ioc_cou¡
 = (
µp_°©s
);

443 
îr‹
 = 0;

446 
PPPIO_LASTMOD
:

448 
îr‹
 = 0;

452 
îr‹
 = -1;

456 i‡(
îr‹
 < 0)

457 
	`puäext
(
q
, 
mp
);

458 i‡(
îr‹
 == 0) {

459 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

460 
	`qª∂y
(
q
, 
mp
);

462 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

463 
i›
->
ioc_cou¡
 = 0;

464 
i›
->
ioc_îr‹
 = 
îr‹
;

465 
	`qª∂y
(
q
, 
mp
);

469 
M_CTL
:

470 *
mp
->
b_Ωå
) {

471 
PPPCTL_MTU
:

472 
	`MUTEX_ENTER
(&
°©e
->
lock
);

473 
°©e
->
mtu
 = ((*)
mp
->
b_Ωå
)[1];

474 
	`MUTEX_EXIT
(&
°©e
->
lock
);

476 
PPPCTL_MRU
:

477 
	`MUTEX_ENTER
(&
°©e
->
lock
);

478 
°©e
->
mru
 = ((*)
mp
->
b_Ωå
)[1];

479 
	`MUTEX_EXIT
(&
°©e
->
lock
);

481 
PPPCTL_UNIT
:

482 
	`MUTEX_ENTER
(&
°©e
->
lock
);

483 
°©e
->
unô
 = 
mp
->
b_Ωå
[1];

484 
	`MUTEX_EXIT
(&
°©e
->
lock
);

487 
	`puäext
(
q
, 
mp
);

490 
	`‰ìmsg
(
mp
);

494 
	`puäext
(
q
, 
mp
);

498 
	}
}

504 
	$ahdlc_Ωut
(
q
, 
mp
)

505 
queue_t
 *
q
;

506 
mblk_t
 *
mp
;

508 
ahdlc_°©e_t
 *
°©e
;

510 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

511 i‡(
°©e
 == 0) {

512 
	`DPRINT
("state == 0 ináhdlc_rput\n");

513 
	`‰ìmsg
(
mp
);

517 
mp
->
b_d©≠
->
db_ty≥
) {

518 
M_DATA
:

519 
	`ahdlc_decode
(
q
, 
mp
);

522 
M_HANGUP
:

523 
	`MUTEX_ENTER
(&
°©e
->
lock
);

524 i‡(
°©e
->
rx_buf
 != 0) {

526 
	`‰ìmsg
(
°©e
->
rx_buf
);

527 
°©e
->
rx_buf
 = 0;

529 
°©e
->
Êags
 = 
IFLUSH
;

530 
	`MUTEX_EXIT
(&
°©e
->
lock
);

531 
	`puäext
(
q
, 
mp
);

535 
	`puäext
(
q
, 
mp
);

538 
	}
}

543 
	#IN_TX_MAP
(
c
, 
m
Ë((m)[(cË>> 5] & (1 << ((cË& 0x1f)))

	)

546 
	$ahdlc_ícode
(
q
, 
mp
)

547 
queue_t
 *
q
;

548 
mblk_t
 *
mp
;

550 
ahdlc_°©e_t
 *
°©e
;

551 
u_öt32_t
 *
xaccm
, 
loc_xaccm
[8];

552 
ush‹t_t
 
fcs
;

553 
size_t
 
outmp_Àn
;

554 
mblk_t
 *
outmp
, *
tmp
;

555 
uch¨_t
 *
dp
, 
fcs_vÆ
;

556 
is_l˝
, 
code
;

557 #i‡
	`deföed
(
SOL2
)

558 
˛ock_t
 
lbﬁt
;

561 i‡(
	`msgdsize
(
mp
) < 4) {

565 
°©e
 = (
ahdlc_°©e_t
 *)
q
->
q_±r
;

566 
	`MUTEX_ENTER
(&
°©e
->
lock
);

572 
outmp_Àn
 = (
	`msgdsize
(
mp
) << 1) +

573 ((
fcs
) << 2) +

574 ((
uch¨_t
) << 1);

576 
outmp
 = 
	`Ælocb
(
outmp_Àn
, 
BPRI_MED
);

577 i‡(
outmp
 =
NULL
) {

578 
°©e
->
°©s
.
µp_€º‹s
++;

579 
	`MUTEX_EXIT
(&
°©e
->
lock
);

580 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

584 #i‡
	`deföed
(
SOL2
)

589 i‡(
	`drv_gë∑rm
(
LBOLT
, &
lbﬁt
) != -1) {

590 i‡(
	`ABS
((
˛ock_t
)
lbﬁt
 - 
°©e
->lbﬁtË> sèã->
Êag_time
) {

591 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

593 
°©e
->
lbﬁt
 =Übolt;

595 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

602 i‡(
	`qsize
(
q
->
q_√xt
) == 0) {

603 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

611 
is_l˝
 = ((
	`MSG_BYTE
(
mp
, 0Ë=
PPP_ALLSTATIONS
) &&

612 (
	`MSG_BYTE
(
mp
, 1Ë=
PPP_UI
) &&

613 (
	`MSG_BYTE
(
mp
, 2Ë=(
PPP_LCP
 >> 8)) &&

614 (
	`MSG_BYTE
(
mp
, 3Ë=(
PPP_LCP
 & 0xff)) &&

615 
	`LCP_USE_DFLT
(
mp
));

617 
xaccm
 = 
°©e
->xaccm;

618 i‡(
is_l˝
) {

619 
	`bc›y
((
ˇddr_t
)
°©e
->
xaccm
, (ˇddr_t)
loc_xaccm
, (loc_xaccm));

620 
loc_xaccm
[0] = ~0;

621 
xaccm
 = 
loc_xaccm
;

624 
fcs
 = 
PPP_INITFCS
;

629 
tmp
 = 
mp
;Åmp;Åm∞tmp->
b_c⁄t
) {

630 i‡(
tmp
->
b_d©≠
->
db_ty≥
 =
M_DATA
) {

631 
dp
 = 
tmp
->
b_Ωå
; d∞<Åmp->
b_w±r
; dp++) {

632 
fcs
 = 
	`PPP_FCS
(fcs, *
dp
);

633 i‡(
	`IN_TX_MAP
(*
dp
, 
xaccm
)) {

634 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

635 *
outmp
->
b_w±r
++ = *
dp
 ^ 
PPP_TRANS
;

637 *
outmp
->
b_w±r
++ = *
dp
;

649 
fcs_vÆ
 = (
fcs
 ^ 0xffff) & 0xff;

650 i‡(
	`IN_TX_MAP
(
fcs_vÆ
, 
xaccm
)) {

651 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

652 *
outmp
->
b_w±r
++ = 
fcs_vÆ
 ^ 
PPP_TRANS
;

654 *
outmp
->
b_w±r
++ = 
fcs_vÆ
;

657 
fcs_vÆ
 = ((
fcs
 ^ 0xffff) >> 8) & 0xff;

658 i‡(
	`IN_TX_MAP
(
fcs_vÆ
, 
xaccm
)) {

659 *
outmp
->
b_w±r
++ = 
PPP_ESCAPE
;

660 *
outmp
->
b_w±r
++ = 
fcs_vÆ
 ^ 
PPP_TRANS
;

662 *
outmp
->
b_w±r
++ = 
fcs_vÆ
;

668 *
outmp
->
b_w±r
++ = 
PPP_FLAG
;

670 
°©e
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
outmp
);

671 
°©e
->
°©s
.
µp_›ackës
++;

673 
	`MUTEX_EXIT
(&
°©e
->
lock
);

675 
	`puäext
(
q
, 
outmp
);

676 
	}
}

681 
	#IN_RX_MAP
(
c
, 
m
Ë((((Ë(
uch¨_t
) (c)) < 0x20) && \

682 (
m
Ë& (1 << (
c
)))

	)

689 
	$ahdlc_decode
(
q
, 
mp
)

690 
queue_t
 *
q
;

691 
mblk_t
 *
mp
;

693 
ahdlc_°©e_t
 *
°©e
;

694 
mblk_t
 *
om
;

695 
uch¨_t
 *
dp
;

697 
°©e
 = (
ahdlc_°©e_t
 *Ë
q
->
q_±r
;

699 
	`MUTEX_ENTER
(&
°©e
->
lock
);

701 
°©e
->
°©s
.
µp_ibyãs
 +
	`msgdsize
(
mp
);

703 ; 
mp
 !0; 
om
 = mp->
b_c⁄t
, 
	`‰ìb
(mp), mp = om)

704 
dp
 = 
mp
->
b_Ωå
; d∞< mp->
b_w±r
; dp++) {

711 i‡(*
dp
 & 0x80)

712 
°©e
->
Êags
 |
RCV_B7_1
;

714 
°©e
->
Êags
 |
RCV_B7_0
;

716 i‡(
∑rôyèb
[*
dp
 >> 5] & (1 << (*dp & 0x1f)))

717 
°©e
->
Êags
 |
RCV_ODDP
;

719 
°©e
->
Êags
 |
RCV_EVNP
;

724 i‡(*
dp
 =
PPP_FLAG
) {

730 i‡((
°©e
->
Êags
 & 
IFLUSH
) ||

731 (
°©e
->
rx_buf
 == 0) ||

732 (
	`msgdsize
(
°©e
->
rx_buf
) == 0)) {

734 
°©e
->
Êags
 &~
IFLUSH
;

743 
om
 = 
°©e
->
rx_buf
;

745 i‡(
°©e
->
öfcs
 =
PPP_GOODFCS
) {

746 
°©e
->
°©s
.
µp_ùackës
++;

747 
	`adjmsg
(
om
, -
PPP_FCSLEN
);

748 
	`puäext
(
q
, 
om
);

750 
	`DPRINT2
("ppp%d: bad fcs (len=%d)\n",

751 
°©e
->
unô
, 
	`msgdsize
(°©e->
rx_buf
));

752 
	`‰ìmsg
(
°©e
->
rx_buf
);

753 
°©e
->
Êags
 &~(
IFLUSH
 | 
ESCAPED
);

754 
°©e
->
°©s
.
µp_õº‹s
++;

755 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

758 
°©e
->
rx_buf
 = 0;

762 i‡(
°©e
->
Êags
 & 
IFLUSH
) {

772 i‡(
°©e
->
rx_buf
 == 0) {

773 
°©e
->
rx_buf_size
 = (°©e->
mru
 < 
PPP_MRU
 ? PPP_MRU : state->mru);

774 
°©e
->
rx_buf_size
 +((
u_öt32_t
) << 3);

775 
°©e
->
rx_buf
 = 
	`Ælocb
(°©e->
rx_buf_size
, 
BPRI_MED
);

780 i‡(
°©e
->
rx_buf
 == 0) {

781 
°©e
->
Êags
 |
IFLUSH
;

784 
°©e
->
Êags
 &~(
IFLUSH
 | 
ESCAPED
);

785 
°©e
->
öfcs
 = 
PPP_INITFCS
;

788 i‡(*
dp
 =
PPP_ESCAPE
) {

789 
°©e
->
Êags
 |
ESCAPED
;

797 i‡(
°©e
->
Êags
 & 
ESCAPED
) {

798 *
dp
 ^
PPP_TRANS
;

799 
°©e
->
Êags
 &~
ESCAPED
;

800 } i‡(
	`IN_RX_MAP
(*
dp
, 
°©e
->
øccm
))

808 i‡(
	`msgdsize
(
°©e
->
rx_buf
Ë< sèã->
rx_buf_size
) {

809 
°©e
->
öfcs
 = 
	`PPP_FCS
(°©e->öfcs, *
dp
);

810 *
°©e
->
rx_buf
->
b_w±r
++ = *
dp
;

812 
	`DPRINT2
("ppp%d: frameÅooÜong (%d)\n",

813 
°©e
->
unô
, 
	`msgdsize
(°©e->
rx_buf
));

814 
	`‰ìmsg
(
°©e
->
rx_buf
);

815 
°©e
->
rx_buf
 = 0;

816 
°©e
->
Êags
 |
IFLUSH
;

820 
	`MUTEX_EXIT
(&
°©e
->
lock
);

821 
	}
}

824 
	$msg_byã
(
mp
, 
i
)

825 
mblk_t
 *
mp
;

826 
i
;

828 
mp
 !0 && 
i
 >mp->
b_w±r
 - mp->
b_Ωå
)

829 
mp
 = mp->
b_c⁄t
;

830 i‡(
mp
 == 0)

832  
mp
->
b_Ωå
[
i
];

833 
	}
}

	@solaris/ppp_ahdlc_mod.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/∑øm.h
>

3 
	~<sys/c⁄f.h
>

4 
	~<sys/mod˘l.h
>

5 
	~<sys/sunddi.h
>

7 
°ªamèb
 
µp_ahdlcöfo
;

9 
fmodsw
 
	gfsw
 = {

11 &
µp_ahdlcöfo
,

12 
D_NEW
 | 
D_MP
 | 
D_MTQPAIR


15 
mod_›s
 
mod_°rmod›s
;

17 
modl°rmod
 
	gmodl°rmod
 = {

18 &
mod_°rmod›s
,

20 &
fsw


23 
modlökage
 
	gmodlökage
 = {

24 
MODREV_1
,

25 (*Ë&
modl°rmod
,

26 
NULL


33 
	$_öô
()

35  
	`mod_ö°Æl
(&
modlökage
);

36 
	}
}

39 
	$_föi
()

41  
	`mod_ªmove
(&
modlökage
);

42 
	}
}

45 
	$_öfo
(
mù
)

46 
modöfo
 *
mù
;

48  
	`mod_öfo
(&
modlökage
, 
mù
);

49 
	}
}

	@solaris/ppp_comp.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/∑øm.h
>

44 
	~<sys/î∫o.h
>

45 
	~<sys/°ªam.h
>

47 #ifde‡
SVR4


48 
	~<sys/c⁄f.h
>

49 
	~<sys/cmn_îr.h
>

50 
	~<sys/ddi.h
>

52 
	~<sys/u£r.h
>

53 #ifde‡
__osf__


54 
	~<sys/cmn_îr.h
>

58 
	~<√t/µp_defs.h
>

59 
	~<√t/µpio.h
>

60 
	~"µp_mod.h
"

62 #ifde‡
__osf__


63 
	~<sys/mbuf.h
>

64 
	~<sys/¥Ÿosw.h
>

67 
	~<√töë/ö.h
>

68 
	~<√töë/ö_sy°m.h
>

69 
	~<√töë/ù.h
>

70 
	~<√t/vjcom¥ess.h
>

72 
	#PACKETPTR
 
mblk_t
 *

	)

73 
	~<√t/µp-comp.h
>

75 
MOD_OPEN_DECL
(
µp_comp_›í
);

76 
MOD_CLOSE_DECL
(
µp_comp_˛o£
);

77 
µp_comp_Ωut
 
__P
((
queue_t
 *, 
mblk_t
 *));

78 
µp_comp_r§v
 
__P
((
queue_t
 *));

79 
µp_comp_wput
 
__P
((
queue_t
 *, 
mblk_t
 *));

80 
µp_comp_w§v
 
__P
((
queue_t
 *));

81 
µp_comp_c˝
 
__P
((
queue_t
 *, 
mblk_t
 *, ));

82 
msg_byã
 
__P
((
mblk_t
 *, ));

85 
	#MSG_BYTE
(
mp
, 
i
Ë((iË< (mp)->
b_w±r
 - (mp)->
b_Ωå
? (mp)->b_rptr[i]: \

86 
	`msg_byã
((
mp
), (
i
)))

	)

89 
	#LCP_USE_DFLT
(
mp
Ë(1 <(
code
 = 
	`MSG_BYTE
((mp), 4)Ë&& codê<7)

	)

91 
	#PPP_COMP_ID
 0xbadf

	)

92 
moduÀ_öfo
 
	gmöfo
 = {

93 #ifde‡
PRIOQ


94 
PPP_COMP_ID
, "µp_comp", 0, 
INFPSZ
, 16512, 16384,

96 
PPP_COMP_ID
, "µp_comp", 0, 
INFPSZ
, 16384, 4096,

100 
qöô
 
	gr_öô
 = {

101 
µp_comp_Ωut
, 
µp_comp_r§v
, 
µp_comp_›í
, 
µp_comp_˛o£
,

102 
NULL
, &
möfo
, NULL

105 
qöô
 
	gw_öô
 = {

106 
µp_comp_wput
, 
µp_comp_w§v
, 
NULL
, NULL, NULL, &
möfo
, NULL

109 #i‡
deföed
(
SVR4
Ë&& !deföed(
SOL2
)

110 
	gpcmpdevÊag
 = 0;

111 
	#µp_compöfo
 
pcmpöfo


	)

113 
°ªamèb
 
	gµp_compöfo
 = {

114 &
r_öô
, &
w_öô
, 
NULL
, NULL

117 
	gµp_comp_cou¡
;

119 #ifde‡
__osf__


121 
µp_comp_Æloc
 
__P
((
comp_°©e_t
 *));

122 
	smemªq
 {

123 
	mcomp_›ts
[20];

124 
	mcmd
;

125 
	mthªad_°©us
;

126 *
	mªtu∫ed_mem
;

127 } 
	tmemªq_t
;

131 
	scomp_°©e
 {

132 
	mÊags
;

133 
	mmru
;

134 
	mmtu
;

135 
	munô
;

136 
com¥ess‹
 *
	mxcomp
;

137 *
	mx°©e
;

138 
com¥ess‹
 *
	mrcomp
;

139 *
	mr°©e
;

140 
vjcom¥ess
 
	mvj_comp
;

141 
	mvj_œ°_õº‹s
;

142 
µp°©
 
	m°©s
;

143 #ifde‡
__osf__


144 
memªq_t
 
	mmemªq
;

145 
thªad_t
 
	mthªad
;

147 } 
	tcomp_°©e_t
;

150 #ifde‡
__osf__


151 
èsk_t
 
fú°_èsk
;

155 
	#CCP_ERR
 (
CCP_ERROR
 | 
CCP_FATALERROR
)

	)

156 
	#LAST_MOD
 0x1000000

	)

157 
	#DBGLOG
 0x2000000

	)

159 
	#MAX_IPHDR
 128

	)

160 
	#MAX_VJHDR
 20

	)

162 #unde‡
MIN


163 
	#MIN
(
a
, 
b
Ë(◊Ë< (b)? (a): (b))

	)

169 #i‡
DO_BSD_COMPRESS


170 
com¥ess‹
 
µp_bsd_com¥ess
;

172 #i‡
DO_DEFLATE


173 
com¥ess‹
 
µp_deÊ©e
, 
µp_deÊ©e_dø·
;

176 
com¥ess‹
 *
	gµp_com¥ess‹s
[] = {

177 #i‡
DO_BSD_COMPRESS


178 &
µp_bsd_com¥ess
,

180 #i‡
DO_DEFLATE


181 &
µp_deÊ©e
,

182 &
µp_deÊ©e_dø·
,

184 
NULL


190 
	$MOD_OPEN
(
µp_comp_›í
)

192 
comp_°©e_t
 *
˝
;

193 #ifde‡
__osf__


194 
thªad_t
 
thªad
;

197 i‡(
q
->
q_±r
 =
NULL
) {

198 
˝
 = (
comp_°©e_t
 *Ë
	`ALLOC_SLEEP
((comp_state_t));

199 i‡(
˝
 =
NULL
)

200 
	`OPEN_ERROR
(
ENOSR
);

201 
	`bzîo
((
ˇddr_t
)
˝
, (
comp_°©e_t
));

202 
	`WR
(
q
)->
q_±r
 = q->q_±∏(
ˇddr_t
Ë
˝
;

203 
˝
->
mru
 = 
PPP_MRU
;

204 
˝
->
mtu
 = 
PPP_MTU
;

205 
˝
->
x°©e
 = 
NULL
;

206 
˝
->
r°©e
 = 
NULL
;

207 
	`vj_com¥ess_öô
(&
˝
->
vj_comp
, -1);

208 #ifde‡
__osf__


209 i‡(!(
thªad
 = 
	`kî√l_thªad_w_¨g
(
fú°_èsk
, 
µp_comp_Æloc
, (*)
˝
)))

210 
	`OPEN_ERROR
(
ENOSR
);

211 
˝
->
thªad
 =Åhread;

213 ++
µp_comp_cou¡
;

214 
	`q¥ocs⁄
(
q
);

217 
	}
}

219 
	$MOD_CLOSE
(
µp_comp_˛o£
)

221 
comp_°©e_t
 *
˝
;

223 
	`q¥ocsoff
(
q
);

224 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

225 i‡(
˝
 !
NULL
) {

226 i‡(
˝
->
x°©e
 !
NULL
)

227 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

228 i‡(
˝
->
r°©e
 !
NULL
)

229 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

230 #ifde‡
__osf__


231 i‡(!
˝
->
thªad
)

232 
	`¥ötf
("ppp_comp_close: NULLÅhread!\n");

234 
	`thªad_ãrmö©e
(
˝
->
thªad
);

236 
	`FREE
(
˝
, (
comp_°©e_t
));

237 
q
->
q_±r
 = 
NULL
;

238 
	`OTHERQ
(
q
)->
q_±r
 = 
NULL
;

239 --
µp_comp_cou¡
;

242 
	}
}

244 #ifde‡
__osf__


253 
	$µp_comp_Æloc
(
comp_°©e_t
 *
˝
)

255 
Àn
, 
cmd
;

256 *
com¥ess‹_›ti⁄s
;

257 
thªad_t
 
thªad
;

258 *(*
comp_Æloˇt‹
)();

261 #i‡
	`deföed
(
MAJOR_VERSION
) && (MAJOR_VERSION <= 2)

266 
thªad
 = 
	`cuºít_thªad
();

267 
˝
 = 
thªad
->
ª∂y_p‹t
;

268 
thªad
->
ª∂y_p‹t
 = 
PORT_NULL
;

273 
	`as£π_waô
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
, 
TRUE
);

274 
	`thªad_block
();

276 i‡(
	`thªad_should_hÆt
(
	`cuºít_thªad
()))

277 
	`thªad_hÆt_£lf
();

278 
cmd
 = 
˝
->
memªq
.cmd;

279 
com¥ess‹_›ti⁄s
 = &
˝
->
memªq
.
comp_›ts
[0];

280 
Àn
 = 
com¥ess‹_›ti⁄s
[1];

281 i‡(
cmd
 =
PPPIO_XCOMP
) {

282 
˝
->
memªq
.
ªtu∫ed_mem
 = cp->
xcomp
->
	`comp_Æloc
(
com¥ess‹_›ti⁄s
, 
Àn
);

283 i‡(!
˝
->
memªq
.
ªtu∫ed_mem
) {

284 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

286 
˝
->
memªq
.
thªad_°©us
 = 0;

289 
˝
->
memªq
.
ªtu∫ed_mem
 = cp->
rcomp
->
	`decomp_Æloc
(
com¥ess‹_›ti⁄s
, 
Àn
);

290 i‡(!
˝
->
memªq
.
ªtu∫ed_mem
) {

291 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

293 
˝
->
memªq
.
thªad_°©us
 = 0;

297 
	}
}

321 
	$µp_comp_wput
(
q
, 
mp
)

322 
queue_t
 *
q
;

323 
mblk_t
 *
mp
;

325 
iocblk
 *
i›
;

326 
comp_°©e_t
 *
˝
;

327 
îr‹
, 
Àn
, 
n
;

328 
Êags
, 
mask
;

329 
mblk_t
 *
≈
;

330 
com¥ess‹
 **
comp
;

331 
µp_°©s
 *
p•
;

332 
µp_comp_°©s
 *
c•
;

333 *
›t_d©a
;

334 
nx¶Ÿs
, 
ƒ¶Ÿs
;

336 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

337 i‡(
˝
 == 0) {

338 
	`DPRINT
("cp == 0 inÖpp_comp_wput\n");

339 
	`‰ìmsg
(
mp
);

343 
mp
->
b_d©≠
->
db_ty≥
) {

345 
M_DATA
:

346 
	`putq
(
q
, 
mp
);

349 
M_IOCTL
:

350 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

351 
îr‹
 = 
EINVAL
;

352 
i›
->
ioc_cmd
) {

354 
PPPIO_CFLAGS
:

356 i‡(
i›
->
ioc_cou¡
 != 2 * ())

358 i‡(
mp
->
b_c⁄t
 == 0) {

359 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_CFLAGS b_c⁄à0!\n", 
˝
->
unô
);

362 
Êags
 = ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[0];

363 
mask
 = ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[1];

364 
˝
->
Êags
 = (˝->Êag†& ~
mask
) | (flags & mask);

365 i‡((
mask
 & 
CCP_ISOPEN
Ë&& (
Êags
 & CCP_ISOPEN) == 0) {

366 i‡(
˝
->
x°©e
 !
NULL
) {

367 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

368 
˝
->
x°©e
 = 
NULL
;

370 i‡(
˝
->
r°©e
 !
NULL
) {

371 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

372 
˝
->
r°©e
 = 
NULL
;

374 
˝
->
Êags
 &~
CCP_ISUP
;

376 
îr‹
 = 0;

377 
i›
->
ioc_cou¡
 = ();

378 ((*Ë
mp
->
b_c⁄t
->
b_Ωå
)[0] = 
˝
->
Êags
;

379 
mp
->
b_c⁄t
->
b_w±r
 = mp->b_c⁄t->
b_Ωå
 + ();

382 
PPPIO_VJINIT
:

386 i‡(
i›
->
ioc_cou¡
 != 2)

388 i‡(
mp
->
b_c⁄t
 == 0) {

389 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_VJINIT b_c⁄à0!\n", 
˝
->
unô
);

392 
nx¶Ÿs
 = 
mp
->
b_c⁄t
->
b_Ωå
[0] + 1;

393 
ƒ¶Ÿs
 = 
mp
->
b_c⁄t
->
b_Ωå
[1] + 1;

394 i‡(
nx¶Ÿs
 > 
MAX_STATES
 || 
ƒ¶Ÿs
 > MAX_STATES)

396 
	`vj_com¥ess_öô
(&
˝
->
vj_comp
, 
nx¶Ÿs
);

397 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

398 
îr‹
 = 0;

399 
i›
->
ioc_cou¡
 = 0;

402 
PPPIO_XCOMP
:

403 
PPPIO_RCOMP
:

404 i‡(
i›
->
ioc_cou¡
 <= 0)

406 i‡(
mp
->
b_c⁄t
 == 0) {

407 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_[XR]COMP b_c⁄à0!\n", 
˝
->
unô
);

410 
›t_d©a
 = 
mp
->
b_c⁄t
->
b_Ωå
;

411 
Àn
 = 
mp
->
b_c⁄t
->
b_w±r
 - 
›t_d©a
;

412 i‡(
Àn
 > 
i›
->
ioc_cou¡
)

413 
Àn
 = 
i›
->
ioc_cou¡
;

414 i‡(
›t_d©a
[1] < 2 || o±_d©a[1] > 
Àn
)

416 
comp
 = 
µp_com¥ess‹s
; *com∞!
NULL
; ++comp)

417 i‡((*
comp
)->
com¥ess_¥Ÿo
 =
›t_d©a
[0]) {

419 
îr‹
 = 0;

420 #i‚de‡
__osf__


421 i‡(
i›
->
ioc_cmd
 =
PPPIO_XCOMP
) {

426 i‡(
˝
->
x°©e
 !
NULL
) {

427 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

428 
˝
->
x°©e
 = 
NULL
;

430 
˝
->
xcomp
 = *
comp
;

431 
˝
->
x°©e
 = (*
comp
)->
	`comp_Æloc
(
›t_d©a
, 
Àn
);

432 i‡(
˝
->
x°©e
 =
NULL
)

433 
îr‹
 = 
ENOSR
;

435 i‡(
˝
->
r°©e
 !
NULL
) {

436 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

437 
˝
->
r°©e
 = 
NULL
;

439 
˝
->
rcomp
 = *
comp
;

440 
˝
->
r°©e
 = (*
comp
)->
	`decomp_Æloc
(
›t_d©a
, 
Àn
);

441 i‡(
˝
->
r°©e
 =
NULL
)

442 
îr‹
 = 
ENOSR
;

445 i‡((
îr‹
 = 
˝
->
memªq
.
thªad_°©us
Ë!
EAGAIN
)

446 i‡(
i›
->
ioc_cmd
 =
PPPIO_XCOMP
) {

447 i‡(
˝
->
x°©e
) {

448 (*
˝
->
xcomp
->
comp_‰ì
)(˝->
x°©e
);

449 
˝
->
x°©e
 = 0;

453 i‡( (
˝
->
memªq
.
comp_›ts
Ë< 
Àn
) {

454 
	`¥ötf
("ˇn'àh™dÀ o±i⁄†f‹ com¥ess‹ %d (%d)\n", 
›t_d©a
[0],

455 
›t_d©a
[1]);

456 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

457 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

461 i‡(
˝
->
memªq
.
thªad_°©us
 =0 && !˝->memªq.
ªtu∫ed_mem
) {

462 
	`bc›y
(
›t_d©a
, 
˝
->
memªq
.
comp_›ts
, 
Àn
);

463 
˝
->
memªq
.
cmd
 = 
PPPIO_XCOMP
;

464 
˝
->
xcomp
 = *
comp
;

465 
îr‹
 = 
˝
->
memªq
.
thªad_°©us
 = 
EAGAIN
;

466 
	`thªad_wakeup
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
);

468 
˝
->
x°©e
 = cp->
memªq
.
ªtu∫ed_mem
;

469 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

470 
˝
->
memªq
.
thªad_°©us
 = 0;

473 i‡(
˝
->
r°©e
) {

474 (*
˝
->
rcomp
->
decomp_‰ì
)(˝->
r°©e
);

475 
˝
->
r°©e
 = 
NULL
;

477 i‡( (
˝
->
memªq
.
comp_›ts
Ë< 
Àn
) {

478 
	`¥ötf
("ˇn'àh™dÀ o±i⁄†f‹ com¥ess‹ %d (%d)\n", 
›t_d©a
[0],

479 
›t_d©a
[1]);

480 
˝
->
memªq
.
thªad_°©us
 = 
ENOSR
;

481 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

483 i‡(
˝
->
memªq
.
thªad_°©us
 =0 && !˝->memªq.
ªtu∫ed_mem
) {

484 
	`bc›y
(
›t_d©a
, 
˝
->
memªq
.
comp_›ts
, 
Àn
);

485 
˝
->
memªq
.
cmd
 = 
PPPIO_RCOMP
;

486 
˝
->
rcomp
 = *
comp
;

487 
îr‹
 = 
˝
->
memªq
.
thªad_°©us
 = 
EAGAIN
;

488 
	`thªad_wakeup
((
vm_off£t_t
)&
˝
->
memªq
.
thªad_°©us
);

490 
˝
->
r°©e
 = cp->
memªq
.
ªtu∫ed_mem
;

491 
˝
->
memªq
.
ªtu∫ed_mem
 = 0;

492 
˝
->
memªq
.
thªad_°©us
 = 0;

498 
i›
->
ioc_cou¡
 = 0;

501 
PPPIO_GETSTAT
:

502 i‡((
˝
->
Êags
 & 
LAST_MOD
) == 0) {

503 
îr‹
 = -1;

506 
≈
 = 
	`Ælocb
((
µp_°©s
), 
BPRI_HI
);

507 i‡(
≈
 == 0) {

508 
îr‹
 = 
ENOSR
;

511 i‡(
mp
->
b_c⁄t
 != 0)

512 
	`‰ìmsg
(
mp
->
b_c⁄t
);

513 
mp
->
b_c⁄t
 = 
≈
;

514 
p•
 = (
µp_°©s
 *Ë
≈
->
b_w±r
;

515 
≈
->
b_w±r
 +(
µp_°©s
);

516 
i›
->
ioc_cou¡
 = (
µp_°©s
);

517 
p•
->
p
 = 
˝
->
°©s
;

518 
p•
->
vj
 = 
˝
->
vj_comp
.
°©s
;

519 
îr‹
 = 0;

522 
PPPIO_GETCSTAT
:

523 
≈
 = 
	`Ælocb
((
µp_comp_°©s
), 
BPRI_HI
);

524 i‡(
≈
 == 0) {

525 
îr‹
 = 
ENOSR
;

528 i‡(
mp
->
b_c⁄t
 != 0)

529 
	`‰ìmsg
(
mp
->
b_c⁄t
);

530 
mp
->
b_c⁄t
 = 
≈
;

531 
c•
 = (
µp_comp_°©s
 *Ë
≈
->
b_w±r
;

532 
≈
->
b_w±r
 +(
µp_comp_°©s
);

533 
i›
->
ioc_cou¡
 = (
µp_comp_°©s
);

534 
	`bzîo
((
ˇddr_t
)
c•
, (
µp_comp_°©s
));

535 i‡(
˝
->
x°©e
 != 0)

536 (*
˝
->
xcomp
->
comp_°©
)(˝->
x°©e
, &
c•
->
c
);

537 i‡(
˝
->
r°©e
 != 0)

538 (*
˝
->
rcomp
->
decomp_°©
)(˝->
r°©e
, &
c•
->
d
);

539 
îr‹
 = 0;

542 
PPPIO_DEBUG
:

543 i‡(
i›
->
ioc_cou¡
 != ())

545 i‡(
mp
->
b_c⁄t
 == 0) {

546 
	`DPRINT1
("µp_comp_wput/%d: PPPIO_DEBUG b_c⁄à0!\n", 
˝
->
unô
);

549 
n
 = *(*)
mp
->
b_c⁄t
->
b_Ωå
;

550 i‡(
n
 =
PPPDBG_LOG
 + 
PPPDBG_COMP
) {

551 
	`DPRINT1
("µp_comp%d: debugÜogÉ«bÀd\n", 
˝
->
unô
);

552 
˝
->
Êags
 |
DBGLOG
;

553 
îr‹
 = 0;

554 
i›
->
ioc_cou¡
 = 0;

556 
îr‹
 = -1;

560 
PPPIO_LASTMOD
:

561 
˝
->
Êags
 |
LAST_MOD
;

562 
îr‹
 = 0;

566 
îr‹
 = -1;

570 i‡(
îr‹
 < 0)

571 
	`puäext
(
q
, 
mp
);

572 i‡(
îr‹
 == 0) {

573 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCACK
;

574 
	`qª∂y
(
q
, 
mp
);

576 
mp
->
b_d©≠
->
db_ty≥
 = 
M_IOCNAK
;

577 
i›
->
ioc_îr‹
 = 
îr‹
;

578 
i›
->
ioc_cou¡
 = 0;

579 
	`qª∂y
(
q
, 
mp
);

583 
M_CTL
:

584 *
mp
->
b_Ωå
) {

585 
PPPCTL_MTU
:

586 
˝
->
mtu
 = ((*)
mp
->
b_Ωå
)[1];

588 
PPPCTL_MRU
:

589 
˝
->
mru
 = ((*)
mp
->
b_Ωå
)[1];

591 
PPPCTL_UNIT
:

592 
˝
->
unô
 = 
mp
->
b_Ωå
[1];

595 
	`puäext
(
q
, 
mp
);

599 
	`puäext
(
q
, 
mp
);

603 
	}
}

606 
	$µp_comp_w§v
(
q
)

607 
queue_t
 *
q
;

609 
mblk_t
 *
mp
, *
cmp
 = 
NULL
;

610 
comp_°©e_t
 *
˝
;

611 
Àn
, 
¥Ÿo
, 
ty≥
, 
hÀn
, 
code
;

612 
ù
 *ip;

613 *
vjhdr
, *
dp
;

615 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

616 i‡(
˝
 == 0) {

617 
	`DPRINT
("cp == 0 inÖpp_comp_wsrv\n");

621 (
mp
 = 
	`gëq
(
q
)) != 0) {

623 #ifde‡
PRIOQ


624 i‡(!
	`bˇ≈uäext
(
q
,
mp
->
b_b™d
))

626 i‡(!
	`ˇ≈uäext
(
q
))

629 
	`putbq
(
q
, 
mp
);

636 
Àn
 = 
	`msgdsize
(
mp
);

637 i‡(
Àn
 < 
PPP_HDRLEN
) {

638 
	`DPRINT1
("µp_comp_w§v: bogu†sh‹à∑ckë (%d)\n", 
Àn
);

639 
	`‰ìmsg
(
mp
);

640 
˝
->
°©s
.
µp_€º‹s
++;

641 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

644 
¥Ÿo
 = (
	`MSG_BYTE
(
mp
, 2) << 8) + MSG_BYTE(mp, 3);

650 i‡(
¥Ÿo
 =
PPP_CCP
)

651 
hÀn
 = 
Àn
;

652 i‡(
¥Ÿo
 =
PPP_IP
)

653 
hÀn
 = 
PPP_HDRLEN
 + 
MAX_IPHDR
;

655 
hÀn
 = 
PPP_HDRLEN
;

656 i‡(
hÀn
 > 
Àn
)

657 
hÀn
 = 
Àn
;

658 i‡(
mp
->
b_w±r
 < mp->
b_Ωå
 + 
hÀn
 || mp->
b_d©≠
->
db_ªf
 > 1) {

659 
	`PULLUP
(
mp
, 
hÀn
);

660 i‡(
mp
 == 0) {

661 
	`DPRINT1
("µp_comp_w§v:ÖuŒu∞Áûed (%d)\n", 
hÀn
);

662 
˝
->
°©s
.
µp_€º‹s
++;

663 
	`put˘l1
(
	`RD
(
q
)->
q_√xt
, 
M_CTL
, 
PPPCTL_OERROR
);

671 i‡(
¥Ÿo
 =
PPP_IP
 && (
˝
->
Êags
 & 
COMP_VJC
)) {

672 
ù
 = (ù *Ë(
mp
->
b_Ωå
 + 
PPP_HDRLEN
);

673 i‡(
ù
->
ù_p
 =
IPPROTO_TCP
) {

674 
ty≥
 = 
	`vj_com¥ess_t˝
(
ù
, 
Àn
 - 
PPP_HDRLEN
, &
˝
->
vj_comp
,

675 (
˝
->
Êags
 & 
COMP_VJCCID
), &
vjhdr
);

676 
ty≥
) {

677 
TYPE_UNCOMPRESSED_TCP
:

678 
mp
->
b_Ωå
[3] = 
¥Ÿo
 = 
PPP_VJC_UNCOMP
;

680 
TYPE_COMPRESSED_TCP
:

681 
dp
 = 
vjhdr
 - 
PPP_HDRLEN
;

682 
dp
[1] = 
mp
->
b_Ωå
[1];

683 
dp
[0] = 
mp
->
b_Ωå
[0];

684 
dp
[2] = 0;

685 
dp
[3] = 
¥Ÿo
 = 
PPP_VJC_COMP
;

686 
mp
->
b_Ωå
 = 
dp
;

695 i‡(
¥Ÿo
 =
PPP_CCP
)

696 
	`µp_comp_c˝
(
q
, 
mp
, 0);

697 i‡(
¥Ÿo
 !
PPP_LCP
 && (
˝
->
Êags
 & 
CCP_COMP_RUN
)

698 && 
˝
->
x°©e
 !
NULL
) {

699 
Àn
 = 
	`msgdsize
(
mp
);

700 (*
˝
->
xcomp
->
com¥ess
)(˝->
x°©e
, &
cmp
, 
mp
, 
Àn
,

701 (
˝
->
Êags
 & 
CCP_ISUP
? cp->
mtu
 + 
PPP_HDRLEN
: 0));

702 i‡(
cmp
 !
NULL
) {

703 #ifde‡
PRIOQ


704 
cmp
->
b_b™d
=
mp
->b_band;

706 
	`‰ìmsg
(
mp
);

707 
mp
 = 
cmp
;

714 i‡((
˝
->
Êags
 & 
COMP_AC
)

715 && !(
¥Ÿo
 =
PPP_LCP
 && 
	`LCP_USE_DFLT
(
mp
))) {

716 
mp
->
b_Ωå
 += 2;

717 i‡(
¥Ÿo
 < 0x100 && (
˝
->
Êags
 & 
COMP_PROT
))

718 ++
mp
->
b_Ωå
;

719 } i‡(
¥Ÿo
 < 0x100 && (
˝
->
Êags
 & 
COMP_PROT
)) {

721 
mp
->
b_Ωå
[2] = mp->b_rptr[1];

722 
mp
->
b_Ωå
[1] = mp->b_rptr[0];

723 ++
mp
->
b_Ωå
;

726 
˝
->
°©s
.
µp_›ackës
++;

727 
˝
->
°©s
.
µp_obyãs
 +
	`msgdsize
(
mp
);

728 
	`puäext
(
q
, 
mp
);

732 
	}
}

735 
	$µp_comp_Ωut
(
q
, 
mp
)

736 
queue_t
 *
q
;

737 
mblk_t
 *
mp
;

739 
comp_°©e_t
 *
˝
;

740 
iocblk
 *
i›
;

741 
µp_°©s
 *
p•
;

743 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

744 i‡(
˝
 == 0) {

745 
	`DPRINT
("cp == 0 inÖpp_comp_rput\n");

746 
	`‰ìmsg
(
mp
);

750 
mp
->
b_d©≠
->
db_ty≥
) {

752 
M_DATA
:

753 
	`putq
(
q
, 
mp
);

756 
M_IOCACK
:

757 
i›
 = (
iocblk
 *Ë
mp
->
b_Ωå
;

758 
i›
->
ioc_cmd
) {

759 
PPPIO_GETSTAT
:

764 i‡(
mp
->
b_c⁄t
 =0 || 
i›
->
ioc_cou¡
 !(
µp_°©s
))

766 
p•
 = (
µp_°©s
 *Ë
mp
->
b_c⁄t
->
b_Ωå
;

767 
p•
->
vj
 = 
˝
->
vj_comp
.
°©s
;

770 
	`puäext
(
q
, 
mp
);

773 
M_CTL
:

774 
mp
->
b_Ωå
[0]) {

775 
PPPCTL_IERROR
:

776 ++
˝
->
°©s
.
µp_õº‹s
;

778 
PPPCTL_OERROR
:

779 ++
˝
->
°©s
.
µp_€º‹s
;

782 
	`puäext
(
q
, 
mp
);

786 
	`puäext
(
q
, 
mp
);

790 
	}
}

793 
	$µp_comp_r§v
(
q
)

794 
queue_t
 *
q
;

796 
¥Ÿo
, 
rv
, 
i
;

797 
mblk_t
 *
mp
, *
dmp
 = 
NULL
, *
≈
;

798 
uch¨_t
 *
dp
, *
ùhdr
;

799 
comp_°©e_t
 *
˝
;

800 
Àn
, 
hÀn
, 
vjÀn
;

801 
u_öt
 
ùhÀn
;

803 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

804 i‡(
˝
 == 0) {

805 
	`DPRINT
("cp == 0 inÖpp_comp_rsrv\n");

809 (
mp
 = 
	`gëq
(
q
)) != 0) {

811 i‡(!
	`ˇ≈uäext
(
q
)) {

812 
	`putbq
(
q
, 
mp
);

816 
Àn
 = 
	`msgdsize
(
mp
);

817 
˝
->
°©s
.
µp_ibyãs
 +
Àn
;

818 
˝
->
°©s
.
µp_ùackës
++;

823 
i
 = 0;

824 
¥Ÿo
 = 
	`MSG_BYTE
(
mp
, 0);

825 i‡(
¥Ÿo
 =
PPP_ALLSTATIONS
) {

826 
i
 = 2;

827 
¥Ÿo
 = 
	`MSG_BYTE
(
mp
, 2);

829 i‡((
¥Ÿo
 & 1) == 0) {

830 ++
i
;

831 
¥Ÿo
 = (¥Ÿÿ<< 8Ë+ 
	`MSG_BYTE
(
mp
, 
i
);

833 
hÀn
 = 
i
 + 1;

839 i‡(
hÀn
 < ((
˝
->
Êags
 & 
DECOMP_AC
)? 0: 2)

840 + ((
˝
->
Êags
 & 
DECOMP_PROT
)? 1: 2)) {

842 
bad
;

844 i‡(
mp
->
b_Ωå
 + 
hÀn
 > mp->
b_w±r
) {

845 
	`adjmsg
(
mp
, 
hÀn
);

846 
hÀn
 = 0;

848 i‡(
hÀn
 !
PPP_HDRLEN
) {

857 
dp
 = 
mp
->
b_Ωå
 + 
hÀn
 - 
PPP_HDRLEN
;

858 i‡(
dp
 < 
mp
->
b_d©≠
->
db_ba£
 || mp->b_d©≠->
db_ªf
 > 1) {

859 
≈
 = 
	`Ælocb
(
PPP_HDRLEN
, 
BPRI_MED
);

860 i‡(
≈
 == 0)

861 
bad
;

862 
≈
->
b_c⁄t
 = 
mp
;

863 
mp
->
b_Ωå
 +
hÀn
;

864 
mp
 = 
≈
;

865 
dp
 = 
mp
->
b_w±r
;

866 
mp
->
b_w±r
 +
PPP_HDRLEN
;

868 
mp
->
b_Ωå
 = 
dp
;

870 
dp
[0] = 
PPP_ALLSTATIONS
;

871 
dp
[1] = 
PPP_UI
;

872 
dp
[2] = 
¥Ÿo
 >> 8;

873 
dp
[3] = 
¥Ÿo
;

880 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

881 i‡(
¥Ÿo
 =
PPP_CCP
) {

882 
Àn
 = 
	`msgdsize
(
mp
);

883 i‡(
mp
->
b_w±r
 < mp->
b_Ωå
 + 
Àn
) {

884 
	`PULLUP
(
mp
, 
Àn
);

885 i‡(
mp
 == 0)

886 
bad
;

888 
	`µp_comp_c˝
(
q
, 
mp
, 1);

889 } i‡(
¥Ÿo
 =
PPP_COMP
) {

890 i‡((
˝
->
Êags
 & 
CCP_ISUP
)

891 && (
˝
->
Êags
 & 
CCP_DECOMP_RUN
Ë&& cp->
r°©e


892 && (
˝
->
Êags
 & 
CCP_ERR
) == 0) {

893 
rv
 = (*
˝
->
rcomp
->
decom¥ess
)(˝->
r°©e
, 
mp
, &
dmp
);

894 
rv
) {

895 
DECOMP_OK
:

896 
	`‰ìmsg
(
mp
);

897 
mp
 = 
dmp
;

898 i‡(
mp
 =
NULL
) {

903 
DECOMP_ERROR
:

904 
˝
->
Êags
 |
CCP_ERROR
;

905 ++
˝
->
°©s
.
µp_õº‹s
;

906 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

908 
DECOMP_FATALERROR
:

909 
˝
->
Êags
 |
CCP_FATALERROR
;

910 ++
˝
->
°©s
.
µp_õº‹s
;

911 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

915 } i‡(
˝
->
r°©e
 && (˝->
Êags
 & 
CCP_DECOMP_RUN
)) {

916 (*
˝
->
rcomp
->
öcomp
)(˝->
r°©e
, 
mp
);

922 
¥Ÿo
 = 
	`PPP_PROTOCOL
(
mp
->
b_Ωå
);

923 i‡(
¥Ÿo
 =
PPP_VJC_COMP
 ||ÖrŸÿ=
PPP_VJC_UNCOMP
) {

924 
Àn
 = 
	`msgdsize
(
mp
Ë- 
PPP_HDRLEN
;

925 i‡((
˝
->
Êags
 & 
DECOMP_VJC
Ë=0 || 
Àn
 <= 0)

926 
bad
;

932 
≈
 = 
mp
;

933 
dp
 = 
≈
->
b_Ωå
 + 
PPP_HDRLEN
;

934 i‡(
dp
 >
mp
->
b_w±r
) {

935 
≈
 =Çp->
b_c⁄t
;

936 
dp
 = 
≈
->
b_Ωå
;

942 
hÀn
 = (
¥Ÿo
 =
PPP_VJC_COMP
)? 
MAX_VJHDR
: 
MAX_IPHDR
;

943 i‡(
hÀn
 > 
Àn
)

944 
hÀn
 = 
Àn
;

945 i‡(
≈
->
b_w±r
 < 
dp
 + 
hÀn
 ||Çp->
b_d©≠
->
db_ªf
 > 1) {

946 
	`PULLUP
(
mp
, 
hÀn
 + 
PPP_HDRLEN
);

947 i‡(
mp
 == 0)

948 
bad
;

949 
≈
 = 
mp
;

950 
dp
 = 
≈
->
b_Ωå
 + 
PPP_HDRLEN
;

953 i‡(
¥Ÿo
 =
PPP_VJC_COMP
) {

958 i‡(
˝
->
°©s
.
µp_õº‹s
 !˝->
vj_œ°_õº‹s
) {

959 i‡(
˝
->
Êags
 & 
DBGLOG
)

960 
	`DPRINT1
("µp%d:Ñe£âög VJ\n", 
˝
->
unô
);

961 
	`vj_uncom¥ess_îr
(&
˝
->
vj_comp
);

962 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

965 
vjÀn
 = 
	`vj_uncom¥ess_t˝
(
dp
, 
≈
->
b_w±r
 - dp, 
Àn
,

966 &
˝
->
vj_comp
, &
ùhdr
, &
ùhÀn
);

967 i‡(
vjÀn
 < 0) {

968 i‡(
˝
->
Êags
 & 
DBGLOG
)

969 
	`DPRINT2
("ppp%d: vj_uncomp_tcp failed,ÖktÜen %d\n",

970 
˝
->
unô
, 
Àn
);

971 ++
˝
->
vj_œ°_õº‹s
;

972 
bad
;

976 i‡(
mp
 !
≈
) {

977 
	`‰ìb
(
mp
);

978 
mp
 = 
≈
;

980 
mp
->
b_Ωå
 = 
dp
 + 
vjÀn
;

983 i‡((
≈
 = 
	`Ælocb
(
ùhÀn
 + 
PPP_HDRLEN
 + 4, 
BPRI_MED
)) == 0)

984 
bad
;

985 
dp
 = 
≈
->
b_Ωå
;

986 
dp
[0] = 
PPP_ALLSTATIONS
;

987 
dp
[1] = 
PPP_UI
;

988 
dp
[2] = 
PPP_IP
 >> 8;

989 
dp
[3] = 
PPP_IP
;

990 
	`bc›y
((
ˇddr_t
)
ùhdr
, (ˇddr_t)
dp
 + 
PPP_HDRLEN
, 
ùhÀn
);

991 
≈
->
b_w±r
 = 
dp
 + 
ùhÀn
 + 
PPP_HDRLEN
;

992 
≈
->
b_c⁄t
 = 
mp
;

996 i‡(
mp
->
b_w±r
 - mp->
b_Ωå
 > 4) {

997 
	`bc›y
((
ˇddr_t
)
mp
->
b_Ωå
, (ˇddr_t)
≈
->
b_w±r
, 4);

998 
mp
->
b_Ωå
 += 4;

999 
≈
->
b_w±r
 += 4;

1001 
	`bc›y
((
ˇddr_t
)
mp
->
b_Ωå
, (ˇddr_t)
≈
->
b_w±r
,

1002 
mp
->
b_w±r
 - mp->
b_Ωå
);

1003 
≈
->
b_w±r
 +
mp
->b_w±∏- mp->
b_Ωå
;

1004 
≈
->
b_c⁄t
 = 
mp
->b_cont;

1005 
	`‰ìb
(
mp
);

1008 
mp
 = 
≈
;

1014 
˝
->
vj_œ°_õº‹s
 = cp->
°©s
.
µp_õº‹s
;

1015 i‡(!
	`vj_uncom¥ess_uncomp
(
dp
, 
hÀn
, &
˝
->
vj_comp
)) {

1016 i‡(
˝
->
Êags
 & 
DBGLOG
)

1017 
	`DPRINT2
("ppp%d: vj_uncomp_uncomp failed,ÖktÜen %d\n",

1018 
˝
->
unô
, 
Àn
);

1019 ++
˝
->
vj_œ°_õº‹s
;

1020 
bad
;

1022 
mp
->
b_Ωå
[3] = 
PPP_IP
;

1026 
	`puäext
(
q
, 
mp
);

1029 
bad
:

1030 i‡(
mp
 != 0)

1031 
	`‰ìmsg
(
mp
);

1032 
˝
->
°©s
.
µp_õº‹s
++;

1033 
	`put˘l1
(
q
->
q_√xt
, 
M_CTL
, 
PPPCTL_IERROR
);

1037 
	}
}

1044 
	$µp_comp_c˝
(
q
, 
mp
, 
rcvd
)

1045 
queue_t
 *
q
;

1046 
mblk_t
 *
mp
;

1047 
rcvd
;

1049 
Àn
, 
˛í
;

1050 
comp_°©e_t
 *
˝
;

1051 *
dp
;

1053 
Àn
 = 
	`msgdsize
(
mp
);

1054 i‡(
Àn
 < 
PPP_HDRLEN
 + 
CCP_HDRLEN
)

1057 
˝
 = (
comp_°©e_t
 *Ë
q
->
q_±r
;

1058 
dp
 = 
mp
->
b_Ωå
 + 
PPP_HDRLEN
;

1059 
Àn
 -
PPP_HDRLEN
;

1060 
˛í
 = 
	`CCP_LENGTH
(
dp
);

1061 i‡(
˛í
 > 
Àn
)

1064 
	`CCP_CODE
(
dp
)) {

1065 
CCP_CONFREQ
:

1066 
CCP_TERMREQ
:

1067 
CCP_TERMACK
:

1068 
˝
->
Êags
 &~
CCP_ISUP
;

1071 
CCP_CONFACK
:

1072 i‡((
˝
->
Êags
 & (
CCP_ISOPEN
 | 
CCP_ISUP
)) == CCP_ISOPEN

1073 && 
˛í
 >
CCP_HDRLEN
 + 
CCP_OPT_MINLEN


1074 && 
˛í
 >
CCP_HDRLEN
 + 
	`CCP_OPT_LENGTH
(
dp
 + CCP_HDRLEN)) {

1075 i‡(!
rcvd
) {

1076 i‡(
˝
->
x°©e
 !
NULL


1077 && (*
˝
->
xcomp
->
comp_öô
)

1078 (
˝
->
x°©e
, 
dp
 + 
CCP_HDRLEN
, 
˛í
 - CCP_HDRLEN,

1079 
˝
->
unô
, 0, ((˝->
Êags
 & 
DBGLOG
) != 0)))

1080 
˝
->
Êags
 |
CCP_COMP_RUN
;

1082 i‡(
˝
->
r°©e
 !
NULL


1083 && (*
˝
->
rcomp
->
decomp_öô
)

1084 (
˝
->
r°©e
, 
dp
 + 
CCP_HDRLEN
, 
˛í
 - CCP_HDRLEN,

1085 
˝
->
unô
, 0, cp->
mru
, ((˝->
Êags
 & 
DBGLOG
) != 0)))

1086 
˝
->
Êags
 = (˝->Êag†& ~
CCP_ERR
Ë| 
CCP_DECOMP_RUN
;

1091 
CCP_RESETACK
:

1092 i‡(
˝
->
Êags
 & 
CCP_ISUP
) {

1093 i‡(!
rcvd
) {

1094 i‡(
˝
->
x°©e
 && (˝->
Êags
 & 
CCP_COMP_RUN
))

1095 (*
˝
->
xcomp
->
comp_ª£t
)(˝->
x°©e
);

1097 i‡(
˝
->
r°©e
 && (˝->
Êags
 & 
CCP_DECOMP_RUN
)) {

1098 (*
˝
->
rcomp
->
decomp_ª£t
)(˝->
r°©e
);

1099 
˝
->
Êags
 &~
CCP_ERROR
;

1105 
	}
}

1108 
	$dump_msg
(
mp
)

1109 
mblk_t
 *
mp
;

1111 
dblk_t
 *
db
;

1113 
mp
 != 0) {

1114 
db
 = 
mp
->
b_d©≠
;

1115 
	`DPRINT2
("mp=%x c⁄t=%x ", 
mp
, mp->
b_c⁄t
);

1116 
	`DPRINT3
("Ωå=%x w±r=%x d©≠=%x\n", 
mp
->
b_Ωå
, mp->
b_w±r
, 
db
);

1117 
	`DPRINT2
(" ba£=%xÜim=%x", 
db
->
db_ba£
, db->
db_lim
);

1118 
	`DPRINT2
("Ñef=%dÅy≥=%d\n", 
db
->
db_ªf
, db->
db_ty≥
);

1119 
mp
 = mp->
b_c⁄t
;

1121 
	}
}

1125 
	$msg_byã
(
mp
, 
i
)

1126 
mblk_t
 *
mp
;

1127 
i
;

1129 
mp
 !0 && 
i
 >mp->
b_w±r
 - mp->
b_Ωå
)

1130 
mp
 = mp->
b_c⁄t
;

1131 i‡(
mp
 == 0)

1133  
mp
->
b_Ωå
[
i
];

1134 
	}
}

	@solaris/ppp_comp_mod.c

41 
	~<sys/ty≥s.h
>

42 
	~<sys/∑øm.h
>

43 
	~<sys/c⁄f.h
>

44 
	~<sys/mod˘l.h
>

45 
	~<sys/sunddi.h
>

47 
°ªamèb
 
µp_compöfo
;

49 
fmodsw
 
	gfsw
 = {

51 &
µp_compöfo
,

52 
D_NEW
 | 
D_MP
 | 
D_MTQPAIR


55 
mod_›s
 
mod_°rmod›s
;

57 
modl°rmod
 
	gmodl°rmod
 = {

58 &
mod_°rmod›s
,

60 &
fsw


63 
modlökage
 
	gmodlökage
 = {

64 
MODREV_1
,

65 (*Ë&
modl°rmod
,

66 
NULL


73 
	$_öô
()

75  
	`mod_ö°Æl
(&
modlökage
);

76 
	}
}

79 
	$_föi
()

81  
	`mod_ªmove
(&
modlökage
);

82 
	}
}

85 
	$_öfo
(
mù
)

86 
modöfo
 *
mù
;

88  
	`mod_öfo
(&
modlökage
, 
mù
);

89 
	}
}

	@solaris/ppp_mod.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/∑øm.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/c⁄f.h
>

46 
	~<sys/mod˘l.h
>

47 
	~<sys/sunddi.h
>

48 
	~<sys/ksynch.h
>

50 #ifde‡
__STDC__


51 
	#__P
(
x
Ë
	)
x

53 
	#__P
(
x
Ë()

	)

56 
µp_idítify
 
__P
((
dev_öfo_t
 *));

57 
µp_©èch
 
__P
((
dev_öfo_t
 *, 
ddi_©èch_cmd_t
));

58 
µp_dëach
 
__P
((
dev_öfo_t
 *, 
ddi_dëach_cmd_t
));

59 
µp_devöfo
 
__P
((
dev_öfo_t
 *, 
ddi_öfo_cmd_t
, *, **));

61 
°ªamèb
 
µpöfo
;

62 
krwlock_t
 
µp_lowî_lock
;

64 
dev_öfo_t
 *
	gµp_dù
;

66 
cb_›s
 
	gcb_µp_›s
 = {

67 
nuŒdev
,ÇuŒdev, 
nodev
,Çodev,

68 
nodev
,Çodev,Çodev,Çodev,

69 
nodev
,Çodev,Çodev, 
nochpﬁl
,

70 
ddi_¥›_›
,

71 &
µpöfo
,

72 
D_NEW
|
D_MP
|
D_MTQPAIR
|
D_MTOUTPERIM
|
D_MTOCEXCL


75 
dev_›s
 
	gµp_›s
 = {

76 
DEVO_REV
,

78 
µp_devöfo
,

79 
µp_idítify
,

80 
nuŒdev
,

81 
µp_©èch
,

82 
µp_dëach
,

83 
nodev
,

84 &
cb_µp_›s
,

85 
NULL


92 
modldrv
 
	gmodldrv
 = {

93 &
mod_drivî›s
,

95 &
µp_›s


98 
modlökage
 
	gmodlökage
 = {

99 
MODREV_1
,

100 (*Ë&
modldrv
,

101 
NULL


105 
	$_öô
()

107  
	`mod_ö°Æl
(&
modlökage
);

108 
	}
}

111 
	$_föi
()

113  
	`mod_ªmove
(&
modlökage
);

114 
	}
}

117 
	$_öfo
(
mù
)

118 
modöfo
 *
mù
;

120  
	`mod_öfo
(&
modlökage
, 
mù
);

121 
	}
}

124 
	$µp_idítify
(
dù
)

125 
dev_öfo_t
 *
dù
;

128 #ifde‡
DDI_IDENTIFIED


129  
	`°rcmp
(
	`ddi_gë_«me
(
dù
), "µp"Ë=0? 
DDI_IDENTIFIED
:

130 
DDI_NOT_IDENTIFIED
;

134 
	}
}

137 
	$µp_©èch
(
dù
, 
cmd
)

138 
dev_öfo_t
 *
dù
;

139 
ddi_©èch_cmd_t
 
cmd
;

142 i‡(
cmd
 !
DDI_ATTACH
)

143  
DDI_FAILURE
;

144 i‡(
	`ddi_¸óã_mö‹_node
(
dù
, "µp", 
S_IFCHR
, 0, 
DDI_PSEUDO
, 
CLONE_DEV
)

145 =
DDI_FAILURE
) {

146 
	`ddi_ªmove_mö‹_node
(
dù
, 
NULL
);

147  
DDI_FAILURE
;

149 
	`rw_öô
(&
µp_lowî_lock
, 
NULL
, 
RW_DRIVER
, NULL);

150  
DDI_SUCCESS
;

151 
	}
}

154 
	$µp_dëach
(
dù
, 
cmd
)

155 
dev_öfo_t
 *
dù
;

156 
ddi_dëach_cmd_t
 
cmd
;

158 
	`rw_de°roy
(&
µp_lowî_lock
);

159 
	`ddi_ªmove_mö‹_node
(
dù
, 
NULL
);

160  
DDI_SUCCESS
;

161 
	}
}

164 
	$µp_devöfo
(
dù
, 
cmd
, 
¨g
, 
ªsu…
)

165 
dev_öfo_t
 *
dù
;

166 
ddi_öfo_cmd_t
 
cmd
;

167 *
¨g
;

168 **
ªsu…
;

170 
îr‹
;

172 
îr‹
 = 
DDI_SUCCESS
;

173 
cmd
) {

174 
DDI_INFO_DEVT2DEVINFO
:

175 i‡(
µp_dù
 =
NULL
)

176 
îr‹
 = 
DDI_FAILURE
;

178 *
ªsu…
 = (*Ë
µp_dù
;

180 
DDI_INFO_DEVT2INSTANCE
:

181 *
ªsu…
 = 
NULL
;

184 
îr‹
 = 
DDI_FAILURE
;

186  
îr‹
;

187 
	}
}

	@solaris/ppp_mod.h

8 #ifde‡
SVR4


9 
	~<sys/kmem.h
>

10 
	#ALLOC_SLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KM_SLEEP
)

	)

11 
	#ALLOC_NOSLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KM_NOSLEEP
)

	)

12 
	#FREE
(
p
, 
n
Ë
	`kmem_‰ì
(’), (n))

	)

15 #ifde‡
SUNOS4


16 
	~<sys/kmem_Æloc.h
>

17 
	#ALLOC_SLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KMEM_SLEEP
)

	)

18 
	#ALLOC_NOSLEEP
(
n
Ë
	`kmem_Æloc
(“), 
KMEM_NOSLEEP
)

	)

19 
	#FREE
(
p
, 
n
Ë
	`kmem_‰ì
(’), (n))

	)

20 
	#NOTSUSER
(Ë(
	`su£r
()? 0: 
EPERM
)

	)

21 
	#bˇ≈uäext
(
q
, 
b™d
Ë
	`ˇ≈uäext
((q))

	)

24 #ifde‡
__osf__


25 
	~<sys/mÆloc.h
>

35 #ifde‡
BUCKETINDX


36 
	#ALLOC_SLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETP
“), 
M_DEVBUF
, 
M_WAITOK
)

	)

37 
	#ALLOC_NOSLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETP
“), 
M_DEVBUF
, 
M_NOWAIT
)

	)

39 
	#ALLOC_SLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETINDEX
“), 
M_DEVBUF
, 
M_WAITOK
)

	)

40 
	#ALLOC_NOSLEEP
(
n
Ë(*)
	`mÆloc
((
u_l⁄g
)“), 
	`BUCKETINDEX
“), 
M_DEVBUF
, 
M_NOWAIT
)

	)

43 
	#bˇ≈uäext
(
q
, 
b™d
Ë
	`ˇ≈uäext
((q))

	)

45 #ifde‡
FREE


46 #unde‡
FREE


48 
	#FREE
(
p
, 
n
Ë
	`‰ì
((*)’), 
M_DEVBUF
)

	)

50 
	#NO_DLPI
 1

	)

52 #i‚de‡
IFT_PPP


53 
	#IFT_PPP
 0x17

	)

56 
	~<sys/¥oc.h
>

57 
	#NOTSUSER
(Ë(
	`su£r
(
u
.
u_¥o˝
->
p_r¸ed
, &u.
u_acÊag
Ë? 
EPERM
 : 0)

	)

63 #ifde‡
AIX4


64 
	#ALLOC_SLEEP
(
n
Ë
	`xmÆloc
(“), 0, 
pö√d_hóp
Ë

	)

65 
	#ALLOC_NOSLEEP
(
n
Ë
	`xmÆloc
(“), 0, 
pö√d_hóp
Ë

	)

66 
	#FREE
(
p
, 
n
Ë
	`xm‰ì
(’), 
pö√d_hóp
)

	)

67 
	#NOTSUSER
(Ë(
	`su£r
()? 0: 
EPERM
)

	)

73 #ifde‡
DEBUG


74 #i‡
deföed
(
SVR4
Ë|| deföed(
__osf__
)

75 #i‡
deföed
(
SNI
)

76 
	~<sys/°æog.h
>

77 
	#STRLOG_ID
 4712

	)

78 
	#DPRINT
(
f
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f)

	)

79 
	#DPRINT1
(
f
, 
a1
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1)

	)

80 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1,á2)

	)

81 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`°æog
(
STRLOG_ID
, 0, 0, 
SL_TRACE
, f,á1,á2,á3)

	)

83 
	#DPRINT
(
f
Ë
	`cmn_îr
(
CE_CONT
, f)

	)

84 
	#DPRINT1
(
f
, 
a1
Ë
	`cmn_îr
(
CE_CONT
, f,á1)

	)

85 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`cmn_îr
(
CE_CONT
, f,á1,á2)

	)

86 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`cmn_îr
(
CE_CONT
, f,á1,á2,á3)

	)

89 
	#DPRINT
(
f
Ë
	`¥ötf
(f)

	)

90 
	#DPRINT1
(
f
, 
a1
Ë
	`¥ötf
(f,á1)

	)

91 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë
	`¥ötf
(f,á1,á2)

	)

92 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë
	`¥ötf
(f,á1,á2,á3)

	)

96 
	#DPRINT
(
f
Ë0

	)

97 
	#DPRINT1
(
f
, 
a1
Ë0

	)

98 
	#DPRINT2
(
f
, 
a1
, 
a2
Ë0

	)

99 
	#DPRINT3
(
f
, 
a1
, 
a2
, 
a3
Ë0

	)

102 #i‚de‡
SVR4


103 
	tuch¨_t
;

104 
	tush‹t_t
;

105 #i‚de‡
__osf__


106 
	tmö‹_t
;

113 #i‚de‡
D_MP


114 
	#q¥ocs⁄
(
q
)

	)

115 
	#q¥ocsoff
(
q
)

	)

116 
	#put
(
q
, 
mp
Ë((*(q)->
q_qöfo
->
qi_puç
)((q), (mp)))

	)

117 
	#ˇ≈uäext
(
q
Ë
	`ˇ≈ut
((q)->
q_√xt
)

	)

118 
	#qwrôî
(
q
, 
mp
, 
func
, 
sc›e
Ë(func)((q), (mp))

	)

121 #ifde‡
D_MP


123 
	#PULLUP
(
mp
, 
Àn
) \

125 
mblk_t
 *
≈
 = 
	`msgpuŒup
((
mp
), (
Àn
)); \

126 
	`‰ìmsg
((
mp
)); \

127 
mp
 = 
≈
; \

128 } 0)

	)

132 
	#PULLUP
(
mp
, 
Àn
) \

134 i‡(!
	`puŒupmsg
((
mp
), (
Àn
))) { \

135 
	`‰ìmsg
((
mp
)); \

136 
mp
 = 0; \

138 } 0)

	)

144 #ifde‡
SVR4


145 
	#MOD_OPEN_DECL
(
«me
) \

146 
«me
 
	`__P
((
queue_t
 *, 
dev_t
 *, , , 
¸ed_t
 *))

	)

148 
	#MOD_CLOSE_DECL
(
«me
) \

149 
«me
 
	`__P
((
queue_t
 *, , 
¸ed_t
 *))

	)

151 
	#MOD_OPEN
(
«me
) \

152 
	`«me
(
q
, 
devp
, 
Êag
, 
sÊag
, 
¸edp
) \

153 
queue_t
 *
q
; \

154 
dev_t
 *
devp
; \

155 
Êag
, 
sÊag
; \

156 
¸ed_t
 *
¸edp
;

	)

158 
	#MOD_CLOSE
(
«me
) \

159 
	`«me
(
q
, 
Êag
, 
¸edp
) \

160 
queue_t
 *
q
; \

161 
Êag
; \

162 
¸ed_t
 *
¸edp
;

	)

164 
	#OPEN_ERROR
(
x
Ë (x)

	)

165 
	#DRV_OPEN_OK
(
dev
Ë 0

	)

167 
	#NOTSUSER
(Ë(
	`drv_¥iv
(
¸edp
))

	)

170 
	#MOD_OPEN_DECL
(
«me
) \

171 
«me
 
	`__P
((
queue_t
 *, , , ))

	)

173 
	#MOD_CLOSE_DECL
(
«me
) \

174 
«me
 
	`__P
((
queue_t
 *, ))

	)

176 
	#MOD_OPEN
(
«me
) \

177 
	`«me
(
q
, 
dev
, 
Êag
, 
sÊag
) \

178 
queue_t
 *
q
; \

179 
dev
; \

180 
Êag
, 
sÊag
;

	)

182 
	#MOD_CLOSE
(
«me
) \

183 
	`«me
(
q
, 
Êag
) \

184 
queue_t
 *
q
; \

185 
Êag
;

	)

187 
	#OPEN_ERROR
(
x
Ë{ 
u
.
u_îr‹
 = (x);  
OPENFAIL
; }

	)

188 
	#DRV_OPEN_OK
(
dev
Ë (dev)

	)

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/cdefs.h
>

71 
	#__NAMESER
 19991006

	)

75 
	#NS_PACKETSZ
 512

	)

76 
	#NS_MAXDNAME
 1025

	)

77 
	#NS_MAXMSG
 65535

	)

78 
	#NS_MAXCDNAME
 255

	)

79 
	#NS_MAXLABEL
 63

	)

80 
	#NS_HFIXEDSZ
 12

	)

81 
	#NS_QFIXEDSZ
 4

	)

82 
	#NS_RRFIXEDSZ
 10

	)

83 
	#NS_INT32SZ
 4

	)

84 
	#NS_INT16SZ
 2

	)

85 
	#NS_INT8SZ
 1

	)

86 
	#NS_INADDRSZ
 4

	)

87 
	#NS_IN6ADDRSZ
 16

	)

88 
	#NS_CMPRSFLGS
 0xc0

	)

89 
	#NS_DEFAULTPORT
 53

	)

94 
	e__ns_£˘
 {

95 
	mns_s_qd
 = 0,

96 
	mns_s_zn
 = 0,

97 
	mns_s_™
 = 1,

98 
	mns_s_¥
 = 1,

99 
	mns_s_ns
 = 2,

100 
	mns_s_ud
 = 2,

101 
	mns_s_¨
 = 3,

102 
	mns_s_max
 = 4

103 } 
	tns_£˘
;

110 
	s__ns_msg
 {

111 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

112 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

113 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

114 
ns_£˘
 
	m_£˘
;

115 
	m_ºnum
;

116 c⁄° 
u_ch¨
 *
	m_msg_±r
;

117 } 
	tns_msg
;

120 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

121 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

125 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

126 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

127 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

128 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

129 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

134 
	s__ns_º
 {

135 
	m«me
[
NS_MAXDNAME
];

136 
u_öt16_t
 
	mty≥
;

137 
u_öt16_t
 
	mº_˛ass
;

138 
u_öt32_t
 
	mâl
;

139 
u_öt16_t
 
	mrdÀngth
;

140 c⁄° 
u_ch¨
 * 
	mrd©a
;

141 } 
	tns_º
;

144 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

145 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

146 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

147 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

148 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

149 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

156 
	e__ns_Êag
 {

157 
	mns_f_qr
,

158 
	mns_f_›code
,

159 
	mns_f_Ø
,

160 
	mns_f_tc
,

161 
	mns_f_rd
,

162 
	mns_f_ø
,

163 
	mns_f_z
,

164 
	mns_f_ad
,

165 
	mns_f_cd
,

166 
	mns_f_rcode
,

167 
	mns_f_max


168 } 
	tns_Êag
;

173 
	e__ns_›code
 {

174 
	mns_o_quîy
 = 0,

175 
	mns_o_iquîy
 = 1,

176 
	mns_o_°©us
 = 2,

178 
	mns_o_nŸify
 = 4,

179 
	mns_o_upd©e
 = 5,

180 
	mns_o_max
 = 6

181 } 
	tns_›code
;

186 
	e__ns_rcode
 {

187 
	mns_r_n€º‹
 = 0,

188 
	mns_r_f‹mîr
 = 1,

189 
	mns_r_£rvÁû
 = 2,

190 
	mns_r_nxdomaö
 = 3,

191 
	mns_r_nŸim∂
 = 4,

192 
	mns_r_ªfu£d
 = 5,

194 
	mns_r_yxdomaö
 = 6,

195 
	mns_r_yxº£t
 = 7,

196 
	mns_r_nxº£t
 = 8,

197 
	mns_r_nŸauth
 = 9,

198 
	mns_r_nŸz⁄e
 = 10,

199 
	mns_r_max
 = 11,

201 
	mns_r_badvîs
 = 16,

203 
	mns_r_badsig
 = 16,

204 
	mns_r_badkey
 = 17,

205 
	mns_r_badtime
 = 18

206 } 
	tns_rcode
;

209 
	e__ns_upd©e_›î©i⁄
 {

210 
	mns_u›_dñëe
 = 0,

211 
	mns_u›_add
 = 1,

212 
	mns_u›_max
 = 2

213 } 
	tns_upd©e_›î©i⁄
;

218 
	sns_tsig_key
 {

219 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

220 *
	md©a
;

221 
	mÀn
;

223 
ns_tsig_key
 
	tns_tsig_key
;

228 
	sns_t˝_tsig_°©e
 {

229 
	mcou¡î
;

230 
d°_key
 *
	mkey
;

231 *
	m˘x
;

232 
	msig
[
NS_PACKETSZ
];

233 
	msigÀn
;

235 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

237 
	#NS_TSIG_FUDGE
 300

	)

238 
	#NS_TSIG_TCP_COUNT
 100

	)

239 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

241 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

242 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

243 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

248 
	e__ns_ty≥
 {

249 
	mns_t_övÆid
 = 0,

250 
	mns_t_a
 = 1,

251 
	mns_t_ns
 = 2,

252 
	mns_t_md
 = 3,

253 
	mns_t_mf
 = 4,

254 
	mns_t_˙ame
 = 5,

255 
	mns_t_sﬂ
 = 6,

256 
	mns_t_mb
 = 7,

257 
	mns_t_mg
 = 8,

258 
	mns_t_mr
 = 9,

259 
	mns_t_nuŒ
 = 10,

260 
	mns_t_wks
 = 11,

261 
	mns_t_±r
 = 12,

262 
	mns_t_höfo
 = 13,

263 
	mns_t_möfo
 = 14,

264 
	mns_t_mx
 = 15,

265 
	mns_t_txt
 = 16,

266 
	mns_t_Ω
 = 17,

267 
	mns_t_afsdb
 = 18,

268 
	mns_t_x25
 = 19,

269 
	mns_t_isdn
 = 20,

270 
	mns_t_π
 = 21,

271 
	mns_t_nßp
 = 22,

272 
	mns_t_nßp_±r
 = 23,

273 
	mns_t_sig
 = 24,

274 
	mns_t_key
 = 25,

275 
	mns_t_px
 = 26,

276 
	mns_t_gpos
 = 27,

277 
	mns_t_ØØ
 = 28,

278 
	mns_t_loc
 = 29,

279 
	mns_t_nxt
 = 30,

280 
	mns_t_eid
 = 31,

281 
	mns_t_nimloc
 = 32,

282 
	mns_t_§v
 = 33,

283 
	mns_t_©ma
 = 34,

284 
	mns_t_«±r
 = 35,

285 
	mns_t_kx
 = 36,

286 
	mns_t_˚π
 = 37,

287 
	mns_t_a6
 = 38,

288 
	mns_t_d«me
 = 39,

289 
	mns_t_sök
 = 40,

290 
	mns_t_›t
 = 41,

291 
	mns_t_≠l
 = 42,

292 
	mns_t_tkey
 = 249,

293 
	mns_t_tsig
 = 250,

294 
	mns_t_ix‰
 = 251,

295 
	mns_t_ax‰
 = 252,

296 
	mns_t_maûb
 = 253,

297 
	mns_t_maûa
 = 254,

298 
	mns_t_™y
 = 255,

299 
	mns_t_zx‰
 = 256,

300 
	mns_t_max
 = 65536

301 } 
	tns_ty≥
;

304 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

305 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

307 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

309 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

310 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

311 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

312 (
t
Ë=
ns_t_zx‰
)

	)

317 
	e__ns_˛ass
 {

318 
	mns_c_övÆid
 = 0,

319 
	mns_c_ö
 = 1,

320 
	mns_c_2
 = 2,

321 
	mns_c_chaos
 = 3,

322 
	mns_c_hs
 = 4,

324 
	mns_c_n⁄e
 = 254,

325 
	mns_c_™y
 = 255,

326 
	mns_c_max
 = 65536

327 } 
	tns_˛ass
;

331 
	e__ns_key_ty≥s
 {

332 
	mns_kt_rß
 = 1,

333 
	mns_kt_dh
 = 2,

334 
	mns_kt_dß
 = 3,

335 
	mns_kt_¥iv©e
 = 254

336 } 
	tns_key_ty≥s
;

338 
	e__ns_˚π_ty≥s
 {

339 
	m˚π_t_pkix
 = 1,

340 
	m˚π_t_•ki
 = 2,

341 
	m˚π_t_pgp
 = 3,

342 
	m˚π_t_uæ
 = 253,

343 
	m˚π_t_oid
 = 254

344 } 
	tns_˚π_ty≥s
;

347 
	#NS_KEY_TYPEMASK
 0xC000

	)

348 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

349 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

350 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

351 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

353 
	#NS_KEY_NO_AUTH
 0x8000

	)

354 
	#NS_KEY_NO_CONF
 0x4000

	)

355 
	#NS_KEY_RESERVED2
 0x2000

	)

356 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

357 
	#NS_KEY_RESERVED4
 0x0800

	)

358 
	#NS_KEY_RESERVED5
 0x0400

	)

359 
	#NS_KEY_NAME_TYPE
 0x0300

	)

360 
	#NS_KEY_NAME_USER
 0x0000

	)

361 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

362 
	#NS_KEY_NAME_ZONE
 0x0100

	)

363 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

364 
	#NS_KEY_RESERVED8
 0x0080

	)

365 
	#NS_KEY_RESERVED9
 0x0040

	)

366 
	#NS_KEY_RESERVED10
 0x0020

	)

367 
	#NS_KEY_RESERVED11
 0x0010

	)

368 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

369 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

370 
NS_KEY_RESERVED4
 | \

371 
NS_KEY_RESERVED5
 | \

372 
NS_KEY_RESERVED8
 | \

373 
NS_KEY_RESERVED9
 | \

374 
NS_KEY_RESERVED10
 | \

375 
NS_KEY_RESERVED11
 )

	)

376 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

378 
	#NS_ALG_MD5RSA
 1

	)

379 
	#NS_ALG_DH
 2

	)

380 
	#NS_ALG_DSA
 3

	)

381 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

382 
	#NS_ALG_EXPIRE_ONLY
 253

	)

383 
	#NS_ALG_PRIVATE_OID
 254

	)

386 
	#NS_KEY_PROT_TLS
 1

	)

387 
	#NS_KEY_PROT_EMAIL
 2

	)

388 
	#NS_KEY_PROT_DNSSEC
 3

	)

389 
	#NS_KEY_PROT_IPSEC
 4

	)

390 
	#NS_KEY_PROT_ANY
 255

	)

393 
	#NS_MD5RSA_MIN_BITS
 512

	)

394 
	#NS_MD5RSA_MAX_BITS
 4096

	)

396 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

398 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

399 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

400 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

402 
	#NS_DSA_SIG_SIZE
 41

	)

403 
	#NS_DSA_MIN_SIZE
 213

	)

404 
	#NS_DSA_MAX_BYTES
 405

	)

407 
	#NS_SIG_TYPE
 0

	)

408 
	#NS_SIG_ALG
 2

	)

409 
	#NS_SIG_LABELS
 3

	)

410 
	#NS_SIG_OTTL
 4

	)

411 
	#NS_SIG_EXPIR
 8

	)

412 
	#NS_SIG_SIGNED
 12

	)

413 
	#NS_SIG_FOOT
 16

	)

414 
	#NS_SIG_SIGNER
 18

	)

416 
	#NS_NXT_BITS
 8

	)

417 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

418 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

419 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

420 
	#NS_NXT_MAX
 127

	)

425 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

426 
	#NS_OPT_NSID
 3

	)

431 
	#NS_GET16
(
s
, 
˝
) do { \

432 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

433 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

434 | ((
u_öt16_t
)
t_˝
[1]) \

436 (
˝
Ë+
NS_INT16SZ
; \

437 } 0)

	)

439 
	#NS_GET32
(
l
, 
˝
) do { \

440 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

441 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

442 | ((
u_öt32_t
)
t_˝
[1] << 16) \

443 | ((
u_öt32_t
)
t_˝
[2] << 8) \

444 | ((
u_öt32_t
)
t_˝
[3]) \

446 (
˝
Ë+
NS_INT32SZ
; \

447 } 0)

	)

449 
	#NS_PUT16
(
s
, 
˝
) do { \

450 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

451 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

452 *
t_˝
++ = 
t_s
 >> 8; \

453 *
t_˝
 = 
t_s
; \

454 (
˝
Ë+
NS_INT16SZ
; \

455 } 0)

	)

457 
	#NS_PUT32
(
l
, 
˝
) do { \

458 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

459 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

460 *
t_˝
++ = 
t_l
 >> 24; \

461 *
t_˝
++ = 
t_l
 >> 16; \

462 *
t_˝
++ = 
t_l
 >> 8; \

463 *
t_˝
 = 
t_l
; \

464 (
˝
Ë+
NS_INT32SZ
; \

465 } 0)

	)

467 
__BEGIN_DECLS


468 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

469 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

470 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

471 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

472 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

473 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

474 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

475 
__THROW
;

476 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

477 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

478 c⁄° *, c⁄° *, *, 
size_t
)

479 
__THROW
;

480 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

481 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

482 
size_t
, const *, const *,

483 *, 
size_t
Ë
__THROW
;

484 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

485 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

486 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

487 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

488 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

489 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

490 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

491 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

493 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

494 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

499 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

500 c⁄° 
u_ch¨
 **Ë
__THROW
;

501 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

502 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

503 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

504 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

505 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

506 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

507 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

508 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

509 
ns_t˝_tsig_°©e
 *, ,

510 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

511 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

512 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

513 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

514 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

515 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

516 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

517 
__THROW
;

518 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

519 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

520 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

521 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

522 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

523 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

524 
__END_DECLS


526 #ifde‡
BIND_4_COMPAT


527 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/crypt.h

24 #i‚de‡
_CRYPT_H


25 
	#_CRYPT_H
 1

	)

27 
	~<„©uªs.h
>

29 
__BEGIN_DECLS


32 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

36 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

40 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

41 
__THROW
 
	`__n⁄nuŒ
 ((1));

43 #ifde‡
__USE_GNU


46 
	s¸y±_d©a


48 
keysched
[16 * 8];

49 
sb0
[32768];

50 
sb1
[32768];

51 
sb2
[32768];

52 
sb3
[32768];

54 
¸y±_3_buf
[14];

55 
cuºít_ß…
[2];

56 
cuºít_ß…bôs
;

57 
dúe˘i⁄
, 
öôülized
;

60 *
	$¸y±_r
 (c⁄° *
__key
, c⁄° *
__ß…
,

61 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

62 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

64 
	$£tkey_r
 (c⁄° *
__key
,

65 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

66 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

68 
	$í¸y±_r
 (*
__glibc_block
, 
__edÊag
,

69 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

70 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

73 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

162 
	`__n⁄nuŒ
 ((1));

164 
	#›í
 
›í64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__USE_ATFILE


181 #i‚de‡
__USE_FILE_OFFSET64


182 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

183 
	`__n⁄nuŒ
 ((2));

185 #ifde‡
__REDIRECT


186 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

187 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

189 
	#›í©
 
›í©64


	)

192 #ifde‡
__USE_LARGEFILE64


193 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

208 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

210 
	#¸ót
 
¸ót64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

218 && !
deföed
 
__USE_POSIX
))

227 
	#F_ULOCK
 0

	)

228 
	#F_LOCK
 1

	)

229 
	#F_TLOCK
 2

	)

230 
	#F_TEST
 3

	)

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

238 
	#lockf
 
lockf64


	)

241 #ifde‡
__USE_LARGEFILE64


242 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

246 #ifde‡
__USE_XOPEN2K


249 #i‚de‡
__USE_FILE_OFFSET64


250 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

251 
__advi£
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

255 
__off64_t
 
__Àn
, 
__advi£
),

256 
posix_Ádvi£64
);

258 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

263 
__advi£
Ë
__THROW
;

271 #i‚de‡
__USE_FILE_OFFSET64


272 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

274 #ifde‡
__REDIRECT


275 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
),

277 
posix_ÁŒoˇã64
);

279 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

289 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

290 && 
deföed
 
__va_¨g_∑ck_Àn


291 
	~<bôs/f˙é2.h
>

294 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

68 
ídgª¡
 ();

74 
group
 *
gëgª¡
 ();

77 #ifdef 
__USE_MISC


84 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

87 #ifde‡
__USE_GNU


94 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

95 
FILE
 *
__ª°ri˘
 
__f
);

102 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

108 
group
 *
gëg∫am
 (c⁄° *
__«me
);

110 #ifde‡
__USE_POSIX


112 #ifde‡
__USE_MISC


115 
	#NSS_BUFLEN_GROUP
 1024

	)

131 #ifde‡
__USE_GNU


132 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

133 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

134 
group
 **
__ª°ri˘
 
__ªsu…
);

141 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

142 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

143 
group
 **
__ª°ri˘
 
__ªsu…
);

149 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
group
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
group
 **
__ª°ri˘
 
__ªsu…
);

154 #ifdef 
__USE_MISC


162 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

163 
group
 *
__ª°ri˘
 
__ªsu…buf
,

164 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

165 
group
 **
__ª°ri˘
 
__ªsu…
);

171 #ifdef 
__USE_MISC


173 
	#__√ed_size_t


	)

174 
	~<°ddef.h
>

177 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

187 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

188 
__gid_t
 *
__groups
, *
__ngroups
);

198 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

202 
__END_DECLS


	@/usr/include/lastlog.h

4 
	~<utmp.h
>

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/atm.h

11 #i‚de‡
_LINUX_ATM_H


12 
	#_LINUX_ATM_H


	)

20 
	~<löux/©m≠i.h
>

21 
	~<löux/©mßp.h
>

22 
	~<löux/©mioc.h
>

23 
	~<löux/ty≥s.h
>

27 
	#ATM_CELL_SIZE
 53

	)

28 
	#ATM_CELL_PAYLOAD
 48

	)

29 
	#ATM_AAL0_SDU
 52

	)

30 
	#ATM_MAX_AAL34_PDU
 65535

	)

31 
	#ATM_AAL5_TRAILER
 8

	)

32 
	#ATM_MAX_AAL5_PDU
 65535

	)

33 
	#ATM_MAX_CDV
 9999

	)

34 
	#ATM_NOT_RSV_VCI
 32

	)

36 
	#ATM_MAX_VPI
 255

	)

37 
	#ATM_MAX_VPI_NNI
 4096

	)

38 
	#ATM_MAX_VCI
 65535

	)

42 
	#ATM_NO_AAL
 0

	)

43 
	#ATM_AAL0
 13

	)

44 
	#ATM_AAL1
 1

	)

45 
	#ATM_AAL2
 2

	)

46 
	#ATM_AAL34
 3

	)

47 
	#ATM_AAL5
 5

	)

57 
	#__SO_ENCODE
(
l
,
n
,
t
) ((((l) & 0x1FF) << 22) | ((n) << 16) | \

58 (
t
))

	)

59 
	#__SO_LEVEL_MATCH
(
c
,
m
Ë(((cË>> 22Ë=((mË& 0x1FF))

	)

60 
	#__SO_NUMBER
(
c
Ë(((cË>> 16Ë& 0x3f)

	)

61 
	#__SO_SIZE
(
c
Ë((cË& 0x3fff)

	)

67 
	#SO_SETCLP
 
	`__SO_ENCODE
(
SOL_ATM
,0,)

	)

69 
	#SO_CIRANGE
 
	`__SO_ENCODE
(
SOL_ATM
,1,
©m_cú™ge
)

	)

72 
	#SO_ATMQOS
 
	`__SO_ENCODE
(
SOL_ATM
,2,
©m_qos
)

	)

74 
	#SO_ATMSAP
 
	`__SO_ENCODE
(
SOL_ATM
,3,
©m_ßp
)

	)

76 
	#SO_ATMPVC
 
	`__SO_ENCODE
(
SOL_ATM
,4,
sockaddr_©mpvc
)

	)

78 
	#SO_MULTIPOINT
 
	`__SO_ENCODE
(
SOL_ATM
, 5, )

	)

93 
	#ATM_HDR_GFC_MASK
 0xf0000000

	)

94 
	#ATM_HDR_GFC_SHIFT
 28

	)

95 
	#ATM_HDR_VPI_MASK
 0x0ff00000

	)

96 
	#ATM_HDR_VPI_SHIFT
 20

	)

97 
	#ATM_HDR_VCI_MASK
 0x000ffff0

	)

98 
	#ATM_HDR_VCI_SHIFT
 4

	)

99 
	#ATM_HDR_PTI_MASK
 0x0000000e

	)

100 
	#ATM_HDR_PTI_SHIFT
 1

	)

101 
	#ATM_HDR_CLP
 0x00000001

	)

108 
	#ATM_PTI_US0
 0

	)

109 
	#ATM_PTI_US1
 1

	)

110 
	#ATM_PTI_UCES0
 2

	)

111 
	#ATM_PTI_UCES1
 3

	)

112 
	#ATM_PTI_SEGF5
 4

	)

113 
	#ATM_PTI_E2EF5
 5

	)

114 
	#ATM_PTI_RSV_RM
 6

	)

115 
	#ATM_PTI_RSV
 7

	)

126 
	#ATM_NONE
 0

	)

127 
	#ATM_UBR
 1

	)

128 
	#ATM_CBR
 2

	)

129 
	#ATM_VBR
 3

	)

130 
	#ATM_ABR
 4

	)

131 
	#ATM_ANYCLASS
 5

	)

133 
	#ATM_MAX_PCR
 -1

	)

135 
	s©m_åaÂrm
 {

136 
	måaffic_˛ass
;

137 
	mmax_p¸
;

138 
	mp¸
;

139 
	mmö_p¸
;

140 
	mmax_cdv
;

141 
	mmax_sdu
;

143 
	mi¸
;

144 
	mtbe
;

145 
	m‰â
 : 24;

146 
	mrif
 : 4;

147 
	mrdf
 : 4;

148 
	mƒm_¥es
 :1;

149 
	måm_¥es
 :1;

150 
	madtf_¥es
 :1;

151 
	mcdf_¥es
 :1;

152 
	mƒm
 :3;

153 
	måm
 :3;

154 
	madtf
 :10;

155 
	mcdf
 :3;

156 
	m•¨e
 :9;

159 
	s©m_qos
 {

160 
©m_åaÂrm
 
	mtxç
;

161 
©m_åaÂrm
 
rxç
 
	m__ATM_API_ALIGN
;

163 
Øl
 
	m__ATM_API_ALIGN
;

168 
	#ATM_ITF_ANY
 -1

	)

169 
	#ATM_VPI_ANY
 -1

	)

170 
	#ATM_VCI_ANY
 -1

	)

171 
	#ATM_VPI_UNSPEC
 -2

	)

172 
	#ATM_VCI_UNSPEC
 -2

	)

175 
	ssockaddr_©mpvc
 {

176 
	mßp_Ámûy
;

178 
	môf
;

179 
	mvpi
;

180 
	mvci
;

181 } 
ßp_addr
 
	m__ATM_API_ALIGN
;

186 
	#ATM_ESA_LEN
 20

	)

187 
	#ATM_E164_LEN
 12

	)

189 
	#ATM_AFI_DCC
 0x39

	)

190 
	#ATM_AFI_ICD
 0x47

	)

191 
	#ATM_AFI_E164
 0x45

	)

192 
	#ATM_AFI_LOCAL
 0x49

	)

194 
	#ATM_AFI_DCC_GROUP
 0xBD

	)

195 
	#ATM_AFI_ICD_GROUP
 0xC5

	)

196 
	#ATM_AFI_E164_GROUP
 0xC3

	)

197 
	#ATM_AFI_LOCAL_GROUP
 0xC7

	)

199 
	#ATM_LIJ_NONE
 0

	)

200 
	#ATM_LIJ
 1

	)

201 
	#ATM_LIJ_RPJ
 2

	)

202 
	#ATM_LIJ_NJ
 3

	)

205 
	ssockaddr_©msvc
 {

206 
	mßs_Ámûy
;

208 
	m¥v
[
ATM_ESA_LEN
];

209 
	mpub
[
ATM_E164_LEN
+1];

211 
	mlij_ty≥
;

212 
__u32
 
	mlij_id
;

213 } 
ßs_addr
 
	m__ATM_API_ALIGN
;

217 
__ölöe__
 
	$©msvc_addr_ö_u£
(
sockaddr_©msvc
 
addr
)

219  *
addr
.
ßs_addr
.
¥v
 || *addr.ßs_addr.
pub
;

220 
	}
}

223 
__ölöe__
 
	$©mpvc_addr_ö_u£
(
sockaddr_©mpvc
 
addr
)

225  
addr
.
ßp_addr
.
ôf
 ||áddr.ßp_addr.
vpi
 ||áddr.ßp_addr.
vci
;

226 
	}
}

233 
	s©mif_sioc
 {

234 
	mnumbî
;

235 
	mÀngth
;

236 *
	m¨g
;

240 
	t©m_backíd_t
;

	@/usr/include/linux/atmdev.h

6 #i‚de‡
LINUX_ATMDEV_H


7 
	#LINUX_ATMDEV_H


	)

10 
	~<löux/©m≠i.h
>

11 
	~<löux/©m.h
>

12 
	~<löux/©mioc.h
>

15 
	#ESI_LEN
 6

	)

17 
	#ATM_OC3_PCR
 (155520000/270*260/8/53)

	)

22 
	#ATM_25_PCR
 ((25600000/8-8000)/54)

	)

24 
	#ATM_OC12_PCR
 (622080000/1080*1040/8/53)

	)

29 
	#ATM_DS3_PCR
 (8000*12)

	)

33 
	#__AAL_STAT_ITEMS
 \

34 
	`__HANDLE_ITEM
(
tx
); \

35 
	`__HANDLE_ITEM
(
tx_îr
); \

36 
	`__HANDLE_ITEM
(
rx
); \

37 
	`__HANDLE_ITEM
(
rx_îr
); \

38 
	`__HANDLE_ITEM
(
rx_dr›
);

	)

40 
	s©m_Øl_°©s
 {

41 
	#__HANDLE_ITEM
(
i
Ë
	)
i

42 
	m__AAL_STAT_ITEMS


43 #unde‡
__HANDLE_ITEM


47 
	s©m_dev_°©s
 {

48 
©m_Øl_°©s
 
	mØl0
;

49 
©m_Øl_°©s
 
	mØl34
;

50 
©m_Øl_°©s
 
	mØl5
;

51 } 
	g__ATM_API_ALIGN
;

54 
	#ATM_GETLINKRATE
 
	`_IOW
('a',
ATMIOC_ITF
+1,
©mif_sioc
)

	)

56 
	#ATM_GETNAMES
 
	`_IOW
('a',
ATMIOC_ITF
+3,
©m_iobuf
)

	)

58 
	#ATM_GETTYPE
 
	`_IOW
('a',
ATMIOC_ITF
+4,
©mif_sioc
)

	)

60 
	#ATM_GETESI
 
	`_IOW
('a',
ATMIOC_ITF
+5,
©mif_sioc
)

	)

62 
	#ATM_GETADDR
 
	`_IOW
('a',
ATMIOC_ITF
+6,
©mif_sioc
)

	)

64 
	#ATM_RSTADDR
 
	`_IOW
('a',
ATMIOC_ITF
+7,
©mif_sioc
)

	)

66 
	#ATM_ADDADDR
 
	`_IOW
('a',
ATMIOC_ITF
+8,
©mif_sioc
)

	)

68 
	#ATM_DELADDR
 
	`_IOW
('a',
ATMIOC_ITF
+9,
©mif_sioc
)

	)

70 
	#ATM_GETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+10,
©mif_sioc
)

	)

72 
	#ATM_SETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+11,
©mif_sioc
)

	)

74 
	#ATM_SETESI
 
	`_IOW
('a',
ATMIOC_ITF
+12,
©mif_sioc
)

	)

76 
	#ATM_SETESIF
 
	`_IOW
('a',
ATMIOC_ITF
+13,
©mif_sioc
)

	)

78 
	#ATM_ADDLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+14, 
©mif_sioc
)

	)

80 
	#ATM_DELLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+15, 
©mif_sioc
)

	)

82 
	#ATM_GETLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+16, 
©mif_sioc
)

	)

85 
	#ATM_GETSTAT
 
	`_IOW
('a',
ATMIOC_SARCOM
+0,
©mif_sioc
)

	)

87 
	#ATM_GETSTATZ
 
	`_IOW
('a',
ATMIOC_SARCOM
+1,
©mif_sioc
)

	)

89 
	#ATM_GETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+2,
©mif_sioc
)

	)

91 
	#ATM_SETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+3,
©mif_sioc
)

	)

93 
	#ATM_QUERYLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+4,
©mif_sioc
)

	)

95 
	#ATM_SETSC
 
	`_IOW
('a',
ATMIOC_SPECIAL
+1,)

	)

97 
	#ATM_SETBACKEND
 
	`_IOW
('a',
ATMIOC_SPECIAL
+2,
©m_backíd_t
)

	)

99 
	#ATM_NEWBACKENDIF
 
	`_IOW
('a',
ATMIOC_SPECIAL
+3,
©m_backíd_t
)

	)

101 
	#ATM_ADDPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+4,
©m_iobuf
)

	)

103 #ifde‡
CONFIG_COMPAT


105 
	#COMPAT_ATM_ADDPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+4,
com∑t_©m_iobuf
)

	)

107 
	#ATM_DROPPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+5,)

	)

115 
	#ATM_BACKEND_RAW
 0

	)

116 
	#ATM_BACKEND_PPP
 1

	)

117 
	#ATM_BACKEND_BR2684
 2

	)

120 
	#ATM_ITFTYP_LEN
 8

	)

127 
	#__ATM_LM_NONE
 0

	)

128 
	#__ATM_LM_AAL
 1

	)

129 
	#__ATM_LM_ATM
 2

	)

131 
	#__ATM_LM_PHY
 8

	)

132 
	#__ATM_LM_ANALOG
 16

	)

135 
	#__ATM_LM_MKLOC
(
n
Ë(“)Ë

	)

136 
	#__ATM_LM_MKRMT
(
n
Ë(“Ë<< 8Ë

	)

138 
	#__ATM_LM_XTLOC
(
n
Ë(“Ë& 0xff)

	)

139 
	#__ATM_LM_XTRMT
(
n
Ë((“Ë>> 8Ë& 0xff)

	)

141 
	#ATM_LM_NONE
 0

	)

143 
	#ATM_LM_LOC_AAL
 
	`__ATM_LM_MKLOC
(
__ATM_LM_AAL
)

	)

144 
	#ATM_LM_LOC_ATM
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ATM
)

	)

145 
	#ATM_LM_LOC_PHY
 
	`__ATM_LM_MKLOC
(
__ATM_LM_PHY
)

	)

146 
	#ATM_LM_LOC_ANALOG
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ANALOG
)

	)

148 
	#ATM_LM_RMT_AAL
 
	`__ATM_LM_MKRMT
(
__ATM_LM_AAL
)

	)

149 
	#ATM_LM_RMT_ATM
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ATM
)

	)

150 
	#ATM_LM_RMT_PHY
 
	`__ATM_LM_MKRMT
(
__ATM_LM_PHY
)

	)

151 
	#ATM_LM_RMT_ANALOG
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ANALOG
)

	)

159 
	s©m_iobuf
 {

160 
	mÀngth
;

161 *
	mbuf„r
;

166 
	#ATM_CI_MAX
 -1

	)

168 
	s©m_cú™ge
 {

169 sig√d 
	mvpi_bôs
;

170 sig√d 
	mvci_bôs
;

175 
	#ATM_SC_RX
 1024

	)

176 
	#ATM_SC_TX
 2048

	)

178 
	#ATM_BACKLOG_DEFAULT
 32

	)

183 
	#ATM_MF_IMMED
 1

	)

184 
	#ATM_MF_INC_RSV
 2

	)

185 
	#ATM_MF_INC_SHP
 4

	)

186 
	#ATM_MF_DEC_RSV
 8

	)

187 
	#ATM_MF_DEC_SHP
 16

	)

188 
	#ATM_MF_BWD
 32

	)

190 
	#ATM_MF_SET
 (
ATM_MF_INC_RSV
 | 
ATM_MF_INC_SHP
 | 
ATM_MF_DEC_RSV
 | \

191 
ATM_MF_DEC_SHP
 | 
ATM_MF_BWD
)

	)

197 
	#ATM_VS_IDLE
 0

	)

198 
	#ATM_VS_CONNECTED
 1

	)

199 
	#ATM_VS_CLOSING
 2

	)

200 
	#ATM_VS_LISTEN
 3

	)

201 
	#ATM_VS_INUSE
 4

	)

202 
	#ATM_VS_BOUND
 5

	)

204 
	#ATM_VS2TXT_MAP
 \

205 "IDLE", "CONNECTED", "CLOSING", "LISTEN", "INUSE", "BOUND"

	)

207 
	#ATM_VF2TXT_MAP
 \

211 "SESSION", "HASSAP", "BOUND", "CLOSE"

	)

	@/usr/include/linux/atmppp.h

5 #i‚de‡
_LINUX_ATMPPP_H


6 
	#_LINUX_ATMPPP_H


	)

8 
	~<löux/©m.h
>

10 
	#PPPOATM_ENCAPS_AUTODETECT
 (0)

	)

11 
	#PPPOATM_ENCAPS_VC
 (1)

	)

12 
	#PPPOATM_ENCAPS_LLC
 (2)

	)

19 
	s©m_backíd_µp
 {

20 
©m_backíd_t
 
	mbackíd_num
;

21 
	míˇps
;

	@/usr/include/linux/atmsap.h

6 #i‚de‡
_LINUX_ATMSAP_H


7 
	#_LINUX_ATMSAP_H


	)

9 
	~<löux/©m≠i.h
>

22 
	#ATM_L2_NONE
 0

	)

23 
	#ATM_L2_ISO1745
 0x01

	)

24 
	#ATM_L2_Q291
 0x02

	)

25 
	#ATM_L2_X25_LL
 0x06

	)

26 
	#ATM_L2_X25_ML
 0x07

	)

27 
	#ATM_L2_LAPB
 0x08

	)

28 
	#ATM_L2_HDLC_ARM
 0x09

	)

29 
	#ATM_L2_HDLC_NRM
 0x0®

	)

30 
	#ATM_L2_HDLC_ABM
 0x0b

	)

31 
	#ATM_L2_ISO8802
 0x0¯

	)

32 
	#ATM_L2_X75
 0x0d

	)

33 
	#ATM_L2_Q922
 0x0ê

	)

34 
	#ATM_L2_USER
 0x10

	)

35 
	#ATM_L2_ISO7776
 0x11

	)

44 
	#ATM_L3_NONE
 0

	)

45 
	#ATM_L3_X25
 0x06

	)

46 
	#ATM_L3_ISO8208
 0x07

	)

47 
	#ATM_L3_X223
 0x08

	)

48 
	#ATM_L3_ISO8473
 0x09

	)

49 
	#ATM_L3_T70
 0x0®

	)

50 
	#ATM_L3_TR9577
 0x0b

	)

51 
	#ATM_L3_H310
 0x0¯

	)

52 
	#ATM_L3_H321
 0x0d

	)

53 
	#ATM_L3_USER
 0x10

	)

62 
	#ATM_HL_NONE
 0

	)

63 
	#ATM_HL_ISO
 0x01

	)

64 
	#ATM_HL_USER
 0x02

	)

65 
	#ATM_HL_HLP
 0x03

	)

66 
	#ATM_HL_VENDOR
 0x04

	)

75 
	#ATM_IMD_NONE
 0

	)

76 
	#ATM_IMD_NORMAL
 1

	)

77 
	#ATM_IMD_EXTENDED
 2

	)

84 
	#ATM_TT_NONE
 0

	)

85 
	#ATM_TT_RX
 1

	)

86 
	#ATM_TT_TX
 2

	)

87 
	#ATM_TT_RXTX
 3

	)

89 
	#ATM_MC_NONE
 0

	)

90 
	#ATM_MC_TS
 1

	)

91 
	#ATM_MC_TS_FEC
 2

	)

92 
	#ATM_MC_PS
 3

	)

93 
	#ATM_MC_PS_FEC
 4

	)

94 
	#ATM_MC_H221
 5

	)

100 
	#ATM_MAX_HLI
 8

	)

103 
	s©m_bŒi
 {

104 
	ml2_¥Ÿo
;

107 
	mmode
;

109 
	mwödow
;

110 } 
	môu
;

111 
	mu£r
;

112 } 
	ml2
;

113 
	ml3_¥Ÿo
;

116 
	mmode
;

118 
	mdef_size
;

120 
	mwödow
;

121 } 
	môu
;

122 
	mu£r
;

124 
	mãrm_ty≥
;

125 
	mfw_mpx_ˇp
;

127 
	mbw_mpx_ˇp
;

129 } 
	mh310
;

131 
	mùi
;

132 
	m¢≠
[5];

134 } 
	må9577
;

135 } 
	ml3
;

136 } 
	g__ATM_API_ALIGN
;

139 
	s©m_bhli
 {

140 
	mhl_ty≥
;

141 
	mhl_Àngth
;

143 
	mhl_öfo
[
ATM_MAX_HLI
];

147 
	#ATM_MAX_BLLI
 3

	)

150 
	s©m_ßp
 {

151 
©m_bhli
 
	mbhli
;

152 
©m_bŒi
 
	mbŒi
[
ATM_MAX_BLLI
] 
	m__ATM_API_ALIGN
;

157 
__ölöe__
 
	$bŒi_ö_u£
(
©m_bŒi
 
bŒi
)

159  
bŒi
.
l2_¥Ÿo
 || bŒi.
l3_¥Ÿo
;

160 
	}
}

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/bpf_comm⁄.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

36 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

37 
	#BPF_A
 0x10

	)

40 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

41 
	#BPF_TAX
 0x00

	)

42 
	#BPF_TXA
 0x80

	)

47 #i‚de‡
BPF_STMT


48 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

50 #i‚de‡
BPF_JUMP


51 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

57 
	#BPF_MEMWORDS
 16

	)

64 
	#SKF_AD_OFF
 (-0x1000)

	)

65 
	#SKF_AD_PROTOCOL
 0

	)

66 
	#SKF_AD_PKTTYPE
 4

	)

67 
	#SKF_AD_IFINDEX
 8

	)

68 
	#SKF_AD_NLATTR
 12

	)

69 
	#SKF_AD_NLATTR_NEST
 16

	)

70 
	#SKF_AD_MARK
 20

	)

71 
	#SKF_AD_QUEUE
 24

	)

72 
	#SKF_AD_HATYPE
 28

	)

73 
	#SKF_AD_RXHASH
 32

	)

74 
	#SKF_AD_CPU
 36

	)

75 
	#SKF_AD_ALU_XOR_X
 40

	)

76 
	#SKF_AD_VLAN_TAG
 44

	)

77 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

78 
	#SKF_AD_PAY_OFFSET
 52

	)

79 
	#SKF_AD_RANDOM
 56

	)

80 
	#SKF_AD_VLAN_TPID
 60

	)

81 
	#SKF_AD_MAX
 64

	)

83 
	#SKF_NET_OFF
 (-0x100000)

	)

84 
	#SKF_LL_OFF
 (-0x200000)

	)

86 
	#BPF_NET_OFF
 
SKF_NET_OFF


	)

87 
	#BPF_LL_OFF
 
SKF_LL_OFF


	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IF_IFNAMSIZ


28 
	#IFNAMSIZ
 16

	)

30 
	#IFALIASZ
 256

	)

31 
	~<löux/hdlc/io˘l.h
>

34 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 || \

35 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

76 
	e√t_devi˚_Êags
 {

78 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


79 
IFF_UP
 = 1<<0,

80 
	mIFF_BROADCAST
 = 1<<1,

81 
	mIFF_DEBUG
 = 1<<2,

82 
	mIFF_LOOPBACK
 = 1<<3,

83 
	mIFF_POINTOPOINT
 = 1<<4,

84 
	mIFF_NOTRAILERS
 = 1<<5,

85 
	mIFF_RUNNING
 = 1<<6,

86 
	mIFF_NOARP
 = 1<<7,

87 
	mIFF_PROMISC
 = 1<<8,

88 
	mIFF_ALLMULTI
 = 1<<9,

89 
	mIFF_MASTER
 = 1<<10,

90 
	mIFF_SLAVE
 = 1<<11,

91 
	mIFF_MULTICAST
 = 1<<12,

92 
	mIFF_PORTSEL
 = 1<<13,

93 
	mIFF_AUTOMEDIA
 = 1<<14,

94 
	mIFF_DYNAMIC
 = 1<<15,

96 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


97 
	mIFF_LOWER_UP
 = 1<<16,

98 
	mIFF_DORMANT
 = 1<<17,

99 
	mIFF_ECHO
 = 1<<18,

105 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


106 
	#IFF_UP
 
IFF_UP


	)

107 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

108 
	#IFF_DEBUG
 
IFF_DEBUG


	)

109 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

110 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

111 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

112 
	#IFF_RUNNING
 
IFF_RUNNING


	)

113 
	#IFF_NOARP
 
IFF_NOARP


	)

114 
	#IFF_PROMISC
 
IFF_PROMISC


	)

115 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

116 
	#IFF_MASTER
 
IFF_MASTER


	)

117 
	#IFF_SLAVE
 
IFF_SLAVE


	)

118 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

119 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

120 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

121 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

124 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


125 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

126 
	#IFF_DORMANT
 
IFF_DORMANT


	)

127 
	#IFF_ECHO
 
IFF_ECHO


	)

130 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

131 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

133 
	#IF_GET_IFACE
 0x0001

	)

134 
	#IF_GET_PROTO
 0x0002

	)

137 
	#IF_IFACE_V35
 0x1000

	)

138 
	#IF_IFACE_V24
 0x1001

	)

139 
	#IF_IFACE_X21
 0x1002

	)

140 
	#IF_IFACE_T1
 0x1003

	)

141 
	#IF_IFACE_E1
 0x1004

	)

142 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

143 
	#IF_IFACE_X21D
 0x1006

	)

146 
	#IF_PROTO_HDLC
 0x2000

	)

147 
	#IF_PROTO_PPP
 0x2001

	)

148 
	#IF_PROTO_CISCO
 0x2002

	)

149 
	#IF_PROTO_FR
 0x2003

	)

150 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

151 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

152 
	#IF_PROTO_X25
 0x2006

	)

153 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

154 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

155 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

156 
	#IF_PROTO_FR_PVC
 0x200A

	)

157 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

158 
	#IF_PROTO_RAW
 0x200C

	)

162 
	mIF_OPER_UNKNOWN
,

163 
	mIF_OPER_NOTPRESENT
,

164 
	mIF_OPER_DOWN
,

165 
	mIF_OPER_LOWERLAYERDOWN
,

166 
	mIF_OPER_TESTING
,

167 
	mIF_OPER_DORMANT
,

168 
	mIF_OPER_UP
,

173 
	mIF_LINK_MODE_DEFAULT
,

174 
	mIF_LINK_MODE_DORMANT
,

188 #i‡
__UAPI_DEF_IF_IFMAP


189 
	sifm≠
 {

190 
	mmem_°¨t
;

191 
	mmem_íd
;

192 
	mba£_addr
;

193 
	múq
;

194 
	mdma
;

195 
	mp‹t
;

200 
	sif_£âögs
 {

201 
	mty≥
;

202 
	msize
;

205 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

206 
cisco_¥Ÿo
 *
	mcisco
;

207 
‰_¥Ÿo
 *
	m‰
;

208 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

209 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

212 
sync_£rül_£âögs
 *
	msync
;

213 
ã1_£âögs
 *
	mã1
;

214 } 
	mifs_ifsu
;

225 #i‡
__UAPI_DEF_IF_IFREQ


226 
	si‰eq
 {

227 
	#IFHWADDRLEN
 6

	)

230 
	mi‰n_«me
[
IFNAMSIZ
];

231 } 
	mi‰_i‰n
;

234 
sockaddr
 
	mi‰u_addr
;

235 
sockaddr
 
	mi‰u_d°addr
;

236 
sockaddr
 
	mi‰u_brﬂdaddr
;

237 
sockaddr
 
	mi‰u_√tmask
;

238 
sockaddr
 
	mi‰u_hwaddr
;

239 
	mi‰u_Êags
;

240 
	mi‰u_ivÆue
;

241 
	mi‰u_mtu
;

242 
ifm≠
 
	mi‰u_m≠
;

243 
	mi‰u_¶ave
[
IFNAMSIZ
];

244 
	mi‰u_√w«me
[
IFNAMSIZ
];

245 * 
	mi‰u_d©a
;

246 
if_£âögs
 
	mi‰u_£âögs
;

247 } 
	mi‰_i‰u
;

251 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

252 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

253 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

254 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

255 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

256 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

257 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

258 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

259 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

260 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

261 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

262 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

263 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

264 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

266 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

267 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

277 #i‡
__UAPI_DEF_IF_IFCONF


278 
	sifc⁄f
 {

279 
	mifc_Àn
;

281 *
	mifcu_buf
;

282 
i‰eq
 *
	mifcu_ªq
;

283 } 
	mifc_ifcu
;

287 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

288 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

97 
	#ARPHRD_6LOWPAN
 825

	)

99 
	#ARPHRD_VOID
 0xFFFF

	)

100 
	#ARPHRD_NONE
 0xFFFE

	)

103 
	#ARPOP_REQUEST
 1

	)

104 
	#ARPOP_REPLY
 2

	)

105 
	#ARPOP_RREQUEST
 3

	)

106 
	#ARPOP_RREPLY
 4

	)

107 
	#ARPOP_InREQUEST
 8

	)

108 
	#ARPOP_InREPLY
 9

	)

109 
	#ARPOP_NAK
 10

	)

113 
	s¨¥eq
 {

114 
sockaddr
 
	m¨p_∑
;

115 
sockaddr
 
	m¨p_ha
;

116 
	m¨p_Êags
;

117 
sockaddr
 
	m¨p_√tmask
;

118 
	m¨p_dev
[16];

121 
	s¨¥eq_ﬁd
 {

122 
sockaddr
 
	m¨p_∑
;

123 
sockaddr
 
	m¨p_ha
;

124 
	m¨p_Êags
;

125 
sockaddr
 
	m¨p_√tmask
;

129 
	#ATF_COM
 0x02

	)

130 
	#ATF_PERM
 0x04

	)

131 
	#ATF_PUBL
 0x08

	)

132 
	#ATF_USETRAILERS
 0x10

	)

133 
	#ATF_NETMASK
 0x20

	)

135 
	#ATF_DONTPUB
 0x40

	)

141 
	s¨phdr
 {

142 
__be16
 
	m¨_hrd
;

143 
__be16
 
	m¨_¥o
;

144 
	m¨_h 
;

145 
	m¨_∂n
;

146 
__be16
 
	m¨_›
;

152 
	m¨_sha
[
ETH_ALEN
];

153 
	m¨_sù
[4];

154 
	m¨_tha
[
ETH_ALEN
];

155 
	m¨_tù
[4];

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_TLEN
 2

	)

33 
	#ETH_HLEN
 14

	)

34 
	#ETH_ZLEN
 60

	)

35 
	#ETH_DATA_LEN
 1500

	)

36 
	#ETH_FRAME_LEN
 1514

	)

37 
	#ETH_FCS_LEN
 4

	)

43 
	#ETH_P_LOOP
 0x0060

	)

44 
	#ETH_P_PUP
 0x0200

	)

45 
	#ETH_P_PUPAT
 0x0201

	)

46 
	#ETH_P_TSN
 0x22F0

	)

47 
	#ETH_P_IP
 0x0800

	)

48 
	#ETH_P_X25
 0x0805

	)

49 
	#ETH_P_ARP
 0x0806

	)

50 
	#ETH_P_BPQ
 0x08FF

	)

51 
	#ETH_P_IEEEPUP
 0x0a00

	)

52 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

53 
	#ETH_P_BATMAN
 0x4305

	)

54 
	#ETH_P_DEC
 0x6000

	)

55 
	#ETH_P_DNA_DL
 0x6001

	)

56 
	#ETH_P_DNA_RC
 0x6002

	)

57 
	#ETH_P_DNA_RT
 0x6003

	)

58 
	#ETH_P_LAT
 0x6004

	)

59 
	#ETH_P_DIAG
 0x6005

	)

60 
	#ETH_P_CUST
 0x6006

	)

61 
	#ETH_P_SCA
 0x6007

	)

62 
	#ETH_P_TEB
 0x6558

	)

63 
	#ETH_P_RARP
 0x8035

	)

64 
	#ETH_P_ATALK
 0x809B

	)

65 
	#ETH_P_AARP
 0x80F3

	)

66 
	#ETH_P_8021Q
 0x8100

	)

67 
	#ETH_P_IPX
 0x8137

	)

68 
	#ETH_P_IPV6
 0x86DD

	)

69 
	#ETH_P_PAUSE
 0x8808

	)

70 
	#ETH_P_SLOW
 0x8809

	)

71 
	#ETH_P_WCCP
 0x883E

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_PPP_DISC
 0x8863

	)

77 
	#ETH_P_PPP_SES
 0x8864

	)

78 
	#ETH_P_LINK_CTL
 0x886¯

	)

79 
	#ETH_P_ATMFATE
 0x8884

	)

82 
	#ETH_P_PAE
 0x888E

	)

83 
	#ETH_P_AOE
 0x88A2

	)

84 
	#ETH_P_8021AD
 0x88A8

	)

85 
	#ETH_P_802_EX1
 0x88B5

	)

86 
	#ETH_P_TIPC
 0x88CA

	)

87 
	#ETH_P_MACSEC
 0x88E5

	)

88 
	#ETH_P_8021AH
 0x88E7

	)

89 
	#ETH_P_MVRP
 0x88F5

	)

90 
	#ETH_P_1588
 0x88F7

	)

91 
	#ETH_P_NCSI
 0x88F8

	)

92 
	#ETH_P_PRP
 0x88FB

	)

93 
	#ETH_P_FCOE
 0x8906

	)

94 
	#ETH_P_TDLS
 0x890D

	)

95 
	#ETH_P_FIP
 0x8914

	)

96 
	#ETH_P_80221
 0x8917

	)

97 
	#ETH_P_HSR
 0x892F

	)

98 
	#ETH_P_LOOPBACK
 0x9000

	)

99 
	#ETH_P_QINQ1
 0x9100

	)

100 
	#ETH_P_QINQ2
 0x9200

	)

101 
	#ETH_P_QINQ3
 0x9300

	)

102 
	#ETH_P_EDSA
 0xDADA

	)

103 
	#ETH_P_AF_IUCV
 0xFBFB

	)

105 
	#ETH_P_802_3_MIN
 0x0600

	)

112 
	#ETH_P_802_3
 0x0001

	)

113 
	#ETH_P_AX25
 0x0002

	)

114 
	#ETH_P_ALL
 0x0003

	)

115 
	#ETH_P_802_2
 0x0004

	)

116 
	#ETH_P_SNAP
 0x0005

	)

117 
	#ETH_P_DDCMP
 0x0006

	)

118 
	#ETH_P_WAN_PPP
 0x0007

	)

119 
	#ETH_P_PPP_MP
 0x0008

	)

120 
	#ETH_P_LOCALTALK
 0x0009

	)

121 
	#ETH_P_CAN
 0x000C

	)

122 
	#ETH_P_CANFD
 0x000D

	)

123 
	#ETH_P_PPPTALK
 0x0010

	)

124 
	#ETH_P_TR_802_2
 0x0011

	)

125 
	#ETH_P_MOBITEX
 0x0015

	)

126 
	#ETH_P_CONTROL
 0x0016

	)

127 
	#ETH_P_IRDA
 0x0017

	)

128 
	#ETH_P_ECONET
 0x0018

	)

129 
	#ETH_P_HDLC
 0x0019

	)

130 
	#ETH_P_ARCNET
 0x001A

	)

131 
	#ETH_P_DSA
 0x001B

	)

132 
	#ETH_P_TRAILER
 0x001C

	)

133 
	#ETH_P_PHONET
 0x00F5

	)

134 
	#ETH_P_IEEE802154
 0x00F6

	)

135 
	#ETH_P_CAIF
 0x00F7

	)

136 
	#ETH_P_XDSA
 0x00F8

	)

143 #i‚de‡
__UAPI_DEF_ETHHDR


144 
	#__UAPI_DEF_ETHHDR
 1

	)

147 #i‡
__UAPI_DEF_ETHHDR


148 
	sëhhdr
 {

149 
	mh_de°
[
ETH_ALEN
];

150 
	mh_sour˚
[
ETH_ALEN
];

151 
__be16
 
	mh_¥Ÿo
;

152 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

57 
	#PACKET_ROLLOVER_STATS
 21

	)

58 
	#PACKET_FANOUT_DATA
 22

	)

60 
	#PACKET_FANOUT_HASH
 0

	)

61 
	#PACKET_FANOUT_LB
 1

	)

62 
	#PACKET_FANOUT_CPU
 2

	)

63 
	#PACKET_FANOUT_ROLLOVER
 3

	)

64 
	#PACKET_FANOUT_RND
 4

	)

65 
	#PACKET_FANOUT_QM
 5

	)

66 
	#PACKET_FANOUT_CBPF
 6

	)

67 
	#PACKET_FANOUT_EBPF
 7

	)

68 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

69 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

71 
	sçackë_°©s
 {

72 
	mç_∑ckës
;

73 
	mç_dr›s
;

76 
	sçackë_°©s_v3
 {

77 
	mç_∑ckës
;

78 
	mç_dr›s
;

79 
	mç_‰ìze_q_˙t
;

82 
	sçackë_rﬁlovî_°©s
 {

83 
__Æig√d_u64
 
	mç_Æl
;

84 
__Æig√d_u64
 
	mç_huge
;

85 
__Æig√d_u64
 
	mç_Áûed
;

88 
	uçackë_°©s_u
 {

89 
çackë_°©s
 
	m°©s1
;

90 
çackë_°©s_v3
 
	m°©s3
;

93 
	sçackë_auxd©a
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u16
 
	mç_vœn_tci
;

100 
__u16
 
	mç_vœn_çid
;

104 
	#TP_STATUS_KERNEL
 0

	)

105 
	#TP_STATUS_USER
 (1 << 0)

	)

106 
	#TP_STATUS_COPY
 (1 << 1)

	)

107 
	#TP_STATUS_LOSING
 (1 << 2)

	)

108 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

109 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

110 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

111 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

112 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

115 
	#TP_STATUS_AVAILABLE
 0

	)

116 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

117 
	#TP_STATUS_SENDING
 (1 << 1)

	)

118 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

121 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

122 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

123 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

126 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

128 
	sçackë_hdr
 {

129 
	mç_°©us
;

130 
	mç_Àn
;

131 
	mç_¢≠Àn
;

132 
	mç_mac
;

133 
	mç_√t
;

134 
	mç_£c
;

135 
	mç_u£c
;

138 
	#TPACKET_ALIGNMENT
 16

	)

139 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

140 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

142 
	sçackë2_hdr
 {

143 
__u32
 
	mç_°©us
;

144 
__u32
 
	mç_Àn
;

145 
__u32
 
	mç_¢≠Àn
;

146 
__u16
 
	mç_mac
;

147 
__u16
 
	mç_√t
;

148 
__u32
 
	mç_£c
;

149 
__u32
 
	mç_n£c
;

150 
__u16
 
	mç_vœn_tci
;

151 
__u16
 
	mç_vœn_çid
;

152 
__u8
 
	mç_∑ddög
[4];

155 
	sçackë_hdr_v¨ü¡1
 {

156 
__u32
 
	mç_rxhash
;

157 
__u32
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u16
 
	mç_∑ddög
;

162 
	sçackë3_hdr
 {

163 
__u32
 
	mç_√xt_off£t
;

164 
__u32
 
	mç_£c
;

165 
__u32
 
	mç_n£c
;

166 
__u32
 
	mç_¢≠Àn
;

167 
__u32
 
	mç_Àn
;

168 
__u32
 
	mç_°©us
;

169 
__u16
 
	mç_mac
;

170 
__u16
 
	mç_√t
;

173 
çackë_hdr_v¨ü¡1
 
	mhv1
;

175 
__u8
 
	mç_∑ddög
[8];

178 
	sçackë_bd_ts
 {

179 
	mts_£c
;

181 
	mts_u£c
;

182 
	mts_n£c
;

186 
	sçackë_hdr_v1
 {

187 
__u32
 
	mblock_°©us
;

188 
__u32
 
	mnum_pkts
;

189 
__u32
 
	moff£t_to_fú°_pkt
;

194 
__u32
 
	mblk_Àn
;

205 
__Æig√d_u64
 
	m£q_num
;

232 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

235 
	uçackë_bd_hódî_u
 {

236 
çackë_hdr_v1
 
	mbh1
;

239 
	sçackë_block_desc
 {

240 
__u32
 
	mvîsi⁄
;

241 
__u32
 
	moff£t_to_¥iv
;

242 
çackë_bd_hódî_u
 
	mhdr
;

245 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

246 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

248 
	eçackë_vîsi⁄s
 {

249 
	mTPACKET_V1
,

250 
	mTPACKET_V2
,

251 
	mTPACKET_V3


267 
	sçackë_ªq
 {

268 
	mç_block_size
;

269 
	mç_block_ƒ
;

270 
	mç_‰ame_size
;

271 
	mç_‰ame_ƒ
;

274 
	sçackë_ªq3
 {

275 
	mç_block_size
;

276 
	mç_block_ƒ
;

277 
	mç_‰ame_size
;

278 
	mç_‰ame_ƒ
;

279 
	mç_ªtúe_blk_tov
;

280 
	mç_sizeof_¥iv
;

281 
	mç_„©uª_ªq_w‹d
;

284 
	uçackë_ªq_u
 {

285 
çackë_ªq
 
	mªq
;

286 
çackë_ªq3
 
	mªq3
;

289 
	s∑ckë_mªq
 {

290 
	mmr_ifödex
;

291 
	mmr_ty≥
;

292 
	mmr_Æí
;

293 
	mmr_addªss
[8];

296 
	#PACKET_MR_MULTICAST
 0

	)

297 
	#PACKET_MR_PROMISC
 1

	)

298 
	#PACKET_MR_ALLMULTI
 2

	)

299 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_ppp.h

1 
	~<löux/µp-io˘l.h
>

	@/usr/include/linux/if_pppol2tp.h

15 #i‚de‡
__LINUX_IF_PPPOL2TP_H


16 
	#__LINUX_IF_PPPOL2TP_H


	)

18 
	~<löux/ty≥s.h
>

19 
	~<löux/ö.h
>

20 
	~<löux/ö6.h
>

25 
	sµpﬁ2ç_addr
 {

26 
__kî√l_pid_t
 
	mpid
;

28 
	mfd
;

30 
sockaddr_ö
 
	maddr
;

32 
__u16
 
	ms_tu¬ñ
, 
	ms_£ssi⁄
;

33 
__u16
 
	md_tu¬ñ
, 
	md_£ssi⁄
;

39 
	sµpﬁ2çö6_addr
 {

40 
__kî√l_pid_t
 
	mpid
;

42 
	mfd
;

44 
__u16
 
	ms_tu¬ñ
, 
	ms_£ssi⁄
;

45 
__u16
 
	md_tu¬ñ
, 
	md_£ssi⁄
;

47 
sockaddr_ö6
 
	maddr
;

53 
	sµpﬁ2çv3_addr
 {

54 
__kî√l_pid_t
 
	mpid
;

56 
	mfd
;

58 
sockaddr_ö
 
	maddr
;

60 
__u32
 
	ms_tu¬ñ
, 
	ms_£ssi⁄
;

61 
__u32
 
	md_tu¬ñ
, 
	md_£ssi⁄
;

64 
	sµpﬁ2çv3ö6_addr
 {

65 
__kî√l_pid_t
 
	mpid
;

67 
	mfd
;

69 
__u32
 
	ms_tu¬ñ
, 
	ms_£ssi⁄
;

70 
__u32
 
	md_tu¬ñ
, 
	md_£ssi⁄
;

72 
sockaddr_ö6
 
	maddr
;

86 
	mPPPOL2TP_SO_DEBUG
 = 1,

87 
	mPPPOL2TP_SO_RECVSEQ
 = 2,

88 
	mPPPOL2TP_SO_SENDSEQ
 = 3,

89 
	mPPPOL2TP_SO_LNSMODE
 = 4,

90 
	mPPPOL2TP_SO_REORDERTO
 = 5,

95 
	mPPPOL2TP_MSG_DEBUG
 = (1 << 0),

97 
	mPPPOL2TP_MSG_CONTROL
 = (1 << 1),

99 
	mPPPOL2TP_MSG_SEQ
 = (1 << 2),

100 
	mPPPOL2TP_MSG_DATA
 = (1 << 3),

	@/usr/include/linux/if_pppox.h

16 #i‚de‡
__LINUX_IF_PPPOX_H


17 
	#__LINUX_IF_PPPOX_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

23 
	~<löux/sockë.h
>

24 
	~<löux/if.h
>

25 
	~<löux/if_ëhî.h
>

26 
	~<löux/if_µpﬁ2ç.h
>

27 
	~<löux/ö.h
>

28 
	~<löux/ö6.h
>

33 #i‚de‡
AF_PPPOX


34 
	#AF_PPPOX
 24

	)

35 
	#PF_PPPOX
 
AF_PPPOX


	)

41 
__be16
 
	tsid_t
;

42 
	sµp€_addr
 {

43 
sid_t
 
	msid
;

44 
	mªmŸe
[
ETH_ALEN
];

45 
	mdev
[
IFNAMSIZ
];

51 
	sµç_addr
 {

52 
__u16
 
	mˇŒ_id
;

53 
ö_addr
 
	msö_addr
;

59 
	#PX_PROTO_OE
 0

	)

60 
	#PX_PROTO_OL2TP
 1

	)

61 
	#PX_PROTO_PPTP
 2

	)

62 
	#PX_MAX_PROTO
 3

	)

64 
	ssockaddr_µpox
 {

65 
__kî√l_ß_Ámûy_t
 
	mß_Ámûy
;

66 
	mß_¥Ÿocﬁ
;

68 
µp€_addr
 
	mµp€
;

69 
µç_addr
 
	mµç
;

70 } 
	mß_addr
;

71 } 
__©åibuã__
((
∑cked
));

78 
	ssockaddr_µpﬁ2ç
 {

79 
__kî√l_ß_Ámûy_t
 
	mß_Ámûy
;

80 
	mß_¥Ÿocﬁ
;

81 
µpﬁ2ç_addr
 
	mµpﬁ2ç
;

82 } 
__©åibuã__
((
∑cked
));

84 
	ssockaddr_µpﬁ2çö6
 {

85 
__kî√l_ß_Ámûy_t
 
	mß_Ámûy
;

86 
	mß_¥Ÿocﬁ
;

87 
µpﬁ2çö6_addr
 
	mµpﬁ2ç
;

88 } 
__©åibuã__
((
∑cked
));

93 
	ssockaddr_µpﬁ2çv3
 {

94 
__kî√l_ß_Ámûy_t
 
	mß_Ámûy
;

95 
	mß_¥Ÿocﬁ
;

96 
µpﬁ2çv3_addr
 
	mµpﬁ2ç
;

97 } 
__©åibuã__
((
∑cked
));

99 
	ssockaddr_µpﬁ2çv3ö6
 {

100 
__kî√l_ß_Ámûy_t
 
	mß_Ámûy
;

101 
	mß_¥Ÿocﬁ
;

102 
µpﬁ2çv3ö6_addr
 
	mµpﬁ2ç
;

103 } 
__©åibuã__
((
∑cked
));

111 
	#PPPOEIOCSFWD
 
	`_IOW
(0xB1 ,0, 
size_t
)

	)

112 
	#PPPOEIOCDFWD
 
	`_IO
(0xB1 ,1)

	)

116 
	#PADI_CODE
 0x09

	)

117 
	#PADO_CODE
 0x07

	)

118 
	#PADR_CODE
 0x19

	)

119 
	#PADS_CODE
 0x65

	)

120 
	#PADT_CODE
 0xa7

	)

121 
	sµp€_èg
 {

122 
__be16
 
	mèg_ty≥
;

123 
__be16
 
	mèg_Àn
;

124 
	mèg_d©a
[0];

125 } 
__©åibuã__
 ((
∑cked
));

128 
	#PTT_EOL
 
	`__˝u_to_be16
(0x0000)

	)

129 
	#PTT_SRV_NAME
 
	`__˝u_to_be16
(0x0101)

	)

130 
	#PTT_AC_NAME
 
	`__˝u_to_be16
(0x0102)

	)

131 
	#PTT_HOST_UNIQ
 
	`__˝u_to_be16
(0x0103)

	)

132 
	#PTT_AC_COOKIE
 
	`__˝u_to_be16
(0x0104)

	)

133 
	#PTT_VENDOR
 
	`__˝u_to_be16
(0x0105)

	)

134 
	#PTT_RELAY_SID
 
	`__˝u_to_be16
(0x0110)

	)

135 
	#PTT_SRV_ERR
 
	`__˝u_to_be16
(0x0201)

	)

136 
	#PTT_SYS_ERR
 
	`__˝u_to_be16
(0x0202)

	)

137 
	#PTT_GEN_ERR
 
	`__˝u_to_be16
(0x0203)

	)

139 
	sµp€_hdr
 {

140 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

141 
__u8
 
	mty≥
 : 4;

142 
__u8
 
	mvî
 : 4;

143 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

144 
__u8
 
	mvî
 : 4;

145 
__u8
 
	mty≥
 : 4;

149 
__u8
 
	mcode
;

150 
__be16
 
	msid
;

151 
__be16
 
	mÀngth
;

152 
µp€_èg
 
	mèg
[0];

153 } 
__©åibuã__
((
∑cked
));

156 
	#PPPOE_SES_HLEN
 8

	)

	@/usr/include/linux/ipx.h

1 #i‚de‡
_IPX_H_


2 
	#_IPX_H_


	)

3 
	~<löux/libc-com∑t.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<löux/sockios.h
>

6 
	~<löux/sockë.h
>

7 
	#IPX_NODE_LEN
 6

	)

8 
	#IPX_MTU
 576

	)

10 #i‡
__UAPI_DEF_SOCKADDR_IPX


11 
	ssockaddr_ùx
 {

12 
__kî√l_ß_Ámûy_t
 
	msùx_Ámûy
;

13 
__be16
 
	msùx_p‹t
;

14 
__be32
 
	msùx_√tw‹k
;

15 
	msùx_node
[
IPX_NODE_LEN
];

16 
__u8
 
	msùx_ty≥
;

17 
	msùx_zîo
;

24 
	#sùx_•ecül
 
sùx_p‹t


	)

25 
	#sùx_a˘i⁄
 
sùx_zîo


	)

26 
	#IPX_DLTITF
 0

	)

27 
	#IPX_CRTITF
 1

	)

29 #i‡
__UAPI_DEF_IPX_ROUTE_DEFINITION


30 
	sùx_rouã_deföôi⁄
 {

31 
__be32
 
	mùx_√tw‹k
;

32 
__be32
 
	mùx_rouãr_√tw‹k
;

33 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

37 #i‡
__UAPI_DEF_IPX_INTERFACE_DEFINITION


38 
	sùx_öãrÁ˚_deföôi⁄
 {

39 
__be32
 
	mùx_√tw‹k
;

40 
	mùx_devi˚
[16];

41 
	mùx_dlök_ty≥
;

42 
	#IPX_FRAME_NONE
 0

	)

43 
	#IPX_FRAME_SNAP
 1

	)

44 
	#IPX_FRAME_8022
 2

	)

45 
	#IPX_FRAME_ETHERII
 3

	)

46 
	#IPX_FRAME_8023
 4

	)

47 
	#IPX_FRAME_TR_8022
 5

	)

48 
	mùx_•ecül
;

49 
	#IPX_SPECIAL_NONE
 0

	)

50 
	#IPX_PRIMARY
 1

	)

51 
	#IPX_INTERNAL
 2

	)

52 
	mùx_node
[
IPX_NODE_LEN
];

56 #i‡
__UAPI_DEF_IPX_CONFIG_DATA


57 
	sùx_c⁄fig_d©a
 {

58 
	mùxcfg_auto_£À˘_¥im¨y
;

59 
	mùxcfg_auto_¸óã_öãrÁ˚s
;

67 #i‡
__UAPI_DEF_IPX_ROUTE_DEF


68 
	sùx_rouã_def
 {

69 
__be32
 
	mùx_√tw‹k
;

70 
__be32
 
	mùx_rouãr_√tw‹k
;

71 
	#IPX_ROUTE_NO_ROUTER
 0

	)

72 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

73 
	mùx_devi˚
[16];

74 
	mùx_Êags
;

75 
	#IPX_RT_SNAP
 8

	)

76 
	#IPX_RT_8022
 4

	)

77 
	#IPX_RT_BLUEBOOK
 2

	)

78 
	#IPX_RT_ROUTED
 1

	)

82 
	#SIOCAIPXITFCRT
 (
SIOCPROTOPRIVATE
)

	)

83 
	#SIOCAIPXPRISLT
 (
SIOCPROTOPRIVATE
 + 1)

	)

84 
	#SIOCIPXCFGDATA
 (
SIOCPROTOPRIVATE
 + 2)

	)

85 
	#SIOCIPXNCPCONN
 (
SIOCPROTOPRIVATE
 + 3)

	)

	@/usr/include/linux/ppp_defs.h

10 
	~<löux/ty≥s.h
>

12 #i‚de‡
_PPP_DEFS_H_


13 
	#_PPP_DEFS_H_


	)

18 
	#PPP_HDRLEN
 4

	)

19 
	#PPP_FCSLEN
 2

	)

20 
	#PPP_MRU
 1500

	)

22 
	#PPP_ADDRESS
(
p
Ë(((
__u8
 *)’))[0])

	)

23 
	#PPP_CONTROL
(
p
Ë(((
__u8
 *)’))[1])

	)

24 
	#PPP_PROTOCOL
(
p
Ë((((
__u8
 *)’))[2] << 8Ë+ ((__u8 *)’))[3])

	)

29 
	#PPP_ALLSTATIONS
 0xf‡

	)

30 
	#PPP_UI
 0x03

	)

31 
	#PPP_FLAG
 0x7ê

	)

32 
	#PPP_ESCAPE
 0x7d

	)

33 
	#PPP_TRANS
 0x20

	)

38 
	#PPP_IP
 0x21

	)

39 
	#PPP_AT
 0x29

	)

40 
	#PPP_IPX
 0x2b

	)

41 
	#PPP_VJC_COMP
 0x2d

	)

42 
	#PPP_VJC_UNCOMP
 0x2‡

	)

43 
	#PPP_MP
 0x3d

	)

44 
	#PPP_IPV6
 0x57

	)

45 
	#PPP_COMPFRAG
 0xfb

	)

46 
	#PPP_COMP
 0xfd

	)

47 
	#PPP_MPLS_UC
 0x0281

	)

48 
	#PPP_MPLS_MC
 0x0283

	)

49 
	#PPP_IPCP
 0x8021

	)

50 
	#PPP_ATCP
 0x8029

	)

51 
	#PPP_IPXCP
 0x802b

	)

52 
	#PPP_IPV6CP
 0x8057

	)

53 
	#PPP_CCPFRAG
 0x80fb

	)

54 
	#PPP_CCP
 0x80fd

	)

55 
	#PPP_MPLSCP
 0x80fd

	)

56 
	#PPP_LCP
 0xc021

	)

57 
	#PPP_PAP
 0xc023

	)

58 
	#PPP_LQR
 0xc025

	)

59 
	#PPP_CHAP
 0xc223

	)

60 
	#PPP_CBCP
 0xc029

	)

66 
	#PPP_INITFCS
 0xfff‡

	)

67 
	#PPP_GOODFCS
 0xf0b8

	)

74 
__u32
 
	text_accm
[8];

79 
	eNPmode
 {

80 
	mNPMODE_PASS
,

81 
	mNPMODE_DROP
,

82 
	mNPMODE_ERROR
,

83 
	mNPMODE_QUEUE


89 
	sµp°©
 {

90 
__u32
 
	mµp_disˇrds
;

92 
__u32
 
	mµp_ibyãs
;

93 
__u32
 
	mµp_io˘e˘s
;

94 
__u32
 
	mµp_ùackës
;

95 
__u32
 
	mµp_õº‹s
;

96 
__u32
 
	mµp_ûqrs
;

98 
__u32
 
	mµp_obyãs
;

99 
__u32
 
	mµp_oo˘e˘s
;

100 
__u32
 
	mµp_›ackës
;

101 
__u32
 
	mµp_€º‹s
;

102 
__u32
 
	mµp_ﬁqrs
;

105 
	svj°©
 {

106 
__u32
 
	mvjs_∑ckës
;

107 
__u32
 
	mvjs_com¥es£d
;

108 
__u32
 
	mvjs_£¨ches
;

109 
__u32
 
	mvjs_mis£s
;

110 
__u32
 
	mvjs_uncom¥es£dö
;

111 
__u32
 
	mvjs_com¥es£dö
;

112 
__u32
 
	mvjs_îr‹ö
;

113 
__u32
 
	mvjs_tos£d
;

116 
	scomp°©
 {

117 
__u32
 
	munc_byãs
;

118 
__u32
 
	munc_∑ckës
;

119 
__u32
 
	mcomp_byãs
;

120 
__u32
 
	mcomp_∑ckës
;

121 
__u32
 
	möc_byãs
;

122 
__u32
 
	möc_∑ckës
;

125 
__u32
 
	mö_cou¡
;

126 
__u32
 
	mbyãs_out
;

128 
	møtio
;

131 
	sµp_°©s
 {

132 
µp°©
 
	mp
;

133 
vj°©
 
	mvj
;

136 
	sµp_comp_°©s
 {

137 
comp°©
 
	mc
;

138 
comp°©
 
	md
;

145 
	sµp_idÀ
 {

146 
__kî√l_time_t
 
	mxmô_idÀ
;

147 
__kî√l_time_t
 
	mªcv_idÀ
;

	@/usr/include/linux/route.h

23 #i‚de‡
_LINUX_ROUTE_H


24 
	#_LINUX_ROUTE_H


	)

26 
	~<löux/if.h
>

30 
	sπíåy
 {

31 
	mπ_∑d1
;

32 
sockaddr
 
	mπ_d°
;

33 
sockaddr
 
	mπ_g©eway
;

34 
sockaddr
 
	mπ_gímask
;

35 
	mπ_Êags
;

36 
	mπ_∑d2
;

37 
	mπ_∑d3
;

38 *
	mπ_∑d4
;

39 
	mπ_mëric
;

40 *
	mπ_dev
;

41 
	mπ_mtu
;

42 
	#π_mss
 
π_mtu


	)

43 
	mπ_wödow
;

44 
	mπ_úâ
;

48 
	#RTF_UP
 0x0001

	)

49 
	#RTF_GATEWAY
 0x0002

	)

50 
	#RTF_HOST
 0x0004

	)

51 
	#RTF_REINSTATE
 0x0008

	)

52 
	#RTF_DYNAMIC
 0x0010

	)

53 
	#RTF_MODIFIED
 0x0020

	)

54 
	#RTF_MTU
 0x0040

	)

55 
	#RTF_MSS
 
RTF_MTU


	)

56 
	#RTF_WINDOW
 0x0080

	)

57 
	#RTF_IRTT
 0x0100

	)

58 
	#RTF_REJECT
 0x0200

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 264658

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

165 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_FILE


	)

24 
	~<°dio.h
>

25 
	~<∑ths.h
>

29 
	#MNTTAB
 
_PATH_MNTTAB


	)

32 
	#MOUNTED
 
_PATH_MOUNTED


	)

36 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

37 
	#MNTTYPE_NFS
 "nfs"

	)

38 
	#MNTTYPE_SWAP
 "sw≠"

	)

42 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

43 
	#MNTOPT_RO
 "ro"

	)

44 
	#MNTOPT_RW
 "rw"

	)

45 
	#MNTOPT_SUID
 "suid"

	)

46 
	#MNTOPT_NOSUID
 "nosuid"

	)

47 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

50 
__BEGIN_DECLS


53 
	sm¡ít


55 *
	mm¡_f¢ame
;

56 *
	mm¡_dú
;

57 *
	mm¡_ty≥
;

58 *
	mm¡_›ts
;

59 
	mm¡_‰eq
;

60 
	mm¡_∑s¢o
;

66 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

71 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

73 #ifde‡
__USE_MISC


75 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

76 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

77 *
__ª°ri˘
 
__buf„r
,

78 
__bufsize
Ë
__THROW
;

83 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

84 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

87 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

91 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

92 c⁄° *
__›t
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/net/if_ppp.h

48 #i‚de‡
__NET_IF_PPP_H


49 
	#__NET_IF_PPP_H
 1

	)

51 
	~<sys/ty≥s.h
>

52 
	~<sys/cdefs.h
>

54 
	~<√t/if.h
>

55 
	~<sys/io˘l.h
>

56 
	~<√t/µp_defs.h
>

58 
	g__BEGIN_DECLS


64 
	#PPP_MTU
 1500

	)

65 
	#PPP_MAXMRU
 65000

	)

66 
	#PPP_VERSION
 "2.2.0"

	)

67 
	#PPP_MAGIC
 0x5002

	)

68 
	#PROTO_IPX
 0x002b

	)

69 
	#PROTO_DNA_RT
 0x0027

	)

76 
	#SC_COMP_PROT
 0x00000001

	)

77 
	#SC_COMP_AC
 0x00000002

	)

78 
	#SC_COMP_TCP
 0x00000004

	)

79 
	#SC_NO_TCP_CCID
 0x00000008

	)

80 
	#SC_REJ_COMP_AC
 0x00000010

	)

81 
	#SC_REJ_COMP_TCP
 0x00000020

	)

82 
	#SC_CCP_OPEN
 0x00000040

	)

83 
	#SC_CCP_UP
 0x00000080

	)

84 
	#SC_ENABLE_IP
 0x00000100

	)

85 
	#SC_COMP_RUN
 0x00001000

	)

86 
	#SC_DECOMP_RUN
 0x00002000

	)

87 
	#SC_DEBUG
 0x00010000

	)

88 
	#SC_LOG_INPKT
 0x00020000

	)

89 
	#SC_LOG_OUTPKT
 0x00040000

	)

90 
	#SC_LOG_RAWIN
 0x00080000

	)

91 
	#SC_LOG_FLUSH
 0x00100000

	)

92 
	#SC_MASK
 0x0fE0fff‡

	)

95 
	#SC_ESCAPED
 0x80000000

	)

96 
	#SC_FLUSH
 0x40000000

	)

97 
	#SC_VJ_RESET
 0x20000000

	)

98 
	#SC_XMIT_BUSY
 0x10000000

	)

99 
	#SC_RCV_ODDP
 0x08000000

	)

100 
	#SC_RCV_EVNP
 0x04000000

	)

101 
	#SC_RCV_B7_1
 0x02000000

	)

102 
	#SC_RCV_B7_0
 0x01000000

	)

103 
	#SC_DC_FERROR
 0x00800000

	)

104 
	#SC_DC_ERROR
 0x00400000

	)

110 
	s≈io˘l
 {

111 
	m¥Ÿocﬁ
;

112 
NPmode
 
	mmode
;

116 
	sµp_›ti⁄_d©a
 {

117 
u_öt8_t
 *
	m±r
;

118 
u_öt32_t
 
	mÀngth
;

119 
	må™smô
;

122 
	siÂµ°©§eq
 {

123 
i‰eq
 
	mb
;

124 
µp_°©s
 
	m°©s
;

127 
	siÂµc°©§eq
 {

128 
i‰eq
 
	mb
;

129 
µp_comp_°©s
 
	m°©s
;

132 
	#i‰__«me
 
b
.
i‰_i‰n
.
i‰n_«me


	)

133 
	#°©s_±r
 
b
.
i‰_i‰u
.
i‰u_d©a


	)

139 
	#PPPIOCGFLAGS
 
	`_IOR
('t', 90, Ë

	)

140 
	#PPPIOCSFLAGS
 
	`_IOW
('t', 89, Ë

	)

141 
	#PPPIOCGASYNCMAP
 
	`_IOR
('t', 88, Ë

	)

142 
	#PPPIOCSASYNCMAP
 
	`_IOW
('t', 87, Ë

	)

143 
	#PPPIOCGUNIT
 
	`_IOR
('t', 86, Ë

	)

144 
	#PPPIOCGRASYNCMAP
 
	`_IOR
('t', 85, Ë

	)

145 
	#PPPIOCSRASYNCMAP
 
	`_IOW
('t', 84, Ë

	)

146 
	#PPPIOCGMRU
 
	`_IOR
('t', 83, Ë

	)

147 
	#PPPIOCSMRU
 
	`_IOW
('t', 82, Ë

	)

148 
	#PPPIOCSMAXCID
 
	`_IOW
('t', 81, Ë

	)

149 
	#PPPIOCGXASYNCMAP
 
	`_IOR
('t', 80, 
ext_accm
Ë

	)

150 
	#PPPIOCSXASYNCMAP
 
	`_IOW
('t', 79, 
ext_accm
Ë

	)

151 
	#PPPIOCXFERUNIT
 
	`_IO
('t', 78Ë

	)

152 
	#PPPIOCSCOMPRESS
 
	`_IOW
('t', 77, 
µp_›ti⁄_d©a
)

	)

153 
	#PPPIOCGNPMODE
 
	`_IOWR
('t', 76, 
≈io˘l
Ë

	)

154 
	#PPPIOCSNPMODE
 
	`_IOW
('t', 75, 
≈io˘l
Ë

	)

155 
	#PPPIOCGDEBUG
 
	`_IOR
('t', 65, Ë

	)

156 
	#PPPIOCSDEBUG
 
	`_IOW
('t', 64, Ë

	)

157 
	#PPPIOCGIDLE
 
	`_IOR
('t', 63, 
µp_idÀ
Ë

	)

159 
	#SIOCGPPPSTATS
 (
SIOCDEVPRIVATE
 + 0)

	)

160 
	#SIOCGPPPVER
 (
SIOCDEVPRIVATE
 + 1Ë

	)

161 
	#SIOCGPPPCSTATS
 (
SIOCDEVPRIVATE
 + 2)

	)

163 #i‡!
deföed
(
i‰_mtu
)

164 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mëric


	)

167 
	g__END_DECLS


	@/usr/include/net/ppp-comp.h

1 
	~<löux/µp-comp.h
>

	@/usr/include/net/ppp_defs.h

1 #i‚de‡
_NET_PPP_DEFS_H


2 
	#_NET_PPP_DEFS_H
 1

	)

4 
	#__√ed_time_t


	)

5 
	~<time.h
>

7 
	~<asm/ty≥s.h
>

8 
	~<löux/µp_defs.h
>

	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/if_ether.h

18 #i‚de‡
__NETINET_IF_ETHER_H


20 
	#__NETINET_IF_ETHER_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<löux/if_ëhî.h
>

27 #ifde‡
__USE_MISC


60 
	~<√t/ëhî√t.h
>

61 
	~<√t/if_¨p.h
>

63 
__BEGIN_DECLS


71 
	sëhî_¨p
 {

72 
¨phdr
 
	mó_hdr
;

73 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

74 
u_öt8_t
 
	m¨p_•a
[4];

75 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

76 
u_öt8_t
 
	m¨p_ça
[4];

78 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

79 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

80 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

81 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

82 
	#¨p_›
 
ó_hdr
.
¨_›


	)

89 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

93 (
íaddr
)[0] = 0x01; \

94 (
íaddr
)[1] = 0x00; \

95 (
íaddr
)[2] = 0x5e; \

96 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

97 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

98 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

99 }

	)

101 
	g__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‡!
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‡!
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‡!
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‡!
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/in_systm.h

19 #i‚de‡
_NETINET_IN_SYSTM_H


20 
	#_NETINET_IN_SYSTM_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty≥s.h
>

25 
__BEGIN_DECLS


34 
u_öt16_t
 
	tn_sh‹t
;

35 
u_öt32_t
 
	tn_l⁄g
;

36 
u_öt32_t
 
	tn_time
;

38 
	g__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_MISC


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netinet/udp.h

47 #i‚de‡
__NETINET_UDP_H


48 
	#__NETINET_UDP_H
 1

	)

50 
	~<„©uªs.h
>

51 
	~<sys/ty≥s.h
>

56 
	sudphdr


58 
__exãnsi⁄__
 union

62 
u_öt16_t
 
	muh_•‹t
;

63 
u_öt16_t
 
	muh_dp‹t
;

64 
u_öt16_t
 
	muh_uÀn
;

65 
u_öt16_t
 
	muh_sum
;

69 
u_öt16_t
 
	msour˚
;

70 
u_öt16_t
 
	mde°
;

71 
u_öt16_t
 
	mÀn
;

72 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

81 
	#UDP_NO_CHECK6_TX
 101

	)

83 
	#UDP_NO_CHECK6_RX
 102

	)

87 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

88 
	#UDP_ENCAP_ESPINUDP
 2

	)

89 
	#UDP_ENCAP_L2TPINUDP
 3

	)

91 
	#SOL_UDP
 17

	)

	@/usr/include/netipx/ipx.h

18 #i‚de‡
__NETIPX_IPX_H


19 
	#__NETIPX_IPX_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<bôs/sockaddr.h
>

26 
	g__BEGIN_DECLS


28 
	#SOL_IPX
 256

	)

30 
	#IPX_TYPE
 1

	)

31 
	#IPX_NODE_LEN
 6

	)

32 
	#IPX_MTU
 576

	)

34 
	ssockaddr_ùx


36 
ß_Ámûy_t
 
	msùx_Ámûy
;

37 
u_öt16_t
 
	msùx_p‹t
;

38 
u_öt32_t
 
	msùx_√tw‹k
;

39 
	msùx_node
[
IPX_NODE_LEN
];

40 
u_öt8_t
 
	msùx_ty≥
;

41 
	msùx_zîo
;

48 
	#sùx_•ecül
 
sùx_p‹t


	)

49 
	#sùx_a˘i⁄
 
sùx_zîo


	)

50 
	#IPX_DLTITF
 0

	)

51 
	#IPX_CRTITF
 1

	)

53 
	sùx_rouã_deföôi⁄


55 
	mùx_√tw‹k
;

56 
	mùx_rouãr_√tw‹k
;

57 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

59 
	tùx_rouã_deföôi⁄
;

61 
	sùx_öãrÁ˚_deföôi⁄


63 
	mùx_√tw‹k
;

64 
	mùx_devi˚
[16];

65 
	mùx_dlök_ty≥
;

66 
	#IPX_FRAME_NONE
 0

	)

67 
	#IPX_FRAME_SNAP
 1

	)

68 
	#IPX_FRAME_8022
 2

	)

69 
	#IPX_FRAME_ETHERII
 3

	)

70 
	#IPX_FRAME_8023
 4

	)

71 
	#IPX_FRAME_TR_8022
 5

	)

72 
	mùx_•ecül
;

73 
	#IPX_SPECIAL_NONE
 0

	)

74 
	#IPX_PRIMARY
 1

	)

75 
	#IPX_INTERNAL
 2

	)

76 
	mùx_node
[
IPX_NODE_LEN
];

78 
	tùx_öãrÁ˚_deföôi⁄
;

80 
	sùx_c⁄fig_d©a


82 
	mùxcfg_auto_£À˘_¥im¨y
;

83 
	mùxcfg_auto_¸óã_öãrÁ˚s
;

85 
	tùx_c⁄fig_d©a
;

91 
	sùx_rouã_def


93 
	mùx_√tw‹k
;

94 
	mùx_rouãr_√tw‹k
;

95 
	#IPX_ROUTE_NO_ROUTER
 0

	)

96 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

97 
	mùx_devi˚
[16];

98 
	mùx_Êags
;

99 
	#IPX_RT_SNAP
 8

	)

100 
	#IPX_RT_8022
 4

	)

101 
	#IPX_RT_BLUEBOOK
 2

	)

102 
	#IPX_RT_ROUTED
 1

	)

105 
	#SIOCAIPXITFCRT
 (
SIOCPROTOPRIVATE
)

	)

106 
	#SIOCAIPXPRISLT
 (
SIOCPROTOPRIVATE
 + 1)

	)

107 
	#SIOCIPXCFGDATA
 (
SIOCPROTOPRIVATE
 + 2)

	)

108 
	#SIOCIPXNCPCONN
 (
SIOCPROTOPRIVATE
 + 3)

	)

110 
	g__END_DECLS


	@/usr/include/netpacket/packet.h

19 #i‚de‡
__NETPACKET_PACKET_H


20 
	#__NETPACKET_PACKET_H
 1

	)

22 
	ssockaddr_Œ


24 
	m¶l_Ámûy
;

25 
	m¶l_¥Ÿocﬁ
;

26 
	m¶l_ifödex
;

27 
	m¶l_h©y≥
;

28 
	m¶l_pkây≥
;

29 
	m¶l_hÆí
;

30 
	m¶l_addr
[8];

35 
	#PACKET_HOST
 0

	)

36 
	#PACKET_BROADCAST
 1

	)

37 
	#PACKET_MULTICAST
 2

	)

38 
	#PACKET_OTHERHOST
 3

	)

39 
	#PACKET_OUTGOING
 4

	)

40 
	#PACKET_LOOPBACK
 5

	)

41 
	#PACKET_FASTROUTE
 6

	)

45 
	#PACKET_ADD_MEMBERSHIP
 1

	)

46 
	#PACKET_DROP_MEMBERSHIP
 2

	)

47 
	#PACKET_RECV_OUTPUT
 3

	)

48 
	#PACKET_RX_RING
 5

	)

49 
	#PACKET_STATISTICS
 6

	)

50 
	#PACKET_COPY_THRESH
 7

	)

51 
	#PACKET_AUXDATA
 8

	)

52 
	#PACKET_ORIGDEV
 9

	)

53 
	#PACKET_VERSION
 10

	)

54 
	#PACKET_HDRLEN
 11

	)

55 
	#PACKET_RESERVE
 12

	)

56 
	#PACKET_TX_RING
 13

	)

57 
	#PACKET_LOSS
 14

	)

58 
	#PACKET_VNET_HDR
 15

	)

59 
	#PACKET_TX_TIMESTAMP
 16

	)

60 
	#PACKET_TIMESTAMP
 17

	)

61 
	#PACKET_FANOUT
 18

	)

62 
	#PACKET_TX_HAS_OFF
 19

	)

63 
	#PACKET_QDISC_BYPASS
 20

	)

64 
	#PACKET_ROLLOVER_STATS
 21

	)

65 
	#PACKET_FANOUT_DATA
 22

	)

67 
	s∑ckë_mªq


69 
	mmr_ifödex
;

70 
	mmr_ty≥
;

71 
	mmr_Æí
;

72 
	mmr_addªss
[8];

75 
	#PACKET_MR_MULTICAST
 0

	)

76 
	#PACKET_MR_PROMISC
 1

	)

77 
	#PACKET_MR_ALLMULTI
 2

	)

78 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200)

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200)

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200)

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200)

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100)

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100)

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200)

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200)

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200)

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200)

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400)

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200)

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200)

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200)

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

120 
	#BIO_NOCLOSE
 0x00

	)

121 
	#BIO_CLOSE
 0x01

	)

126 
	#BIO_CTRL_RESET
 1

	)

127 
	#BIO_CTRL_EOF
 2

	)

128 
	#BIO_CTRL_INFO
 3

	)

129 
	#BIO_CTRL_SET
 4

	)

130 
	#BIO_CTRL_GET
 5

	)

131 
	#BIO_CTRL_PUSH
 6

	)

132 
	#BIO_CTRL_POP
 7

	)

133 
	#BIO_CTRL_GET_CLOSE
 8

	)

134 
	#BIO_CTRL_SET_CLOSE
 9

	)

135 
	#BIO_CTRL_PENDING
 10

	)

136 
	#BIO_CTRL_FLUSH
 11

	)

137 
	#BIO_CTRL_DUP
 12

	)

138 
	#BIO_CTRL_WPENDING
 13

	)

140 
	#BIO_CTRL_SET_CALLBACK
 14

	)

141 
	#BIO_CTRL_GET_CALLBACK
 15

	)

143 
	#BIO_CTRL_SET_FILENAME
 30

	)

146 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

147 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

149 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

150 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

151 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

152 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

154 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

155 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

158 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

161 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

162 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

163 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

164 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

168 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

177 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

179 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

181 #i‚de‡
OPENSSL_NO_SCTP


183 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

184 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

185 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

186 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

187 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

188 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

189 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

191 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

192 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

193 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

197 
	#BIO_FP_READ
 0x02

	)

198 
	#BIO_FP_WRITE
 0x04

	)

199 
	#BIO_FP_APPEND
 0x08

	)

200 
	#BIO_FP_TEXT
 0x10

	)

202 
	#BIO_FLAGS_READ
 0x01

	)

203 
	#BIO_FLAGS_WRITE
 0x02

	)

204 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

205 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

206 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

207 #i‚de‡
BIO_FLAGS_UPLINK


212 
	#BIO_FLAGS_UPLINK
 0

	)

216 
	#BIO_GHBN_CTRL_HITS
 1

	)

217 
	#BIO_GHBN_CTRL_MISSES
 2

	)

218 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

219 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

220 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

230 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

236 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

238 
bio_°
 
	tBIO
;

240 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

241 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

242 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

244 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

245 
	#BIO_£t_ªåy_•ecül
(
b
) \

246 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

247 
	#BIO_£t_ªåy_ªad
(
b
) \

248 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

249 
	#BIO_£t_ªåy_wrôe
(
b
) \

250 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

253 
	#BIO_˛ór_ªåy_Êags
(
b
) \

254 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

255 
	#BIO_gë_ªåy_Êags
(
b
) \

256 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

259 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

260 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

261 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

262 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

263 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

275 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

277 
	#BIO_RR_CONNECT
 0x02

	)

279 
	#BIO_RR_ACCEPT
 0x03

	)

282 
	#BIO_CB_FREE
 0x01

	)

283 
	#BIO_CB_READ
 0x02

	)

284 
	#BIO_CB_WRITE
 0x03

	)

285 
	#BIO_CB_PUTS
 0x04

	)

286 
	#BIO_CB_GETS
 0x05

	)

287 
	#BIO_CB_CTRL
 0x06

	)

293 
	#BIO_CB_RETURN
 0x80

	)

294 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

295 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

296 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

298 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *, , const *,

300 
BIO_£t_ˇŒback
(
BIO
 *
b
,

301 (*
ˇŒback
Ë(
bio_°
 *, , const *,

303 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

304 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

306 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

307 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

309 
	tbio_öfo_cb
 (
	tbio_°
 *, , const *, , ,

312 
	sbio_mëhod_°
 {

313 
ty≥
;

314 c⁄° *
«me
;

315 (*
bwrôe
Ë(
BIO
 *, const *, );

316 (*
bªad
Ë(
BIO
 *, *, );

317 (*
bputs
Ë(
BIO
 *, const *);

318 (*
bgës
Ë(
BIO
 *, *, );

319 (*
˘æ
Ë(
BIO
 *, , , *);

320 (*
¸óã
Ë(
BIO
 *);

321 (*
de°roy
Ë(
BIO
 *);

322 (*
ˇŒback_˘æ
Ë(
BIO
 *, , 
bio_öfo_cb
 *);

323 } 
	tBIO_METHOD
;

325 
	sbio_°
 {

326 
BIO_METHOD
 *
mëhod
;

328 (*
ˇŒback
Ë(
bio_°
 *, , const *, , , );

329 *
cb_¨g
;

330 
öô
;

331 
shutdown
;

332 
Êags
;

333 
ªåy_ªas⁄
;

334 
num
;

335 *
±r
;

336 
bio_°
 *
√xt_bio
;

337 
bio_°
 *
¥ev_bio
;

338 
ª„ªn˚s
;

339 
num_ªad
;

340 
num_wrôe
;

341 
CRYPTO_EX_DATA
 
ex_d©a
;

344 
DECLARE_STACK_OF
(
BIO
)

346 
	sbio_f_buf„r_˘x_°ru˘
 {

359 
ibuf_size
;

360 
obuf_size
;

361 *
ibuf
;

362 
ibuf_Àn
;

363 
ibuf_off
;

364 *
obuf
;

365 
obuf_Àn
;

366 
obuf_off
;

367 } 
	tBIO_F_BUFFER_CTX
;

370 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

371 *
	t∑rg
);

373 #i‚de‡
OPENSSL_NO_SCTP


375 
	sbio_dgøm_s˘p_¢döfo
 {

376 
uöt16_t
 
¢d_sid
;

377 
uöt16_t
 
¢d_Êags
;

378 
uöt32_t
 
¢d_µid
;

379 
uöt32_t
 
¢d_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_rcvöfo
 {

383 
uöt16_t
 
rcv_sid
;

384 
uöt16_t
 
rcv_s¢
;

385 
uöt16_t
 
rcv_Êags
;

386 
uöt32_t
 
rcv_µid
;

387 
uöt32_t
 
rcv_t¢
;

388 
uöt32_t
 
rcv_cumt¢
;

389 
uöt32_t
 
rcv_c⁄ãxt
;

392 
	sbio_dgøm_s˘p_¥öfo
 {

393 
uöt16_t
 
¥_pﬁicy
;

394 
uöt32_t
 
¥_vÆue
;

399 
	#BIO_CONN_S_BEFORE
 1

	)

400 
	#BIO_CONN_S_GET_IP
 2

	)

401 
	#BIO_CONN_S_GET_PORT
 3

	)

402 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

403 
	#BIO_CONN_S_CONNECT
 5

	)

404 
	#BIO_CONN_S_OK
 6

	)

405 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

406 
	#BIO_CONN_S_NBIO
 8

	)

411 
	#BIO_C_SET_CONNECT
 100

	)

412 
	#BIO_C_DO_STATE_MACHINE
 101

	)

413 
	#BIO_C_SET_NBIO
 102

	)

414 
	#BIO_C_SET_PROXY_PARAM
 103

	)

415 
	#BIO_C_SET_FD
 104

	)

416 
	#BIO_C_GET_FD
 105

	)

417 
	#BIO_C_SET_FILE_PTR
 106

	)

418 
	#BIO_C_GET_FILE_PTR
 107

	)

419 
	#BIO_C_SET_FILENAME
 108

	)

420 
	#BIO_C_SET_SSL
 109

	)

421 
	#BIO_C_GET_SSL
 110

	)

422 
	#BIO_C_SET_MD
 111

	)

423 
	#BIO_C_GET_MD
 112

	)

424 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

425 
	#BIO_C_SET_BUF_MEM
 114

	)

426 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

427 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

428 
	#BIO_C_SET_BUFF_SIZE
 117

	)

429 
	#BIO_C_SET_ACCEPT
 118

	)

430 
	#BIO_C_SSL_MODE
 119

	)

431 
	#BIO_C_GET_MD_CTX
 120

	)

432 
	#BIO_C_GET_PROXY_PARAM
 121

	)

433 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

434 
	#BIO_C_GET_CONNECT
 123

	)

435 
	#BIO_C_GET_ACCEPT
 124

	)

436 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

437 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

438 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

439 
	#BIO_C_FILE_SEEK
 128

	)

440 
	#BIO_C_GET_CIPHER_CTX
 129

	)

441 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

443 
	#BIO_C_SET_BIND_MODE
 131

	)

444 
	#BIO_C_GET_BIND_MODE
 132

	)

445 
	#BIO_C_FILE_TELL
 133

	)

446 
	#BIO_C_GET_SOCKS
 134

	)

447 
	#BIO_C_SET_SOCKS
 135

	)

449 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

450 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

451 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

452 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

453 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

454 
	#BIO_C_GET_READ_REQUEST
 141

	)

455 
	#BIO_C_SHUTDOWN_WR
 142

	)

456 
	#BIO_C_NREAD0
 143

	)

457 
	#BIO_C_NREAD
 144

	)

458 
	#BIO_C_NWRITE0
 145

	)

459 
	#BIO_C_NWRITE
 146

	)

460 
	#BIO_C_RESET_READ_REQUEST
 147

	)

461 
	#BIO_C_SET_MD_CTX
 148

	)

463 
	#BIO_C_SET_PREFIX
 149

	)

464 
	#BIO_C_GET_PREFIX
 150

	)

465 
	#BIO_C_SET_SUFFIX
 151

	)

466 
	#BIO_C_GET_SUFFIX
 152

	)

468 
	#BIO_C_SET_EX_ARG
 153

	)

469 
	#BIO_C_GET_EX_ARG
 154

	)

471 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

472 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

475 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

476 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

477 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

478 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

479 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

480 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

481 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

482 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

484 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

487 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

488 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

490 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

491 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

493 
	#BIO_BIND_NORMAL
 0

	)

494 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

495 
	#BIO_BIND_REUSEADDR
 2

	)

496 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

497 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

500 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

501 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

502 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

505 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

506 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

508 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

510 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

511 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

512 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

514 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

515 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

516 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

517 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

520 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

521 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

524 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

525 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

528 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

529 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

535 #ifde‡
CONST_STRICT


540 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

542 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

543 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

545 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

546 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

547 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

548 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

549 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

550 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

558 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

559 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

560 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

561 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

562 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

563 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

564 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

565 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

566 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

571 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

572 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

573 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

574 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

575 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

578 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

579 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

580 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

581 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

582 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

585 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

587 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

588 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

589 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

590 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

591 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

592 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

594 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

595 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

596 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

597 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

598 
cbp
)

	)

599 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

602 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

605 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

606 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

607 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

608 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

609 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

611 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

612 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

613 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

614 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

615 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

618 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

619 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

620 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

621 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

622 
	#BIO_dgøm_ªcv_timedout
(
b
) \

623 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

624 
	#BIO_dgøm_£nd_timedout
(
b
) \

625 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

626 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

627 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

628 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

629 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

630 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

631 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

636 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

637 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

638 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

639 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

640 
BIO_numbî_ªad
(
BIO
 *
bio
);

641 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

644 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

645 
a¢1_ps_func
 *
¥efix_‰ì
);

646 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

647 
a¢1_ps_func
 **
µªfix_‰ì
);

648 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

649 
a¢1_ps_func
 *
suffix_‰ì
);

650 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

651 
a¢1_ps_func
 **
psuffix_‰ì
);

653 #i‚de‡
OPENSSL_NO_FP_API


654 
BIO_METHOD
 *
BIO_s_fûe
();

655 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

656 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

657 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

659 
BIO
 *
BIO_√w
(
BIO_METHOD
 *
ty≥
);

660 
BIO_£t
(
BIO
 *
a
, 
BIO_METHOD
 *
ty≥
);

661 
BIO_‰ì
(
BIO
 *
a
);

662 
BIO_v‰ì
(
BIO
 *
a
);

663 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

664 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

665 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

666 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

667 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

668 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

669 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
,

670 (*
Â
Ë(
bio_°
 *, , const *, ,

672 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

673 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

674 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

675 
BIO
 *
BIO_p›
(BIO *
b
);

676 
BIO_‰ì_Æl
(
BIO
 *
a
);

677 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

678 
BIO
 *
BIO_√xt
(BIO *
b
);

679 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

680 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

681 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

683 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

684 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

685 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

686 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

688 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

689 
¨gl
, 
ªt
);

691 
BIO_METHOD
 *
BIO_s_mem
();

692 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

693 
BIO_METHOD
 *
BIO_s_sockë
();

694 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

695 
BIO_METHOD
 *
BIO_s_ac˚±
();

696 
BIO_METHOD
 *
BIO_s_fd
();

697 #i‚de‡
OPENSSL_SYS_OS2


698 
BIO_METHOD
 *
BIO_s_log
();

700 
BIO_METHOD
 *
BIO_s_bio
();

701 
BIO_METHOD
 *
BIO_s_nuŒ
();

702 
BIO_METHOD
 *
BIO_f_nuŒ
();

703 
BIO_METHOD
 *
BIO_f_buf„r
();

704 #ifde‡
OPENSSL_SYS_VMS


705 
BIO_METHOD
 *
BIO_f_löebuf„r
();

707 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

708 #i‚de‡
OPENSSL_NO_DGRAM


709 
BIO_METHOD
 *
BIO_s_d©agøm
();

710 #i‚de‡
OPENSSL_NO_SCTP


711 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

717 
BIO_sock_should_ªåy
(
i
);

718 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

719 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

721 
BIO_fd_should_ªåy
(
i
);

722 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

723 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

724 *
u
, c⁄° *
s
, 
Àn
);

725 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

726 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

727 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

728 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

729 #i‚de‡
OPENSSL_NO_FP_API


730 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

731 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

733 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

734 
d©Æí
);

736 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

746 
BIO_sock_îr‹
(
sock
);

747 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

748 
BIO_sockë_nbio
(
fd
, 
mode
);

749 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

750 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

751 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
);

752 
BIO_ac˚±
(
sock
, **
ù_p‹t
);

753 
BIO_sock_öô
();

754 
BIO_sock_˛ónup
();

755 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

757 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

758 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

759 #i‚de‡
OPENSSL_NO_SCTP


760 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

761 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

762 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

763 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

765 *
c⁄ãxt
,

766 *
buf
),

767 *
c⁄ãxt
);

768 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

769 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

771 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

772 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

773 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

775 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

776 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

783 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

789 #ifde‡
__GNUC__


790 
	#__bio_h__©å__
 
__©åibuã__


	)

792 
	#__bio_h__©å__
(
x
)

	)

794 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

795 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 3)));

796 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

797 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 0)));

798 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

799 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 4)));

800 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

801 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 0)));

802 #unde‡
__bio_h__©å__


809 
ERR_lﬂd_BIO_°rögs
();

814 
	#BIO_F_ACPT_STATE
 100

	)

815 
	#BIO_F_BIO_ACCEPT
 101

	)

816 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

817 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

818 
	#BIO_F_BIO_CTRL
 103

	)

819 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

820 
	#BIO_F_BIO_GETS
 104

	)

821 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

822 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

823 
	#BIO_F_BIO_GET_PORT
 107

	)

824 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

825 
	#BIO_F_BIO_NEW
 108

	)

826 
	#BIO_F_BIO_NEW_FILE
 109

	)

827 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

828 
	#BIO_F_BIO_NREAD
 123

	)

829 
	#BIO_F_BIO_NREAD0
 124

	)

830 
	#BIO_F_BIO_NWRITE
 125

	)

831 
	#BIO_F_BIO_NWRITE0
 122

	)

832 
	#BIO_F_BIO_PUTS
 110

	)

833 
	#BIO_F_BIO_READ
 111

	)

834 
	#BIO_F_BIO_SOCK_INIT
 112

	)

835 
	#BIO_F_BIO_WRITE
 113

	)

836 
	#BIO_F_BUFFER_CTRL
 114

	)

837 
	#BIO_F_CONN_CTRL
 127

	)

838 
	#BIO_F_CONN_STATE
 115

	)

839 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

840 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

841 
	#BIO_F_FILE_CTRL
 116

	)

842 
	#BIO_F_FILE_READ
 130

	)

843 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

844 
	#BIO_F_MEM_READ
 128

	)

845 
	#BIO_F_MEM_WRITE
 117

	)

846 
	#BIO_F_SSL_NEW
 118

	)

847 
	#BIO_F_WSASTARTUP
 119

	)

850 
	#BIO_R_ACCEPT_ERROR
 100

	)

851 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

852 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

853 
	#BIO_R_BROKEN_PIPE
 124

	)

854 
	#BIO_R_CONNECT_ERROR
 103

	)

855 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

856 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

857 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

858 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

859 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

860 
	#BIO_R_INVALID_ARGUMENT
 125

	)

861 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

862 
	#BIO_R_IN_USE
 123

	)

863 
	#BIO_R_KEEPALIVE
 109

	)

864 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

865 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

866 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

867 
	#BIO_R_NO_PORT_DEFINED
 113

	)

868 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

869 
	#BIO_R_NO_SUCH_FILE
 128

	)

870 
	#BIO_R_NULL_PARAMETER
 115

	)

871 
	#BIO_R_TAG_MISMATCH
 116

	)

872 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

873 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

874 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

875 
	#BIO_R_UNINITIALIZED
 120

	)

876 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

877 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

878 
	#BIO_R_WSASTARTUP
 122

	)

880 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


75 *
£˘i⁄
;

76 *
«me
;

77 *
vÆue
;

78 } 
	tCONF_VALUE
;

80 
DECLARE_STACK_OF
(
CONF_VALUE
)

81 
DECLARE_LHASH_OF
(
CONF_VALUE
);

83 
c⁄f_°
;

84 
c⁄f_mëhod_°
;

85 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

87 
	sc⁄f_mëhod_°
 {

88 c⁄° *
«me
;

89 
CONF
 *(*
¸óã
Ë(
CONF_METHOD
 *
mëh
);

90 (*
öô
Ë(
CONF
 *
c⁄f
);

91 (*
de°roy
Ë(
CONF
 *
c⁄f
);

92 (*
de°roy_d©a
Ë(
CONF
 *
c⁄f
);

93 (*
lﬂd_bio
Ë(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

94 (*
dump
Ë(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

95 (*
is_numbî
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

96 (*
to_öt
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

97 (*
lﬂd
Ë(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

102 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

103 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

105 
DECLARE_STACK_OF
(
CONF_MODULE
)

106 
DECLARE_STACK_OF
(
CONF_IMODULE
)

109 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

110 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

112 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

113 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

114 
	#CONF_MFLAGS_SILENT
 0x4

	)

115 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

116 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

117 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

119 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

120 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

121 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

122 *
ñöe
);

123 #i‚de‡
OPENSSL_NO_FP_API


124 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

125 *
ñöe
);

127 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

128 *
ñöe
);

129 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

130 c⁄° *
£˘i⁄
);

131 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

132 c⁄° *
«me
);

133 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

134 c⁄° *
«me
);

135 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

136 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

137 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

139 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

140 
OPENSSL_no_c⁄fig
();

147 
	sc⁄f_°
 {

148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

158 
CONF_METHOD
 *
NCONF_XML
();

160 
NCONF_‰ì
(
CONF
 *
c⁄f
);

161 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

163 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

164 #i‚de‡
OPENSSL_NO_FP_API


165 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

167 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

168 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

169 c⁄° *
£˘i⁄
);

170 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

171 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

172 *
ªsu…
);

173 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

174 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

178 
NCONF_gë_numbî
(
CONF
 *
c⁄f
, *
group
, *
«me
);

180 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

185 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

188 
Êags
);

189 
CONF_moduÀs_u∆ﬂd
(
Æl
);

190 
CONF_moduÀs_föish
();

191 
CONF_moduÀs_‰ì
();

192 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

193 
c⁄f_föish_func
 *
ffunc
);

195 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

196 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

197 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

199 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

200 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

201 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

202 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

203 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

205 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

207 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

208 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

209 *
¨g
);

211 
OPENSSL_lﬂd_buûtö_moduÀs
();

218 
ERR_lﬂd_CONF_°rögs
();

223 
	#CONF_F_CONF_DUMP_FP
 104

	)

224 
	#CONF_F_CONF_LOAD
 100

	)

225 
	#CONF_F_CONF_LOAD_BIO
 102

	)

226 
	#CONF_F_CONF_LOAD_FP
 103

	)

227 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

228 
	#CONF_F_CONF_PARSE_LIST
 119

	)

229 
	#CONF_F_DEF_LOAD
 120

	)

230 
	#CONF_F_DEF_LOAD_BIO
 121

	)

231 
	#CONF_F_MODULE_INIT
 115

	)

232 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

233 
	#CONF_F_MODULE_RUN
 118

	)

234 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

235 
	#CONF_F_NCONF_DUMP_FP
 106

	)

236 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

237 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

238 
	#CONF_F_NCONF_GET_SECTION
 108

	)

239 
	#CONF_F_NCONF_GET_STRING
 109

	)

240 
	#CONF_F_NCONF_LOAD
 113

	)

241 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

242 
	#CONF_F_NCONF_LOAD_FP
 114

	)

243 
	#CONF_F_NCONF_NEW
 111

	)

244 
	#CONF_F_STR_COPY
 101

	)

247 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

248 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

249 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

250 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

251 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

252 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

253 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

254 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

255 
	#CONF_R_NO_CONF
 105

	)

256 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

257 
	#CONF_R_NO_SECTION
 107

	)

258 
	#CONF_R_NO_SUCH_FILE
 114

	)

259 
	#CONF_R_NO_VALUE
 108

	)

260 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

261 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

262 
	#CONF_R_VARIABLE_EXPANSION_TOO_LONG
 116

	)

263 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

265 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engine.h

65 #i‚de‡
HEADER_ENGINE_H


66 
	#HEADER_ENGINE_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

70 #ifde‡
OPENSSL_NO_ENGINE


71 #îr‹ 
ENGINE
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_DEPRECATED


75 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_NO_RSA


77 
	~<›ís¶/rß.h
>

79 #i‚de‡
OPENSSL_NO_DSA


80 
	~<›ís¶/dß.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

85 #i‚de‡
OPENSSL_NO_ECDH


86 
	~<›ís¶/ecdh.h
>

88 #i‚de‡
OPENSSL_NO_ECDSA


89 
	~<›ís¶/ecdß.h
>

91 
	~<›ís¶/ønd.h
>

92 
	~<›ís¶/ui.h
>

93 
	~<›ís¶/îr.h
>

96 
	~<›ís¶/os¶_typ.h
>

97 
	~<›ís¶/symhacks.h
>

99 
	~<›ís¶/x509.h
>

101 #ifde‡ 
__˝lu•lus


109 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

110 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

111 
	#ENGINE_METHOD_DH
 ()0x0004

	)

112 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

113 
	#ENGINE_METHOD_ECDH
 ()0x0010

	)

114 
	#ENGINE_METHOD_ECDSA
 ()0x0020

	)

115 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

116 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

117 
	#ENGINE_METHOD_STORE
 ()0x0100

	)

118 
	#ENGINE_METHOD_PKEY_METHS
 ()0x0200

	)

119 
	#ENGINE_METHOD_PKEY_ASN1_METHS
 ()0x0400

	)

121 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

122 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

130 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

142 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

154 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

162 
	#ENGINE_FLAGS_NO_REGISTER_ALL
 ()0x0008

	)

177 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

182 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

187 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

193 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

212 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

213 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

214 
	#ENGINE_CTRL_HUP
 3

	)

217 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

218 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

222 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

226 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

250 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

255 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

260 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

265 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

274 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

275 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

277 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

278 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

284 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

290 
	#ENGINE_CMD_BASE
 200

	)

301 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

307 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

323 
	sENGINE_CMD_DEFN_°
 {

324 
cmd_num
;

325 c⁄° *
cmd_«me
;

326 c⁄° *
cmd_desc
;

327 
cmd_Êags
;

328 } 
	tENGINE_CMD_DEFN
;

331 (*
ENGINE_GEN_FUNC_PTR
) ();

333 (*
ENGINE_GEN_INT_FUNC_PTR
Ë(
	tENGINE
 *);

335 (*
ENGINE_CTRL_FUNC_PTR
Ë(
	tENGINE
 *, , , *,

336 (*
	tf
) ());

338 
EVP_PKEY
 *(*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

339 
	tUI_METHOD
 *
	tui_mëhod
,

340 *
	tˇŒback_d©a
);

341 (*
ENGINE_SSL_CLIENT_CERT_PTR
Ë(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

342 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
,

343 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

344 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
,

345 
	tUI_METHOD
 *
	tui_mëhod
,

346 *
	tˇŒback_d©a
);

362 (*
ENGINE_CIPHERS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **,

364 (*
ENGINE_DIGESTS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **,

366 (*
ENGINE_PKEY_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_METHOD
 **,

368 (*
ENGINE_PKEY_ASN1_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_ASN1_METHOD
 **,

383 
ENGINE
 *
ENGINE_gë_fú°
();

384 
ENGINE
 *
ENGINE_gë_œ°
();

386 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

387 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

389 
ENGINE_add
(
ENGINE
 *
e
);

391 
ENGINE_ªmove
(
ENGINE
 *
e
);

393 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

395 
ENGINE_lﬂd_›ís¶
();

396 
ENGINE_lﬂd_dy«mic
();

397 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


398 
ENGINE_lﬂd_4758cˇ
();

399 
ENGINE_lﬂd_´p
();

400 
ENGINE_lﬂd_©Æœ
();

401 
ENGINE_lﬂd_chû
();

402 
ENGINE_lﬂd_cswi·
();

403 
ENGINE_lﬂd_nur⁄
();

404 
ENGINE_lﬂd_suªw¨e
();

405 
ENGINE_lﬂd_ub£c
();

406 
ENGINE_lﬂd_∑dlock
();

407 
ENGINE_lﬂd_ˇpi
();

408 #i‚de‡
OPENSSL_NO_GMP


409 
ENGINE_lﬂd_gmp
();

411 #i‚de‡
OPENSSL_NO_GOST


412 
ENGINE_lﬂd_go°
();

415 
ENGINE_lﬂd_¸y±odev
();

416 
ENGINE_lﬂd_rdønd
();

417 
ENGINE_lﬂd_buûtö_ígöes
();

423 
ENGINE_gë_èbÀ_Êags
();

424 
ENGINE_£t_èbÀ_Êags
(
Êags
);

435 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

436 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

437 
ENGINE_ªgi°î_Æl_RSA
();

439 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

440 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

441 
ENGINE_ªgi°î_Æl_DSA
();

443 
ENGINE_ªgi°î_ECDH
(
ENGINE
 *
e
);

444 
ENGINE_uƒegi°î_ECDH
(
ENGINE
 *
e
);

445 
ENGINE_ªgi°î_Æl_ECDH
();

447 
ENGINE_ªgi°î_ECDSA
(
ENGINE
 *
e
);

448 
ENGINE_uƒegi°î_ECDSA
(
ENGINE
 *
e
);

449 
ENGINE_ªgi°î_Æl_ECDSA
();

451 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

452 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

453 
ENGINE_ªgi°î_Æl_DH
();

455 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

456 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

457 
ENGINE_ªgi°î_Æl_RAND
();

459 
ENGINE_ªgi°î_STORE
(
ENGINE
 *
e
);

460 
ENGINE_uƒegi°î_STORE
(
ENGINE
 *
e
);

461 
ENGINE_ªgi°î_Æl_STORE
();

463 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

464 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

465 
ENGINE_ªgi°î_Æl_cùhîs
();

467 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

468 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

469 
ENGINE_ªgi°î_Æl_dige°s
();

471 
ENGINE_ªgi°î_pkey_mëhs
(
ENGINE
 *
e
);

472 
ENGINE_uƒegi°î_pkey_mëhs
(
ENGINE
 *
e
);

473 
ENGINE_ªgi°î_Æl_pkey_mëhs
();

475 
ENGINE_ªgi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

476 
ENGINE_uƒegi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

477 
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
();

485 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

486 
ENGINE_ªgi°î_Æl_com∂ëe
();

498 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
) ());

506 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

514 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

515 
i
, *
p
, (*
f
Ë(), 
cmd_›ti⁄Æ
);

539 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

540 
cmd_›ti⁄Æ
);

550 
ENGINE
 *
ENGINE_√w
();

551 
ENGINE_‰ì
(
ENGINE
 *
e
);

552 
ENGINE_up_ªf
(
ENGINE
 *
e
);

553 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

554 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

555 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

556 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

557 
ENGINE_£t_ECDH
(
ENGINE
 *
e
, c⁄° 
ECDH_METHOD
 *
ecdh_mëh
);

558 
ENGINE_£t_ECDSA
(
ENGINE
 *
e
, c⁄° 
ECDSA_METHOD
 *
ecdß_mëh
);

559 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

560 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

561 
ENGINE_£t_STORE
(
ENGINE
 *
e
, c⁄° 
STORE_METHOD
 *
°‹e_mëh
);

562 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

563 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

564 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

565 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

566 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
,

567 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

568 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

569 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

570 
ENGINE_SSL_CLIENT_CERT_PTR


571 
lﬂds¶_f
);

572 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

573 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

574 
ENGINE_£t_pkey_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_METHS_PTR
 
f
);

575 
ENGINE_£t_pkey_a¢1_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_ASN1_METHS_PTR
 
f
);

576 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

577 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

579 
ENGINE_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

580 
CRYPTO_EX_dup
 *
dup_func
,

581 
CRYPTO_EX_‰ì
 *
‰ì_func
);

582 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

583 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

591 
ENGINE_˛ónup
();

599 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

600 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

601 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

602 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

603 c⁄° 
ECDH_METHOD
 *
ENGINE_gë_ECDH
(c⁄° 
ENGINE
 *
e
);

604 c⁄° 
ECDSA_METHOD
 *
ENGINE_gë_ECDSA
(c⁄° 
ENGINE
 *
e
);

605 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

606 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

607 c⁄° 
STORE_METHOD
 *
ENGINE_gë_STORE
(c⁄° 
ENGINE
 *
e
);

608 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

609 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

610 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

611 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

612 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

613 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

614 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE


615 *
e
);

616 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

617 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

618 
ENGINE_PKEY_METHS_PTR
 
ENGINE_gë_pkey_mëhs
(c⁄° 
ENGINE
 *
e
);

619 
ENGINE_PKEY_ASN1_METHS_PTR
 
ENGINE_gë_pkey_a¢1_mëhs
(c⁄° 
ENGINE
 *
e
);

620 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

621 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

622 c⁄° 
EVP_PKEY_METHOD
 *
ENGINE_gë_pkey_mëh
(
ENGINE
 *
e
, 
nid
);

623 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh
(
ENGINE
 *
e
, 
nid
);

624 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh_°r
(
ENGINE
 *
e
,

625 c⁄° *
°r
,

626 
Àn
);

627 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_pkey_a¢1_föd_°r
(
ENGINE
 **
≥
,

628 c⁄° *
°r
,

629 
Àn
);

630 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

631 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

651 
ENGINE_öô
(
ENGINE
 *
e
);

657 
ENGINE_föish
(
ENGINE
 *
e
);

664 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

665 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

666 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

667 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

668 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

669 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
,

670 
EVP_PKEY
 **
µkey
, 
STACK_OF
(
X509
Ë**
pŸhî
,

671 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

679 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

681 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

682 
ENGINE
 *
ENGINE_gë_deÁu…_ECDH
();

683 
ENGINE
 *
ENGINE_gë_deÁu…_ECDSA
();

684 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

685 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

690 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

691 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

692 
ENGINE
 *
ENGINE_gë_pkey_mëh_ígöe
(
nid
);

693 
ENGINE
 *
ENGINE_gë_pkey_a¢1_mëh_ígöe
(
nid
);

701 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

702 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

704 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

705 
ENGINE_£t_deÁu…_ECDH
(
ENGINE
 *
e
);

706 
ENGINE_£t_deÁu…_ECDSA
(
ENGINE
 *
e
);

707 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

708 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

709 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

710 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

711 
ENGINE_£t_deÁu…_pkey_mëhs
(
ENGINE
 *
e
);

712 
ENGINE_£t_deÁu…_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

721 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

723 
ENGINE_add_c⁄f_moduÀ
();

733 
	#OSSL_DYNAMIC_VERSION
 ()0x00020000

	)

738 
	#OSSL_DYNAMIC_OLDEST
 ()0x00020000

	)

751 *(*
	tdyn_MEM_mÆloc_cb
Ë(
	tsize_t
);

752 *(*
	tdyn_MEM_ªÆloc_cb
Ë(*, 
	tsize_t
);

753 (*
dyn_MEM_‰ì_cb
) (*);

754 
	s°_dy«mic_MEM_‚s
 {

755 
dyn_MEM_mÆloc_cb
 
mÆloc_cb
;

756 
dyn_MEM_ªÆloc_cb
 
ªÆloc_cb
;

757 
dyn_MEM_‰ì_cb
 
‰ì_cb
;

758 } 
	tdy«mic_MEM_‚s
;

763 (*
dyn_lock_lockög_cb
) (, , const *, );

764 (*
dyn_lock_add_lock_cb
) (*, , , const *, );

765 
CRYPTO_dy∆ock_vÆue
 *(*
	tdyn_dy∆ock_¸óã_cb
) (const *,

767 (*
dyn_dy∆ock_lock_cb
Ë(, 
	tCRYPTO_dy∆ock_vÆue
 *,

769 (*
dyn_dy∆ock_de°roy_cb
Ë(
	tCRYPTO_dy∆ock_vÆue
 *,

771 
	s°_dy«mic_LOCK_‚s
 {

772 
dyn_lock_lockög_cb
 
lock_lockög_cb
;

773 
dyn_lock_add_lock_cb
 
lock_add_lock_cb
;

774 
dyn_dy∆ock_¸óã_cb
 
dy∆ock_¸óã_cb
;

775 
dyn_dy∆ock_lock_cb
 
dy∆ock_lock_cb
;

776 
dyn_dy∆ock_de°roy_cb
 
dy∆ock_de°roy_cb
;

777 } 
	tdy«mic_LOCK_‚s
;

779 
	s°_dy«mic_‚s
 {

780 *
°©ic_°©e
;

781 c⁄° 
ERR_FNS
 *
îr_‚s
;

782 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
ex_d©a_‚s
;

783 
dy«mic_MEM_‚s
 
mem_‚s
;

784 
dy«mic_LOCK_‚s
 
lock_‚s
;

785 } 
	tdy«mic_‚s
;

799 (*
	tdy«mic_v_check_‚
Ë(
	tos¶_vîsi⁄
);

800 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

801 
OPENSSL_EXPORT
 
	`v_check
(
v
); \

802 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

803 if(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

804  0; }

	)

824 (*
dy«mic_böd_ígöe
Ë(
	tENGINE
 *
	te
, c⁄° *
	tid
,

825 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

826 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

827 
OPENSSL_EXPORT
 \

828 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
); \

829 
OPENSSL_EXPORT
 \

830 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

831 if(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

832 if(!
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_cb
, \

833 
‚s
->
mem_‚s
.
ªÆloc_cb
, fns->mem_‚s.
‰ì_cb
)) \

835 
	`CRYPTO_£t_lockög_ˇŒback
(
‚s
->
lock_‚s
.
lock_lockög_cb
); \

836 
	`CRYPTO_£t_add_lock_ˇŒback
(
‚s
->
lock_‚s
.
lock_add_lock_cb
); \

837 
	`CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_¸óã_cb
); \

838 
	`CRYPTO_£t_dy∆ock_lock_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_lock_cb
); \

839 
	`CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_de°roy_cb
); \

840 if(!
	`CRYPTO_£t_ex_d©a_im∂emíèti⁄
(
‚s
->
ex_d©a_‚s
)) \

842 if(!
	`ERR_£t_im∂emíèti⁄
(
‚s
->
îr_‚s
))  0; \

843 
skù_cbs
: \

844 if(!
	`‚
(
e
,
id
))  0; \

845  1; }

	)

858 *
ENGINE_gë_°©ic_°©e
();

860 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
HAVE_CRYPTODEV
)

861 
ENGINE_£tup_bsd_¸y±odev
();

869 
ERR_lﬂd_ENGINE_°rögs
();

874 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

875 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

876 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

877 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

878 
	#ENGINE_F_ENGINE_ADD
 105

	)

879 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

880 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

881 
	#ENGINE_F_ENGINE_CTRL
 142

	)

882 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

883 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

884 
	#ENGINE_F_ENGINE_FINISH
 107

	)

885 
	#ENGINE_F_ENGINE_FREE_UTIL
 108

	)

886 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

887 
	#ENGINE_F_ENGINE_GET_DEFAULT_TYPE
 177

	)

888 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

889 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

890 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 193

	)

891 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 192

	)

892 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

893 
	#ENGINE_F_ENGINE_INIT
 119

	)

894 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

895 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

896 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

897 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

898 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 194

	)

899 
	#ENGINE_F_ENGINE_NEW
 122

	)

900 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

901 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

902 
	#ENGINE_F_ENGINE_SET_DEFAULT_TYPE
 126

	)

903 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

904 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

905 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

906 
	#ENGINE_F_ENGINE_UNLOAD_KEY
 152

	)

907 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

908 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

909 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

910 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

911 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

912 
	#ENGINE_F_LOG_MESSAGE
 141

	)

915 
	#ENGINE_R_ALREADY_LOADED
 100

	)

916 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

917 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

918 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

919 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

920 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

921 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

922 
	#ENGINE_R_DH_NOT_IMPLEMENTED
 139

	)

923 
	#ENGINE_R_DSA_NOT_IMPLEMENTED
 140

	)

924 
	#ENGINE_R_DSO_FAILURE
 104

	)

925 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

926 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

927 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 102

	)

928 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

929 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

930 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

931 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

932 
	#ENGINE_R_FINISH_FAILED
 106

	)

933 
	#ENGINE_R_GET_HANDLE_FAILED
 107

	)

934 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

935 
	#ENGINE_R_INIT_FAILED
 109

	)

936 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

937 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

938 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

939 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

940 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

941 
	#ENGINE_R_INVALID_STRING
 150

	)

942 
	#ENGINE_R_NOT_INITIALISED
 117

	)

943 
	#ENGINE_R_NOT_LOADED
 112

	)

944 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

945 
	#ENGINE_R_NO_INDEX
 144

	)

946 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

947 
	#ENGINE_R_NO_REFERENCE
 130

	)

948 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

949 
	#ENGINE_R_NO_UNLOAD_FUNCTION
 126

	)

950 
	#ENGINE_R_PROVIDE_PARAMETERS
 113

	)

951 
	#ENGINE_R_RSA_NOT_IMPLEMENTED
 141

	)

952 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

953 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

954 
	#ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD
 101

	)

955 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

957 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifde‡ 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

146 
	#ERR_FLAG_CLEAR
 0x02

	)

148 
	#ERR_NUM_ERRORS
 16

	)

149 
	sîr_°©e_°
 {

150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
, 
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

242 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

243 (((()
f
)&0xfffL)*0x1000)| \

244 (((()
r
)&0xfffL)))

	)

245 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

246 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

247 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

248 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

251 
	#SYS_F_FOPEN
 1

	)

252 
	#SYS_F_CONNECT
 2

	)

253 
	#SYS_F_GETSERVBYNAME
 3

	)

254 
	#SYS_F_SOCKET
 4

	)

255 
	#SYS_F_IOCTLSOCKET
 5

	)

256 
	#SYS_F_BIND
 6

	)

257 
	#SYS_F_LISTEN
 7

	)

258 
	#SYS_F_ACCEPT
 8

	)

259 
	#SYS_F_WSASTARTUP
 9

	)

260 
	#SYS_F_OPENDIR
 10

	)

261 
	#SYS_F_FREAD
 11

	)

262 
	#SYS_F_FFLUSH
 18

	)

265 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

266 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

267 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

268 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

269 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

270 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

271 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

272 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

273 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

274 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

275 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

276 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

277 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

278 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

279 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

280 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

281 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

282 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

283 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

284 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

285 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

286 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

287 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

288 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

289 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

290 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

291 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

292 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

293 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

295 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

296 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

297 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

298 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

299 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

300 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

303 
	#ERR_R_FATAL
 64

	)

304 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

305 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

306 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

307 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

308 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

315 
	sERR_°rög_d©a_°
 {

316 
îr‹
;

317 c⁄° *
°rög
;

318 } 
	tERR_STRING_DATA
;

320 
ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, c⁄° *
fûe
, 
löe
);

321 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

323 
ERR_gë_îr‹
();

324 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

325 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

326 c⁄° **
d©a
, *
Êags
);

327 
ERR_≥ek_îr‹
();

328 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

329 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

330 c⁄° **
d©a
, *
Êags
);

331 
ERR_≥ek_œ°_îr‹
();

332 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

333 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

334 c⁄° **
d©a
, *
Êags
);

335 
ERR_˛ór_îr‹
();

336 *
ERR_îr‹_°rög
(
e
, *
buf
);

337 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

338 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

339 c⁄° *
ERR_func_îr‹_°rög
(
e
);

340 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

341 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

342 *
u
);

343 #i‚de‡
OPENSSL_NO_FP_API


344 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

346 #i‚de‡
OPENSSL_NO_BIO


347 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

349 
ERR_add_îr‹_d©a
(
num
, ...);

350 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

351 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

352 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

353 
ERR_lﬂd_ERR_°rögs
();

354 
ERR_lﬂd_¸y±o_°rögs
();

355 
ERR_‰ì_°rögs
();

357 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

358 #i‚de‡
OPENSSL_NO_DEPRECATED


359 
ERR_ªmove_°©e
(
pid
);

361 
ERR_STATE
 *
ERR_gë_°©e
();

363 #i‚de‡
OPENSSL_NO_LHASH


364 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

365 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

366 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

369 
ERR_gë_√xt_îr‹_libøry
();

371 
ERR_£t_m¨k
();

372 
ERR_p›_to_m¨k
();

380 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

385 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

387 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°
 {

76 c⁄° 
EVP_MD
 *
md
;

77 
EVP_MD_CTX
 
md_˘x
;

78 
EVP_MD_CTX
 
i_˘x
;

79 
EVP_MD_CTX
 
o_˘x
;

80 
key_Àngth
;

81 
key
[
HMAC_MAX_MD_CBLOCK
];

82 } 
	tHMAC_CTX
;

84 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

86 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

87 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

90 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘x)

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
, c⁄° 
EVP_MD
 *
md
);

94 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

95 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

96 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

97 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

98 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

99 c⁄° *
d
, 
size_t
 
n
, *
md
,

100 *
md_Àn
);

101 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

103 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


178 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

181 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

183 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

185 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

186 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

188 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

190 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

195 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

196 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

197 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

198 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

199 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

200 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

201 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

202 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

204 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

205 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

206 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

207 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

208 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

209 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

211 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

214 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

215 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

216 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

217 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

219 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

220 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

222 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

223 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

224 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

228 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

229 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

230 
	#SSL_TXT_LOW
 "LOW"

	)

231 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

232 
	#SSL_TXT_HIGH
 "HIGH"

	)

233 
	#SSL_TXT_FIPS
 "FIPS"

	)

235 
	#SSL_TXT_kFZA
 "kFZA"

	)

236 
	#SSL_TXT_aFZA
 "aFZA"

	)

237 
	#SSL_TXT_eFZA
 "eFZA"

	)

238 
	#SSL_TXT_FZA
 "FZA"

	)

240 
	#SSL_TXT_aNULL
 "aNULL"

	)

241 
	#SSL_TXT_eNULL
 "eNULL"

	)

242 
	#SSL_TXT_NULL
 "NULL"

	)

244 
	#SSL_TXT_kRSA
 "kRSA"

	)

245 
	#SSL_TXT_kDHr
 "kDHr"

	)

246 
	#SSL_TXT_kDHd
 "kDHd"

	)

247 
	#SSL_TXT_kDH
 "kDH"

	)

248 
	#SSL_TXT_kEDH
 "kEDH"

	)

249 
	#SSL_TXT_kDHE
 "kDHE"

	)

250 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

251 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

252 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

253 
	#SSL_TXT_kECDH
 "kECDH"

	)

254 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

255 
	#SSL_TXT_kECDHE
 "kECDHE"

	)

256 
	#SSL_TXT_kPSK
 "kPSK"

	)

257 
	#SSL_TXT_kGOST
 "kGOST"

	)

258 
	#SSL_TXT_kSRP
 "kSRP"

	)

260 
	#SSL_TXT_aRSA
 "aRSA"

	)

261 
	#SSL_TXT_aDSS
 "aDSS"

	)

262 
	#SSL_TXT_aDH
 "aDH"

	)

263 
	#SSL_TXT_aECDH
 "aECDH"

	)

264 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

265 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

266 
	#SSL_TXT_aPSK
 "aPSK"

	)

267 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

268 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

269 
	#SSL_TXT_aGOST
 "aGOST"

	)

270 
	#SSL_TXT_aSRP
 "aSRP"

	)

272 
	#SSL_TXT_DSS
 "DSS"

	)

273 
	#SSL_TXT_DH
 "DH"

	)

274 
	#SSL_TXT_EDH
 "EDH"

	)

275 
	#SSL_TXT_DHE
 "DHE"

	)

276 
	#SSL_TXT_ADH
 "ADH"

	)

277 
	#SSL_TXT_RSA
 "RSA"

	)

278 
	#SSL_TXT_ECDH
 "ECDH"

	)

279 
	#SSL_TXT_EECDH
 "EECDH"

	)

280 
	#SSL_TXT_ECDHE
 "ECDHE"

	)

281 
	#SSL_TXT_AECDH
 "AECDH"

	)

282 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

283 
	#SSL_TXT_KRB5
 "KRB5"

	)

284 
	#SSL_TXT_PSK
 "PSK"

	)

285 
	#SSL_TXT_SRP
 "SRP"

	)

287 
	#SSL_TXT_DES
 "DES"

	)

288 
	#SSL_TXT_3DES
 "3DES"

	)

289 
	#SSL_TXT_RC4
 "RC4"

	)

290 
	#SSL_TXT_RC2
 "RC2"

	)

291 
	#SSL_TXT_IDEA
 "IDEA"

	)

292 
	#SSL_TXT_SEED
 "SEED"

	)

293 
	#SSL_TXT_AES128
 "AES128"

	)

294 
	#SSL_TXT_AES256
 "AES256"

	)

295 
	#SSL_TXT_AES
 "AES"

	)

296 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

297 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

298 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

299 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

301 
	#SSL_TXT_MD5
 "MD5"

	)

302 
	#SSL_TXT_SHA1
 "SHA1"

	)

303 
	#SSL_TXT_SHA
 "SHA"

	)

304 
	#SSL_TXT_GOST94
 "GOST94"

	)

305 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

306 
	#SSL_TXT_SHA256
 "SHA256"

	)

307 
	#SSL_TXT_SHA384
 "SHA384"

	)

309 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

310 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

311 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

312 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

313 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

315 
	#SSL_TXT_EXP
 "EXP"

	)

316 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

318 
	#SSL_TXT_ALL
 "ALL"

	)

334 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

335 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

341 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!EXPORT:!LOW:!aNULL:!eNULL:!SSLv2"

	)

350 
	#SSL_SENT_SHUTDOWN
 1

	)

351 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

353 #ifde‡
__˝lu•lus


357 #ifde‡ 
__˝lu•lus


361 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

362 
	#OPENSSL_NO_SSL2


	)

365 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

366 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

372 
s¶_°
 *
	ts¶_¸ock_°
;

373 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

374 
s¶_mëhod_°
 
	tSSL_METHOD
;

375 
s¶_cùhî_°
 
	tSSL_CIPHER
;

376 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

377 
és_sigÆgs_°
 
	tTLS_SIGALGS
;

378 
s¶_c⁄f_˘x_°
 
	tSSL_CONF_CTX
;

380 
DECLARE_STACK_OF
(
SSL_CIPHER
)

383 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°
 {

384 c⁄° *
«me
;

385 
id
;

386 } 
	tSRTP_PROTECTION_PROFILE
;

388 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

390 (*
és_£ssi⁄_tickë_ext_cb_‚
Ë(
	tSSL
 *
	ts
,

391 c⁄° *
	td©a
,

392 
	tÀn
, *
	t¨g
);

393 (*
és_£ssi⁄_£¸ë_cb_‚
Ë(
	tSSL
 *
	ts
, *
	t£¸ë
,

394 *
	t£¸ë_Àn
,

395 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
,

396 
	tSSL_CIPHER
 **
	tcùhî
, *
	t¨g
);

398 #i‚de‡
OPENSSL_NO_TLSEXT


402 (*
cu°om_ext_add_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

403 c⁄° **
	tout
,

404 
	tsize_t
 *
	touéí
, *
	tÆ
, *
	tadd_¨g
);

406 (*
cu°om_ext_‰ì_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

407 c⁄° *
	tout
, *
	tadd_¨g
);

409 (*
cu°om_ext_∑r£_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

410 c⁄° *
	tö
,

411 
	tsize_t
 
	töÀn
, *
	tÆ
, *
	t∑r£_¨g
);

415 #i‚de‡
OPENSSL_NO_SSL_INTERN


418 
	ss¶_cùhî_°
 {

419 
vÆid
;

420 c⁄° *
«me
;

421 
id
;

426 
Æg‹ôhm_mkey
;

427 
Æg‹ôhm_auth
;

428 
Æg‹ôhm_íc
;

429 
Æg‹ôhm_mac
;

430 
Æg‹ôhm_s¶
;

431 
Ægo_°ªngth
;

432 
Æg‹ôhm2
;

433 
°ªngth_bôs
;

434 
Æg_bôs
;

438 
	ss¶_mëhod_°
 {

439 
vîsi⁄
;

440 (*
s¶_√w
Ë(
SSL
 *
s
);

441 (*
s¶_˛ór
Ë(
SSL
 *
s
);

442 (*
s¶_‰ì
Ë(
SSL
 *
s
);

443 (*
s¶_ac˚±
Ë(
SSL
 *
s
);

444 (*
s¶_c⁄√˘
Ë(
SSL
 *
s
);

445 (*
s¶_ªad
Ë(
SSL
 *
s
, *
buf
, 
Àn
);

446 (*
s¶_≥ek
Ë(
SSL
 *
s
, *
buf
, 
Àn
);

447 (*
s¶_wrôe
Ë(
SSL
 *
s
, c⁄° *
buf
, 
Àn
);

448 (*
s¶_shutdown
Ë(
SSL
 *
s
);

449 (*
s¶_ª√gŸüã
Ë(
SSL
 *
s
);

450 (*
s¶_ª√gŸüã_check
Ë(
SSL
 *
s
);

451 (*
s¶_gë_mesßge
Ë(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

452 
max
, *
ok
);

453 (*
s¶_ªad_byãs
Ë(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

454 
≥ek
);

455 (*
s¶_wrôe_byãs
Ë(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

456 (*
s¶_di•©ch_Æît
Ë(
SSL
 *
s
);

457 (*
s¶_˘æ
Ë(
SSL
 *
s
, 
cmd
, 
œrg
, *
∑rg
);

458 (*
s¶_˘x_˘æ
Ë(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

459 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
Ë(c⁄° *
±r
);

460 (*
put_cùhî_by_ch¨
Ë(c⁄° 
SSL_CIPHER
 *
cùhî
, *
±r
);

461 (*
s¶_≥ndög
Ë(c⁄° 
SSL
 *
s
);

462 (*
num_cùhîs
) ();

463 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
Ë(
ncùhî
);

464 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
Ë(
vîsi⁄
);

465 (*
gë_timeout
) ();

466 
s¶3_íc_mëhod
 *
s¶3_íc
;

467 (*
s¶_vîsi⁄
) ();

468 (*
s¶_ˇŒback_˘æ
Ë(
SSL
 *
s
, 
cb_id
, (*
Â
) ());

469 (*
s¶_˘x_ˇŒback_˘æ
Ë(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
) ());

498 
	ss¶_£ssi⁄_°
 {

499 
s¶_vîsi⁄
;

502 
key_¨g_Àngth
;

503 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

504 
ma°î_key_Àngth
;

505 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

507 
£ssi⁄_id_Àngth
;

508 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

514 
sid_˘x_Àngth
;

515 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

516 #i‚de‡
OPENSSL_NO_KRB5


517 
krb5_˛õ¡_¥öc_Àn
;

518 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

520 #i‚de‡
OPENSSL_NO_PSK


521 *
psk_idítôy_höt
;

522 *
psk_idítôy
;

529 
nŸ_ªsumabÀ
;

531 
£ss_˚π_°
 *
£ss_˚π
;

538 
X509
 *
≥î
;

543 
vîify_ªsu…
;

544 
ª„ªn˚s
;

545 
timeout
;

546 
time
;

547 
com¥ess_mëh
;

548 c⁄° 
SSL_CIPHER
 *
cùhî
;

549 
cùhî_id
;

551 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

552 
CRYPTO_EX_DATA
 
ex_d©a
;

557 
s¶_£ssi⁄_°
 *
¥ev
, *
√xt
;

558 #i‚de‡
OPENSSL_NO_TLSEXT


559 *
é£xt_ho°«me
;

560 #i‚de‡
OPENSSL_NO_EC


561 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

562 *
é£xt_e˝oötf‹m©li°
;

563 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

564 *
é£xt_ñlùticcurvñi°
;

567 *
é£xt_tick
;

568 
size_t
 
é£xt_tickÀn
;

569 
é£xt_tick_li„time_höt
;

571 #i‚de‡
OPENSSL_NO_SRP


572 *
§p_u£∫ame
;

578 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

579 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

581 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

582 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

583 
	#SSL_OP_TLSEXT_PADDING
 0x00000010L

	)

584 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

585 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 0x00000040L

	)

586 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

587 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

588 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

591 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

593 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

603 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

609 
	#SSL_OP_ALL
 0x80000BFFL

	)

612 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

614 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

616 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

618 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

621 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

623 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

625 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

627 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

629 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

631 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

635 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

642 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

644 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

645 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

646 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

647 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

648 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

650 
	#SSL_OP_NO_DTLSv1
 0x04000000L

	)

651 
	#SSL_OP_NO_DTLSv1_2
 0x08000000L

	)

653 
	#SSL_OP_NO_SSL_MASK
 (
SSL_OP_NO_SSLv2
|
SSL_OP_NO_SSLv3
|\

654 
SSL_OP_NO_TLSv1
|
SSL_OP_NO_TLSv1_1
|
SSL_OP_NO_TLSv1_2
)

	)

664 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

665 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

667 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

668 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

674 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

680 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

687 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

691 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

693 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

699 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

705 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020L

	)

706 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040L

	)

715 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080L

	)

722 
	#SSL_CERT_FLAG_TLS_STRICT
 0x00000001L

	)

725 
	#SSL_CERT_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

727 
	#SSL_CERT_FLAG_SUITEB_192_LOS
 0x20000

	)

729 
	#SSL_CERT_FLAG_SUITEB_128_LOS
 0x30000

	)

732 
	#SSL_CERT_FLAG_BROKEN_PROTOCOL
 0x10000000

	)

736 
	#SSL_BUILD_CHAIN_FLAG_UNTRUSTED
 0x1

	)

738 
	#SSL_BUILD_CHAIN_FLAG_NO_ROOT
 0x2

	)

740 
	#SSL_BUILD_CHAIN_FLAG_CHECK
 0x4

	)

742 
	#SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR
 0x8

	)

744 
	#SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR
 0x10

	)

748 
	#CERT_PKEY_VALID
 0x1

	)

750 
	#CERT_PKEY_SIGN
 0x2

	)

752 
	#CERT_PKEY_EE_SIGNATURE
 0x10

	)

754 
	#CERT_PKEY_CA_SIGNATURE
 0x20

	)

756 
	#CERT_PKEY_EE_PARAM
 0x40

	)

758 
	#CERT_PKEY_CA_PARAM
 0x80

	)

760 
	#CERT_PKEY_EXPLICIT_SIGN
 0x100

	)

762 
	#CERT_PKEY_ISSUER_NAME
 0x200

	)

764 
	#CERT_PKEY_CERT_TYPE
 0x400

	)

766 
	#CERT_PKEY_SUITEB
 0x800

	)

768 
	#SSL_CONF_FLAG_CMDLINE
 0x1

	)

769 
	#SSL_CONF_FLAG_FILE
 0x2

	)

770 
	#SSL_CONF_FLAG_CLIENT
 0x4

	)

771 
	#SSL_CONF_FLAG_SERVER
 0x8

	)

772 
	#SSL_CONF_FLAG_SHOW_ERRORS
 0x10

	)

773 
	#SSL_CONF_FLAG_CERTIFICATE
 0x20

	)

775 
	#SSL_CONF_TYPE_UNKNOWN
 0x0

	)

776 
	#SSL_CONF_TYPE_STRING
 0x1

	)

777 
	#SSL_CONF_TYPE_FILE
 0x2

	)

778 
	#SSL_CONF_TYPE_DIR
 0x3

	)

785 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

786 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

787 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

788 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

789 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

790 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

791 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

792 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

793 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

794 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

795 
	#SSL_gë_›ti⁄s
(
s¶
) \

796 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

798 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

799 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

800 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

801 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

802 
	#SSL_CTX_gë_mode
(
˘x
) \

803 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

804 
	#SSL_˛ór_mode
(
s¶
,
›
) \

805 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

806 
	#SSL_£t_mode
(
s¶
,
›
) \

807 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

808 
	#SSL_gë_mode
(
s¶
) \

809 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

810 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

811 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

812 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

813 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

814 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

815 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

817 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

818 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

820 #i‚de‡
OPENSSL_NO_HEARTBEATS


821 
	#SSL_hóπbót
(
s¶
) \

822 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

825 
	#SSL_CTX_£t_˚π_Êags
(
˘x
,
›
) \

826 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

827 
	#SSL_£t_˚π_Êags
(
s
,
›
) \

828 
	`SSL_˘æ
((
s
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

829 
	#SSL_CTX_˛ór_˚π_Êags
(
˘x
,
›
) \

830 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

831 
	#SSL_˛ór_˚π_Êags
(
s
,
›
) \

832 
	`SSL_˘æ
((
s
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

834 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
,

835 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

836 
c⁄ã¡_ty≥
, c⁄° *
buf
,

837 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

838 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
,

839 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

840 
c⁄ã¡_ty≥
, c⁄° *
buf
,

841 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

842 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

843 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

845 #i‚de‡
OPENSSL_NO_SRP


847 #i‚de‡
OPENSSL_NO_SSL_INTERN


849 
	s§p_˘x_°
 {

851 *
SRP_cb_¨g
;

853 (*
TLS_ext_§p_u£∫ame_ˇŒback
Ë(
SSL
 *, *, *);

855 (*
SRP_vîify_∑øm_ˇŒback
Ë(
SSL
 *, *);

857 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
Ë(
SSL
 *, *);

858 *
logö
;

859 
BIGNUM
 *
N
, *
g
, *
s
, *
B
, *
A
;

860 
BIGNUM
 *
a
, *
b
, *
v
;

861 *
öfo
;

862 
°ªngth
;

863 
§p_Mask
;

864 } 
	tSRP_CTX
;

869 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

870 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

871 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

872 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

873 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

874 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
, *
ma°î_key
);

875 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

876 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
, *
ma°î_key
);

880 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

881 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

884 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

888 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

905 (*
GEN_SESSION_CB
Ë(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

906 *
	tid_Àn
);

908 
s¶_comp_°
 
	tSSL_COMP
;

910 #i‚de‡
OPENSSL_NO_SSL_INTERN


912 
	ss¶_comp_°
 {

913 
id
;

914 c⁄° *
«me
;

915 #i‚de‡
OPENSSL_NO_COMP


916 
COMP_METHOD
 *
mëhod
;

918 *
mëhod
;

922 
DECLARE_STACK_OF
(
SSL_COMP
)

923 
DECLARE_LHASH_OF
(
SSL_SESSION
);

925 
	ss¶_˘x_°
 {

926 c⁄° 
SSL_METHOD
 *
mëhod
;

927 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

929 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

930 
x509_°‹e_°
 *
˚π_°‹e
;

931 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

936 
£ssi⁄_ˇche_size
;

937 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

938 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

944 
£ssi⁄_ˇche_mode
;

950 
£ssi⁄_timeout
;

960 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

961 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°
 *
˘x
, 
SSL_SESSION
 *
£ss
);

962 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

963 *
d©a
, 
Àn
, *
c›y
);

965 
£ss_c⁄√˘
;

966 
£ss_c⁄√˘_ª√gŸüã
;

967 
£ss_c⁄√˘_good
;

968 
£ss_ac˚±
;

969 
£ss_ac˚±_ª√gŸüã
;

970 
£ss_ac˚±_good
;

971 
£ss_miss
;

972 
£ss_timeout
;

973 
£ss_ˇche_fuŒ
;

974 
£ss_hô
;

975 
£ss_cb_hô
;

980 } 
°©s
;

982 
ª„ªn˚s
;

985 (*
≠p_vîify_ˇŒback
Ë(
X509_STORE_CTX
 *, *);

986 *
≠p_vîify_¨g
;

993 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

996 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

999 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1002 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
, *
cookõ
,

1003 *
cookõ_Àn
);

1006 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
, *
cookõ
,

1007 
cookõ_Àn
);

1009 
CRYPTO_EX_DATA
 
ex_d©a
;

1011 c⁄° 
EVP_MD
 *
rß_md5
;

1012 c⁄° 
EVP_MD
 *
md5
;

1013 c⁄° 
EVP_MD
 *
sha1
;

1015 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

1016 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

1021 (*
öfo_ˇŒback
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
);

1024 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1031 
›ti⁄s
;

1032 
mode
;

1033 
max_˚π_li°
;

1035 
˚π_°
 *
˚π
;

1036 
ªad_ahód
;

1039 (*
msg_ˇŒback
Ë(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1040 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1041 *
msg_ˇŒback_¨g
;

1043 
vîify_mode
;

1044 
sid_˘x_Àngth
;

1045 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1047 (*
deÁu…_vîify_ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
);

1050 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1052 
X509_VERIFY_PARAM
 *
∑øm
;

1055 
puΩo£
;

1056 
åu°
;

1059 
quõt_shutdown
;

1065 
max_£nd_‰agmít
;

1067 #i‚de‡
OPENSSL_NO_ENGINE


1071 
ENGINE
 *
˛õ¡_˚π_ígöe
;

1074 #i‚de‡
OPENSSL_NO_TLSEXT


1076 (*
é£xt_£rvî«me_ˇŒback
Ë(
SSL
 *, *, *);

1077 *
é£xt_£rvî«me_¨g
;

1079 
é£xt_tick_key_«me
[16];

1080 
é£xt_tick_hmac_key
[16];

1081 
é£xt_tick_´s_key
[16];

1083 (*
é£xt_tickë_key_cb
Ë(
SSL
 *
s¶
,

1084 *
«me
, *
iv
,

1085 
EVP_CIPHER_CTX
 *
e˘x
,

1086 
HMAC_CTX
 *
h˘x
, 
íc
);

1090 (*
é£xt_°©us_cb
Ë(
SSL
 *
s¶
, *
¨g
);

1091 *
é£xt_°©us_¨g
;

1094 (*
é£xt_›aque_¥f_öput_ˇŒback
Ë(
SSL
 *, *
≥îöput
,

1095 
size_t
 
Àn
, *
¨g
);

1096 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

1099 #i‚de‡
OPENSSL_NO_PSK


1100 *
psk_idítôy_höt
;

1101 (*
psk_˛õ¡_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
höt
,

1102 *
idítôy
,

1103 
max_idítôy_Àn
,

1104 *
psk
,

1105 
max_psk_Àn
);

1106 (*
psk_£rvî_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
idítôy
,

1107 *
psk
,

1108 
max_psk_Àn
);

1111 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


1112 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

1113 
‰ìli°_max_Àn
;

1114 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

1115 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

1117 #i‚de‡
OPENSSL_NO_SRP


1118 
SRP_CTX
 
§p_˘x
;

1121 #i‚de‡
OPENSSL_NO_TLSEXT


1123 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1131 (*
√xt_¥Ÿos_advîti£d_cb
Ë(
SSL
 *
s
, c⁄° **
buf
,

1132 *
Àn
, *
¨g
);

1133 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

1138 (*
√xt_¥Ÿo_£À˘_cb
Ë(
SSL
 *
s
, **
out
,

1139 *
ouéí
,

1140 c⁄° *
ö
,

1141 
öÀn
, *
¨g
);

1142 *
√xt_¥Ÿo_£À˘_cb_¨g
;

1145 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1162 (*
Æ≤_£À˘_cb
Ë(
SSL
 *
s
,

1163 c⁄° **
out
,

1164 *
ouéí
,

1165 c⁄° *
ö
,

1166 
öÀn
, *
¨g
);

1167 *
Æ≤_£À˘_cb_¨g
;

1173 *
Æ≤_˛õ¡_¥Ÿo_li°
;

1174 
Æ≤_˛õ¡_¥Ÿo_li°_Àn
;

1176 #i‚de‡
OPENSSL_NO_EC


1178 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1179 *
é£xt_e˝oötf‹m©li°
;

1180 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1181 *
é£xt_ñlùticcurvñi°
;

1188 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

1189 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

1190 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

1191 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

1192 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

1194 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

1195 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

1196 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

1197 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

1199 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

1200 
	#SSL_CTX_£ss_numbî
(
˘x
) \

1201 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

1202 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

1203 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

1204 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

1205 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

1206 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

1207 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1208 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1209 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1210 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1211 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1212 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1213 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1214 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1215 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1216 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1217 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1218 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1219 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1220 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1221 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1222 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1223 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1225 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
,

1226 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

1227 
SSL_SESSION
 *
£ss
));

1228 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

1229 
SSL_SESSION
 *
£ss
);

1230 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
,

1231 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°


1232 *
˘x
,

1233 
SSL_SESSION


1234 *
£ss
));

1235 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_˘x_°
 *ctx,

1236 
SSL_SESSION
 *
£ss
);

1237 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
,

1238 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°


1239 *
s¶
,

1241 *
d©a
, 
Àn
,

1242 *
c›y
));

1243 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

1244 *
D©a
,

1245 
Àn
, *
c›y
);

1246 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
,

1247 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

1248 
vÆ
));

1249 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

1250 
vÆ
);

1251 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
,

1252 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

1253 
EVP_PKEY
 **
pkey
));

1254 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
)Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

1255 
EVP_PKEY
 **
pkey
);

1256 #i‚de‡
OPENSSL_NO_ENGINE


1257 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1259 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
,

1260 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
,

1262 *
cookõ
,

1264 *
cookõ_Àn
));

1265 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
,

1266 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
,

1268 *
cookõ
,

1270 
cookõ_Àn
));

1271 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1272 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1273 (*
cb
Ë(
SSL
 *
s¶
,

1275 **
out
,

1276 *
ouéí
,

1277 *
¨g
), *arg);

1278 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1279 (*
cb
Ë(
SSL
 *
s¶
,

1280 **
out
,

1281 *
ouéí
,

1282 c⁄° *
ö
,

1283 
öÀn
,

1284 *
¨g
), *arg);

1285 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
, c⁄° **
d©a
,

1286 *
Àn
);

1289 #i‚de‡
OPENSSL_NO_TLSEXT


1290 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1291 c⁄° *
ö
, 
öÀn
,

1292 c⁄° *
˛õ¡
,

1293 
˛õ¡_Àn
);

1296 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1297 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1298 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1300 
SSL_CTX_£t_Æ≤_¥Ÿos
(
SSL_CTX
 *
˘x
, c⁄° *
¥Ÿos
,

1301 
¥Ÿos_Àn
);

1302 
SSL_£t_Æ≤_¥Ÿos
(
SSL
 *
s¶
, c⁄° *
¥Ÿos
,

1303 
¥Ÿos_Àn
);

1304 
SSL_CTX_£t_Æ≤_£À˘_cb
(
SSL_CTX
 *
˘x
,

1305 (*
cb
Ë(
SSL
 *
s¶
,

1306 c⁄° **
out
,

1307 *
ouéí
,

1308 c⁄° *
ö
,

1309 
öÀn
,

1310 *
¨g
), *arg);

1311 
SSL_gë0_Æ≤_£À˘ed
(c⁄° 
SSL
 *
s¶
, c⁄° **
d©a
,

1312 *
Àn
);

1314 #i‚de‡
OPENSSL_NO_PSK


1319 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1320 
	#PSK_MAX_PSK_LEN
 256

	)

1321 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1322 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


1323 *
s¶
,

1326 *
höt
,

1328 *
idítôy
,

1331 
max_idítôy_Àn
,

1334 *
psk
,

1337 
max_psk_Àn
));

1338 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1339 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


1340 *
s¶
,

1343 *
höt
,

1345 *
idítôy
,

1348 
max_idítôy_Àn
,

1351 *
psk
,

1354 
max_psk_Àn
));

1355 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1356 (*
psk_£rvî_ˇŒback
Ë(
SSL


1357 *
s¶
,

1360 *
idítôy
,

1363 *
psk
,

1366 
max_psk_Àn
));

1367 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1368 (*
psk_£rvî_ˇŒback
Ë(
SSL


1369 *
s¶
,

1372 *
idítôy
,

1375 *
psk
,

1378 
max_psk_Àn
));

1379 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1380 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1381 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1382 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1385 #i‚de‡
OPENSSL_NO_TLSEXT


1388 
SSL_CTX_add_˛õ¡_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

1389 
cu°om_ext_add_cb
 
add_cb
,

1390 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

1391 *
add_¨g
,

1392 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

1393 *
∑r£_¨g
);

1395 
SSL_CTX_add_£rvî_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

1396 
cu°om_ext_add_cb
 
add_cb
,

1397 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

1398 *
add_¨g
,

1399 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

1400 *
∑r£_¨g
);

1402 
SSL_exãnsi⁄_suµ‹ãd
(
ext_ty≥
);

1406 
	#SSL_NOTHING
 1

	)

1407 
	#SSL_WRITING
 2

	)

1408 
	#SSL_READING
 3

	)

1409 
	#SSL_X509_LOOKUP
 4

	)

1412 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1413 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1414 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1415 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1417 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1418 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1420 #i‚de‡
OPENSSL_NO_SSL_INTERN


1422 
	ss¶_°
 {

1427 
vîsi⁄
;

1429 
ty≥
;

1431 c⁄° 
SSL_METHOD
 *
mëhod
;

1436 #i‚de‡
OPENSSL_NO_BIO


1438 
BIO
 *
rbio
;

1440 
BIO
 *
wbio
;

1442 
BIO
 *
bbio
;

1445 *
rbio
;

1447 *
wbio
;

1448 *
bbio
;

1455 
rw°©e
;

1457 
ö_h™dshake
;

1458 (*
h™dshake_func
Ë(
SSL
 *);

1467 
£rvî
;

1474 
√w_£ssi⁄
;

1476 
quõt_shutdown
;

1478 
shutdown
;

1480 
°©e
;

1482 
r°©e
;

1483 
BUF_MEM
 *
öô_buf
;

1484 *
öô_msg
;

1486 
öô_num
;

1487 
öô_off
;

1489 *
∑ckë
;

1490 
∑ckë_Àngth
;

1491 
s¶2_°©e_°
 *
s2
;

1492 
s¶3_°©e_°
 *
s3
;

1493 
dés1_°©e_°
 *
d1
;

1494 
ªad_ahód
;

1497 (*
msg_ˇŒback
Ë(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1498 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1499 *
msg_ˇŒback_¨g
;

1500 
hô
;

1501 
X509_VERIFY_PARAM
 *
∑øm
;

1503 
puΩo£
;

1504 
åu°
;

1507 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1508 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1513 
mac_Êags
;

1514 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1515 
EVP_MD_CTX
 *
ªad_hash
;

1516 #i‚de‡
OPENSSL_NO_COMP


1517 
COMP_CTX
 *
ex∑nd
;

1519 *
ex∑nd
;

1521 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1522 
EVP_MD_CTX
 *
wrôe_hash
;

1523 #i‚de‡
OPENSSL_NO_COMP


1524 
COMP_CTX
 *
com¥ess
;

1526 *
com¥ess
;

1531 
˚π_°
 *
˚π
;

1536 
sid_˘x_Àngth
;

1537 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1539 
SSL_SESSION
 *
£ssi⁄
;

1541 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1547 
vîify_mode
;

1549 (*
vîify_ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
);

1551 (*
öfo_ˇŒback
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
);

1553 
îr‹
;

1555 
îr‹_code
;

1556 #i‚de‡
OPENSSL_NO_KRB5


1558 
KSSL_CTX
 *
ks¶_˘x
;

1560 #i‚de‡
OPENSSL_NO_PSK


1561 (*
psk_˛õ¡_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
höt
,

1562 *
idítôy
,

1563 
max_idítôy_Àn
,

1564 *
psk
,

1565 
max_psk_Àn
);

1566 (*
psk_£rvî_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
idítôy
,

1567 *
psk
,

1568 
max_psk_Àn
);

1570 
SSL_CTX
 *
˘x
;

1575 
debug
;

1577 
vîify_ªsu…
;

1578 
CRYPTO_EX_DATA
 
ex_d©a
;

1580 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1581 
ª„ªn˚s
;

1583 
›ti⁄s
;

1585 
mode
;

1586 
max_˚π_li°
;

1587 
fú°_∑ckë
;

1589 
˛õ¡_vîsi⁄
;

1590 
max_£nd_‰agmít
;

1591 #i‚de‡
OPENSSL_NO_TLSEXT


1593 (*
é£xt_debug_cb
Ë(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1594 *
d©a
, 
Àn
, *
¨g
);

1595 *
é£xt_debug_¨g
;

1596 *
é£xt_ho°«me
;

1603 
£rvî«me_d⁄e
;

1606 
é£xt_°©us_ty≥
;

1608 
é£xt_°©us_ex≥˘ed
;

1610 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1611 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1613 *
é£xt_oc•_ª•
;

1614 
é£xt_oc•_ª•Àn
;

1616 
é£xt_tickë_ex≥˘ed
;

1617 #i‚de‡
OPENSSL_NO_EC


1618 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1620 *
é£xt_e˝oötf‹m©li°
;

1621 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1623 *
é£xt_ñlùticcurvñi°
;

1629 *
é£xt_›aque_¥f_öput
;

1630 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1632 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1634 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1635 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1637 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1638 *
és_£ssi⁄_£¸ë_cb_¨g
;

1639 
SSL_CTX
 *
öôül_˘x
;

1640 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1648 *
√xt_¥Ÿo_√gŸüãd
;

1649 
√xt_¥Ÿo_√gŸüãd_Àn
;

1651 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1653 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1655 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1662 
é£xt_hóπbót
;

1664 
é£xt_hb_≥ndög
;

1666 
é£xt_hb_£q
;

1668 
	#£ssi⁄_˘x
 
˘x


	)

1675 
ª√gŸüã
;

1676 #i‚de‡
OPENSSL_NO_SRP


1678 
SRP_CTX
 
§p_˘x
;

1680 #i‚de‡
OPENSSL_NO_TLSEXT


1685 *
Æ≤_˛õ¡_¥Ÿo_li°
;

1686 
Æ≤_˛õ¡_¥Ÿo_li°_Àn
;

1692 #ifde‡
__˝lu•lus


1696 
	~<›ís¶/s¶2.h
>

1697 
	~<›ís¶/s¶3.h
>

1698 
	~<›ís¶/és1.h
>

1699 
	~<›ís¶/dés1.h
>

1700 
	~<›ís¶/s¶23.h
>

1701 
	~<›ís¶/§ç.h
>

1703 #ifde‡ 
__˝lu•lus


1708 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1709 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1710 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1711 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1712 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1713 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1723 
	#SSL_ST_CONNECT
 0x1000

	)

1724 
	#SSL_ST_ACCEPT
 0x2000

	)

1725 
	#SSL_ST_MASK
 0x0FFF

	)

1726 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1727 
	#SSL_ST_BEFORE
 0x4000

	)

1728 
	#SSL_ST_OK
 0x03

	)

1729 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1730 
	#SSL_ST_ERR
 (0x05|
SSL_ST_INIT
)

	)

1732 
	#SSL_CB_LOOP
 0x01

	)

1733 
	#SSL_CB_EXIT
 0x02

	)

1734 
	#SSL_CB_READ
 0x04

	)

1735 
	#SSL_CB_WRITE
 0x08

	)

1736 
	#SSL_CB_ALERT
 0x4000

	)

1737 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1738 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1739 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1740 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1741 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1742 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1743 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1744 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1747 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1748 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1749 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1750 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1751 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1752 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1758 
	#SSL_ST_READ_HEADER
 0xF0

	)

1759 
	#SSL_ST_READ_BODY
 0xF1

	)

1760 
	#SSL_ST_READ_DONE
 0xF2

	)

1768 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1769 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1775 
	#SSL_VERIFY_NONE
 0x00

	)

1776 
	#SSL_VERIFY_PEER
 0x01

	)

1777 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1778 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1780 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1781 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1785 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1786 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1787 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1788 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1789 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1792 
	#SSL_gë_cùhî
(
s
) \

1793 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1794 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1795 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1796 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1797 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1798 
	#SSL_gë_cùhî_«me
(
s
) \

1799 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1800 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1801 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1802 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1803 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1805 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1806 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1808 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1809 
	#SSL_AD_REASON_OFFSET
 1000

	)

1812 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1814 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1816 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1817 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1818 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1820 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1822 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1824 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1825 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1826 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1827 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1828 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1829 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1831 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1833 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1835 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1837 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1838 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1840 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1842 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1844 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1846 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1847 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1848 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1849 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1850 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1851 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1852 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1853 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1855 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1857 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1858 
	#SSL_ERROR_NONE
 0

	)

1859 
	#SSL_ERROR_SSL
 1

	)

1860 
	#SSL_ERROR_WANT_READ
 2

	)

1861 
	#SSL_ERROR_WANT_WRITE
 3

	)

1862 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1863 
	#SSL_ERROR_SYSCALL
 5

	)

1865 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1866 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1867 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1868 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1869 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1870 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1871 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1872 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1873 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1874 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1875 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1876 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1877 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1878 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1879 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1880 
	#SSL_CTRL_GET_FLAGS
 13

	)

1881 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1882 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1883 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1885 
	#SSL_CTRL_SET_MTU
 17

	)

1887 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1888 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1889 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1890 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1891 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1892 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1893 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1894 
	#SSL_CTRL_SESS_HIT
 27

	)

1895 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1896 
	#SSL_CTRL_SESS_MISSES
 29

	)

1897 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1898 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1899 
	#SSL_CTRL_OPTIONS
 32

	)

1900 
	#SSL_CTRL_MODE
 33

	)

1901 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1902 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1903 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1904 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1905 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1906 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1907 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1908 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1909 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1911 #i‚de‡
OPENSSL_NO_TLSEXT


1912 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1913 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1914 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1915 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1916 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1917 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1918 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1919 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1920 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1921 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1922 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1923 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1924 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1925 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1926 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1927 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1928 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1929 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1930 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1931 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1932 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1933 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1934 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1935 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1936 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1937 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1938 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1939 #i‚de‡
OPENSSL_NO_HEARTBEATS


1940 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1941 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1942 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1945 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1946 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1947 
	#DTLS_CTRL_LISTEN
 75

	)

1948 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1949 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1950 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1951 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1952 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1953 
	#SSL_CTRL_CHAIN
 88

	)

1954 
	#SSL_CTRL_CHAIN_CERT
 89

	)

1955 
	#SSL_CTRL_GET_CURVES
 90

	)

1956 
	#SSL_CTRL_SET_CURVES
 91

	)

1957 
	#SSL_CTRL_SET_CURVES_LIST
 92

	)

1958 
	#SSL_CTRL_GET_SHARED_CURVE
 93

	)

1959 
	#SSL_CTRL_SET_ECDH_AUTO
 94

	)

1960 
	#SSL_CTRL_SET_SIGALGS
 97

	)

1961 
	#SSL_CTRL_SET_SIGALGS_LIST
 98

	)

1962 
	#SSL_CTRL_CERT_FLAGS
 99

	)

1963 
	#SSL_CTRL_CLEAR_CERT_FLAGS
 100

	)

1964 
	#SSL_CTRL_SET_CLIENT_SIGALGS
 101

	)

1965 
	#SSL_CTRL_SET_CLIENT_SIGALGS_LIST
 102

	)

1966 
	#SSL_CTRL_GET_CLIENT_CERT_TYPES
 103

	)

1967 
	#SSL_CTRL_SET_CLIENT_CERT_TYPES
 104

	)

1968 
	#SSL_CTRL_BUILD_CERT_CHAIN
 105

	)

1969 
	#SSL_CTRL_SET_VERIFY_CERT_STORE
 106

	)

1970 
	#SSL_CTRL_SET_CHAIN_CERT_STORE
 107

	)

1971 
	#SSL_CTRL_GET_PEER_SIGNATURE_NID
 108

	)

1972 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 109

	)

1973 
	#SSL_CTRL_GET_RAW_CIPHERLIST
 110

	)

1974 
	#SSL_CTRL_GET_EC_POINT_FORMATS
 111

	)

1975 
	#SSL_CTRL_GET_CHAIN_CERTS
 115

	)

1976 
	#SSL_CTRL_SELECT_CURRENT_CERT
 116

	)

1977 
	#SSL_CTRL_SET_CURRENT_CERT
 117

	)

1978 
	#SSL_CTRL_CHECK_PROTO_VERSION
 119

	)

1979 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1980 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1981 
	#SSL_CERT_SET_FIRST
 1

	)

1982 
	#SSL_CERT_SET_NEXT
 2

	)

1983 
	#SSL_CERT_SET_SERVER
 3

	)

1984 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1985 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1986 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1987 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1988 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1989 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1990 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1991 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1992 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1993 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1994 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1995 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1996 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1997 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1998 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

2000 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

2001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

2002 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

2003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

2004 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

2005 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

2006 
	#SSL_√ed_tmp_RSA
(
s¶
) \

2007 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

2008 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

2009 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

2010 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

2011 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

2012 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

2013 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

2014 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

2015 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

2016 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

2017 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

2018 
	#SSL_CTX_gë_exåa_chaö_˚πs_⁄ly
(
˘x
,
px509
) \

2019 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,1,
px509
)

	)

2020 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

2021 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

2022 
	#SSL_CTX_£t0_chaö
(
˘x
,
sk
) \

2023 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

2024 
	#SSL_CTX_£t1_chaö
(
˘x
,
sk
) \

2025 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

2026 
	#SSL_CTX_add0_chaö_˚π
(
˘x
,
x509
) \

2027 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

2028 
	#SSL_CTX_add1_chaö_˚π
(
˘x
,
x509
) \

2029 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

2030 
	#SSL_CTX_gë0_chaö_˚πs
(
˘x
,
px509
) \

2031 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

2032 
	#SSL_CTX_˛ór_chaö_˚πs
(
˘x
) \

2033 
	`SSL_CTX_£t0_chaö
(
˘x
,
NULL
)

	)

2034 
	#SSL_CTX_buûd_˚π_chaö
(
˘x
, 
Êags
) \

2035 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

2036 
	#SSL_CTX_£À˘_cuºít_˚π
(
˘x
,
x509
) \

2037 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

2038 
	#SSL_CTX_£t_cuºít_˚π
(
˘x
, 
›
) \

2039 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

2040 
	#SSL_CTX_£t0_vîify_˚π_°‹e
(
˘x
,
°
) \

2041 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

2042 
	#SSL_CTX_£t1_vîify_˚π_°‹e
(
˘x
,
°
) \

2043 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

2044 
	#SSL_CTX_£t0_chaö_˚π_°‹e
(
˘x
,
°
) \

2045 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

2046 
	#SSL_CTX_£t1_chaö_˚π_°‹e
(
˘x
,
°
) \

2047 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

2048 
	#SSL_£t0_chaö
(
˘x
,
sk
) \

2049 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

2050 
	#SSL_£t1_chaö
(
˘x
,
sk
) \

2051 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

2052 
	#SSL_add0_chaö_˚π
(
˘x
,
x509
) \

2053 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

2054 
	#SSL_add1_chaö_˚π
(
˘x
,
x509
) \

2055 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

2056 
	#SSL_gë0_chaö_˚πs
(
˘x
,
px509
) \

2057 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

2058 
	#SSL_˛ór_chaö_˚πs
(
˘x
) \

2059 
	`SSL_£t0_chaö
(
˘x
,
NULL
)

	)

2060 
	#SSL_buûd_˚π_chaö
(
s
, 
Êags
) \

2061 
	`SSL_˘æ
(
s
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

2062 
	#SSL_£À˘_cuºít_˚π
(
˘x
,
x509
) \

2063 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

2064 
	#SSL_£t_cuºít_˚π
(
˘x
,
›
) \

2065 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

2066 
	#SSL_£t0_vîify_˚π_°‹e
(
s
,
°
) \

2067 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

2068 
	#SSL_£t1_vîify_˚π_°‹e
(
s
,
°
) \

2069 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

2070 
	#SSL_£t0_chaö_˚π_°‹e
(
s
,
°
) \

2071 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

2072 
	#SSL_£t1_chaö_˚π_°‹e
(
s
,
°
) \

2073 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

2074 
	#SSL_gë1_curves
(
˘x
, 
s
) \

2075 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CURVES
,0,(*)
s
)

	)

2076 
	#SSL_CTX_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2077 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

2078 
	#SSL_CTX_£t1_curves_li°
(
˘x
, 
s
) \

2079 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

2080 
	#SSL_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2081 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

2082 
	#SSL_£t1_curves_li°
(
˘x
, 
s
) \

2083 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

2084 
	#SSL_gë_sh¨ed_curve
(
s
, 
n
) \

2085 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SHARED_CURVE
,
n
,
NULL
)

	)

2086 
	#SSL_CTX_£t_ecdh_auto
(
˘x
, 
⁄off
) \

2087 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_ECDH_AUTO
,
⁄off
,
NULL
)

	)

2088 
	#SSL_£t_ecdh_auto
(
s
, 
⁄off
) \

2089 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_ECDH_AUTO
,
⁄off
,
NULL
)

	)

2090 
	#SSL_CTX_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2091 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2092 
	#SSL_CTX_£t1_sigÆgs_li°
(
˘x
, 
s
) \

2093 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

2094 
	#SSL_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2095 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2096 
	#SSL_£t1_sigÆgs_li°
(
˘x
, 
s
) \

2097 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

2098 
	#SSL_CTX_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2099 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2100 
	#SSL_CTX_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

2101 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

2102 
	#SSL_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2103 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
˛i°Àn
,(*)
¶i°
)

	)

2104 
	#SSL_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

2105 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

2106 
	#SSL_gë0_˚πifiˇã_ty≥s
(
s
, 
˛i°
) \

2107 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_CLIENT_CERT_TYPES
, 0, (*)
˛i°
)

	)

2108 
	#SSL_CTX_£t1_˛õ¡_˚πifiˇã_ty≥s
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2109 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

2110 
	#SSL_£t1_˛õ¡_˚πifiˇã_ty≥s
(
s
, 
˛i°
, 
˛i°Àn
) \

2111 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

2112 
	#SSL_gë_≥î_sig«tuª_nid
(
s
, 
≤
) \

2113 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_SIGNATURE_NID
,0,
≤
)

	)

2114 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

2115 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SERVER_TMP_KEY
,0,
pk
)

	)

2116 
	#SSL_gë0_øw_cùhîli°
(
s
, 
∂°
) \

2117 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_RAW_CIPHERLIST
,0,(*)
∂°
)

	)

2118 
	#SSL_gë0_ec_poöt_f‹m©s
(
s
, 
∂°
) \

2119 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_EC_POINT_FORMATS
,0,(*)
∂°
)

	)

2120 #i‚de‡
OPENSSL_NO_BIO


2121 
BIO_METHOD
 *
BIO_f_s¶
();

2122 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
, 
˛õ¡
);

2123 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

2124 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

2125 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
, BIO *
‰om
);

2126 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

2130 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *, c⁄° *
°r
);

2131 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

2132 
SSL_CTX_‰ì
(
SSL_CTX
 *);

2133 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
, 
t
);

2134 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

2135 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

2136 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

2137 
SSL_w™t
(c⁄° 
SSL
 *
s
);

2138 
SSL_˛ór
(
SSL
 *
s
);

2140 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
, 
tm
);

2142 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

2143 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
, *
Æg_bôs
);

2144 *
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

2145 c⁄° *
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

2146 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

2148 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

2149 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

2150 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

2151 c⁄° *
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
, 
n
);

2152 *
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
size
);

2153 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 *
s
);

2154 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

2155 #i‚de‡
OPENSSL_NO_SOCK


2156 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

2157 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

2158 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

2160 #i‚de‡
OPENSSL_NO_BIO


2161 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
, BIO *
wbio
);

2162 
BIO
 *
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

2163 
BIO
 *
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

2165 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

2166 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

2167 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

2168 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

2169 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
)Ë(, 
X509_STORE_CTX
 *);

2170 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

2171 (*
ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
));

2172 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

2173 
SSL_£t_˚π_cb
(
SSL
 *
s
, (*
cb
Ë(SSL *
s¶
, *
¨g
), *arg);

2174 #i‚de‡
OPENSSL_NO_RSA


2175 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

2177 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

2178 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

2179 
SSL_u£_Priv©eKey_ASN1
(
pk
, 
SSL
 *
s¶
, c⁄° *
d
,

2180 
Àn
);

2181 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

2182 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

2184 #i‚de‡
OPENSSL_NO_TLSEXT


2186 
SSL_CTX_u£_£rvîöfo
(
SSL_CTX
 *
˘x
, c⁄° *
£rvîöfo
,

2187 
size_t
 
£rvîöfo_Àngth
);

2188 #i‚de‡
OPENSSL_NO_STDIO


2189 
SSL_CTX_u£_£rvîöfo_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

2194 #i‚de‡
OPENSSL_NO_STDIO


2195 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2196 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2197 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2198 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2199 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2200 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2202 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

2203 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

2204 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

2205 c⁄° *
fûe
);

2206 #i‚de‡
OPENSSL_SYS_VMS


2208 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


2209 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

2210 c⁄° *
dú
);

2216 
SSL_lﬂd_îr‹_°rögs
();

2217 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

2218 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

2219 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

2220 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

2221 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

2222 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

2223 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

2224 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

2225 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
, c⁄° SSL *
‰om
);

2226 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

2227 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
, c⁄° *
sid_˘x
,

2228 
sid_˘x_Àn
);

2230 
SSL_SESSION
 *
SSL_SESSION_√w
();

2231 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

2232 *
Àn
);

2233 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

2234 #i‚de‡
OPENSSL_NO_FP_API


2235 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

2237 #i‚de‡
OPENSSL_NO_BIO


2238 
SSL_SESSION_¥öt
(
BIO
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

2240 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

2241 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
, **
µ
);

2242 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

2243 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

2244 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *, 
SSL_SESSION
 *
c
);

2245 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

2246 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

2247 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

2248 
id_Àn
);

2249 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
, c⁄° **
µ
,

2250 
Àngth
);

2252 #ifde‡
HEADER_X509_H


2253 
X509
 *
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

2256 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

2258 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

2259 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

2260 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)) (,

2261 
X509_STORE_CTX
 *);

2262 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
, 
mode
,

2263 (*
ˇŒback
Ë(, 
X509_STORE_CTX
 *));

2264 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
, 
dïth
);

2265 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
,

2266 (*
cb
Ë(
X509_STORE_CTX
 *, *),

2267 *
¨g
);

2268 
SSL_CTX_£t_˚π_cb
(
SSL_CTX
 *
c
, (*
cb
Ë(
SSL
 *
s¶
, *
¨g
),

2269 *
¨g
);

2270 #i‚de‡
OPENSSL_NO_RSA


2271 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

2273 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
,

2274 
Àn
);

2275 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

2276 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
, 
SSL_CTX
 *
˘x
,

2277 c⁄° *
d
, 
Àn
);

2278 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

2279 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
,

2280 c⁄° *
d
);

2282 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

2283 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

2285 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

2286 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

2288 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
, c⁄° *
sid_˘x
,

2289 
sid_˘x_Àn
);

2291 
SSL
 *
SSL_√w
(
SSL_CTX
 *
˘x
);

2292 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
, c⁄° *
sid_˘x
,

2293 
sid_˘x_Àn
);

2295 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

2296 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

2297 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

2298 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

2300 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

2301 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

2303 
X509_VERIFY_PARAM
 *
SSL_CTX_gë0_∑øm
(
SSL_CTX
 *
˘x
);

2304 
X509_VERIFY_PARAM
 *
SSL_gë0_∑øm
(
SSL
 *
s¶
);

2306 #i‚de‡
OPENSSL_NO_SRP


2307 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
, *
«me
);

2308 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
, *
∑ssw‹d
);

2309 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

2310 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

2311 *(*
cb
Ë(
SSL
 *, *));

2312 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

2313 (*
cb
Ë(
SSL
 *, *));

2314 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

2315 (*
cb
Ë(
SSL
 *, *, *));

2316 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

2318 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

2319 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

2320 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

2321 c⁄° *
gΩ
);

2323 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

2324 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

2326 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

2327 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

2330 
SSL_˚πs_˛ór
(
SSL
 *
s
);

2331 
SSL_‰ì
(
SSL
 *
s¶
);

2332 
SSL_ac˚±
(
SSL
 *
s¶
);

2333 
SSL_c⁄√˘
(
SSL
 *
s¶
);

2334 
SSL_ªad
(
SSL
 *
s¶
, *
buf
, 
num
);

2335 
SSL_≥ek
(
SSL
 *
s¶
, *
buf
, 
num
);

2336 
SSL_wrôe
(
SSL
 *
s¶
, c⁄° *
buf
, 
num
);

2337 
SSL_˘æ
(
SSL
 *
s¶
, 
cmd
, 
œrg
, *
∑rg
);

2338 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

2339 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

2340 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

2342 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
, 
ªt_code
);

2343 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

2346 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

2348 #i‚de‡
OPENSSL_NO_SSL2_METHOD


2349 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

2350 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

2351 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

2354 #i‚de‡
OPENSSL_NO_SSL3_METHOD


2355 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

2356 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

2357 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

2360 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

2362 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

2364 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

2367 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

2368 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

2369 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

2371 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

2372 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

2373 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

2375 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

2376 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

2377 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

2379 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

2380 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

2381 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

2383 c⁄° 
SSL_METHOD
 *
DTLSv1_2_mëhod
();

2384 c⁄° 
SSL_METHOD
 *
DTLSv1_2_£rvî_mëhod
();

2385 c⁄° 
SSL_METHOD
 *
DTLSv1_2_˛õ¡_mëhod
();

2387 c⁄° 
SSL_METHOD
 *
DTLS_mëhod
();

2388 c⁄° 
SSL_METHOD
 *
DTLS_£rvî_mëhod
();

2389 c⁄° 
SSL_METHOD
 *
DTLS_˛õ¡_mëhod
();

2391 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

2393 
SSL_do_h™dshake
(
SSL
 *
s
);

2394 
SSL_ª√gŸüã
(
SSL
 *
s
);

2395 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

2396 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

2397 
SSL_shutdown
(
SSL
 *
s
);

2399 c⁄° 
SSL_METHOD
 *
SSL_CTX_gë_s¶_mëhod
(
SSL_CTX
 *
˘x
);

2400 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

2401 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

2402 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

2403 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

2404 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

2405 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

2407 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2408 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2409 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

2410 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

2411 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
, 
X509
 *
x
);

2412 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

2414 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

2415 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

2417 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

2419 
SSL_libøry_öô
();

2421 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *, *
buf
, 
size
);

2422 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

2424 
SSL
 *
SSL_dup
(SSL *
s¶
);

2426 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

2429  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(c⁄° 
SSL
 *
s¶
);

2431 
X509
 *
SSL_CTX_gë0_˚πifiˇã
(c⁄° 
SSL_CTX
 *
˘x
);

2432 
EVP_PKEY
 *
SSL_CTX_gë0_¥iv©ekey
(c⁄° 
SSL_CTX
 *
˘x
);

2434 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
, 
mode
);

2435 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

2436 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
, 
mode
);

2437 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

2438 
SSL_£t_shutdown
(
SSL
 *
s¶
, 
mode
);

2439 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

2440 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

2441 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

2442 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

2443 c⁄° *
CA∑th
);

2444 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

2445 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

2446 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

2447 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

2448 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX *
˘x
);

2449 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

2450 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

2451 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
)Ë(c⁄° SSL *s¶, 
ty≥
,

2452 
vÆ
);

2453 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

2454 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

2456 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
, 
v
);

2457 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

2459 
SSL_£t_ex_d©a
(
SSL
 *
s¶
, 
idx
, *
d©a
);

2460 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
, 
idx
);

2461 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

2462 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2464 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
, 
idx
, *
d©a
);

2465 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
, 
idx
);

2466 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
,

2467 
CRYPTO_EX_√w
 *
√w_func
,

2468 
CRYPTO_EX_dup
 *
dup_func
,

2469 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2471 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
, 
idx
, *
d©a
);

2472 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
, 
idx
);

2473 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

2474 
CRYPTO_EX_dup
 *
dup_func
,

2475 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2477 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

2479 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

2480 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

2481 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

2482 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

2483 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

2484 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

2485 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

2486 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

2488 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

2489 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

2490 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

2491 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

2492 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

2493 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

2494 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

2495 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2496 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

2497 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2498 
	#SSL_gë_max_˚π_li°
(
s¶
) \

2499 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2500 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

2501 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2503 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

2504 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2505 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

2506 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2509 #i‚de‡
OPENSSL_NO_RSA


2510 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

2511 
RSA
 *(*
cb
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2512 
keyÀngth
));

2514 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

2515 
RSA
 *(*
cb
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2516 
keyÀngth
));

2518 #i‚de‡
OPENSSL_NO_DH


2519 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2520 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2521 
keyÀngth
));

2522 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2523 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2524 
keyÀngth
));

2526 #i‚de‡
OPENSSL_NO_ECDH


2527 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2528 
EC_KEY
 *(*
ecdh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2529 
keyÀngth
));

2530 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2531 
EC_KEY
 *(*
ecdh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2532 
keyÀngth
));

2535 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2536 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2537 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2538 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2539 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_£t0_com¥essi⁄_mëhods
(STACK_OF(SSL_COMP)

2540 *
mëhs
);

2541 
SSL_COMP_‰ì_com¥essi⁄_mëhods
();

2542 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, 
COMP_METHOD
 *
cm
);

2544 c⁄° 
SSL_CIPHER
 *
SSL_CIPHER_föd
(
SSL
 *
s¶
, c⁄° *
±r
);

2547 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2549 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2550 *
¨g
);

2553 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
,

2554 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
,

2555 *
¨g
);

2557 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2558 
SSL_ˇche_hô
(
SSL
 *
s
);

2559 
SSL_is_£rvî
(
SSL
 *
s
);

2561 
SSL_CONF_CTX
 *
SSL_CONF_CTX_√w
();

2562 
SSL_CONF_CTX_föish
(
SSL_CONF_CTX
 *
c˘x
);

2563 
SSL_CONF_CTX_‰ì
(
SSL_CONF_CTX
 *
c˘x
);

2564 
SSL_CONF_CTX_£t_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2565 
SSL_CONF_CTX_˛ór_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2566 
SSL_CONF_CTX_£t1_¥efix
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
¥e
);

2568 
SSL_CONF_CTX_£t_s¶
(
SSL_CONF_CTX
 *
c˘x
, 
SSL
 *
s¶
);

2569 
SSL_CONF_CTX_£t_s¶_˘x
(
SSL_CONF_CTX
 *
c˘x
, 
SSL_CTX
 *
˘x
);

2571 
SSL_CONF_cmd
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
, c⁄° *
vÆue
);

2572 
SSL_CONF_cmd_¨gv
(
SSL_CONF_CTX
 *
c˘x
, *
∑rgc
, ***
∑rgv
);

2573 
SSL_CONF_cmd_vÆue_ty≥
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
);

2575 #i‚de‡
OPENSSL_NO_SSL_TRACE


2576 
SSL_åa˚
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

2577 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

2578 c⁄° *
SSL_CIPHER_°™d¨d_«me
(c⁄° 
SSL_CIPHER
 *
c
);

2581 #i‚de‡
OPENSSL_NO_UNIT_TEST


2582 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2590 
ERR_lﬂd_SSL_°rögs
();

2595 
	#SSL_F_CHECK_SUITEB_CIPHER_LIST
 331

	)

2596 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2597 
	#SSL_F_CLIENT_FINISHED
 167

	)

2598 
	#SSL_F_CLIENT_HELLO
 101

	)

2599 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2600 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2601 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2602 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2603 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2604 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2605 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2606 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 316

	)

2607 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2608 
	#SSL_F_DTLS1_CONNECT
 249

	)

2609 
	#SSL_F_DTLS1_ENC
 250

	)

2610 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2611 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2612 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2613 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2614 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2615 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2616 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2617 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2618 
	#SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS
 424

	)

2619 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2620 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2621 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2622 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2623 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2624 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2625 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2626 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2627 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2628 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2629 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2630 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2631 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2632 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2633 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2634 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2635 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2636 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2637 
	#SSL_F_GET_SERVER_STATIC_DH_KEY
 340

	)

2638 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2639 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2640 
	#SSL_F_READ_N
 112

	)

2641 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2642 
	#SSL_F_SERVER_FINISH
 239

	)

2643 
	#SSL_F_SERVER_HELLO
 114

	)

2644 
	#SSL_F_SERVER_VERIFY
 240

	)

2645 
	#SSL_F_SSL23_ACCEPT
 115

	)

2646 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2647 
	#SSL_F_SSL23_CONNECT
 117

	)

2648 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2649 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2650 
	#SSL_F_SSL23_PEEK
 237

	)

2651 
	#SSL_F_SSL23_READ
 120

	)

2652 
	#SSL_F_SSL23_WRITE
 121

	)

2653 
	#SSL_F_SSL2_ACCEPT
 122

	)

2654 
	#SSL_F_SSL2_CONNECT
 123

	)

2655 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2656 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2657 
	#SSL_F_SSL2_PEEK
 234

	)

2658 
	#SSL_F_SSL2_READ
 125

	)

2659 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2660 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2661 
	#SSL_F_SSL2_WRITE
 127

	)

2662 
	#SSL_F_SSL3_ACCEPT
 128

	)

2663 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2664 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2665 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2666 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2667 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2668 
	#SSL_F_SSL3_CHECK_FINISHED
 339

	)

2669 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2670 
	#SSL_F_SSL3_CONNECT
 132

	)

2671 
	#SSL_F_SSL3_CTRL
 213

	)

2672 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2673 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2674 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2675 
	#SSL_F_SSL3_ENC
 134

	)

2676 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2677 
	#SSL_F_SSL3_GENERATE_MASTER_SECRET
 388

	)

2678 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2679 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2680 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2681 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2682 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2683 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2684 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2685 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2686 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2687 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2688 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2689 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2690 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2691 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2692 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2693 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2694 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2695 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2696 
	#SSL_F_SSL3_PEEK
 235

	)

2697 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2698 
	#SSL_F_SSL3_READ_N
 149

	)

2699 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2700 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2701 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2702 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2703 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2704 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2705 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2706 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2707 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2708 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2709 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2710 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2711 
	#SSL_F_SSL_ADD_CERT_CHAIN
 318

	)

2712 
	#SSL_F_SSL_ADD_CERT_TO_BUF
 319

	)

2713 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2714 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2715 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2716 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2717 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2718 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2719 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2720 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2721 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2722 
	#SSL_F_SSL_BUILD_CERT_CHAIN
 332

	)

2723 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2724 
	#SSL_F_SSL_CERT_DUP
 221

	)

2725 
	#SSL_F_SSL_CERT_INST
 222

	)

2726 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2727 
	#SSL_F_SSL_CERT_NEW
 162

	)

2728 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2729 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2730 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2731 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2732 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2733 
	#SSL_F_SSL_CLEAR
 164

	)

2734 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2735 
	#SSL_F_SSL_CONF_CMD
 334

	)

2736 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2737 
	#SSL_F_SSL_CTRL
 232

	)

2738 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2739 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2740 
	#SSL_F_SSL_CTX_NEW
 169

	)

2741 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2742 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2743 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2744 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2745 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2746 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2747 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2748 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2749 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2750 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2751 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2752 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2753 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2754 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2755 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2756 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2757 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2758 
	#SSL_F_SSL_CTX_USE_SERVERINFO
 336

	)

2759 
	#SSL_F_SSL_CTX_USE_SERVERINFO_FILE
 337

	)

2760 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2761 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2762 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2763 
	#SSL_F_SSL_GET_SERVER_CERT_INDEX
 322

	)

2764 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2765 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2766 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2767 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2768 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2769 
	#SSL_F_SSL_NEW
 186

	)

2770 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2771 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2772 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2773 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2774 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2775 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2776 
	#SSL_F_SSL_PEEK
 270

	)

2777 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2778 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2779 
	#SSL_F_SSL_READ
 223

	)

2780 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2781 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2782 
	#SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT
 320

	)

2783 
	#SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT
 321

	)

2784 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2785 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2786 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2787 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2788 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2789 
	#SSL_F_SSL_SET_CERT
 191

	)

2790 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2791 
	#SSL_F_SSL_SET_FD
 192

	)

2792 
	#SSL_F_SSL_SET_PKEY
 193

	)

2793 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2794 
	#SSL_F_SSL_SET_RFD
 194

	)

2795 
	#SSL_F_SSL_SET_SESSION
 195

	)

2796 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2797 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2798 
	#SSL_F_SSL_SET_TRUST
 228

	)

2799 
	#SSL_F_SSL_SET_WFD
 196

	)

2800 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2801 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2802 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2803 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2804 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2805 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2806 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2807 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2808 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2809 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2810 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2811 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2812 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2813 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2814 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2815 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2816 
	#SSL_F_SSL_WRITE
 208

	)

2817 
	#SSL_F_TLS12_CHECK_PEER_SIGALG
 333

	)

2818 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2819 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2820 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2821 
	#SSL_F_TLS1_ENC
 210

	)

2822 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2823 
	#SSL_F_TLS1_GET_CURVELIST
 338

	)

2824 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2825 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2826 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2827 
	#SSL_F_TLS1_PRF
 284

	)

2828 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2829 
	#SSL_F_TLS1_SET_SERVER_SIGALGS
 335

	)

2830 
	#SSL_F_WRITE_PENDING
 212

	)

2833 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2834 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2835 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2836 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2837 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2838 
	#SSL_R_BAD_CHECKSUM
 104

	)

2839 
	#SSL_R_BAD_DATA
 390

	)

2840 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2841 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2842 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2843 
	#SSL_R_BAD_DH_G_VALUE
 375

	)

2844 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2845 
	#SSL_R_BAD_DH_PUB_KEY_VALUE
 393

	)

2846 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2847 
	#SSL_R_BAD_DH_P_VALUE
 395

	)

2848 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2849 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2850 
	#SSL_R_BAD_ECC_CERT
 304

	)

2851 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2852 
	#SSL_R_BAD_ECPOINT
 306

	)

2853 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2854 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2855 
	#SSL_R_BAD_LENGTH
 271

	)

2856 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2857 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2858 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2859 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2860 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2861 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2862 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2863 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2864 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2865 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2866 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2867 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2868 
	#SSL_R_BAD_SIGNATURE
 123

	)

2869 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2870 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2871 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2872 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2873 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

2874 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2875 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2876 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2877 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2878 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2879 
	#SSL_R_BAD_STATE
 126

	)

2880 
	#SSL_R_BAD_VALUE
 384

	)

2881 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2882 
	#SSL_R_BIO_NOT_SET
 128

	)

2883 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2884 
	#SSL_R_BN_LIB
 130

	)

2885 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2886 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2887 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2888 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2889 
	#SSL_R_CERT_CB_ERROR
 377

	)

2890 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2891 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2892 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2893 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2894 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2895 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2896 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2897 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2898 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2899 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2900 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2901 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2902 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2903 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2904 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2905 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2906 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2907 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2908 
	#SSL_R_DH_KEY_TOO_SMALL
 372

	)

2909 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2910 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2911 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2912 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2913 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2914 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2915 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2916 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2917 
	#SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE
 374

	)

2918 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2919 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2920 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2921 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2922 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2923 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2924 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2925 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2926 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2927 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2928 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2929 
	#SSL_R_HTTP_REQUEST
 156

	)

2930 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2931 
	#SSL_R_ILLEGAL_SUITEB_DIGEST
 380

	)

2932 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2933 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2934 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2935 
	#SSL_R_INVALID_COMMAND
 280

	)

2936 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2937 
	#SSL_R_INVALID_NULL_CMD_NAME
 385

	)

2938 
	#SSL_R_INVALID_PURPOSE
 278

	)

2939 
	#SSL_R_INVALID_SERVERINFO_DATA
 388

	)

2940 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2941 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2942 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2943 
	#SSL_R_INVALID_TRUST
 279

	)

2944 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2945 
	#SSL_R_KRB5
 285

	)

2946 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2947 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2948 
	#SSL_R_KRB5_C_INIT
 288

	)

2949 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2950 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2951 
	#SSL_R_KRB5_S_INIT
 291

	)

2952 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2953 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2954 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2955 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2956 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2957 
	#SSL_R_LENGTH_TOO_LONG
 404

	)

2958 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2959 
	#SSL_R_LIBRARY_BUG
 274

	)

2960 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2961 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2962 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2963 
	#SSL_R_MISSING_DH_KEY
 163

	)

2964 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2965 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2966 
	#SSL_R_MISSING_ECDH_CERT
 382

	)

2967 
	#SSL_R_MISSING_ECDSA_SIGNING_CERT
 381

	)

2968 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2969 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2970 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2971 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2972 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2973 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2974 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2975 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2976 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2977 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2978 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2979 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2980 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2981 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2982 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2983 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2984 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2985 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2986 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2987 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2988 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2989 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2990 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2991 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2992 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2993 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2994 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2995 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2996 
	#SSL_R_NO_PEM_EXTENSIONS
 389

	)

2997 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2998 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2999 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

3000 
	#SSL_R_NO_PUBLICKEY
 192

	)

3001 
	#SSL_R_NO_RENEGOTIATION
 339

	)

3002 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

3003 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

3004 
	#SSL_R_NO_SHARED_SIGATURE_ALGORITHMS
 376

	)

3005 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

3006 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

3007 
	#SSL_R_NULL_SSL_CTX
 195

	)

3008 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

3009 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

3010 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

3011 
	#SSL_R_ONLY_DTLS_1_2_ALLOWED_IN_SUITEB_MODE
 387

	)

3012 
	#SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE
 379

	)

3013 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

3014 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

3015 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

3016 
	#SSL_R_PARSE_TLSEXT
 227

	)

3017 
	#SSL_R_PATH_TOO_LONG
 270

	)

3018 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

3019 
	#SSL_R_PEER_ERROR
 200

	)

3020 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

3021 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

3022 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

3023 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

3024 
	#SSL_R_PEM_NAME_BAD_PREFIX
 391

	)

3025 
	#SSL_R_PEM_NAME_TOO_SHORT
 392

	)

3026 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

3027 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

3028 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

3029 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

3030 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

3031 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

3032 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

3033 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

3034 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

3035 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

3036 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

3037 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

3038 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

3039 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

3040 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

3041 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

3042 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

3043 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

3044 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

3045 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

3046 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

3047 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

3048 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

3049 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

3050 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

3051 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

3052 
	#SSL_R_SHORT_READ
 219

	)

3053 
	#SSL_R_SHUTDOWN_WHILE_IN_INIT
 407

	)

3054 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

3055 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

3056 
	#SSL_R_SRP_A_CALC
 361

	)

3057 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

3058 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

3059 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

3060 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

3061 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

3062 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

3063 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

3064 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

3065 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

3066 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

3067 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

3068 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

3069 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

3070 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

3071 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

3072 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

3073 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

3074 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

3075 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

3076 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

3077 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

3078 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

3079 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

3080 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

3081 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

3082 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

3083 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

3084 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

3085 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

3086 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

3087 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

3088 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

3089 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

3090 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

3091 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

3092 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

3093 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

3094 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

3095 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

3096 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

3097 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

3098 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

3099 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

3100 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

3101 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

3102 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

3103 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

3104 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

3105 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

3106 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

3107 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

3108 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

3109 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

3110 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

3111 
	#SSL_R_TOO_MANY_WARN_ALERTS
 409

	)

3112 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

3113 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

3114 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

3115 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

3116 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

3117 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

3118 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

3119 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

3120 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

3121 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

3122 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

3123 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

3124 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

3125 
	#SSL_R_UNINITIALIZED
 276

	)

3126 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

3127 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

3128 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

3129 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

3130 
	#SSL_R_UNKNOWN_CMD_NAME
 386

	)

3131 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

3132 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

3133 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

3134 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

3135 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

3136 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

3137 
	#SSL_R_UNKNOWN_STATE
 255

	)

3138 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

3139 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

3140 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

3141 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

3142 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

3143 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

3144 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

3145 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

3146 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

3147 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

3148 
	#SSL_R_WRONG_CERTIFICATE_TYPE
 383

	)

3149 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

3150 
	#SSL_R_WRONG_CURVE
 378

	)

3151 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

3152 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

3153 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

3154 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

3155 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

3156 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

3157 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

3158 
	#SSL_R_X509_LIB
 268

	)

3159 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

3161 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

60 #i‚de‡
HEADER_UI_H


61 
	#HEADER_UI_H


	)

63 #i‚de‡
OPENSSL_NO_DEPRECATED


64 
	~<›ís¶/¸y±o.h
>

66 
	~<›ís¶/ß„°ack.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


85 
UI
 *
UI_√w
();

86 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

87 
UI_‰ì
(
UI
 *
ui
);

132 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
);

136 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
,

138 c⁄° *
ã°_buf
);

139 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

140 *
ªsu…_buf
, 
mösize
, 
maxsize
,

141 c⁄° *
ã°_buf
);

142 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

143 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

144 
Êags
, *
ªsu…_buf
);

145 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

146 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

147 
Êags
, *
ªsu…_buf
);

148 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

149 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

150 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

155 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

163 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

175 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

195 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

196 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

209 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

211 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

214 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

217 
UI_¥o˚ss
(
UI
 *
ui
);

224 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
) ());

232 
	#UI_CTRL_PRINT_ERRORS
 1

	)

238 
	#UI_CTRL_IS_REDOABLE
 2

	)

241 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

242 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

243 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

244 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

245 
UI_£t_ex_d©a
(
UI
 *
r
, 
idx
, *
¨g
);

246 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

249 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

250 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

251 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

252 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

255 
UI_METHOD
 *
UI_O≥nSSL
();

304 
ui_°rög_°
 
	tUI_STRING
;

305 
DECLARE_STACK_OF
(
UI_STRING
)

311 
	eUI_°rög_ty≥s
 {

312 
UIT_NONE
 = 0,

313 
UIT_PROMPT
,

314 
UIT_VERIFY
,

315 
UIT_BOOLEAN
,

316 
UIT_INFO
,

317 
UIT_ERROR


321 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

322 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

323 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
Ë(
UI
 *
ui
));

324 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
,

325 (*
wrôî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

326 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
Ë(
UI
 *
ui
));

327 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
,

328 (*
ªadî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

329 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
Ë(
UI
 *
ui
));

330 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
,

331 *(*
¥om±_c⁄°ru˘‹
Ë(
UI
 *
ui
,

333 *
obje˘_desc
,

335 *
obje˘_«me
));

336 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

337 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

338 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

339 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

340 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

341 *(*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *,

351 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

353 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

355 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

360 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

362 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

366 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

368 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

370 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

372 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

375 
UI_UTIL_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
,

376 
vîify
);

377 
UI_UTIL_ªad_pw
(*
buf
, *
buff
, 
size
, c⁄° *
¥om±
,

378 
vîify
);

385 
ERR_lﬂd_UI_°rögs
();

390 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

391 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

392 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

393 
	#UI_F_UI_CTRL
 111

	)

394 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

395 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

396 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

397 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

398 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

399 
	#UI_F_UI_GET0_RESULT
 107

	)

400 
	#UI_F_UI_NEW_METHOD
 104

	)

401 
	#UI_F_UI_SET_RESULT
 105

	)

404 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

405 
	#UI_R_INDEX_TOO_LARGE
 102

	)

406 
	#UI_R_INDEX_TOO_SMALL
 103

	)

407 
	#UI_R_NO_RESULT_BUFFER
 105

	)

408 
	#UI_R_RESULT_TOO_LARGE
 100

	)

409 
	#UI_R_RESULT_TOO_SMALL
 101

	)

410 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

412 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

59 #i‚de‡
HEADER_X509V3_H


60 
	#HEADER_X509V3_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/x509.h
>

64 
	~<›ís¶/c⁄f.h
>

66 #ifde‡
__˝lu•lus


70 #ifde‡
OPENSSL_SYS_WIN32


72 #unde‡
X509_NAME


73 #unde‡
X509_CERT_PAIR


74 #unde‡
X509_EXTENSIONS


78 
v3_ext_mëhod
;

79 
v3_ext_˘x
;

83 *(*
	tX509V3_EXT_NEW
)();

84 (*
X509V3_EXT_FREE
) (*);

85 *(*
	tX509V3_EXT_D2I
)(*, const **, );

86 (*
X509V3_EXT_I2D
) (*, **);

87 
STACK_OF
(
	tCONF_VALUE
) *

88 (*
	tX509V3_EXT_I2V
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

90 *(*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
,

92 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

93 *(*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

94 *
	text
);

95 *(*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

96 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

97 (*
X509V3_EXT_I2R
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

98 
	tBIO
 *
	tout
, 
	tödít
);

99 *(*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

100 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

104 
	sv3_ext_mëhod
 {

105 
ext_nid
;

106 
ext_Êags
;

108 
ASN1_ITEM_EXP
 *
ô
;

110 
X509V3_EXT_NEW
 
ext_√w
;

111 
X509V3_EXT_FREE
 
ext_‰ì
;

112 
X509V3_EXT_D2I
 
d2i
;

113 
X509V3_EXT_I2D
 
i2d
;

115 
X509V3_EXT_I2S
 
i2s
;

116 
X509V3_EXT_S2I
 
s2i
;

118 
X509V3_EXT_I2V
 
i2v
;

119 
X509V3_EXT_V2I
 
v2i
;

121 
X509V3_EXT_I2R
 
i2r
;

122 
X509V3_EXT_R2I
 
r2i
;

123 *
u§_d©a
;

126 
	sX509V3_CONF_METHOD_°
 {

127 *(*
gë_°rög
Ë(*
db
, *
£˘i⁄
, *
vÆue
);

128 
STACK_OF
(
CONF_VALUE
Ë*(*
gë_£˘i⁄
Ë(*
db
, *
£˘i⁄
);

129 (*
‰ì_°rög
Ë(*
db
, *
°rög
);

130 (*
‰ì_£˘i⁄
Ë(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

131 } 
	tX509V3_CONF_METHOD
;

134 
	sv3_ext_˘x
 {

135 
	#CTX_TEST
 0x1

	)

136 
Êags
;

137 
X509
 *
issuî_˚π
;

138 
X509
 *
subje˘_˚π
;

139 
X509_REQ
 *
subje˘_ªq
;

140 
X509_CRL
 *
¸l
;

141 
X509V3_CONF_METHOD
 *
db_mëh
;

142 *
db
;

146 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

148 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

151 
	#X509V3_EXT_DYNAMIC
 0x1

	)

152 
	#X509V3_EXT_CTX_DEP
 0x2

	)

153 
	#X509V3_EXT_MULTILINE
 0x4

	)

155 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

157 
	sBASIC_CONSTRAINTS_°
 {

158 
ˇ
;

159 
ASN1_INTEGER
 *
∑thÀn
;

160 } 
	tBASIC_CONSTRAINTS
;

162 
	sPKEY_USAGE_PERIOD_°
 {

163 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

164 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

165 } 
	tPKEY_USAGE_PERIOD
;

167 
	sŸhîName_°
 {

168 
ASN1_OBJECT
 *
ty≥_id
;

169 
ASN1_TYPE
 *
vÆue
;

170 } 
	tOTHERNAME
;

172 
	sEDIP¨tyName_°
 {

173 
ASN1_STRING
 *
«meAssig√r
;

174 
ASN1_STRING
 *
∑πyName
;

175 } 
	tEDIPARTYNAME
;

177 
	sGENERAL_NAME_°
 {

178 
	#GEN_OTHERNAME
 0

	)

179 
	#GEN_EMAIL
 1

	)

180 
	#GEN_DNS
 2

	)

181 
	#GEN_X400
 3

	)

182 
	#GEN_DIRNAME
 4

	)

183 
	#GEN_EDIPARTY
 5

	)

184 
	#GEN_URI
 6

	)

185 
	#GEN_IPADD
 7

	)

186 
	#GEN_RID
 8

	)

187 
ty≥
;

189 *
±r
;

190 
OTHERNAME
 *
ŸhîName
;

191 
ASN1_IA5STRING
 *
rfc822Name
;

192 
ASN1_IA5STRING
 *
dNSName
;

193 
ASN1_TYPE
 *
x400Addªss
;

194 
X509_NAME
 *
dúe˘‹yName
;

195 
EDIPARTYNAME
 *
ediP¨tyName
;

196 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

197 
ASN1_OCTET_STRING
 *
iPAddªss
;

198 
ASN1_OBJECT
 *
ªgi°îedID
;

200 
ASN1_OCTET_STRING
 *
ù
;

201 
X509_NAME
 *
dún
;

202 
ASN1_IA5STRING
 *
ü5
;

204 
ASN1_OBJECT
 *
rid
;

205 
ASN1_TYPE
 *
Ÿhî
;

206 } 
d
;

207 } 
	tGENERAL_NAME
;

209 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

211 
	sACCESS_DESCRIPTION_°
 {

212 
ASN1_OBJECT
 *
mëhod
;

213 
GENERAL_NAME
 *
loˇti⁄
;

214 } 
	tACCESS_DESCRIPTION
;

216 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

218 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

220 
DECLARE_STACK_OF
(
GENERAL_NAME
)

221 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

223 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

224 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

226 
	sDIST_POINT_NAME_°
 {

227 
ty≥
;

229 
GENERAL_NAMES
 *
fuŒ«me
;

230 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

231 } 
«me
;

233 
X509_NAME
 *
d≤ame
;

234 } 
	tDIST_POINT_NAME
;

236 
	#CRLDP_ALL_REASONS
 0x807f

	)

238 
	#CRL_REASON_NONE
 -1

	)

239 
	#CRL_REASON_UNSPECIFIED
 0

	)

240 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

241 
	#CRL_REASON_CA_COMPROMISE
 2

	)

242 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

243 
	#CRL_REASON_SUPERSEDED
 4

	)

244 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

245 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

246 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

247 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

248 
	#CRL_REASON_AA_COMPROMISE
 10

	)

250 
	sDIST_POINT_°
 {

251 
DIST_POINT_NAME
 *
di°poöt
;

252 
ASN1_BIT_STRING
 *
ªas⁄s
;

253 
GENERAL_NAMES
 *
CRLissuî
;

254 
dp_ªas⁄s
;

257 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

259 
DECLARE_STACK_OF
(
DIST_POINT
)

260 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

262 
	sAUTHORITY_KEYID_°
 {

263 
ASN1_OCTET_STRING
 *
keyid
;

264 
GENERAL_NAMES
 *
issuî
;

265 
ASN1_INTEGER
 *
£rül
;

270 
	sSXNET_ID_°
 {

271 
ASN1_INTEGER
 *
z⁄e
;

272 
ASN1_OCTET_STRING
 *
u£r
;

273 } 
	tSXNETID
;

275 
DECLARE_STACK_OF
(
SXNETID
)

276 
DECLARE_ASN1_SET_OF
(
SXNETID
)

278 
	sSXNET_°
 {

279 
ASN1_INTEGER
 *
vîsi⁄
;

280 
STACK_OF
(
SXNETID
Ë*
ids
;

281 } 
	tSXNET
;

283 
	sNOTICEREF_°
 {

284 
ASN1_STRING
 *
‹g™iz©i⁄
;

285 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

286 } 
	tNOTICEREF
;

288 
	sUSERNOTICE_°
 {

289 
NOTICEREF
 *
nŸi˚ªf
;

290 
ASN1_STRING
 *
ex±ext
;

291 } 
	tUSERNOTICE
;

293 
	sPOLICYQUALINFO_°
 {

294 
ASN1_OBJECT
 *
pquÆid
;

296 
ASN1_IA5STRING
 *
˝suri
;

297 
USERNOTICE
 *
u£∫Ÿi˚
;

298 
ASN1_TYPE
 *
Ÿhî
;

299 } 
d
;

300 } 
	tPOLICYQUALINFO
;

302 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

303 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

305 
	sPOLICYINFO_°
 {

306 
ASN1_OBJECT
 *
pﬁicyid
;

307 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

308 } 
	tPOLICYINFO
;

310 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

312 
DECLARE_STACK_OF
(
POLICYINFO
)

313 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

315 
	sPOLICY_MAPPING_°
 {

316 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

317 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

318 } 
	tPOLICY_MAPPING
;

320 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

322 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

324 
	sGENERAL_SUBTREE_°
 {

325 
GENERAL_NAME
 *
ba£
;

326 
ASN1_INTEGER
 *
möimum
;

327 
ASN1_INTEGER
 *
maximum
;

328 } 
	tGENERAL_SUBTREE
;

330 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

332 
	sNAME_CONSTRAINTS_°
 {

333 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

334 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

337 
	sPOLICY_CONSTRAINTS_°
 {

338 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

339 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

340 } 
	tPOLICY_CONSTRAINTS
;

343 
	sPROXY_POLICY_°
 {

344 
ASN1_OBJECT
 *
pﬁicyL™guage
;

345 
ASN1_OCTET_STRING
 *
pﬁicy
;

346 } 
	tPROXY_POLICY
;

348 
	sPROXY_CERT_INFO_EXTENSION_°
 {

349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°
 {

357 
DIST_POINT_NAME
 *
di°poöt
;

358 
⁄lyu£r
;

359 
⁄lyCA
;

360 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

361 
ödúe˘CRL
;

362 
⁄ly©å
;

367 
	#IDP_PRESENT
 0x1

	)

369 
	#IDP_INVALID
 0x2

	)

371 
	#IDP_ONLYUSER
 0x4

	)

373 
	#IDP_ONLYCA
 0x8

	)

375 
	#IDP_ONLYATTR
 0x10

	)

377 
	#IDP_INDIRECT
 0x20

	)

379 
	#IDP_REASONS
 0x40

	)

381 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

382 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

384 
	#X509V3_£t_˘x_ã°
(
˘x
) \

385 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

386 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

388 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

391 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

392 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

393 
NULL
, NULL, \

394 
èbÀ
}

	)

396 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

398 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

399 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

401 
NULL
}

	)

403 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

407 
	#EXFLAG_BCONS
 0x1

	)

408 
	#EXFLAG_KUSAGE
 0x2

	)

409 
	#EXFLAG_XKUSAGE
 0x4

	)

410 
	#EXFLAG_NSCERT
 0x8

	)

412 
	#EXFLAG_CA
 0x10

	)

414 
	#EXFLAG_SI
 0x20

	)

415 
	#EXFLAG_V1
 0x40

	)

416 
	#EXFLAG_INVALID
 0x80

	)

417 
	#EXFLAG_SET
 0x100

	)

418 
	#EXFLAG_CRITICAL
 0x200

	)

419 
	#EXFLAG_PROXY
 0x400

	)

421 
	#EXFLAG_INVALID_POLICY
 0x800

	)

422 
	#EXFLAG_FRESHEST
 0x1000

	)

424 
	#EXFLAG_SS
 0x2000

	)

426 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

427 
	#KU_NON_REPUDIATION
 0x0040

	)

428 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

429 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

430 
	#KU_KEY_AGREEMENT
 0x0008

	)

431 
	#KU_KEY_CERT_SIGN
 0x0004

	)

432 
	#KU_CRL_SIGN
 0x0002

	)

433 
	#KU_ENCIPHER_ONLY
 0x0001

	)

434 
	#KU_DECIPHER_ONLY
 0x8000

	)

436 
	#NS_SSL_CLIENT
 0x80

	)

437 
	#NS_SSL_SERVER
 0x40

	)

438 
	#NS_SMIME
 0x20

	)

439 
	#NS_OBJSIGN
 0x10

	)

440 
	#NS_SSL_CA
 0x04

	)

441 
	#NS_SMIME_CA
 0x02

	)

442 
	#NS_OBJSIGN_CA
 0x01

	)

443 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

445 
	#XKU_SSL_SERVER
 0x1

	)

446 
	#XKU_SSL_CLIENT
 0x2

	)

447 
	#XKU_SMIME
 0x4

	)

448 
	#XKU_CODE_SIGN
 0x8

	)

449 
	#XKU_SGC
 0x10

	)

450 
	#XKU_OCSP_SIGN
 0x20

	)

451 
	#XKU_TIMESTAMP
 0x40

	)

452 
	#XKU_DVCS
 0x80

	)

453 
	#XKU_ANYEKU
 0x100

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
Ë(c⁄° 
x509_puΩo£_°
 *, c⁄° 
X509
 *, );

463 *
«me
;

464 *
¢ame
;

465 *
u§_d©a
;

466 } 
	tX509_PURPOSE
;

468 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

469 
	#X509_PURPOSE_SSL_SERVER
 2

	)

470 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

471 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

472 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

473 
	#X509_PURPOSE_CRL_SIGN
 6

	)

474 
	#X509_PURPOSE_ANY
 7

	)

475 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

476 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

478 
	#X509_PURPOSE_MIN
 1

	)

479 
	#X509_PURPOSE_MAX
 9

	)

483 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

485 
	#X509V3_EXT_DEFAULT
 0

	)

487 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

489 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

491 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

495 
	#X509V3_ADD_OP_MASK
 0xfL

	)

496 
	#X509V3_ADD_DEFAULT
 0L

	)

497 
	#X509V3_ADD_APPEND
 1L

	)

498 
	#X509V3_ADD_REPLACE
 2L

	)

499 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

500 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

501 
	#X509V3_ADD_DELETE
 5L

	)

502 
	#X509V3_ADD_SILENT
 0x10

	)

504 
DECLARE_STACK_OF
(
X509_PURPOSE
)

506 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

508 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

511 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

512 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
,

513 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
,

515 
u£æí
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

519 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

521 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

523 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

525 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

526 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

527 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

529 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

530 
X509V3_CTX
 *
˘x
,

531 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
,

537 
GENERAL_NAME
 *
gí
,

538 
STACK_OF
(
CONF_VALUE
Ë*
ªt
);

539 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

541 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

543 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

544 
GENERAL_NAMES
 *
gí
,

545 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

546 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

547 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

549 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

550 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

551 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

552 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

553 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

554 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

555 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

556 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

557 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

559 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

560 
ASN1_OCTET_STRING
 *
ü5
);

561 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

562 
X509V3_CTX
 *
˘x
, *
°r
);

564 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

565 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
 *
a
);

567 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

568 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

569 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

570 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

571 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

573 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

574 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

575 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

576 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

578 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

580 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

582 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

583 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

585 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

586 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

587 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

589 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

592 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

593 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

595 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

596 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

598 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

599 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

600 
X509V3_CTX
 *
˘x
, 
gí_ty≥
, *
vÆue
,

601 
is_nc
);

603 #ifde‡
HEADER_CONF_H


604 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

605 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
);

606 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

607 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

608 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
,

609 
is_nc
);

610 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

612 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
,

613 *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
,

615 *
vÆue
);

616 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

617 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

618 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

619 
X509
 *
˚π
);

620 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

621 
X509_REQ
 *
ªq
);

622 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

623 
X509_CRL
 *
¸l
);

625 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,

626 
X509V3_CTX
 *
˘x
, 
ext_nid
,

627 *
vÆue
);

628 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

629 *
«me
, *
vÆue
);

630 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

631 *
£˘i⁄
, 
X509
 *
˚π
);

632 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

633 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

634 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

635 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

637 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

638 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

639 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

640 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

641 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

642 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

645 *
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

646 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

647 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

648 
X509V3_£˘i⁄_‰ì
(
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

649 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

650 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

652 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

653 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

654 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

655 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

656 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

657 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

658 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

659 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

660 *
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

661 
ASN1_INTEGER
 *
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

662 *
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

663 *
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
,

664 
ASN1_ENUMERATED
 *
aöt
);

665 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

666 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

667 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

668 
X509V3_EXT_˛ónup
();

670 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

671 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

672 
X509V3_add_°™d¨d_exãnsi⁄s
();

673 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

674 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

675 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
,

676 *
idx
);

677 
X509V3_EXT_‰ì
(
nid
, *
ext_d©a
);

679 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

680 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
,

681 
¸ô
, 
Êags
);

683 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

684 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

685 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

687 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

688 
ml
);

689 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
,

690 
ödít
);

691 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

693 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
,

694 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

695 
Êag
, 
ödít
);

697 
X509_check_ˇ
(
X509
 *
x
);

698 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

699 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

700 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

701 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

702 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

703 
X509_PURPOSE_gë_cou¡
();

704 
X509_PURPOSE
 *
X509_PURPOSE_gë0
(
idx
);

705 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

706 
X509_PURPOSE_gë_by_id
(
id
);

707 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

708 (*
ck
Ë(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

709 *
«me
, *
¢ame
, *
¨g
);

710 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

711 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

712 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

713 
X509_PURPOSE_˛ónup
();

714 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

716 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

717 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

718 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

719 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

725 
	#X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
 0x1

	)

727 
	#X509_CHECK_FLAG_NO_WILDCARDS
 0x2

	)

729 
	#X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
 0x4

	)

731 
	#X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
 0x8

	)

733 
	#X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

739 
	#_X509_CHECK_FLAG_DOT_SUBDOMAINS
 0x8000

	)

741 
X509_check_ho°
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

742 
Êags
, **
≥î«me
);

743 
X509_check_emaû
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

744 
Êags
);

745 
X509_check_ù
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

746 
Êags
);

747 
X509_check_ù_asc
(
X509
 *
x
, c⁄° *
ùasc
, 
Êags
);

749 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

750 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

751 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

752 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

753 
chty≥
);

755 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

756 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

758 #i‚de‡
OPENSSL_NO_RFC3779


760 
	sASR™ge_°
 {

761 
ASN1_INTEGER
 *
mö
, *
max
;

762 } 
	tASR™ge
;

764 
	#ASIdOrR™ge_id
 0

	)

765 
	#ASIdOrR™ge_ønge
 1

	)

767 
	sASIdOrR™ge_°
 {

768 
ty≥
;

770 
ASN1_INTEGER
 *
id
;

771 
ASR™ge
 *
ønge
;

772 } 
u
;

773 } 
	tASIdOrR™ge
;

775 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

776 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

778 
	#ASIdítifõrChoi˚_öhîô
 0

	)

779 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

781 
	sASIdítifõrChoi˚_°
 {

782 
ty≥
;

784 
ASN1_NULL
 *
öhîô
;

785 
ASIdOrR™ges
 *
asIdsOrR™ges
;

786 } 
u
;

787 } 
	tASIdítifõrChoi˚
;

789 
	sASIdítifõrs_°
 {

790 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

791 } 
	tASIdítifõrs
;

793 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

794 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

795 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

796 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

798 
	sIPAddªssR™ge_°
 {

799 
ASN1_BIT_STRING
 *
mö
, *
max
;

800 } 
	tIPAddªssR™ge
;

802 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

803 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

805 
	sIPAddªssOrR™ge_°
 {

806 
ty≥
;

808 
ASN1_BIT_STRING
 *
addªssPªfix
;

809 
IPAddªssR™ge
 *
addªssR™ge
;

810 } 
u
;

811 } 
	tIPAddªssOrR™ge
;

813 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

814 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

816 
	#IPAddªssChoi˚_öhîô
 0

	)

817 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

819 
	sIPAddªssChoi˚_°
 {

820 
ty≥
;

822 
ASN1_NULL
 *
öhîô
;

823 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

824 } 
u
;

825 } 
	tIPAddªssChoi˚
;

827 
	sIPAddªssFamûy_°
 {

828 
ASN1_OCTET_STRING
 *
addªssFamûy
;

829 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

830 } 
	tIPAddªssFamûy
;

832 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

833 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

835 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

836 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

837 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

838 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

843 
	#V3_ASID_ASNUM
 0

	)

844 
	#V3_ASID_RDI
 1

	)

852 
	#IANA_AFI_IPV4
 1

	)

853 
	#IANA_AFI_IPV6
 2

	)

860 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

861 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

862 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

863 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

864 c⁄° 
afi
, c⁄° *
ßfi
);

865 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

866 c⁄° 
afi
, c⁄° *
ßfi
,

867 *
a
, c⁄° 
¥efixÀn
);

868 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

869 c⁄° 
afi
, c⁄° *
ßfi
,

870 *
mö
, *
max
);

871 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

872 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

873 *
mö
, *
max
,

874 c⁄° 
Àngth
);

879 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

880 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

881 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

882 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

887 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

888 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

889 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

890 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

895 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

896 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

897 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

898 
ASIdítifõrs
 *
ext
, 
Ælow_öhîô™˚
);

899 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

900 
IPAddrBlocks
 *
ext
, 
Ælow_öhîô™˚
);

909 
ERR_lﬂd_X509V3_°rögs
();

914 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

915 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

916 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

917 
	#X509V3_F_COPY_EMAIL
 122

	)

918 
	#X509V3_F_COPY_ISSUER
 123

	)

919 
	#X509V3_F_DO_DIRNAME
 144

	)

920 
	#X509V3_F_DO_EXT_CONF
 124

	)

921 
	#X509V3_F_DO_EXT_I2D
 135

	)

922 
	#X509V3_F_DO_EXT_NCONF
 151

	)

923 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

924 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

925 
	#X509V3_F_HEX_TO_STRING
 111

	)

926 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

927 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

928 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

929 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

930 
	#X509V3_F_NOTICE_SECTION
 132

	)

931 
	#X509V3_F_NREF_NOS
 133

	)

932 
	#X509V3_F_POLICY_SECTION
 131

	)

933 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

934 
	#X509V3_F_R2I_CERTPOL
 130

	)

935 
	#X509V3_F_R2I_PCI
 155

	)

936 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

937 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

938 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

939 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

940 
	#X509V3_F_S2I_SKEY_ID
 115

	)

941 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

942 
	#X509V3_F_STRING_TO_HEX
 113

	)

943 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

944 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

945 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

946 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

947 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

948 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

949 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

950 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

951 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

952 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

953 
	#X509V3_F_V2I_CRLD
 134

	)

954 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

955 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

956 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

957 
	#X509V3_F_V2I_IDP
 157

	)

958 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

959 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

960 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

961 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

962 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

963 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

964 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

965 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

966 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

967 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

968 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

969 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

970 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

971 
	#X509V3_F_X509V3_EXT_FREE
 165

	)

972 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

973 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

974 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

975 
	#X509V3_F_X509V3_GET_STRING
 143

	)

976 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

977 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

978 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

979 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

982 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

983 
	#X509V3_R_BAD_OBJECT
 119

	)

984 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

985 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

986 
	#X509V3_R_CANNOT_FIND_FREE_FUNCTION
 168

	)

987 
	#X509V3_R_DIRNAME_ERROR
 149

	)

988 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

989 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

990 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

991 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

992 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

993 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

994 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

995 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

996 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

997 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

998 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

999 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

1000 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

1001 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

1002 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

1003 
	#X509V3_R_INVALID_ASRANGE
 163

	)

1004 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

1005 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

1006 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

1007 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

1008 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

1009 
	#X509V3_R_INVALID_NAME
 106

	)

1010 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

1011 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

1012 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

1013 
	#X509V3_R_INVALID_NUMBER
 140

	)

1014 
	#X509V3_R_INVALID_NUMBERS
 141

	)

1015 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

1016 
	#X509V3_R_INVALID_OPTION
 138

	)

1017 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

1018 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

1019 
	#X509V3_R_INVALID_PURPOSE
 146

	)

1020 
	#X509V3_R_INVALID_SAFI
 164

	)

1021 
	#X509V3_R_INVALID_SECTION
 135

	)

1022 
	#X509V3_R_INVALID_SYNTAX
 143

	)

1023 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

1024 
	#X509V3_R_MISSING_VALUE
 124

	)

1025 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

1026 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

1027 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

1028 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

1029 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

1030 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

1031 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

1032 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

1033 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

1034 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

1035 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

1036 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

1037 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

1038 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

1039 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

1040 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

1041 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

1042 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

1043 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

1044 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

1045 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

1046 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

1047 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1048 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1049 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1050 
	#X509V3_R_USER_TOO_LONG
 132

	)

1052 #ifde‡ 
__˝lu•lus


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 
	#Â_nquîy
 
__Â_nquîy


	)

254 
	#Â_quîy
 
__Â_quîy


	)

255 
	#ho°Æüs
 
__ho°Æüs


	)

256 
	#p_quîy
 
__p_quîy


	)

257 
	#ªs_˛o£
 
__ªs_˛o£


	)

258 
	#ªs_öô
 
__ªs_öô


	)

259 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

260 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

261 
	#ªs_quîy
 
__ªs_quîy


	)

262 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

263 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

264 
	#ªs_£nd
 
__ªs_£nd


	)

266 
__BEGIN_DECLS


267 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

268 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

269 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

270 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

271 
	$ªs_˛o£
 (Ë
__THROW
;

272 
	$ªs_öô
 (Ë
__THROW
;

273 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

274 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

275 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

276 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

277 
	$ªs_quîydomaö
 (const *, const *, , ,

278 
u_ch¨
 *, Ë
__THROW
;

279 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

281 
__END_DECLS


283 
	#b64_¡›
 
__b64_¡›


	)

284 
	#b64_±⁄
 
__b64_±⁄


	)

285 
	#dn_comp
 
__dn_comp


	)

286 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

287 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

288 
	#dn_skù«me
 
__dn_skù«me


	)

289 
	#Â_ªs°©
 
__Â_ªs°©


	)

290 
	#loc_©⁄
 
__loc_©⁄


	)

291 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

292 
	#p_cd«me
 
__p_cd«me


	)

293 
	#p_cd¬ame
 
__p_cd¬ame


	)

294 
	#p_˛ass
 
__p_˛ass


	)

295 
	#p_fq«me
 
__p_fq«me


	)

296 
	#p_fq¬ame
 
__p_fq¬ame


	)

297 
	#p_›ti⁄
 
__p_›ti⁄


	)

298 
	#p_£c°od©e
 
__p_£c°od©e


	)

299 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

300 
	#p_time
 
__p_time


	)

301 
	#p_ty≥
 
__p_ty≥


	)

302 
	#p_rcode
 
__p_rcode


	)

303 
	#pué⁄g
 
__pué⁄g


	)

304 
	#putsh‹t
 
__putsh‹t


	)

305 
	#ªs_dnok
 
__ªs_dnok


	)

306 
	#ªs_hnok
 
__ªs_hnok


	)

307 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

308 
	#ªs_maûok
 
__ªs_maûok


	)

309 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

310 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

311 
	#ªs_nöô
 
__ªs_nöô


	)

312 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

313 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

314 
	#ªs_nquîy
 
__ªs_nquîy


	)

315 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

316 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

317 
	#ªs_n£nd
 
__ªs_n£nd


	)

318 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

319 
	#ªs_ownok
 
__ªs_ownok


	)

320 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

321 
	#ªs_øndomid
 
__ªs_øndomid


	)

322 
	#sym_¡›
 
__sym_¡›


	)

323 
	#sym_¡os
 
__sym_¡os


	)

324 
	#sym_°⁄
 
__sym_°⁄


	)

325 
__BEGIN_DECLS


326 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

327 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

328 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

330 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

331 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

332 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

333 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

334 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

335 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

336 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

337 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

338 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

339 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

340 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

341 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

342 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

343 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

344 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

345 
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

347 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

348 , *, Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

350 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

351 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

352 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

353 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

354 
__THROW
;

355 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

356 *, Ë
__THROW
;

357 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

358 
	$ªs_«meöquîy
 (const *, , ,

359 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

360 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

364 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

365 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

366 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

367 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

368 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

369 
__THROW
;

370 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

371 
__THROW
;

372 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

373 
__THROW
;

374 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

377 , 
u_ch¨
 *, Ë
__THROW
;

378 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

379 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

380 Ë
__THROW
;

381 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

382 
__THROW
;

383 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

384 
__END_DECLS


	@/usr/include/shadow.h

20 #i‚de‡
_SHADOW_H


21 
	#_SHADOW_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<∑ths.h
>

27 
	#__√ed_FILE


	)

28 
	~<°dio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 
	#SHADOW
 
_PATH_SHADOW


	)

36 
__BEGIN_DECLS


39 
	s•wd


41 *
	m•_«mp
;

42 *
	m•_pwdp
;

43 
	m•_l°chg
;

44 
	m•_mö
;

45 
	m•_max
;

46 
	m•_w¨n
;

48 
	m•_öa˘
;

50 
	m•_expúe
;

52 
	m•_Êag
;

62 
£t•ít
 ();

70 
íd•ít
 ();

78 
•wd
 *
gë•ít
 ();

86 
•wd
 *
gë•«m
 (c⁄° *
__«me
);

94 
•wd
 *
sgë•ít
 (c⁄° *
__°rög
);

102 
•wd
 *
fgë•ít
 (
FILE
 *
__°ªam
);

110 
put•ít
 (c⁄° 
•wd
 *
__p
, 
FILE
 *
__°ªam
);

113 #ifde‡
__USE_MISC


120 
gë•ít_r
 (
•wd
 *
__ªsu…_buf
, *
__buf„r
,

121 
size_t
 
__buÊí
, 
•wd
 **
__ªsu…
);

123 
gë•«m_r
 (c⁄° *
__«me
, 
•wd
 *
__ªsu…_buf
,

124 *
__buf„r
, 
size_t
 
__buÊí
,

125 
•wd
 **
__ªsu…
);

127 
sgë•ít_r
 (c⁄° *
__°rög
, 
•wd
 *
__ªsu…_buf
,

128 *
__buf„r
, 
size_t
 
__buÊí
,

129 
•wd
 **
__ªsu…
);

131 
fgë•ít_r
 (
FILE
 *
__°ªam
, 
•wd
 *
__ªsu…_buf
,

132 *
__buf„r
, 
size_t
 
__buÊí
,

133 
•wd
 **
__ªsu…
);

141 
	$lckpwdf
 (Ë
__THROW
;

144 
	$ulckpwdf
 (Ë
__THROW
;

146 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/stropts.h

18 #i‚de‡
_STROPTS_H


19 
	#_STROPTS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/xtôy≥s.h
>

25 #i‚de‡
__gid_t_deföed


26 
__gid_t
 
	tgid_t
;

27 
	#__gid_t_deföed


	)

30 #i‚de‡
__uid_t_deföed


31 
__uid_t
 
	tuid_t
;

32 
	#__uid_t_deföed


	)

35 
__t_sˇœr_t
 
	tt_sˇœr_t
;

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

74 c⁄° 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

81 c⁄° 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, c⁄° *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (c⁄° *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/utmp.h

18 #i‚def 
_UTMP_H


19 
	#_UTMP_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/utmp.h
>

32 
	#UTMP_FILE
 
_PATH_UTMP


	)

33 
	#UTMP_FILENAME
 
_PATH_UTMP


	)

34 
	#WTMP_FILE
 
_PATH_WTMP


	)

35 
	#WTMP_FILENAME
 
_PATH_WTMP


	)

41 
	$logö_ây
 (
__fd
Ë
__THROW
;

45 
	$logö
 (c⁄° 
utmp
 *
__íåy
Ë
__THROW
;

48 
	$logout
 (c⁄° *
__ut_löe
Ë
__THROW
;

51 
	$logwtmp
 (c⁄° *
__ut_löe
, c⁄° *
__ut_«me
,

52 c⁄° *
__ut_ho°
Ë
__THROW
;

55 
	$updwtmp
 (c⁄° *
__wtmp_fûe
, c⁄° 
utmp
 *
__utmp
)

56 
__THROW
;

59 
	$utm≤ame
 (c⁄° *
__fûe
Ë
__THROW
;

62 
utmp
 *
	$gëuã¡
 (Ë
__THROW
;

65 
	$£tuã¡
 (Ë
__THROW
;

68 
	$íduã¡
 (Ë
__THROW
;

72 
utmp
 *
	$gëutid
 (c⁄° 
utmp
 *
__id
Ë
__THROW
;

76 
utmp
 *
	$gëuéöe
 (c⁄° 
utmp
 *
__löe
Ë
__THROW
;

79 
utmp
 *
	$putuéöe
 (c⁄° 
utmp
 *
__utmp_±r
Ë
__THROW
;

82 #ifdef 
__USE_MISC


84 
	$gëuã¡_r
 (
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

86 
	$gëutid_r
 (c⁄° 
utmp
 *
__id
, utm∞*
__buf„r
,

87 
utmp
 **
__ªsu…
Ë
__THROW
;

89 
	$gëuéöe_r
 (c⁄° 
utmp
 *
__löe
,

90 
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

94 
__END_DECLS


	@/usr/include/utmpx.h

18 #i‚def 
_UTMPX_H


19 
	#_UTMPX_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/time.h
>

25 #i‚de‡
__pid_t_deföed


26 
__pid_t
 
	tpid_t
;

27 
	#__pid_t_deföed


	)

31 
	~<bôs/utmpx.h
>

33 #ifde‡
__USE_GNU


35 
	#UTMPX_FILE
 
_PATH_UTMPX


	)

36 
	#UTMPX_FILENAME
 
_PATH_UTMPX


	)

37 
	#WTMPX_FILE
 
_PATH_WTMPX


	)

38 
	#WTMPX_FILENAME
 
_PATH_WTMPX


	)

42 #ifde‡
__USE_GNU


43 
	gutmp
;

47 
__BEGIN_DECLS


53 
£tutxít
 ();

59 
ídutxít
 ();

65 
utmpx
 *
gëutxít
 ();

71 
utmpx
 *
gëutxid
 (c⁄° utmpx *
__id
);

77 
utmpx
 *
gëutxlöe
 (c⁄° utmpx *
__löe
);

83 
utmpx
 *
pututxlöe
 (c⁄° utmpx *
__utmpx
);

86 #ifde‡
__USE_GNU


93 
utmpx«me
 (c⁄° *
__fûe
);

101 
updwtmpx
 (c⁄° *
__wtmpx_fûe
,

102 c⁄° 
utmpx
 *
__utmpx
);

111 
gëutmp
 (c⁄° 
utmpx
 *
__utmpx
,

112 
utmp
 *
__utmp
);

120 
gëutmpx
 (c⁄° 
utmp
 *
__utmp
, 
utmpx
 *
__utmpx
);

123 
	g__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/atmapi.h

6 #i‚de‡
_LINUX_ATMAPI_H


7 
	#_LINUX_ATMAPI_H


	)

9 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__ü64__
)

12 
	#__ATM_API_ALIGN
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

14 
	#__ATM_API_ALIGN


	)

27 °ru˘ { 
	m_
[8]; } 
	t__ATM_API_ALIGN
 
	t©m_k±r_t
;

	@/usr/include/linux/atmioc.h

12 #i‚de‡
_LINUX_ATMIOC_H


13 
	#_LINUX_ATMIOC_H


	)

15 
	~<asm/io˘l.h
>

18 
	#ATMIOC_PHYCOM
 0x00

	)

19 
	#ATMIOC_PHYCOM_END
 0x0f

	)

20 
	#ATMIOC_PHYTYP
 0x10

	)

21 
	#ATMIOC_PHYTYP_END
 0x2f

	)

22 
	#ATMIOC_PHYPRV
 0x30

	)

23 
	#ATMIOC_PHYPRV_END
 0x4f

	)

24 
	#ATMIOC_SARCOM
 0x50

	)

25 
	#ATMIOC_SARCOM_END
 0x50

	)

26 
	#ATMIOC_SARPRV
 0x60

	)

27 
	#ATMIOC_SARPRV_END
 0x7f

	)

28 
	#ATMIOC_ITF
 0x80

	)

29 
	#ATMIOC_ITF_END
 0x8f

	)

30 
	#ATMIOC_BACKEND
 0x90

	)

31 
	#ATMIOC_BACKEND_END
 0xaf

	)

33 
	#ATMIOC_AREQUIPA
 0xc0

	)

34 
	#ATMIOC_LANE
 0xd0

	)

35 
	#ATMIOC_MPOA
 0xd8

	)

36 
	#ATMIOC_CLIP
 0xe0

	)

37 
	#ATMIOC_CLIP_END
 0xef

	)

38 
	#ATMIOC_SPECIAL
 0xf0

	)

39 
	#ATMIOC_SPECIAL_END
 0xff

	)

	@/usr/include/linux/bpf_common.h

1 #i‚de‡
__LINUX_BPF_COMMON_H__


2 
	#__LINUX_BPF_COMMON_H__


	)

5 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

6 
	#BPF_LD
 0x00

	)

7 
	#BPF_LDX
 0x01

	)

8 
	#BPF_ST
 0x02

	)

9 
	#BPF_STX
 0x03

	)

10 
	#BPF_ALU
 0x04

	)

11 
	#BPF_JMP
 0x05

	)

12 
	#BPF_RET
 0x06

	)

13 
	#BPF_MISC
 0x07

	)

16 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

17 
	#BPF_W
 0x00

	)

18 
	#BPF_H
 0x08

	)

19 
	#BPF_B
 0x10

	)

20 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

21 
	#BPF_IMM
 0x00

	)

22 
	#BPF_ABS
 0x20

	)

23 
	#BPF_IND
 0x40

	)

24 
	#BPF_MEM
 0x60

	)

25 
	#BPF_LEN
 0x80

	)

26 
	#BPF_MSH
 0xa0

	)

29 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

30 
	#BPF_ADD
 0x00

	)

31 
	#BPF_SUB
 0x10

	)

32 
	#BPF_MUL
 0x20

	)

33 
	#BPF_DIV
 0x30

	)

34 
	#BPF_OR
 0x40

	)

35 
	#BPF_AND
 0x50

	)

36 
	#BPF_LSH
 0x60

	)

37 
	#BPF_RSH
 0x70

	)

38 
	#BPF_NEG
 0x80

	)

39 
	#BPF_MOD
 0x90

	)

40 
	#BPF_XOR
 0xa0

	)

42 
	#BPF_JA
 0x00

	)

43 
	#BPF_JEQ
 0x10

	)

44 
	#BPF_JGT
 0x20

	)

45 
	#BPF_JGE
 0x30

	)

46 
	#BPF_JSET
 0x40

	)

47 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

48 
	#BPF_K
 0x00

	)

49 
	#BPF_X
 0x08

	)

51 #i‚de‡
BPF_MAXINSNS


52 
	#BPF_MAXINSNS
 4096

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/sockë.h
>

25 #i‡
__UAPI_DEF_IN_IPPROTO


28 
	mIPPROTO_IP
 = 0,

29 
	#IPPROTO_IP
 
IPPROTO_IP


	)

30 
	mIPPROTO_ICMP
 = 1,

31 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

32 
	mIPPROTO_IGMP
 = 2,

33 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

34 
	mIPPROTO_IPIP
 = 4,

35 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

36 
	mIPPROTO_TCP
 = 6,

37 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

38 
	mIPPROTO_EGP
 = 8,

39 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

40 
	mIPPROTO_PUP
 = 12,

41 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

42 
	mIPPROTO_UDP
 = 17,

43 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

44 
	mIPPROTO_IDP
 = 22,

45 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

46 
	mIPPROTO_TP
 = 29,

47 
	#IPPROTO_TP
 
IPPROTO_TP


	)

48 
	mIPPROTO_DCCP
 = 33,

49 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

50 
	mIPPROTO_IPV6
 = 41,

51 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

52 
	mIPPROTO_RSVP
 = 46,

53 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

54 
	mIPPROTO_GRE
 = 47,

55 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

56 
	mIPPROTO_ESP
 = 50,

57 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

58 
	mIPPROTO_AH
 = 51,

59 
	#IPPROTO_AH
 
IPPROTO_AH


	)

60 
	mIPPROTO_MTP
 = 92,

61 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

62 
	mIPPROTO_BEETPH
 = 94,

63 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

64 
	mIPPROTO_ENCAP
 = 98,

65 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

66 
	mIPPROTO_PIM
 = 103,

67 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

68 
	mIPPROTO_COMP
 = 108,

69 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

70 
	mIPPROTO_SCTP
 = 132,

71 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

72 
	mIPPROTO_UDPLITE
 = 136,

73 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

74 
	mIPPROTO_MPLS
 = 137,

75 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

76 
	mIPPROTO_RAW
 = 255,

77 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

78 
	mIPPROTO_MAX


82 #i‡
__UAPI_DEF_IN_ADDR


84 
	sö_addr
 {

85 
__be32
 
	ms_addr
;

89 
	#IP_TOS
 1

	)

90 
	#IP_TTL
 2

	)

91 
	#IP_HDRINCL
 3

	)

92 
	#IP_OPTIONS
 4

	)

93 
	#IP_ROUTER_ALERT
 5

	)

94 
	#IP_RECVOPTS
 6

	)

95 
	#IP_RETOPTS
 7

	)

96 
	#IP_PKTINFO
 8

	)

97 
	#IP_PKTOPTIONS
 9

	)

98 
	#IP_MTU_DISCOVER
 10

	)

99 
	#IP_RECVERR
 11

	)

100 
	#IP_RECVTTL
 12

	)

101 
	#IP_RECVTOS
 13

	)

102 
	#IP_MTU
 14

	)

103 
	#IP_FREEBIND
 15

	)

104 
	#IP_IPSEC_POLICY
 16

	)

105 
	#IP_XFRM_POLICY
 17

	)

106 
	#IP_PASSSEC
 18

	)

107 
	#IP_TRANSPARENT
 19

	)

110 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

113 
	#IP_ORIGDSTADDR
 20

	)

114 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

116 
	#IP_MINTTL
 21

	)

117 
	#IP_NODEFRAG
 22

	)

118 
	#IP_CHECKSUM
 23

	)

119 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

122 
	#IP_PMTUDISC_DONT
 0

	)

123 
	#IP_PMTUDISC_WANT
 1

	)

124 
	#IP_PMTUDISC_DO
 2

	)

125 
	#IP_PMTUDISC_PROBE
 3

	)

130 
	#IP_PMTUDISC_INTERFACE
 4

	)

134 
	#IP_PMTUDISC_OMIT
 5

	)

136 
	#IP_MULTICAST_IF
 32

	)

137 
	#IP_MULTICAST_TTL
 33

	)

138 
	#IP_MULTICAST_LOOP
 34

	)

139 
	#IP_ADD_MEMBERSHIP
 35

	)

140 
	#IP_DROP_MEMBERSHIP
 36

	)

141 
	#IP_UNBLOCK_SOURCE
 37

	)

142 
	#IP_BLOCK_SOURCE
 38

	)

143 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

144 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

145 
	#IP_MSFILTER
 41

	)

146 
	#MCAST_JOIN_GROUP
 42

	)

147 
	#MCAST_BLOCK_SOURCE
 43

	)

148 
	#MCAST_UNBLOCK_SOURCE
 44

	)

149 
	#MCAST_LEAVE_GROUP
 45

	)

150 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

151 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

152 
	#MCAST_MSFILTER
 48

	)

153 
	#IP_MULTICAST_ALL
 49

	)

154 
	#IP_UNICAST_IF
 50

	)

156 
	#MCAST_EXCLUDE
 0

	)

157 
	#MCAST_INCLUDE
 1

	)

160 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

161 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

165 #i‡
__UAPI_DEF_IP_MREQ


166 
	sù_mªq
 {

167 
ö_addr
 
	mimr_mu…üddr
;

168 
ö_addr
 
	mimr_öãrÁ˚
;

171 
	sù_mªqn
 {

172 
ö_addr
 
	mimr_mu…üddr
;

173 
ö_addr
 
	mimr_addªss
;

174 
	mimr_ifödex
;

177 
	sù_mªq_sour˚
 {

178 
__be32
 
	mimr_mu…üddr
;

179 
__be32
 
	mimr_öãrÁ˚
;

180 
__be32
 
	mimr_sour˚addr
;

183 
	sù_msfûãr
 {

184 
__be32
 
	mimsf_mu…üddr
;

185 
__be32
 
	mimsf_öãrÁ˚
;

186 
__u32
 
	mimsf_fmode
;

187 
__u32
 
	mimsf_num§c
;

188 
__be32
 
	mimsf_¶i°
[1];

191 
	#IP_MSFILTER_SIZE
(
num§c
) \

192 ((
ù_msfûãr
Ë- (
__u32
) \

193 + (
num§c
Ë* (
__u32
))

	)

195 
	sgroup_ªq
 {

196 
__u32
 
	mgr_öãrÁ˚
;

197 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

200 
	sgroup_sour˚_ªq
 {

201 
__u32
 
	mg§_öãrÁ˚
;

202 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

203 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

206 
	sgroup_fûãr
 {

207 
__u32
 
	mgf_öãrÁ˚
;

208 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

209 
__u32
 
	mgf_fmode
;

210 
__u32
 
	mgf_num§c
;

211 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

214 
	#GROUP_FILTER_SIZE
(
num§c
) \

215 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

216 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

219 #i‡
__UAPI_DEF_IN_PKTINFO


220 
	sö_pktöfo
 {

221 
	mùi_ifödex
;

222 
ö_addr
 
	mùi_•ec_d°
;

223 
ö_addr
 
	mùi_addr
;

228 #i‡ 
__UAPI_DEF_SOCKADDR_IN


229 
	#__SOCK_SIZE__
 16

	)

230 
	ssockaddr_ö
 {

231 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

232 
__be16
 
	msö_p‹t
;

233 
ö_addr
 
	msö_addr
;

236 
	m__∑d
[
__SOCK_SIZE__
 - () -

237 (Ë- (
ö_addr
)];

239 
	#sö_zîo
 
__∑d


	)

242 #i‡
__UAPI_DEF_IN_CLASS


248 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

249 
	#IN_CLASSA_NET
 0xff000000

	)

250 
	#IN_CLASSA_NSHIFT
 24

	)

251 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

252 
	#IN_CLASSA_MAX
 128

	)

254 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

255 
	#IN_CLASSB_NET
 0xffff0000

	)

256 
	#IN_CLASSB_NSHIFT
 16

	)

257 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

258 
	#IN_CLASSB_MAX
 65536

	)

260 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

261 
	#IN_CLASSC_NET
 0xffffff00

	)

262 
	#IN_CLASSC_NSHIFT
 8

	)

263 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

265 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

266 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

267 
	#IN_MULTICAST_NET
 0xF0000000

	)

269 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

270 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

273 
	#INADDR_ANY
 ((Ë0x00000000)

	)

276 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

279 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

282 
	#IN_LOOPBACKNET
 127

	)

285 
	#INADDR_LOOPBACK
 0x7f000001

	)

286 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

289 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

290 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

291 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

292 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

296 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_CALIPSO
 7

	)

147 
	#IPV6_TLV_JUMBO
 194

	)

148 
	#IPV6_TLV_HAO
 201

	)

153 #i‡
__UAPI_DEF_IPV6_OPTIONS


154 
	#IPV6_ADDRFORM
 1

	)

155 
	#IPV6_2292PKTINFO
 2

	)

156 
	#IPV6_2292HOPOPTS
 3

	)

157 
	#IPV6_2292DSTOPTS
 4

	)

158 
	#IPV6_2292RTHDR
 5

	)

159 
	#IPV6_2292PKTOPTIONS
 6

	)

160 
	#IPV6_CHECKSUM
 7

	)

161 
	#IPV6_2292HOPLIMIT
 8

	)

162 
	#IPV6_NEXTHOP
 9

	)

163 
	#IPV6_AUTHHDR
 10

	)

164 
	#IPV6_FLOWINFO
 11

	)

166 
	#IPV6_UNICAST_HOPS
 16

	)

167 
	#IPV6_MULTICAST_IF
 17

	)

168 
	#IPV6_MULTICAST_HOPS
 18

	)

169 
	#IPV6_MULTICAST_LOOP
 19

	)

170 
	#IPV6_ADD_MEMBERSHIP
 20

	)

171 
	#IPV6_DROP_MEMBERSHIP
 21

	)

172 
	#IPV6_ROUTER_ALERT
 22

	)

173 
	#IPV6_MTU_DISCOVER
 23

	)

174 
	#IPV6_MTU
 24

	)

175 
	#IPV6_RECVERR
 25

	)

176 
	#IPV6_V6ONLY
 26

	)

177 
	#IPV6_JOIN_ANYCAST
 27

	)

178 
	#IPV6_LEAVE_ANYCAST
 28

	)

181 
	#IPV6_PMTUDISC_DONT
 0

	)

182 
	#IPV6_PMTUDISC_WANT
 1

	)

183 
	#IPV6_PMTUDISC_DO
 2

	)

184 
	#IPV6_PMTUDISC_PROBE
 3

	)

188 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

192 
	#IPV6_PMTUDISC_OMIT
 5

	)

195 
	#IPV6_FLOWLABEL_MGR
 32

	)

196 
	#IPV6_FLOWINFO_SEND
 33

	)

198 
	#IPV6_IPSEC_POLICY
 34

	)

199 
	#IPV6_XFRM_POLICY
 35

	)

200 
	#IPV6_HDRINCL
 36

	)

222 
	#IPV6_RECVPKTINFO
 49

	)

223 
	#IPV6_PKTINFO
 50

	)

224 
	#IPV6_RECVHOPLIMIT
 51

	)

225 
	#IPV6_HOPLIMIT
 52

	)

226 
	#IPV6_RECVHOPOPTS
 53

	)

227 
	#IPV6_HOPOPTS
 54

	)

228 
	#IPV6_RTHDRDSTOPTS
 55

	)

229 
	#IPV6_RECVRTHDR
 56

	)

230 
	#IPV6_RTHDR
 57

	)

231 
	#IPV6_RECVDSTOPTS
 58

	)

232 
	#IPV6_DSTOPTS
 59

	)

233 
	#IPV6_RECVPATHMTU
 60

	)

234 
	#IPV6_PATHMTU
 61

	)

235 
	#IPV6_DONTFRAG
 62

	)

237 
	#IPV6_USE_MIN_MTU
 63

	)

253 
	#IPV6_RECVTCLASS
 66

	)

254 
	#IPV6_TCLASS
 67

	)

267 
	#IPV6_AUTOFLOWLABEL
 70

	)

269 
	#IPV6_ADDR_PREFERENCES
 72

	)

271 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

272 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

273 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

274 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

275 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

276 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

277 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

280 
	#IPV6_MINHOPCOUNT
 73

	)

282 
	#IPV6_ORIGDSTADDR
 74

	)

283 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

284 
	#IPV6_TRANSPARENT
 75

	)

285 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

60 
	#__UAPI_DEF_IF_IFCONF
 0

	)

61 
	#__UAPI_DEF_IF_IFMAP
 0

	)

62 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

63 
	#__UAPI_DEF_IF_IFREQ
 0

	)

65 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

67 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


68 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

77 
	#__UAPI_DEF_IF_IFCONF
 1

	)

78 
	#__UAPI_DEF_IF_IFMAP
 1

	)

79 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

80 
	#__UAPI_DEF_IF_IFREQ
 1

	)

82 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

84 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

89 #i‡
deföed
(
_NETINET_IN_H
)

93 
	#__UAPI_DEF_IN_ADDR
 0

	)

94 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

95 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

96 
	#__UAPI_DEF_IP_MREQ
 0

	)

97 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

98 
	#__UAPI_DEF_IN_CLASS
 0

	)

100 
	#__UAPI_DEF_IN6_ADDR
 0

	)

105 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

106 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

108 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

110 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

111 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

112 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

113 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

114 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

115 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

122 
	#__UAPI_DEF_IN_ADDR
 1

	)

123 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

124 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

125 
	#__UAPI_DEF_IP_MREQ
 1

	)

126 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

127 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

132 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

133 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

134 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

135 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

136 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

137 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

138 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

143 #i‡
deföed
(
__NETIPX_IPX_H
)

145 
	#__UAPI_DEF_SOCKADDR_IPX
 0

	)

146 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 0

	)

147 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 0

	)

148 
	#__UAPI_DEF_IPX_CONFIG_DATA
 0

	)

149 
	#__UAPI_DEF_IPX_ROUTE_DEF
 0

	)

153 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

154 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

155 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

156 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

157 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

162 #i‡
deföed
(
_SYS_XATTR_H
)

163 
	#__UAPI_DEF_XATTR
 0

	)

165 
	#__UAPI_DEF_XATTR
 1

	)

175 #i‚de‡
__UAPI_DEF_IF_IFCONF


176 
	#__UAPI_DEF_IF_IFCONF
 1

	)

178 #i‚de‡
__UAPI_DEF_IF_IFMAP


179 
	#__UAPI_DEF_IF_IFMAP
 1

	)

181 #i‚de‡
__UAPI_DEF_IF_IFNAMSIZ


182 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

184 #i‚de‡
__UAPI_DEF_IF_IFREQ


185 
	#__UAPI_DEF_IF_IFREQ
 1

	)

188 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


189 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

192 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


193 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

197 #i‚de‡
__UAPI_DEF_IN_ADDR


198 
	#__UAPI_DEF_IN_ADDR
 1

	)

200 #i‚de‡
__UAPI_DEF_IN_IPPROTO


201 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

203 #i‚de‡
__UAPI_DEF_IN_PKTINFO


204 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

206 #i‚de‡
__UAPI_DEF_IP_MREQ


207 
	#__UAPI_DEF_IP_MREQ
 1

	)

209 #i‚de‡
__UAPI_DEF_SOCKADDR_IN


210 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

212 #i‚de‡
__UAPI_DEF_IN_CLASS


213 
	#__UAPI_DEF_IN_CLASS
 1

	)

217 #i‚de‡
__UAPI_DEF_IN6_ADDR


218 
	#__UAPI_DEF_IN6_ADDR
 1

	)

220 #i‚de‡
__UAPI_DEF_IN6_ADDR_ALT


221 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

223 #i‚de‡
__UAPI_DEF_SOCKADDR_IN6


224 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

226 #i‚de‡
__UAPI_DEF_IPV6_MREQ


227 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

229 #i‚de‡
__UAPI_DEF_IPPROTO_V6


230 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

232 #i‚de‡
__UAPI_DEF_IPV6_OPTIONS


233 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

235 #i‚de‡
__UAPI_DEF_IN6_PKTINFO


236 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

238 #i‚de‡
__UAPI_DEF_IP6_MTUINFO


239 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

243 #i‚de‡
__UAPI_DEF_SOCKADDR_IPX


244 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

246 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEFINITION


247 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

249 #i‚de‡
__UAPI_DEF_IPX_INTERFACE_DEFINITION


250 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

252 #i‚de‡
__UAPI_DEF_IPX_CONFIG_DATA


253 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

255 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEF


256 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

260 #i‚de‡
__UAPI_DEF_XATTR


261 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/ppp-comp.h

10 #i‚de‡
_NET_PPP_COMP_H


11 
	#_NET_PPP_COMP_H


	)

18 
	#CCP_CONFREQ
 1

	)

19 
	#CCP_CONFACK
 2

	)

20 
	#CCP_TERMREQ
 5

	)

21 
	#CCP_TERMACK
 6

	)

22 
	#CCP_RESETREQ
 14

	)

23 
	#CCP_RESETACK
 15

	)

29 
	#CCP_MAX_OPTION_LENGTH
 32

	)

35 
	#CCP_CODE
(
dp
Ë((dp)[0])

	)

36 
	#CCP_ID
(
dp
Ë((dp)[1])

	)

37 
	#CCP_LENGTH
(
dp
Ë(((dp)[2] << 8Ë+ (dp)[3])

	)

38 
	#CCP_HDRLEN
 4

	)

40 
	#CCP_OPT_CODE
(
dp
Ë((dp)[0])

	)

41 
	#CCP_OPT_LENGTH
(
dp
Ë((dp)[1])

	)

42 
	#CCP_OPT_MINLEN
 2

	)

48 
	#CI_BSD_COMPRESS
 21

	)

49 
	#CILEN_BSD_COMPRESS
 3

	)

52 
	#BSD_NBITS
(
x
Ë((xË& 0x1FË

	)

53 
	#BSD_VERSION
(
x
Ë((xË>> 5Ë

	)

54 
	#BSD_CURRENT_VERSION
 1

	)

55 
	#BSD_MAKE_OPT
(
v
, 
n
Ë(((vË<< 5Ë| (n))

	)

57 
	#BSD_MIN_BITS
 9

	)

58 
	#BSD_MAX_BITS
 15

	)

64 
	#CI_DEFLATE
 26

	)

65 
	#CI_DEFLATE_DRAFT
 24

	)

66 
	#CILEN_DEFLATE
 4

	)

68 
	#DEFLATE_MIN_SIZE
 9

	)

69 
	#DEFLATE_MAX_SIZE
 15

	)

70 
	#DEFLATE_METHOD_VAL
 8

	)

71 
	#DEFLATE_SIZE
(
x
Ë(((xË>> 4Ë+ 8)

	)

72 
	#DEFLATE_METHOD
(
x
Ë((xË& 0x0F)

	)

73 
	#DEFLATE_MAKE_OPT
(
w
Ë((((wË- 8Ë<< 4Ë+ 
DEFLATE_METHOD_VAL
)

	)

74 
	#DEFLATE_CHK_SEQUENCE
 0

	)

80 
	#CI_MPPE
 18

	)

81 
	#CILEN_MPPE
 6

	)

87 
	#CI_PREDICTOR_1
 1

	)

88 
	#CILEN_PREDICTOR_1
 2

	)

89 
	#CI_PREDICTOR_2
 2

	)

90 
	#CILEN_PREDICTOR_2
 2

	)

	@/usr/include/linux/ppp-ioctl.h

10 #i‚de‡
_PPP_IOCTL_H


11 
	#_PPP_IOCTL_H


	)

13 
	~<löux/ty≥s.h
>

15 
	~<löux/µp_defs.h
>

20 
	#SC_COMP_PROT
 0x00000001

	)

21 
	#SC_COMP_AC
 0x00000002

	)

22 
	#SC_COMP_TCP
 0x00000004

	)

23 
	#SC_NO_TCP_CCID
 0x00000008

	)

24 
	#SC_REJ_COMP_AC
 0x00000010

	)

25 
	#SC_REJ_COMP_TCP
 0x00000020

	)

26 
	#SC_CCP_OPEN
 0x00000040

	)

27 
	#SC_CCP_UP
 0x00000080

	)

28 
	#SC_ENABLE_IP
 0x00000100

	)

29 
	#SC_LOOP_TRAFFIC
 0x00000200

	)

30 
	#SC_MULTILINK
 0x00000400

	)

31 
	#SC_MP_SHORTSEQ
 0x00000800

	)

32 
	#SC_COMP_RUN
 0x00001000

	)

33 
	#SC_DECOMP_RUN
 0x00002000

	)

34 
	#SC_MP_XSHORTSEQ
 0x00004000

	)

35 
	#SC_DEBUG
 0x00010000

	)

36 
	#SC_LOG_INPKT
 0x00020000

	)

37 
	#SC_LOG_OUTPKT
 0x00040000

	)

38 
	#SC_LOG_RAWIN
 0x00080000

	)

39 
	#SC_LOG_FLUSH
 0x00100000

	)

40 
	#SC_SYNC
 0x00200000

	)

41 
	#SC_MUST_COMP
 0x00400000

	)

42 
	#SC_MASK
 0x0f600ff‡

	)

45 
	#SC_XMIT_BUSY
 0x10000000

	)

46 
	#SC_RCV_ODDP
 0x08000000

	)

47 
	#SC_RCV_EVNP
 0x04000000

	)

48 
	#SC_RCV_B7_1
 0x02000000

	)

49 
	#SC_RCV_B7_0
 0x01000000

	)

50 
	#SC_DC_FERROR
 0x00800000

	)

51 
	#SC_DC_ERROR
 0x00400000

	)

54 
	s≈io˘l
 {

55 
	m¥Ÿocﬁ
;

56 
NPmode
 
	mmode
;

60 
	sµp_›ti⁄_d©a
 {

61 
__u8
 *
	m±r
;

62 
__u32
 
	mÀngth
;

63 
	må™smô
;

67 
	sµpﬁ2ç_ioc_°©s
 {

68 
__u16
 
	mtu¬ñ_id
;

69 
__u16
 
	m£ssi⁄_id
;

70 
__u32
 
	musög_ù£c
:1;

71 
__Æig√d_u64
 
	mtx_∑ckës
;

72 
__Æig√d_u64
 
	mtx_byãs
;

73 
__Æig√d_u64
 
	mtx_îr‹s
;

74 
__Æig√d_u64
 
	mrx_∑ckës
;

75 
__Æig√d_u64
 
	mrx_byãs
;

76 
__Æig√d_u64
 
	mrx_£q_disˇrds
;

77 
__Æig√d_u64
 
	mrx_oos_∑ckës
;

78 
__Æig√d_u64
 
	mrx_îr‹s
;

85 
	#PPPIOCGFLAGS
 
	`_IOR
('t', 90, Ë

	)

86 
	#PPPIOCSFLAGS
 
	`_IOW
('t', 89, Ë

	)

87 
	#PPPIOCGASYNCMAP
 
	`_IOR
('t', 88, Ë

	)

88 
	#PPPIOCSASYNCMAP
 
	`_IOW
('t', 87, Ë

	)

89 
	#PPPIOCGUNIT
 
	`_IOR
('t', 86, Ë

	)

90 
	#PPPIOCGRASYNCMAP
 
	`_IOR
('t', 85, Ë

	)

91 
	#PPPIOCSRASYNCMAP
 
	`_IOW
('t', 84, Ë

	)

92 
	#PPPIOCGMRU
 
	`_IOR
('t', 83, Ë

	)

93 
	#PPPIOCSMRU
 
	`_IOW
('t', 82, Ë

	)

94 
	#PPPIOCSMAXCID
 
	`_IOW
('t', 81, Ë

	)

95 
	#PPPIOCGXASYNCMAP
 
	`_IOR
('t', 80, 
ext_accm
Ë

	)

96 
	#PPPIOCSXASYNCMAP
 
	`_IOW
('t', 79, 
ext_accm
Ë

	)

97 
	#PPPIOCXFERUNIT
 
	`_IO
('t', 78Ë

	)

98 
	#PPPIOCSCOMPRESS
 
	`_IOW
('t', 77, 
µp_›ti⁄_d©a
)

	)

99 
	#PPPIOCGNPMODE
 
	`_IOWR
('t', 76, 
≈io˘l
Ë

	)

100 
	#PPPIOCSNPMODE
 
	`_IOW
('t', 75, 
≈io˘l
Ë

	)

101 
	#PPPIOCSPASS
 
	`_IOW
('t', 71, 
sock_Ârog
Ë

	)

102 
	#PPPIOCSACTIVE
 
	`_IOW
('t', 70, 
sock_Ârog
Ë

	)

103 
	#PPPIOCGDEBUG
 
	`_IOR
('t', 65, Ë

	)

104 
	#PPPIOCSDEBUG
 
	`_IOW
('t', 64, Ë

	)

105 
	#PPPIOCGIDLE
 
	`_IOR
('t', 63, 
µp_idÀ
Ë

	)

106 
	#PPPIOCNEWUNIT
 
	`_IOWR
('t', 62, Ë

	)

107 
	#PPPIOCATTACH
 
	`_IOW
('t', 61, Ë

	)

108 
	#PPPIOCDETACH
 
	`_IOW
('t', 60, Ë

	)

109 
	#PPPIOCSMRRU
 
	`_IOW
('t', 59, Ë

	)

110 
	#PPPIOCCONNECT
 
	`_IOW
('t', 58, Ë

	)

111 
	#PPPIOCDISCONN
 
	`_IO
('t', 57Ë

	)

112 
	#PPPIOCATTCHAN
 
	`_IOW
('t', 56, Ë

	)

113 
	#PPPIOCGCHAN
 
	`_IOR
('t', 55, Ë

	)

114 
	#PPPIOCGL2TPSTATS
 
	`_IOR
('t', 54, 
µpﬁ2ç_ioc_°©s
)

	)

116 
	#SIOCGPPPSTATS
 (
SIOCDEVPRIVATE
 + 0)

	)

117 
	#SIOCGPPPVER
 (
SIOCDEVPRIVATE
 + 1Ë

	)

118 
	#SIOCGPPPCSTATS
 (
SIOCDEVPRIVATE
 + 2)

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<limôs.h
>

129 
	~<›ís¶/e_os2.h
>

130 #i‚de‡
OPENSSL_NO_FP_API


131 
	~<°dio.h
>

133 
	~<›ís¶/os¶_typ.h
>

134 
	~<›ís¶/¸y±o.h
>

136 #ifde‡ 
__˝lu•lus


152 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


153 
	#BN_MUL_COMBA


	)

154 
	#BN_SQR_COMBA


	)

155 
	#BN_RECURSION


	)

170 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

171 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

172 #i‚de‡
BN_DIV2W


173 
	#BN_DIV2W


	)

181 #ifde‡
SIXTY_FOUR_BIT_LONG


182 
	#BN_ULLONG
 

	)

183 
	#BN_ULONG
 

	)

184 
	#BN_LONG
 

	)

185 
	#BN_BITS
 128

	)

186 
	#BN_BYTES
 8

	)

187 
	#BN_BITS2
 64

	)

188 
	#BN_BITS4
 32

	)

189 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

190 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

191 
	#BN_MASK2l
 (0xffffffffL)

	)

192 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

193 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

194 
	#BN_TBIT
 (0x8000000000000000L)

	)

195 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

196 
	#BN_DEC_FMT1
 "%lu"

	)

197 
	#BN_DEC_FMT2
 "%019lu"

	)

198 
	#BN_DEC_NUM
 19

	)

199 
	#BN_HEX_FMT1
 "%lX"

	)

200 
	#BN_HEX_FMT2
 "%016lX"

	)

209 #ifde‡
SIXTY_FOUR_BIT


210 #unde‡
BN_LLONG


211 #unde‡
BN_ULLONG


212 
	#BN_ULONG
 

	)

213 
	#BN_LONG
 

	)

214 
	#BN_BITS
 128

	)

215 
	#BN_BYTES
 8

	)

216 
	#BN_BITS2
 64

	)

217 
	#BN_BITS4
 32

	)

218 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

219 
	#BN_MASK2l
 (0xffffffffL)

	)

220 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

221 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

222 
	#BN_TBIT
 (0x8000000000000000LL)

	)

223 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

224 
	#BN_DEC_FMT1
 "%Œu"

	)

225 
	#BN_DEC_FMT2
 "%019Œu"

	)

226 
	#BN_DEC_NUM
 19

	)

227 
	#BN_HEX_FMT1
 "%ŒX"

	)

228 
	#BN_HEX_FMT2
 "%016ŒX"

	)

231 #ifde‡
THIRTY_TWO_BIT


232 #ifde‡
BN_LLONG


233 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

234 
	#BN_ULLONG
 
__öt64


	)

235 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

237 
	#BN_ULLONG
 

	)

238 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

241 
	#BN_ULONG
 

	)

242 
	#BN_LONG
 

	)

243 
	#BN_BITS
 64

	)

244 
	#BN_BYTES
 4

	)

245 
	#BN_BITS2
 32

	)

246 
	#BN_BITS4
 16

	)

247 
	#BN_MASK2
 (0xffffffffL)

	)

248 
	#BN_MASK2l
 (0xffff)

	)

249 
	#BN_MASK2h1
 (0xffff8000L)

	)

250 
	#BN_MASK2h
 (0xffff0000L)

	)

251 
	#BN_TBIT
 (0x80000000L)

	)

252 
	#BN_DEC_CONV
 (1000000000L)

	)

253 
	#BN_DEC_FMT1
 "%u"

	)

254 
	#BN_DEC_FMT2
 "%09u"

	)

255 
	#BN_DEC_NUM
 9

	)

256 
	#BN_HEX_FMT1
 "%X"

	)

257 
	#BN_HEX_FMT2
 "%08X"

	)

260 
	#BN_DEFAULT_BITS
 1280

	)

262 
	#BN_FLG_MALLOCED
 0x01

	)

263 
	#BN_FLG_STATIC_DATA
 0x02

	)

271 
	#BN_FLG_CONSTTIME
 0x04

	)

273 #ifde‡
OPENSSL_NO_DEPRECATED


275 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

282 #i‚de‡
OPENSSL_NO_DEPRECATED


283 
	#BN_FLG_FREE
 0x8000

	)

286 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

287 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

293 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

294 (
de°
)->
t›
=(
b
)->top, \

295 (
de°
)->
dmax
=(
b
)->dmax, \

296 (
de°
)->
√g
=(
b
)->neg, \

297 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

298 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

299 | 
BN_FLG_STATIC_DATA
 \

300 | (
n
)))

	)

304 
bignum_°
 
	tBIGNUM
;

306 
bignum_˘x
 
	tBN_CTX
;

307 
bn_blödög_°
 
	tBN_BLINDING
;

308 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

309 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

310 
bn_gícb_°
 
	tBN_GENCB
;

313 
	sbignum_°
 {

314 
BN_ULONG
 *
d
;

316 
t›
;

318 
dmax
;

319 
√g
;

320 
Êags
;

324 
	sbn_m⁄t_˘x_°
 {

325 
ri
;

326 
BIGNUM
 
RR
;

327 
BIGNUM
 
N
;

328 
BIGNUM
 
Ni
;

330 
BN_ULONG
 
n0
[2];

333 
Êags
;

340 
	sbn_ª˝_˘x_°
 {

341 
BIGNUM
 
N
;

342 
BIGNUM
 
Nr
;

343 
num_bôs
;

344 
shi·
;

345 
Êags
;

349 
	sbn_gícb_°
 {

350 
vî
;

351 *
¨g
;

354 (*
cb_1
) (, , *);

356 (*
cb_2
Ë(, , 
BN_GENCB
 *);

357 } 
cb
;

360 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

362 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

363 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

364 
tmp_gícb
->
vî
 = 1; \

365 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

366 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

368 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

369 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

370 
tmp_gícb
->
vî
 = 2; \

371 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

372 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

374 
	#BN_¥ime_checks
 0

	)

440 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 3747 ? 3 : \

441 (
b
) >= 1345 ? 4 : \

442 (
b
) >= 476 ? 5 : \

443 (
b
) >= 400 ? 6 : \

444 (
b
) >= 347 ? 7 : \

445 (
b
) >= 308 ? 8 : \

446 (
b
) >= 55 ? 27 : \

447  34)

	)

449 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

452 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

453 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

454 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

455 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

456 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

457 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

459 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

460 
	#BN_zîo_ex
(
a
) \

462 
BIGNUM
 *
_tmp_bn
 = (
a
); \

463 
_tmp_bn
->
t›
 = 0; \

464 
_tmp_bn
->
√g
 = 0; \

465 } 0)

	)

466 #ifde‡
OPENSSL_NO_DEPRECATED


467 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

469 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

472 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

473 *
	`BN_›ti⁄s
();

474 
BN_CTX
 *
	`BN_CTX_√w
();

475 #i‚de‡
OPENSSL_NO_DEPRECATED


476 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

478 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

479 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

480 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

481 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

482 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

483 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

484 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

485 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

486 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

487 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

488 
BIGNUM
 *
	`BN_√w
();

489 
	`BN_öô
(
BIGNUM
 *);

490 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

491 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

493 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

494 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

495 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

496 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

497 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

498 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

499 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

500 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

501 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

502 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

507 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

512 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

514 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

515 
BN_CTX
 *
˘x
);

516 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

517 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

518 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

519 
BN_CTX
 *
˘x
);

520 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

521 c⁄° 
BIGNUM
 *
m
);

522 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

523 
BN_CTX
 *
˘x
);

524 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

525 c⁄° 
BIGNUM
 *
m
);

526 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

527 
BN_CTX
 *
˘x
);

528 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

529 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

530 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

531 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

532 
BN_CTX
 *
˘x
);

533 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

535 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

536 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

537 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

538 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

539 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

540 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

541 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

543 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

544 
	`BN_‰ì
(
BIGNUM
 *
a
);

545 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

546 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

547 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

548 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

550 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

551 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

552 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

553 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

554 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

555 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

556 
BN_MONT_CTX
 *
ö_m⁄t
);

557 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

558 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

559 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

560 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

561 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

562 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

563 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

565 
	`BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

566 #i‚de‡
OPENSSL_NO_FP_API


567 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

569 #ifde‡
HEADER_BIO_H


570 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

572 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

574 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

575 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

576 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

577 
	`BN_˛ór
(
BIGNUM
 *
a
);

578 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

579 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

580 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

581 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

582 *
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

583 *
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

584 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

585 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

586 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

587 
	`BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

588 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

591 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

592 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

593 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

594 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

596 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

599 #i‚de‡
OPENSSL_NO_DEPRECATED


600 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

601 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

602 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

603 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

604 (*
ˇŒback
) (, , *),

605 
BN_CTX
 *
˘x
, *
cb_¨g
);

606 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

607 (*
ˇŒback
Ë(, , *), 
BN_CTX
 *
˘x
,

608 *
cb_¨g
, 
do_åül_divisi⁄
);

612 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

613 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

614 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

615 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

616 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

618 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

620 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

621 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

622 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

623 
BN_GENCB
 *
cb
);

624 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

625 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

626 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

628 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

629 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

630 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

631 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

632 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

633 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

634 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

635 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

636 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

637 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

638 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

639 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

640 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

643 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

644 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

646 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

647 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

648 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

649 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

650 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

651 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

652 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

653 
BN_CTX
 *);

654 #i‚de‡
OPENSSL_NO_DEPRECATED


655 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

656 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

658 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

659 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

660 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

661 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

662 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

663 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

664 c⁄° 
BIGNUM
 *
a
,

665 c⁄° 
BIGNUM
 *
p
,

666 c⁄° 
BIGNUM
 *
m
,

667 
BN_CTX
 *
˘x
,

668 
BN_MONT_CTX
 *
m_˘x
),

669 
BN_MONT_CTX
 *
m_˘x
);

671 #i‚de‡
OPENSSL_NO_DEPRECATED


672 
	`BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
);

673 
	`BN_gë_∑øms
(
which
);

676 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

677 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

678 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

679 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

680 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

681 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

682 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

683 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

684 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

685 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

687 #i‚de‡
OPENSSL_NO_EC2M


699 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

700 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

704 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

706 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

707 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

709 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

711 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

713 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

714 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

716 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

717 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

719 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

720 
BN_CTX
 *
˘x
);

722 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

723 
BN_CTX
 *
˘x
);

724 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

732 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

734 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

735 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

737 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

738 
BN_CTX
 *
˘x
);

740 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

741 
BN_CTX
 *
˘x
);

743 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

744 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

746 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

747 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

749 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

750 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

752 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

753 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

754 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

755 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

762 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

763 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

764 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

765 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

766 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

768 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

769 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

770 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

771 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

772 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

776 
	#bn_ex∑nd
(
a
,
bôs
) \

778 
bôs
 > (
INT_MAX
 - 
BN_BITS2
 + 1) ? \

779 
NULL
 \

781 (((
bôs
+
BN_BITS2
-1)/BN_BITS2Ë<(
a
)->
dmax
) ? \

782 (
a
) \

784 
	`bn_ex∑nd2
((
a
),(
bôs
+
BN_BITS2
-1)/BN_BITS2) \

785 )

	)

787 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

788 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

789 #i‚de‡
OPENSSL_NO_DEPRECATED


790 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

822 #ifde‡
BN_DEBUG


825 
	~<as£π.h
>

836 
	#BN_FLG_FIXED_TOP
 0x10000

	)

837 #ifde‡
BN_DEBUG_RAND


839 #i‚de‡
RAND_p£udo_byãs


840 
	`RAND_p£udo_byãs
(*
buf
, 
num
);

841 
	#BN_DEBUG_TRIX


	)

843 
	#bn_pﬁluã
(
a
) \

845 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

846 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

847 
_tmp_ch¨
; \

851 
BN_ULONG
 *
_nŸ_c⁄°
; \

852 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

854 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

855 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

856 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

858 } 0)

	)

859 #ifde‡
BN_DEBUG_TRIX


860 #unde‡
RAND_p£udo_byãs


863 
	#bn_pﬁluã
(
a
)

	)

865 
	#bn_check_t›
(
a
) \

867 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

868 i‡(
_bnum2
 !
NULL
) { \

869 
_t›
 = 
_bnum2
->
t›
; \

870 
	`as£π
((
_t›
 == 0) || \

871 (
_bnum2
->
Êags
 & 
BN_FLG_FIXED_TOP
) || \

872 (
_bnum2
->
d
[
_t›
 - 1] != 0)); \

873 
	`bn_pﬁluã
(
_bnum2
); \

875 } 0)

	)

877 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

879 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

880 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

882 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

883 
	`as£π
((
w‹ds
Ë<(
_bnum2
)->
dmax
 && (w‹dsË>(_bnum2)->
t›
); \

885 ()(
_bnum2
); \

886 } 0)

	)

890 
	#BN_FLG_FIXED_TOP
 0

	)

891 
	#bn_pﬁluã
(
a
)

	)

892 
	#bn_check_t›
(
a
)

	)

893 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

894 
	#bn_check_size
(
bn
, 
bôs
)

	)

895 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

899 
	#bn_c‹ª˘_t›
(
a
) \

901 
BN_ULONG
 *
·l
; \

902 
tmp_t›
 = (
a
)->
t›
; \

903 i‡(
tmp_t›
 > 0) \

905 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

906 i‡(*(
·l
--)) ; \

907 (
a
)->
t›
 = 
tmp_t›
; \

909 i‡((
a
)->
t›
 == 0) \

910 (
a
)->
√g
 = 0; \

911 
	`bn_pﬁluã
(
a
); \

912 }

	)

914 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
,

915 
BN_ULONG
 
w
);

916 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

917 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

918 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

919 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,

920 
num
);

921 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,

922 
num
);

925 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

926 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

929 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

930 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

931 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

932 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

933 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

934 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

936 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

943 
	`ERR_lﬂd_BN_°rögs
();

948 
	#BN_F_BNRAND
 127

	)

949 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

950 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

951 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

952 
	#BN_F_BN_BLINDING_NEW
 102

	)

953 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

954 
	#BN_F_BN_BN2DEC
 104

	)

955 
	#BN_F_BN_BN2HEX
 105

	)

956 
	#BN_F_BN_CTX_GET
 116

	)

957 
	#BN_F_BN_CTX_NEW
 106

	)

958 
	#BN_F_BN_CTX_START
 129

	)

959 
	#BN_F_BN_DIV
 107

	)

960 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

961 
	#BN_F_BN_DIV_RECP
 130

	)

962 
	#BN_F_BN_EXP
 123

	)

963 
	#BN_F_BN_EXPAND2
 108

	)

964 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

965 
	#BN_F_BN_GF2M_MOD
 131

	)

966 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

967 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

968 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

969 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

970 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

971 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

972 
	#BN_F_BN_LSHIFT
 145

	)

973 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

974 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

975 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

976 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

977 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

978 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

979 
	#BN_F_BN_MOD_INVERSE
 110

	)

980 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

981 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

982 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

983 
	#BN_F_BN_MOD_SQRT
 121

	)

984 
	#BN_F_BN_MPI2BN
 112

	)

985 
	#BN_F_BN_NEW
 113

	)

986 
	#BN_F_BN_RAND
 114

	)

987 
	#BN_F_BN_RAND_RANGE
 122

	)

988 
	#BN_F_BN_RSHIFT
 146

	)

989 
	#BN_F_BN_USUB
 115

	)

992 
	#BN_R_ARG2_LT_ARG3
 100

	)

993 
	#BN_R_BAD_RECIPROCAL
 101

	)

994 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

995 
	#BN_R_BITS_TOO_SMALL
 118

	)

996 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

997 
	#BN_R_DIV_BY_ZERO
 103

	)

998 
	#BN_R_ENCODING_ERROR
 104

	)

999 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

1000 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

1001 
	#BN_R_INVALID_LENGTH
 106

	)

1002 
	#BN_R_INVALID_RANGE
 115

	)

1003 
	#BN_R_INVALID_SHIFT
 119

	)

1004 
	#BN_R_NOT_A_SQUARE
 111

	)

1005 
	#BN_R_NOT_INITIALIZED
 107

	)

1006 
	#BN_R_NO_INVERSE
 108

	)

1007 
	#BN_R_NO_SOLUTION
 116

	)

1008 
	#BN_R_P_IS_NOT_PRIME
 112

	)

1009 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

1010 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

1012 #ifde‡ 
__˝lu•lus


1013 
	}
}

	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°
 {

78 
size_t
 
Àngth
;

79 *
d©a
;

80 
size_t
 
max
;

83 
BUF_MEM
 *
BUF_MEM_√w
();

84 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

85 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

86 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
size_t
 
BUF_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

88 *
BUF_°rdup
(c⁄° *
°r
);

94 *
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

96 *
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

97 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

100 
size_t
 
BUF_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

101 
size_t
 
BUF_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

108 
ERR_lﬂd_BUF_°rögs
();

113 
	#BUF_F_BUF_MEMDUP
 103

	)

114 
	#BUF_F_BUF_MEM_GROW
 100

	)

115 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

116 
	#BUF_F_BUF_MEM_NEW
 101

	)

117 
	#BUF_F_BUF_STRDUP
 102

	)

118 
	#BUF_F_BUF_STRNDUP
 104

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡
OPENSSL_NO_COMP


8 #îr‹ 
COMP
 
is
 
dißbÀd
.

11 #ifde‡ 
__˝lu•lus


15 
comp_˘x_°
 
	tCOMP_CTX
;

17 
	scomp_mëhod_°
 {

18 
ty≥
;

19 c⁄° *
«me
;

20 (*
öô
Ë(
COMP_CTX
 *
˘x
);

21 (*
föish
Ë(
COMP_CTX
 *
˘x
);

22 (*
com¥ess
Ë(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

25 (*
ex∑nd
Ë(
COMP_CTX
 *
˘x
,

26 *
out
, 
ﬁí
,

27 *
ö
, 
ûí
);

31 (*
˘æ
) ();

32 (*
ˇŒback_˘æ
) ();

35 
	scomp_˘x_°
 {

36 
COMP_METHOD
 *
mëh
;

37 
com¥ess_ö
;

38 
com¥ess_out
;

39 
ex∑nd_ö
;

40 
ex∑nd_out
;

41 
CRYPTO_EX_DATA
 
ex_d©a
;

44 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

45 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

46 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

49 *
ö
, 
ûí
);

50 
COMP_METHOD
 *
COMP_æe
();

51 
COMP_METHOD
 *
COMP_zlib
();

52 
COMP_zlib_˛ónup
();

54 #ifde‡
HEADER_BIO_H


55 #ifde‡
ZLIB


56 
BIO_METHOD
 *
BIO_f_zlib
();

65 
ERR_lﬂd_COMP_°rögs
();

70 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

71 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

72 
	#COMP_F_BIO_ZLIB_READ
 101

	)

73 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

76 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

77 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

78 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

80 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

141 
	~<›ís¶/symhacks.h
>

143 #ifde‡ 
__˝lu•lus


152 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

153 
	#SSLEAY_VERSION
 0

	)

155 
	#SSLEAY_CFLAGS
 2

	)

156 
	#SSLEAY_BUILT_ON
 3

	)

157 
	#SSLEAY_PLATFORM
 4

	)

158 
	#SSLEAY_DIR
 5

	)

162 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

164 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

165 
	tidx
, 
	t¨gl
, *
	t¨gp
);

167 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

168 
	tidx
, 
	t¨gl
, *
	t¨gp
);

170 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
,

171 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

175 
	s›ís¶_ôem_°
 {

176 
code
;

177 *
vÆue
;

178 
size_t
 
vÆue_size
;

180 
size_t
 *
vÆue_Àngth
;

181 } 
	tOPENSSL_ITEM
;

188 
	#CRYPTO_LOCK_ERR
 1

	)

189 
	#CRYPTO_LOCK_EX_DATA
 2

	)

190 
	#CRYPTO_LOCK_X509
 3

	)

191 
	#CRYPTO_LOCK_X509_INFO
 4

	)

192 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

193 
	#CRYPTO_LOCK_X509_CRL
 6

	)

194 
	#CRYPTO_LOCK_X509_REQ
 7

	)

195 
	#CRYPTO_LOCK_DSA
 8

	)

196 
	#CRYPTO_LOCK_RSA
 9

	)

197 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

198 
	#CRYPTO_LOCK_X509_STORE
 11

	)

199 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

200 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

201 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

202 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

203 
	#CRYPTO_LOCK_SSL
 16

	)

204 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

205 
	#CRYPTO_LOCK_RAND
 18

	)

206 
	#CRYPTO_LOCK_RAND2
 19

	)

207 
	#CRYPTO_LOCK_MALLOC
 20

	)

208 
	#CRYPTO_LOCK_BIO
 21

	)

209 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

210 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

211 
	#CRYPTO_LOCK_READDIR
 24

	)

212 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

213 
	#CRYPTO_LOCK_DH
 26

	)

214 
	#CRYPTO_LOCK_MALLOC2
 27

	)

215 
	#CRYPTO_LOCK_DSO
 28

	)

216 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

217 
	#CRYPTO_LOCK_ENGINE
 30

	)

218 
	#CRYPTO_LOCK_UI
 31

	)

219 
	#CRYPTO_LOCK_ECDSA
 32

	)

220 
	#CRYPTO_LOCK_EC
 33

	)

221 
	#CRYPTO_LOCK_ECDH
 34

	)

222 
	#CRYPTO_LOCK_BN
 35

	)

223 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

224 
	#CRYPTO_LOCK_STORE
 37

	)

225 
	#CRYPTO_LOCK_COMP
 38

	)

226 
	#CRYPTO_LOCK_FIPS
 39

	)

227 
	#CRYPTO_LOCK_FIPS2
 40

	)

228 
	#CRYPTO_NUM_LOCKS
 41

	)

230 
	#CRYPTO_LOCK
 1

	)

231 
	#CRYPTO_UNLOCK
 2

	)

232 
	#CRYPTO_READ
 4

	)

233 
	#CRYPTO_WRITE
 8

	)

235 #i‚de‡
OPENSSL_NO_LOCKING


236 #i‚de‡
CRYPTO_w_lock


237 
	#CRYPTO_w_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_w_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_r_lock
(
ty≥
) \

242 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

243 
	#CRYPTO_r_u∆ock
(
ty≥
) \

244 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

246 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

249 
	#CRYPTO_w_lock
(
a
)

	)

250 
	#CRYPTO_w_u∆ock
(
a
)

	)

251 
	#CRYPTO_r_lock
(
a
)

	)

252 
	#CRYPTO_r_u∆ock
(
a
)

	)

253 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

263 
ª„ªn˚s
;

264 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

265 } 
	tCRYPTO_dy∆ock
;

272 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

273 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

274 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

275 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

283 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

285 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

287 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

290 
bio_°
 
	tBIO_dummy
;

292 
	s¸y±o_ex_d©a_°
 {

293 
STACK_OF
(Ë*
sk
;

295 
dummy
;

297 
DECLARE_STACK_OF
()

304 
	s¸y±o_ex_d©a_func_°
 {

305 
¨gl
;

306 *
¨gp
;

307 
CRYPTO_EX_√w
 *
√w_func
;

308 
CRYPTO_EX_‰ì
 *
‰ì_func
;

309 
CRYPTO_EX_dup
 *
dup_func
;

310 } 
	tCRYPTO_EX_DATA_FUNCS
;

312 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

319 
	#CRYPTO_EX_INDEX_BIO
 0

	)

320 
	#CRYPTO_EX_INDEX_SSL
 1

	)

321 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

322 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

323 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

324 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

325 
	#CRYPTO_EX_INDEX_RSA
 6

	)

326 
	#CRYPTO_EX_INDEX_DSA
 7

	)

327 
	#CRYPTO_EX_INDEX_DH
 8

	)

328 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

329 
	#CRYPTO_EX_INDEX_X509
 10

	)

330 
	#CRYPTO_EX_INDEX_UI
 11

	)

331 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

332 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

333 
	#CRYPTO_EX_INDEX_COMP
 14

	)

334 
	#CRYPTO_EX_INDEX_STORE
 15

	)

340 
	#CRYPTO_EX_INDEX_USER
 100

	)

347 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

348 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

350 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


351 #i‚de‡
CRYPTO_MDEBUG


352 
	#CRYPTO_MDEBUG


	)

360 
	#CRYPTO_mÆloc_debug_öô
() do {\

361 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

362 
CRYPTO_dbg_mÆloc
,\

363 
CRYPTO_dbg_ªÆloc
,\

364 
CRYPTO_dbg_‰ì
,\

365 
CRYPTO_dbg_£t_›ti⁄s
,\

366 
CRYPTO_dbg_gë_›ti⁄s
);\

367 } 0)

	)

369 
CRYPTO_mem_˘æ
(
mode
);

370 
CRYPTO_is_mem_check_⁄
();

373 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

374 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

377 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

378 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

379 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

381 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

382 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

383 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

384 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

385 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

386 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

387 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

388 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

389 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

390 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

392 
	#OPENSSL_mÆloc_locked
(
num
) \

393 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

394 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

396 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

397 
SSLóy
();

399 
OPENSSL_is£tugid
();

402 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

404 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

406 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

408 
CRYPTO_ex_d©a_√w_˛ass
();

410 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

411 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

412 
CRYPTO_EX_‰ì
 *
‰ì_func
);

417 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

418 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

419 
CRYPTO_EX_DATA
 *
‰om
);

420 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

425 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

426 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

431 
CRYPTO_˛ónup_Æl_ex_d©a
();

433 
CRYPTO_gë_√w_lockid
(*
«me
);

435 
CRYPTO_num_locks
();

436 
CRYPTO_lock
(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
);

437 
CRYPTO_£t_lockög_ˇŒback
((*
func
Ë(
mode
, 
ty≥
,

438 c⁄° *
fûe
, 
löe
));

439 (*
CRYPTO_gë_lockög_ˇŒback
()Ë(
mode
, 
ty≥
,

440 c⁄° *
fûe
, 
löe
);

441 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)

442 (*
num
, 
mou¡
, 
ty≥
,

443 c⁄° *
fûe
, 
löe
));

444 (*
CRYPTO_gë_add_lock_ˇŒback
()Ë(*
num
, 
mou¡
, 
ty≥
,

445 c⁄° *
fûe
, 
löe
);

448 
	s¸y±o_thªadid_°
 {

449 *
±r
;

450 
vÆ
;

451 } 
	tCRYPTO_THREADID
;

453 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

454 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

455 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
Ë(
CRYPTO_THREADID
 *));

456 (*
CRYPTO_THREADID_gë_ˇŒback
()Ë(
CRYPTO_THREADID
 *);

457 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

458 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

459 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

460 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

461 #i‚de‡
OPENSSL_NO_DEPRECATED


462 
CRYPTO_£t_id_ˇŒback
((*
func
) ());

463 (*
CRYPTO_gë_id_ˇŒback
()) ();

464 
CRYPTO_thªad_id
();

467 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

468 
CRYPTO_add_lock
(*
poöãr
, 
amou¡
, 
ty≥
, c⁄° *
fûe
,

469 
löe
);

471 
CRYPTO_gë_√w_dy∆ockid
();

472 
CRYPTO_de°roy_dy∆ockid
(
i
);

473 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

474 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue


475 *(*
dyn_¸óã_fun˘i⁄
) (const 

476 *
fûe
,

477 
löe
));

478 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)

479 (
mode
,

480 
CRYPTO_dy∆ock_vÆue
 *
l
,

481 c⁄° *
fûe
, 
löe
));

482 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)

483 (
CRYPTO_dy∆ock_vÆue
 *
l
,

484 c⁄° *
fûe
, 
löe
));

485 
CRYPTO_dy∆ock_vÆue


486 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
()Ë(c⁄° *
fûe
, 
löe
);

487 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
()Ë(
mode
,

488 
CRYPTO_dy∆ock_vÆue


489 *
l
, c⁄° *
fûe
,

490 
löe
);

491 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
()Ë(
CRYPTO_dy∆ock_vÆue


492 *
l
, c⁄° *
fûe
,

493 
löe
);

499 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
Ë(
size_t
), *(*
r
) (*, size_t),

500 (*
f
) (*));

501 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
Ë(
size_t
),

502 (*
‰ì_func
) (*));

503 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
Ë(
size_t
, const *, ),

504 *(*
r
Ë(*, 
size_t
, const *,

505 ), (*
f
) (*));

506 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
Ë(
size_t
, const *, ),

507 (*
‰ì_func
) (*));

508 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)

510 (*
r
) (*, *, ,

512 (*
f
Ë(*, ), (*
so
) (),

513 (*
go
) ());

514 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
Ë(
size_t
),

515 *(**
r
Ë(*, 
size_t
),

516 (**
f
) (*));

517 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
Ë(
size_t
),

518 (**
f
) (*));

519 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
Ë(
size_t
, const *, ),

520 *(**
r
Ë(*, 
size_t
, const *,

521 ), (**
f
) (*));

522 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(

523 *(**
m
Ë(
size_t
, const *, ),

524 (**
f
) (*));

525 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)

527 (**
r
) (*, *, ,

529 (**
f
) (*, ),

530 (**
so
Ë(), (**
go
) ());

532 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

533 
CRYPTO_‰ì_locked
(*
±r
);

534 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

535 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

536 
CRYPTO_‰ì
(*
±r
);

537 *
CRYPTO_ªÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
);

538 *
CRYPTO_ªÆloc_˛ón
(*
addr
, 
ﬁd_num
, 
num
, c⁄° *
fûe
,

539 
löe
);

540 *
CRYPTO_ªmÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
);

542 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

544 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

545 
CRYPTO_gë_mem_debug_›ti⁄s
();

547 
	#CRYPTO_push_öfo
(
öfo
) \

548 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

549 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

550 
CRYPTO_p›_öfo
();

551 
CRYPTO_ªmove_Æl_öfo
();

563 
CRYPTO_dbg_mÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
,

564 
bef‹e_p
);

565 
CRYPTO_dbg_ªÆloc
(*
addr1
, *
addr2
, 
num
, c⁄° *
fûe
,

566 
löe
, 
bef‹e_p
);

567 
CRYPTO_dbg_‰ì
(*
addr
, 
bef‹e_p
);

577 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

578 
CRYPTO_dbg_gë_›ti⁄s
();

580 #i‚de‡
OPENSSL_NO_FP_API


581 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

583 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

585 *
	tCRYPTO_MEM_LEAK_CB
 (, const *, , ,

587 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

590 
O≥nSSLDõ
(c⁄° *
fûe
, 
löe
, c⁄° *
as£πi⁄
);

591 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

593 *
OPENSSL_ü32ˇp_loc
();

594 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

595 
OPENSSL_is£rvi˚
();

597 
FIPS_mode
();

598 
FIPS_mode_£t
(
r
);

600 
OPENSSL_öô
();

602 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

604 #ifde‡
OPENSSL_FIPS


605 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

606 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

608 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

610  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

612 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

614 
	#fùs_cùhî_ab‹t
(
Æg
) \

615 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

616 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

619 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

620 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

621 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

631 
CRYPTO_memcmp
(c⁄° vﬁ©ûê*
a
, c⁄° vﬁ©ûê*
b
, 
size_t
 
Àn
);

638 
ERR_lﬂd_CRYPTO_°rögs
();

643 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

644 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

645 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

646 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

647 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

648 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

649 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

650 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

651 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

652 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

655 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

656 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

658 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

90 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

99 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

107 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

109 #ifde‡ 
__˝lu•lus


117 
	sdh_mëhod
 {

118 c⁄° *
«me
;

120 (*
gíî©e_key
Ë(
DH
 *
dh
);

121 (*
compuã_key
Ë(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

123 (*
bn_mod_exp
Ë(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

124 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

125 
BN_MONT_CTX
 *
m_˘x
);

126 (*
öô
Ë(
DH
 *
dh
);

127 (*
föish
Ë(
DH
 *
dh
);

128 
Êags
;

129 *
≠p_d©a
;

131 (*
gíî©e_∑øms
Ë(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

132 
BN_GENCB
 *
cb
);

135 
	sdh_°
 {

140 
∑d
;

141 
vîsi⁄
;

142 
BIGNUM
 *
p
;

143 
BIGNUM
 *
g
;

144 
Àngth
;

145 
BIGNUM
 *
pub_key
;

146 
BIGNUM
 *
¥iv_key
;

147 
Êags
;

148 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

150 
BIGNUM
 *
q
;

151 
BIGNUM
 *
j
;

152 *
£ed
;

153 
£edÀn
;

154 
BIGNUM
 *
cou¡î
;

155 
ª„ªn˚s
;

156 
CRYPTO_EX_DATA
 
ex_d©a
;

157 c⁄° 
DH_METHOD
 *
mëh
;

158 
ENGINE
 *
ígöe
;

161 
	#DH_GENERATOR_2
 2

	)

163 
	#DH_GENERATOR_5
 5

	)

166 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

167 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

168 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

169 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

170 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

171 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

172 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

175 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

176 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

177 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

183 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

185 
	#d2i_DH∑øms_Â
(
Â
,
x
) \

186 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

187 (*(*)())
d2i_DH∑øms
, \

188 (
Â
), \

189 (**)(
x
))

	)

190 
	#i2d_DH∑øms_Â
(
Â
,
x
) \

191 
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(
Â
), (*)(
x
))

	)

192 
	#d2i_DH∑øms_bio
(
bp
,
x
) \

193 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DH∑øms
, 
bp
, 
x
)

	)

194 
	#i2d_DH∑øms_bio
(
bp
,
x
) \

195 
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,
bp
,
x
)

	)

197 
	#d2i_DHx∑øms_Â
(
Â
,
x
) \

198 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

199 (*(*)())
d2i_DHx∑øms
, \

200 (
Â
), \

201 (**)(
x
))

	)

202 
	#i2d_DHx∑øms_Â
(
Â
,
x
) \

203 
	`ASN1_i2d_Â
(
i2d_DHx∑øms
,(
Â
), (*)(
x
))

	)

204 
	#d2i_DHx∑øms_bio
(
bp
,
x
) \

205 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DHx∑øms
, 
bp
, 
x
)

	)

206 
	#i2d_DHx∑øms_bio
(
bp
,
x
) \

207 
	`ASN1_i2d_bio_of_c⁄°
(
DH
, 
i2d_DHx∑øms
, 
bp
, 
x
)

	)

209 
DH
 *
DH∑øms_dup
(DH *);

211 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

213 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

214 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

215 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

216 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

218 
DH
 *
DH_√w
();

219 
DH_‰ì
(
DH
 *
dh
);

220 
DH_up_ªf
(
DH
 *
dh
);

221 
DH_size
(c⁄° 
DH
 *
dh
);

222 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

223 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

224 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

225 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

228 #i‚de‡
OPENSSL_NO_DEPRECATED


229 
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

230 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

234 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

235 
BN_GENCB
 *
cb
);

237 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

238 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

239 
DH_gíî©e_key
(
DH
 *
dh
);

240 
DH_compuã_key
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

241 
DH_compuã_key_∑dded
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

242 
DH
 *
d2i_DH∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

243 
i2d_DH∑øms
(c⁄° 
DH
 *
a
, **
µ
);

244 
DH
 *
d2i_DHx∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

245 
i2d_DHx∑øms
(c⁄° 
DH
 *
a
, **
µ
);

246 #i‚de‡
OPENSSL_NO_FP_API


247 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

249 #i‚de‡
OPENSSL_NO_BIO


250 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

252 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

256 
DH
 *
DH_gë_1024_160
();

257 
DH
 *
DH_gë_2048_224
();

258 
DH
 *
DH_gë_2048_256
();

260 #i‚de‡
OPENSSL_NO_CMS


262 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

263 c⁄° *
Z
, 
size_t
 
ZÀn
,

264 
ASN1_OBJECT
 *
key_oid
,

265 c⁄° *
ukm
, 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

268 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

269 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

270 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

272 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
˘x
, 
Àn
) \

273 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

274 
EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
, 
Àn
, 
NULL
)

	)

276 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
˘x
, 
typ
) \

277 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

278 
EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
, 
typ
, 
NULL
)

	)

280 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

281 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

282 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

284 
	#EVP_PKEY_CTX_£t_dh_rfc5114
(
˘x
, 
gí
) \

285 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

286 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

288 
	#EVP_PKEY_CTX_£t_dhx_rfc5114
(
˘x
, 
gí
) \

289 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

290 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

292 
	#EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
˘x
, 
kdf
) \

293 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

294 
EVP_PKEY_OP_DERIVE
, \

295 
EVP_PKEY_CTRL_DH_KDF_TYPE
, 
kdf
, 
NULL
)

	)

297 
	#EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
˘x
) \

298 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

299 
EVP_PKEY_OP_DERIVE
, \

300 
EVP_PKEY_CTRL_DH_KDF_TYPE
, -2, 
NULL
)

	)

302 
	#EVP_PKEY_CTX_£t0_dh_kdf_oid
(
˘x
, 
oid
) \

303 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

304 
EVP_PKEY_OP_DERIVE
, \

305 
EVP_PKEY_CTRL_DH_KDF_OID
, 0, (*)
oid
)

	)

307 
	#EVP_PKEY_CTX_gë0_dh_kdf_oid
(
˘x
, 
poid
) \

308 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

309 
EVP_PKEY_OP_DERIVE
, \

310 
EVP_PKEY_CTRL_GET_DH_KDF_OID
, 0, (*)
poid
)

	)

312 
	#EVP_PKEY_CTX_£t_dh_kdf_md
(
˘x
, 
md
) \

313 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

314 
EVP_PKEY_OP_DERIVE
, \

315 
EVP_PKEY_CTRL_DH_KDF_MD
, 0, (*)
md
)

	)

317 
	#EVP_PKEY_CTX_gë_dh_kdf_md
(
˘x
, 
pmd
) \

318 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

319 
EVP_PKEY_OP_DERIVE
, \

320 
EVP_PKEY_CTRL_GET_DH_KDF_MD
, 0, (*)
pmd
)

	)

322 
	#EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
˘x
, 
Àn
) \

323 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

324 
EVP_PKEY_OP_DERIVE
, \

325 
EVP_PKEY_CTRL_DH_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

327 
	#EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
˘x
, 
∂í
) \

328 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

329 
EVP_PKEY_OP_DERIVE
, \

330 
EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
, 0, (*)
∂í
)

	)

332 
	#EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

333 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

334 
EVP_PKEY_OP_DERIVE
, \

335 
EVP_PKEY_CTRL_DH_KDF_UKM
, 
∂í
, (*)
p
)

	)

337 
	#EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
˘x
, 
p
) \

338 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

339 
EVP_PKEY_OP_DERIVE
, \

340 
EVP_PKEY_CTRL_GET_DH_KDF_UKM
, 0, (*)
p
)

	)

342 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

343 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

344 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

345 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

346 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

347 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

348 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

349 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

350 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

351 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

352 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

353 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

354 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

355 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

358 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

359 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

366 
ERR_lﬂd_DH_°rögs
();

371 
	#DH_F_COMPUTE_KEY
 102

	)

372 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

373 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

374 
	#DH_F_DH_CMS_DECRYPT
 117

	)

375 
	#DH_F_DH_CMS_SET_PEERKEY
 118

	)

376 
	#DH_F_DH_CMS_SET_SHARED_INFO
 119

	)

377 
	#DH_F_DH_COMPUTE_KEY
 114

	)

378 
	#DH_F_DH_GENERATE_KEY
 115

	)

379 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

380 
	#DH_F_DH_NEW_METHOD
 105

	)

381 
	#DH_F_DH_PARAM_DECODE
 107

	)

382 
	#DH_F_DH_PRIV_DECODE
 110

	)

383 
	#DH_F_DH_PRIV_ENCODE
 111

	)

384 
	#DH_F_DH_PUB_DECODE
 108

	)

385 
	#DH_F_DH_PUB_ENCODE
 109

	)

386 
	#DH_F_DO_DH_PRINT
 100

	)

387 
	#DH_F_GENERATE_KEY
 103

	)

388 
	#DH_F_GENERATE_PARAMETERS
 104

	)

389 
	#DH_F_PKEY_DH_DERIVE
 112

	)

390 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

393 
	#DH_R_BAD_GENERATOR
 101

	)

394 
	#DH_R_BN_DECODE_ERROR
 109

	)

395 
	#DH_R_BN_ERROR
 106

	)

396 
	#DH_R_DECODE_ERROR
 104

	)

397 
	#DH_R_INVALID_PUBKEY
 102

	)

398 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

399 
	#DH_R_KEYS_NOT_SET
 108

	)

400 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

401 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

402 
	#DH_R_NON_FIPS_METHOD
 111

	)

403 
	#DH_R_NO_PARAMETERS_SET
 107

	)

404 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

405 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

406 
	#DH_R_PEER_KEY_ERROR
 113

	)

407 
	#DH_R_SHARED_INFO_ERROR
 114

	)

409 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

97 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

114 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

116 #ifde‡ 
__˝lu•lus


124 
	sDSA_SIG_°
 {

125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod
 {

130 c⁄° *
«me
;

131 
DSA_SIG
 *(*
dß_do_sign
Ë(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

132 (*
dß_sign_£tup
Ë(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

133 
BIGNUM
 **
Ω
);

134 (*
dß_do_vîify
Ë(c⁄° *
dg°
, 
dg°_Àn
,

135 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

136 (*
dß_mod_exp
Ë(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

137 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

138 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
Ë(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

142 (*
öô
Ë(
DSA
 *
dß
);

143 (*
föish
Ë(
DSA
 *
dß
);

144 
Êags
;

145 *
≠p_d©a
;

147 (*
dß_∑ømgí
Ë(
DSA
 *
dß
, 
bôs
,

148 c⁄° *
£ed
, 
£ed_Àn
,

149 *
cou¡î_ªt
, *
h_ªt
,

150 
BN_GENCB
 *
cb
);

152 (*
dß_keygí
Ë(
DSA
 *
dß
);

155 
	sdß_°
 {

160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

166 
BIGNUM
 *
pub_key
;

167 
BIGNUM
 *
¥iv_key
;

168 
BIGNUM
 *
köv
;

169 
BIGNUM
 *
r
;

170 
Êags
;

172 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

173 
ª„ªn˚s
;

174 
CRYPTO_EX_DATA
 
ex_d©a
;

175 c⁄° 
DSA_METHOD
 *
mëh
;

177 
ENGINE
 *
ígöe
;

180 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

181 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

182 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

183 (*)(
x
))

	)

184 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

185 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

187 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

188 
DSA_SIG
 *
DSA_SIG_√w
();

189 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

190 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

191 
DSA_SIG
 *
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

193 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

194 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

195 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

197 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

199 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

200 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

201 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

203 
DSA
 *
DSA_√w
();

204 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

205 
DSA_‰ì
(
DSA
 *
r
);

207 
DSA_up_ªf
(
DSA
 *
r
);

208 
DSA_size
(c⁄° 
DSA
 *);

210 
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
, BIGNUM **
Ω
);

211 
DSA_sign
(
ty≥
, c⁄° *
dg°
, 
dÀn
,

212 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

213 
DSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°_Àn
,

214 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

215 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

216 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

217 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

218 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

220 
DSA
 *
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

221 
DSA
 *
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

222 
DSA
 *
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 #i‚de‡
OPENSSL_NO_DEPRECATED


226 
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
,

227 *
£ed
, 
£ed_Àn
,

228 *
cou¡î_ªt
, *
h_ªt
, 

229 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

233 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

234 c⁄° *
£ed
, 
£ed_Àn
,

235 *
cou¡î_ªt
, *
h_ªt
,

236 
BN_GENCB
 *
cb
);

238 
DSA_gíî©e_key
(
DSA
 *
a
);

239 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

240 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

241 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
, **
µ
);

243 #i‚de‡
OPENSSL_NO_BIO


244 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

245 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

247 #i‚de‡
OPENSSL_NO_FP_API


248 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

249 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

252 
	#DSS_¥ime_checks
 64

	)

259 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

260 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

262 #i‚de‡
OPENSSL_NO_DH


267 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

270 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

271 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

272 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

274 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

275 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

276 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

283 
ERR_lﬂd_DSA_°rögs
();

288 
	#DSA_F_D2I_DSA_SIG
 110

	)

289 
	#DSA_F_DO_DSA_PRINT
 104

	)

290 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

291 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

292 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 126

	)

293 
	#DSA_F_DSA_DO_SIGN
 112

	)

294 
	#DSA_F_DSA_DO_VERIFY
 113

	)

295 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

296 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

297 
	#DSA_F_DSA_NEW_METHOD
 103

	)

298 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

299 
	#DSA_F_DSA_PRINT_FP
 105

	)

300 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

301 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

302 
	#DSA_F_DSA_PUB_DECODE
 117

	)

303 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

304 
	#DSA_F_DSA_SIGN
 106

	)

305 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

306 
	#DSA_F_DSA_SIG_NEW
 109

	)

307 
	#DSA_F_DSA_SIG_PRINT
 125

	)

308 
	#DSA_F_DSA_VERIFY
 108

	)

309 
	#DSA_F_I2D_DSA_SIG
 111

	)

310 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

311 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

312 
	#DSA_F_PKEY_DSA_CTRL_STR
 127

	)

313 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

314 
	#DSA_F_SIG_CB
 114

	)

317 
	#DSA_R_BAD_Q_VALUE
 102

	)

318 
	#DSA_R_BN_DECODE_ERROR
 108

	)

319 
	#DSA_R_BN_ERROR
 109

	)

320 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

321 
	#DSA_R_DECODE_ERROR
 104

	)

322 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

323 
	#DSA_R_INVALID_PARAMETERS
 112

	)

324 
	#DSA_R_MISSING_PARAMETERS
 101

	)

325 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

326 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

327 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

328 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

329 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

330 
	#DSA_R_Q_NOT_PRIME
 113

	)

332 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

76 
	~<sys/times.h
>

78 
	~<sys/time.h
>

82 #ifde‡ 
__˝lu•lus


86 
	#DTLS1_VERSION
 0xFEFF

	)

87 
	#DTLS1_2_VERSION
 0xFEFD

	)

88 
	#DTLS_MAX_VERSION
 
DTLS1_2_VERSION


	)

89 
	#DTLS1_VERSION_MAJOR
 0xFE

	)

91 
	#DTLS1_BAD_VER
 0x0100

	)

94 
	#DTLS_ANY_VERSION
 0x1FFFF

	)

98 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

102 
	#DTLS1_COOKIE_LENGTH
 256

	)

104 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

106 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

108 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

109 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

111 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

113 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


114 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

116 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

119 #i‚de‡
OPENSSL_NO_SSL_INTERN


121 #i‚de‡
OPENSSL_NO_SCTP


122 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

126 
	#DTLS1_MAX_MTU_OVERHEAD
 48

	)

128 
	sdés1_bôm≠_°
 {

129 
m≠
;

131 
max_£q_num
[8];

133 } 
	tDTLS1_BITMAP
;

135 
	sdés1_ªå™smô_°©e
 {

136 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

137 
EVP_MD_CTX
 *
wrôe_hash
;

138 #i‚de‡
OPENSSL_NO_COMP


139 
COMP_CTX
 *
com¥ess
;

141 *
com¥ess
;

143 
SSL_SESSION
 *
£ssi⁄
;

144 
ïoch
;

147 
	shm_hódî_°
 {

148 
ty≥
;

149 
msg_Àn
;

150 
£q
;

151 
‰ag_off
;

152 
‰ag_Àn
;

153 
is_ccs
;

154 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

157 
	sccs_hódî_°
 {

158 
ty≥
;

159 
£q
;

162 
	sdés1_timeout_°
 {

164 
ªad_timeouts
;

166 
wrôe_timeouts
;

168 
num_Æîts
;

171 
	sªc‹d_pqueue_°
 {

172 
ïoch
;

173 
pqueue
 
q
;

174 } 
	tªc‹d_pqueue
;

176 
	shm_‰agmít_°
 {

177 
hm_hódî_°
 
msg_hódî
;

178 *
‰agmít
;

179 *
ªas£mbly
;

180 } 
	thm_‰agmít
;

182 
	sdés1_°©e_°
 {

183 
£nd_cookõ
;

184 
cookõ
[
DTLS1_COOKIE_LENGTH
];

185 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

186 
cookõ_Àn
;

192 
r_ïoch
;

193 
w_ïoch
;

195 
DTLS1_BITMAP
 
bôm≠
;

197 
DTLS1_BITMAP
 
√xt_bôm≠
;

199 
h™dshake_wrôe_£q
;

200 
√xt_h™dshake_wrôe_£q
;

201 
h™dshake_ªad_£q
;

203 
œ°_wrôe_£quí˚
[8];

205 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

206 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

208 
pqueue
 
buf„ªd_mesßges
;

210 
pqueue
 
£¡_mesßges
;

216 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

218 
li°í
;

219 
lök_mtu
;

220 
mtu
;

221 
hm_hódî_°
 
w_msg_hdr
;

222 
hm_hódî_°
 
r_msg_hdr
;

223 
dés1_timeout_°
 
timeout
;

227 
timevÆ
 
√xt_timeout
;

229 
timeout_duøti⁄
;

234 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

235 
Æît_‰agmít_Àn
;

236 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

237 
h™dshake_‰agmít_Àn
;

238 
ªå™smôtög
;

243 
ch™ge_cùhî_•ec_ok
;

244 #i‚de‡
OPENSSL_NO_SCTP


246 
√xt_°©e
;

247 
shutdown_ª˚ived
;

249 } 
	tDTLS1_STATE
;

251 
	sdés1_ªc‹d_d©a_°
 {

252 *
∑ckë
;

253 
∑ckë_Àngth
;

254 
SSL3_BUFFER
 
rbuf
;

255 
SSL3_RECORD
 
ºec
;

256 #i‚de‡
OPENSSL_NO_SCTP


257 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

259 } 
	tDTLS1_RECORD_DATA
;

264 
	#DTLS1_TMO_READ_COUNT
 2

	)

265 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

267 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

269 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

91 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

92 #unde‡
OPENSSL_SYS_UNIX


93 
	#OPENSSL_SYS_MSDOS


	)

100 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_UWIN


	)

104 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

108 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WIN32


	)

112 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYSNAME_WIN64
)

113 #unde‡
OPENSSL_SYS_UNIX


114 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

115 
	#OPENSSL_SYS_WIN64


	)

118 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

119 #unde‡
OPENSSL_SYS_UNIX


120 
	#OPENSSL_SYS_WINNT


	)

122 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

123 #unde‡
OPENSSL_SYS_UNIX


124 
	#OPENSSL_SYS_WINCE


	)

130 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

131 #unde‡
OPENSSL_SYS_UNIX


132 
	#OPENSSL_SYS_WINDOWS


	)

133 #i‚de‡
OPENSSL_SYS_MSDOS


134 
	#OPENSSL_SYS_MSDOS


	)

143 #ifde‡
OPENSSL_SYS_WINDOWS


144 #i‚de‡
OPENSSL_OPT_WINDLL


145 #i‡
deföed
(
_WINDLL
)

147 
	#OPENSSL_OPT_WINDLL


	)

153 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

154 #unde‡
OPENSSL_SYS_UNIX


155 
	#OPENSSL_SYS_VMS


	)

156 #i‡
deföed
(
__DECC
)

157 
	#OPENSSL_SYS_VMS_DECC


	)

158 #ñi‡
deföed
(
__DECCXX
)

159 
	#OPENSSL_SYS_VMS_DECC


	)

160 
	#OPENSSL_SYS_VMS_DECCXX


	)

162 
	#OPENSSL_SYS_VMS_NODECC


	)

167 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

168 #unde‡
OPENSSL_SYS_UNIX


169 
	#OPENSSL_SYS_OS2


	)

173 #ifde‡
OPENSSL_SYS_UNIX


174 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

175 
	#OPENSSL_SYS_LINUX


	)

177 #ifde‡
OPENSSL_SYSNAME_MPE


178 
	#OPENSSL_SYS_MPE


	)

180 #ifde‡
OPENSSL_SYSNAME_SNI


181 
	#OPENSSL_SYS_SNI


	)

183 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


184 
	#OPENSSL_SYS_ULTRASPARC


	)

186 #ifde‡
OPENSSL_SYSNAME_NEWS4


187 
	#OPENSSL_SYS_NEWS4


	)

189 #ifde‡
OPENSSL_SYSNAME_MACOSX


190 
	#OPENSSL_SYS_MACOSX


	)

192 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


193 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

194 
	#OPENSSL_SYS_MACOSX


	)

196 #ifde‡
OPENSSL_SYSNAME_SUNOS


197 
	#OPENSSL_SYS_SUNOS


	)

199 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

200 
	#OPENSSL_SYS_CRAY


	)

202 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

203 
	#OPENSSL_SYS_AIX


	)

208 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

209 
	#OPENSSL_SYS_VOS


	)

210 #ifde‡
__HPPA__


211 
	#OPENSSL_SYS_VOS_HPPA


	)

213 #ifde‡
__IA32__


214 
	#OPENSSL_SYS_VOS_IA32


	)

219 #ifde‡
OPENSSL_SYSNAME_VXWORKS


220 
	#OPENSSL_SYS_VXWORKS


	)

224 #i‡
deföed
(
__BEOS__
)

225 
	#OPENSSL_SYS_BEOS


	)

226 
	~<sys/sockë.h
>

227 #i‡
deföed
(
BONE_VERSION
)

228 
	#OPENSSL_SYS_BEOS_BONE


	)

230 
	#OPENSSL_SYS_BEOS_R5


	)

239 #ifde‡
OPENSSL_SYS_MSDOS


240 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

241 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

243 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

244 
	#OPENSSL_DECLARE_EXIT


	)

267 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

268 
	#OPENSSL_EXPORT
 
globÆªf


	)

269 
	#OPENSSL_IMPORT
 
globÆªf


	)

270 
	#OPENSSL_GLOBAL
 
globÆdef


	)

271 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

272 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

274 
	#OPENSSL_GLOBAL


	)

276 
	#OPENSSL_EXPORT
 

	)

277 
	#OPENSSL_IMPORT
 

	)

278 
	#OPENSSL_GLOBAL


	)

280 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

293 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


294 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

295 
ty≥
 *
_shadow_
##
	`«me
() \

296 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

297 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

298 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

300 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

301 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
«me

302 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
«me

305 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

306 
	#os¶_ssize_t
 

	)

309 #ifde‡
OPENSSL_SYS_MSDOS


310 
	#os¶_ssize_t
 

	)

313 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

314 
	#ssize_t
 

	)

317 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

318 
	#os¶_ssize_t
 

	)

321 #i‚de‡
os¶_ssize_t


322 
	#os¶_ssize_t
 
ssize_t


	)

325 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

90 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

92 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

93 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

94 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

96 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
,

97 
EC_KEY
 *
ecdh
, *(*
KDF
Ë(c⁄° *
ö
, 
size_t
 
öÀn
,

98 *
out
, 
size_t
 *
ouéí
));

100 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


101 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

102 
CRYPTO_EX_‰ì
 *
‰ì_func
);

103 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

104 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

106 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

107 c⁄° *
Z
, 
size_t
 
ZÀn
,

108 c⁄° *
söfo
, 
size_t
 
söfﬁí
,

109 c⁄° 
EVP_MD
 *
md
);

116 
ERR_lﬂd_ECDH_°rögs
();

121 
	#ECDH_F_ECDH_CHECK
 102

	)

122 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

123 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

126 
	#ECDH_R_KDF_FAILED
 102

	)

127 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

128 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

129 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

131 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°
 {

79 
BIGNUM
 *
r
;

80 
BIGNUM
 *
s
;

81 } 
	tECDSA_SIG
;

86 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

91 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

99 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

108 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

117 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
, 
dg°_Àn
,

118 
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
,

132 
EC_KEY
 *
eckey
);

143 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

144 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

146 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

151 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

156 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

163 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

169 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

178 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

206 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

207 *
sig
, *
sigÀn
,

208 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

221 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

222 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

225 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


226 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

227 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ECDSA_METHOD
 *
ECDSA_METHOD_√w
(c⁄° ECDSA_METHOD *
ecdß_mëhod
);

241 
ECDSA_METHOD_‰ì
(
ECDSA_METHOD
 *
ecdß_mëhod
);

248 
ECDSA_METHOD_£t_≠p_d©a
(
ECDSA_METHOD
 *
ecdß_mëhod
, *
≠p
);

255 *
ECDSA_METHOD_gë_≠p_d©a
(
ECDSA_METHOD
 *
ecdß_mëhod
);

262 
ECDSA_METHOD_£t_sign
(
ECDSA_METHOD
 *
ecdß_mëhod
,

263 
ECDSA_SIG
 *(*
ecdß_do_sign
) (const 

264 *
dg°
, 
dg°_Àn
,

265 c⁄° 
BIGNUM
 *
öv
,

266 c⁄° 
BIGNUM
 *
Ω
,

267 
EC_KEY
 *
eckey
));

274 
ECDSA_METHOD_£t_sign_£tup
(
ECDSA_METHOD
 *
ecdß_mëhod
,

275 (*
ecdß_sign_£tup
Ë(
EC_KEY
 *
eckey
,

276 
BN_CTX
 *
˘x
,

277 
BIGNUM
 **
köv
,

278 
BIGNUM
 **
r
));

285 
ECDSA_METHOD_£t_vîify
(
ECDSA_METHOD
 *
ecdß_mëhod
,

286 (*
ecdß_do_vîify
) (const 

287 *
dg°
, 
dg°_Àn
,

288 c⁄° 
ECDSA_SIG
 *
sig
,

289 
EC_KEY
 *
eckey
));

291 
ECDSA_METHOD_£t_Êags
(
ECDSA_METHOD
 *
ecdß_mëhod
, 
Êags
);

298 
ECDSA_METHOD_£t_«me
(
ECDSA_METHOD
 *
ecdß_mëhod
, *
«me
);

310 
ERR_lﬂd_ECDSA_°rögs
();

315 
	#ECDSA_F_ECDSA_CHECK
 104

	)

316 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

317 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

318 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

319 
	#ECDSA_F_ECDSA_METHOD_NEW
 105

	)

320 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

323 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

324 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

325 
	#ECDSA_R_ERR_EC_LIB
 102

	)

326 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

327 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

328 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

329 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

330 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

332 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

107 
	#EVP_PKEY_NONE
 
NID_undef


	)

108 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

109 
	#EVP_PKEY_RSA2
 
NID_rß


	)

110 
	#EVP_PKEY_DSA
 
NID_dß


	)

111 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

112 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

113 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

114 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

115 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

116 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifde‡ 
__˝lu•lus


129 
	sevp_pkey_°
 {

130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°
 {

161 
ty≥
;

162 
pkey_ty≥
;

163 
md_size
;

164 
Êags
;

165 (*
öô
Ë(
EVP_MD_CTX
 *
˘x
);

166 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
cou¡
);

167 (*
föÆ
Ë(
EVP_MD_CTX
 *
˘x
, *
md
);

168 (*
c›y
Ë(
EVP_MD_CTX
 *
to
, c⁄° EVP_MD_CTX *
‰om
);

169 (*
˛ónup
Ë(
EVP_MD_CTX
 *
˘x
);

171 (*
sign
Ë(
ty≥
, c⁄° *
m
, 
m_Àngth
,

172 *
sigªt
, *
sigÀn
, *
key
);

173 (*
vîify
Ë(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 c⁄° *
sigbuf
, 
sigÀn
,

175 *
key
);

176 
ªquúed_pkey_ty≥
[5];

177 
block_size
;

178 
˘x_size
;

180 (*
md_˘æ
Ë(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

183 
	tevp_sign_mëhod
(
	tty≥
, c⁄° *
	tm
,

184 
	tm_Àngth
, *
	tsigªt
,

185 *
	tsigÀn
, *
	tkey
);

186 
	tevp_vîify_mëhod
(
	tty≥
, c⁄° *
	tm
,

187 
	tm_Àngth
,

188 c⁄° *
	tsigbuf
,

189 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

200 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

204 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

208 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

212 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

216 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

220 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

223 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

227 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

228 
	#EVP_MD_CTRL_MICALG
 0x2

	)

232 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

234 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

236 #i‚de‡
OPENSSL_NO_DSA


237 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

238 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

239 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

240 
EVP_PKEY_DSA4
,0}

	)

242 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

245 #i‚de‡
OPENSSL_NO_ECDSA


246 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

247 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

248 {
EVP_PKEY_EC
,0,0,0}

	)

250 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

253 #i‚de‡
OPENSSL_NO_RSA


254 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

255 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

256 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

257 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

258 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

259 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

260 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

262 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

263 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

268 
	sív_md_˘x_°
 {

269 c⁄° 
EVP_MD
 *
dige°
;

270 
ENGINE
 *
ígöe
;

272 
Êags
;

273 *
md_d©a
;

275 
EVP_PKEY_CTX
 *
p˘x
;

277 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
cou¡
);

282 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

284 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

286 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

293 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

301 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

302 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

303 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

304 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

306 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

308 
	sevp_cùhî_°
 {

309 
nid
;

310 
block_size
;

312 
key_Àn
;

313 
iv_Àn
;

315 
Êags
;

317 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

318 c⁄° *
iv
, 
íc
);

320 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

321 c⁄° *
ö
, 
size_t
 
öl
);

323 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *);

325 
˘x_size
;

327 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

329 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

331 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

333 *
≠p_d©a
;

340 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

341 
	#EVP_CIPH_ECB_MODE
 0x1

	)

342 
	#EVP_CIPH_CBC_MODE
 0x2

	)

343 
	#EVP_CIPH_CFB_MODE
 0x3

	)

344 
	#EVP_CIPH_OFB_MODE
 0x4

	)

345 
	#EVP_CIPH_CTR_MODE
 0x5

	)

346 
	#EVP_CIPH_GCM_MODE
 0x6

	)

347 
	#EVP_CIPH_CCM_MODE
 0x7

	)

348 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

349 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

350 
	#EVP_CIPH_MODE
 0xF0007

	)

352 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

354 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

356 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

358 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

360 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

362 
	#EVP_CIPH_NO_PADDING
 0x100

	)

364 
	#EVP_CIPH_RAND_KEY
 0x200

	)

366 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

368 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

370 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

372 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

374 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

378 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

379 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

380 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

387 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

391 
	#EVP_CTRL_INIT
 0x0

	)

392 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

393 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

394 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

395 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

396 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

397 
	#EVP_CTRL_RAND_KEY
 0x6

	)

398 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

399 
	#EVP_CTRL_COPY
 0x8

	)

400 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

401 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

402 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

403 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

404 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

405 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

406 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

407 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

408 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

409 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

415 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

417 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

419 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

421 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

422 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

423 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

424 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

427 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

430 *
out
;

431 c⁄° *
öp
;

432 
size_t
 
Àn
;

433 
öãæóve
;

434 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

438 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

440 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

442 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

444 
	sevp_cùhî_öfo_°
 {

445 c⁄° 
EVP_CIPHER
 *
cùhî
;

446 
iv
[
EVP_MAX_IV_LENGTH
];

447 } 
	tEVP_CIPHER_INFO
;

449 
	sevp_cùhî_˘x_°
 {

450 c⁄° 
EVP_CIPHER
 *
cùhî
;

451 
ENGINE
 *
ígöe
;

453 
í¸y±
;

454 
buf_Àn
;

455 
oiv
[
EVP_MAX_IV_LENGTH
];

456 
iv
[
EVP_MAX_IV_LENGTH
];

457 
buf
[
EVP_MAX_BLOCK_LENGTH
];

458 
num
;

459 *
≠p_d©a
;

460 
key_Àn
;

461 
Êags
;

462 *
cùhî_d©a
;

463 
föÆ_u£d
;

464 
block_mask
;

465 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

468 
	sevp_Encode_Ctx_°
 {

470 
num
;

476 
Àngth
;

478 
íc_d©a
[80];

480 
löe_num
;

481 
ex≥˘_∆
;

482 } 
	tEVP_ENCODE_CTX
;

485 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

486 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

487 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

488 
	tí_de
);

490 #i‚de‡
OPENSSL_NO_RSA


491 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

492 (*)(
rß
))

	)

495 #i‚de‡
OPENSSL_NO_DSA


496 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

497 (*)(
dß
))

	)

500 #i‚de‡
OPENSSL_NO_DH


501 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

502 (*)(
dh
))

	)

505 #i‚de‡
OPENSSL_NO_EC


506 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

507 (*)(
eckey
))

	)

511 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

512 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

513 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

514 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

516 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

517 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

518 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

519 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

520 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

521 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

522 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

524 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

525 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

526 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

527 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

529 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

530 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

531 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

532 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

533 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

534 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

535 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

537 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

538 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

539 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

540 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

541 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

542 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

543 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

544 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

545 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

546 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

547 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

549 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

550 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

552 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

553 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

554 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

555 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

556 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

557 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

558 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

559 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

560 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

561 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

563 #ifde‡
CONST_STRICT


564 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

566 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

568 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

569 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

570 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

571 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

572 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

574 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

575 *
out
, c⁄° *
ö
, 
öl
);

577 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

578 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

579 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

580 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

581 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

582 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

583 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

584 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

586 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

587 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

588 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

589 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

590 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

591 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

592 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

593 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

594 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

595 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
, 
size_t
 
˙t
);

596 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
);

597 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

598 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
,

599 
ENGINE
 *
im∂
);

601 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

602 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

603 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
);

605 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

606 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

607 c⁄° *
¥om±
, 
vîify
);

608 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

609 *
EVP_gë_pw_¥om±
();

611 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

612 c⁄° *
ß…
, c⁄° *
d©a
,

613 
d©Æ
, 
cou¡
, *
key
,

614 *
iv
);

616 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

617 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

618 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

620 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

621 c⁄° *
key
, c⁄° *
iv
);

622 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

623 
ENGINE
 *
im∂
, c⁄° *
key
,

624 c⁄° *
iv
);

625 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

626 c⁄° *
ö
, 
öl
);

627 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

628 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

630 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

631 c⁄° *
key
, c⁄° *
iv
);

632 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

633 
ENGINE
 *
im∂
, c⁄° *
key
,

634 c⁄° *
iv
);

635 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

636 c⁄° *
ö
, 
öl
);

637 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

638 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

640 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

641 c⁄° *
key
, c⁄° *
iv
,

642 
íc
);

643 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

644 
ENGINE
 *
im∂
, c⁄° *
key
,

645 c⁄° *
iv
, 
íc
);

646 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

647 c⁄° *
ö
, 
öl
);

648 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

649 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

651 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

652 
EVP_PKEY
 *
pkey
);

654 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

655 
sigÀn
, 
EVP_PKEY
 *
pkey
);

657 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

658 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

659 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

660 *
sigªt
, 
size_t
 *
sigÀn
);

662 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

663 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

664 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

665 c⁄° *
sig
, 
size_t
 
sigÀn
);

667 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

668 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

669 
EVP_PKEY
 *
¥iv
);

670 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

672 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

673 **
ek
, *
ekl
, *
iv
,

674 
EVP_PKEY
 **
pubk
, 
≈ubk
);

675 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

677 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

678 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

679 c⁄° *
ö
, 
öl
);

680 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

681 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

683 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

684 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

685 c⁄° *
ö
, 
öl
);

686 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

687 *
out
, *
oué
);

688 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

690 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

691 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

692 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

693 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

694 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

695 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

696 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

697 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

699 #i‚de‡
OPENSSL_NO_BIO


700 
BIO_METHOD
 *
BIO_f_md
();

701 
BIO_METHOD
 *
BIO_f_ba£64
();

702 
BIO_METHOD
 *
BIO_f_cùhî
();

703 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

704 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

705 c⁄° *
i
, 
íc
);

708 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

709 #i‚de‡
OPENSSL_NO_MD2


710 c⁄° 
EVP_MD
 *
EVP_md2
();

712 #i‚de‡
OPENSSL_NO_MD4


713 c⁄° 
EVP_MD
 *
EVP_md4
();

715 #i‚de‡
OPENSSL_NO_MD5


716 c⁄° 
EVP_MD
 *
EVP_md5
();

718 #i‚de‡
OPENSSL_NO_SHA


719 c⁄° 
EVP_MD
 *
EVP_sha
();

720 c⁄° 
EVP_MD
 *
EVP_sha1
();

721 c⁄° 
EVP_MD
 *
EVP_dss
();

722 c⁄° 
EVP_MD
 *
EVP_dss1
();

723 c⁄° 
EVP_MD
 *
EVP_ecdß
();

725 #i‚de‡
OPENSSL_NO_SHA256


726 c⁄° 
EVP_MD
 *
EVP_sha224
();

727 c⁄° 
EVP_MD
 *
EVP_sha256
();

729 #i‚de‡
OPENSSL_NO_SHA512


730 c⁄° 
EVP_MD
 *
EVP_sha384
();

731 c⁄° 
EVP_MD
 *
EVP_sha512
();

733 #i‚de‡
OPENSSL_NO_MDC2


734 c⁄° 
EVP_MD
 *
EVP_mdc2
();

736 #i‚de‡
OPENSSL_NO_RIPEMD


737 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

739 #i‚de‡
OPENSSL_NO_WHIRLPOOL


740 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

742 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

743 #i‚de‡
OPENSSL_NO_DES


744 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

745 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

746 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

747 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

749 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

750 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

751 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

752 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

753 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

754 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

756 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

757 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

759 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

760 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

761 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

762 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

763 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

765 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

766 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

767 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

768 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

769 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

770 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

777 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


778 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

779 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

780 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

784 #i‚de‡
OPENSSL_NO_RC4


785 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

786 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

787 #i‚de‡
OPENSSL_NO_MD5


788 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

791 #i‚de‡
OPENSSL_NO_IDEA


792 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

793 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

794 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

795 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

798 #i‚de‡
OPENSSL_NO_RC2


799 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

800 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

801 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

802 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

803 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

804 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

805 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

807 #i‚de‡
OPENSSL_NO_BF


808 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

809 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

810 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

811 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

812 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

814 #i‚de‡
OPENSSL_NO_CAST


815 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

816 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

817 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

818 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

819 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

821 #i‚de‡
OPENSSL_NO_RC5


822 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

823 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

824 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

825 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

826 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

828 #i‚de‡
OPENSSL_NO_AES


829 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

830 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

831 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

832 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

833 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

834 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

837 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

838 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

839 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

840 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

841 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

842 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

843 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

844 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

845 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

846 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

847 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

848 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

849 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

850 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

851 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

852 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

853 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

854 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

855 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

856 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

857 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

858 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

859 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

860 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

861 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

862 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

863 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

864 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

865 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

866 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

868 #i‚de‡
OPENSSL_NO_SHA256


869 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

870 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

873 #i‚de‡
OPENSSL_NO_CAMELLIA


874 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

875 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

876 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

877 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

878 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

879 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

880 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

881 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

882 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

883 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

884 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

885 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

886 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

887 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

888 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

889 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

890 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

891 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

892 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

893 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

894 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

897 #i‚de‡
OPENSSL_NO_SEED


898 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

899 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

900 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

901 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

902 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

905 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

906 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

908 #ifde‡
OPENSSL_LOAD_CONF


909 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

910 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

912 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

913 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

916 
O≥nSSL_add_Æl_cùhîs
();

917 
O≥nSSL_add_Æl_dige°s
();

918 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

919 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

920 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

922 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

923 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

925 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

926 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

927 
EVP_˛ónup
();

929 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

930 c⁄° *
‰om
, c⁄° *
to
, *
x
),

931 *
¨g
);

932 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

933 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

934 c⁄° *
to
, *
x
), *
¨g
);

936 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

937 c⁄° *
‰om
, c⁄° *
to
, *
x
),

938 *
¨g
);

939 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

940 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

941 c⁄° *
to
, *
x
), *
¨g
);

943 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

944 c⁄° *
íc_key
, 
íc_key_Àn
,

945 
EVP_PKEY
 *
¥iv©e_key
);

946 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

947 c⁄° *
key
, 
key_Àn
,

948 
EVP_PKEY
 *
pub_key
);

949 
EVP_PKEY_ty≥
(
ty≥
);

950 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

951 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

952 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

953 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

954 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

955 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

956 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

957 *
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

959 #i‚de‡
OPENSSL_NO_RSA


960 
rß_°
;

961 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

962 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

964 #i‚de‡
OPENSSL_NO_DSA


965 
dß_°
;

966 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

967 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

969 #i‚de‡
OPENSSL_NO_DH


970 
dh_°
;

971 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

972 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

974 #i‚de‡
OPENSSL_NO_EC


975 
ec_key_°
;

976 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

977 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

980 
EVP_PKEY
 *
EVP_PKEY_√w
();

981 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

983 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

984 
Àngth
);

985 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

987 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

988 
Àngth
);

989 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

990 
Àngth
);

991 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

993 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

994 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

995 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

996 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

998 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1000 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1001 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1002 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1003 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1004 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1005 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1007 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1009 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

1012 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1013 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1016 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1017 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1020 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1021 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1022 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1023 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1024 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1025 
keyÀn
, *
out
);

1026 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1027 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1028 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1029 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1030 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1031 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1033 
PKCS5_PBE_add
();

1035 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1036 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1041 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1043 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1045 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1046 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1047 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1048 
EVP_PBE_KEYGEN
 *
keygí
);

1049 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1050 
EVP_PBE_KEYGEN
 **
pkeygí
);

1051 
EVP_PBE_˛ónup
();

1053 
	#ASN1_PKEY_ALIAS
 0x1

	)

1054 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1055 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1057 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1058 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1059 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1060 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1061 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1062 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1064 
EVP_PKEY_a¢1_gë_cou¡
();

1065 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1066 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1067 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1068 c⁄° *
°r
, 
Àn
);

1069 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1070 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1071 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1072 *
µkey_Êags
, c⁄° **
pöfo
,

1073 c⁄° **
µem_°r
,

1074 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1076 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1077 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1078 c⁄° *
≥m_°r
,

1079 c⁄° *
öfo
);

1080 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1081 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1082 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1083 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1084 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1085 
X509_PUBKEY
 *
pub
),

1086 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1087 c⁄° 
EVP_PKEY
 *
pk
),

1088 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1089 c⁄° 
EVP_PKEY
 *
b
),

1090 (*
pub_¥öt
Ë(
BIO
 *
out
,

1091 c⁄° 
EVP_PKEY
 *
pkey
,

1092 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1093 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1094 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1095 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1096 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1097 
PKCS8_PRIV_KEY_INFO


1098 *
p8öf
),

1099 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1100 c⁄° 
EVP_PKEY
 *
pk
),

1101 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1102 c⁄° 
EVP_PKEY
 *
pkey
,

1103 
ödít
,

1104 
ASN1_PCTX
 *
p˘x
));

1105 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1106 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1107 c⁄° **
pdî
,

1108 
dîÀn
),

1109 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1110 **
pdî
),

1111 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1112 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1113 c⁄° 
EVP_PKEY
 *
‰om
),

1114 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1115 c⁄° 
EVP_PKEY
 *
b
),

1116 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1117 c⁄° 
EVP_PKEY
 *
pkey
,

1118 
ödít
,

1119 
ASN1_PCTX
 *
p˘x
));

1121 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1122 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1123 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1124 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1125 
¨g1
, *
¨g2
));

1126 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1127 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1128 c⁄° 
ASN1_ITEM
 *
ô
,

1129 *
a¢
,

1130 
X509_ALGOR
 *
a
,

1131 
ASN1_BIT_STRING
 *
sig
,

1132 
EVP_PKEY
 *
pkey
),

1133 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1134 c⁄° 
ASN1_ITEM
 *
ô
,

1135 *
a¢
,

1136 
X509_ALGOR
 *
Æg1
,

1137 
X509_ALGOR
 *
Æg2
,

1138 
ASN1_BIT_STRING
 *
sig
));

1140 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1141 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1142 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1143 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1144 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1145 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1146 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1147 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1148 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1149 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1150 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1152 
	#EVP_PKEY_OP_TYPE_SIG
 \

1153 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1154 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1156 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1157 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1159 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1160 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1162 
	#EVP_PKEY_OP_TYPE_GEN
 \

1163 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1165 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1166 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1167 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1169 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1170 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1171 
EVP_PKEY_CTRL_GET_MD
, 0, (*)
pmd
)

	)

1173 
	#EVP_PKEY_CTRL_MD
 1

	)

1174 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1176 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1177 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1179 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1181 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1183 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1186 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1188 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1189 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1190 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1192 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1194 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1196 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1198 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1202 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1204 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1205 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1206 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1207 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1208 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1209 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1210 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1212 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1213 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1214 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1215 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1217 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1218 
cmd
, 
p1
, *
p2
);

1219 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1220 c⁄° *
vÆue
);

1222 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1223 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1225 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1226 c⁄° *
key
, 
keyÀn
);

1228 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1229 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1230 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1232 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1234 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1235 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1237 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1238 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1239 *
sig
, 
size_t
 *
sigÀn
,

1240 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1241 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1242 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1243 c⁄° *
sig
, 
size_t
 
sigÀn
,

1244 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1245 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1246 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1247 *
rout
, 
size_t
 *
rouéí
,

1248 c⁄° *
sig
, 
size_t
 
sigÀn
);

1249 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1250 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1251 *
out
, 
size_t
 *
ouéí
,

1252 c⁄° *
ö
, 
size_t
 
öÀn
);

1253 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1254 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1255 *
out
, 
size_t
 *
ouéí
,

1256 c⁄° *
ö
, 
size_t
 
öÀn
);

1258 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1259 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1260 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1262 
	tEVP_PKEY_gí_cb
 (
	tEVP_PKEY_CTX
 *
	t˘x
);

1264 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1265 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1266 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1267 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1269 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1270 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1272 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1274 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1275 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1277 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1278 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1279 
EVP_PKEY_CTX
 *
§c
));

1281 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1282 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1284 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1285 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1286 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1287 
EVP_PKEY
 *
pkey
));

1289 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1290 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1291 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1292 
EVP_PKEY
 *
pkey
));

1294 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1295 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1296 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1297 *
sig
, 
size_t
 *
sigÀn
,

1298 c⁄° *
tbs
,

1299 
size_t
 
tb¶í
));

1301 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1302 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1303 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1304 c⁄° *
sig
,

1305 
size_t
 
sigÀn
,

1306 c⁄° *
tbs
,

1307 
size_t
 
tb¶í
));

1309 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1310 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1311 *
˘x
),

1312 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1313 *
˘x
,

1315 *
sig
,

1316 
size_t
 *
sigÀn
,

1318 *
tbs
,

1319 
size_t
 
tb¶í
));

1321 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1322 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1323 
EVP_MD_CTX
 *
m˘x
),

1324 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1325 *
sig
,

1326 
size_t
 *
sigÀn
,

1327 
EVP_MD_CTX
 *
m˘x
));

1329 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1330 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1331 
EVP_MD_CTX
 *
m˘x
),

1332 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1333 c⁄° *
sig
,

1334 
sigÀn
,

1335 
EVP_MD_CTX
 *
m˘x
));

1337 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1338 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1339 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1340 *
out
,

1341 
size_t
 *
ouéí
,

1342 c⁄° *
ö
,

1343 
size_t
 
öÀn
));

1345 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1346 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1347 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1348 *
out
,

1349 
size_t
 *
ouéí
,

1350 c⁄° *
ö
,

1351 
size_t
 
öÀn
));

1353 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1354 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1355 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1356 *
key
,

1357 
size_t
 *
keyÀn
));

1359 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1360 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1361 *
p2
),

1362 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1363 c⁄° *
ty≥
,

1364 c⁄° *
vÆue
));

1366 
EVP_PKEY_mëh_gë_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1367 (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1369 
EVP_PKEY_mëh_gë_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1370 (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1371 
EVP_PKEY_CTX
 *
§c
));

1373 
EVP_PKEY_mëh_gë_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1374 (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1376 
EVP_PKEY_mëh_gë_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1377 (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1378 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1379 
EVP_PKEY
 *
pkey
));

1381 
EVP_PKEY_mëh_gë_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1382 (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1383 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1384 
EVP_PKEY
 *
pkey
));

1386 
EVP_PKEY_mëh_gë_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1387 (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1388 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1389 *
sig
, 
size_t
 *
sigÀn
,

1390 c⁄° *
tbs
,

1391 
size_t
 
tb¶í
));

1393 
EVP_PKEY_mëh_gë_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1394 (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1395 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1396 c⁄° *
sig
,

1397 
size_t
 
sigÀn
,

1398 c⁄° *
tbs
,

1399 
size_t
 
tb¶í
));

1401 
EVP_PKEY_mëh_gë_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1402 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1403 *
˘x
),

1404 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX


1405 *
˘x
,

1407 *
sig
,

1408 
size_t
 *
sigÀn
,

1410 *
tbs
,

1411 
size_t
 
tb¶í
));

1413 
EVP_PKEY_mëh_gë_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1414 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1415 
EVP_MD_CTX
 *
m˘x
),

1416 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1417 *
sig
,

1418 
size_t
 *
sigÀn
,

1419 
EVP_MD_CTX
 *
m˘x
));

1421 
EVP_PKEY_mëh_gë_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1422 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1423 
EVP_MD_CTX
 *
m˘x
),

1424 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1425 c⁄° *
sig
,

1426 
sigÀn
,

1427 
EVP_MD_CTX
 *
m˘x
));

1429 
EVP_PKEY_mëh_gë_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1430 (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1431 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1432 *
out
,

1433 
size_t
 *
ouéí
,

1434 c⁄° *
ö
,

1435 
size_t
 
öÀn
));

1437 
EVP_PKEY_mëh_gë_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1438 (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1439 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1440 *
out
,

1441 
size_t
 *
ouéí
,

1442 c⁄° *
ö
,

1443 
size_t
 
öÀn
));

1445 
EVP_PKEY_mëh_gë_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1446 (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1447 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1448 *
key
,

1449 
size_t
 *
keyÀn
));

1451 
EVP_PKEY_mëh_gë_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1452 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1453 *
p2
),

1454 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1455 c⁄° *
ty≥
,

1456 c⁄° *
vÆue
));

1458 
EVP_add_Æg_moduÀ
();

1466 
ERR_lﬂd_EVP_°rögs
();

1471 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1472 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1473 
	#EVP_F_AES_INIT_KEY
 133

	)

1474 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

1475 
	#EVP_F_AES_XTS
 172

	)

1476 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1477 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1478 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1479 
	#EVP_F_CMAC_INIT
 173

	)

1480 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

1481 
	#EVP_F_D2I_PKEY
 100

	)

1482 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1483 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1484 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1485 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1486 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1487 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1488 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1489 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1490 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1491 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1492 
	#EVP_F_EVP_DECRYPTUPDATE
 181

	)

1493 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1494 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1495 
	#EVP_F_EVP_ENCRYPTUPDATE
 180

	)

1496 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1497 
	#EVP_F_EVP_MD_SIZE
 162

	)

1498 
	#EVP_F_EVP_OPENINIT
 102

	)

1499 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1500 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1501 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1502 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1503 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1504 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1505 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1506 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1507 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1508 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1509 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1510 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1511 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1512 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1513 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1514 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1515 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1516 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1517 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1518 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1519 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1520 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1521 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1522 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1523 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1524 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1525 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1526 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1527 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1528 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1529 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1530 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1531 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1532 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1533 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1534 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1535 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1536 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1537 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1538 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1539 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1540 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1541 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1542 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1543 
	#EVP_F_HMAC_INIT_EX
 174

	)

1544 
	#EVP_F_INT_CTX_NEW
 157

	)

1545 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1546 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1547 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1548 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1549 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1550 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1551 
	#EVP_F_RC5_CTRL
 125

	)

1554 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1555 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1556 
	#EVP_R_ASN1_LIB
 140

	)

1557 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1558 
	#EVP_R_BAD_DECRYPT
 100

	)

1559 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1560 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1561 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1562 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1563 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1564 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1565 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1566 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1567 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1568 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1569 
	#EVP_R_DECODE_ERROR
 114

	)

1570 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1571 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1572 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1573 
	#EVP_R_ENCODE_ERROR
 115

	)

1574 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1575 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1576 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1577 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1578 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1579 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1580 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1581 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1582 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1583 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1584 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1585 
	#EVP_R_INVALID_DIGEST
 152

	)

1586 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1587 
	#EVP_R_INVALID_KEY
 171

	)

1588 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1589 
	#EVP_R_INVALID_OPERATION
 148

	)

1590 
	#EVP_R_IV_TOO_LARGE
 102

	)

1591 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1592 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1593 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1594 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1595 
	#EVP_R_NO_CIPHER_SET
 131

	)

1596 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1597 
	#EVP_R_NO_DIGEST_SET
 139

	)

1598 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1599 
	#EVP_R_NO_KEY_SET
 154

	)

1600 
	#EVP_R_NO_OPERATION_SET
 149

	)

1601 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1602 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1603 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1604 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1605 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1606 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1607 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1608 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1609 
	#EVP_R_TOO_LARGE
 164

	)

1610 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1611 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1612 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1613 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1614 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1615 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1616 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1617 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1618 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1619 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1620 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1621 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1622 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1623 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

1624 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1625 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1627 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

64 #i‚de‡
KSSL_H


65 
	#KSSL_H


	)

67 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_KRB5


71 
	~<°dio.h
>

72 
	~<˘y≥.h
>

73 
	~<krb5.h
>

74 #ifde‡
OPENSSL_SYS_WIN32


79 #unde‡
X509_NAME


80 #unde‡
X509_EXTENSIONS


81 #unde‡
OCSP_REQUEST


82 #unde‡
OCSP_RESPONSE


85 #ifde‡ 
__˝lu•lus


93 #ifde‡
KRB5_HEIMDAL


94 
	tkrb5_o˘ë
;

95 
	#FAR


	)

98 #i‚de‡
FAR


99 
	#FAR


	)

111 #i‚de‡
KRB5SVC


112 
	#KRB5SVC
 "ho°"

	)

115 #i‚de‡
KRB5KEYTAB


116 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

119 #i‚de‡
KRB5SENDAUTH


120 
	#KRB5SENDAUTH
 1

	)

123 #i‚de‡
KRB5CHECKAUTH


124 
	#KRB5CHECKAUTH
 1

	)

127 #i‚de‡
KSSL_CLOCKSKEW


128 
	#KSSL_CLOCKSKEW
 300;

	)

131 
	#KSSL_ERR_MAX
 255

	)

132 
	sks¶_îr_°
 {

133 
	gªas⁄
;

134 
	gãxt
[
KSSL_ERR_MAX
 + 1];

135 } 
	tKSSL_ERR
;

141 
	sks¶_˘x_°
 {

143 *
	g£rvi˚_«me
;

144 *
	g£rvi˚_ho°
;

145 *
	g˛õ¡_¥öc
;

146 *
	gkeyèb_fûe
;

147 *
	g¸ed_ˇche
;

148 
krb5_í˘y≥
 
	gí˘y≥
;

149 
	gÀngth
;

150 
krb5_o˘ë
 
FAR
 *
	gkey
;

151 } 
	tKSSL_CTX
;

153 
	#KSSL_CLIENT
 1

	)

154 
	#KSSL_SERVER
 2

	)

155 
	#KSSL_SERVICE
 3

	)

156 
	#KSSL_KEYTAB
 4

	)

158 
	#KSSL_CTX_OK
 0

	)

159 
	#KSSL_CTX_ERR
 1

	)

160 
	#KSSL_NOMEM
 2

	)

163 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

164 
KSSL_CTX
 *
ks¶_˘x_√w
();

165 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

166 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

167 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

168 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
,

169 
√¡ôõs
);

170 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

171 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

172 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

173 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

174 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

175 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

176 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

177 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

178 
krb5_¥öcùÆ
 *
¥öc
, 
æí
,

179 c⁄° *
ªÆm
, 
¶í
,

180 c⁄° *
svc
, 
hÀn
,

181 c⁄° *
ho°
);

182 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

183 
krb5_tickë_times
 *
âimes
);

184 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

185 
krb5_time°amp
 *
©imï
,

186 
KSSL_ERR
 *
ks¶_îr
);

187 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

189 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

190 
KSSL_CTX
 *
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

191 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

193 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°
 {

80 *
d©a
;

81 
lhash_node_°
 *
√xt
;

82 #i‚de‡
OPENSSL_NO_HASH_COMP


83 
hash
;

85 } 
	tLHASH_NODE
;

87 (*
LHASH_COMP_FN_TYPE
) (const *, const *);

88 (*
	tLHASH_HASH_FN_TYPE
) (const *);

89 (*
LHASH_DOALL_FN_TYPE
) (*);

90 (*
LHASH_DOALL_ARG_FN_TYPE
) (*, *);

102 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

103 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

104 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

105 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

106 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

107  
«me
##
	`_hash
(
a
); }

	)

108 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

111 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

112 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

113 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

114 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

115 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

116 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

117  
«me
##
	`_cmp
(
a
,
b
); }

	)

118 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

121 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

122 
«me
##
	`_LHASH_DOALL
(*);

	)

123 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

124 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

125 
o_ty≥
 *
a
 = 
¨g
; \

126 
«me
##
	`_dﬂŒ
(
a
); }

	)

127 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

130 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

131 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

132 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

133 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

134 
o_ty≥
 *
a
 = 
¨g1
; \

135 
a_ty≥
 *
b
 = 
¨g2
; \

136 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

137 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

139 
	slhash_°
 {

140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

150 
num_ex∑nds
;

151 
num_ex∑nd_ªÆlocs
;

152 
num_c⁄åa˘s
;

153 
num_c⁄åa˘_ªÆlocs
;

154 
num_hash_ˇŒs
;

155 
num_comp_ˇŒs
;

156 
num_ö£π
;

157 
num_ª∂a˚
;

158 
num_dñëe
;

159 
num_no_dñëe
;

160 
num_ªåõve
;

161 
num_ªåõve_miss
;

162 
num_hash_comps
;

163 
îr‹
;

164 } 
	t_LHASH
;

167 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
ty≥

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 #ifde‡ 
__˝lu•lus


62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
NO_ASN1_TYPEDEFS


65 
	#ASN1_INTEGER
 
ASN1_STRING


	)

66 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

67 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

68 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

69 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

70 
	#ASN1_T61STRING
 
ASN1_STRING


	)

71 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

72 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

73 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

74 
	#ASN1_TIME
 
ASN1_STRING


	)

75 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

76 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

77 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

78 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

79 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

80 
	#ASN1_BOOLEAN
 

	)

81 
	#ASN1_NULL
 

	)

83 
a¢1_°rög_°
 
	tASN1_INTEGER
;

84 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

85 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

86 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

87 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

88 
a¢1_°rög_°
 
	tASN1_T61STRING
;

89 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

90 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

91 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

92 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

94 
a¢1_°rög_°
 
	tASN1_TIME
;

95 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

96 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

97 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

98 
a¢1_°rög_°
 
	tASN1_STRING
;

99 
	tASN1_BOOLEAN
;

100 
	tASN1_NULL
;

103 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

105 
ASN1_ITEM_°
 
	tASN1_ITEM
;

106 
a¢1_p˘x_°
 
	tASN1_PCTX
;

108 #ifde‡
OPENSSL_SYS_WIN32


109 #unde‡
X509_NAME


110 #unde‡
X509_EXTENSIONS


111 #unde‡
X509_CERT_PAIR


112 #unde‡
PKCS7_ISSUER_AND_SERIAL


113 #unde‡
OCSP_REQUEST


114 #unde‡
OCSP_RESPONSE


117 #ifde‡
BIGNUM


118 #unde‡
BIGNUM


120 
bignum_°
 
	tBIGNUM
;

121 
bignum_˘x
 
	tBN_CTX
;

122 
bn_blödög_°
 
	tBN_BLINDING
;

123 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

124 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

125 
bn_gícb_°
 
	tBN_GENCB
;

127 
buf_mem_°
 
	tBUF_MEM
;

129 
evp_cùhî_°
 
	tEVP_CIPHER
;

130 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

131 
ív_md_°
 
	tEVP_MD
;

132 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

133 
evp_pkey_°
 
	tEVP_PKEY
;

135 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

137 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

138 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

140 
dh_°
 
	tDH
;

141 
dh_mëhod
 
	tDH_METHOD
;

143 
dß_°
 
	tDSA
;

144 
dß_mëhod
 
	tDSA_METHOD
;

146 
rß_°
 
	tRSA
;

147 
rß_mëh_°
 
	tRSA_METHOD
;

149 
ønd_mëh_°
 
	tRAND_METHOD
;

151 
ecdh_mëhod
 
	tECDH_METHOD
;

152 
ecdß_mëhod
 
	tECDSA_METHOD
;

154 
x509_°
 
	tX509
;

155 
X509_Æg‹_°
 
	tX509_ALGOR
;

156 
X509_¸l_°
 
	tX509_CRL
;

157 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

158 
x509_ªvoked_°
 
	tX509_REVOKED
;

159 
X509_«me_°
 
	tX509_NAME
;

160 
X509_pubkey_°
 
	tX509_PUBKEY
;

161 
x509_°‹e_°
 
	tX509_STORE
;

162 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

164 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

166 
v3_ext_˘x
 
	tX509V3_CTX
;

167 
c⁄f_°
 
	tCONF
;

169 
°‹e_°
 
	tSTORE
;

170 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

172 
ui_°
 
	tUI
;

173 
ui_mëhod_°
 
	tUI_METHOD
;

175 
°_ERR_FNS
 
	tERR_FNS
;

177 
ígöe_°
 
	tENGINE
;

178 
s¶_°
 
	tSSL
;

179 
s¶_˘x_°
 
	tSSL_CTX
;

181 
comp_mëhod_°
 
	tCOMP_METHOD
;

183 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

184 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

185 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

186 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

188 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

189 
DIST_POINT_°
 
	tDIST_POINT
;

190 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

191 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

194 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
)

	)

195 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
)

	)

197 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

199 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

200 
	tidx
, 
	t¨gl
, *
	t¨gp
);

201 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

202 
	tidx
, 
	t¨gl
, *
	t¨gp
);

203 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
,

204 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

206 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

207 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

208 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

210 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

133 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

134 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

135 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

136 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

137 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

138 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

139 
	#PEM_STRING_CMS
 "CMS"

	)

145 
	sPEM_Encode_Sól_°
 {

146 
EVP_ENCODE_CTX
 
ícode
;

147 
EVP_MD_CTX
 
md
;

148 
EVP_CIPHER_CTX
 
cùhî
;

149 } 
	tPEM_ENCODE_SEAL_CTX
;

152 
	#PEM_TYPE_ENCRYPTED
 10

	)

153 
	#PEM_TYPE_MIC_ONLY
 20

	)

154 
	#PEM_TYPE_MIC_CLEAR
 30

	)

155 
	#PEM_TYPE_CLEAR
 40

	)

157 
	s≥m_ªcù_°
 {

158 *
«me
;

159 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°
 {

166 
ty≥
;

168 
vîsi⁄
;

169 
mode
;

170 } 
¥oc_ty≥
;

172 *
domaö
;

175 
cùhî
;

179 } 
DEK_öfo
;

181 
PEM_USER
 *
‹igö©‹
;

183 
num_ªcùõ¡
;

184 
PEM_USER
 **
ªcùõ¡
;

188 
EVP_MD
 *
md
;

190 
md_íc
;

191 
md_Àn
;

192 *
md_d©a
;

194 
EVP_CIPHER
 *
dec
;

195 
key_Àn
;

196 *
key
;

201 
d©a_íc
;

202 
d©a_Àn
;

203 *
d©a
;

204 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

221 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

222 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

224  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

225 }

	)

227 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

228 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

230  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

231 }

	)

233 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

234 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

236  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

237 }

	)

239 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

240 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

241 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

242 *
u
) \

244  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

245 }

	)

247 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

248 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

249 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

250 *
u
) \

252  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

253 }

	)

257 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

258 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

260  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

261 }

	)

263 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

264 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

266  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

267 }

	)

269 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

270 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

272  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

273 }

	)

275 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

276 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

277 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

279  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

280 }

	)

282 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

283 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

284 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

286  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

287 }

	)

289 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

290 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

293 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

294 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

297 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

298 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

301 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

302 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

305 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

306 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

309 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

310 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

313 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

314 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

317 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

318 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

323 #i‡
deföed
(
OPENSSL_NO_FP_API
)

325 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

326 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

330 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

331 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

333 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

334 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

336 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

337 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

339 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

340 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

341 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

345 #i‚de‡
OPENSSL_NO_BIO


346 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

347 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

349 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

350 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

352 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

353 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

355 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

356 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

357 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

361 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

362 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

363 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

367 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

368 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

369 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

370 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

372 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

373 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

374 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

375 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

377 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

381 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

382 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

384 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

385 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

386 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

389 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

392 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
);

395 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

396 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

397 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

399 #i‚de‡
OPENSSL_NO_BIO


400 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

401 **
d©a
, *
Àn
);

402 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

403 c⁄° *
d©a
, 
Àn
);

404 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

405 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

406 *
u
);

407 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

408 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

409 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
, *
x
,

410 c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
, 
kÀn
,

411 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

413 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

414 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

415 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

416 *
k°r
, 
kÀn
,

417 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

420 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

421 **
d©a
, *
Àn
);

422 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

423 c⁄° *
d©a
, 
Àn
);

424 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

425 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

426 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

427 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
,

428 
kÀn
, 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

429 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

430 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

432 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

433 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

434 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

435 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

436 *
ö
, 
öl
);

437 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
, *
sigl
,

438 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

440 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

441 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, *
d
, 
˙t
);

442 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

443 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

446 
PEM_def_ˇŒback
(*
buf
, 
num
, 
rwÊag
, *
u£rd©a
);

447 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

448 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

450 
	~<›ís¶/symhacks.h
>

452 
DECLARE_PEM_rw
(
X509
, X509)

453 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

454 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

455 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

456 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

457 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

458 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

459 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

460 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

461 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

462 #i‚de‡
OPENSSL_NO_RSA


463 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

464 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

465 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

467 #i‚de‡
OPENSSL_NO_DSA


468 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

469 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

470 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

472 #i‚de‡
OPENSSL_NO_EC


473 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

474 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

475 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

477 #i‚de‡
OPENSSL_NO_DH


478 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

479 
DECLARE_PEM_wrôe_c⁄°
(
DHx∑øms
, 
DH
)

481 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

482 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

484 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

485 *
k°r
, 
kÀn
,

486 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

487 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

488 *, , 
≥m_∑ssw‹d_cb
 *, *);

489 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

490 *
k°r
, 
kÀn
,

491 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

492 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

493 *
k°r
, 
kÀn
,

494 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

495 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

496 *
u
);

498 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

499 *
k°r
, 
kÀn
,

500 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

501 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

502 *
k°r
, 
kÀn
,

503 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

504 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

505 *
k°r
, 
kÀn
,

506 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

508 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

509 *
u
);

511 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

512 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
,

513 *
u
);

515 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

516 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

518 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

519 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

520 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

521 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

522 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

523 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

524 #i‚de‡
OPENSSL_NO_RC4


525 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

527 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
ERR_lﬂd_PEM_°rögs
();

541 
	#PEM_F_B2I_DSS
 127

	)

542 
	#PEM_F_B2I_PVK_BIO
 128

	)

543 
	#PEM_F_B2I_RSA
 129

	)

544 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

545 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

546 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

547 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

548 
	#PEM_F_DO_B2I
 132

	)

549 
	#PEM_F_DO_B2I_BIO
 133

	)

550 
	#PEM_F_DO_BLOB_HEADER
 134

	)

551 
	#PEM_F_DO_PK8PKEY
 126

	)

552 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

553 
	#PEM_F_DO_PVK_BODY
 135

	)

554 
	#PEM_F_DO_PVK_HEADER
 136

	)

555 
	#PEM_F_I2B_PVK
 137

	)

556 
	#PEM_F_I2B_PVK_BIO
 138

	)

557 
	#PEM_F_LOAD_IV
 101

	)

558 
	#PEM_F_PEM_ASN1_READ
 102

	)

559 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

560 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

561 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

562 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

563 
	#PEM_F_PEM_DO_HEADER
 106

	)

564 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

565 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

566 
	#PEM_F_PEM_PK8PKEY
 119

	)

567 
	#PEM_F_PEM_READ
 108

	)

568 
	#PEM_F_PEM_READ_BIO
 109

	)

569 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 141

	)

570 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

571 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

572 
	#PEM_F_PEM_READ_DHPARAMS
 142

	)

573 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

574 
	#PEM_F_PEM_SEALFINAL
 110

	)

575 
	#PEM_F_PEM_SEALINIT
 111

	)

576 
	#PEM_F_PEM_SIGNFINAL
 112

	)

577 
	#PEM_F_PEM_WRITE
 113

	)

578 
	#PEM_F_PEM_WRITE_BIO
 114

	)

579 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

580 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

581 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

582 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

585 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

586 
	#PEM_R_BAD_DECRYPT
 101

	)

587 
	#PEM_R_BAD_END_LINE
 102

	)

588 
	#PEM_R_BAD_IV_CHARS
 103

	)

589 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

590 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

591 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

592 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

593 
	#PEM_R_CIPHER_IS_NULL
 127

	)

594 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

595 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

596 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

597 
	#PEM_R_HEADER_TOO_LONG
 128

	)

598 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

599 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

600 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

601 
	#PEM_R_NOT_DEK_INFO
 105

	)

602 
	#PEM_R_NOT_ENCRYPTED
 106

	)

603 
	#PEM_R_NOT_PROC_TYPE
 107

	)

604 
	#PEM_R_NO_START_LINE
 108

	)

605 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

606 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

607 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

608 
	#PEM_R_PVK_TOO_SHORT
 125

	)

609 
	#PEM_R_READ_KEY
 111

	)

610 
	#PEM_R_SHORT_HEADER
 112

	)

611 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

612 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

613 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

615 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°
 {

82 (*
£ed
Ë(c⁄° *
buf
, 
num
);

83 (*
byãs
Ë(*
buf
, 
num
);

84 (*
˛ónup
) ();

85 (*
add
Ë(c⁄° *
buf
, 
num
, 
íå›y
);

86 (*
p£ud‹™d
Ë(*
buf
, 
num
);

87 (*
°©us
) ();

90 #ifde‡
BN_DEBUG


91 
ønd_¥edi˘abÀ
;

94 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

95 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

96 #i‚de‡
OPENSSL_NO_ENGINE


97 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

99 
RAND_METHOD
 *
RAND_SSLóy
();

100 
RAND_˛ónup
();

101 
RAND_byãs
(*
buf
, 
num
);

102 
RAND_p£udo_byãs
(*
buf
, 
num
);

103 
RAND_£ed
(c⁄° *
buf
, 
num
);

104 
RAND_add
(c⁄° *
buf
, 
num
, 
íå›y
);

105 
RAND_lﬂd_fûe
(c⁄° *
fûe
, 
max_byãs
);

106 
RAND_wrôe_fûe
(c⁄° *
fûe
);

107 c⁄° *
RAND_fûe_«me
(*
fûe
, 
size_t
 
num
);

108 
RAND_°©us
();

109 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

110 
RAND_egd
(c⁄° *
∑th
);

111 
RAND_egd_byãs
(c⁄° *
∑th
, 
byãs
);

112 
RAND_pﬁl
();

114 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

116 
RAND_s¸ìn
();

117 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

121 #ifde‡
OPENSSL_FIPS


122 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

123 
RAND_öô_fùs
();

131 
ERR_lﬂd_RAND_°rögs
();

136 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

137 
	#RAND_F_RAND_INIT_FIPS
 102

	)

138 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

141 
	#RAND_R_DUAL_EC_DRBG_DISABLED
 104

	)

142 
	#RAND_R_ERROR_INITIALISING_DRBG
 102

	)

143 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 103

	)

144 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 101

	)

145 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

147 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°
 {

86 c⁄° *
«me
;

87 (*
rß_pub_íc
Ë(
Êí
, c⁄° *
‰om
,

88 *
to
, 
RSA
 *
rß
, 
∑ddög
);

89 (*
rß_pub_dec
Ë(
Êí
, c⁄° *
‰om
,

90 *
to
, 
RSA
 *
rß
, 
∑ddög
);

91 (*
rß_¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

92 *
to
, 
RSA
 *
rß
, 
∑ddög
);

93 (*
rß_¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

94 *
to
, 
RSA
 *
rß
, 
∑ddög
);

96 (*
rß_mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
I
, 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

98 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

99 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

101 (*
öô
Ë(
RSA
 *
rß
);

103 (*
föish
Ë(
RSA
 *
rß
);

105 
Êags
;

107 *
≠p_d©a
;

116 (*
rß_sign
Ë(
ty≥
,

117 c⁄° *
m
, 
m_Àngth
,

118 *
sigªt
, *
sigÀn
,

119 c⁄° 
RSA
 *
rß
);

120 (*
rß_vîify
Ë(
dty≥
, c⁄° *
m
,

121 
m_Àngth
, c⁄° *
sigbuf
,

122 
sigÀn
, c⁄° 
RSA
 *
rß
);

129 (*
rß_keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

132 
	srß_°
 {

137 
∑d
;

138 
vîsi⁄
;

139 c⁄° 
RSA_METHOD
 *
mëh
;

141 
ENGINE
 *
ígöe
;

142 
BIGNUM
 *
n
;

143 
BIGNUM
 *
e
;

144 
BIGNUM
 *
d
;

145 
BIGNUM
 *
p
;

146 
BIGNUM
 *
q
;

147 
BIGNUM
 *
dmp1
;

148 
BIGNUM
 *
dmq1
;

149 
BIGNUM
 *
iqmp
;

151 
CRYPTO_EX_DATA
 
ex_d©a
;

152 
ª„ªn˚s
;

153 
Êags
;

155 
BN_MONT_CTX
 *
_mëhod_mod_n
;

156 
BN_MONT_CTX
 *
_mëhod_mod_p
;

157 
BN_MONT_CTX
 *
_mëhod_mod_q
;

162 *
bignum_d©a
;

163 
BN_BLINDING
 *
blödög
;

164 
BN_BLINDING
 *
mt_blödög
;

167 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


168 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

171 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


172 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

174 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


177 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

180 
	#RSA_3
 0x3L

	)

181 
	#RSA_F4
 0x10001L

	)

183 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

186 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

187 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

188 
	#RSA_FLAG_BLINDING
 0x0008

	)

189 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

196 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

202 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

210 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

222 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

223 #ifde‡
OPENSSL_USE_DEPRECATED


233 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

236 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

237 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

238 
∑d
, 
NULL
)

	)

240 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

241 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

242 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

244 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

245 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

246 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

247 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

248 
Àn
, 
NULL
)

	)

250 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

251 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

252 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

253 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

254 0, 
∂í
)

	)

256 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

257 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

258 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

260 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

261 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

262 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

264 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

265 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

266 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

267 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

269 
	#EVP_PKEY_CTX_£t_rß_ﬂï_md
(
˘x
, 
md
) \

270 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

271 
EVP_PKEY_CTRL_RSA_OAEP_MD
, 0, (*)
md
)

	)

273 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

274 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

275 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

276 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

278 
	#EVP_PKEY_CTX_gë_rß_ﬂï_md
(
˘x
, 
pmd
) \

279 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

280 
EVP_PKEY_CTRL_GET_RSA_OAEP_MD
, 0, (*)
pmd
)

	)

282 
	#EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
˘x
, 
l
, 
Œí
) \

283 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

284 
EVP_PKEY_CTRL_RSA_OAEP_LABEL
, 
Œí
, (*)
l
)

	)

286 
	#EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
˘x
, 
l
) \

287 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

288 
EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
, 0, (*)
l
)

	)

290 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

291 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

293 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

294 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

295 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

297 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

298 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

299 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

301 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

302 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

304 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

305 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

307 
	#RSA_PKCS1_PADDING
 1

	)

308 
	#RSA_SSLV23_PADDING
 2

	)

309 
	#RSA_NO_PADDING
 3

	)

310 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

311 
	#RSA_X931_PADDING
 5

	)

313 
	#RSA_PKCS1_PSS_PADDING
 6

	)

315 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

317 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

318 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

320 
RSA
 *
RSA_√w
();

321 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

322 
RSA_size
(c⁄° 
RSA
 *
rß
);

325 #i‚de‡
OPENSSL_NO_DEPRECATED


326 
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

327 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

331 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

333 
RSA_check_key
(c⁄° 
RSA
 *);

335 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

336 *
to
, 
RSA
 *
rß
, 
∑ddög
);

337 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

338 *
to
, 
RSA
 *
rß
, 
∑ddög
);

339 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

340 *
to
, 
RSA
 *
rß
, 
∑ddög
);

341 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

342 *
to
, 
RSA
 *
rß
, 
∑ddög
);

343 
RSA_‰ì
(
RSA
 *
r
);

345 
RSA_up_ªf
(
RSA
 *
r
);

347 
RSA_Êags
(c⁄° 
RSA
 *
r
);

349 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

350 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

351 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

352 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

355 
RSA_mem‹y_lock
(
RSA
 *
r
);

358 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

360 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

362 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

363 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

365 
	srß_pss_∑øms_°
 {

366 
X509_ALGOR
 *
hashAlg‹ôhm
;

367 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

368 
ASN1_INTEGER
 *
ß…Lígth
;

369 
ASN1_INTEGER
 *
åaûîFõld
;

370 } 
	tRSA_PSS_PARAMS
;

372 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

374 
	srß_ﬂï_∑øms_°
 {

375 
X509_ALGOR
 *
hashFunc
;

376 
X509_ALGOR
 *
maskGíFunc
;

377 
X509_ALGOR
 *
pSour˚Func
;

378 } 
	tRSA_OAEP_PARAMS
;

380 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

382 #i‚de‡
OPENSSL_NO_FP_API


383 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

386 #i‚de‡
OPENSSL_NO_BIO


387 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

390 #i‚de‡
OPENSSL_NO_RC4


391 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

392 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

393 
vîify
), 
sgckey
);

394 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

395 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

396 
vîify
), 
sgckey
);

398 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

399 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

400 
vîify
));

401 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

402 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

403 
vîify
));

410 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

411 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

412 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

413 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

419 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

420 c⁄° *
m
, 
m_Àngth
,

421 *
sigªt
, *
sigÀn
,

422 
RSA
 *
rß
);

423 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
, c⁄° *
m
,

424 
m_Àngth
, *
sigbuf
,

425 
sigÀn
, 
RSA
 *
rß
);

427 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

428 
RSA_blödög_off
(
RSA
 *
rß
);

429 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

431 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

432 c⁄° *
f
, 
Ê
);

433 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

434 c⁄° *
f
, 
Ê
,

435 
rß_Àn
);

436 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

437 c⁄° *
f
, 
Ê
);

438 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

439 c⁄° *
f
, 
Ê
,

440 
rß_Àn
);

441 
PKCS1_MGF1
(*
mask
, 
Àn
, c⁄° *
£ed
,

442 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

443 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

444 c⁄° *
f
, 
Ê
,

445 c⁄° *
p
, 
∂
);

446 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

447 c⁄° *
f
, 
Ê
, 
rß_Àn
,

448 c⁄° *
p
, 
∂
);

449 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

450 c⁄° *
‰om
, 
Êí
,

451 c⁄° *
∑øm
, 
∂í
,

452 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

453 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

454 c⁄° *
‰om
, 
Êí
,

455 
num
, c⁄° *
∑øm
,

456 
∂í
, c⁄° 
EVP_MD
 *
md
,

457 c⁄° 
EVP_MD
 *
mgf1md
);

458 
RSA_∑ddög_add_SSLv23
(*
to
, 
éí
,

459 c⁄° *
f
, 
Ê
);

460 
RSA_∑ddög_check_SSLv23
(*
to
, 
éí
,

461 c⁄° *
f
, 
Ê
, 
rß_Àn
);

462 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
, c⁄° *
f
,

463 
Ê
);

464 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

465 c⁄° *
f
, 
Ê
, 
rß_Àn
);

466 
RSA_∑ddög_add_X931
(*
to
, 
éí
, c⁄° *
f
,

467 
Ê
);

468 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

469 c⁄° *
f
, 
Ê
, 
rß_Àn
);

470 
RSA_X931_hash_id
(
nid
);

472 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

473 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

474 
sLí
);

475 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

476 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

477 
sLí
);

479 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

480 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

481 c⁄° *
EM
, 
sLí
);

483 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

484 c⁄° *
mHash
,

485 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

486 
sLí
);

488 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

489 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

490 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

491 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

493 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

494 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

503 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

511 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

516 
	#RSA_FLAG_CHECKED
 0x0800

	)

523 
ERR_lﬂd_RSA_°rögs
();

528 
	#RSA_F_CHECK_PADDING_MD
 140

	)

529 
	#RSA_F_DO_RSA_PRINT
 146

	)

530 
	#RSA_F_INT_RSA_VERIFY
 145

	)

531 
	#RSA_F_MEMORY_LOCK
 100

	)

532 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

533 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

534 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

535 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

536 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

537 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

538 
	#RSA_F_RSA_ALGOR_TO_MD
 157

	)

539 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

540 
	#RSA_F_RSA_CHECK_KEY
 123

	)

541 
	#RSA_F_RSA_CMS_DECRYPT
 158

	)

542 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

543 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

544 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

545 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

546 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

547 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

548 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

549 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

550 
	#RSA_F_RSA_MGF1_TO_MD
 159

	)

551 
	#RSA_F_RSA_NEW_METHOD
 106

	)

552 
	#RSA_F_RSA_NULL
 124

	)

553 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

554 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

555 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

556 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

557 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

558 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

559 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

560 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 160

	)

561 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

562 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

563 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

564 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

565 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

566 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

567 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

568 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

569 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 161

	)

570 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

571 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

572 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

573 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

574 
	#RSA_F_RSA_PRINT
 115

	)

575 
	#RSA_F_RSA_PRINT_FP
 116

	)

576 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

577 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

578 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

579 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

580 
	#RSA_F_RSA_PSS_TO_CTX
 162

	)

581 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

582 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

583 
	#RSA_F_RSA_PUB_DECODE
 139

	)

584 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

585 
	#RSA_F_RSA_SIGN
 117

	)

586 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

587 
	#RSA_F_RSA_VERIFY
 119

	)

588 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

589 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

590 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

593 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

594 
	#RSA_R_BAD_E_VALUE
 101

	)

595 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

596 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

597 
	#RSA_R_BAD_SIGNATURE
 104

	)

598 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

599 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

600 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

601 
	#RSA_R_DATA_TOO_LARGE
 109

	)

602 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

603 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

604 
	#RSA_R_DATA_TOO_SMALL
 111

	)

605 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

606 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 166

	)

607 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

608 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

609 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

610 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

611 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

612 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

613 
	#RSA_R_INVALID_DIGEST
 160

	)

614 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

615 
	#RSA_R_INVALID_HEADER
 137

	)

616 
	#RSA_R_INVALID_KEYBITS
 145

	)

617 
	#RSA_R_INVALID_LABEL
 161

	)

618 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

619 
	#RSA_R_INVALID_MGF1_MD
 156

	)

620 
	#RSA_R_INVALID_OAEP_PARAMETERS
 162

	)

621 
	#RSA_R_INVALID_PADDING
 138

	)

622 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

623 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

624 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

625 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

626 
	#RSA_R_INVALID_TRAILER
 139

	)

627 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

628 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

629 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

630 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

631 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

632 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

633 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

634 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

635 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

636 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

637 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

638 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

639 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

640 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

641 
	#RSA_R_P_NOT_PRIME
 128

	)

642 
	#RSA_R_Q_NOT_PRIME
 129

	)

643 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

644 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

645 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

646 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

647 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

648 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

649 
	#RSA_R_UNKNOWN_DIGEST
 163

	)

650 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

651 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

652 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

653 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 164

	)

654 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 165

	)

655 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

656 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

657 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

658 
	#RSA_R_VALUE_MISSING
 147

	)

659 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

661 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #ifde‡
__˝lu•lus


64 #i‚de‡
CHECKED_PTR_OF


65 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

66 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

75 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

76 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

78 
	#CHECKED_SK_COPY_FUNC
(
ty≥
, 
p
) \

79 ((*(*)(*)Ë((1 ? 
p
 : (
ty≥
 *(*)(c⁄°Åy≥ *))0)))

	)

81 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

82 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

84 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

86 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

88 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
ty≥

89 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

91 
	#DECLARE_STACK_OF
(
ty≥
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

96 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

97 
	`STACK_OF
(
ty≥
) \

99 
_STACK
 
°ack
; \

100 };

	)

103 
	#IMPLEMENT_STACK_OF
(
ty≥
)

	)

119 *
	tOPENSSL_STRING
;

121 c⁄° *
	tOPENSSL_CSTRING
;

131 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

137 *
	tOPENSSL_BLOCK
;

138 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

144 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

145 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

146 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

147 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

148 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

149 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_num
(
ty≥
, 
°
) \

151 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

152 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

153 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

154 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

155 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

157 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

158 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

159 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

160 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

161 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

162 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

163 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

164 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

165 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

166 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

167 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

168 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

169 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

170 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

171 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

172 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

173 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

174 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

175 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

176 
	#SKM_sk_dup
(
ty≥
, 
°
) \

177 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

178 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

179 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

180 
	#SKM_sk_dìp_c›y
(
ty≥
, 
°
, 
c›y_func
, 
‰ì_func
) \

181 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_SK_COPY_FUNC
—y≥, 
c›y_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

182 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

183 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

184 
	#SKM_sk_p›
(
ty≥
, 
°
) \

185 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

186 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

187 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

188 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

189 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

190 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

191 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

192 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

193 
µ
, 
Àngth
, \

194 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

195 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

196 
ex_èg
, 
ex_˛ass
)

	)

197 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

198 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

199 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

200 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

201 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

202 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

203 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

204 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

205 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

206 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

207 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

208 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

209 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

210 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

214 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

215 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

216 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

217 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

218 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

219 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

220 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

221 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

222 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

223 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

224 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

225 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

226 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

227 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

228 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

229 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

230 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

231 
	#sk_ACCESS_DESCRIPTION_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ACCESS_DESCRIPTION
, (°), (c›y_func), (‰ì_func))

	)

232 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

233 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

234 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

235 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

236 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

237 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

238 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

239 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

240 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

241 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

242 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

243 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

244 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

245 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

246 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

247 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

248 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

249 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

250 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

251 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

252 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

253 
	#sk_ASIdOrR™ge_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASIdOrR™ge
, (°), (c›y_func), (‰ì_func))

	)

254 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

255 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

256 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

257 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

258 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

259 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

260 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

261 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

262 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

263 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

264 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

265 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

266 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

267 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

268 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

269 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

270 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

271 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

272 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

273 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

274 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

275 
	#sk_ASN1_GENERALSTRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_GENERALSTRING
, (°), (c›y_func), (‰ì_func))

	)

276 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

277 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

278 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

279 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

280 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

281 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

282 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

283 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

284 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

285 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

286 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

287 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

288 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

289 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

290 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

291 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

292 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

293 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

294 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

295 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

296 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

297 
	#sk_ASN1_INTEGER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_INTEGER
, (°), (c›y_func), (‰ì_func))

	)

298 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

299 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

300 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

301 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

302 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

303 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

304 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

305 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

306 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

307 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

308 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

309 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

310 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

311 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

312 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

313 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

314 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

315 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

316 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

317 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

318 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

319 
	#sk_ASN1_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

320 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

321 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

322 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

323 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

324 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

325 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

326 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

327 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

328 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

329 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

330 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

331 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

332 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

333 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

334 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

335 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

336 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

337 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

338 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

339 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

340 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

341 
	#sk_ASN1_STRING_TABLE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_STRING_TABLE
, (°), (c›y_func), (‰ì_func))

	)

342 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

343 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

344 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

345 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

346 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

347 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

348 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

349 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

350 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

351 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

352 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

353 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

354 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

355 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

356 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

357 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

358 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

359 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

360 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

361 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

362 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

363 
	#sk_ASN1_TYPE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_TYPE
, (°), (c›y_func), (‰ì_func))

	)

364 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

365 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

366 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

367 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

368 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

369 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

370 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

371 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

372 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

373 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

374 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

375 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

376 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

377 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

378 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

379 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

380 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

381 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

382 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

383 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

384 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

385 
	#sk_ASN1_UTF8STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_UTF8STRING
, (°), (c›y_func), (‰ì_func))

	)

386 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

387 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

388 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

389 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

390 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

391 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

392 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

393 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

394 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

395 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

396 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

397 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

398 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

399 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

400 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

401 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

402 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

403 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

404 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

405 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

406 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

407 
	#sk_ASN1_VALUE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_VALUE
, (°), (c›y_func), (‰ì_func))

	)

408 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

409 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

410 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

411 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

412 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

413 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

414 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

415 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

416 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

417 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

418 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

419 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

420 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

421 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

422 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

423 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

424 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

425 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

426 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

427 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

428 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

429 
	#sk_BIO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BIO
, (°), (c›y_func), (‰ì_func))

	)

430 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

431 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

432 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

433 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

434 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

435 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

436 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

437 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

438 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

439 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

440 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

441 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

442 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

443 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

444 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

445 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

446 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

447 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

448 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

449 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

450 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

451 
	#sk_BY_DIR_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BY_DIR_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

452 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

453 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

454 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

455 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

456 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

457 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

458 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

459 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

460 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

461 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

462 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

463 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

464 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

465 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

466 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

467 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

468 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

469 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

470 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

471 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

472 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

473 
	#sk_BY_DIR_HASH_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BY_DIR_HASH
, (°), (c›y_func), (‰ì_func))

	)

474 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

475 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

476 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

477 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

493 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

494 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

495 
	#sk_CMS_CîtifiˇãChoi˚s_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_CîtifiˇãChoi˚s
, (°), (c›y_func), (‰ì_func))

	)

496 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

497 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

498 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

499 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

500 
	#sk_CMS_Recùõ¡En¸y±edKey_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡En¸y±edKey
, (cmp))

	)

501 
	#sk_CMS_Recùõ¡En¸y±edKey_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡En¸y±edKey
)

	)

502 
	#sk_CMS_Recùõ¡En¸y±edKey_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

503 
	#sk_CMS_Recùõ¡En¸y±edKey_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

504 
	#sk_CMS_Recùõ¡En¸y±edKey_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡En¸y±edKey
, (°), (i))

	)

505 
	#sk_CMS_Recùõ¡En¸y±edKey_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡En¸y±edKey
, (°), (i), (vÆ))

	)

506 
	#sk_CMS_Recùõ¡En¸y±edKey_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

507 
	#sk_CMS_Recùõ¡En¸y±edKey_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

508 
	#sk_CMS_Recùõ¡En¸y±edKey_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

509 
	#sk_CMS_Recùõ¡En¸y±edKey_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

510 
	#sk_CMS_Recùõ¡En¸y±edKey_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

511 
	#sk_CMS_Recùõ¡En¸y±edKey_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡En¸y±edKey
, (°), (i))

	)

512 
	#sk_CMS_Recùõ¡En¸y±edKey_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡En¸y±edKey
, (°), (±r))

	)

513 
	#sk_CMS_Recùõ¡En¸y±edKey_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ), (i))

	)

514 
	#sk_CMS_Recùõ¡En¸y±edKey_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡En¸y±edKey
, (°), (cmp))

	)

515 
	#sk_CMS_Recùõ¡En¸y±edKey_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡En¸y±edKey
, st)

	)

516 
	#sk_CMS_Recùõ¡En¸y±edKey_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡En¸y±edKey
, (°), (‰ì_func))

	)

517 
	#sk_CMS_Recùõ¡En¸y±edKey_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Recùõ¡En¸y±edKey
, (°), (c›y_func), (‰ì_func))

	)

518 
	#sk_CMS_Recùõ¡En¸y±edKey_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

519 
	#sk_CMS_Recùõ¡En¸y±edKey_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

520 
	#sk_CMS_Recùõ¡En¸y±edKey_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

521 
	#sk_CMS_Recùõ¡En¸y±edKey_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

522 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

523 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

524 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

525 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

526 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

527 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

528 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

529 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

530 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

531 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

532 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

533 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

534 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

535 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

536 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

537 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

538 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

539 
	#sk_CMS_Recùõ¡Info_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Recùõ¡Info
, (°), (c›y_func), (‰ì_func))

	)

540 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

541 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

542 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

543 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

544 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

545 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

546 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

547 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

548 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

549 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

550 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

551 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

552 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

553 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

554 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

555 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

556 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

557 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

558 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

559 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

560 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

561 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (c›y_func), (‰ì_func))

	)

562 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

563 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

564 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

565 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

566 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

567 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

568 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

569 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

570 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

571 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

572 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

573 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

574 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

575 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

576 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

577 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

578 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

579 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

580 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

581 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

582 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

583 
	#sk_CMS_Sig√rInfo_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Sig√rInfo
, (°), (c›y_func), (‰ì_func))

	)

584 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

585 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

586 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

587 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

588 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

589 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

590 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

591 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

592 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

593 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

594 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

595 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

596 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

597 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

598 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

599 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

600 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

601 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

602 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

603 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

604 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

605 
	#sk_CONF_IMODULE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_IMODULE
, (°), (c›y_func), (‰ì_func))

	)

606 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

607 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

608 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

609 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

610 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

611 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

612 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

613 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

614 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

615 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

616 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

617 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

618 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

619 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

620 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

621 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

622 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

623 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

624 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

625 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

626 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

627 
	#sk_CONF_MODULE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_MODULE
, (°), (c›y_func), (‰ì_func))

	)

628 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

629 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

630 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

631 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

632 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

633 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

634 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

635 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

636 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

637 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

638 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

639 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

640 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

641 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

642 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

643 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

644 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

645 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

646 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

647 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

648 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

649 
	#sk_CONF_VALUE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_VALUE
, (°), (c›y_func), (‰ì_func))

	)

650 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

651 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

652 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

653 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

654 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

655 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

656 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

657 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

658 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

659 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

660 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

661 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

662 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

663 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

664 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

665 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

666 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

667 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

668 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

669 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

670 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

671 
	#sk_CRYPTO_EX_DATA_FUNCS_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CRYPTO_EX_DATA_FUNCS
, (°), (c›y_func), (‰ì_func))

	)

672 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

673 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

674 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

675 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

676 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

677 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

678 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

679 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

680 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

681 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

682 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

683 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

684 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

685 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

686 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

687 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

688 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

689 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

690 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

691 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

692 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

693 
	#sk_CRYPTO_dy∆ock_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CRYPTO_dy∆ock
, (°), (c›y_func), (‰ì_func))

	)

694 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

695 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

696 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

697 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

698 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

699 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

700 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

701 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

702 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

703 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

704 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

705 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

706 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

707 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

708 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

709 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

710 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

711 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

712 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

713 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

714 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

715 
	#sk_DIST_POINT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
DIST_POINT
, (°), (c›y_func), (‰ì_func))

	)

716 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

717 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

718 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

719 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

720 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

721 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

722 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

723 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

724 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

725 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

726 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

727 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

728 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

729 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

730 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

731 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

732 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

733 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

734 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

735 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

736 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

737 
	#sk_ENGINE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ENGINE
, (°), (c›y_func), (‰ì_func))

	)

738 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

739 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

740 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

741 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

742 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

743 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

744 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

745 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

746 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

747 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

748 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

749 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

750 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

751 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

752 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

753 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

754 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

755 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

756 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

757 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

758 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

759 
	#sk_ENGINE_CLEANUP_ITEM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ENGINE_CLEANUP_ITEM
, (°), (c›y_func), (‰ì_func))

	)

760 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

761 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

762 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

763 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

764 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

765 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

766 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

767 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

768 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

769 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

770 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

771 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

772 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

773 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

774 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

775 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

776 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

777 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

778 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

779 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

780 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

781 
	#sk_ESS_CERT_ID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ESS_CERT_ID
, (°), (c›y_func), (‰ì_func))

	)

782 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

783 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

784 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

785 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

786 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

787 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

788 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

789 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

790 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

791 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

792 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

793 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

794 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

795 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

796 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

797 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

798 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

799 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

800 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

801 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

802 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

803 
	#sk_EVP_MD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_MD
, (°), (c›y_func), (‰ì_func))

	)

804 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

805 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

806 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

807 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

808 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

809 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

810 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

811 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

812 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

813 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

814 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

815 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

816 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

817 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

818 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

819 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

820 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

821 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

822 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

823 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

824 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

825 
	#sk_EVP_PBE_CTL_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PBE_CTL
, (°), (c›y_func), (‰ì_func))

	)

826 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

827 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

828 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

829 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

830 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

831 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

832 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

833 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

834 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

835 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

836 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

837 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

838 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

839 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

840 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

841 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

842 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

843 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

844 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

845 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

846 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

847 
	#sk_EVP_PKEY_ASN1_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PKEY_ASN1_METHOD
, (°), (c›y_func), (‰ì_func))

	)

848 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

849 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

850 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

851 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

852 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

853 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

854 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

855 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

856 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

857 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

858 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

859 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

860 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

861 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

862 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

863 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

864 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

865 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

866 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

867 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

868 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

869 
	#sk_EVP_PKEY_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PKEY_METHOD
, (°), (c›y_func), (‰ì_func))

	)

870 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

871 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

872 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

873 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

874 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

875 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

876 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

877 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

878 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

879 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

880 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

881 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

882 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

883 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

884 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

885 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

886 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

887 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

888 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

889 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

890 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

891 
	#sk_GENERAL_NAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_NAME
, (°), (c›y_func), (‰ì_func))

	)

892 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

893 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

894 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

895 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

896 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

897 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

898 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

899 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

900 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

901 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

902 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

903 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

904 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

905 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

906 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

907 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

908 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

909 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

910 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

911 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

912 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

913 
	#sk_GENERAL_NAMES_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_NAMES
, (°), (c›y_func), (‰ì_func))

	)

914 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

915 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

916 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

917 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

918 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

919 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

920 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

921 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

922 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

923 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

924 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

925 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

926 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

927 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

928 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

929 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

930 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

931 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

932 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

933 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

934 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

935 
	#sk_GENERAL_SUBTREE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_SUBTREE
, (°), (c›y_func), (‰ì_func))

	)

936 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

937 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

938 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

939 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

940 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

941 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

942 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

943 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

944 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

945 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

946 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

947 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

948 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

949 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

950 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

951 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

952 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

953 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

954 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

955 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

956 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

957 
	#sk_IPAddªssFamûy_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
IPAddªssFamûy
, (°), (c›y_func), (‰ì_func))

	)

958 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

959 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

960 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

961 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

962 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

963 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

964 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

965 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

966 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

967 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

968 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

969 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

970 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

971 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

972 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

973 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

974 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

975 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

976 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

977 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

978 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

979 
	#sk_IPAddªssOrR™ge_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
IPAddªssOrR™ge
, (°), (c›y_func), (‰ì_func))

	)

980 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

981 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

982 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

983 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

984 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

985 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

986 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

987 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

988 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

989 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

990 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

991 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

992 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

993 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

994 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

995 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

996 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

997 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

998 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

999 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

1000 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

1001 
	#sk_KRB5_APREQBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_APREQBODY
, (°), (c›y_func), (‰ì_func))

	)

1002 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

1003 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

1004 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

1005 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

1006 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

1007 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

1008 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

1009 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

1010 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

1011 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

1012 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

1013 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1014 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1015 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1016 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1017 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

1018 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

1019 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

1020 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

1021 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

1022 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

1023 
	#sk_KRB5_AUTHDATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_AUTHDATA
, (°), (c›y_func), (‰ì_func))

	)

1024 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

1025 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

1026 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

1027 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1028 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1029 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1030 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1031 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1032 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1033 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1034 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1035 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1036 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1037 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1038 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1039 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1040 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1041 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1042 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1043 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1044 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1045 
	#sk_KRB5_AUTHENTBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_AUTHENTBODY
, (°), (c›y_func), (‰ì_func))

	)

1046 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1047 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1048 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1049 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1050 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1051 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1052 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1053 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1054 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1055 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1056 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1057 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1058 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1059 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1060 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1061 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1062 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1063 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1064 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1065 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1066 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1067 
	#sk_KRB5_CHECKSUM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_CHECKSUM
, (°), (c›y_func), (‰ì_func))

	)

1068 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1069 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1070 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1071 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1072 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1073 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1074 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1075 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1076 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1077 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1078 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1079 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1080 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1081 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1082 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1083 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1084 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1085 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1086 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1087 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1088 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1089 
	#sk_KRB5_ENCDATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_ENCDATA
, (°), (c›y_func), (‰ì_func))

	)

1090 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1091 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1092 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1093 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1094 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1095 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1096 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1097 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1098 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1099 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1100 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1101 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1102 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1103 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1104 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1105 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1106 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1107 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1108 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1109 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1110 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1111 
	#sk_KRB5_ENCKEY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_ENCKEY
, (°), (c›y_func), (‰ì_func))

	)

1112 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1113 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1114 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1115 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1116 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1117 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1118 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1119 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1120 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1121 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1122 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1123 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1124 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1125 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1126 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1127 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1128 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1129 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1130 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1131 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1132 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1133 
	#sk_KRB5_PRINCNAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_PRINCNAME
, (°), (c›y_func), (‰ì_func))

	)

1134 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1135 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1136 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1137 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1138 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1139 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1140 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1141 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1142 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1143 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1144 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1145 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1146 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1147 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1148 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1149 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1150 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1151 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1152 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1153 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1154 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1155 
	#sk_KRB5_TKTBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_TKTBODY
, (°), (c›y_func), (‰ì_func))

	)

1156 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1157 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1158 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1159 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1160 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1161 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1162 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1163 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1164 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1165 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1166 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1167 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1168 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1169 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1170 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1171 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1172 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1173 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1174 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1175 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1176 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1177 
	#sk_MEM_OBJECT_DATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MEM_OBJECT_DATA
, (°), (c›y_func), (‰ì_func))

	)

1178 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1179 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1180 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1181 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1182 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1183 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1184 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1185 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1186 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1187 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1188 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1189 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1190 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1191 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1192 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1193 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1194 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1195 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1196 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1197 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1198 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1199 
	#sk_MIME_HEADER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MIME_HEADER
, (°), (c›y_func), (‰ì_func))

	)

1200 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1201 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1202 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1203 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1204 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1205 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1206 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1207 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1208 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1209 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1210 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1211 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1212 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1213 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1214 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1215 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1216 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1217 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1218 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1219 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1220 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1221 
	#sk_MIME_PARAM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MIME_PARAM
, (°), (c›y_func), (‰ì_func))

	)

1222 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1223 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1224 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1225 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1226 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1227 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1228 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1229 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1230 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1231 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1232 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1233 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1234 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1235 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1236 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1237 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1238 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1239 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1240 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1241 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1242 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1243 
	#sk_NAME_FUNCS_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
NAME_FUNCS
, (°), (c›y_func), (‰ì_func))

	)

1244 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1245 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1246 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1247 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1248 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1249 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1250 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1251 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1252 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1253 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1254 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1255 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1256 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1257 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1258 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1259 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1260 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1261 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1262 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1263 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1264 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1265 
	#sk_OCSP_CERTID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_CERTID
, (°), (c›y_func), (‰ì_func))

	)

1266 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1267 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1268 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1269 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1270 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1271 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1272 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1273 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1274 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1275 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1276 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1277 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1278 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1279 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1280 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1281 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1282 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1283 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1284 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1285 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1286 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1287 
	#sk_OCSP_ONEREQ_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_ONEREQ
, (°), (c›y_func), (‰ì_func))

	)

1288 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1289 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1290 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1291 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1292 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1293 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1294 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1295 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1296 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1297 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1298 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1299 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1300 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1301 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1302 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1303 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1304 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1305 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1306 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1307 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1308 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1309 
	#sk_OCSP_RESPID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_RESPID
, (°), (c›y_func), (‰ì_func))

	)

1310 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1311 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1312 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1313 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1314 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1315 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1316 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1317 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1318 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1319 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1320 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1321 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1322 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1323 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1324 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1325 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1326 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1327 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1328 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1329 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1330 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1331 
	#sk_OCSP_SINGLERESP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_SINGLERESP
, (°), (c›y_func), (‰ì_func))

	)

1332 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1333 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1334 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1335 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1336 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1337 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1338 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1339 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1340 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1341 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1342 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1343 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1344 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1345 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1346 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1347 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1348 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1349 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1350 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1351 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1352 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1353 
	#sk_PKCS12_SAFEBAG_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS12_SAFEBAG
, (°), (c›y_func), (‰ì_func))

	)

1354 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1355 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1356 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1357 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1358 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1359 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1360 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1361 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1362 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1363 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1364 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1365 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1366 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1367 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1368 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1369 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1370 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1371 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1372 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1373 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1374 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1375 
	#sk_PKCS7_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7
, (°), (c›y_func), (‰ì_func))

	)

1376 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1377 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1378 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1379 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1380 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1381 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1382 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1383 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1384 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1385 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1386 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1387 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1388 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1389 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1390 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1391 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1392 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1393 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1394 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1395 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1396 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1397 
	#sk_PKCS7_RECIP_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7_RECIP_INFO
, (°), (c›y_func), (‰ì_func))

	)

1398 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1399 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1400 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1401 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1402 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1403 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1404 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1405 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1406 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1407 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1408 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1409 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1410 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1411 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1412 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1413 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1414 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1415 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1416 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1417 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1418 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1419 
	#sk_PKCS7_SIGNER_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7_SIGNER_INFO
, (°), (c›y_func), (‰ì_func))

	)

1420 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1421 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1422 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1423 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1424 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1425 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1426 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1427 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1428 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1429 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1430 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1431 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1432 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1433 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1434 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1435 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1436 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1437 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1438 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1439 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1440 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1441 
	#sk_POLICYINFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICYINFO
, (°), (c›y_func), (‰ì_func))

	)

1442 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1443 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1444 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1445 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1446 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1447 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1448 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1449 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1450 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1451 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1452 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1453 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1454 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1455 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1456 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1457 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1458 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1459 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1460 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1461 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1462 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1463 
	#sk_POLICYQUALINFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICYQUALINFO
, (°), (c›y_func), (‰ì_func))

	)

1464 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1465 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1466 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1467 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1468 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1469 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1470 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1471 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1472 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1473 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1474 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1475 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1476 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1477 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1478 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1479 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1480 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1481 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1482 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1483 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1484 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1485 
	#sk_POLICY_MAPPING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICY_MAPPING
, (°), (c›y_func), (‰ì_func))

	)

1486 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1487 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1488 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1489 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1490 
	#sk_SCT_√w
(
cmp
Ë
	`SKM_sk_√w
(
SCT
, (cmp))

	)

1491 
	#sk_SCT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SCT
)

	)

1492 
	#sk_SCT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SCT
, (°))

	)

1493 
	#sk_SCT_num
(
°
Ë
	`SKM_sk_num
(
SCT
, (°))

	)

1494 
	#sk_SCT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SCT
, (°), (i))

	)

1495 
	#sk_SCT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SCT
, (°), (i), (vÆ))

	)

1496 
	#sk_SCT_zîo
(
°
Ë
	`SKM_sk_zîo
(
SCT
, (°))

	)

1497 
	#sk_SCT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SCT
, (°), (vÆ))

	)

1498 
	#sk_SCT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SCT
, (°), (vÆ))

	)

1499 
	#sk_SCT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SCT
, (°), (vÆ))

	)

1500 
	#sk_SCT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SCT
, (°), (vÆ))

	)

1501 
	#sk_SCT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SCT
, (°), (i))

	)

1502 
	#sk_SCT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SCT
, (°), (±r))

	)

1503 
	#sk_SCT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SCT
, (°), (vÆ), (i))

	)

1504 
	#sk_SCT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SCT
, (°), (cmp))

	)

1505 
	#sk_SCT_dup
(
°
Ë
	`SKM_sk_dup
(
SCT
, st)

	)

1506 
	#sk_SCT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SCT
, (°), (‰ì_func))

	)

1507 
	#sk_SCT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SCT
, (°), (c›y_func), (‰ì_func))

	)

1508 
	#sk_SCT_shi·
(
°
Ë
	`SKM_sk_shi·
(
SCT
, (°))

	)

1509 
	#sk_SCT_p›
(
°
Ë
	`SKM_sk_p›
(
SCT
, (°))

	)

1510 
	#sk_SCT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SCT
, (°))

	)

1511 
	#sk_SCT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SCT
, (°))

	)

1512 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1513 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1514 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1515 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1516 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1517 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1518 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1519 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1520 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1521 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1522 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1523 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1524 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1525 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1526 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1527 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1528 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1529 
	#sk_SRP_gN_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_gN
, (°), (c›y_func), (‰ì_func))

	)

1530 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1531 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1532 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1533 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1534 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1535 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1536 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1537 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1538 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1539 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1540 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1541 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1542 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1543 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1544 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1545 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1546 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1547 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1548 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1549 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1550 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1551 
	#sk_SRP_gN_ˇche_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_gN_ˇche
, (°), (c›y_func), (‰ì_func))

	)

1552 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1553 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1554 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1555 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1556 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1557 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1558 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1559 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1560 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1561 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1562 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1563 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1564 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1565 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1566 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1567 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1568 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1569 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1570 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1571 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1572 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1573 
	#sk_SRP_u£r_pwd_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_u£r_pwd
, (°), (c›y_func), (‰ì_func))

	)

1574 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1575 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1576 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1577 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1578 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1579 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1580 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1581 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1582 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1583 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1584 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1585 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1586 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1587 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1588 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1589 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1590 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1591 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1592 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1593 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1594 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1595 
	#sk_SRTP_PROTECTION_PROFILE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRTP_PROTECTION_PROFILE
, (°), (c›y_func), (‰ì_func))

	)

1596 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1597 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1598 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1599 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1600 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1601 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1602 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1603 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1604 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1605 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1606 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1607 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1608 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1609 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1610 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1611 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1612 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1613 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1614 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1615 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1616 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1617 
	#sk_SSL_CIPHER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SSL_CIPHER
, (°), (c›y_func), (‰ì_func))

	)

1618 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1619 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1620 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1621 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1622 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1623 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1624 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1625 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1626 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1627 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1628 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1629 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1630 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1631 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1632 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1633 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1634 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1635 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1636 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1637 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1638 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1639 
	#sk_SSL_COMP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SSL_COMP
, (°), (c›y_func), (‰ì_func))

	)

1640 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1641 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1642 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1643 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1644 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1645 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1646 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1647 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1648 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1649 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1650 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1651 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1652 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1653 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1654 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1655 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1656 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1657 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1658 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1659 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1660 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1661 
	#sk_STACK_OF_X509_NAME_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STACK_OF_X509_NAME_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

1662 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1663 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1664 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1665 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1666 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1667 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1668 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1669 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1670 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1671 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1672 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1673 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1674 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1675 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1676 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1677 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1678 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1679 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1680 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1681 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1682 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1683 
	#sk_STORE_ATTR_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STORE_ATTR_INFO
, (°), (c›y_func), (‰ì_func))

	)

1684 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1685 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1686 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1687 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1688 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1689 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1690 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1691 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1692 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1693 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1694 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1695 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1696 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1697 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1698 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1699 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1700 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1701 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1702 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1703 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1704 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1705 
	#sk_STORE_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STORE_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

1706 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1707 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1708 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1709 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1710 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1711 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1712 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1713 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1714 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1715 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1716 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1717 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1718 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1719 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1720 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1721 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1722 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1723 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1724 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1725 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1726 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1727 
	#sk_SXNETID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SXNETID
, (°), (c›y_func), (‰ì_func))

	)

1728 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1729 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1730 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1731 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1732 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1733 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1734 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1735 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1736 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1737 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1738 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1739 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1740 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1741 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1742 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1743 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1744 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1745 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1746 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1747 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1748 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1749 
	#sk_UI_STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
UI_STRING
, (°), (c›y_func), (‰ì_func))

	)

1750 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1751 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1752 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1753 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1754 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1755 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1756 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1757 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1758 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1759 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1760 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1761 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1762 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1763 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1764 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1765 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1766 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1767 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1768 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1769 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1770 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1771 
	#sk_X509_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509
, (°), (c›y_func), (‰ì_func))

	)

1772 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1773 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1774 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1775 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1776 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1777 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1778 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1779 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1780 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1781 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1782 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1783 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1784 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1785 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1786 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1787 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1788 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1789 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1790 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1791 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1792 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1793 
	#sk_X509V3_EXT_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509V3_EXT_METHOD
, (°), (c›y_func), (‰ì_func))

	)

1794 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1795 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1796 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1797 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1798 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1799 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1800 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1801 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1802 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1803 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1804 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1805 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1806 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1807 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1808 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1809 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1810 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1811 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1812 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1813 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1814 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1815 
	#sk_X509_ALGOR_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_ALGOR
, (°), (c›y_func), (‰ì_func))

	)

1816 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1817 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1818 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1819 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1820 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1821 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1822 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1823 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1824 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1825 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1826 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1827 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1828 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1829 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1830 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1831 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1832 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1833 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1834 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1835 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1836 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1837 
	#sk_X509_ATTRIBUTE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_ATTRIBUTE
, (°), (c›y_func), (‰ì_func))

	)

1838 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1839 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1840 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1841 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1842 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1843 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1844 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1845 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1846 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1847 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1848 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1849 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1850 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1851 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1852 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1853 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1854 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1855 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1856 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1857 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1858 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1859 
	#sk_X509_CRL_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_CRL
, (°), (c›y_func), (‰ì_func))

	)

1860 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1861 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1862 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1863 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1864 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1865 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1866 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1867 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1868 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1869 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1870 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1871 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1872 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1873 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1874 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1875 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1876 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1877 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1878 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1879 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1880 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1881 
	#sk_X509_EXTENSION_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_EXTENSION
, (°), (c›y_func), (‰ì_func))

	)

1882 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1883 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1884 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1885 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1886 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1887 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1888 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1889 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1890 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1891 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1892 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1893 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1894 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1895 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1896 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1897 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1898 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1899 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1900 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1901 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1902 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1903 
	#sk_X509_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_INFO
, (°), (c›y_func), (‰ì_func))

	)

1904 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1905 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1906 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1907 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1908 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1909 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1910 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1911 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1912 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1913 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1914 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1915 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1916 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1917 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1918 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1919 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1920 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1921 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1922 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1923 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1924 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1925 
	#sk_X509_LOOKUP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_LOOKUP
, (°), (c›y_func), (‰ì_func))

	)

1926 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1927 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1928 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1929 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1930 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1931 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1932 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1933 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1934 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1935 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1936 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1937 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1938 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1939 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1940 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1941 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1942 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1943 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1944 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1945 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1946 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1947 
	#sk_X509_NAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_NAME
, (°), (c›y_func), (‰ì_func))

	)

1948 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1949 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1950 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1951 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1952 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1953 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1954 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1955 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1956 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1957 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1958 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1959 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1960 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1961 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1962 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1963 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1964 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1965 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1966 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1967 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1968 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1969 
	#sk_X509_NAME_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_NAME_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

1970 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1971 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1972 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1973 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1974 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1975 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1976 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1977 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1978 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1979 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1980 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1981 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1982 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1983 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1984 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1985 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1986 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1987 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1988 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1989 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1990 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1991 
	#sk_X509_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

1992 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1993 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1994 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1995 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1996 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1997 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1998 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1999 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

2000 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

2001 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

2002 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

2003 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2004 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2005 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2006 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2007 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

2008 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

2009 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

2010 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

2011 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

2012 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

2013 
	#sk_X509_POLICY_DATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_POLICY_DATA
, (°), (c›y_func), (‰ì_func))

	)

2014 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

2015 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

2016 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

2017 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

2018 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

2019 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

2020 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

2021 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

2022 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

2023 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

2024 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

2025 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2026 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2027 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2028 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2029 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

2030 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

2031 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

2032 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

2033 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

2034 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

2035 
	#sk_X509_POLICY_NODE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_POLICY_NODE
, (°), (c›y_func), (‰ì_func))

	)

2036 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

2037 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

2038 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

2039 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

2040 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

2041 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

2042 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

2043 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

2044 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

2045 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

2046 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

2047 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

2048 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

2049 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2050 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2051 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2052 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2053 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2054 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2055 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2056 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2057 
	#sk_X509_PURPOSE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_PURPOSE
, (°), (c›y_func), (‰ì_func))

	)

2058 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2059 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2060 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2061 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2062 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2063 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2064 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2065 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2066 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2067 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2068 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2069 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2070 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2071 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2072 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2073 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2074 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2075 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2076 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2077 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2078 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2079 
	#sk_X509_REVOKED_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_REVOKED
, (°), (c›y_func), (‰ì_func))

	)

2080 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2081 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2082 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2083 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2084 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2085 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2086 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2087 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2088 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2089 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2090 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2091 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2092 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2093 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2094 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2095 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2096 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2097 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2098 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2099 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2100 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2101 
	#sk_X509_TRUST_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_TRUST
, (°), (c›y_func), (‰ì_func))

	)

2102 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2103 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2104 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2105 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2106 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2107 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2108 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2109 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2110 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2111 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2112 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2113 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2114 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2115 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2116 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2117 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2118 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2119 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2120 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2121 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2122 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2123 
	#sk_X509_VERIFY_PARAM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_VERIFY_PARAM
, (°), (c›y_func), (‰ì_func))

	)

2124 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2125 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2126 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2127 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2128 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2129 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2130 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2131 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2132 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2133 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2134 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2135 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2136 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2137 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2138 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2139 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2140 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2141 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2142 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2143 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2144 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2145 
	#sk_nid_åùÀ_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
nid_åùÀ
, (°), (c›y_func), (‰ì_func))

	)

2146 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2147 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2148 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2149 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2150 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2151 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2152 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2153 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2154 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2155 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2156 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2157 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2158 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2159 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2160 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2161 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2162 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2163 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2164 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2165 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2166 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2167 
	#sk_void_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(, (°), (c›y_func), (‰ì_func))

	)

2168 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2169 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2170 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2171 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2172 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2173 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2175 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2176 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2177 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2178 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func))

	)

2179 
	#sk_OPENSSL_STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_SK_COPY_FUNC
(, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func)))

	)

2180 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2181 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2182 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2183 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2184 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2185 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2186 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2187 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2188 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2190 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2191 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2192 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2193 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2194 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2195 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2196 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2197 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2198 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2199 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2200 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2201 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2202 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func))

	)

2203 
	#sk_OPENSSL_BLOCK_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_SK_COPY_FUNC
(, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func)))

	)

2204 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2205 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2206 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2207 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2208 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2209 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2210 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2211 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2212 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2214 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2215 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2216 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2217 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2218 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2219 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2220 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2221 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2222 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2223 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2224 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2225 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2226 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC
(
OPENSSL_STRING
, fªe_func))

	)

2227 
	#sk_OPENSSL_PSTRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_SK_COPY_FUNC
(
OPENSSL_STRING
, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(OPENSSL_STRING, fªe_func)))

	)

2228 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2229 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2230 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2231 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2232 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2233 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2234 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2235 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2236 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2237 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2238 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2239 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2240 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2241 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2242 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2243 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2244 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2245 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2246 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2247 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2248 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2249 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2250 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2251 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2252 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2253 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2254 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2255 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2256 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2257 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2258 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2259 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2268 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2269 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2270 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2271 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2272 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2273 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2274 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2275 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2276 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2277 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2278 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2279 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2280 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2281 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2282 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2283 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2284 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2285 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2286 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2287 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2288 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2289 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2290 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2291 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2292 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2293 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2294 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2295 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2296 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2297 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2298 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2299 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2300 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2301 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2302 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2303 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2304 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2305 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2306 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2307 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2308 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2309 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2310 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2311 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2312 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2313 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2314 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2315 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2316 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2317 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2318 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2319 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2320 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2321 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2322 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2323 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2324 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2325 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2326 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2327 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2328 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2329 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2330 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2331 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2340 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2341 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2342 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2343 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2344 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2345 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2346 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2347 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2348 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2349 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2350 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2351 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2352 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2353 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2354 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2355 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2356 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2357 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2358 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2359 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2360 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2361 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2362 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2363 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2364 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2365 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2366 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2367 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2368 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2369 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2370 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2371 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2372 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2373 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2374 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2375 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2376 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2377 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2378 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2379 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2380 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2381 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2382 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2383 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2384 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2385 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2386 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2387 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2388 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2389 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2390 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2391 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2392 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2393 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2394 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2395 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2396 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2397 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2398 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2399 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2400 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2401 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2402 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2403 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2412 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2413 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2414 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2415 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2416 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2417 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2418 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2419 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2420 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2421 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2422 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2423 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2424 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2425 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2426 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2427 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2428 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2429 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2430 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2431 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2432 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2433 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2434 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2435 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2436 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2437 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2438 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2439 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2440 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2441 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2442 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2443 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2444 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2445 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2446 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2447 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2448 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2449 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2450 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2451 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2452 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2453 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2454 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2455 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2456 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2457 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2458 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2460 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2462 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2463 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2464 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2465 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2466 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2467 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2468 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2469 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2470 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2471 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2472 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2473 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2474 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2475 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2476 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2477 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2478 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2479 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2480 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2481 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2482 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2483 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2484 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2485 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2486 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2487 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2490 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2491 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2492 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2494 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2496 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2498 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2499 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2500 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2501 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2502 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2503 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2504 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2505 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2506 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2507 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2508 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2509 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2510 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2511 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2512 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2513 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2514 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2515 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2516 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2517 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2518 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2519 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2520 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2521 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2522 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2523 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2524 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2525 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2526 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2527 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2528 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2530 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2532 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2533 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2534 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2535 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2536 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2537 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2538 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2539 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2540 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2541 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2542 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2543 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2544 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2545 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2546 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2547 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2548 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2549 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2550 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2551 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2552 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2553 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2554 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2555 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2556 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2557 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2558 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2559 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2560 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2561 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2562 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2563 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2564 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2566 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2567 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2568 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2569 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2570 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2571 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2572 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2573 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2574 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2575 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2576 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2577 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2578 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2579 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2580 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2581 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2582 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2583 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2584 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2585 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2586 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2587 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2588 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2589 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2590 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2591 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2592 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2593 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2594 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2595 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2596 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2597 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2598 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2599 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2600 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2601 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2602 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2603 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2604 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2605 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2606 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2607 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2608 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2609 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2610 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2611 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2612 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2613 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2614 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2615 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2616 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2617 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2619 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2620 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2621 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2622 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2623 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2624 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2625 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2627 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2628 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2629 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2630 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2631 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2632 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2633 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2634 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2636 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2637 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2638 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2639 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2640 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2641 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2642 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2643 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2645 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2646 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2647 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2648 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2649 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2650 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2651 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2652 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2653 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2654 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2655 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2656 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2657 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2658 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2659 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2660 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2661 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2662 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2663 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2664 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2665 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2666 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2667 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2668 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

2669 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/srtp.h

117 #i‚de‡
HEADER_D1_SRTP_H


118 
	#HEADER_D1_SRTP_H


	)

120 
	~<›ís¶/s¶.h
>

122 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 #i‚de‡
OPENSSL_NO_SRTP


135 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

136 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

138 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

139 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

143 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

142 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

144 
	#SSL2_CHALLENGE_LENGTH
 16

	)

148 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

149 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

150 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

151 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

152 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

153 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

154 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

155 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

157 #i‚de‡
HEADER_SSL_LOCL_H


158 
	#CERT
 

	)

161 #i‚de‡
OPENSSL_NO_SSL_INTERN


163 
	ss¶2_°©e_°
 {

164 
thªe_byã_hódî
;

165 
˛ór_ãxt
;

166 
esˇ≥
;

167 
s¶2_rﬁlback
;

171 
wnum
;

172 
w≥nd_tŸ
;

173 c⁄° *
w≥nd_buf
;

174 
w≥nd_off
;

175 
w≥nd_Àn
;

176 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

182 *
wrôe_±r
;

184 
∑ddög
;

185 
æígth
;

186 
ø˘_d©a_Àngth
;

187 
wÀngth
;

188 
wa˘_d©a_Àngth
;

189 *
ø˘_d©a
;

190 *
wa˘_d©a
;

191 *
mac_d©a
;

192 *
ªad_key
;

193 *
wrôe_key
;

195 
chÆÀnge_Àngth
;

196 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

197 
c⁄n_id_Àngth
;

198 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

199 
key_m©îül_Àngth
;

200 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
 * 2];

201 
ªad_£quí˚
;

202 
wrôe_£quí˚
;

204 
c⁄n_id_Àngth
;

205 
˚π_ty≥
;

206 
˚π_Àngth
;

207 
c¶
;

208 
˛ór
;

209 
íc
;

210 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

211 
cùhî_•ec_Àngth
;

212 
£ssi⁄_id_Àngth
;

213 
˛í
;

214 
æí
;

215 } 
tmp
;

216 } 
	tSSL2_STATE
;

222 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

223 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

224 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

225 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

226 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

227 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

228 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

242 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

243 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

244 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

245 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

246 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

247 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

262 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


70 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

73 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

74 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

78 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

79 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

81 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


135 
	#SSL3_CK_SCSV
 0x030000FF

	)

141 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

143 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

144 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

145 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

146 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

147 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

148 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

149 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

150 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

151 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

152 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

154 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

155 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

156 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

157 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

158 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

159 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

161 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

162 
	#SSL3_CK_DHE_DSS_DES_40_CBC_SHA
 
SSL3_CK_EDH_DSS_DES_40_CBC_SHA


	)

163 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

164 
	#SSL3_CK_DHE_DSS_DES_64_CBC_SHA
 
SSL3_CK_EDH_DSS_DES_64_CBC_SHA


	)

165 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

166 
	#SSL3_CK_DHE_DSS_DES_192_CBC3_SHA
 
SSL3_CK_EDH_DSS_DES_192_CBC3_SHA


	)

167 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

168 
	#SSL3_CK_DHE_RSA_DES_40_CBC_SHA
 
SSL3_CK_EDH_RSA_DES_40_CBC_SHA


	)

169 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

170 
	#SSL3_CK_DHE_RSA_DES_64_CBC_SHA
 
SSL3_CK_EDH_RSA_DES_64_CBC_SHA


	)

171 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

172 
	#SSL3_CK_DHE_RSA_DES_192_CBC3_SHA
 
SSL3_CK_EDH_RSA_DES_192_CBC3_SHA


	)

174 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

175 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

176 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

177 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

178 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

181 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

182 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

188 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

195 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

196 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

197 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

198 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

199 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

200 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

201 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

202 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

204 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

205 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

206 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

207 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

208 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

209 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

211 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

212 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

213 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

214 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

215 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

216 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

217 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

218 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

219 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

220 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

222 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

223 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

224 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

226 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

227 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

229 
	#SSL3_TXT_DHE_DSS_DES_40_CBC_SHA
 "EXP-DHE-DSS-DES-CBC-SHA"

	)

230 
	#SSL3_TXT_DHE_DSS_DES_64_CBC_SHA
 "DHE-DSS-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA
 "DHE-DSS-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_DHE_RSA_DES_40_CBC_SHA
 "EXP-DHE-RSA-DES-CBC-SHA"

	)

233 
	#SSL3_TXT_DHE_RSA_DES_64_CBC_SHA
 "DHE-RSA-DES-CBC-SHA"

	)

234 
	#SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA
 "DHE-RSA-DES-CBC3-SHA"

	)

241 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

242 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

243 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

244 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

245 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

246 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

248 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

249 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

250 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

251 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

252 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

255 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

256 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

257 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

260 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

261 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

262 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

263 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

264 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

265 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

266 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

267 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

269 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

270 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

271 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

272 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

273 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

274 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

276 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

277 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

279 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

280 
	#SSL3_RANDOM_SIZE
 32

	)

281 
	#SSL3_SESSION_ID_SIZE
 32

	)

282 
	#SSL3_RT_HEADER_LENGTH
 5

	)

284 
	#SSL3_HM_HEADER_LENGTH
 4

	)

286 #i‚de‡
SSL3_ALIGN_PAYLOAD


295 
	#SSL3_ALIGN_PAYLOAD
 8

	)

297 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

299 #unde‡
SSL3_ALIGN_PAYLOAD


309 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

315 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

317 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

320 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

322 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

329 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

336 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

337 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

341 #ifde‡
OPENSSL_NO_COMP


342 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

344 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

345 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

347 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

348 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

349 
	#SSL3_RT_MAX_PACKET_SIZE
 \

350 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

352 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

353 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

355 
	#SSL3_VERSION
 0x0300

	)

356 
	#SSL3_VERSION_MAJOR
 0x03

	)

357 
	#SSL3_VERSION_MINOR
 0x00

	)

359 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

360 
	#SSL3_RT_ALERT
 21

	)

361 
	#SSL3_RT_HANDSHAKE
 22

	)

362 
	#SSL3_RT_APPLICATION_DATA
 23

	)

363 
	#TLS1_RT_HEARTBEAT
 24

	)

366 
	#TLS1_RT_CRYPTO
 0x1000

	)

367 
	#TLS1_RT_CRYPTO_PREMASTER
 (
TLS1_RT_CRYPTO
 | 0x1)

	)

368 
	#TLS1_RT_CRYPTO_CLIENT_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x2)

	)

369 
	#TLS1_RT_CRYPTO_SERVER_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x3)

	)

370 
	#TLS1_RT_CRYPTO_MASTER
 (
TLS1_RT_CRYPTO
 | 0x4)

	)

372 
	#TLS1_RT_CRYPTO_READ
 0x0000

	)

373 
	#TLS1_RT_CRYPTO_WRITE
 0x0100

	)

374 
	#TLS1_RT_CRYPTO_MAC
 (
TLS1_RT_CRYPTO
 | 0x5)

	)

375 
	#TLS1_RT_CRYPTO_KEY
 (
TLS1_RT_CRYPTO
 | 0x6)

	)

376 
	#TLS1_RT_CRYPTO_IV
 (
TLS1_RT_CRYPTO
 | 0x7)

	)

377 
	#TLS1_RT_CRYPTO_FIXED_IV
 (
TLS1_RT_CRYPTO
 | 0x8)

	)

380 
	#SSL3_RT_HEADER
 0x100

	)

382 
	#SSL3_AL_WARNING
 1

	)

383 
	#SSL3_AL_FATAL
 2

	)

385 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

386 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

387 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

388 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

389 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

390 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

391 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

392 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

393 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

394 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

395 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

396 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

398 
	#TLS1_HB_REQUEST
 1

	)

399 
	#TLS1_HB_RESPONSE
 2

	)

401 #i‚de‡
OPENSSL_NO_SSL_INTERN


403 
	ss¶3_ªc‹d_°
 {

407  
ty≥
;

411  
Àngth
;

415  
off
;

419  *
d©a
;

423  *
öput
;

427  *
comp
;

431  
ïoch
;

435  
£q_num
[8];

436 } 
	tSSL3_RECORD
;

438 
	ss¶3_buf„r_°
 {

440 *
buf
;

442 
size_t
 
Àn
;

444 
off£t
;

446 
À·
;

447 } 
	tSSL3_BUFFER
;

451 
	#SSL3_CT_RSA_SIGN
 1

	)

452 
	#SSL3_CT_DSS_SIGN
 2

	)

453 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

454 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

455 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

456 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

457 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

462 
	#SSL3_CT_NUMBER
 9

	)

464 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

465 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

466 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

467 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

468 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

469 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

474 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

477 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

479 #i‚de‡
OPENSSL_NO_SSL_INTERN


481 
	ss¶3_°©e_°
 {

482 
Êags
;

483 
dñay_buf_p›_ªt
;

484 
ªad_£quí˚
[8];

485 
ªad_mac_£¸ë_size
;

486 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

487 
wrôe_£quí˚
[8];

488 
wrôe_mac_£¸ë_size
;

489 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

490 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

491 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

493 
√ed_em±y_‰agmíts
;

494 
em±y_‰agmít_d⁄e
;

496 
öô_exåa
;

497 
SSL3_BUFFER
 
rbuf
;

498 
SSL3_BUFFER
 
wbuf
;

499 
SSL3_RECORD
 
ºec
;

500 
SSL3_RECORD
 
wªc
;

505 
Æît_‰agmít
[2];

506 
Æît_‰agmít_Àn
;

507 
h™dshake_‰agmít
[4];

508 
h™dshake_‰agmít_Àn
;

510 
wnum
;

511 
w≥nd_tŸ
;

512 
w≥nd_ty≥
;

513 
w≥nd_ªt
;

514 c⁄° *
w≥nd_buf
;

516 
BIO
 *
h™dshake_buf„r
;

521 
EVP_MD_CTX
 **
h™dshake_dg°
;

527 
ch™ge_cùhî_•ec
;

528 
w¨n_Æît
;

529 
Áèl_Æît
;

534 
Æît_di•©ch
;

535 
£nd_Æît
[2];

540 
ª√gŸüã
;

541 
tŸÆ_ª√gŸüti⁄s
;

542 
num_ª√gŸüti⁄s
;

543 
ö_ªad_≠p_d©a
;

549 *
˛õ¡_›aque_¥f_öput
;

550 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

551 *
£rvî_›aque_¥f_öput
;

552 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

555 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
 * 2];

557 
föish_md
[
EVP_MAX_MD_SIZE
 * 2];

558 
föish_md_Àn
;

559 
≥î_föish_md
[
EVP_MAX_MD_SIZE
 * 2];

560 
≥î_föish_md_Àn
;

561 
mesßge_size
;

562 
mesßge_ty≥
;

564 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

565 #i‚de‡
OPENSSL_NO_DH


566 
DH
 *
dh
;

568 #i‚de‡
OPENSSL_NO_ECDH


569 
EC_KEY
 *
ecdh
;

572 
√xt_°©e
;

573 
ªu£_mesßge
;

575 
˚π_ªq
;

576 
˘y≥_num
;

577 
˘y≥
[
SSL3_CT_NUMBER
];

578 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

579 
u£_rß_tmp
;

580 
key_block_Àngth
;

581 *
key_block
;

582 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

583 c⁄° 
EVP_MD
 *
√w_hash
;

584 
√w_mac_pkey_ty≥
;

585 
√w_mac_£¸ë_size
;

586 #i‚de‡
OPENSSL_NO_COMP


587 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

589 *
√w_com¥essi⁄
;

591 
˚π_ªque°
;

592 } 
tmp
;

595 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

596 
¥evious_˛õ¡_föished_Àn
;

597 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

598 
¥evious_£rvî_föished_Àn
;

599 
£nd_c⁄√˘i⁄_bödög
;

601 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


605 
√xt_¥Ÿo_√g_£í
;

608 #i‚de‡
OPENSSL_NO_TLSEXT


609 #i‚de‡
OPENSSL_NO_EC


615 
is_¥obably_ßÁri
;

628 *
Æ≤_£À˘ed
;

629 
Æ≤_£À˘ed_Àn
;

631 } 
	tSSL3_STATE
;

640 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

641 #i‚de‡
OPENSSL_NO_SCTP


642 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

643 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

646 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

647 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

649 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

650 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

651 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

652 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

653 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

654 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

655 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

656 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

657 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

658 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

659 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

660 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

662 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

663 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

664 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

665 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

666 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

667 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

668 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

669 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

670 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

671 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

672 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


673 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

674 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

676 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

677 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

679 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

680 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

681 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

682 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

683 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

684 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

685 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

686 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

690 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

691 #i‚de‡
OPENSSL_NO_SCTP


692 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

693 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

697 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

698 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

699 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

700 
	#SSL3_ST_SR_CLNT_HELLO_D
 (0x115|
SSL_ST_ACCEPT
)

	)

702 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

703 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

704 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

705 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

706 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

707 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

708 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

709 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

710 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

711 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

712 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

713 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

714 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

715 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

716 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

718 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

719 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

720 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

721 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

722 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

723 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

724 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

725 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

726 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


727 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

728 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

730 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

731 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

733 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

734 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

735 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

736 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

737 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

738 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

739 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

740 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

742 
	#SSL3_MT_HELLO_REQUEST
 0

	)

743 
	#SSL3_MT_CLIENT_HELLO
 1

	)

744 
	#SSL3_MT_SERVER_HELLO
 2

	)

745 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

746 
	#SSL3_MT_CERTIFICATE
 11

	)

747 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

748 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

749 
	#SSL3_MT_SERVER_DONE
 14

	)

750 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

751 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

752 
	#SSL3_MT_FINISHED
 20

	)

753 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

754 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


755 
	#SSL3_MT_NEXT_PROTO
 67

	)

757 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

759 
	#SSL3_MT_CCS
 1

	)

762 
	#SSL3_CC_READ
 0x01

	)

763 
	#SSL3_CC_WRITE
 0x02

	)

764 
	#SSL3_CC_CLIENT
 0x10

	)

765 
	#SSL3_CC_SERVER
 0x20

	)

766 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

767 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

768 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

769 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

771 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°
 {

67 
num
;

68 **
d©a
;

69 
s‹ãd
;

70 
num_Æloc
;

71 (*
comp
) (const *, const *);

72 } 
	t_STACK
;

74 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

75 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

77 
sk_num
(c⁄° 
_STACK
 *);

78 *
sk_vÆue
(c⁄° 
_STACK
 *, );

80 *
sk_£t
(
_STACK
 *, , *);

82 
_STACK
 *
sk_√w
((*
cmp
) (const *, const *));

83 
_STACK
 *
sk_√w_nuŒ
();

84 
sk_‰ì
(
_STACK
 *);

85 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
) (*));

86 
_STACK
 *
sk_dìp_c›y
(_STACK *, *(*)(*), (*)(*));

87 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

88 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

89 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

90 
sk_föd
(
_STACK
 *
°
, *
d©a
);

91 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

92 
sk_push
(
_STACK
 *
°
, *
d©a
);

93 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

94 *
sk_shi·
(
_STACK
 *
°
);

95 *
sk_p›
(
_STACK
 *
°
);

96 
sk_zîo
(
_STACK
 *
°
);

97 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
) (const *, const *)))

99 
_STACK
 *
sk_dup
(_STACK *
°
);

100 
sk_s‹t
(
_STACK
 *
°
);

101 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

103 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

72 #ifde‡
OPENSSL_SYS_VMS


75 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


76 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

77 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


78 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

81 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


82 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

87 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


88 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

89 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


90 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

96 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


97 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


99 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

105 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


106 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

107 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


108 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

112 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


113 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

114 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


115 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

116 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


117 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

118 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


119 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

120 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


121 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

124 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


125 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

126 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


127 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

128 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


129 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

130 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


131 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

132 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


133 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

136 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


137 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

140 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


141 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

142 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


143 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

144 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


145 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

146 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


147 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

148 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


149 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

152 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


153 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

154 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


155 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

156 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


157 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

158 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


159 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

160 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


161 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

162 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


163 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

164 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


165 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

166 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


167 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

170 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


171 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

172 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


173 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

174 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


175 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

176 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


177 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

178 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


179 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

180 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


181 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

182 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


183 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

184 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


185 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

186 #unde‡
SSL_COMP_£t0_com¥essi⁄_mëhods


187 
	#SSL_COMP_£t0_com¥essi⁄_mëhods
 
SSL_COMP_£t0_com¥ess_mëhods


	)

188 #unde‡
SSL_COMP_‰ì_com¥essi⁄_mëhods


189 
	#SSL_COMP_‰ì_com¥essi⁄_mëhods
 
SSL_COMP_‰ì_com¥ess_mëhods


	)

190 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


191 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

192 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


193 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

194 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


195 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

196 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


197 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

198 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


199 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

200 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


201 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

202 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


203 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

204 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


205 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

206 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


207 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

208 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


209 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

210 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


211 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

212 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


213 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

214 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


215 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

216 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


217 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

219 #unde‡
és1_£nd_£rvî_suµÀmíèl_d©a


220 
	#és1_£nd_£rvî_suµÀmíèl_d©a
 
és1_£nd_£rvî_suµl_d©a


	)

221 #unde‡
és1_£nd_˛õ¡_suµÀmíèl_d©a


222 
	#és1_£nd_˛õ¡_suµÀmíèl_d©a
 
és1_£nd_˛õ¡_suµl_d©a


	)

223 #unde‡
és1_gë_£rvî_suµÀmíèl_d©a


224 
	#és1_gë_£rvî_suµÀmíèl_d©a
 
és1_gë_£rvî_suµl_d©a


	)

225 #unde‡
és1_gë_˛õ¡_suµÀmíèl_d©a


226 
	#és1_gë_˛õ¡_suµÀmíèl_d©a
 
és1_gë_˛õ¡_suµl_d©a


	)

228 #unde‡
s¶3_cbc_ªc‹d_dige°_suµ‹ãd


229 
	#s¶3_cbc_ªc‹d_dige°_suµ‹ãd
 
s¶3_cbc_ªc‹d_dige°_suµ‹t


	)

230 #unde‡
s¶_check_˛õ¡hñlo_é£xt_œã


231 
	#s¶_check_˛õ¡hñlo_é£xt_œã
 
s¶_check_˛ihñlo_é£xt_œã


	)

232 #unde‡
s¶_check_˛õ¡hñlo_é£xt_óæy


233 
	#s¶_check_˛õ¡hñlo_é£xt_óæy
 
s¶_check_˛ihñlo_é£xt_óæy


	)

236 #unde‡
RSA_∑ddög_check_PKCS1_OAEP_mgf1


237 
	#RSA_∑ddög_check_PKCS1_OAEP_mgf1
 
RSA_∑d_check_PKCS1_OAEP_mgf1


	)

240 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


241 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

242 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


243 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

244 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


245 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

246 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


247 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

248 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


249 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

250 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


251 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

252 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


253 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

254 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


255 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

256 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


257 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

258 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

259 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


260 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

263 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


264 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

265 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


266 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

267 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


268 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

271 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


272 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

273 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


274 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

277 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


278 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

279 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


280 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

281 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


282 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

283 #unde‡
EVP_PKEY_mëh_gë_vîify_ªcovî


284 
	#EVP_PKEY_mëh_gë_vîify_ªcovî
 
EVP_PKEY_mëh_gë_vrfy_ªcovî


	)

287 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


288 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

289 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


290 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

291 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


292 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

293 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


294 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

295 
EC_KEY_£t_pub_key_aff_co‹ds


	)

296 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


297 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

298 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

299 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


300 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

301 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

302 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


303 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

304 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


305 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

306 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


307 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

308 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


309 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

310 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


311 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

312 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


313 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

314 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

315 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


316 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

317 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


318 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

319 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


320 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

321 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


322 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

323 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


324 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

325 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


326 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

327 
ec_GF2m_smp_±_£t_af_co‹ds


	)

328 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


329 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

330 
ec_GF2m_smp_±_gë_af_co‹ds


	)

331 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


332 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

333 
ec_GF2m_smp_£t_com¥_co‹ds


	)

334 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


335 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

336 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


337 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

338 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


339 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

340 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


341 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

342 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


343 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

344 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


345 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

346 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


347 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

348 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


349 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

350 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


351 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

352 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


353 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

354 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

355 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


356 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

357 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

358 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


359 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

360 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

361 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


362 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

363 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

364 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


365 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

366 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

367 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


368 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

369 
ec_GFp_smp_±_£t_af_co‹ds


	)

370 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


371 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

372 
ec_GFp_smp_±_gë_af_co‹ds


	)

373 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


374 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

375 
ec_GFp_smp_£t_com¥_co‹ds


	)

376 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


377 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

380 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


381 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

382 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


383 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

384 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


385 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

386 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


387 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

388 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


389 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

390 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


391 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

392 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


393 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

394 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


395 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

396 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


397 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

398 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


399 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

400 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


401 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

402 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


403 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

404 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


405 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

406 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


407 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

408 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


409 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

410 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


411 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

412 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


413 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

414 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


415 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

416 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


417 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

418 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


419 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

420 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


421 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

422 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


423 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

424 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


425 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

426 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


427 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

430 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


431 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

432 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


433 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

434 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


435 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

438 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


439 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

440 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


441 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

442 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


443 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

444 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


445 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

446 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


447 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

448 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


449 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

450 #unde‡
CMS_Recùõ¡Info_k¨i_gë0_‹ig_id


451 
	#CMS_Recùõ¡Info_k¨i_gë0_‹ig_id
 
CMS_RecùInfo_k¨i_gë0_‹ig_id


	)

452 #unde‡
CMS_Recùõ¡Info_k¨i_gë0_ªks


453 
	#CMS_Recùõ¡Info_k¨i_gë0_ªks
 
CMS_RecùInfo_k¨i_gë0_ªks


	)

454 #unde‡
CMS_Recùõ¡En¸y±edKey_˚π_cmp


455 
	#CMS_Recùõ¡En¸y±edKey_˚π_cmp
 
CMS_RecùEn¸y±edKey_˚π_cmp


	)

456 #unde‡
CMS_Recùõ¡Info_k¨i_£t0_pkey


457 
	#CMS_Recùõ¡Info_k¨i_£t0_pkey
 
CMS_RecùInfo_k¨i_£t0_pkey


	)

458 #unde‡
CMS_Recùõ¡En¸y±edKey_gë0_id


459 
	#CMS_Recùõ¡En¸y±edKey_gë0_id
 
CMS_RecùEn¸y±edKey_gë0_id


	)

460 #unde‡
CMS_Recùõ¡Info_k¨i_‹ig_id_cmp


461 
	#CMS_Recùõ¡Info_k¨i_‹ig_id_cmp
 
CMS_RecùInfo_k¨i_‹ig_id_cmp


	)

464 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


465 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

468 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


469 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

470 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


471 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

474 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


475 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

476 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


477 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

482 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

483 #unde‡
ERR_lﬂd_CRYPTO_°rögs


484 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

485 #unde‡
OCSP_¸lID_√w


486 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

488 #unde‡
d2i_ECPARAMETERS


489 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

490 #unde‡
i2d_ECPARAMETERS


491 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

492 #unde‡
d2i_ECPKPARAMETERS


493 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

494 #unde‡
i2d_ECPKPARAMETERS


495 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

503 #unde‡
X509v3_˛ónup_exãnsi⁄s


504 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

505 #unde‡
X509v3_add_exãnsi⁄


506 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

507 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


508 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

509 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


510 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

513 #unde‡
cms_D©a_¸óã


514 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_1_VERSION
 0x0302

	)

164 
	#TLS1_2_VERSION
 0x0303

	)

165 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

167 
	#TLS1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_VERSION_MINOR
 0x01

	)

170 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

171 
	#TLS1_1_VERSION_MINOR
 0x02

	)

173 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

174 
	#TLS1_2_VERSION_MINOR
 0x03

	)

176 
	#TLS1_gë_vîsi⁄
(
s
) \

177 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

179 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

180 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

182 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

183 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

184 
	#TLS1_AD_UNKNOWN_CA
 48

	)

185 
	#TLS1_AD_ACCESS_DENIED
 49

	)

186 
	#TLS1_AD_DECODE_ERROR
 50

	)

187 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

188 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

189 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

190 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

191 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

192 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

193 
	#TLS1_AD_USER_CANCELLED
 90

	)

194 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

196 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

197 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

198 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

199 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

200 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

201 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

204 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

205 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

206 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

207 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

208 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

209 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

211 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

213 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

214 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

216 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

219 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

220 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

223 
	#TLSEXT_TYPE_§p
 12

	)

226 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

229 
	#TLSEXT_TYPE_u£_§ç
 14

	)

232 
	#TLSEXT_TYPE_hóπbót
 15

	)

235 
	#TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 16

	)

241 
	#TLSEXT_TYPE_∑ddög
 21

	)

244 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

253 
	#TLSEXT_TYPE_›aque_¥f_öput
 ??

	)

257 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

259 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


261 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

265 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

267 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

270 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

271 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

272 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

273 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

274 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

277 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

278 
	#TLSEXT_sig«tuª_rß
 1

	)

279 
	#TLSEXT_sig«tuª_dß
 2

	)

280 
	#TLSEXT_sig«tuª_ecdß
 3

	)

283 
	#TLSEXT_sig«tuª_num
 4

	)

285 
	#TLSEXT_hash_n⁄e
 0

	)

286 
	#TLSEXT_hash_md5
 1

	)

287 
	#TLSEXT_hash_sha1
 2

	)

288 
	#TLSEXT_hash_sha224
 3

	)

289 
	#TLSEXT_hash_sha256
 4

	)

290 
	#TLSEXT_hash_sha384
 5

	)

291 
	#TLSEXT_hash_sha512
 6

	)

295 
	#TLSEXT_hash_num
 7

	)

298 
	#TLSEXT_nid_unknown
 0x1000000

	)

302 
	#TLSEXT_curve_P_256
 23

	)

303 
	#TLSEXT_curve_P_384
 24

	)

305 #i‚de‡
OPENSSL_NO_TLSEXT


307 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

309 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

310 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

318 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

319 c⁄° *
œbñ
, 
size_t
 
Œí
,

320 c⁄° *
c⁄ãxt
, 
size_t
 
c⁄ãxéí
,

321 
u£_c⁄ãxt
);

323 
SSL_gë_sigÆgs
(
SSL
 *
s
, 
idx
,

324 *
psign
, *
phash
, *
psig«ndhash
,

325 *
rsig
, *
rhash
);

327 
SSL_gë_sh¨ed_sigÆgs
(
SSL
 *
s
, 
idx
,

328 *
psign
, *
phash
, *
psig«ndhash
,

329 *
rsig
, *
rhash
);

331 
SSL_check_chaö
(
SSL
 *
s
, 
X509
 *
x
, 
EVP_PKEY
 *
pk
, 
STACK_OF
(X509Ë*
chaö
);

333 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

334 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

336 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

337 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

339 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

340 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

342 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

343 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

345 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

346 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

348 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

349 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

351 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

352 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

354 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

355 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

357 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

358 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

360 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

361 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

363 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

364 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

366 
	#SSL_TLSEXT_ERR_OK
 0

	)

367 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

368 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

369 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

371 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

372 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

374 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

375 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

376 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

377 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

379 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

380 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

382 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

383 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

385 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

386 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

387 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

388 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

389 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

390 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

392 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

393 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

395 #i‚de‡
OPENSSL_NO_HEARTBEATS


396 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

397 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

398 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

400 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

401 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

402 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

403 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

408 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

409 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

410 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

411 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

420 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

422 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

424 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

425 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

426 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

427 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

428 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

431 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

432 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

433 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

434 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

435 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

436 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

438 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

439 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

440 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

441 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

442 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

443 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

446 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

447 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

448 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

449 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

450 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

451 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

454 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

455 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

456 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

457 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

458 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

459 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

462 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

463 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

464 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

465 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

466 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

467 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

468 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

471 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

472 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

473 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

474 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

475 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

476 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

479 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

480 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

481 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

482 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

483 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

484 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

487 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

488 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

489 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

490 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

491 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

492 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

493 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

494 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

495 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

496 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

497 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

498 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

504 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

505 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

507 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

508 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

510 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

511 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

512 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

516 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

517 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

518 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

522 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

523 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

524 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

525 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

526 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

528 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

529 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

530 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

531 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

532 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

535 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

536 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

537 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

538 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

539 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

540 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

541 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

542 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

543 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

547 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

548 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

549 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

550 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

551 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

552 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

553 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

554 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

557 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

558 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

559 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

560 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

561 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

562 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

563 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

564 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

572 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

573 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

574 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

575 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

576 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

577 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

578 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

581 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

582 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

583 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

584 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

585 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

586 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

588 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

589 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

590 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

591 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

592 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

593 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

596 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

597 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

598 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

599 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

600 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

602 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

603 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

604 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

605 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

606 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

608 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

609 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

610 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

611 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

612 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

614 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

615 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

616 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

617 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

618 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

620 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

621 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

622 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

623 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

624 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

627 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

628 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

629 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

630 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

633 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

634 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

635 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

636 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

637 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

638 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

639 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

640 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

641 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

644 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

645 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

646 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

647 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

648 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

649 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

651 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

652 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

653 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

654 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

655 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

656 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

659 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

660 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

661 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

662 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

663 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

664 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

667 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

668 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

669 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

670 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

671 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

672 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

673 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

674 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

675 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

676 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

677 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

678 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

679 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

682 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

683 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

684 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

685 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

686 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

687 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

688 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

689 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

690 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

691 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

692 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

693 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

697 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

698 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

699 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

700 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

701 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

702 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

703 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

704 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

707 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

708 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

709 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

710 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

711 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

712 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

713 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

714 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

716 
	#TLS_CT_RSA_SIGN
 1

	)

717 
	#TLS_CT_DSS_SIGN
 2

	)

718 
	#TLS_CT_RSA_FIXED_DH
 3

	)

719 
	#TLS_CT_DSS_FIXED_DH
 4

	)

720 
	#TLS_CT_ECDSA_SIGN
 64

	)

721 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

722 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

723 
	#TLS_CT_GOST94_SIGN
 21

	)

724 
	#TLS_CT_GOST01_SIGN
 22

	)

729 
	#TLS_CT_NUMBER
 9

	)

731 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

733 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

734 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

735 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

736 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

737 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

738 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

739 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

740 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

741 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

742 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

743 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

744 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

745 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

746 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

747 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

748 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

749 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

751 #ifde‡
CHARSET_EBCDIC


752 #unde‡
TLS_MD_CLIENT_FINISH_CONST


756 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

758 #unde‡
TLS_MD_SERVER_FINISH_CONST


762 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

764 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


768 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

770 #unde‡
TLS_MD_KEY_EXPANSION_CONST


774 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

776 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


780 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

782 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


786 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

788 #unde‡
TLS_MD_IV_BLOCK_CONST


792 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

794 #unde‡
TLS_MD_MASTER_SECRET_CONST


798 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

802 
	sés_£ssi⁄_tickë_ext_°
 {

803 
Àngth
;

804 *
d©a
;

807 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°
 {

138 
nid
;

139 (*
a2i
) ();

140 (*
i2a
) ();

141 } 
	tX509_OBJECTS
;

143 
	sX509_Æg‹_°
 {

144 
ASN1_OBJECT
 *
Æg‹ôhm
;

145 
ASN1_TYPE
 *
∑ømëî
;

148 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

150 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

152 
	sX509_vÆ_°
 {

153 
ASN1_TIME
 *
nŸBef‹e
;

154 
ASN1_TIME
 *
nŸA·î
;

155 } 
	tX509_VAL
;

157 
	sX509_pubkey_°
 {

158 
X509_ALGOR
 *
Æg‹
;

159 
ASN1_BIT_STRING
 *
public_key
;

160 
EVP_PKEY
 *
pkey
;

163 
	sX509_sig_°
 {

164 
X509_ALGOR
 *
Æg‹
;

165 
ASN1_OCTET_STRING
 *
dige°
;

166 } 
	tX509_SIG
;

168 
	sX509_«me_íåy_°
 {

169 
ASN1_OBJECT
 *
obje˘
;

170 
ASN1_STRING
 *
vÆue
;

171 
£t
;

172 
size
;

173 } 
	tX509_NAME_ENTRY
;

175 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

176 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

179 
	sX509_«me_°
 {

180 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

181 
modifõd
;

182 #i‚de‡
OPENSSL_NO_BUFFER


183 
BUF_MEM
 *
byãs
;

185 *
byãs
;

188 *
ˇn⁄_íc
;

189 
ˇn⁄_í˛í
;

192 
DECLARE_STACK_OF
(
X509_NAME
)

194 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

195 
	#X509_EX_V_INIT
 0x0001

	)

196 
	sX509_exãnsi⁄_°
 {

197 
ASN1_OBJECT
 *
obje˘
;

198 
ASN1_BOOLEAN
 
¸ôiˇl
;

199 
ASN1_OCTET_STRING
 *
vÆue
;

200 } 
	tX509_EXTENSION
;

202 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

204 
DECLARE_STACK_OF
(
X509_EXTENSION
)

205 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

208 
	sx509_©åibuãs_°
 {

209 
ASN1_OBJECT
 *
obje˘
;

210 
sögÀ
;

213 *
±r
;

216  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

219  
ASN1_TYPE
 *
sögÀ
;

220 } 
vÆue
;

221 } 
	tX509_ATTRIBUTE
;

223 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

224 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

226 
	sX509_ªq_öfo_°
 {

227 
ASN1_ENCODING
 
íc
;

228 
ASN1_INTEGER
 *
vîsi⁄
;

229 
X509_NAME
 *
subje˘
;

230 
X509_PUBKEY
 *
pubkey
;

232 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

233 } 
	tX509_REQ_INFO
;

235 
	sX509_ªq_°
 {

236 
X509_REQ_INFO
 *
ªq_öfo
;

237 
X509_ALGOR
 *
sig_Æg
;

238 
ASN1_BIT_STRING
 *
sig«tuª
;

239 
ª„ªn˚s
;

240 } 
	tX509_REQ
;

242 
	sx509_cöf_°
 {

243 
ASN1_INTEGER
 *
vîsi⁄
;

244 
ASN1_INTEGER
 *
£rülNumbî
;

245 
X509_ALGOR
 *
sig«tuª
;

246 
X509_NAME
 *
issuî
;

247 
X509_VAL
 *
vÆidôy
;

248 
X509_NAME
 *
subje˘
;

249 
X509_PUBKEY
 *
key
;

250 
ASN1_BIT_STRING
 *
issuîUID
;

251 
ASN1_BIT_STRING
 *
subje˘UID
;

252 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

253 
ASN1_ENCODING
 
íc
;

254 } 
	tX509_CINF
;

262 
	sx509_˚π_aux_°
 {

263 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

264 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

265 
ASN1_UTF8STRING
 *
Æüs
;

266 
ASN1_OCTET_STRING
 *
keyid
;

267 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

268 } 
	tX509_CERT_AUX
;

270 
	sx509_°
 {

271 
X509_CINF
 *
˚π_öfo
;

272 
X509_ALGOR
 *
sig_Æg
;

273 
ASN1_BIT_STRING
 *
sig«tuª
;

274 
vÆid
;

275 
ª„ªn˚s
;

276 *
«me
;

277 
CRYPTO_EX_DATA
 
ex_d©a
;

279 
ex_∑thÀn
;

280 
ex_p˝©hÀn
;

281 
ex_Êags
;

282 
ex_kußge
;

283 
ex_xkußge
;

284 
ex_ns˚π
;

285 
ASN1_OCTET_STRING
 *
skid
;

286 
AUTHORITY_KEYID
 *
akid
;

287 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

288 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

289 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

290 
NAME_CONSTRAINTS
 *
nc
;

291 #i‚de‡
OPENSSL_NO_RFC3779


292 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

293 
ASIdítifõrs_°
 *
rfc3779_asid
;

295 #i‚de‡
OPENSSL_NO_SHA


296 
sha1_hash
[
SHA_DIGEST_LENGTH
];

298 
X509_CERT_AUX
 *
aux
;

301 
DECLARE_STACK_OF
(
X509
)

302 
DECLARE_ASN1_SET_OF
(
X509
)

306 
	sx509_åu°_°
 {

307 
åu°
;

308 
Êags
;

309 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

310 *
«me
;

311 
¨g1
;

312 *
¨g2
;

313 } 
	tX509_TRUST
;

315 
DECLARE_STACK_OF
(
X509_TRUST
)

317 
	sx509_˚π_∑ú_°
 {

318 
X509
 *
f‹w¨d
;

319 
X509
 *
ªvî£
;

320 } 
	tX509_CERT_PAIR
;

324 
	#X509_TRUST_DEFAULT
 -1

	)

326 
	#X509_TRUST_COMPAT
 1

	)

327 
	#X509_TRUST_SSL_CLIENT
 2

	)

328 
	#X509_TRUST_SSL_SERVER
 3

	)

329 
	#X509_TRUST_EMAIL
 4

	)

330 
	#X509_TRUST_OBJECT_SIGN
 5

	)

331 
	#X509_TRUST_OCSP_SIGN
 6

	)

332 
	#X509_TRUST_OCSP_REQUEST
 7

	)

333 
	#X509_TRUST_TSA
 8

	)

336 
	#X509_TRUST_MIN
 1

	)

337 
	#X509_TRUST_MAX
 8

	)

340 
	#X509_TRUST_DYNAMIC
 1

	)

341 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

345 
	#X509_TRUST_TRUSTED
 1

	)

346 
	#X509_TRUST_REJECTED
 2

	)

347 
	#X509_TRUST_UNTRUSTED
 3

	)

351 
	#X509_FLAG_COMPAT
 0

	)

352 
	#X509_FLAG_NO_HEADER
 1L

	)

353 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

354 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

355 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

356 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

357 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

358 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

359 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

360 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

361 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

362 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

363 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

364 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

370 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

372 
	#XN_FLAG_COMPAT
 0

	)

374 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

375 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

376 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

377 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

379 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

383 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

385 
	#XN_FLAG_FN_SN
 0

	)

386 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

387 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

388 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

390 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

397 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

399 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

404 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

405 
XN_FLAG_SEP_COMMA_PLUS
 | \

406 
XN_FLAG_DN_REV
 | \

407 
XN_FLAG_FN_SN
 | \

408 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

412 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

413 
ASN1_STRFLGS_ESC_QUOTE
 | \

414 
XN_FLAG_SEP_CPLUS_SPC
 | \

415 
XN_FLAG_SPC_EQ
 | \

416 
XN_FLAG_FN_SN
)

	)

420 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

421 
ASN1_STRFLGS_ESC_MSB
 | \

422 
XN_FLAG_SEP_MULTILINE
 | \

423 
XN_FLAG_SPC_EQ
 | \

424 
XN_FLAG_FN_LN
 | \

425 
XN_FLAG_FN_ALIGN
)

	)

427 
	sx509_ªvoked_°
 {

428 
ASN1_INTEGER
 *
£rülNumbî
;

429 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

430 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

432 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

434 
ªas⁄
;

435 
£quí˚
;

438 
DECLARE_STACK_OF
(
X509_REVOKED
)

439 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

441 
	sX509_¸l_öfo_°
 {

442 
ASN1_INTEGER
 *
vîsi⁄
;

443 
X509_ALGOR
 *
sig_Æg
;

444 
X509_NAME
 *
issuî
;

445 
ASN1_TIME
 *
œ°Upd©e
;

446 
ASN1_TIME
 *
√xtUpd©e
;

447 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

448 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

449 
ASN1_ENCODING
 
íc
;

450 } 
	tX509_CRL_INFO
;

452 
	sX509_¸l_°
 {

454 
X509_CRL_INFO
 *
¸l
;

455 
X509_ALGOR
 *
sig_Æg
;

456 
ASN1_BIT_STRING
 *
sig«tuª
;

457 
ª„ªn˚s
;

458 
Êags
;

460 
AUTHORITY_KEYID
 *
akid
;

461 
ISSUING_DIST_POINT
 *
idp
;

463 
idp_Êags
;

464 
idp_ªas⁄s
;

466 
ASN1_INTEGER
 *
¸l_numbî
;

467 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

468 #i‚de‡
OPENSSL_NO_SHA


469 
sha1_hash
[
SHA_DIGEST_LENGTH
];

471 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

472 c⁄° 
X509_CRL_METHOD
 *
mëh
;

473 *
mëh_d©a
;

476 
DECLARE_STACK_OF
(
X509_CRL
)

477 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

479 
	s¥iv©e_key_°
 {

480 
vîsi⁄
;

482 
X509_ALGOR
 *
íc_Æg‹
;

483 
ASN1_OCTET_STRING
 *
íc_pkey
;

485 
EVP_PKEY
 *
dec_pkey
;

487 
key_Àngth
;

488 *
key_d©a
;

489 
key_‰ì
;

491 
EVP_CIPHER_INFO
 
cùhî
;

492 
ª„ªn˚s
;

493 } 
	tX509_PKEY
;

495 #i‚de‡
OPENSSL_NO_EVP


496 
	sX509_öfo_°
 {

497 
X509
 *
x509
;

498 
X509_CRL
 *
¸l
;

499 
X509_PKEY
 *
x_pkey
;

500 
EVP_CIPHER_INFO
 
íc_cùhî
;

501 
íc_Àn
;

502 *
íc_d©a
;

503 
ª„ªn˚s
;

504 } 
	tX509_INFO
;

506 
DECLARE_STACK_OF
(
X509_INFO
)

514 
	sNësˇ≥_•kac_°
 {

515 
X509_PUBKEY
 *
pubkey
;

516 
ASN1_IA5STRING
 *
chÆÀnge
;

517 } 
	tNETSCAPE_SPKAC
;

519 
	sNësˇ≥_•ki_°
 {

520 
NETSCAPE_SPKAC
 *
•kac
;

521 
X509_ALGOR
 *
sig_Æg‹
;

522 
ASN1_BIT_STRING
 *
sig«tuª
;

523 } 
	tNETSCAPE_SPKI
;

526 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

527 
ASN1_OBJECT
 *
ty≥
;

528 
STACK_OF
(
X509
Ë*
˚πs
;

529 } 
	tNETSCAPE_CERT_SEQUENCE
;

540 
	sPBEPARAM_°
 {

541 
ASN1_OCTET_STRING
 *
ß…
;

542 
ASN1_INTEGER
 *
ôî
;

543 } 
	tPBEPARAM
;

547 
	sPBE2PARAM_°
 {

548 
X509_ALGOR
 *
keyfunc
;

549 
X509_ALGOR
 *
í¸y±i⁄
;

550 } 
	tPBE2PARAM
;

552 
	sPBKDF2PARAM_°
 {

554 
ASN1_TYPE
 *
ß…
;

555 
ASN1_INTEGER
 *
ôî
;

556 
ASN1_INTEGER
 *
keyÀngth
;

557 
X509_ALGOR
 *
¥f
;

558 } 
	tPBKDF2PARAM
;

562 
	spkcs8_¥iv_key_öfo_°
 {

564 
brokí
;

565 
	#PKCS8_OK
 0

	)

566 
	#PKCS8_NO_OCTET
 1

	)

567 
	#PKCS8_EMBEDDED_PARAM
 2

	)

568 
	#PKCS8_NS_DB
 3

	)

569 
	#PKCS8_NEG_PRIVKEY
 4

	)

570 
ASN1_INTEGER
 *
vîsi⁄
;

571 
X509_ALGOR
 *
pkeyÆg
;

573 
ASN1_TYPE
 *
pkey
;

574 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

577 #ifde‡ 
__˝lu•lus


581 
	~<›ís¶/x509_vfy.h
>

582 
	~<›ís¶/pkcs7.h
>

584 #ifde‡ 
__˝lu•lus


588 
	#X509_EXT_PACK_UNKNOWN
 1

	)

589 
	#X509_EXT_PACK_STRING
 2

	)

591 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

593 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

594 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

595 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

596 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

597 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

598 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

599 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

600 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

602 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

603 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

604 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

605 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

606 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

608 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

609 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

610 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

611 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

612 
X509_REVOKED
 **
ªt
,

613 
ASN1_INTEGER
 *
£r
,

614 
X509_NAME
 *
issuî
),

615 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

616 
EVP_PKEY
 *
pk
));

617 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

619 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

620 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

626 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

628 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

630 #i‚de‡
OPENSSL_NO_EVP


631 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

633 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

634 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

635 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

637 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

638 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

639 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

640 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

642 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

644 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

645 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, 
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

647 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

648 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

649 
X509_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509
 **
p˚π
);

650 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

651 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

652 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

653 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

654 
X509_CRL_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509_CRL
 **
p¸l
);

655 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

657 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

658 *
md
, *
Àn
);

659 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

660 *
md
, *
Àn
);

661 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

662 *
md
, *
Àn
);

663 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

664 *
md
, *
Àn
);

665 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

666 *
md
, *
Àn
);

669 #i‚de‡
OPENSSL_NO_FP_API


670 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

671 
i2d_X509_Â
(
FILE
 *
Â
, 
X509
 *
x509
);

672 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

673 
i2d_X509_CRL_Â
(
FILE
 *
Â
, 
X509_CRL
 *
¸l
);

674 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

675 
i2d_X509_REQ_Â
(
FILE
 *
Â
, 
X509_REQ
 *
ªq
);

676 #i‚de‡
OPENSSL_NO_RSA


677 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

678 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

679 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

680 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

681 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

682 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

684 #i‚de‡
OPENSSL_NO_DSA


685 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

686 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

687 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

688 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

690 #i‚de‡
OPENSSL_NO_EC


691 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

692 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

693 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

694 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

696 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

697 
i2d_PKCS8_Â
(
FILE
 *
Â
, 
X509_SIG
 *
p8
);

698 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

699 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

700 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

701 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

702 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

703 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

704 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

705 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

708 #i‚de‡
OPENSSL_NO_BIO


709 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

710 
i2d_X509_bio
(
BIO
 *
bp
, 
X509
 *
x509
);

711 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

712 
i2d_X509_CRL_bio
(
BIO
 *
bp
, 
X509_CRL
 *
¸l
);

713 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

714 
i2d_X509_REQ_bio
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

715 #i‚de‡
OPENSSL_NO_RSA


716 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

717 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

718 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

719 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

720 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

721 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

723 #i‚de‡
OPENSSL_NO_DSA


724 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

725 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

726 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

727 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

729 #i‚de‡
OPENSSL_NO_EC


730 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

731 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

732 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

733 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

735 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

736 
i2d_PKCS8_bio
(
BIO
 *
bp
, 
X509_SIG
 *
p8
);

737 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

738 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

739 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

740 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

741 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

742 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

743 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

744 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

747 
X509
 *
X509_dup
(X509 *
x509
);

748 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

749 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

750 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

751 
X509_REVOKED
 *
X509_REVOKED_dup
(X509_REVOKED *
ªv
);

752 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

753 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

754 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

755 *
pvÆ
);

756 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

757 
X509_ALGOR
 *
Æg‹
);

758 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

759 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

761 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

762 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

764 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

765 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

766 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

767 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

768 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

769 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

771 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

772 c⁄° *
X509_gë_deÁu…_˚π_dú
();

773 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

774 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

775 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

776 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

778 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

779 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

781 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

782 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

783 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

785 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

787 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

788 
EVP_PKEY
 *
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

789 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

790 
i2d_PUBKEY
(
EVP_PKEY
 *
a
, **
µ
);

791 
EVP_PKEY
 *
d2i_PUBKEY
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
);

792 #i‚de‡
OPENSSL_NO_RSA


793 
i2d_RSA_PUBKEY
(
RSA
 *
a
, **
µ
);

794 
RSA
 *
d2i_RSA_PUBKEY
(RSA **
a
, c⁄° **
µ
, 
Àngth
);

796 #i‚de‡
OPENSSL_NO_DSA


797 
i2d_DSA_PUBKEY
(
DSA
 *
a
, **
µ
);

798 
DSA
 *
d2i_DSA_PUBKEY
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

800 #i‚de‡
OPENSSL_NO_EC


801 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

802 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
, 
Àngth
);

805 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

806 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

807 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

809 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

810 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

812 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

813 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

815 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

817 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

819 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

821 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

828 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

829 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

830 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

831 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

832 
i2d_X509_AUX
(
X509
 *
a
, **
µ
);

833 
X509
 *
d2i_X509_AUX
(X509 **
a
, c⁄° **
µ
, 
Àngth
);

835 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

837 
X509_gë0_sig«tuª
(
ASN1_BIT_STRING
 **
psig
, 
X509_ALGOR
 **
∑lg
,

838 c⁄° 
X509
 *
x
);

839 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

841 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

842 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

843 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

844 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

845 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

847 
X509_TRUST_£t
(*
t
, 
åu°
);

848 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

849 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

850 
X509_åu°_˛ór
(
X509
 *
x
);

851 
X509_ªje˘_˛ór
(
X509
 *
x
);

853 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

854 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

855 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

857 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

858 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

859 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

860 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

862 
X509_PKEY
 *
X509_PKEY_√w
();

863 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

864 
i2d_X509_PKEY
(
X509_PKEY
 *
a
, **
µ
);

865 
X509_PKEY
 *
d2i_X509_PKEY
(X509_PKEY **
a
, c⁄° **
µ
,

866 
Àngth
);

868 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

869 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

870 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

872 #i‚de‡
OPENSSL_NO_EVP


873 
X509_INFO
 *
X509_INFO_√w
();

874 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

875 *
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
, *
buf
, 
size
);

877 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

878 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

880 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

881 *
md
, *
Àn
);

883 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

884 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

885 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

887 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

888 *
md
, *
Àn
);

890 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

891 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

893 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

894 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
,

895 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

897 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

898 *
a¢
, 
EVP_MD_CTX
 *
˘x
);

901 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

902 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

903 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

904 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

905 
X509_NAME
 *
X509_gë_issuî_«me
(
X509
 *
a
);

906 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

907 
X509_NAME
 *
X509_gë_subje˘_«me
(
X509
 *
a
);

908 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

909 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

910 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

911 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

912 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

913 
X509_˚πifiˇã_ty≥
(
X509
 *
x
, 
EVP_PKEY
 *
pubkey
 );

915 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

916 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, 
X509_NAME
 *
«me
);

917 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

918 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

919 
X509_REQ_exãnsi⁄_nid
(
nid
);

920 *
X509_REQ_gë_exãnsi⁄_nids
();

921 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

922 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

923 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

924 
nid
);

925 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

926 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

927 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

928 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

929 
œ°pos
);

930 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

931 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

932 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

933 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

934 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

935 c⁄° *
byãs
, 
Àn
);

936 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

937 
nid
, 
ty≥
,

938 c⁄° *
byãs
, 
Àn
);

939 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

940 c⁄° *
©å«me
, 
ty≥
,

941 c⁄° *
byãs
, 
Àn
);

943 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

944 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

945 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

946 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

947 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

949 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

950 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

952 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

953 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

955 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

957 
X509_check_¥iv©e_key
(
X509
 *
x509
, 
EVP_PKEY
 *
pkey
);

958 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

959 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

960 
Êags
);

961 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

962 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

964 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

965 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

967 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

968 
X509_issuî_«me_hash
(
X509
 *
a
);

970 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

971 
X509_subje˘_«me_hash
(
X509
 *
x
);

973 #i‚de‡
OPENSSL_NO_MD5


974 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

975 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

978 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

979 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

980 
X509_NAME_hash
(
X509_NAME
 *
x
);

981 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

983 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

984 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

985 #i‚de‡
OPENSSL_NO_FP_API


986 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

987 
cÊag
);

988 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

989 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

990 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

991 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
,

992 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
,

998 
Êags
);

999 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

1000 
cÊag
);

1001 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1002 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1003 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
, 
X509_CERT_AUX
 *
x
, 
ödít
);

1004 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

1005 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

1006 
cÊag
);

1007 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

1010 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1011 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
, *
buf
, 
Àn
);

1012 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1013 *
buf
, 
Àn
);

1019 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

1020 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1021 
œ°pos
);

1022 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1023 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1024 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, 
X509_NAME_ENTRY
 *
√
,

1025 
loc
, 
£t
);

1026 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1027 *
byãs
, 
Àn
, 
loc
,

1028 
£t
);

1029 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1030 *
byãs
, 
Àn
, 
loc
,

1031 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1033 c⁄° *
fõld
, 
ty≥
,

1034 c⁄° *
byãs
,

1035 
Àn
);

1036 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1037 
ty≥
, *
byãs
,

1038 
Àn
);

1039 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1040 c⁄° *
byãs
, 
Àn
, 
loc
,

1041 
£t
);

1042 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1043 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1044 c⁄° *
byãs
,

1045 
Àn
);

1046 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, 
ASN1_OBJECT
 *
obj
);

1047 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1048 c⁄° *
byãs
, 
Àn
);

1049 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1050 
ASN1_STRING
 *
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1052 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1053 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1054 
nid
, 
œ°pos
);

1055 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1056 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1057 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1058 
¸ô
, 
œ°pos
);

1059 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1060 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1061 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1062 
X509_EXTENSION
 *
ex
, 
loc
);

1064 
X509_gë_ext_cou¡
(
X509
 *
x
);

1065 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1066 
X509_gë_ext_by_OBJ
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1067 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1068 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1069 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1070 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1071 *
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1072 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1073 
Êags
);

1075 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1076 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1077 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1078 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1079 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1080 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1081 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1082 *
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1083 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1084 
Êags
);

1086 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1087 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1088 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
, 
ASN1_OBJECT
 *
obj
,

1089 
œ°pos
);

1090 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1091 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1092 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1093 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1094 *
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1095 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1096 
Êags
);

1098 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1099 
nid
, 
¸ô
,

1100 
ASN1_OCTET_STRING
 *
d©a
);

1101 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1102 
ASN1_OBJECT
 *
obj
, 
¸ô
,

1103 
ASN1_OCTET_STRING
 *
d©a
);

1104 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, 
ASN1_OBJECT
 *
obj
);

1105 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1106 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

1107 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1108 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1109 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1111 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1112 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1113 
œ°pos
);

1114 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

1115 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1116 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1117 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1118 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1119 
X509_ATTRIBUTE
 *
©å
);

1120 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

1121 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

1122 
ty≥
,

1123 c⁄° *
byãs
,

1124 
Àn
);

1125 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

1126 **
x
, 
nid
, 
ty≥
,

1127 c⁄° *
byãs
,

1128 
Àn
);

1129 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

1130 **
x
, c⁄° *
©å«me
,

1131 
ty≥
,

1132 c⁄° *
byãs
,

1133 
Àn
);

1134 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
ASN1_OBJECT
 *
obj
,

1135 
œ°pos
, 
ty≥
);

1136 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1137 
©πy≥
, c⁄° *
d©a
,

1138 
Àn
);

1139 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1140 c⁄° 
ASN1_OBJECT
 *
obj
,

1141 
©πy≥
, c⁄° *
d©a
,

1142 
Àn
);

1143 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1144 c⁄° *
©∫ame
, 
ty≥
,

1145 c⁄° *
byãs
,

1146 
Àn
);

1147 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1148 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

1149 c⁄° *
d©a
, 
Àn
);

1150 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

1151 *
d©a
);

1152 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1153 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1154 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1156 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1157 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

1158 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1159 
œ°pos
);

1160 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1161 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1162 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1163 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1164 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1165 c⁄° *
byãs
, 
Àn
);

1166 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1167 
nid
, 
ty≥
,

1168 c⁄° *
byãs
, 
Àn
);

1169 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1170 c⁄° *
©å«me
, 
ty≥
,

1171 c⁄° *
byãs
, 
Àn
);

1173 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1176 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
,

1177 
ASN1_INTEGER
 *
£rül
);

1178 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
);

1180 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1181 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1182 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1184 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1185 c⁄° *
ß…
, 
ß…Àn
);

1187 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1188 c⁄° *
ß…
, 
ß…Àn
);

1189 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1190 *
ß…
, 
ß…Àn
);

1191 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1192 *
ß…
, 
ß…Àn
,

1193 *
aiv
, 
¥f_nid
);

1195 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1196 
¥f_nid
, 
keyÀn
);

1200 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1202 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1203 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1204 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1205 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1207 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1208 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1209 *
≥nc
, 
≥n˛í
);

1210 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1211 c⁄° **
pk
, *
µkÀn
,

1212 
X509_ALGOR
 **
∑
, 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1214 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1215 
±y≥
, *
pvÆ
,

1216 *
≥nc
, 
≥n˛í
);

1217 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1218 c⁄° **
pk
, *
µkÀn
,

1219 
X509_ALGOR
 **
∑
, 
X509_PUBKEY
 *
pub
);

1221 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1222 
X509_TRUST_gë_cou¡
();

1223 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

1224 
X509_TRUST_gë_by_id
(
id
);

1225 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

1226 *
«me
, 
¨g1
, *
¨g2
);

1227 
X509_TRUST_˛ónup
();

1228 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1229 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1230 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1238 
ERR_lﬂd_X509_°rögs
();

1243 
	#X509_F_ADD_CERT_DIR
 100

	)

1244 
	#X509_F_BY_FILE_CTRL
 101

	)

1245 
	#X509_F_CHECK_NAME_CONSTRAINTS
 106

	)

1246 
	#X509_F_CHECK_POLICY
 145

	)

1247 
	#X509_F_DIR_CTRL
 102

	)

1248 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1249 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1250 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1251 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1252 
	#X509_F_X509V3_ADD_EXT
 104

	)

1253 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1254 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1255 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1256 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1257 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1258 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1259 
	#X509_F_X509_CRL_DIFF
 105

	)

1260 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1261 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1262 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1263 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1264 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1265 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1266 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1267 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1268 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1269 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1270 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1271 
	#X509_F_X509_NAME_ONELINE
 116

	)

1272 
	#X509_F_X509_NAME_PRINT
 117

	)

1273 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1274 
	#X509_F_X509_PUBKEY_GET
 119

	)

1275 
	#X509_F_X509_PUBKEY_SET
 120

	)

1276 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1277 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1278 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1279 
	#X509_F_X509_REQ_TO_X509
 123

	)

1280 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1281 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1282 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1283 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1284 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1285 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1286 
	#X509_F_X509_TO_X509_REQ
 126

	)

1287 
	#X509_F_X509_TRUST_ADD
 133

	)

1288 
	#X509_F_X509_TRUST_SET
 141

	)

1289 
	#X509_F_X509_VERIFY_CERT
 127

	)

1292 
	#X509_R_AKID_MISMATCH
 110

	)

1293 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1294 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1295 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1296 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1297 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

1298 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

1299 
	#X509_R_ERR_ASN1_LIB
 102

	)

1300 
	#X509_R_IDP_MISMATCH
 128

	)

1301 
	#X509_R_INVALID_DIRECTORY
 113

	)

1302 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1303 
	#X509_R_INVALID_TRUST
 123

	)

1304 
	#X509_R_ISSUER_MISMATCH
 129

	)

1305 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1306 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1307 
	#X509_R_LOADING_CERT_DIR
 103

	)

1308 
	#X509_R_LOADING_DEFAULTS
 104

	)

1309 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1310 
	#X509_R_NAME_TOO_LONG
 134

	)

1311 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

1312 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1313 
	#X509_R_NO_CRL_NUMBER
 130

	)

1314 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1315 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1316 
	#X509_R_SHOULD_RETRY
 106

	)

1317 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1318 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1319 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1320 
	#X509_R_UNKNOWN_NID
 109

	)

1321 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1322 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1323 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1324 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1325 
	#X509_R_WRONG_TYPE
 122

	)

1327 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
¨gs

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
¨gs

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 
__u32
 
	mrx_noh™dÀr
;

43 
	sπ∆_lök_°©s64
 {

44 
__u64
 
	mrx_∑ckës
;

45 
__u64
 
	mtx_∑ckës
;

46 
__u64
 
	mrx_byãs
;

47 
__u64
 
	mtx_byãs
;

48 
__u64
 
	mrx_îr‹s
;

49 
__u64
 
	mtx_îr‹s
;

50 
__u64
 
	mrx_dr›≥d
;

51 
__u64
 
	mtx_dr›≥d
;

52 
__u64
 
	mmu…iˇ°
;

53 
__u64
 
	mcﬁlisi⁄s
;

56 
__u64
 
	mrx_Àngth_îr‹s
;

57 
__u64
 
	mrx_ovî_îr‹s
;

58 
__u64
 
	mrx_¸c_îr‹s
;

59 
__u64
 
	mrx_‰ame_îr‹s
;

60 
__u64
 
	mrx_fifo_îr‹s
;

61 
__u64
 
	mrx_mis£d_îr‹s
;

64 
__u64
 
	mtx_ab‹ãd_îr‹s
;

65 
__u64
 
	mtx_ˇºõr_îr‹s
;

66 
__u64
 
	mtx_fifo_îr‹s
;

67 
__u64
 
	mtx_hóπbót_îr‹s
;

68 
__u64
 
	mtx_wödow_îr‹s
;

71 
__u64
 
	mrx_com¥es£d
;

72 
__u64
 
	mtx_com¥es£d
;

74 
__u64
 
	mrx_noh™dÀr
;

78 
	sπ∆_lök_ifm≠
 {

79 
__u64
 
	mmem_°¨t
;

80 
__u64
 
	mmem_íd
;

81 
__u64
 
	mba£_addr
;

82 
__u16
 
	múq
;

83 
__u8
 
	mdma
;

84 
__u8
 
	mp‹t
;

106 
	mIFLA_UNSPEC
,

107 
	mIFLA_ADDRESS
,

108 
	mIFLA_BROADCAST
,

109 
	mIFLA_IFNAME
,

110 
	mIFLA_MTU
,

111 
	mIFLA_LINK
,

112 
	mIFLA_QDISC
,

113 
	mIFLA_STATS
,

114 
	mIFLA_COST
,

115 
	#IFLA_COST
 
IFLA_COST


	)

116 
	mIFLA_PRIORITY
,

117 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

118 
	mIFLA_MASTER
,

119 
	#IFLA_MASTER
 
IFLA_MASTER


	)

120 
	mIFLA_WIRELESS
,

121 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

122 
	mIFLA_PROTINFO
,

123 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

124 
	mIFLA_TXQLEN
,

125 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

126 
	mIFLA_MAP
,

127 
	#IFLA_MAP
 
IFLA_MAP


	)

128 
	mIFLA_WEIGHT
,

129 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

130 
	mIFLA_OPERSTATE
,

131 
	mIFLA_LINKMODE
,

132 
	mIFLA_LINKINFO
,

133 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

134 
	mIFLA_NET_NS_PID
,

135 
	mIFLA_IFALIAS
,

136 
	mIFLA_NUM_VF
,

137 
	mIFLA_VFINFO_LIST
,

138 
	mIFLA_STATS64
,

139 
	mIFLA_VF_PORTS
,

140 
	mIFLA_PORT_SELF
,

141 
	mIFLA_AF_SPEC
,

142 
	mIFLA_GROUP
,

143 
	mIFLA_NET_NS_FD
,

144 
	mIFLA_EXT_MASK
,

145 
	mIFLA_PROMISCUITY
,

146 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

147 
	mIFLA_NUM_TX_QUEUES
,

148 
	mIFLA_NUM_RX_QUEUES
,

149 
	mIFLA_CARRIER
,

150 
	mIFLA_PHYS_PORT_ID
,

151 
	mIFLA_CARRIER_CHANGES
,

152 
	mIFLA_PHYS_SWITCH_ID
,

153 
	mIFLA_LINK_NETNSID
,

154 
	mIFLA_PHYS_PORT_NAME
,

155 
	mIFLA_PROTO_DOWN
,

156 
	mIFLA_GSO_MAX_SEGS
,

157 
	mIFLA_GSO_MAX_SIZE
,

158 
	mIFLA_PAD
,

159 
	mIFLA_XDP
,

160 
	m__IFLA_MAX


164 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

167 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

168 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

171 
	mIFLA_INET_UNSPEC
,

172 
	mIFLA_INET_CONF
,

173 
	m__IFLA_INET_MAX
,

176 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

209 
	mIFLA_INET6_UNSPEC
,

210 
	mIFLA_INET6_FLAGS
,

211 
	mIFLA_INET6_CONF
,

212 
	mIFLA_INET6_STATS
,

213 
	mIFLA_INET6_MCAST
,

214 
	mIFLA_INET6_CACHEINFO
,

215 
	mIFLA_INET6_ICMP6STATS
,

216 
	mIFLA_INET6_TOKEN
,

217 
	mIFLA_INET6_ADDR_GEN_MODE
,

218 
	m__IFLA_INET6_MAX


221 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

223 
	eö6_addr_gí_mode
 {

224 
	mIN6_ADDR_GEN_MODE_EUI64
,

225 
	mIN6_ADDR_GEN_MODE_NONE
,

226 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

227 
	mIN6_ADDR_GEN_MODE_RANDOM
,

233 
	mIFLA_BR_UNSPEC
,

234 
	mIFLA_BR_FORWARD_DELAY
,

235 
	mIFLA_BR_HELLO_TIME
,

236 
	mIFLA_BR_MAX_AGE
,

237 
	mIFLA_BR_AGEING_TIME
,

238 
	mIFLA_BR_STP_STATE
,

239 
	mIFLA_BR_PRIORITY
,

240 
	mIFLA_BR_VLAN_FILTERING
,

241 
	mIFLA_BR_VLAN_PROTOCOL
,

242 
	mIFLA_BR_GROUP_FWD_MASK
,

243 
	mIFLA_BR_ROOT_ID
,

244 
	mIFLA_BR_BRIDGE_ID
,

245 
	mIFLA_BR_ROOT_PORT
,

246 
	mIFLA_BR_ROOT_PATH_COST
,

247 
	mIFLA_BR_TOPOLOGY_CHANGE
,

248 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

249 
	mIFLA_BR_HELLO_TIMER
,

250 
	mIFLA_BR_TCN_TIMER
,

251 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

252 
	mIFLA_BR_GC_TIMER
,

253 
	mIFLA_BR_GROUP_ADDR
,

254 
	mIFLA_BR_FDB_FLUSH
,

255 
	mIFLA_BR_MCAST_ROUTER
,

256 
	mIFLA_BR_MCAST_SNOOPING
,

257 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

258 
	mIFLA_BR_MCAST_QUERIER
,

259 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

260 
	mIFLA_BR_MCAST_HASH_MAX
,

261 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

262 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

263 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

264 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

265 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

266 
	mIFLA_BR_MCAST_QUERY_INTVL
,

267 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

268 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

269 
	mIFLA_BR_NF_CALL_IPTABLES
,

270 
	mIFLA_BR_NF_CALL_IP6TABLES
,

271 
	mIFLA_BR_NF_CALL_ARPTABLES
,

272 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

273 
	mIFLA_BR_PAD
,

274 
	mIFLA_BR_VLAN_STATS_ENABLED
,

275 
	mIFLA_BR_MCAST_STATS_ENABLED
,

276 
	m__IFLA_BR_MAX
,

279 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

281 
	siÊa_bridge_id
 {

282 
__u8
 
	m¥io
[2];

283 
__u8
 
	maddr
[6];

287 
	mBRIDGE_MODE_UNSPEC
,

288 
	mBRIDGE_MODE_HAIRPIN
,

292 
	mIFLA_BRPORT_UNSPEC
,

293 
	mIFLA_BRPORT_STATE
,

294 
	mIFLA_BRPORT_PRIORITY
,

295 
	mIFLA_BRPORT_COST
,

296 
	mIFLA_BRPORT_MODE
,

297 
	mIFLA_BRPORT_GUARD
,

298 
	mIFLA_BRPORT_PROTECT
,

299 
	mIFLA_BRPORT_FAST_LEAVE
,

300 
	mIFLA_BRPORT_LEARNING
,

301 
	mIFLA_BRPORT_UNICAST_FLOOD
,

302 
	mIFLA_BRPORT_PROXYARP
,

303 
	mIFLA_BRPORT_LEARNING_SYNC
,

304 
	mIFLA_BRPORT_PROXYARP_WIFI
,

305 
	mIFLA_BRPORT_ROOT_ID
,

306 
	mIFLA_BRPORT_BRIDGE_ID
,

307 
	mIFLA_BRPORT_DESIGNATED_PORT
,

308 
	mIFLA_BRPORT_DESIGNATED_COST
,

309 
	mIFLA_BRPORT_ID
,

310 
	mIFLA_BRPORT_NO
,

311 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

312 
	mIFLA_BRPORT_CONFIG_PENDING
,

313 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

314 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

315 
	mIFLA_BRPORT_HOLD_TIMER
,

316 
	mIFLA_BRPORT_FLUSH
,

317 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

318 
	mIFLA_BRPORT_PAD
,

319 
	mIFLA_BRPORT_MCAST_FLOOD
,

320 
	m__IFLA_BRPORT_MAX


322 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

324 
	siÊa_ˇcheöfo
 {

325 
__u32
 
	mmax_ªasm_Àn
;

326 
__u32
 
	mt°amp
;

327 
__u32
 
	mªachabÀ_time
;

328 
__u32
 
	mªå™s_time
;

332 
	mIFLA_INFO_UNSPEC
,

333 
	mIFLA_INFO_KIND
,

334 
	mIFLA_INFO_DATA
,

335 
	mIFLA_INFO_XSTATS
,

336 
	mIFLA_INFO_SLAVE_KIND
,

337 
	mIFLA_INFO_SLAVE_DATA
,

338 
	m__IFLA_INFO_MAX
,

341 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

346 
	mIFLA_VLAN_UNSPEC
,

347 
	mIFLA_VLAN_ID
,

348 
	mIFLA_VLAN_FLAGS
,

349 
	mIFLA_VLAN_EGRESS_QOS
,

350 
	mIFLA_VLAN_INGRESS_QOS
,

351 
	mIFLA_VLAN_PROTOCOL
,

352 
	m__IFLA_VLAN_MAX
,

355 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

357 
	siÊa_vœn_Êags
 {

358 
__u32
 
	mÊags
;

359 
__u32
 
	mmask
;

363 
	mIFLA_VLAN_QOS_UNSPEC
,

364 
	mIFLA_VLAN_QOS_MAPPING
,

365 
	m__IFLA_VLAN_QOS_MAX


368 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

370 
	siÊa_vœn_qos_m≠pög
 {

371 
__u32
 
	m‰om
;

372 
__u32
 
	mto
;

377 
	mIFLA_MACVLAN_UNSPEC
,

378 
	mIFLA_MACVLAN_MODE
,

379 
	mIFLA_MACVLAN_FLAGS
,

380 
	mIFLA_MACVLAN_MACADDR_MODE
,

381 
	mIFLA_MACVLAN_MACADDR
,

382 
	mIFLA_MACVLAN_MACADDR_DATA
,

383 
	mIFLA_MACVLAN_MACADDR_COUNT
,

384 
	m__IFLA_MACVLAN_MAX
,

387 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

389 
	emacvœn_mode
 {

390 
	mMACVLAN_MODE_PRIVATE
 = 1,

391 
	mMACVLAN_MODE_VEPA
 = 2,

392 
	mMACVLAN_MODE_BRIDGE
 = 4,

393 
	mMACVLAN_MODE_PASSTHRU
 = 8,

394 
	mMACVLAN_MODE_SOURCE
 = 16,

397 
	emacvœn_maˇddr_mode
 {

398 
	mMACVLAN_MACADDR_ADD
,

399 
	mMACVLAN_MACADDR_DEL
,

400 
	mMACVLAN_MACADDR_FLUSH
,

401 
	mMACVLAN_MACADDR_SET
,

404 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

408 
	mIFLA_VRF_UNSPEC
,

409 
	mIFLA_VRF_TABLE
,

410 
	m__IFLA_VRF_MAX


413 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

416 
	mIFLA_VRF_PORT_UNSPEC
,

417 
	mIFLA_VRF_PORT_TABLE
,

418 
	m__IFLA_VRF_PORT_MAX


421 
	#IFLA_VRF_PORT_MAX
 (
__IFLA_VRF_PORT_MAX
 - 1)

	)

425 
	mIFLA_MACSEC_UNSPEC
,

426 
	mIFLA_MACSEC_SCI
,

427 
	mIFLA_MACSEC_PORT
,

428 
	mIFLA_MACSEC_ICV_LEN
,

429 
	mIFLA_MACSEC_CIPHER_SUITE
,

430 
	mIFLA_MACSEC_WINDOW
,

431 
	mIFLA_MACSEC_ENCODING_SA
,

432 
	mIFLA_MACSEC_ENCRYPT
,

433 
	mIFLA_MACSEC_PROTECT
,

434 
	mIFLA_MACSEC_INC_SCI
,

435 
	mIFLA_MACSEC_ES
,

436 
	mIFLA_MACSEC_SCB
,

437 
	mIFLA_MACSEC_REPLAY_PROTECT
,

438 
	mIFLA_MACSEC_VALIDATION
,

439 
	mIFLA_MACSEC_PAD
,

440 
	m__IFLA_MACSEC_MAX
,

443 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

445 
	emac£c_vÆid©i⁄_ty≥
 {

446 
	mMACSEC_VALIDATE_DISABLED
 = 0,

447 
	mMACSEC_VALIDATE_CHECK
 = 1,

448 
	mMACSEC_VALIDATE_STRICT
 = 2,

449 
	m__MACSEC_VALIDATE_END
,

450 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

455 
	mIFLA_IPVLAN_UNSPEC
,

456 
	mIFLA_IPVLAN_MODE
,

457 
	m__IFLA_IPVLAN_MAX


460 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

462 
	eùvœn_mode
 {

463 
	mIPVLAN_MODE_L2
 = 0,

464 
	mIPVLAN_MODE_L3
,

465 
	mIPVLAN_MODE_L3S
,

466 
	mIPVLAN_MODE_MAX


471 
	mIFLA_VXLAN_UNSPEC
,

472 
	mIFLA_VXLAN_ID
,

473 
	mIFLA_VXLAN_GROUP
,

474 
	mIFLA_VXLAN_LINK
,

475 
	mIFLA_VXLAN_LOCAL
,

476 
	mIFLA_VXLAN_TTL
,

477 
	mIFLA_VXLAN_TOS
,

478 
	mIFLA_VXLAN_LEARNING
,

479 
	mIFLA_VXLAN_AGEING
,

480 
	mIFLA_VXLAN_LIMIT
,

481 
	mIFLA_VXLAN_PORT_RANGE
,

482 
	mIFLA_VXLAN_PROXY
,

483 
	mIFLA_VXLAN_RSC
,

484 
	mIFLA_VXLAN_L2MISS
,

485 
	mIFLA_VXLAN_L3MISS
,

486 
	mIFLA_VXLAN_PORT
,

487 
	mIFLA_VXLAN_GROUP6
,

488 
	mIFLA_VXLAN_LOCAL6
,

489 
	mIFLA_VXLAN_UDP_CSUM
,

490 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

491 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

492 
	mIFLA_VXLAN_REMCSUM_TX
,

493 
	mIFLA_VXLAN_REMCSUM_RX
,

494 
	mIFLA_VXLAN_GBP
,

495 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

496 
	mIFLA_VXLAN_COLLECT_METADATA
,

497 
	mIFLA_VXLAN_LABEL
,

498 
	mIFLA_VXLAN_GPE
,

499 
	m__IFLA_VXLAN_MAX


501 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

503 
	siÊa_vxœn_p‹t_ønge
 {

504 
__be16
 
	mlow
;

505 
__be16
 
	mhigh
;

510 
	mIFLA_GENEVE_UNSPEC
,

511 
	mIFLA_GENEVE_ID
,

512 
	mIFLA_GENEVE_REMOTE
,

513 
	mIFLA_GENEVE_TTL
,

514 
	mIFLA_GENEVE_TOS
,

515 
	mIFLA_GENEVE_PORT
,

516 
	mIFLA_GENEVE_COLLECT_METADATA
,

517 
	mIFLA_GENEVE_REMOTE6
,

518 
	mIFLA_GENEVE_UDP_CSUM
,

519 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

520 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

521 
	mIFLA_GENEVE_LABEL
,

522 
	m__IFLA_GENEVE_MAX


524 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

528 
	mIFLA_PPP_UNSPEC
,

529 
	mIFLA_PPP_DEV_FD
,

530 
	m__IFLA_PPP_MAX


532 
	#IFLA_PPP_MAX
 (
__IFLA_PPP_MAX
 - 1)

	)

536 
	mIFLA_GTP_UNSPEC
,

537 
	mIFLA_GTP_FD0
,

538 
	mIFLA_GTP_FD1
,

539 
	mIFLA_GTP_PDP_HASHSIZE
,

540 
	m__IFLA_GTP_MAX
,

542 
	#IFLA_GTP_MAX
 (
__IFLA_GTP_MAX
 - 1)

	)

547 
	mIFLA_BOND_UNSPEC
,

548 
	mIFLA_BOND_MODE
,

549 
	mIFLA_BOND_ACTIVE_SLAVE
,

550 
	mIFLA_BOND_MIIMON
,

551 
	mIFLA_BOND_UPDELAY
,

552 
	mIFLA_BOND_DOWNDELAY
,

553 
	mIFLA_BOND_USE_CARRIER
,

554 
	mIFLA_BOND_ARP_INTERVAL
,

555 
	mIFLA_BOND_ARP_IP_TARGET
,

556 
	mIFLA_BOND_ARP_VALIDATE
,

557 
	mIFLA_BOND_ARP_ALL_TARGETS
,

558 
	mIFLA_BOND_PRIMARY
,

559 
	mIFLA_BOND_PRIMARY_RESELECT
,

560 
	mIFLA_BOND_FAIL_OVER_MAC
,

561 
	mIFLA_BOND_XMIT_HASH_POLICY
,

562 
	mIFLA_BOND_RESEND_IGMP
,

563 
	mIFLA_BOND_NUM_PEER_NOTIF
,

564 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

565 
	mIFLA_BOND_MIN_LINKS
,

566 
	mIFLA_BOND_LP_INTERVAL
,

567 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

568 
	mIFLA_BOND_AD_LACP_RATE
,

569 
	mIFLA_BOND_AD_SELECT
,

570 
	mIFLA_BOND_AD_INFO
,

571 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

572 
	mIFLA_BOND_AD_USER_PORT_KEY
,

573 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

574 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

575 
	m__IFLA_BOND_MAX
,

578 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

581 
	mIFLA_BOND_AD_INFO_UNSPEC
,

582 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

583 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

584 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

585 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

586 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

587 
	m__IFLA_BOND_AD_INFO_MAX
,

590 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

593 
	mIFLA_BOND_SLAVE_UNSPEC
,

594 
	mIFLA_BOND_SLAVE_STATE
,

595 
	mIFLA_BOND_SLAVE_MII_STATUS
,

596 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

597 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

598 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

599 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

600 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

601 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

602 
	m__IFLA_BOND_SLAVE_MAX
,

605 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

610 
	mIFLA_VF_INFO_UNSPEC
,

611 
	mIFLA_VF_INFO
,

612 
	m__IFLA_VF_INFO_MAX
,

615 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

618 
	mIFLA_VF_UNSPEC
,

619 
	mIFLA_VF_MAC
,

620 
	mIFLA_VF_VLAN
,

621 
	mIFLA_VF_TX_RATE
,

622 
	mIFLA_VF_SPOOFCHK
,

623 
	mIFLA_VF_LINK_STATE
,

624 
	mIFLA_VF_RATE
,

625 
	mIFLA_VF_RSS_QUERY_EN
,

628 
	mIFLA_VF_STATS
,

629 
	mIFLA_VF_TRUST
,

630 
	mIFLA_VF_IB_NODE_GUID
,

631 
	mIFLA_VF_IB_PORT_GUID
,

632 
	mIFLA_VF_VLAN_LIST
,

633 
	m__IFLA_VF_MAX
,

636 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

638 
	siÊa_vf_mac
 {

639 
__u32
 
	mvf
;

640 
__u8
 
	mmac
[32];

643 
	siÊa_vf_vœn
 {

644 
__u32
 
	mvf
;

645 
__u32
 
	mvœn
;

646 
__u32
 
	mqos
;

650 
	mIFLA_VF_VLAN_INFO_UNSPEC
,

651 
	mIFLA_VF_VLAN_INFO
,

652 
	m__IFLA_VF_VLAN_INFO_MAX
,

655 
	#IFLA_VF_VLAN_INFO_MAX
 (
__IFLA_VF_VLAN_INFO_MAX
 - 1)

	)

656 
	#MAX_VLAN_LIST_LEN
 1

	)

658 
	siÊa_vf_vœn_öfo
 {

659 
__u32
 
	mvf
;

660 
__u32
 
	mvœn
;

661 
__u32
 
	mqos
;

662 
__be16
 
	mvœn_¥Ÿo
;

665 
	siÊa_vf_tx_øã
 {

666 
__u32
 
	mvf
;

667 
__u32
 
	møã
;

670 
	siÊa_vf_øã
 {

671 
__u32
 
	mvf
;

672 
__u32
 
	mmö_tx_øã
;

673 
__u32
 
	mmax_tx_øã
;

676 
	siÊa_vf_•oofchk
 {

677 
__u32
 
	mvf
;

678 
__u32
 
	m£âög
;

681 
	siÊa_vf_guid
 {

682 
__u32
 
	mvf
;

683 
__u64
 
	mguid
;

687 
	mIFLA_VF_LINK_STATE_AUTO
,

688 
	mIFLA_VF_LINK_STATE_ENABLE
,

689 
	mIFLA_VF_LINK_STATE_DISABLE
,

690 
	m__IFLA_VF_LINK_STATE_MAX
,

693 
	siÊa_vf_lök_°©e
 {

694 
__u32
 
	mvf
;

695 
__u32
 
	mlök_°©e
;

698 
	siÊa_vf_rss_quîy_í
 {

699 
__u32
 
	mvf
;

700 
__u32
 
	m£âög
;

704 
	mIFLA_VF_STATS_RX_PACKETS
,

705 
	mIFLA_VF_STATS_TX_PACKETS
,

706 
	mIFLA_VF_STATS_RX_BYTES
,

707 
	mIFLA_VF_STATS_TX_BYTES
,

708 
	mIFLA_VF_STATS_BROADCAST
,

709 
	mIFLA_VF_STATS_MULTICAST
,

710 
	mIFLA_VF_STATS_PAD
,

711 
	m__IFLA_VF_STATS_MAX
,

714 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

716 
	siÊa_vf_åu°
 {

717 
__u32
 
	mvf
;

718 
__u32
 
	m£âög
;

737 
	mIFLA_VF_PORT_UNSPEC
,

738 
	mIFLA_VF_PORT
,

739 
	m__IFLA_VF_PORT_MAX
,

742 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

745 
	mIFLA_PORT_UNSPEC
,

746 
	mIFLA_PORT_VF
,

747 
	mIFLA_PORT_PROFILE
,

748 
	mIFLA_PORT_VSI_TYPE
,

749 
	mIFLA_PORT_INSTANCE_UUID
,

750 
	mIFLA_PORT_HOST_UUID
,

751 
	mIFLA_PORT_REQUEST
,

752 
	mIFLA_PORT_RESPONSE
,

753 
	m__IFLA_PORT_MAX
,

756 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

758 
	#PORT_PROFILE_MAX
 40

	)

759 
	#PORT_UUID_MAX
 16

	)

760 
	#PORT_SELF_VF
 -1

	)

763 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

764 
	mPORT_REQUEST_PREASSOCIATE_RR
,

765 
	mPORT_REQUEST_ASSOCIATE
,

766 
	mPORT_REQUEST_DISASSOCIATE
,

770 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

771 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

772 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

773 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

774 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

775 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

776 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

778 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

779 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

780 
	mPORT_PROFILE_RESPONSE_INVALID
,

781 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

782 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

783 
	mPORT_PROFILE_RESPONSE_ERROR
,

786 
	siÊa_p‹t_vsi
 {

787 
__u8
 
	mvsi_mgr_id
;

788 
__u8
 
	mvsi_ty≥_id
[3];

789 
__u8
 
	mvsi_ty≥_vîsi⁄
;

790 
__u8
 
	m∑d
[3];

797 
	mIFLA_IPOIB_UNSPEC
,

798 
	mIFLA_IPOIB_PKEY
,

799 
	mIFLA_IPOIB_MODE
,

800 
	mIFLA_IPOIB_UMCAST
,

801 
	m__IFLA_IPOIB_MAX


805 
	mIPOIB_MODE_DATAGRAM
 = 0,

806 
	mIPOIB_MODE_CONNECTED
 = 1,

809 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

815 
	mIFLA_HSR_UNSPEC
,

816 
	mIFLA_HSR_SLAVE1
,

817 
	mIFLA_HSR_SLAVE2
,

818 
	mIFLA_HSR_MULTICAST_SPEC
,

819 
	mIFLA_HSR_SUPERVISION_ADDR
,

820 
	mIFLA_HSR_SEQ_NR
,

821 
	mIFLA_HSR_VERSION
,

822 
	m__IFLA_HSR_MAX
,

825 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

829 
	sif_°©s_msg
 {

830 
__u8
 
	mÁmûy
;

831 
__u8
 
	m∑d1
;

832 
__u16
 
	m∑d2
;

833 
__u32
 
	mifödex
;

834 
__u32
 
	mfûãr_mask
;

841 
	mIFLA_STATS_UNSPEC
,

842 
	mIFLA_STATS_LINK_64
,

843 
	mIFLA_STATS_LINK_XSTATS
,

844 
	mIFLA_STATS_LINK_XSTATS_SLAVE
,

845 
	mIFLA_STATS_LINK_OFFLOAD_XSTATS
,

846 
	m__IFLA_STATS_MAX
,

849 
	#IFLA_STATS_MAX
 (
__IFLA_STATS_MAX
 - 1)

	)

851 
	#IFLA_STATS_FILTER_BIT
(
ATTR
Ë(1 << (ATTR - 1))

	)

859 
	mLINK_XSTATS_TYPE_UNSPEC
,

860 
	mLINK_XSTATS_TYPE_BRIDGE
,

861 
	m__LINK_XSTATS_TYPE_MAX


863 
	#LINK_XSTATS_TYPE_MAX
 (
__LINK_XSTATS_TYPE_MAX
 - 1)

	)

867 
	mIFLA_OFFLOAD_XSTATS_UNSPEC
,

868 
	mIFLA_OFFLOAD_XSTATS_CPU_HIT
,

869 
	m__IFLA_OFFLOAD_XSTATS_MAX


871 
	#IFLA_OFFLOAD_XSTATS_MAX
 (
__IFLA_OFFLOAD_XSTATS_MAX
 - 1)

	)

876 
	mIFLA_XDP_UNSPEC
,

877 
	mIFLA_XDP_FD
,

878 
	mIFLA_XDP_ATTACHED
,

879 
	m__IFLA_XDP_MAX
,

882 
	#IFLA_XDP_MAX
 (
__IFLA_XDP_MAX
 - 1)

	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

133 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

134 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

135 
	#B_ASN1_T61STRING
 0x0004

	)

136 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

137 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

138 
	#B_ASN1_IA5STRING
 0x0010

	)

139 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

140 
	#B_ASN1_ISO64STRING
 0x0040

	)

141 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

142 
	#B_ASN1_GENERALSTRING
 0x0080

	)

143 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

144 
	#B_ASN1_OCTET_STRING
 0x0200

	)

145 
	#B_ASN1_BIT_STRING
 0x0400

	)

146 
	#B_ASN1_BMPSTRING
 0x0800

	)

147 
	#B_ASN1_UNKNOWN
 0x1000

	)

148 
	#B_ASN1_UTF8STRING
 0x2000

	)

149 
	#B_ASN1_UTCTIME
 0x4000

	)

150 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

151 
	#B_ASN1_SEQUENCE
 0x10000

	)

153 
	#MBSTRING_FLAG
 0x1000

	)

154 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

155 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

156 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

157 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

158 
	#SMIME_OLDMIME
 0x400

	)

159 
	#SMIME_CRLFEOL
 0x800

	)

160 
	#SMIME_STREAM
 0x1000

	)

161 
X509_Æg‹_°
;

162 
DECLARE_STACK_OF
(
X509_ALGOR
)

164 
	#DECLARE_ASN1_SET_OF
(
ty≥
)

	)

165 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
)

	)

172 
	sa¢1_˘x_°
 {

173 *
p
;

174 
eos
;

176 
îr‹
;

177 
öf
;

178 
èg
;

179 
x˛ass
;

180 
¶í
;

181 *
max
;

182 *
q
;

183 **
µ
;

184 
löe
;

185 } 
	tASN1_CTX
;

187 
	sa¢1_c⁄°_˘x_°
 {

188 c⁄° *
p
;

189 
eos
;

191 
îr‹
;

192 
öf
;

193 
èg
;

194 
x˛ass
;

195 
¶í
;

196 c⁄° *
max
;

197 c⁄° *
q
;

198 c⁄° **
µ
;

199 
löe
;

200 } 
	tASN1_c⁄°_CTX
;

206 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

207 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

208 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

210 
	sa¢1_obje˘_°
 {

211 c⁄° *
¢
, *
 
;

212 
nid
;

213 
Àngth
;

214 c⁄° *
d©a
;

215 
Êags
;

218 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

224 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

237 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

239 
	sa¢1_°rög_°
 {

240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

248 
Êags
;

257 
	sASN1_ENCODING_°
 {

258 *
íc
;

259 
Àn
;

260 
modifõd
;

261 } 
	tASN1_ENCODING
;

264 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

266 
	#STABLE_FLAGS_MALLOC
 0x01

	)

267 
	#STABLE_NO_MASK
 0x02

	)

268 
	#DIRSTRING_TYPE
 \

269 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

270 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

272 
	sa¢1_°rög_èbÀ_°
 {

273 
nid
;

274 
mösize
;

275 
maxsize
;

276 
mask
;

277 
Êags
;

278 } 
	tASN1_STRING_TABLE
;

280 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

284 
	#ub_«me
 32768

	)

285 
	#ub_comm⁄_«me
 64

	)

286 
	#ub_loˇlôy_«me
 128

	)

287 
	#ub_°©e_«me
 128

	)

288 
	#ub_‹g™iz©i⁄_«me
 64

	)

289 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

290 
	#ub_tôÀ
 64

	)

291 
	#ub_emaû_addªss
 128

	)

296 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

297 
ASN1_TLC_°
 
	tASN1_TLC
;

299 
ASN1_VALUE_°
 
	tASN1_VALUE
;

303 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

305 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

306 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

308 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

310 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

312 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

313 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

314 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

316 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

317 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

318 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

319 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

321 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

322 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

323 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

324 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

326 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

327 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

329 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

330 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

331 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

333 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

334 
ty≥
 *
«me
##
	`_√w
(); \

335 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

337 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

338 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

340 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

341 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

342 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

344 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

345 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

346 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

348 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

349 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

350 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

351 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

352 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

353 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

354 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

355 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

356 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

357 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

359 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

360 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

361 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

363 
TYPEDEF_D2I2D_OF
();

401 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


404 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

407 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

410 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

412 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

414 
	#DECLARE_ASN1_ITEM
(
«me
) \

415 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

425 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

428 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

431 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

433 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

435 
	#DECLARE_ASN1_ITEM
(
«me
) \

436 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

447 
	#ASN1_STRFLGS_ESC_2253
 1

	)

448 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

449 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

456 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

461 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

463 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

465 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

476 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

484 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

487 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

497 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

498 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

505 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

512 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

513 
ASN1_STRFLGS_ESC_CTRL
 | \

514 
ASN1_STRFLGS_ESC_MSB
 | \

515 
ASN1_STRFLGS_UTF8_CONVERT
 | \

516 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

517 
ASN1_STRFLGS_DUMP_DER
)

	)

519 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

520 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

522 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

524 
	sa¢1_ty≥_°
 {

525 
ty≥
;

527 *
±r
;

528 
ASN1_BOOLEAN
 
boﬁón
;

529 
ASN1_STRING
 *
a¢1_°rög
;

530 
ASN1_OBJECT
 *
obje˘
;

531 
ASN1_INTEGER
 *
öãgî
;

532 
ASN1_ENUMERATED
 *
íumî©ed
;

533 
ASN1_BIT_STRING
 *
bô_°rög
;

534 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

535 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

536 
ASN1_T61STRING
 *
t61°rög
;

537 
ASN1_IA5STRING
 *
ü5°rög
;

538 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

539 
ASN1_BMPSTRING
 *
bmp°rög
;

540 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

541 
ASN1_UTCTIME
 *
ut˘ime
;

542 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

543 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

544 
ASN1_UTF8STRING
 *
utf8°rög
;

549 
ASN1_STRING
 *
£t
;

550 
ASN1_STRING
 *
£quí˚
;

551 
ASN1_VALUE
 *
a¢1_vÆue
;

552 } 
vÆue
;

553 } 
	tASN1_TYPE
;

555 
DECLARE_STACK_OF
(
ASN1_TYPE
)

556 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

558 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

560 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

561 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

563 
	sNETSCAPE_X509_°
 {

564 
ASN1_OCTET_STRING
 *
hódî
;

565 
X509
 *
˚π
;

566 } 
	tNETSCAPE_X509
;

569 
	sBIT_STRING_BITNAME_°
 {

570 
bônum
;

571 c⁄° *
 ame
;

572 c⁄° *
¢ame
;

573 } 
	tBIT_STRING_BITNAME
;

575 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

576 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

577 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

578 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

581 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

582 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

583 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

584 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

585 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

586 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

587 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

588 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

590 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

591 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

592 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

593 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

594 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

595 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

596 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

598 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

599 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

600 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

601 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

602 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

603 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

604 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

606 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

607 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

608 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

609 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

610 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

611 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

612 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

613 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

614 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

615 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

616 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

617 
V_ASN1_UNIVERSAL
)

	)

619 
	#B_ASN1_TIME
 \

620 
B_ASN1_UTCTIME
 | \

621 
B_ASN1_GENERALIZEDTIME


	)

623 
	#B_ASN1_PRINTABLE
 \

624 
B_ASN1_NUMERICSTRING
| \

625 
B_ASN1_PRINTABLESTRING
| \

626 
B_ASN1_T61STRING
| \

627 
B_ASN1_IA5STRING
| \

628 
B_ASN1_BIT_STRING
| \

629 
B_ASN1_UNIVERSALSTRING
|\

630 
B_ASN1_BMPSTRING
|\

631 
B_ASN1_UTF8STRING
|\

632 
B_ASN1_SEQUENCE
|\

633 
B_ASN1_UNKNOWN


	)

635 
	#B_ASN1_DIRECTORYSTRING
 \

636 
B_ASN1_PRINTABLESTRING
| \

637 
B_ASN1_TELETEXSTRING
|\

638 
B_ASN1_BMPSTRING
|\

639 
B_ASN1_UNIVERSALSTRING
|\

640 
B_ASN1_UTF8STRING


	)

642 
	#B_ASN1_DISPLAYTEXT
 \

643 
B_ASN1_IA5STRING
| \

644 
B_ASN1_VISIBLESTRING
| \

645 
B_ASN1_BMPSTRING
|\

646 
B_ASN1_UTF8STRING


	)

648 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

649 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

650 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

651 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

652 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

653 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

654 
B_ASN1_PRINTABLE
)

	)

656 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

657 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

658 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

659 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

660 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

661 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

662 
B_ASN1_DIRECTORYSTRING
)

	)

664 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

665 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

666 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

667 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

668 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

669 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

670 
B_ASN1_DISPLAYTEXT
)

	)

672 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

673 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

674 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

675 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

676 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

677 
V_ASN1_UNIVERSAL
)

	)

678 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

679 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

680 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

682 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

683 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

684 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

685 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

686 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

687 
V_ASN1_UNIVERSAL
)

	)

688 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

689 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

690 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

692 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

693 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

694 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

695 
	#M_ASN1_IA5STRING_dup
(
a
) \

696 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

697 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

698 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

699 
V_ASN1_UNIVERSAL
)

	)

700 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

701 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

702 
B_ASN1_IA5STRING
)

	)

704 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

705 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

706 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

707 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

708 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

711 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

712 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

713 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

714 (c⁄° 
ASN1_STRING
 *)
a
)

	)

716 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

717 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

718 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

719 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

720 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

722 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

723 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

724 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

725 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

726 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

727 
V_ASN1_UNIVERSAL
)

	)

728 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

729 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

730 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

733 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

734 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

735 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

736 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

737 
V_ASN1_UNIVERSAL
)

	)

738 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

739 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

740 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

743 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

744 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

745 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

746 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

747 
V_ASN1_UNIVERSAL
)

	)

748 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

749 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

750 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

753 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

754 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

755 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

756 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

757 
V_ASN1_UNIVERSAL
)

	)

758 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

759 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

760 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

762 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

763 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

764 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

765 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

766 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

767 
V_ASN1_UNIVERSAL
)

	)

768 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

769 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

770 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

773 
	#IS_SEQUENCE
 0

	)

774 
	#IS_SET
 1

	)

776 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

778 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

779 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

780 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

781 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

783 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

784 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

785 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
, **
µ
);

786 
ASN1_OBJECT
 *
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

787 
Àngth
);

788 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

789 
Àngth
);

791 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

793 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

794 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

796 
ASN1_STRING
 *
ASN1_STRING_√w
();

797 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

798 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

799 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

800 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

801 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

802 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

807 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

808 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

809 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

810 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

811 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

812 *
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

814 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

815 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
, **
µ
);

816 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,

817 c⁄° **
µ
, 
Àngth
);

818 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

819 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

820 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

821 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

822 *
Êags
, 
Êags_Àn
);

824 #i‚de‡
OPENSSL_NO_BIO


825 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

826 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

828 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

829 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

830 
BIT_STRING_BITNAME
 *
tbl
);

832 
i2d_ASN1_BOOLEAN
(
a
, **
µ
);

833 
d2i_ASN1_BOOLEAN
(*
a
, c⁄° **
µ
, 
Àngth
);

835 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

836 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
, **
µ
);

837 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

838 
Àngth
);

839 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

840 
Àngth
);

841 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

842 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

844 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

846 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

847 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

848 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

849 
off£t_day
, 
off£t_£c
);

850 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

851 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

853 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

856 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

857 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

858 
time_t
 
t
);

859 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

860 
time_t
 
t
, 
off£t_day
,

861 
off£t_£c
);

862 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

863 
ASN1_TIME_diff
(*
pday
, *
p£c
,

864 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

867 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

868 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

869 c⁄° 
ASN1_OCTET_STRING
 *
b
);

870 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

871 
Àn
);

873 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

874 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

875 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

879 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

880 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

882 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

884 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

885 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

886 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

887 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

888 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

889 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

890 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

891 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

892 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

894 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

896 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

897 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

898 
off£t_day
, 
off£t_£c
);

899 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

900 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME

901 **
out
);

902 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

904 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

905 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
, 
is_£t
);

906 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

907 c⁄° **
µ
,

908 
Àngth
, 
d2i_of_void
 *
d2i
,

909 (*
‰ì_func
Ë(
OPENSSL_BLOCK
),

910 
ex_èg
, 
ex_˛ass
);

912 #i‚de‡
OPENSSL_NO_BIO


913 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

914 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

915 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

916 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

917 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, 
ASN1_OBJECT
 *
a
);

918 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

919 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

921 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, 
ASN1_OBJECT
 *
a
);

923 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

924 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

925 c⁄° *
¢
, c⁄° *
 
);

927 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

928 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

929 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

930 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

932 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

933 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

934 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

935 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

939 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

941 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

942 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

943 
Àngth
, 
Pèg
, 
P˛ass
);

944 
ASN1_èg2bô
(
èg
);

946 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

947 
Àngth
, 
ty≥
);

950 
a¢1_Föish
(
ASN1_CTX
 *
c
);

951 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

954 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

955 *
p˛ass
, 
omax
);

956 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

957 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

958 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

959 
èg
, 
x˛ass
);

960 
ASN1_put_eoc
(**
µ
);

961 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

964 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

966 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

967 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

968 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

969 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

971 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

972 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

973 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

974 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

976 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

980 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

981 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

982 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

984 #i‚de‡
OPENSSL_NO_FP_API


985 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

987 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

988 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

989 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

990 
ö
, \

991 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

993 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

994 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

996 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

997 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

998 
out
, \

999 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1001 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1002 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1003 
out
, \

1004 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1006 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

1007 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1010 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1012 #i‚de‡
OPENSSL_NO_BIO


1013 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1015 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1016 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1017 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1018 
ö
, \

1019 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1021 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1022 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

1024 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1025 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1026 
out
, \

1027 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1029 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1030 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1031 
out
, \

1032 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1034 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1035 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1036 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1037 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1038 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1039 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1040 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1041 *
buf
, 
off
);

1042 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

1043 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

1044 
dump
);

1046 c⁄° *
ASN1_èg2°r
(
èg
);

1050 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1052 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1054 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

1055 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

1056 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1057 *
d©a
, 
Àn
);

1058 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
num
,

1059 *
d©a
, 
max_Àn
);

1061 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1062 
d2i_of_void
 *
d2i
,

1063 (*
‰ì_func
Ë(
OPENSSL_BLOCK
));

1064 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1065 **
buf
, *
Àn
);

1066 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1067 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1068 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1069 
ASN1_OCTET_STRING
 **
o˘
);

1071 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1072 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1073 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1074 
o˘
))

	)

1076 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

1077 
ASN1_OCTET_STRING
 **
o˘
);

1079 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1080 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1081 
ASN1_STRING_gë_deÁu…_mask
();

1082 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1083 
öf‹m
, 
mask
);

1084 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1085 
öf‹m
, 
mask
,

1086 
mösize
, 
maxsize
);

1088 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1089 c⁄° *
ö
, 
öÀn
,

1090 
öf‹m
, 
nid
);

1091 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1092 
ASN1_STRING_TABLE_add
(, , , , );

1093 
ASN1_STRING_TABLE_˛ónup
();

1098 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1099 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1100 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

1101 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1102 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1103 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

1104 c⁄° 
ASN1_ITEM
 *
ô
);

1106 
ASN1_add_oid_moduÀ
();

1108 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1109 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1114 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1116 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1118 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1120 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1122 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1124 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1126 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1128 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1130 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1132 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1133 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1134 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1135 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1136 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1137 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1138 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1139 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1140 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1141 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1142 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1143 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1144 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1145 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1147 
BIO_METHOD
 *
BIO_f_a¢1
();

1149 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1151 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1152 c⁄° 
ASN1_ITEM
 *
ô
);

1153 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1154 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

1155 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1156 
˘y≥_nid
, 
ec⁄t_nid
,

1157 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

1158 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1159 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1160 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1168 
ERR_lﬂd_ASN1_°rögs
();

1173 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1174 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1175 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1176 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1177 
	#ASN1_F_APPEND_EXP
 176

	)

1178 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1179 
	#ASN1_F_ASN1_CB
 177

	)

1180 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1181 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1182 
	#ASN1_F_ASN1_COLLECT
 106

	)

1183 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1184 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1185 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1186 
	#ASN1_F_ASN1_DIGEST
 184

	)

1187 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1188 
	#ASN1_F_ASN1_DUP
 111

	)

1189 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1190 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1191 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1192 
	#ASN1_F_ASN1_FIND_END
 190

	)

1193 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1194 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1195 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1196 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1197 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1198 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1199 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1200 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1201 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1202 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1203 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1204 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1205 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1206 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1207 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1208 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1209 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1210 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1211 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1212 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1213 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1214 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1215 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1216 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1217 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1218 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1219 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1220 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1221 
	#ASN1_F_ASN1_SIGN
 128

	)

1222 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1223 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1224 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1225 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1226 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1227 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1228 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1229 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1230 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1231 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1232 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1233 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1234 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1235 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1236 
	#ASN1_F_ASN1_VERIFY
 137

	)

1237 
	#ASN1_F_B64_READ_ASN1
 209

	)

1238 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1239 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1240 
	#ASN1_F_BITSTR_CB
 180

	)

1241 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1242 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1243 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1244 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1245 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1246 
	#ASN1_F_COLLECT_DATA
 140

	)

1247 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1248 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1249 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1250 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1251 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1252 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1253 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1254 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1255 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1256 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1257 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1258 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1259 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1260 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1261 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1262 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1263 
	#ASN1_F_D2I_RSA_NET
 200

	)

1264 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1265 
	#ASN1_F_D2I_X509
 156

	)

1266 
	#ASN1_F_D2I_X509_CINF
 157

	)

1267 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1268 
	#ASN1_F_DO_BUF
 221

	)

1269 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1270 
	#ASN1_F_I2D_ASN1_BOOLEAN
 223

	)

1271 
	#ASN1_F_I2D_ASN1_OBJECT
 222

	)

1272 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1273 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1274 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1275 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1276 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1277 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1278 
	#ASN1_F_I2D_RSA_NET
 162

	)

1279 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1280 
	#ASN1_F_LONG_C2I
 166

	)

1281 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1282 
	#ASN1_F_PARSE_TAGGING
 182

	)

1283 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1284 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1285 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1286 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1287 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1288 
	#ASN1_F_SMIME_TEXT
 213

	)

1289 
	#ASN1_F_X509_CINF_NEW
 168

	)

1290 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1291 
	#ASN1_F_X509_INFO_NEW
 170

	)

1292 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1293 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1294 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1295 
	#ASN1_F_X509_NEW
 172

	)

1296 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1299 
	#ASN1_R_ADDING_OBJECT
 171

	)

1300 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1301 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1302 
	#ASN1_R_AUX_ERROR
 100

	)

1303 
	#ASN1_R_BAD_CLASS
 101

	)

1304 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1305 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1306 
	#ASN1_R_BAD_TAG
 104

	)

1307 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1308 
	#ASN1_R_BN_LIB
 105

	)

1309 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1310 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1311 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1312 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1313 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1314 
	#ASN1_R_DECODE_ERROR
 110

	)

1315 
	#ASN1_R_DECODING_ERROR
 111

	)

1316 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1317 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1318 
	#ASN1_R_ENCODE_ERROR
 112

	)

1319 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1320 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1321 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1322 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1323 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1324 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1325 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1326 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1327 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1328 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1329 
	#ASN1_R_FIELD_MISSING
 121

	)

1330 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1331 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1332 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1333 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1334 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1335 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1336 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1337 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1338 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1339 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1340 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1341 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1342 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1343 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1344 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1345 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1346 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1347 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1348 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1349 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1350 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1351 
	#ASN1_R_INVALID_DIGIT
 130

	)

1352 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1353 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1354 
	#ASN1_R_INVALID_NUMBER
 187

	)

1355 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1356 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1357 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1358 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1359 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1360 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1361 
	#ASN1_R_LENGTH_ERROR
 136

	)

1362 
	#ASN1_R_LIST_ERROR
 188

	)

1363 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1364 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1365 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1366 
	#ASN1_R_MISSING_EOC
 137

	)

1367 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1368 
	#ASN1_R_MISSING_VALUE
 189

	)

1369 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1370 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1371 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1372 
	#ASN1_R_NESTED_TOO_DEEP
 219

	)

1373 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1374 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1375 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1376 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1377 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1378 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1379 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1380 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1381 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1382 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1383 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1384 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1385 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1386 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1387 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1388 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1389 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1390 
	#ASN1_R_SHORT_LINE
 150

	)

1391 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1392 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1393 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1394 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1395 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1396 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1397 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1398 
	#ASN1_R_TOO_LONG
 155

	)

1399 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1400 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 218

	)

1401 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1402 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1403 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1404 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1405 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1406 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1407 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1408 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1409 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1410 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1411 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1412 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1413 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1414 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1415 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1416 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1417 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1418 
	#ASN1_R_WRONG_TAG
 168

	)

1419 
	#ASN1_R_WRONG_TYPE
 169

	)

1421 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

8 #ifde‡ 
__˝lu•lus


13 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

14 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

15 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

16 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

18 c⁄° 
os_tﬂscii
[256];

19 c⁄° 
os_t€bcdic
[256];

20 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

21 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

23 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

99 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


100 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

108 
POINT_CONVERSION_COMPRESSED
 = 2,

110 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

113 
POINT_CONVERSION_HYBRID
 = 6

114 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

116 
ec_mëhod_°
 
	tEC_METHOD
;

118 
ec_group_°


127 
	tEC_GROUP
;

129 
ec_poöt_°
 
	tEC_POINT
;

139 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

144 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

149 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

151 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


155 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

160 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

165 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

168 #i‚de‡
OPENSSL_NO_EC2M


176 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

188 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

193 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

198 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

205 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

212 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

218 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

224 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

234 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

235 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

241 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

247 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

255 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

263 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

264 
BN_CTX
 *
˘x
);

270 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

276 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

278 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

279 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

281 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

282 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

283 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

285 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

286 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

287 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

297 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

298 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

308 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

309 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

311 #i‚de‡
OPENSSL_NO_EC2M


320 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

321 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

331 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

332 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

338 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

345 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

352 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

360 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

375 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

376 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

377 #i‚de‡
OPENSSL_NO_EC2M


386 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

387 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

394 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

401 
nid
;

402 c⁄° *
commít
;

403 } 
	tEC_buûtö_curve
;

411 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

413 c⁄° *
EC_curve_nid2ni°
(
nid
);

414 
EC_curve_ni°2nid
(c⁄° *
«me
);

424 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

429 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

434 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

441 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

449 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

455 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

462 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

473 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

474 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

475 c⁄° 
BIGNUM
 *
y
, c⁄° BIGNUM *
z
,

476 
BN_CTX
 *
˘x
);

487 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

488 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

489 
BIGNUM
 *
y
, BIGNUM *
z
,

490 
BN_CTX
 *
˘x
);

500 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

501 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

502 
BN_CTX
 *
˘x
);

512 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

513 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

514 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

525 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

526 
y_bô
, 
BN_CTX
 *
˘x
);

527 #i‚de‡
OPENSSL_NO_EC2M


536 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

537 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

538 
BN_CTX
 *
˘x
);

548 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

549 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

550 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

561 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

562 
y_bô
, 
BN_CTX
 *
˘x
);

574 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

575 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

576 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

586 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

587 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

590 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

591 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

592 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

593 
EC_POINT
 *, 
BN_CTX
 *);

594 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

595 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

596 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

597 
EC_POINT
 *, 
BN_CTX
 *);

611 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

612 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

621 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

622 
BN_CTX
 *
˘x
);

630 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

637 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

645 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

646 
BN_CTX
 *
˘x
);

655 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

656 
BN_CTX
 *
˘x
);

658 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

659 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

660 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

672 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

673 
size_t
 
num
, c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

674 
BN_CTX
 *
˘x
);

685 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

686 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

693 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

699 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

709 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

710 #i‚de‡
OPENSSL_NO_EC2M


711 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

712 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

713 *
k2
, *
k3
);

716 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

718 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

720 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

721 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

723 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

724 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

725 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

726 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

727 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

728 (*)(
x
))

	)

730 #i‚de‡
OPENSSL_NO_BIO


731 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

733 #i‚de‡
OPENSSL_NO_FP_API


734 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

741 
ec_key_°
 
	tEC_KEY
;

744 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

745 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

748 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

749 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

754 
EC_KEY
 *
EC_KEY_√w
();

756 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

758 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

760 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

767 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

772 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

779 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

785 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

791 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

797 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

805 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

811 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

819 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

825 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

833 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

835 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

836 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

837 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

838 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

840 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *
key
,

841 *(*
dup_func
) (*),

842 (*
‰ì_func
) (*),

843 (*
˛ór_‰ì_func
) (*));

852 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

853 *(*
dup_func
) (*),

854 (*
‰ì_func
) (*),

855 (*
˛ór_‰ì_func
) (*));

857 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

865 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

871 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

877 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

886 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
,

887 
BIGNUM
 *
y
);

899 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

920 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

928 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

942 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

950 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

952 #i‚de‡
OPENSSL_NO_BIO


958 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

966 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

969 #i‚de‡
OPENSSL_NO_FP_API


975 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

983 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

987 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

989 #i‚de‡
__˝lu•lus


990 #i‡
deföed
(
__SUNPRO_C
)

991 #i‡
__SUNPRO_C
 >= 0x520

992 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

997 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

998 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

999 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1000 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

1002 
	#EVP_PKEY_CTX_£t_ec_∑øm_íc
(
˘x
, 
Êag
) \

1003 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1004 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1005 
EVP_PKEY_CTRL_EC_PARAM_ENC
, 
Êag
, 
NULL
)

	)

1007 
	#EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
˘x
, 
Êag
) \

1008 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1009 
EVP_PKEY_OP_DERIVE
, \

1010 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, 
Êag
, 
NULL
)

	)

1012 
	#EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
˘x
) \

1013 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1014 
EVP_PKEY_OP_DERIVE
, \

1015 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, -2, 
NULL
)

	)

1017 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
˘x
, 
kdf
) \

1018 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1019 
EVP_PKEY_OP_DERIVE
, \

1020 
EVP_PKEY_CTRL_EC_KDF_TYPE
, 
kdf
, 
NULL
)

	)

1022 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
˘x
) \

1023 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1024 
EVP_PKEY_OP_DERIVE
, \

1025 
EVP_PKEY_CTRL_EC_KDF_TYPE
, -2, 
NULL
)

	)

1027 
	#EVP_PKEY_CTX_£t_ecdh_kdf_md
(
˘x
, 
md
) \

1028 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1029 
EVP_PKEY_OP_DERIVE
, \

1030 
EVP_PKEY_CTRL_EC_KDF_MD
, 0, (*)
md
)

	)

1032 
	#EVP_PKEY_CTX_gë_ecdh_kdf_md
(
˘x
, 
pmd
) \

1033 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1034 
EVP_PKEY_OP_DERIVE
, \

1035 
EVP_PKEY_CTRL_GET_EC_KDF_MD
, 0, (*)
pmd
)

	)

1037 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
˘x
, 
Àn
) \

1038 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1039 
EVP_PKEY_OP_DERIVE
, \

1040 
EVP_PKEY_CTRL_EC_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

1042 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
˘x
, 
∂í
) \

1043 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1044 
EVP_PKEY_OP_DERIVE
, \

1045 
EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
, 0, (*)
∂í
)

	)

1047 
	#EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

1048 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1049 
EVP_PKEY_OP_DERIVE
, \

1050 
EVP_PKEY_CTRL_EC_KDF_UKM
, 
∂í
, (*)
p
)

	)

1052 
	#EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
˘x
, 
p
) \

1053 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1054 
EVP_PKEY_OP_DERIVE
, \

1055 
EVP_PKEY_CTRL_GET_EC_KDF_UKM
, 0, (*)
p
)

	)

1057 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

1058 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

1059 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

1060 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

1061 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

1062 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

1063 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

1064 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

1065 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

1066 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

1068 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

1069 
	#EVP_PKEY_ECDH_KDF_X9_62
 2

	)

1077 
ERR_lﬂd_EC_°rögs
();

1082 
	#EC_F_BN_TO_FELEM
 224

	)

1083 
	#EC_F_COMPUTE_WNAF
 143

	)

1084 
	#EC_F_D2I_ECPARAMETERS
 144

	)

1085 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

1086 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

1087 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

1088 
	#EC_F_ECDH_CMS_DECRYPT
 238

	)

1089 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 239

	)

1090 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

1091 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

1092 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

1093 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

1094 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

1095 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

1096 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

1097 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

1098 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

1099 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

1100 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

1101 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 240

	)

1102 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 243

	)

1103 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 241

	)

1104 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 244

	)

1105 
	#EC_F_ECP_NISTZ256_SET_WORDS
 245

	)

1106 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 242

	)

1107 
	#EC_F_ECP_NIST_MOD_192
 203

	)

1108 
	#EC_F_ECP_NIST_MOD_224
 204

	)

1109 
	#EC_F_ECP_NIST_MOD_256
 205

	)

1110 
	#EC_F_ECP_NIST_MOD_521
 206

	)

1111 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

1112 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

1113 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

1114 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

1115 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

1116 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

1117 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

1118 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

1119 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1120 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1121 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1122 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1123 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1124 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1125 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1126 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1127 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1128 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1129 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1130 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1131 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1132 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1133 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1134 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1135 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1136 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1137 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1138 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1139 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1140 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1141 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1142 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1143 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1144 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1145 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1146 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1147 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1148 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1149 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1150 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1151 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1152 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1153 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1154 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1155 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1156 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1157 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1158 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1159 
	#EC_F_EC_GROUP_CHECK
 170

	)

1160 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1161 
	#EC_F_EC_GROUP_COPY
 106

	)

1162 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1163 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1164 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1165 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1166 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1167 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1168 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1169 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1170 
	#EC_F_EC_GROUP_NEW
 108

	)

1171 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1172 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1173 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1174 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1175 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1176 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1177 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1178 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1179 
	#EC_F_EC_KEY_COPY
 178

	)

1180 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1181 
	#EC_F_EC_KEY_NEW
 182

	)

1182 
	#EC_F_EC_KEY_PRINT
 180

	)

1183 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1184 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1185 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1186 
	#EC_F_EC_POINT_ADD
 112

	)

1187 
	#EC_F_EC_POINT_CMP
 113

	)

1188 
	#EC_F_EC_POINT_COPY
 114

	)

1189 
	#EC_F_EC_POINT_DBL
 115

	)

1190 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1191 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1192 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1193 
	#EC_F_EC_POINT_INVERT
 210

	)

1194 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1195 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1196 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1197 
	#EC_F_EC_POINT_MUL
 184

	)

1198 
	#EC_F_EC_POINT_NEW
 121

	)

1199 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1200 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1201 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1202 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1203 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1204 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1205 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1206 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1207 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1208 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1209 
	#EC_F_EC_WNAF_MUL
 187

	)

1210 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1211 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1212 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1213 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1214 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1215 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1216 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1217 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1218 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1219 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1220 
	#EC_F_PKEY_EC_CTRL
 197

	)

1221 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1222 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1223 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1224 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1225 
	#EC_F_PKEY_EC_SIGN
 218

	)

1228 
	#EC_R_ASN1_ERROR
 115

	)

1229 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1230 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1231 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1232 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1233 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1234 
	#EC_R_DECODE_ERROR
 142

	)

1235 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1236 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1237 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1238 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1239 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1240 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1241 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1242 
	#EC_R_INVALID_ARGUMENT
 112

	)

1243 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1244 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1245 
	#EC_R_INVALID_CURVE
 141

	)

1246 
	#EC_R_INVALID_DIGEST
 151

	)

1247 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1248 
	#EC_R_INVALID_ENCODING
 102

	)

1249 
	#EC_R_INVALID_FIELD
 103

	)

1250 
	#EC_R_INVALID_FORM
 104

	)

1251 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1252 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1253 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1254 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1255 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

1256 
	#EC_R_KEYS_NOT_SET
 140

	)

1257 
	#EC_R_MISSING_PARAMETERS
 124

	)

1258 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1259 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1260 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1261 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1262 
	#EC_R_NOT_INITIALIZED
 111

	)

1263 
	#EC_R_NO_FIELD_MOD
 133

	)

1264 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1265 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1266 
	#EC_R_PEER_KEY_ERROR
 149

	)

1267 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1268 
	#EC_R_POINT_AT_INFINITY
 106

	)

1269 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1270 
	#EC_R_SHARED_INFO_ERROR
 150

	)

1271 
	#EC_R_SLOT_FULL
 108

	)

1272 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1273 
	#EC_R_UNDEFINED_ORDER
 128

	)

1274 
	#EC_R_UNKNOWN_COFACTOR
 152

	)

1275 
	#EC_R_UNKNOWN_GROUP
 129

	)

1276 
	#EC_R_UNKNOWN_ORDER
 114

	)

1277 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1278 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1279 
	#EC_R_WRONG_ORDER
 130

	)

1281 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

397 
	#LN_id_pbkdf2
 "PBKDF2"

	)

398 
	#NID_id_pbkdf2
 69

	)

399 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

401 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

402 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

403 
	#NID_dßWôhSHA1_2
 70

	)

405 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

407 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

408 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

409 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

410 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

412 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

413 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

414 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

415 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

417 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

418 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

419 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

420 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

422 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

423 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

424 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

425 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

427 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

428 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

429 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

430 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

432 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

433 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

434 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

435 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

437 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

438 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

439 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

440 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

442 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

443 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

444 
	#NID_√tsˇ≥_commít
 78

	)

445 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

447 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

448 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

449 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

450 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

452 
	#SN_desx_cbc
 "DESX-CBC"

	)

453 
	#LN_desx_cbc
 "desx-cbc"

	)

454 
	#NID_desx_cbc
 80

	)

456 
	#SN_id_˚
 "id-˚"

	)

457 
	#NID_id_˚
 81

	)

458 
	#OBJ_id_˚
 2L,5L,29L

	)

460 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

461 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

462 
	#NID_subje˘_key_idítifõr
 82

	)

463 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

465 
	#SN_key_ußge
 "keyUßge"

	)

466 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

467 
	#NID_key_ußge
 83

	)

468 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

470 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

471 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

472 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

473 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

475 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

476 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

477 
	#NID_subje˘_Æt_«me
 85

	)

478 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

480 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

481 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

482 
	#NID_issuî_Æt_«me
 86

	)

483 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

485 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

486 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

487 
	#NID_basic_c⁄°øöts
 87

	)

488 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

490 
	#SN_¸l_numbî
 "¸lNumbî"

	)

491 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

492 
	#NID_¸l_numbî
 88

	)

493 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

495 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

496 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

497 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

498 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

500 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

501 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

502 
	#NID_auth‹ôy_key_idítifõr
 90

	)

503 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

505 
	#SN_bf_cbc
 "BF-CBC"

	)

506 
	#LN_bf_cbc
 "bf-cbc"

	)

507 
	#NID_bf_cbc
 91

	)

508 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

510 
	#SN_bf_ecb
 "BF-ECB"

	)

511 
	#LN_bf_ecb
 "bf-ecb"

	)

512 
	#NID_bf_ecb
 92

	)

514 
	#SN_bf_cfb64
 "BF-CFB"

	)

515 
	#LN_bf_cfb64
 "bf-cfb"

	)

516 
	#NID_bf_cfb64
 93

	)

518 
	#SN_bf_ofb64
 "BF-OFB"

	)

519 
	#LN_bf_ofb64
 "bf-ofb"

	)

520 
	#NID_bf_ofb64
 94

	)

522 
	#SN_mdc2
 "MDC2"

	)

523 
	#LN_mdc2
 "mdc2"

	)

524 
	#NID_mdc2
 95

	)

525 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

528 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

529 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

530 
	#NID_mdc2WôhRSA
 96

	)

531 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

533 
	#SN_rc4_40
 "RC4-40"

	)

534 
	#LN_rc4_40
 "rc4-40"

	)

535 
	#NID_rc4_40
 97

	)

537 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

538 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

539 
	#NID_rc2_40_cbc
 98

	)

541 
	#SN_givíName
 "G"

	)

542 
	#LN_givíName
 "givíName"

	)

543 
	#NID_givíName
 99

	)

544 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

546 
	#SN_su∫ame
 "S"

	)

547 
	#LN_su∫ame
 "su∫ame"

	)

548 
	#NID_su∫ame
 100

	)

549 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

551 
	#SN_öôüls
 "I"

	)

552 
	#LN_öôüls
 "öôüls"

	)

553 
	#NID_öôüls
 101

	)

554 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

556 
	#SN_uniqueIdítifõr
 "UID"

	)

557 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

558 
	#NID_uniqueIdítifõr
 102

	)

559 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

561 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

562 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

563 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

564 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

566 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

567 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

568 
	#NID_md5WôhRSA
 104

	)

569 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

571 
	#SN_£rülNumbî
 "SN"

	)

572 
	#LN_£rülNumbî
 "£rülNumbî"

	)

573 
	#NID_£rülNumbî
 105

	)

574 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

576 
	#SN_tôÀ
 "T"

	)

577 
	#LN_tôÀ
 "tôÀ"

	)

578 
	#NID_tôÀ
 106

	)

579 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

581 
	#SN_des¸ùti⁄
 "D"

	)

582 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

583 
	#NID_des¸ùti⁄
 107

	)

584 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

587 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

588 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

589 
	#NID_ˇ°5_cbc
 108

	)

590 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

592 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

593 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

594 
	#NID_ˇ°5_ecb
 109

	)

596 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

597 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

598 
	#NID_ˇ°5_cfb64
 110

	)

600 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

601 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

602 
	#NID_ˇ°5_ofb64
 111

	)

604 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

605 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

606 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

613 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

614 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

615 
	#NID_dßWôhSHA1
 113

	)

616 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

618 
	#NID_md5_sha1
 114

	)

619 
	#SN_md5_sha1
 "MD5-SHA1"

	)

620 
	#LN_md5_sha1
 "md5-sha1"

	)

622 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

623 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

624 
	#NID_sha1WôhRSA
 115

	)

625 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

627 
	#SN_dß
 "DSA"

	)

628 
	#LN_dß
 "dßEn¸y±i⁄"

	)

629 
	#NID_dß
 116

	)

630 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

632 
	#SN_rùemd160
 "RIPEMD160"

	)

633 
	#LN_rùemd160
 "rùemd160"

	)

634 
	#NID_rùemd160
 117

	)

635 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

641 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

642 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

643 
	#NID_rùemd160WôhRSA
 119

	)

644 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

655 
	#SN_rc5_cbc
 "RC5-CBC"

	)

656 
	#LN_rc5_cbc
 "rc5-cbc"

	)

657 
	#NID_rc5_cbc
 120

	)

658 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

660 
	#SN_rc5_ecb
 "RC5-ECB"

	)

661 
	#LN_rc5_ecb
 "rc5-ecb"

	)

662 
	#NID_rc5_ecb
 121

	)

664 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

665 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

666 
	#NID_rc5_cfb64
 122

	)

668 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

669 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

670 
	#NID_rc5_ofb64
 123

	)

672 
	#SN_æe_com¥essi⁄
 "RLE"

	)

673 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

674 
	#NID_æe_com¥essi⁄
 124

	)

675 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

677 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

678 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

679 
	#NID_zlib_com¥essi⁄
 125

	)

680 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

682 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

683 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

684 
	#NID_ext_key_ußge
 126

	)

685 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

687 
	#SN_id_pkix
 "PKIX"

	)

688 
	#NID_id_pkix
 127

	)

689 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

691 
	#SN_id_kp
 "id-kp"

	)

692 
	#NID_id_kp
 128

	)

693 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

697 
	#SN_£rvî_auth
 "£rvîAuth"

	)

698 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

699 
	#NID_£rvî_auth
 129

	)

700 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

702 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

703 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

704 
	#NID_˛õ¡_auth
 130

	)

705 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

707 
	#SN_code_sign
 "codeSignög"

	)

708 
	#LN_code_sign
 "CodêSignög"

	)

709 
	#NID_code_sign
 131

	)

710 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

712 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

713 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

714 
	#NID_emaû_¥Ÿe˘
 132

	)

715 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

717 
	#SN_time_°amp
 "timeSèmpög"

	)

718 
	#LN_time_°amp
 "TimêSèmpög"

	)

719 
	#NID_time_°amp
 133

	)

720 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

724 
	#SN_ms_code_öd
 "msCodeInd"

	)

725 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

726 
	#NID_ms_code_öd
 134

	)

727 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

729 
	#SN_ms_code_com
 "msCodeCom"

	)

730 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

731 
	#NID_ms_code_com
 135

	)

732 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

734 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

735 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

736 
	#NID_ms_˘l_sign
 136

	)

737 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

739 
	#SN_ms_sgc
 "msSGC"

	)

740 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

741 
	#NID_ms_sgc
 137

	)

742 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

744 
	#SN_ms_efs
 "msEFS"

	)

745 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

746 
	#NID_ms_efs
 138

	)

747 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

751 
	#SN_ns_sgc
 "nsSGC"

	)

752 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

753 
	#NID_ns_sgc
 139

	)

754 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

756 
	#SN_dñè_¸l
 "dñèCRL"

	)

757 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

758 
	#NID_dñè_¸l
 140

	)

759 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

761 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

762 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

763 
	#NID_¸l_ªas⁄
 141

	)

764 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

766 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

767 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

768 
	#NID_övÆidôy_d©e
 142

	)

769 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

771 
	#SN_sx√t
 "SXNëID"

	)

772 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

773 
	#NID_sx√t
 143

	)

774 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

778 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

779 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

781 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

782 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

784 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

786 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

787 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

788 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

789 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

791 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

792 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

794 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

796 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

797 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

798 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

799 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

801 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

802 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

804 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

806 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

807 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

808 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

809 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

811 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

813 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

815 
	#LN_keyBag
 "keyBag"

	)

816 
	#NID_keyBag
 150

	)

817 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

819 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

820 
	#NID_pkcs8ShroudedKeyBag
 151

	)

821 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

823 
	#LN_˚πBag
 "˚πBag"

	)

824 
	#NID_˚πBag
 152

	)

825 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

827 
	#LN_¸lBag
 "¸lBag"

	)

828 
	#NID_¸lBag
 153

	)

829 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

831 
	#LN_£¸ëBag
 "£¸ëBag"

	)

832 
	#NID_£¸ëBag
 154

	)

833 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

835 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

836 
	#NID_ß„C⁄ã¡sBag
 155

	)

837 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

839 
	#LN_‰õndlyName
 "‰õndlyName"

	)

840 
	#NID_‰õndlyName
 156

	)

841 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

843 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

844 
	#NID_loˇlKeyID
 157

	)

845 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

847 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

849 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

850 
	#NID_x509Cîtifiˇã
 158

	)

851 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

853 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

854 
	#NID_sdsiCîtifiˇã
 159

	)

855 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

857 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

859 
	#LN_x509Cæ
 "x509Cæ"

	)

860 
	#NID_x509Cæ
 160

	)

861 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

865 
	#LN_pbes2
 "PBES2"

	)

866 
	#NID_pbes2
 161

	)

867 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

869 
	#LN_pbmac1
 "PBMAC1"

	)

870 
	#NID_pbmac1
 162

	)

871 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

873 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

874 
	#NID_hmacWôhSHA1
 163

	)

875 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

879 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

880 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

881 
	#NID_id_qt_˝s
 164

	)

882 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

884 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

885 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

886 
	#NID_id_qt_unŸi˚
 165

	)

887 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

889 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

890 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

891 
	#NID_rc2_64_cbc
 166

	)

893 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

894 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

895 
	#NID_SMIMEC≠abûôõs
 167

	)

896 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

898 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

899 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

901 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

903 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

904 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

905 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

906 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

908 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

909 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

910 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

911 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

915 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

916 
	#SN_ms_ext_ªq
 "msExtReq"

	)

917 
	#NID_ms_ext_ªq
 171

	)

918 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

920 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

921 
	#SN_ext_ªq
 "extReq"

	)

922 
	#NID_ext_ªq
 172

	)

923 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

925 
	#SN_«me
 "«me"

	)

926 
	#LN_«me
 "«me"

	)

927 
	#NID_«me
 173

	)

928 
	#OBJ_«me
 
OBJ_X509
,41L

	)

930 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

931 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

932 
	#NID_dnQuÆifõr
 174

	)

933 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

935 
	#SN_id_≥
 "id-≥"

	)

936 
	#NID_id_≥
 175

	)

937 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

939 
	#SN_id_ad
 "id-ad"

	)

940 
	#NID_id_ad
 176

	)

941 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

943 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

944 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

945 
	#NID_öfo_ac˚ss
 177

	)

946 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

948 
	#SN_ad_OCSP
 "OCSP"

	)

949 
	#LN_ad_OCSP
 "OCSP"

	)

950 
	#NID_ad_OCSP
 178

	)

951 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

953 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

954 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

955 
	#NID_ad_ˇ_issuîs
 179

	)

956 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

958 
	#SN_OCSP_sign
 "OCSPSignög"

	)

959 
	#LN_OCSP_sign
 "OCSP Signög"

	)

960 
	#NID_OCSP_sign
 180

	)

961 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

964 
	~<›ís¶/bio.h
>

965 
	~<›ís¶/a¢1.h
>

967 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

968 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

969 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

970 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

971 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

972 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

974 
	#OBJ_NAME_ALIAS
 0x8000

	)

976 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

977 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

980 #ifde‡ 
__˝lu•lus


984 
	sobj_«me_°
 {

985 
ty≥
;

986 
Æüs
;

987 c⁄° *
«me
;

988 c⁄° *
d©a
;

989 } 
	tOBJ_NAME
;

991 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

993 
OBJ_NAME_öô
();

994 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

995 (*
cmp_func
) (const *, const *),

996 (*
‰ì_func
) (const *, , const *));

997 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

998 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

999 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

1000 
OBJ_NAME_˛ónup
(
ty≥
);

1001 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

1002 *
¨g
);

1003 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

1004 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

1005 *
¨g
);

1007 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1008 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

1009 c⁄° *
OBJ_nid2 
(
n
);

1010 c⁄° *
OBJ_nid2¢
(
n
);

1011 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1012 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1013 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1014 
OBJ_txt2nid
(c⁄° *
s
);

1015 
OBJ_ 2nid
(c⁄° *
s
);

1016 
OBJ_¢2nid
(c⁄° *
s
);

1017 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

1018 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

1019 (*
cmp
) (const *, const *));

1020 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

1021 
size
,

1022 (*
cmp
) (const *, const *),

1023 
Êags
);

1025 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1026 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1027 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1028 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1030 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1031 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1032 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1033 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1062 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1063 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1065 
ty≥1
 c⁄° *
a
 = 
a_
; \

1066 
ty≥2
 c⁄° *
b
 = 
b_
; \

1067  
nm
##
	`_cmp
(
a
,
b
); \

1069 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1071  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1072 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1074 
	`dummy_¥ŸŸy≥
()

	)

1076 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1077 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1079 
ty≥1
 c⁄° *
a
 = 
a_
; \

1080 
ty≥2
 c⁄° *
b
 = 
b_
; \

1081  
nm
##
	`_cmp
(
a
,
b
); \

1083 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1085  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1086 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1088 
	`dummy_¥ŸŸy≥
()

	)

1090 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1091 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1092 
num
,(
ty≥2
), \

1093 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1094 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1095 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1097 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1098 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1099 
num
,(
ty≥2
), \

1100 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1101 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1102 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1104 
OBJ_√w_nid
(
num
);

1105 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1106 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

1107 
OBJ_˛ónup
();

1108 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1110 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1111 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1112 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1113 
OBJ_sigid_‰ì
();

1115 
obj_˛ónup_de„r
;

1116 
check_de„r
(
nid
);

1123 
ERR_lﬂd_OBJ_°rögs
();

1128 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1129 
	#OBJ_F_OBJ_CREATE
 100

	)

1130 
	#OBJ_F_OBJ_DUP
 101

	)

1131 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1132 
	#OBJ_F_OBJ_NID2LN
 102

	)

1133 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1134 
	#OBJ_F_OBJ_NID2SN
 104

	)

1137 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1138 
	#OBJ_R_UNKNOWN_NID
 101

	)

1140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

4 #ifde‡ 
__˝lu•lus


33 
	#OPENSSL_VERSION_NUMBER
 0x1000215fL

	)

34 #ifde‡
OPENSSL_FIPS


35 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.2u-fù† 20 De¯2019"

	)

37 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.2u 20 De¯2019"

	)

39 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

90 
	#SHLIB_VERSION_HISTORY
 ""

	)

91 
	#SHLIB_VERSION_NUMBER
 "1.0.2"

	)

94 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°
 {

87 
X509_NAME
 *
issuî
;

88 
ASN1_INTEGER
 *
£rül
;

89 } 
	tPKCS7_ISSUER_AND_SERIAL
;

91 
	spkcs7_sig√r_öfo_°
 {

92 
ASN1_INTEGER
 *
vîsi⁄
;

93 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

94 
X509_ALGOR
 *
dige°_Æg
;

95 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

96 
X509_ALGOR
 *
dige°_íc_Æg
;

97 
ASN1_OCTET_STRING
 *
íc_dige°
;

98 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

100 
EVP_PKEY
 *
pkey
;

101 } 
	tPKCS7_SIGNER_INFO
;

103 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

104 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

106 
	spkcs7_ªcù_öfo_°
 {

107 
ASN1_INTEGER
 *
vîsi⁄
;

108 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

109 
X509_ALGOR
 *
key_íc_Æg‹
;

110 
ASN1_OCTET_STRING
 *
íc_key
;

111 
X509
 *
˚π
;

112 } 
	tPKCS7_RECIP_INFO
;

114 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

115 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

117 
	spkcs7_sig√d_°
 {

118 
ASN1_INTEGER
 *
vîsi⁄
;

119 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

120 
STACK_OF
(
X509
Ë*
˚π
;

121 
STACK_OF
(
X509_CRL
Ë*
¸l
;

122 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

123 
pkcs7_°
 *
c⁄ã¡s
;

124 } 
	tPKCS7_SIGNED
;

130 
	spkcs7_íc_c⁄ã¡_°
 {

131 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

132 
X509_ALGOR
 *
Æg‹ôhm
;

133 
ASN1_OCTET_STRING
 *
íc_d©a
;

134 c⁄° 
EVP_CIPHER
 *
cùhî
;

135 } 
	tPKCS7_ENC_CONTENT
;

137 
	spkcs7_ívñ›ed_°
 {

138 
ASN1_INTEGER
 *
vîsi⁄
;

139 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

140 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

141 } 
	tPKCS7_ENVELOPE
;

143 
	spkcs7_sig√d™dívñ›ed_°
 {

144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

146 
STACK_OF
(
X509
Ë*
˚π
;

147 
STACK_OF
(
X509_CRL
Ë*
¸l
;

148 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

149 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

150 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

151 } 
	tPKCS7_SIGN_ENVELOPE
;

153 
	spkcs7_dige°_°
 {

154 
ASN1_INTEGER
 *
vîsi⁄
;

155 
X509_ALGOR
 *
md
;

156 
pkcs7_°
 *
c⁄ã¡s
;

157 
ASN1_OCTET_STRING
 *
dige°
;

158 } 
	tPKCS7_DIGEST
;

160 
	spkcs7_í¸y±ed_°
 {

161 
ASN1_INTEGER
 *
vîsi⁄
;

162 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

163 } 
	tPKCS7_ENCRYPT
;

165 
	spkcs7_°
 {

170 *
a¢1
;

171 
Àngth
;

172 
	#PKCS7_S_HEADER
 0

	)

173 
	#PKCS7_S_BODY
 1

	)

174 
	#PKCS7_S_TAIL
 2

	)

175 
°©e
;

176 
dëached
;

177 
ASN1_OBJECT
 *
ty≥
;

184 *
±r
;

186 
ASN1_OCTET_STRING
 *
d©a
;

188 
PKCS7_SIGNED
 *
sign
;

190 
PKCS7_ENVELOPE
 *
ívñ›ed
;

192 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

194 
PKCS7_DIGEST
 *
dige°
;

196 
PKCS7_ENCRYPT
 *
í¸y±ed
;

198 
ASN1_TYPE
 *
Ÿhî
;

199 } 
d
;

200 } 
	tPKCS7
;

202 
DECLARE_STACK_OF
(
PKCS7
)

203 
DECLARE_ASN1_SET_OF
(
PKCS7
)

204 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

206 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

207 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

209 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

210 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

212 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

213 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

214 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

215 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

216 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

217 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

218 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

220 
	#PKCS7_£t_dëached
(
p
,
v
) \

221 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

222 
	#PKCS7_gë_dëached
(
p
) \

223 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

225 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

229 
	#PKCS7_TEXT
 0x1

	)

230 
	#PKCS7_NOCERTS
 0x2

	)

231 
	#PKCS7_NOSIGS
 0x4

	)

232 
	#PKCS7_NOCHAIN
 0x8

	)

233 
	#PKCS7_NOINTERN
 0x10

	)

234 
	#PKCS7_NOVERIFY
 0x20

	)

235 
	#PKCS7_DETACHED
 0x40

	)

236 
	#PKCS7_BINARY
 0x80

	)

237 
	#PKCS7_NOATTR
 0x100

	)

238 
	#PKCS7_NOSMIMECAP
 0x200

	)

239 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

240 
	#PKCS7_CRLFEOL
 0x800

	)

241 
	#PKCS7_STREAM
 0x1000

	)

242 
	#PKCS7_NOCRL
 0x2000

	)

243 
	#PKCS7_PARTIAL
 0x4000

	)

244 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

248 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

249 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

250 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

251 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

252 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

253 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

254 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

255 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

256 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

258 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

260 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

261 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

262 *
Àn
);

263 #i‚de‡
OPENSSL_NO_FP_API


264 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

265 
i2d_PKCS7_Â
(
FILE
 *
Â
, 
PKCS7
 *
p7
);

267 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

268 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

269 
i2d_PKCS7_bio
(
BIO
 *
bp
, 
PKCS7
 *
p7
);

270 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

271 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

273 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

274 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

275 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

276 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

277 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

278 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

280 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

281 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

283 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

284 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

286 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

287 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

289 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

291 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

292 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

293 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

294 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

295 c⁄° 
EVP_MD
 *
dg°
);

296 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

297 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

298 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

299 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

300 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

301 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

302 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

303 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

304 
X509
 *
x509
);

306 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

307 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

308 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

310 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

311 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

312 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

313 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

314 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

316 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

317 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

318 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

319 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

320 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

321 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

322 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

323 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

325 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

326 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

327 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

328 *
d©a
);

329 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

330 *
vÆue
);

331 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

332 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

333 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

334 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

335 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

336 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

338 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

339 
BIO
 *
d©a
, 
Êags
);

341 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

342 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

343 c⁄° 
EVP_MD
 *
md
, 
Êags
);

345 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

346 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

347 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

348 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

349 
Êags
);

350 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

351 
Êags
);

352 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

353 
Êags
);

355 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

356 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

357 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

358 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

360 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

361 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

362 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

363 c⁄° *
md
, 
mdÀn
);

365 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

366 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

368 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

375 
ERR_lﬂd_PKCS7_°rögs
();

380 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

381 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

382 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

383 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

384 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

385 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

386 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

387 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

388 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

389 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

390 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

391 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

392 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

393 
	#PKCS7_F_PKCS7_CTRL
 104

	)

394 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

395 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

396 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

397 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

398 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

399 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

400 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

401 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

402 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

403 
	#PKCS7_F_PKCS7_FINAL
 134

	)

404 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

405 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

406 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

407 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

408 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

409 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

410 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

411 
	#PKCS7_F_PKCS7_SIGN
 116

	)

412 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

413 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

414 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

415 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

416 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

417 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

418 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

419 
	#PKCS7_F_SMIME_TEXT
 123

	)

422 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

423 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

424 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

425 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

426 
	#PKCS7_R_CTRL_ERROR
 152

	)

427 
	#PKCS7_R_DECODE_ERROR
 130

	)

428 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

429 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

430 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

431 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

432 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

433 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

434 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

435 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

436 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

437 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

438 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

439 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

440 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

441 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

442 
	#PKCS7_R_NO_CONTENT
 122

	)

443 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

444 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

445 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

446 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

447 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

448 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

449 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

450 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

451 
	#PKCS7_R_NO_SIGNERS
 142

	)

452 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

453 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

454 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

455 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

456 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

457 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

458 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

459 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

460 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

461 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

462 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

463 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

464 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

465 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

466 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

467 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

468 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

469 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

470 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

471 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

472 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

473 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

474 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

475 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

476 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

478 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 #ifde‡ 
__˝lu•lus


70 
_pqueue
 *
	tpqueue
;

72 
	s_pôem
 {

73 
¥i‹ôy
[8];

74 *
d©a
;

75 
_pôem
 *
√xt
;

76 } 
	tpôem
;

78 
_pôem
 *
	tpôî©‹
;

80 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

81 
pôem_‰ì
(
pôem
 *
ôem
);

83 
pqueue
 
pqueue_√w
();

84 
pqueue_‰ì
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

87 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

88 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

90 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

91 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

93 
pqueue_¥öt
(
pqueue
 
pq
);

94 
pqueue_size
(
pqueue
 
pq
);

96 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°
 {

101 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

102 
SHA_LONG
 
Nl
, 
Nh
;

103 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

104 
num
;

105 } 
	tSHA_CTX
;

107 #i‚de‡
OPENSSL_NO_SHA0


108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

111 
SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

114 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

117 #i‚de‡
OPENSSL_NO_SHA1


118 #ifde‡
OPENSSL_FIPS


119 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

121 
SHA1_Inô
(
SHA_CTX
 *
c
);

122 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

123 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

124 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

125 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

128 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

131 
	#SHA224_DIGEST_LENGTH
 28

	)

132 
	#SHA256_DIGEST_LENGTH
 32

	)

134 
	sSHA256°©e_°
 {

135 
SHA_LONG
 
h
[8];

136 
SHA_LONG
 
Nl
, 
Nh
;

137 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

138 
num
, 
md_Àn
;

139 } 
	tSHA256_CTX
;

141 #i‚de‡
OPENSSL_NO_SHA256


142 #ifde‡
OPENSSL_FIPS


143 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

144 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

146 
SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

148 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

149 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

150 
SHA256_Inô
(
SHA256_CTX
 *
c
);

151 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

152 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

153 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

154 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

157 
	#SHA384_DIGEST_LENGTH
 48

	)

158 
	#SHA512_DIGEST_LENGTH
 64

	)

160 #i‚de‡
OPENSSL_NO_SHA512


171 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°
 {

184 
SHA_LONG64
 
h
[8];

185 
SHA_LONG64
 
Nl
, 
Nh
;

187 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

188 
p
[
SHA512_CBLOCK
];

189 } 
u
;

190 
num
, 
md_Àn
;

191 } 
	tSHA512_CTX
;

194 #i‚de‡
OPENSSL_NO_SHA512


195 #ifde‡
OPENSSL_FIPS


196 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

197 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

199 
SHA384_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

201 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

202 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

203 
SHA512_Inô
(
SHA512_CTX
 *
c
);

204 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

205 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

206 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

207 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

210 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

67 #i‚de‡
HEADER_X509_VFY_H


68 
	#HEADER_X509_VFY_H


	)

70 
	~<›ís¶/›ís¶c⁄f.h
>

71 #i‚de‡
OPENSSL_NO_LHASH


72 
	~<›ís¶/lhash.h
>

74 
	~<›ís¶/bio.h
>

75 
	~<›ís¶/¸y±o.h
>

76 
	~<›ís¶/symhacks.h
>

78 #ifde‡ 
__˝lu•lus


84 
	sx509_hash_dú_°
 {

85 
num_dús
;

86 **
dús
;

87 *
dús_ty≥
;

88 
num_dús_Ælo˚d
;

89 } 
	tX509_HASH_DIR_CTX
;

92 
	sx509_fûe_°
 {

93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°
 {

125 
	gty≥
;

127 *
	g±r
;

128 
X509
 *
	gx509
;

129 
X509_CRL
 *
	g¸l
;

130 
EVP_PKEY
 *
	gpkey
;

131 } 
	gd©a
;

132 } 
	tX509_OBJECT
;

134 
x509_lookup_°
 
	tX509_LOOKUP
;

136 
DECLARE_STACK_OF
(
X509_LOOKUP
)

137 
DECLARE_STACK_OF
(
X509_OBJECT
)

140 
	sx509_lookup_mëhod_°
 {

141 c⁄° *
	g«me
;

142 (*
	g√w_ôem
Ë(
X509_LOOKUP
 *
	g˘x
);

143 (*
	g‰ì
Ë(
X509_LOOKUP
 *
	g˘x
);

144 (*
	göô
Ë(
X509_LOOKUP
 *
	g˘x
);

145 (*
	gshutdown
Ë(
X509_LOOKUP
 *
	g˘x
);

146 (*
	g˘æ
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gcmd
, c⁄° *
	g¨gc
, 
	g¨gl
,

147 **
	gªt
);

148 (*
	ggë_by_subje˘
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, 
X509_NAME
 *
	g«me
,

149 
X509_OBJECT
 *
	gªt
);

150 (*
	ggë_by_issuî_£rül
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, 
X509_NAME
 *
	g«me
,

151 
ASN1_INTEGER
 *
	g£rül
, 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_fögî¥öt
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
,

153 *
	gbyãs
, 
	gÀn
,

154 
X509_OBJECT
 *
	gªt
);

155 (*
	ggë_by_Æüs
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, *
	g°r
, 
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 } 
	tX509_LOOKUP_METHOD
;

159 
X509_VERIFY_PARAM_ID_°
 
	tX509_VERIFY_PARAM_ID
;

167 
	sX509_VERIFY_PARAM_°
 {

168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 
X509_VERIFY_PARAM_ID
 *
	gid
;

177 } 
	tX509_VERIFY_PARAM
;

179 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

186 
	sx509_°‹e_°
 {

188 
	gˇche
;

189 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

191 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
Ë(
X509_STORE_CTX
 *
	g˘x
);

197 (*
	gvîify_cb
Ë(
	gok
, 
X509_STORE_CTX
 *
	g˘x
);

199 (*
	ggë_issuî
Ë(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

201 (*
	gcheck_issued
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

203 (*
	gcheck_ªvoˇti⁄
Ë(
X509_STORE_CTX
 *
	g˘x
);

205 (*
	ggë_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

207 (*
	gcheck_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

209 (*
	g˚π_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

210 
STACK_OF
(
X509
Ë*(*
	glookup_˚πs
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

211 
STACK_OF
(
X509_CRL
Ë*(*
	glookup_¸ls
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

212 (*
	g˛ónup
Ë(
X509_STORE_CTX
 *
	g˘x
);

213 
CRYPTO_EX_DATA
 
	gex_d©a
;

214 
	gª„ªn˚s
;

217 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

219 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

220 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

223 
	sx509_lookup_°
 {

224 
	göô
;

225 
	gskù
;

226 
X509_LOOKUP_METHOD
 *
	gmëhod
;

227 *
	gmëhod_d©a
;

228 
X509_STORE
 *
	g°‹e_˘x
;

236 
	sx509_°‹e_˘x_°
 {

237 
X509_STORE
 *
	g˘x
;

239 
	gcuºít_mëhod
;

242 
X509
 *
	g˚π
;

244 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

246 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

247 
X509_VERIFY_PARAM
 *
	g∑øm
;

249 *
	gŸhî_˘x
;

252 (*
	gvîify
Ë(
X509_STORE_CTX
 *
	g˘x
);

254 (*
	gvîify_cb
Ë(
	gok
, 
X509_STORE_CTX
 *
	g˘x
);

256 (*
	ggë_issuî
Ë(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

258 (*
	gcheck_issued
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

260 (*
	gcheck_ªvoˇti⁄
Ë(
X509_STORE_CTX
 *
	g˘x
);

262 (*
	ggë_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

264 (*
	gcheck_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

266 (*
	g˚π_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

267 (*
	gcheck_pﬁicy
Ë(
X509_STORE_CTX
 *
	g˘x
);

268 
STACK_OF
(
X509
Ë*(*
	glookup_˚πs
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

269 
STACK_OF
(
X509_CRL
Ë*(*
	glookup_¸ls
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

270 (*
	g˛ónup
Ë(
X509_STORE_CTX
 *
	g˘x
);

273 
	gvÆid
;

275 
	gœ°_u¡ru°ed
;

277 
STACK_OF
(
X509
Ë*
	gchaö
;

279 
X509_POLICY_TREE
 *
	gåì
;

281 
	gex∂icô_pﬁicy
;

283 
	gîr‹_dïth
;

284 
	gîr‹
;

285 
X509
 *
	gcuºít_˚π
;

287 
X509
 *
	gcuºít_issuî
;

289 
X509_CRL
 *
	gcuºít_¸l
;

291 
	gcuºít_¸l_sc‹e
;

293 
	gcuºít_ªas⁄s
;

295 
X509_STORE_CTX
 *
	g∑ª¡
;

296 
CRYPTO_EX_DATA
 
	gex_d©a
;

299 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

301 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

302 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

303 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

304 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

306 
	#X509_L_FILE_LOAD
 1

	)

307 
	#X509_L_ADD_DIR
 2

	)

309 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

310 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

312 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

313 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

315 
	#X509_V_OK
 0

	)

316 
	#X509_V_ERR_UNSPECIFIED
 1

	)

318 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

319 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

320 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

321 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

322 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

323 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

324 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

325 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

326 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

327 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

328 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

329 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

330 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

331 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

332 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

333 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

334 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

335 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

336 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

337 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

338 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

339 
	#X509_V_ERR_CERT_REVOKED
 23

	)

340 
	#X509_V_ERR_INVALID_CA
 24

	)

341 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

342 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

343 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

344 
	#X509_V_ERR_CERT_REJECTED
 28

	)

346 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

347 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

348 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

349 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

351 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

352 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

353 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

354 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

355 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

356 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

357 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

358 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

360 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

361 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

362 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

363 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

364 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

366 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

368 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

369 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

370 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

371 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

372 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

373 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

374 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

375 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

378 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

379 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

380 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

381 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

382 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

383 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

386 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

387 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

388 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

391 
	#X509_V_ERR_INVALID_CALL
 65

	)

393 
	#X509_V_ERR_STORE_LOOKUP
 66

	)

395 
	#X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION
 67

	)

400 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

402 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

404 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

406 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

408 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

410 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

412 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

414 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

416 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

418 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

420 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

422 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

424 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

426 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

428 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

430 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

432 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

434 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

436 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

439 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

445 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

447 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

448 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

449 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

450 
	#X509_VP_FLAG_LOCKED
 0x8

	)

451 
	#X509_VP_FLAG_ONCE
 0x10

	)

454 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

455 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

456 | 
X509_V_FLAG_INHIBIT_ANY
 \

457 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

459 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

460 
X509_NAME
 *
«me
);

461 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

462 
ty≥
, 
X509_NAME
 *
«me
);

463 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

464 
X509_OBJECT
 *
x
);

465 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

466 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

467 
X509_STORE
 *
X509_STORE_√w
();

468 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

470 
STACK_OF
(
X509
Ë*
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

471 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

472 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

473 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

474 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

475 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

477 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

478 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

480 
X509_STORE_£t_lookup_¸ls_cb
(
X509_STORE
 *
˘x
,

481 
STACK_OF
(
X509_CRL
Ë*(*
cb
Ë(
X509_STORE_CTX


482 *
˘x
,

483 
X509_NAME
 *
nm
));

485 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

487 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

489 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

490 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

491 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

492 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

493 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

495 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(
X509_STORE_CTX
 *
˘x
);

497 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

499 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

500 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

502 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

503 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

505 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
ty≥
, 
X509_NAME
 *
«me
,

506 
X509_OBJECT
 *
ªt
);

508 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

509 
¨gl
, **
ªt
);

511 #i‚de‡
OPENSSL_NO_STDIO


512 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

513 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

514 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

517 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

518 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

519 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

520 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

521 
X509_OBJECT
 *
ªt
);

522 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

523 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

524 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

525 *
byãs
, 
Àn
,

526 
X509_OBJECT
 *
ªt
);

527 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
, 
Àn
,

528 
X509_OBJECT
 *
ªt
);

529 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

531 #i‚de‡
OPENSSL_NO_STDIO


532 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

533 c⁄° *
fûe
, c⁄° *
dú
);

534 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

537 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
,

538 
CRYPTO_EX_√w
 *
√w_func
,

539 
CRYPTO_EX_dup
 *
dup_func
,

540 
CRYPTO_EX_‰ì
 *
‰ì_func
);

541 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

542 *
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
);

543 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

544 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

545 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

546 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

547 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

548 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

549 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

550 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

551 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

552 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
, 
X509
 *
x
);

553 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

554 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

555 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

556 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

557 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

558 
puΩo£
, 
åu°
);

559 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

560 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

561 
time_t
 
t
);

562 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

563 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

565 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

566 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

568 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

569 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

570 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

574 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

575 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

576 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

577 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

578 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

579 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

580 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

581 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

582 
Êags
);

583 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

584 
Êags
);

585 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

586 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

587 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

588 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

589 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

590 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

591 
ASN1_OBJECT
 *
pﬁicy
);

592 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

593 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

595 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

596 c⁄° *
«me
, 
size_t
 
«mñí
);

597 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

598 c⁄° *
«me
, 
size_t
 
«mñí
);

599 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

600 
Êags
);

601 *
X509_VERIFY_PARAM_gë0_≥î«me
(
X509_VERIFY_PARAM
 *);

602 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

603 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

604 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

605 c⁄° *
ù
, 
size_t
 
ùÀn
);

606 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

607 c⁄° *
ùasc
);

609 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

610 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

612 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

613 
X509_VERIFY_PARAM_gë_cou¡
();

614 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

615 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

616 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

618 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

619 
STACK_OF
(
X509
Ë*
˚πs
,

620 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

622 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

624 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

625 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

626 
i
);

628 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_pﬁicõs
(const

629 
X509_POLICY_TREE


630 *
åì
);

632 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(const

633 
X509_POLICY_TREE


634 *
åì
);

636 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

638 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
,

639 
i
);

641 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

643 
STACK_OF
(
POLICYQUALINFO
Ë*
X509_pﬁicy_node_gë0_quÆifõrs
(const

644 
X509_POLICY_NODE


645 *
node
);

646 c⁄° 
X509_POLICY_NODE
 *
X509_pﬁicy_node_gë0_∑ª¡
(const X509_POLICY_NODE

647 *
node
);

649 #ifde‡ 
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

594 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

595 
	#NID_pS≥cifõd
 935

	)

596 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

598 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

599 
	#LN_rßsßPss
 "rßsßPss"

	)

600 
	#NID_rßsßPss
 912

	)

601 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

603 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

604 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

606 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

608 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

609 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

611 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

613 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

614 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

616 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

618 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

619 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

620 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

621 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

623 
	#SN_pkcs3
 "pkcs3"

	)

624 
	#NID_pkcs3
 27

	)

625 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

627 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

628 
	#NID_dhKeyAgªemít
 28

	)

629 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

631 
	#SN_pkcs5
 "pkcs5"

	)

632 
	#NID_pkcs5
 187

	)

633 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

635 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

636 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

637 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

638 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

640 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

641 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

642 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

643 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

645 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

646 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

648 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

650 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

651 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

652 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

653 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

655 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

656 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

657 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

658 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

660 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

661 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

662 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

663 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

665 
	#LN_id_pbkdf2
 "PBKDF2"

	)

666 
	#NID_id_pbkdf2
 69

	)

667 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

669 
	#LN_pbes2
 "PBES2"

	)

670 
	#NID_pbes2
 161

	)

671 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

673 
	#LN_pbmac1
 "PBMAC1"

	)

674 
	#NID_pbmac1
 162

	)

675 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

677 
	#SN_pkcs7
 "pkcs7"

	)

678 
	#NID_pkcs7
 20

	)

679 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

681 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

682 
	#NID_pkcs7_d©a
 21

	)

683 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

685 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

686 
	#NID_pkcs7_sig√d
 22

	)

687 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

689 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

690 
	#NID_pkcs7_ívñ›ed
 23

	)

691 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

693 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

694 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

695 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

697 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

698 
	#NID_pkcs7_dige°
 25

	)

699 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

701 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

702 
	#NID_pkcs7_í¸y±ed
 26

	)

703 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

705 
	#SN_pkcs9
 "pkcs9"

	)

706 
	#NID_pkcs9
 47

	)

707 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

709 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

710 
	#NID_pkcs9_emaûAddªss
 48

	)

711 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

713 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

714 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

715 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

717 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

718 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

719 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

721 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

722 
	#NID_pkcs9_mesßgeDige°
 51

	)

723 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

725 
	#LN_pkcs9_signögTime
 "signögTime"

	)

726 
	#NID_pkcs9_signögTime
 52

	)

727 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

729 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

730 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

731 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

733 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

734 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

735 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

737 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

738 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

739 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

741 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

742 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

743 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

745 
	#SN_ext_ªq
 "extReq"

	)

746 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

747 
	#NID_ext_ªq
 172

	)

748 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

750 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

751 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

752 
	#NID_SMIMEC≠abûôõs
 167

	)

753 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

755 
	#SN_SMIME
 "SMIME"

	)

756 
	#LN_SMIME
 "S/MIME"

	)

757 
	#NID_SMIME
 188

	)

758 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

760 
	#SN_id_smime_mod
 "id-smime-mod"

	)

761 
	#NID_id_smime_mod
 189

	)

762 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

764 
	#SN_id_smime_˘
 "id-smime-˘"

	)

765 
	#NID_id_smime_˘
 190

	)

766 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

768 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

769 
	#NID_id_smime_Ø
 191

	)

770 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

772 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

773 
	#NID_id_smime_Æg
 192

	)

774 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

776 
	#SN_id_smime_cd
 "id-smime-cd"

	)

777 
	#NID_id_smime_cd
 193

	)

778 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

780 
	#SN_id_smime_•q
 "id-smime-•q"

	)

781 
	#NID_id_smime_•q
 194

	)

782 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

784 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

785 
	#NID_id_smime_˘i
 195

	)

786 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

788 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

789 
	#NID_id_smime_mod_cms
 196

	)

790 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

792 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

793 
	#NID_id_smime_mod_ess
 197

	)

794 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

796 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

797 
	#NID_id_smime_mod_oid
 198

	)

798 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

800 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

801 
	#NID_id_smime_mod_msg_v3
 199

	)

802 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

804 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

805 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

806 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

808 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

809 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

810 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

812 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

813 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

814 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

816 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

817 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

818 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

820 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

821 
	#NID_id_smime_˘_ª˚ùt
 204

	)

822 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

824 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

825 
	#NID_id_smime_˘_authD©a
 205

	)

826 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

828 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

829 
	#NID_id_smime_˘_publishCît
 206

	)

830 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

832 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

833 
	#NID_id_smime_˘_TSTInfo
 207

	)

834 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

836 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

837 
	#NID_id_smime_˘_TDTInfo
 208

	)

838 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

840 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

841 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

842 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

844 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

845 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

846 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

848 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

849 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

850 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

852 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

853 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

854 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

856 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

857 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

858 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

860 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

861 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

862 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

864 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

865 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

866 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

868 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

869 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

870 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

872 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

873 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

874 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

876 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

877 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

878 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

880 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

881 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

882 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

884 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

885 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

886 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

888 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

889 
	#NID_id_smime_Ø_macVÆue
 219

	)

890 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

892 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

893 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

894 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

896 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

897 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

898 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

900 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

901 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

902 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

904 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

905 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

906 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

908 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

909 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

910 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

912 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

913 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

914 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

916 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

917 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

918 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

920 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

921 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

922 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

924 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

925 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

926 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

928 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

929 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

930 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

932 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

933 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

934 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

936 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

937 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

938 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

940 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

941 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

942 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

944 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

945 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

946 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

948 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

949 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

950 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

952 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

953 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

954 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

956 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

957 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

958 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

960 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

961 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

962 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

964 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

965 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

966 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

968 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

969 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

970 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

972 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

973 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

974 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

976 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

977 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

978 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

980 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

981 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

982 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

984 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

985 
	#NID_id_smime_Æg_3DESwøp
 243

	)

986 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

988 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

989 
	#NID_id_smime_Æg_RC2wøp
 244

	)

990 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

992 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

993 
	#NID_id_smime_Æg_ESDH
 245

	)

994 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

996 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

997 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

998 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1000 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1001 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1002 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1004 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1005 
	#NID_id_Æg_PWRI_KEK
 893

	)

1006 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1008 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1009 
	#NID_id_smime_cd_ld≠
 248

	)

1010 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1012 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1013 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1014 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1016 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1017 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1018 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1020 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1021 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1022 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1024 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1025 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1026 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1028 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1029 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1030 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1032 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1033 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1034 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1036 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1037 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1038 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1040 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1041 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1042 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1044 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1045 
	#NID_‰õndlyName
 156

	)

1046 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1048 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1049 
	#NID_loˇlKeyID
 157

	)

1050 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1052 
	#SN_ms_c•_«me
 "CSPName"

	)

1053 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1054 
	#NID_ms_c•_«me
 417

	)

1055 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1057 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1058 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1059 
	#NID_LoˇlKeySë
 856

	)

1060 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1062 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1064 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1065 
	#NID_x509Cîtifiˇã
 158

	)

1066 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1068 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1069 
	#NID_sdsiCîtifiˇã
 159

	)

1070 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1072 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1074 
	#LN_x509Cæ
 "x509Cæ"

	)

1075 
	#NID_x509Cæ
 160

	)

1076 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1078 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1080 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1082 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1083 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1085 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1087 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1088 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1089 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1090 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1092 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1093 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1095 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1097 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1098 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1100 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1102 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1103 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1105 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1107 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1108 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1109 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1110 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1112 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1114 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1116 
	#LN_keyBag
 "keyBag"

	)

1117 
	#NID_keyBag
 150

	)

1118 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1120 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1121 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1122 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1124 
	#LN_˚πBag
 "˚πBag"

	)

1125 
	#NID_˚πBag
 152

	)

1126 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1128 
	#LN_¸lBag
 "¸lBag"

	)

1129 
	#NID_¸lBag
 153

	)

1130 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1132 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1133 
	#NID_£¸ëBag
 154

	)

1134 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1136 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1137 
	#NID_ß„C⁄ã¡sBag
 155

	)

1138 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1140 
	#SN_md2
 "MD2"

	)

1141 
	#LN_md2
 "md2"

	)

1142 
	#NID_md2
 3

	)

1143 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1145 
	#SN_md4
 "MD4"

	)

1146 
	#LN_md4
 "md4"

	)

1147 
	#NID_md4
 257

	)

1148 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1150 
	#SN_md5
 "MD5"

	)

1151 
	#LN_md5
 "md5"

	)

1152 
	#NID_md5
 4

	)

1153 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1155 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1156 
	#LN_md5_sha1
 "md5-sha1"

	)

1157 
	#NID_md5_sha1
 114

	)

1159 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1160 
	#NID_hmacWôhMD5
 797

	)

1161 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1163 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1164 
	#NID_hmacWôhSHA1
 163

	)

1165 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1167 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1168 
	#NID_hmacWôhSHA224
 798

	)

1169 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1171 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1172 
	#NID_hmacWôhSHA256
 799

	)

1173 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1175 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1176 
	#NID_hmacWôhSHA384
 800

	)

1177 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1179 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1180 
	#NID_hmacWôhSHA512
 801

	)

1181 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1183 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1184 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1185 
	#NID_rc2_cbc
 37

	)

1186 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1188 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1189 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1190 
	#NID_rc2_ecb
 38

	)

1192 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1193 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1194 
	#NID_rc2_cfb64
 39

	)

1196 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1197 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1198 
	#NID_rc2_ofb64
 40

	)

1200 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1201 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1202 
	#NID_rc2_40_cbc
 98

	)

1204 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1205 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1206 
	#NID_rc2_64_cbc
 166

	)

1208 
	#SN_rc4
 "RC4"

	)

1209 
	#LN_rc4
 "rc4"

	)

1210 
	#NID_rc4
 5

	)

1211 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1213 
	#SN_rc4_40
 "RC4-40"

	)

1214 
	#LN_rc4_40
 "rc4-40"

	)

1215 
	#NID_rc4_40
 97

	)

1217 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1218 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1219 
	#NID_des_ede3_cbc
 44

	)

1220 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1222 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1223 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1224 
	#NID_rc5_cbc
 120

	)

1225 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1227 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1228 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1229 
	#NID_rc5_ecb
 121

	)

1231 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1232 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1233 
	#NID_rc5_cfb64
 122

	)

1235 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1236 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1237 
	#NID_rc5_ofb64
 123

	)

1239 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1240 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1241 
	#NID_ms_ext_ªq
 171

	)

1242 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1244 
	#SN_ms_code_öd
 "msCodeInd"

	)

1245 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1246 
	#NID_ms_code_öd
 134

	)

1247 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1249 
	#SN_ms_code_com
 "msCodeCom"

	)

1250 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1251 
	#NID_ms_code_com
 135

	)

1252 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1254 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1255 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1256 
	#NID_ms_˘l_sign
 136

	)

1257 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1259 
	#SN_ms_sgc
 "msSGC"

	)

1260 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1261 
	#NID_ms_sgc
 137

	)

1262 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1264 
	#SN_ms_efs
 "msEFS"

	)

1265 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1266 
	#NID_ms_efs
 138

	)

1267 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1269 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1270 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1271 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1272 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1274 
	#SN_ms_u≤
 "msUPN"

	)

1275 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1276 
	#NID_ms_u≤
 649

	)

1277 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1279 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1280 
	#LN_idó_cbc
 "idó-cbc"

	)

1281 
	#NID_idó_cbc
 34

	)

1282 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1284 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1285 
	#LN_idó_ecb
 "idó-ecb"

	)

1286 
	#NID_idó_ecb
 36

	)

1288 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1289 
	#LN_idó_cfb64
 "idó-cfb"

	)

1290 
	#NID_idó_cfb64
 35

	)

1292 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1293 
	#LN_idó_ofb64
 "idó-ofb"

	)

1294 
	#NID_idó_ofb64
 46

	)

1296 
	#SN_bf_cbc
 "BF-CBC"

	)

1297 
	#LN_bf_cbc
 "bf-cbc"

	)

1298 
	#NID_bf_cbc
 91

	)

1299 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1301 
	#SN_bf_ecb
 "BF-ECB"

	)

1302 
	#LN_bf_ecb
 "bf-ecb"

	)

1303 
	#NID_bf_ecb
 92

	)

1305 
	#SN_bf_cfb64
 "BF-CFB"

	)

1306 
	#LN_bf_cfb64
 "bf-cfb"

	)

1307 
	#NID_bf_cfb64
 93

	)

1309 
	#SN_bf_ofb64
 "BF-OFB"

	)

1310 
	#LN_bf_ofb64
 "bf-ofb"

	)

1311 
	#NID_bf_ofb64
 94

	)

1313 
	#SN_id_pkix
 "PKIX"

	)

1314 
	#NID_id_pkix
 127

	)

1315 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1317 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1318 
	#NID_id_pkix_mod
 258

	)

1319 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1321 
	#SN_id_≥
 "id-≥"

	)

1322 
	#NID_id_≥
 175

	)

1323 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1325 
	#SN_id_qt
 "id-qt"

	)

1326 
	#NID_id_qt
 259

	)

1327 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1329 
	#SN_id_kp
 "id-kp"

	)

1330 
	#NID_id_kp
 128

	)

1331 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1333 
	#SN_id_ô
 "id-ô"

	)

1334 
	#NID_id_ô
 260

	)

1335 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1337 
	#SN_id_pkù
 "id-pkù"

	)

1338 
	#NID_id_pkù
 261

	)

1339 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1341 
	#SN_id_Æg
 "id-Æg"

	)

1342 
	#NID_id_Æg
 262

	)

1343 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1345 
	#SN_id_cmc
 "id-cmc"

	)

1346 
	#NID_id_cmc
 263

	)

1347 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1349 
	#SN_id_⁄
 "id-⁄"

	)

1350 
	#NID_id_⁄
 264

	)

1351 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1353 
	#SN_id_pda
 "id-pda"

	)

1354 
	#NID_id_pda
 265

	)

1355 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1357 
	#SN_id_aˇ
 "id-aˇ"

	)

1358 
	#NID_id_aˇ
 266

	)

1359 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1361 
	#SN_id_qcs
 "id-qcs"

	)

1362 
	#NID_id_qcs
 267

	)

1363 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1365 
	#SN_id_c˘
 "id-c˘"

	)

1366 
	#NID_id_c˘
 268

	)

1367 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1369 
	#SN_id_µl
 "id-µl"

	)

1370 
	#NID_id_µl
 662

	)

1371 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1373 
	#SN_id_ad
 "id-ad"

	)

1374 
	#NID_id_ad
 176

	)

1375 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1377 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1378 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1379 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1381 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1382 
	#NID_id_pkix1_im∂icô_88
 270

	)

1383 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1385 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1386 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1387 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1389 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1390 
	#NID_id_pkix1_im∂icô_93
 272

	)

1391 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1393 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1394 
	#NID_id_mod_¸mf
 273

	)

1395 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1397 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1398 
	#NID_id_mod_cmc
 274

	)

1399 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1401 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1402 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1403 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1405 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1406 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1407 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1409 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1410 
	#NID_id_mod_cmp
 277

	)

1411 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1413 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1414 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1415 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1417 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1418 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1419 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1421 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1422 
	#NID_id_mod_©åibuã_˚π
 280

	)

1423 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1425 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1426 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1427 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1429 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1430 
	#NID_id_mod_oc•
 282

	)

1431 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1433 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1434 
	#NID_id_mod_dvcs
 283

	)

1435 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1437 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1438 
	#NID_id_mod_cmp2000
 284

	)

1439 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1441 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1442 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1443 
	#NID_öfo_ac˚ss
 177

	)

1444 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1446 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1447 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1448 
	#NID_biomëricInfo
 285

	)

1449 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1451 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1452 
	#NID_qcSèãmíts
 286

	)

1453 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1455 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1456 
	#NID_ac_audôE¡ôy
 287

	)

1457 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1459 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1460 
	#NID_ac_èrgëög
 288

	)

1461 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1463 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1464 
	#NID_ØC⁄åﬁs
 289

	)

1465 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1467 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1468 
	#NID_sbgp_ùAddrBlock
 290

	)

1469 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1471 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1472 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1473 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1475 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1476 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1477 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1479 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1480 
	#NID_ac_¥oxyög
 397

	)

1481 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1483 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1484 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1485 
	#NID_söfo_ac˚ss
 398

	)

1486 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1488 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1489 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1490 
	#NID_¥oxyCîtInfo
 663

	)

1491 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1493 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1494 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1495 
	#NID_id_qt_˝s
 164

	)

1496 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1498 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1499 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1500 
	#NID_id_qt_unŸi˚
 165

	)

1501 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1503 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1504 
	#NID_ãxtNŸi˚
 293

	)

1505 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1507 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1508 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1509 
	#NID_£rvî_auth
 129

	)

1510 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1512 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1513 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1514 
	#NID_˛õ¡_auth
 130

	)

1515 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1517 
	#SN_code_sign
 "codeSignög"

	)

1518 
	#LN_code_sign
 "CodêSignög"

	)

1519 
	#NID_code_sign
 131

	)

1520 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1522 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1523 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1524 
	#NID_emaû_¥Ÿe˘
 132

	)

1525 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1527 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1528 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1529 
	#NID_ù£cEndSy°em
 294

	)

1530 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1532 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1533 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1534 
	#NID_ù£cTu¬ñ
 295

	)

1535 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1537 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1538 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1539 
	#NID_ù£cU£r
 296

	)

1540 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1542 
	#SN_time_°amp
 "timeSèmpög"

	)

1543 
	#LN_time_°amp
 "TimêSèmpög"

	)

1544 
	#NID_time_°amp
 133

	)

1545 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1547 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1548 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1549 
	#NID_OCSP_sign
 180

	)

1550 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1552 
	#SN_dvcs
 "DVCS"

	)

1553 
	#LN_dvcs
 "dvcs"

	)

1554 
	#NID_dvcs
 297

	)

1555 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1557 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1558 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1559 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1561 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1562 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1563 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1565 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1566 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1567 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1569 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1570 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1571 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1573 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1574 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1575 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1577 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1578 
	#NID_id_ô_cuºítCRL
 303

	)

1579 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1581 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1582 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1583 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1585 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1586 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1587 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1589 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1590 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1591 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1593 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1594 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1595 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1597 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1598 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1599 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1601 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1602 
	#NID_id_ô_ªvPas•hø£
 309

	)

1603 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1605 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1606 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1607 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1609 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1610 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1611 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1613 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1614 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1615 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1617 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1618 
	#NID_id_ô_suµL™gTags
 784

	)

1619 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1621 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1622 
	#NID_id_ªgCål
 313

	)

1623 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1625 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1626 
	#NID_id_ªgInfo
 314

	)

1627 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1629 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1630 
	#NID_id_ªgCål_ªgTokí
 315

	)

1631 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1633 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1634 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1635 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1637 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1638 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1639 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1641 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1642 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1643 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1645 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1646 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1647 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1649 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1650 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1651 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1653 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1654 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1655 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1657 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1658 
	#NID_id_ªgInfo_˚πReq
 322

	)

1659 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1661 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1662 
	#NID_id_Æg_des40
 323

	)

1663 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1665 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1666 
	#NID_id_Æg_noSig«tuª
 324

	)

1667 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1669 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1670 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1671 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1673 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1674 
	#NID_id_Æg_dh_p›
 326

	)

1675 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1677 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1678 
	#NID_id_cmc_°©usInfo
 327

	)

1679 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1681 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1682 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1683 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1685 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1686 
	#NID_id_cmc_idítôyProof
 329

	)

1687 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1689 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1690 
	#NID_id_cmc_d©aRëu∫
 330

	)

1691 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1693 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1694 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1695 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1697 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1698 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1699 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1701 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1702 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1703 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1705 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1706 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1707 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1709 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1710 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1711 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1713 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1714 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1715 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1717 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1718 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1719 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1721 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1722 
	#NID_id_cmc_gëCît
 338

	)

1723 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1725 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1726 
	#NID_id_cmc_gëCRL
 339

	)

1727 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1729 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1730 
	#NID_id_cmc_ªvokeReque°
 340

	)

1731 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1733 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1734 
	#NID_id_cmc_ªgInfo
 341

	)

1735 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1737 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1738 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1739 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1741 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1742 
	#NID_id_cmc_quîyPídög
 343

	)

1743 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1745 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1746 
	#NID_id_cmc_p›LökR™dom
 344

	)

1747 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1749 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1750 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1751 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1753 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1754 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1755 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1757 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1758 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1759 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1761 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1762 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1763 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1764 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1766 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1767 
	#NID_id_pda_d©eOfBúth
 348

	)

1768 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1770 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1771 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1772 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1774 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1775 
	#NID_id_pda_gídî
 351

	)

1776 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1778 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1779 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1780 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1782 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1783 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1784 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1786 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1787 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1788 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1790 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1791 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1792 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1794 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1795 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1796 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1798 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1799 
	#NID_id_aˇ_group
 357

	)

1800 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1802 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1803 
	#NID_id_aˇ_rﬁe
 358

	)

1804 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1806 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1807 
	#NID_id_aˇ_ícAârs
 399

	)

1808 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1810 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1811 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1812 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1814 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1815 
	#NID_id_c˘_¸s
 360

	)

1816 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1818 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1819 
	#NID_id_c˘_PKID©a
 361

	)

1820 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1822 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1823 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1824 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1826 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1827 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1828 
	#NID_id_µl_™yL™guage
 664

	)

1829 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1831 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1832 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1833 
	#NID_id_µl_öhîôAŒ
 665

	)

1834 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1836 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1837 
	#LN_Indïídít
 "Indïídít"

	)

1838 
	#NID_Indïídít
 667

	)

1839 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1841 
	#SN_ad_OCSP
 "OCSP"

	)

1842 
	#LN_ad_OCSP
 "OCSP"

	)

1843 
	#NID_ad_OCSP
 178

	)

1844 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1846 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1847 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1848 
	#NID_ad_ˇ_issuîs
 179

	)

1849 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1851 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1852 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1853 
	#NID_ad_timeSèmpög
 363

	)

1854 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1856 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1857 
	#LN_ad_dvcs
 "ad dvcs"

	)

1858 
	#NID_ad_dvcs
 364

	)

1859 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1861 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1862 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1863 
	#NID_ˇRïosô‹y
 785

	)

1864 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1866 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1868 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1869 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1870 
	#NID_id_pkix_OCSP_basic
 365

	)

1871 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1873 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1874 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1875 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1876 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1878 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1879 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1880 
	#NID_id_pkix_OCSP_CæID
 367

	)

1881 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1883 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1884 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1885 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1886 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1888 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1889 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1890 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1891 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1893 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1894 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1895 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1896 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1898 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1899 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1900 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1901 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1903 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1904 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1905 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1906 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1908 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1909 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1910 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1912 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1913 
	#NID_id_pkix_OCSP_∑th
 374

	)

1914 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1916 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1917 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1918 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1919 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1921 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1922 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1923 
	#NID_Æg‹ôhm
 376

	)

1924 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1926 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1927 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1928 
	#NID_md5WôhRSA
 104

	)

1929 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1931 
	#SN_des_ecb
 "DES-ECB"

	)

1932 
	#LN_des_ecb
 "des-ecb"

	)

1933 
	#NID_des_ecb
 29

	)

1934 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1936 
	#SN_des_cbc
 "DES-CBC"

	)

1937 
	#LN_des_cbc
 "des-cbc"

	)

1938 
	#NID_des_cbc
 31

	)

1939 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1941 
	#SN_des_ofb64
 "DES-OFB"

	)

1942 
	#LN_des_ofb64
 "des-ofb"

	)

1943 
	#NID_des_ofb64
 45

	)

1944 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1946 
	#SN_des_cfb64
 "DES-CFB"

	)

1947 
	#LN_des_cfb64
 "des-cfb"

	)

1948 
	#NID_des_cfb64
 30

	)

1949 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1951 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1952 
	#NID_rßSig«tuª
 377

	)

1953 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1955 
	#SN_dß_2
 "DSA-ﬁd"

	)

1956 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1957 
	#NID_dß_2
 67

	)

1958 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1960 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1961 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1962 
	#NID_dßWôhSHA
 66

	)

1963 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1965 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1966 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1967 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1968 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1970 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1971 
	#LN_des_ede_ecb
 "des-ede"

	)

1972 
	#NID_des_ede_ecb
 32

	)

1973 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1975 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1976 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1977 
	#NID_des_ede3_ecb
 33

	)

1979 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1980 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1981 
	#NID_des_ede_cbc
 43

	)

1983 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1984 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1985 
	#NID_des_ede_cfb64
 60

	)

1987 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1988 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1989 
	#NID_des_ede3_cfb64
 61

	)

1991 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1992 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1993 
	#NID_des_ede_ofb64
 62

	)

1995 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1996 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1997 
	#NID_des_ede3_ofb64
 63

	)

1999 
	#SN_desx_cbc
 "DESX-CBC"

	)

2000 
	#LN_desx_cbc
 "desx-cbc"

	)

2001 
	#NID_desx_cbc
 80

	)

2003 
	#SN_sha
 "SHA"

	)

2004 
	#LN_sha
 "sha"

	)

2005 
	#NID_sha
 41

	)

2006 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2008 
	#SN_sha1
 "SHA1"

	)

2009 
	#LN_sha1
 "sha1"

	)

2010 
	#NID_sha1
 64

	)

2011 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2013 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2014 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2015 
	#NID_dßWôhSHA1_2
 70

	)

2016 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2018 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2019 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2020 
	#NID_sha1WôhRSA
 115

	)

2021 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2023 
	#SN_rùemd160
 "RIPEMD160"

	)

2024 
	#LN_rùemd160
 "rùemd160"

	)

2025 
	#NID_rùemd160
 117

	)

2026 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2028 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2029 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2030 
	#NID_rùemd160WôhRSA
 119

	)

2031 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2033 
	#SN_sx√t
 "SXNëID"

	)

2034 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2035 
	#NID_sx√t
 143

	)

2036 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2038 
	#SN_X500
 "X500"

	)

2039 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2040 
	#NID_X500
 11

	)

2041 
	#OBJ_X500
 2L,5L

	)

2043 
	#SN_X509
 "X509"

	)

2044 
	#NID_X509
 12

	)

2045 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2047 
	#SN_comm⁄Name
 "CN"

	)

2048 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2049 
	#NID_comm⁄Name
 13

	)

2050 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2052 
	#SN_su∫ame
 "SN"

	)

2053 
	#LN_su∫ame
 "su∫ame"

	)

2054 
	#NID_su∫ame
 100

	)

2055 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2057 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2058 
	#NID_£rülNumbî
 105

	)

2059 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2061 
	#SN_cou¡ryName
 "C"

	)

2062 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2063 
	#NID_cou¡ryName
 14

	)

2064 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2066 
	#SN_loˇlôyName
 "L"

	)

2067 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2068 
	#NID_loˇlôyName
 15

	)

2069 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2071 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2072 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2073 
	#NID_°©eOrProvö˚Name
 16

	)

2074 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2076 
	#SN_°ªëAddªss
 "°ªë"

	)

2077 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2078 
	#NID_°ªëAddªss
 660

	)

2079 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2081 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2082 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2083 
	#NID_‹g™iz©i⁄Name
 17

	)

2084 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2086 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2087 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2088 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2089 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2091 
	#SN_tôÀ
 "tôÀ"

	)

2092 
	#LN_tôÀ
 "tôÀ"

	)

2093 
	#NID_tôÀ
 106

	)

2094 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2096 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2097 
	#NID_des¸ùti⁄
 107

	)

2098 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2100 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2101 
	#NID_£¨chGuide
 859

	)

2102 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2104 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2105 
	#NID_busöessC©eg‹y
 860

	)

2106 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2108 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2109 
	#NID_po°ÆAddªss
 861

	)

2110 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2112 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2113 
	#NID_po°ÆCode
 661

	)

2114 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2116 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2117 
	#NID_po°Offi˚Box
 862

	)

2118 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2120 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2121 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2122 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2124 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2125 
	#NID_ãÀph⁄eNumbî
 864

	)

2126 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2128 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2129 
	#NID_ãÀxNumbî
 865

	)

2130 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2132 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2133 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2134 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2136 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2137 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2138 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2140 
	#LN_x121Addªss
 "x121Addªss"

	)

2141 
	#NID_x121Addªss
 868

	)

2142 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2144 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2145 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2146 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2148 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2149 
	#NID_ªgi°îedAddªss
 870

	)

2150 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2152 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2153 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2154 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2156 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2157 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2158 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2160 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2161 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2162 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2164 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2165 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2166 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2168 
	#SN_membî
 "membî"

	)

2169 
	#NID_membî
 875

	)

2170 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2172 
	#SN_ow√r
 "ow√r"

	)

2173 
	#NID_ow√r
 876

	)

2174 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2176 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2177 
	#NID_rﬁeOccu∑¡
 877

	)

2178 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2180 
	#SN_£eAlso
 "£eAlso"

	)

2181 
	#NID_£eAlso
 878

	)

2182 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2184 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2185 
	#NID_u£rPassw‹d
 879

	)

2186 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2188 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2189 
	#NID_u£rCîtifiˇã
 880

	)

2190 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2192 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2193 
	#NID_cACîtifiˇã
 881

	)

2194 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2196 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2197 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2198 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2200 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2201 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2202 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2204 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2205 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2206 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2208 
	#SN_«me
 "«me"

	)

2209 
	#LN_«me
 "«me"

	)

2210 
	#NID_«me
 173

	)

2211 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2213 
	#SN_givíName
 "GN"

	)

2214 
	#LN_givíName
 "givíName"

	)

2215 
	#NID_givíName
 99

	)

2216 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2218 
	#SN_öôüls
 "öôüls"

	)

2219 
	#LN_öôüls
 "öôüls"

	)

2220 
	#NID_öôüls
 101

	)

2221 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2223 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2224 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2225 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2227 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2228 
	#NID_x500UniqueIdítifõr
 503

	)

2229 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2231 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2232 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2233 
	#NID_dnQuÆifõr
 174

	)

2234 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2236 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2237 
	#NID_íh™˚dSórchGuide
 885

	)

2238 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2240 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2241 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2242 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2244 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2245 
	#NID_di°öguishedName
 887

	)

2246 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2248 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2249 
	#NID_uniqueMembî
 888

	)

2250 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2252 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2253 
	#NID_hou£Idítifõr
 889

	)

2254 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2256 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2257 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2258 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2260 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2261 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2262 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2264 
	#SN_dmdName
 "dmdName"

	)

2265 
	#NID_dmdName
 892

	)

2266 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2268 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2269 
	#NID_p£ud⁄ym
 510

	)

2270 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2272 
	#SN_rﬁe
 "rﬁe"

	)

2273 
	#LN_rﬁe
 "rﬁe"

	)

2274 
	#NID_rﬁe
 400

	)

2275 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2277 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2278 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2279 
	#NID_X500Æg‹ôhms
 378

	)

2280 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2282 
	#SN_rß
 "RSA"

	)

2283 
	#LN_rß
 "rß"

	)

2284 
	#NID_rß
 19

	)

2285 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2287 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2288 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2289 
	#NID_mdc2WôhRSA
 96

	)

2290 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2292 
	#SN_mdc2
 "MDC2"

	)

2293 
	#LN_mdc2
 "mdc2"

	)

2294 
	#NID_mdc2
 95

	)

2295 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2297 
	#SN_id_˚
 "id-˚"

	)

2298 
	#NID_id_˚
 81

	)

2299 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2301 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2302 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2303 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2304 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2306 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2307 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2308 
	#NID_subje˘_key_idítifõr
 82

	)

2309 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2311 
	#SN_key_ußge
 "keyUßge"

	)

2312 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2313 
	#NID_key_ußge
 83

	)

2314 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2316 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2317 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2318 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2319 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2321 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2322 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2323 
	#NID_subje˘_Æt_«me
 85

	)

2324 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2326 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2327 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2328 
	#NID_issuî_Æt_«me
 86

	)

2329 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2331 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2332 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2333 
	#NID_basic_c⁄°øöts
 87

	)

2334 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2336 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2337 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2338 
	#NID_¸l_numbî
 88

	)

2339 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2341 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2342 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2343 
	#NID_¸l_ªas⁄
 141

	)

2344 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2346 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2347 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2348 
	#NID_övÆidôy_d©e
 142

	)

2349 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2351 
	#SN_dñè_¸l
 "dñèCRL"

	)

2352 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2353 
	#NID_dñè_¸l
 140

	)

2354 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2356 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2357 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2358 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2359 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2361 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2362 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2363 
	#NID_˚πifiˇã_issuî
 771

	)

2364 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2366 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2367 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2368 
	#NID_«me_c⁄°øöts
 666

	)

2369 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2371 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2372 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2373 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2374 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2376 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2377 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2378 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2379 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2381 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2382 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2383 
	#NID_™y_pﬁicy
 746

	)

2384 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2386 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2387 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2388 
	#NID_pﬁicy_m≠pögs
 747

	)

2389 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2391 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2392 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2393 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2394 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2396 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2397 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2398 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2399 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2401 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2402 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2403 
	#NID_ext_key_ußge
 126

	)

2404 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2406 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2407 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2408 
	#NID_‰eshe°_¸l
 857

	)

2409 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2411 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2412 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2413 
	#NID_öhibô_™y_pﬁicy
 748

	)

2414 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2416 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2417 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2418 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2419 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2421 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2422 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2423 
	#NID_no_ªv_avaû
 403

	)

2424 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2426 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2427 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2428 
	#NID_™yExãndedKeyUßge
 910

	)

2429 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2431 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2432 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2433 
	#NID_√tsˇ≥
 57

	)

2434 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2436 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2437 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2438 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2439 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2441 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2442 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2443 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2444 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2446 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2447 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2448 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2449 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2451 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2452 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2453 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2454 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2456 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2459 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2461 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2462 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2463 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2464 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2466 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2467 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2468 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2469 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2471 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2472 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2473 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2474 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2476 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2477 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2478 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2479 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2481 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2482 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2483 
	#NID_√tsˇ≥_commít
 78

	)

2484 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2486 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2487 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2488 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2489 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2491 
	#SN_ns_sgc
 "nsSGC"

	)

2492 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2493 
	#NID_ns_sgc
 139

	)

2494 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2496 
	#SN_‹g
 "ORG"

	)

2497 
	#LN_‹g
 "‹g"

	)

2498 
	#NID_‹g
 379

	)

2499 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2501 
	#SN_dod
 "DOD"

	)

2502 
	#LN_dod
 "dod"

	)

2503 
	#NID_dod
 380

	)

2504 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2506 
	#SN_ü«
 "IANA"

	)

2507 
	#LN_ü«
 "ü«"

	)

2508 
	#NID_ü«
 381

	)

2509 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2511 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2513 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2514 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2515 
	#NID_Dúe˘‹y
 382

	)

2516 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2518 
	#SN_M™agemít
 "mgmt"

	)

2519 
	#LN_M™agemít
 "M™agemít"

	)

2520 
	#NID_M™agemít
 383

	)

2521 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2523 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2524 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2525 
	#NID_Ex≥rimíèl
 384

	)

2526 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2528 
	#SN_Priv©e
 "¥iv©e"

	)

2529 
	#LN_Priv©e
 "Priv©e"

	)

2530 
	#NID_Priv©e
 385

	)

2531 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2533 
	#SN_Securôy
 "£curôy"

	)

2534 
	#LN_Securôy
 "Securôy"

	)

2535 
	#NID_Securôy
 386

	)

2536 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2538 
	#SN_SNMPv2
 "¢mpv2"

	)

2539 
	#LN_SNMPv2
 "SNMPv2"

	)

2540 
	#NID_SNMPv2
 387

	)

2541 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2543 
	#LN_Maû
 "Maû"

	)

2544 
	#NID_Maû
 388

	)

2545 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2547 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2548 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2549 
	#NID_E¡î¥i£s
 389

	)

2550 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2552 
	#SN_dcObje˘
 "dcobje˘"

	)

2553 
	#LN_dcObje˘
 "dcObje˘"

	)

2554 
	#NID_dcObje˘
 390

	)

2555 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2557 
	#SN_mime_mhs
 "mime-mhs"

	)

2558 
	#LN_mime_mhs
 "MIME MHS"

	)

2559 
	#NID_mime_mhs
 504

	)

2560 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2562 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2563 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2564 
	#NID_mime_mhs_hódögs
 505

	)

2565 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2567 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2568 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2569 
	#NID_mime_mhs_bodõs
 506

	)

2570 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2572 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2573 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2574 
	#NID_id_hex_∑πül_mesßge
 507

	)

2575 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2577 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2578 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2579 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2580 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2582 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2583 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2584 
	#NID_æe_com¥essi⁄
 124

	)

2585 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2587 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2588 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2589 
	#NID_zlib_com¥essi⁄
 125

	)

2590 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2592 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2594 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2596 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2598 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2599 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2600 
	#NID_´s_128_ecb
 418

	)

2601 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2603 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2604 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2605 
	#NID_´s_128_cbc
 419

	)

2606 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2608 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2609 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2610 
	#NID_´s_128_ofb128
 420

	)

2611 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2613 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2614 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2615 
	#NID_´s_128_cfb128
 421

	)

2616 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2618 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2619 
	#NID_id_´s128_wøp
 788

	)

2620 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2622 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2623 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2624 
	#NID_´s_128_gcm
 895

	)

2625 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2627 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2628 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2629 
	#NID_´s_128_ccm
 896

	)

2630 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2632 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2633 
	#NID_id_´s128_wøp_∑d
 897

	)

2634 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2636 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2637 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2638 
	#NID_´s_192_ecb
 422

	)

2639 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2641 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2642 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2643 
	#NID_´s_192_cbc
 423

	)

2644 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2646 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2647 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2648 
	#NID_´s_192_ofb128
 424

	)

2649 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2651 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2652 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2653 
	#NID_´s_192_cfb128
 425

	)

2654 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2656 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2657 
	#NID_id_´s192_wøp
 789

	)

2658 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2660 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2661 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2662 
	#NID_´s_192_gcm
 898

	)

2663 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2665 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2666 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2667 
	#NID_´s_192_ccm
 899

	)

2668 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2670 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2671 
	#NID_id_´s192_wøp_∑d
 900

	)

2672 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2674 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2675 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2676 
	#NID_´s_256_ecb
 426

	)

2677 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2679 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2680 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2681 
	#NID_´s_256_cbc
 427

	)

2682 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2684 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2685 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2686 
	#NID_´s_256_ofb128
 428

	)

2687 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2689 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2690 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2691 
	#NID_´s_256_cfb128
 429

	)

2692 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2694 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2695 
	#NID_id_´s256_wøp
 790

	)

2696 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2698 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2699 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2700 
	#NID_´s_256_gcm
 901

	)

2701 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2703 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2704 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2705 
	#NID_´s_256_ccm
 902

	)

2706 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2708 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2709 
	#NID_id_´s256_wøp_∑d
 903

	)

2710 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2712 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2713 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2714 
	#NID_´s_128_cfb1
 650

	)

2716 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2717 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2718 
	#NID_´s_192_cfb1
 651

	)

2720 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2721 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2722 
	#NID_´s_256_cfb1
 652

	)

2724 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2725 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2726 
	#NID_´s_128_cfb8
 653

	)

2728 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2729 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2730 
	#NID_´s_192_cfb8
 654

	)

2732 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2733 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2734 
	#NID_´s_256_cfb8
 655

	)

2736 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2737 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2738 
	#NID_´s_128_˘r
 904

	)

2740 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2741 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2742 
	#NID_´s_192_˘r
 905

	)

2744 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2745 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2746 
	#NID_´s_256_˘r
 906

	)

2748 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2749 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2750 
	#NID_´s_128_xts
 913

	)

2752 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2753 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2754 
	#NID_´s_256_xts
 914

	)

2756 
	#SN_des_cfb1
 "DES-CFB1"

	)

2757 
	#LN_des_cfb1
 "des-cfb1"

	)

2758 
	#NID_des_cfb1
 656

	)

2760 
	#SN_des_cfb8
 "DES-CFB8"

	)

2761 
	#LN_des_cfb8
 "des-cfb8"

	)

2762 
	#NID_des_cfb8
 657

	)

2764 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2765 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2766 
	#NID_des_ede3_cfb1
 658

	)

2768 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2769 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2770 
	#NID_des_ede3_cfb8
 659

	)

2772 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2774 
	#SN_sha256
 "SHA256"

	)

2775 
	#LN_sha256
 "sha256"

	)

2776 
	#NID_sha256
 672

	)

2777 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2779 
	#SN_sha384
 "SHA384"

	)

2780 
	#LN_sha384
 "sha384"

	)

2781 
	#NID_sha384
 673

	)

2782 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2784 
	#SN_sha512
 "SHA512"

	)

2785 
	#LN_sha512
 "sha512"

	)

2786 
	#NID_sha512
 674

	)

2787 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2789 
	#SN_sha224
 "SHA224"

	)

2790 
	#LN_sha224
 "sha224"

	)

2791 
	#NID_sha224
 675

	)

2792 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2794 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2796 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2797 
	#NID_dß_wôh_SHA224
 802

	)

2798 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2800 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2801 
	#NID_dß_wôh_SHA256
 803

	)

2802 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2804 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2805 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2806 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2807 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2809 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2821 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2822 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2823 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2824 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2826 
	#SN_d©a
 "d©a"

	)

2827 
	#NID_d©a
 434

	)

2828 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2830 
	#SN_pss
 "pss"

	)

2831 
	#NID_pss
 435

	)

2832 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2834 
	#SN_u˛
 "u˛"

	)

2835 
	#NID_u˛
 436

	)

2836 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2838 
	#SN_pûŸ
 "pûŸ"

	)

2839 
	#NID_pûŸ
 437

	)

2840 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2842 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2843 
	#NID_pûŸAâribuãTy≥
 438

	)

2844 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2846 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2847 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2848 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2850 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2851 
	#NID_pûŸObje˘Cœss
 440

	)

2852 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2854 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2855 
	#NID_pûŸGroups
 441

	)

2856 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2858 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2859 
	#NID_iA5SåögSy¡ax
 442

	)

2860 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2862 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2863 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2864 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2866 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2867 
	#NID_pûŸObje˘
 444

	)

2868 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2870 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2871 
	#NID_pûŸPîs⁄
 445

	)

2872 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2874 
	#SN_accou¡
 "accou¡"

	)

2875 
	#NID_accou¡
 446

	)

2876 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2878 
	#SN_documít
 "documít"

	)

2879 
	#NID_documít
 447

	)

2880 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2882 
	#SN_room
 "room"

	)

2883 
	#NID_room
 448

	)

2884 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2886 
	#LN_documítSîõs
 "documítSîõs"

	)

2887 
	#NID_documítSîõs
 449

	)

2888 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2890 
	#SN_Domaö
 "domaö"

	)

2891 
	#LN_Domaö
 "Domaö"

	)

2892 
	#NID_Domaö
 392

	)

2893 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2895 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2896 
	#NID_rFC822loˇlP¨t
 450

	)

2897 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2899 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2900 
	#NID_dNSDomaö
 451

	)

2901 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2903 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2904 
	#NID_domaöRñ©edObje˘
 452

	)

2905 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2907 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2908 
	#NID_‰õndlyCou¡ry
 453

	)

2909 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2911 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2912 
	#NID_sim∂eSecurôyObje˘
 454

	)

2913 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2915 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2916 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2917 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2919 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2920 
	#NID_pûŸDSA
 456

	)

2921 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2923 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2924 
	#NID_quÆôyLabñÀdD©a
 457

	)

2925 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2927 
	#SN_u£rId
 "UID"

	)

2928 
	#LN_u£rId
 "u£rId"

	)

2929 
	#NID_u£rId
 458

	)

2930 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2932 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2933 
	#NID_ãxtEncodedORAddªss
 459

	)

2934 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2936 
	#SN_rfc822Maûbox
 "maû"

	)

2937 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2938 
	#NID_rfc822Maûbox
 460

	)

2939 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2941 
	#SN_öfo
 "öfo"

	)

2942 
	#NID_öfo
 461

	)

2943 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2945 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2946 
	#NID_ÁvourôeDrök
 462

	)

2947 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2949 
	#LN_roomNumbî
 "roomNumbî"

	)

2950 
	#NID_roomNumbî
 463

	)

2951 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2953 
	#SN_phŸo
 "phŸo"

	)

2954 
	#NID_phŸo
 464

	)

2955 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2957 
	#LN_u£rCœss
 "u£rCœss"

	)

2958 
	#NID_u£rCœss
 465

	)

2959 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2961 
	#SN_ho°
 "ho°"

	)

2962 
	#NID_ho°
 466

	)

2963 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2965 
	#SN_m™agî
 "m™agî"

	)

2966 
	#NID_m™agî
 467

	)

2967 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2969 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2970 
	#NID_documítIdítifõr
 468

	)

2971 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2973 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2974 
	#NID_documítTôÀ
 469

	)

2975 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2977 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2978 
	#NID_documítVîsi⁄
 470

	)

2979 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2981 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2982 
	#NID_documítAuth‹
 471

	)

2983 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2985 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2986 
	#NID_documítLoˇti⁄
 472

	)

2987 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2989 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2990 
	#NID_homeTñïh⁄eNumbî
 473

	)

2991 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2993 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2994 
	#NID_£¸ë¨y
 474

	)

2995 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2997 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2998 
	#NID_ŸhîMaûbox
 475

	)

2999 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3001 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3002 
	#NID_œ°ModifõdTime
 476

	)

3003 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3005 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3006 
	#NID_œ°ModifõdBy
 477

	)

3007 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3009 
	#SN_domaöComp⁄ít
 "DC"

	)

3010 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3011 
	#NID_domaöComp⁄ít
 391

	)

3012 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3014 
	#LN_aRec‹d
 "aRec‹d"

	)

3015 
	#NID_aRec‹d
 478

	)

3016 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3018 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3019 
	#NID_pûŸAâribuãTy≥27
 479

	)

3020 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3022 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3023 
	#NID_mXRec‹d
 480

	)

3024 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3026 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3027 
	#NID_nSRec‹d
 481

	)

3028 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3030 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3031 
	#NID_sOARec‹d
 482

	)

3032 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3034 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3035 
	#NID_cNAMERec‹d
 483

	)

3036 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3038 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3039 
	#NID_assocüãdDomaö
 484

	)

3040 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3042 
	#LN_assocüãdName
 "assocüãdName"

	)

3043 
	#NID_assocüãdName
 485

	)

3044 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3046 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3047 
	#NID_homePo°ÆAddªss
 486

	)

3048 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3050 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3051 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3052 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3054 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3055 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3056 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3058 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3059 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3060 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3062 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3063 
	#NID_‰õndlyCou¡ryName
 490

	)

3064 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3066 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3067 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3068 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3070 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3071 
	#NID_j™ëMaûbox
 492

	)

3072 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3074 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3075 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3076 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3078 
	#LN_buûdögName
 "buûdögName"

	)

3079 
	#NID_buûdögName
 494

	)

3080 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3082 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3083 
	#NID_dSAQuÆôy
 495

	)

3084 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3086 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3087 
	#NID_sögÀLevñQuÆôy
 496

	)

3088 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3090 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3091 
	#NID_subåìMöimumQuÆôy
 497

	)

3092 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3094 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3095 
	#NID_subåìMaximumQuÆôy
 498

	)

3096 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3098 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3099 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3100 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3102 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3103 
	#NID_dITRedúe˘
 500

	)

3104 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3106 
	#SN_audio
 "audio"

	)

3107 
	#NID_audio
 501

	)

3108 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3110 
	#LN_documítPublishî
 "documítPublishî"

	)

3111 
	#NID_documítPublishî
 502

	)

3112 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3114 
	#SN_id_£t
 "id-£t"

	)

3115 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3116 
	#NID_id_£t
 512

	)

3117 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3119 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3120 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3121 
	#NID_£t_˘y≥
 513

	)

3122 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3124 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3125 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3126 
	#NID_£t_msgExt
 514

	)

3127 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3129 
	#SN_£t_©å
 "£t-©å"

	)

3130 
	#NID_£t_©å
 515

	)

3131 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3133 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3134 
	#NID_£t_pﬁicy
 516

	)

3135 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3137 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3138 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3139 
	#NID_£t_˚πExt
 517

	)

3140 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3142 
	#SN_£t_bønd
 "£t-bønd"

	)

3143 
	#NID_£t_bønd
 518

	)

3144 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3146 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3147 
	#NID_£t˘_PAND©a
 519

	)

3148 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3150 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3151 
	#NID_£t˘_PANTokí
 520

	)

3152 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3154 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3155 
	#NID_£t˘_PANO∆y
 521

	)

3156 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3158 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3159 
	#NID_£t˘_OID©a
 522

	)

3160 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3162 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3163 
	#NID_£t˘_PI
 523

	)

3164 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3166 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3167 
	#NID_£t˘_PID©a
 524

	)

3168 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3170 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3171 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3172 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3174 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3175 
	#NID_£t˘_HODI≈ut
 526

	)

3176 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3178 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3179 
	#NID_£t˘_AuthResBaggage
 527

	)

3180 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3182 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3183 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3184 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3186 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3187 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3188 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3190 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3191 
	#NID_£t˘_C≠TokíSeq
 530

	)

3192 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3194 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3195 
	#NID_£t˘_PInôResD©a
 531

	)

3196 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3198 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3199 
	#NID_£t˘_PI_TBS
 532

	)

3200 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3202 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3203 
	#NID_£t˘_PResD©a
 533

	)

3204 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3206 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3207 
	#NID_£t˘_AuthReqTBS
 534

	)

3208 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3210 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3211 
	#NID_£t˘_AuthResTBS
 535

	)

3212 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3214 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3215 
	#NID_£t˘_AuthResTBSX
 536

	)

3216 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3218 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3219 
	#NID_£t˘_AuthTokíTBS
 537

	)

3220 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3222 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3223 
	#NID_£t˘_C≠TokíD©a
 538

	)

3224 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3226 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3227 
	#NID_£t˘_C≠TokíTBS
 539

	)

3228 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3230 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3231 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3232 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3234 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3235 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3236 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3238 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3239 
	#NID_£t˘_AuthRevResD©a
 542

	)

3240 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3242 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3243 
	#NID_£t˘_AuthRevResTBS
 543

	)

3244 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3246 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3247 
	#NID_£t˘_C≠ReqTBS
 544

	)

3248 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3250 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3251 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3252 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3254 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3255 
	#NID_£t˘_C≠ResD©a
 546

	)

3256 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3258 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3259 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3260 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3262 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3263 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3264 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3266 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3267 
	#NID_£t˘_C≠RevResD©a
 549

	)

3268 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3270 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3271 
	#NID_£t˘_CªdReqTBS
 550

	)

3272 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3274 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3275 
	#NID_£t˘_CªdReqTBSX
 551

	)

3276 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3278 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3279 
	#NID_£t˘_CªdResD©a
 552

	)

3280 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3282 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3283 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3284 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3286 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3287 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3288 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3290 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3291 
	#NID_£t˘_CªdRevResD©a
 555

	)

3292 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3294 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3295 
	#NID_£t˘_PCîtReqD©a
 556

	)

3296 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3298 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3299 
	#NID_£t˘_PCîtResTBS
 557

	)

3300 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3302 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3303 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3304 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3306 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3307 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3308 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3310 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3311 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3312 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3314 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3315 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3316 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3318 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3319 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3320 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3322 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3323 
	#NID_£t˘_CîtReqD©a
 563

	)

3324 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3326 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3327 
	#NID_£t˘_CîtReqTBS
 564

	)

3328 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3330 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3331 
	#NID_£t˘_CîtResD©a
 565

	)

3332 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3334 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3335 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3336 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3338 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3339 
	#NID_£t˘_Eº‹TBS
 567

	)

3340 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3342 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3343 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3344 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3346 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3347 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3348 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3350 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3351 
	#NID_£t˘_AuthReqTBE
 570

	)

3352 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3354 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3355 
	#NID_£t˘_AuthResTBE
 571

	)

3356 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3358 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3359 
	#NID_£t˘_AuthResTBEX
 572

	)

3360 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3362 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3363 
	#NID_£t˘_AuthTokíTBE
 573

	)

3364 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3366 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3367 
	#NID_£t˘_C≠TokíTBE
 574

	)

3368 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3370 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3371 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3372 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3374 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3375 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3376 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3378 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3379 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3380 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3382 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3383 
	#NID_£t˘_AuthRevResTBE
 578

	)

3384 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3386 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3387 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3388 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3390 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3391 
	#NID_£t˘_C≠ReqTBE
 580

	)

3392 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3394 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3395 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3396 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3398 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3399 
	#NID_£t˘_C≠ResTBE
 582

	)

3400 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3402 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3403 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3404 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3406 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3407 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3408 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3410 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3411 
	#NID_£t˘_C≠RevResTBE
 585

	)

3412 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3414 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3415 
	#NID_£t˘_CªdReqTBE
 586

	)

3416 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3418 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3419 
	#NID_£t˘_CªdReqTBEX
 587

	)

3420 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3422 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3423 
	#NID_£t˘_CªdResTBE
 588

	)

3424 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3426 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3427 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3428 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3430 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3431 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3432 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3434 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3435 
	#NID_£t˘_CªdRevResTBE
 591

	)

3436 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3438 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3439 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3440 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3442 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3443 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3444 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3446 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3447 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3448 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3450 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3451 
	#NID_£t˘_CîtReqTBE
 595

	)

3452 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3454 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3455 
	#NID_£t˘_CîtReqTBEX
 596

	)

3456 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3458 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3459 
	#NID_£t˘_CîtResTBE
 597

	)

3460 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3462 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3463 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3464 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3466 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3467 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3468 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3470 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3471 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3472 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3474 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3475 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3476 
	#NID_£ãxt_gíCry±
 601

	)

3477 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3479 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3480 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3481 
	#NID_£ãxt_miAuth
 602

	)

3482 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3484 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3485 
	#NID_£ãxt_pöSecuª
 603

	)

3486 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3488 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3489 
	#NID_£ãxt_pöAny
 604

	)

3490 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3492 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3493 
	#NID_£ãxt_åack2
 605

	)

3494 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3496 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3497 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3498 
	#NID_£ãxt_cv
 606

	)

3499 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3501 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3502 
	#NID_£t_pﬁicy_roŸ
 607

	)

3503 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3505 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3506 
	#NID_£tCext_hashedRoŸ
 608

	)

3507 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3509 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3510 
	#NID_£tCext_˚πTy≥
 609

	)

3511 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3513 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3514 
	#NID_£tCext_mîchD©a
 610

	)

3515 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3517 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3518 
	#NID_£tCext_cCîtRequúed
 611

	)

3519 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3521 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3522 
	#NID_£tCext_tu¬ñög
 612

	)

3523 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3525 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3526 
	#NID_£tCext_£tExt
 613

	)

3527 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3529 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3530 
	#NID_£tCext_£tQuÆf
 614

	)

3531 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3533 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3534 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3535 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3537 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3538 
	#NID_£tCext_TokíIdítifõr
 616

	)

3539 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3541 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3542 
	#NID_£tCext_Tøck2D©a
 617

	)

3543 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3545 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3546 
	#NID_£tCext_TokíTy≥
 618

	)

3547 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3549 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3550 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3551 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3553 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3554 
	#NID_£tAâr_Cît
 620

	)

3555 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3557 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3558 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3559 
	#NID_£tAâr_PGWYˇp
 621

	)

3560 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3562 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3563 
	#NID_£tAâr_TokíTy≥
 622

	)

3564 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3566 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3567 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3568 
	#NID_£tAâr_IssC≠
 623

	)

3569 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3571 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3572 
	#NID_£t_roŸKeyThumb
 624

	)

3573 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3575 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3576 
	#NID_£t_addPﬁicy
 625

	)

3577 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3579 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3580 
	#NID_£tAâr_Tokí_EMV
 626

	)

3581 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3583 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3584 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3585 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3587 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3588 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3589 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3591 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3592 
	#NID_£tAâr_IssC≠_T2
 629

	)

3593 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3595 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3596 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3597 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3599 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3600 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3601 
	#NID_£tAâr_GíCry±grm
 631

	)

3602 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3604 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3605 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3606 
	#NID_£tAâr_T2Enc
 632

	)

3607 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3609 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3610 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3611 
	#NID_£tAâr_T2˛óπxt
 633

	)

3612 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3614 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3615 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3616 
	#NID_£tAâr_TokICCsig
 634

	)

3617 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3619 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3620 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3621 
	#NID_£tAâr_SecDevSig
 635

	)

3622 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3624 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3625 
	#NID_£t_bønd_IATA_ATA
 636

	)

3626 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3628 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3629 
	#NID_£t_bønd_Döîs
 637

	)

3630 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3632 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3633 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3634 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3636 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3637 
	#NID_£t_bønd_JCB
 639

	)

3638 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3640 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3641 
	#NID_£t_bønd_Viß
 640

	)

3642 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3644 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3645 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3646 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3648 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3649 
	#NID_£t_bønd_Novus
 642

	)

3650 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3652 
	#SN_des_cdmf
 "DES-CDMF"

	)

3653 
	#LN_des_cdmf
 "des-cdmf"

	)

3654 
	#NID_des_cdmf
 643

	)

3655 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3657 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3658 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3659 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3661 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3662 
	#LN_ù£c3
 "ù£c3"

	)

3663 
	#NID_ù£c3
 749

	)

3665 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3666 
	#LN_ù£c4
 "ù£c4"

	)

3667 
	#NID_ù£c4
 750

	)

3669 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3670 
	#NID_whúÕoﬁ
 804

	)

3671 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3673 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3674 
	#NID_¸y±›ro
 805

	)

3675 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3677 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3678 
	#NID_¸y±ocom
 806

	)

3679 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3686 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3687 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3688 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3689 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3691 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3692 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3693 
	#NID_id_Go°R3411_94
 809

	)

3694 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3696 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3697 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3698 
	#NID_id_HMACGo°R3411_94
 810

	)

3699 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3701 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3702 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3703 
	#NID_id_Go°R3410_2001
 811

	)

3704 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3706 
	#SN_id_Go°R3410_94
 "go°94"

	)

3707 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3708 
	#NID_id_Go°R3410_94
 812

	)

3709 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3711 
	#SN_id_Go°28147_89
 "go°89"

	)

3712 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3713 
	#NID_id_Go°28147_89
 813

	)

3714 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3716 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3717 
	#NID_go°89_˙t
 814

	)

3719 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3720 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3721 
	#NID_id_Go°28147_89_MAC
 815

	)

3722 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3724 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3725 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3726 
	#NID_id_Go°R3411_94_¥f
 816

	)

3727 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3729 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3730 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3731 
	#NID_id_Go°R3410_2001DH
 817

	)

3732 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3734 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3735 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3736 
	#NID_id_Go°R3410_94DH
 818

	)

3737 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3739 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3740 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3741 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3743 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3744 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3745 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3747 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3748 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3749 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3751 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3752 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3753 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3755 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3756 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3757 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3759 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3760 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3761 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3763 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3764 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3765 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3767 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3768 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3769 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3771 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3772 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3773 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3775 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3776 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3777 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3779 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3780 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3781 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3783 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3784 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3785 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3787 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3788 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3789 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3791 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3792 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3793 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3795 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3796 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3797 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3799 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3800 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3801 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3803 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3804 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3805 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3807 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3808 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3809 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3811 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3812 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3813 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3815 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3816 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3817 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3819 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3820 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3821 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3823 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3824 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3825 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3827 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3828 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3829 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3831 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3832 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3833 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3835 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3836 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3837 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3839 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3840 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3841 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3843 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3844 
	#NID_id_Go°R3410_94_a
 845

	)

3845 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3847 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3848 
	#NID_id_Go°R3410_94_aBis
 846

	)

3849 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3851 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3852 
	#NID_id_Go°R3410_94_b
 847

	)

3853 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3855 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3856 
	#NID_id_Go°R3410_94_bBis
 848

	)

3857 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3859 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3860 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3861 
	#NID_id_Go°28147_89_cc
 849

	)

3862 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3864 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3865 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_94_cc
 850

	)

3867 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3869 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3870 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3871 
	#NID_id_Go°R3410_2001_cc
 851

	)

3872 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3879 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3880 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3881 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3882 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3884 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3885 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3886 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3887 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3889 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3890 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3891 
	#NID_ˇmñlü_128_cbc
 751

	)

3892 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3894 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3895 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3896 
	#NID_ˇmñlü_192_cbc
 752

	)

3897 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3899 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3900 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3901 
	#NID_ˇmñlü_256_cbc
 753

	)

3902 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3904 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3905 
	#NID_id_ˇmñlü128_wøp
 907

	)

3906 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3908 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3909 
	#NID_id_ˇmñlü192_wøp
 908

	)

3910 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3912 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3913 
	#NID_id_ˇmñlü256_wøp
 909

	)

3914 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3916 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3918 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3920 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3921 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3922 
	#NID_ˇmñlü_128_ecb
 754

	)

3923 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3925 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3926 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3927 
	#NID_ˇmñlü_128_ofb128
 766

	)

3928 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3930 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3931 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3932 
	#NID_ˇmñlü_128_cfb128
 757

	)

3933 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3935 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3936 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3937 
	#NID_ˇmñlü_192_ecb
 755

	)

3938 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3940 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3941 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3942 
	#NID_ˇmñlü_192_ofb128
 767

	)

3943 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3945 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3946 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3947 
	#NID_ˇmñlü_192_cfb128
 758

	)

3948 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3950 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3951 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3952 
	#NID_ˇmñlü_256_ecb
 756

	)

3953 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3955 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3956 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3957 
	#NID_ˇmñlü_256_ofb128
 768

	)

3958 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3960 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3961 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3962 
	#NID_ˇmñlü_256_cfb128
 759

	)

3963 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3965 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3966 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3967 
	#NID_ˇmñlü_128_cfb1
 760

	)

3969 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3970 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3971 
	#NID_ˇmñlü_192_cfb1
 761

	)

3973 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3974 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3975 
	#NID_ˇmñlü_256_cfb1
 762

	)

3977 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3978 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3979 
	#NID_ˇmñlü_128_cfb8
 763

	)

3981 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3982 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3983 
	#NID_ˇmñlü_192_cfb8
 764

	)

3985 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3986 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3987 
	#NID_ˇmñlü_256_cfb8
 765

	)

3989 
	#SN_kiß
 "KISA"

	)

3990 
	#LN_kiß
 "kiß"

	)

3991 
	#NID_kiß
 773

	)

3992 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3994 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3995 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3996 
	#NID_£ed_ecb
 776

	)

3997 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3999 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4000 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4001 
	#NID_£ed_cbc
 777

	)

4002 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4004 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4005 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4006 
	#NID_£ed_cfb128
 779

	)

4007 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4009 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4010 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4011 
	#NID_£ed_ofb128
 778

	)

4012 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4014 
	#SN_hmac
 "HMAC"

	)

4015 
	#LN_hmac
 "hmac"

	)

4016 
	#NID_hmac
 855

	)

4018 
	#SN_cmac
 "CMAC"

	)

4019 
	#LN_cmac
 "cmac"

	)

4020 
	#NID_cmac
 894

	)

4022 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4023 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4024 
	#NID_rc4_hmac_md5
 915

	)

4026 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4027 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4028 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4030 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4031 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4032 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4034 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4035 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4036 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4038 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4039 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4040 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4042 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4043 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4044 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4046 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4047 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4048 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4050 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4051 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4052 
	#NID_dhpubli˙umbî
 920

	)

4053 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4055 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4056 
	#NID_bøöpoﬁP160r1
 921

	)

4057 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4059 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4060 
	#NID_bøöpoﬁP160t1
 922

	)

4061 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4063 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4064 
	#NID_bøöpoﬁP192r1
 923

	)

4065 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4067 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4068 
	#NID_bøöpoﬁP192t1
 924

	)

4069 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4071 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4072 
	#NID_bøöpoﬁP224r1
 925

	)

4073 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4075 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4076 
	#NID_bøöpoﬁP224t1
 926

	)

4077 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4079 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4080 
	#NID_bøöpoﬁP256r1
 927

	)

4081 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4083 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4084 
	#NID_bøöpoﬁP256t1
 928

	)

4085 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4087 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4088 
	#NID_bøöpoﬁP320r1
 929

	)

4089 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4091 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4092 
	#NID_bøöpoﬁP320t1
 930

	)

4093 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4095 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4096 
	#NID_bøöpoﬁP384r1
 931

	)

4097 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4099 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4100 
	#NID_bøöpoﬁP384t1
 932

	)

4101 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4103 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4104 
	#NID_bøöpoﬁP512r1
 933

	)

4105 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4107 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4108 
	#NID_bøöpoﬁP512t1
 934

	)

4109 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4111 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4113 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4115 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4116 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4117 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4119 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4120 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4121 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4123 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4124 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4125 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4127 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4128 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4129 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4131 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4132 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4133 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4135 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4136 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4137 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4139 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4140 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4141 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4143 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4144 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4145 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4147 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4148 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4149 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4151 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4152 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4153 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4155 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4156 
	#NID_dh_°d_kdf
 946

	)

4158 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4159 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4161 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4162 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4163 
	#NID_˘_¥e˚π_s˘s
 951

	)

4164 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4166 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4167 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4168 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4169 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4171 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4172 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4173 
	#NID_˘_¥e˚π_sig√r
 953

	)

4174 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4176 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4177 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4178 
	#NID_˘_˚π_s˘s
 954

	)

4179 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4181 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4182 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4183 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4184 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4186 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4187 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4188 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4189 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4191 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4192 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4193 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4194 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@
1
.
1
/usr/include
282
6586
chat/chat.c
common/zlib.c
common/zlib.h
contrib/pppgetpass/pppgetpass.gtk.c
contrib/pppgetpass/pppgetpass.vt.c
include/linux/if_ppp.h
include/linux/ppp-comp.h
include/linux/ppp_defs.h
include/net/if_ppp.h
include/net/ppp-comp.h
include/net/ppp_defs.h
include/net/pppio.h
include/net/slcompress.h
include/net/vjcompress.h
modules/bsd-comp.c
modules/deflate.c
modules/if_ppp.c
modules/ppp.c
modules/ppp_ahdlc.c
modules/ppp_comp.c
modules/ppp_mod.h
modules/vjcompress.c
pppd/auth.c
pppd/cbcp.c
pppd/cbcp.h
pppd/ccp.c
pppd/ccp.h
pppd/chap-md5.c
pppd/chap-md5.h
pppd/chap-new.c
pppd/chap-new.h
pppd/chap_ms.c
pppd/chap_ms.h
pppd/demand.c
pppd/eap-tls.c
pppd/eap-tls.h
pppd/eap.c
pppd/eap.h
pppd/ecp.c
pppd/ecp.h
pppd/eui64.c
pppd/eui64.h
pppd/fsm.c
pppd/fsm.h
pppd/ipcp.c
pppd/ipcp.h
pppd/ipv6cp.c
pppd/ipv6cp.h
pppd/ipxcp.c
pppd/ipxcp.h
pppd/lcp.c
pppd/lcp.h
pppd/magic.c
pppd/magic.h
pppd/main.c
pppd/md4.c
pppd/md4.h
pppd/md5.c
pppd/md5.h
pppd/mppe.h
pppd/multilink.c
pppd/options.c
pppd/patchlevel.h
pppd/pathnames.h
pppd/plugins/minconn.c
pppd/plugins/passprompt.c
pppd/plugins/passwordfd.c
pppd/plugins/pppoatm/ans.c
pppd/plugins/pppoatm/atm.h
pppd/plugins/pppoatm/atmres.h
pppd/plugins/pppoatm/atmsap.h
pppd/plugins/pppoatm/misc.c
pppd/plugins/pppoatm/pppoatm.c
pppd/plugins/pppoatm/text2atm.c
pppd/plugins/pppoatm/text2qos.c
pppd/plugins/pppol2tp/l2tp_event.h
pppd/plugins/pppol2tp/openl2tp.c
pppd/plugins/pppol2tp/pppol2tp.c
pppd/plugins/radius/avpair.c
pppd/plugins/radius/buildreq.c
pppd/plugins/radius/clientid.c
pppd/plugins/radius/config.c
pppd/plugins/radius/dict.c
pppd/plugins/radius/includes.h
pppd/plugins/radius/ip_util.c
pppd/plugins/radius/lock.c
pppd/plugins/radius/md5.c
pppd/plugins/radius/options.h
pppd/plugins/radius/pathnames.h
pppd/plugins/radius/radattr.c
pppd/plugins/radius/radius.c
pppd/plugins/radius/radiusclient.h
pppd/plugins/radius/radrealms.c
pppd/plugins/radius/sendserver.c
pppd/plugins/radius/util.c
pppd/plugins/rp-pppoe/common.c
pppd/plugins/rp-pppoe/config.h
pppd/plugins/rp-pppoe/debug.c
pppd/plugins/rp-pppoe/discovery.c
pppd/plugins/rp-pppoe/if.c
pppd/plugins/rp-pppoe/plugin.c
pppd/plugins/rp-pppoe/pppoe-discovery.c
pppd/plugins/rp-pppoe/pppoe.h
pppd/plugins/winbind.c
pppd/pppcrypt.c
pppd/pppcrypt.h
pppd/pppd.h
pppd/session.c
pppd/session.h
pppd/sha1.c
pppd/sha1.h
pppd/spinlock.c
pppd/spinlock.h
pppd/srp-entry.c
pppd/sys-linux.c
pppd/sys-solaris.c
pppd/tdb.c
pppd/tdb.h
pppd/tty.c
pppd/upap.c
pppd/upap.h
pppd/utils.c
pppdump/bsd-comp.c
pppdump/deflate.c
pppdump/ppp-comp.h
pppdump/pppdump.c
pppdump/zlib.c
pppdump/zlib.h
pppstats/pppstats.c
scripts/chatchat/chatchat.c
solaris/ppp.c
solaris/ppp_ahdlc.c
solaris/ppp_ahdlc_mod.c
solaris/ppp_comp.c
solaris/ppp_comp_mod.c
solaris/ppp_mod.c
solaris/ppp_mod.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/assert.h
/usr/include/crypt.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/grp.h
/usr/include/lastlog.h
/usr/include/limits.h
/usr/include/linux/atm.h
/usr/include/linux/atmdev.h
/usr/include/linux/atmppp.h
/usr/include/linux/atmsap.h
/usr/include/linux/filter.h
/usr/include/linux/if.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_ppp.h
/usr/include/linux/if_pppol2tp.h
/usr/include/linux/if_pppox.h
/usr/include/linux/ipx.h
/usr/include/linux/ppp_defs.h
/usr/include/linux/route.h
/usr/include/linux/sockios.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/malloc.h
/usr/include/memory.h
/usr/include/mntent.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/if_ppp.h
/usr/include/net/ppp-comp.h
/usr/include/net/ppp_defs.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/netipx/ipx.h
/usr/include/netpacket/packet.h
/usr/include/openssl/bio.h
/usr/include/openssl/conf.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/hmac.h
/usr/include/openssl/ssl.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509v3.h
/usr/include/paths.h
/usr/include/pwd.h
/usr/include/resolv.h
/usr/include/shadow.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/stropts.h
/usr/include/syslog.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utmp.h
/usr/include/utmpx.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/arpa/nameser_compat.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/linux/atmapi.h
/usr/include/linux/atmioc.h
/usr/include/linux/bpf_common.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/libc-compat.h
/usr/include/linux/netdevice.h
/usr/include/linux/posix_types.h
/usr/include/linux/ppp-comp.h
/usr/include/linux/ppp-ioctl.h
/usr/include/linux/socket.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/evp.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/linux/if_link.h
/usr/include/linux/stddef.h
/usr/include/openssl/asn1.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/linux/netlink.h
/usr/include/openssl/obj_mac.h
/usr/include/wchar.h
/usr/include/linux/kernel.h
/usr/include/wctype.h
/usr/include/linux/sysinfo.h
